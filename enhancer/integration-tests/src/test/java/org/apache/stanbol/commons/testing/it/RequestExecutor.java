begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_comment
comment|/** Executes a Request and provides convenience methods  *  to validate the results.  */
end_comment

begin_class
specifier|public
class|class
name|RequestExecutor
block|{
specifier|private
specifier|final
name|HttpClient
name|httpClient
decl_stmt|;
specifier|private
name|HttpResponse
name|response
decl_stmt|;
specifier|private
name|HttpEntity
name|entity
decl_stmt|;
specifier|private
name|String
name|content
decl_stmt|;
specifier|public
name|RequestExecutor
parameter_list|(
name|HttpClient
name|client
parameter_list|)
block|{
name|httpClient
operator|=
name|client
expr_stmt|;
block|}
specifier|public
name|RequestExecutor
name|execute
parameter_list|(
name|Request
name|r
parameter_list|)
throws|throws
name|ClientProtocolException
throws|,
name|IOException
block|{
name|response
operator|=
name|httpClient
operator|.
name|execute
argument_list|(
name|r
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
comment|// We fully read the content every time, not super efficient but
comment|// how can we read it on demand while avoiding a (boring) cleanup()
comment|// method on this class?
name|content
operator|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|consume
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/** Verify that response matches supplied status */
specifier|public
name|RequestExecutor
name|assertStatus
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting status "
operator|+
name|expected
argument_list|,
name|expected
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Verify that response matches supplied content type */
specifier|public
name|RequestExecutor
name|assertContentType
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"No entity in response, cannot check content type"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expecting content type "
operator|+
name|expected
argument_list|,
name|expected
argument_list|,
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** For each supplied regexp, fail unless content contains at       *  least one line that matches.      *  Regexps are automatically prefixed/suffixed with .* so as      *  to have match partial lines.      */
specifier|public
name|RequestExecutor
name|assertContentRegexp
parameter_list|(
name|String
modifier|...
name|regexp
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|nextPattern
label|:
for|for
control|(
name|String
name|expr
range|:
name|regexp
control|)
block|{
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
operator|+
name|expr
operator|+
literal|".*"
argument_list|)
decl_stmt|;
specifier|final
name|LineIterator
name|it
init|=
operator|new
name|LineIterator
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|String
name|line
init|=
name|it
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue
name|nextPattern
continue|;
block|}
block|}
name|fail
argument_list|(
literal|"No match for regexp '"
operator|+
name|expr
operator|+
literal|"', content=\n"
operator|+
name|content
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/** For each supplied string, fail unless content contains it */
specifier|public
name|RequestExecutor
name|assertContentContains
parameter_list|(
name|String
modifier|...
name|expected
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|exp
range|:
name|expected
control|)
block|{
if|if
condition|(
operator|!
name|content
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Content does not contain '"
operator|+
name|exp
operator|+
literal|"', content=\n"
operator|+
name|content
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

