begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jobmanager
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Naive EnhancementJobManager implementation that keeps its request queue in  * memory.  *  * @scr.component immediate="true"  * @scr.service  * @scr.reference name="EnhancementEngine"  *                interface="org.apache.stanbol.enhancer.servicesapi.EnhancementEngine"  *                cardinality="0..n" policy="dynamic"  *  */
end_comment

begin_class
specifier|public
class|class
name|InMemoryJobManager
implements|implements
name|EnhancementJobManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryJobManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// handle thread safety efficiently when traversals (e.g. when calling
comment|// #enhanceContent) are expected to be much more frequent than mutable
comment|// operations (binding or unbinding engines).
comment|//NITE CopyOnWriteArrayList can no longer be used, becuase,
comment|//     Iterators over CopyOnWriteArrayList do not support add/remove ...
comment|//     Therefore this implementation can not be used for Collections.sort
comment|//     Therefore a new ArrayList is generated each time an add/reomve
comment|//     operation is performed
specifier|private
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|sortedEngineList
init|=
operator|new
name|ArrayList
argument_list|<
name|EnhancementEngine
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ExecutionOrderComparator
name|executionOrderComparator
init|=
operator|new
name|ExecutionOrderComparator
argument_list|()
decl_stmt|;
specifier|public
name|void
name|enhanceContent
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"enhanceContent({}), {} engines available"
argument_list|,
name|ci
argument_list|,
name|sortedEngineList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|EnhancementEngine
argument_list|>
name|engines
decl_stmt|;
comment|//changes in the sortedEngineList do creates new Lists. Therefore we need
comment|//only sync the creation of the Iterator. Calls to the iterator will
comment|//not trigger ConcurrentModificationExceptions
comment|//however the remove Method will not have any affect if the list was
comment|//changed.
synchronized|synchronized
init|(
name|sortedEngineList
init|)
block|{
name|engines
operator|=
name|sortedEngineList
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|engines
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EnhancementEngine
name|engine
init|=
name|engines
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] cannot be enhanced by engine [{}], skipping"
argument_list|,
name|ci
operator|.
name|getId
argument_list|()
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO should handle sync/async enhancing. All sync for now.
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"ContentItem [{}] enhanced by engine [{}]"
argument_list|,
name|ci
operator|.
name|getId
argument_list|()
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|bindEnhancementEngine
parameter_list|(
name|EnhancementEngine
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|sortedEngineList
init|)
block|{
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|EnhancementEngine
argument_list|>
argument_list|(
name|sortedEngineList
argument_list|)
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|newList
argument_list|,
name|executionOrderComparator
argument_list|)
expr_stmt|;
name|sortedEngineList
operator|=
name|newList
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"EnhancementEngine {} added to our list: {}"
argument_list|,
name|e
argument_list|,
name|sortedEngineList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unbindEnhancementEngine
parameter_list|(
name|EnhancementEngine
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|sortedEngineList
init|)
block|{
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|EnhancementEngine
argument_list|>
argument_list|(
name|sortedEngineList
argument_list|)
decl_stmt|;
name|newList
operator|.
name|remove
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sortedEngineList
operator|=
name|newList
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"EnhancementEngine {} removed from our list: {}"
argument_list|,
name|e
argument_list|,
name|sortedEngineList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|getActiveEngines
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|sortedEngineList
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ExecutionOrderComparator
implements|implements
name|Comparator
argument_list|<
name|EnhancementEngine
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EnhancementEngine
name|engine1
parameter_list|,
name|EnhancementEngine
name|engine2
parameter_list|)
block|{
name|Integer
name|order1
init|=
name|getOrder
argument_list|(
name|engine1
argument_list|)
decl_stmt|;
name|Integer
name|order2
init|=
name|getOrder
argument_list|(
name|engine2
argument_list|)
decl_stmt|;
comment|//start with the highest number finish with the lowest ...
return|return
name|order1
operator|==
name|order2
condition|?
literal|0
else|:
name|order1
operator|<
name|order2
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|Integer
name|getOrder
parameter_list|(
name|EnhancementEngine
name|engine
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"getOrder "
operator|+
name|engine
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|instanceof
name|ServiceProperties
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... implements ServiceProperties"
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
operator|(
operator|(
name|ServiceProperties
operator|)
name|engine
operator|)
operator|.
name|getServiceProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> value = "
operator|+
name|value
operator|+
literal|" "
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
return|;
block|}
block|}
return|return
name|ServiceProperties
operator|.
name|ORDERING_DEFAULT
return|;
block|}
block|}
block|}
end_class

end_unit

