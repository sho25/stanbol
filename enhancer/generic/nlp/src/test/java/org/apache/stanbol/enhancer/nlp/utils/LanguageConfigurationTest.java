begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|LanguageConfigurationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testExplicitLanguages
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"de,en"
argument_list|)
expr_stmt|;
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"jp"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ru"
block|,
literal|"fi"
block|}
argument_list|)
expr_stmt|;
name|lc
operator|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"ru"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"fi"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"jp"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test3"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"zh"
argument_list|,
literal|"jp"
argument_list|)
argument_list|)
expr_stmt|;
name|lc
operator|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"zh"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"jp"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExclusions
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"*,!de"
argument_list|)
expr_stmt|;
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"jp"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"!ru"
block|,
literal|"!fi"
block|,
literal|"*"
block|}
argument_list|)
expr_stmt|;
name|lc
operator|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"ru"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"fi"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"jp"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test3"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"!zh"
argument_list|,
literal|"*"
argument_list|,
literal|"!jp"
argument_list|)
argument_list|)
expr_stmt|;
name|lc
operator|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"zh"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"jp"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLanguageParameter
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"*,de;param1=test"
argument_list|)
expr_stmt|;
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|lc
operator|.
name|getParameter
argument_list|(
literal|"en"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"noParam"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|lc
operator|.
name|getParameters
argument_list|(
literal|"de"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|lc
operator|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|,
literal|"!ru"
block|,
literal|"fi;param1=test1;param2=test2;param3=test3"
block|}
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"fi"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"ru"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"fi"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test2"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"fi"
argument_list|,
literal|"param2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"fi"
argument_list|,
literal|"param3"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
name|lc
operator|.
name|getParameters
argument_list|(
literal|"fi"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test2"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConfigurationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParamsOnExcludedLanguage
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"*,!de;param=notAllowed"
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConfigurationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParamsIncludedAndExcludedLanguage
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"de,ru,!de"
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultParametersOnWildcard
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"*;param=default,de;param1=test1,!ru,es;param=overridden"
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//test defaults
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"en"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test merging with specific
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|lc
operator|.
name|getParameters
argument_list|(
literal|"de"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test overriding
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"overridden"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"es"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test that ru is excluded
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"ru"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|lc
operator|.
name|getParameters
argument_list|(
literal|"ru"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultParametersWithoutWildcard
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|";param=default,de;param1=test1,ru,es;param=overridden"
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//test no wildcard
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test defaults
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"ru"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test merging with specific
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|lc
operator|.
name|getParameters
argument_list|(
literal|"de"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test overriding
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"overridden"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"es"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountrySpecificConfigurations
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|LanguageConfiguration
name|lc
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|";param=default,de-AT;param1=test1,de;param2=test2"
argument_list|)
expr_stmt|;
name|lc
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//test no wildcard
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de-AT"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lc
operator|.
name|isLanguage
argument_list|(
literal|"de-CH"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test defaults
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de-AT"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de-CH"
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test specific
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test2"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test2"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de-CH"
argument_list|,
literal|"param2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test2"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de-AT"
argument_list|,
literal|"param2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//fallback from de-AT to de
comment|//test Country specificspecific
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de-AT"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|lc
operator|.
name|getParameter
argument_list|(
literal|"de-CH"
argument_list|,
literal|"param1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

