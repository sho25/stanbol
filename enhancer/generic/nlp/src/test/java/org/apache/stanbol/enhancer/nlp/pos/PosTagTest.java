begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PosTagTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLexicalCategoryInit
parameter_list|()
block|{
name|PosTag
name|tag
init|=
operator|new
name|PosTag
argument_list|(
literal|"test"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|tag
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|,
name|tag
operator|.
name|getCategories
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tag
operator|.
name|getPos
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSinglePosInit
parameter_list|()
block|{
name|PosTag
name|tag
init|=
operator|new
name|PosTag
argument_list|(
literal|"test"
argument_list|,
name|Pos
operator|.
name|ProperNoun
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|tag
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|,
name|tag
operator|.
name|getCategories
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|ProperNoun
argument_list|)
argument_list|,
name|tag
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|ProperNoun
argument_list|)
argument_list|,
name|tag
operator|.
name|getPosHierarchy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplePosInit
parameter_list|()
block|{
name|PosTag
name|tag
init|=
operator|new
name|PosTag
argument_list|(
literal|"test"
argument_list|,
name|Pos
operator|.
name|ProperNoun
argument_list|,
name|Pos
operator|.
name|PluralQuantifier
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|tag
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|LexicalCategory
operator|.
name|Noun
argument_list|,
name|LexicalCategory
operator|.
name|Quantifier
argument_list|)
argument_list|,
name|tag
operator|.
name|getCategories
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|ProperNoun
argument_list|,
name|Pos
operator|.
name|PluralQuantifier
argument_list|)
argument_list|,
name|tag
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|ProperNoun
argument_list|,
name|Pos
operator|.
name|PluralQuantifier
argument_list|)
argument_list|,
name|tag
operator|.
name|getPosHierarchy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLexCatAndMultiplePosInit
parameter_list|()
block|{
name|PosTag
name|tag
init|=
operator|new
name|PosTag
argument_list|(
literal|"test"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|,
name|Pos
operator|.
name|ProperNoun
argument_list|,
name|Pos
operator|.
name|PluralQuantifier
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|tag
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|LexicalCategory
operator|.
name|Noun
argument_list|,
name|LexicalCategory
operator|.
name|Quantifier
argument_list|)
argument_list|,
name|tag
operator|.
name|getCategories
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|ProperNoun
argument_list|,
name|Pos
operator|.
name|PluralQuantifier
argument_list|)
argument_list|,
name|tag
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|ProperNoun
argument_list|,
name|Pos
operator|.
name|PluralQuantifier
argument_list|)
argument_list|,
name|tag
operator|.
name|getPosHierarchy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPosWithHierarchyInit
parameter_list|()
block|{
name|PosTag
name|tag
init|=
operator|new
name|PosTag
argument_list|(
literal|"test"
argument_list|,
name|Pos
operator|.
name|Gerund
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|tag
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|,
name|tag
operator|.
name|getCategories
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|Gerund
argument_list|)
argument_list|,
name|tag
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Pos
operator|.
name|NonFiniteVerb
argument_list|,
name|Pos
operator|.
name|Gerund
argument_list|)
argument_list|,
name|tag
operator|.
name|getPosHierarchy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

