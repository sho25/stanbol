begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents a morphological interpretation of a {@link Token word}.   * Words might have different interpretations (typically depending on the POS)  * so this Tag allows to add information about all possible interpretations  * to a single word.<br>  * Note that the oder of added values via the different add** methods is preserved  * for lists returned by the get**List() methods. The get**() methods will return  * the first element of the list.  * @author Rupert Westenthaler  * @author Alessio Bosca  */
end_comment

begin_class
specifier|public
class|class
name|MorphoFeatures
block|{
specifier|private
specifier|final
name|String
name|lemma
decl_stmt|;
comment|/*      * NOTE: uses internally Objects to represent the different morphological      * features. This is because the assumption is that for most words most of      * the features will not be set AND that even if set most of the time there      * will be a single value.      * As this data structure will potentially instantiated for each word of an      * text this lazy initialization can save a lot of heap memory!      */
specifier|private
name|Object
name|posTags
decl_stmt|;
specifier|private
name|Object
name|genderTags
decl_stmt|;
specifier|private
name|Object
name|numberTags
decl_stmt|;
specifier|private
name|Object
name|caseFeatureTags
decl_stmt|;
specifier|private
name|Object
name|personValue
decl_stmt|;
specifier|private
name|Object
name|definitnessValue
decl_stmt|;
specifier|private
name|Object
name|verbFormTags
decl_stmt|;
specifier|private
name|Object
name|tenseTags
decl_stmt|;
specifier|public
name|MorphoFeatures
parameter_list|(
name|String
name|lemma
parameter_list|)
block|{
if|if
condition|(
name|lemma
operator|==
literal|null
operator|||
name|lemma
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed lemma MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|lemma
operator|=
name|lemma
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|getLemma
parameter_list|()
block|{
return|return
name|lemma
return|;
block|}
specifier|public
specifier|final
name|void
name|addCase
parameter_list|(
name|CaseTag
name|caseFeature
parameter_list|)
block|{
name|caseFeatureTags
operator|=
name|addTo
argument_list|(
name|caseFeatureTags
argument_list|,
name|caseFeature
argument_list|,
name|CaseTag
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|CaseTag
name|getCase
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|caseFeatureTags
argument_list|,
name|CaseTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|CaseTag
argument_list|>
name|getCaseList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|caseFeatureTags
argument_list|,
name|CaseTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|void
name|addDefinitness
parameter_list|(
name|Definitness
name|definitness
parameter_list|)
block|{
name|definitnessValue
operator|=
name|addTo
argument_list|(
name|definitnessValue
argument_list|,
name|definitness
argument_list|,
name|Definitness
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|Definitness
name|getDefinitness
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|definitnessValue
argument_list|,
name|Definitness
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|Definitness
argument_list|>
name|getDefinitnessList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|definitnessValue
argument_list|,
name|Definitness
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|void
name|addGender
parameter_list|(
name|GenderTag
name|gender
parameter_list|)
block|{
name|genderTags
operator|=
name|addTo
argument_list|(
name|genderTags
argument_list|,
name|gender
argument_list|,
name|GenderTag
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|GenderTag
name|getGender
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|genderTags
argument_list|,
name|GenderTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|GenderTag
argument_list|>
name|getGenderList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|genderTags
argument_list|,
name|GenderTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|void
name|addNumber
parameter_list|(
name|NumberTag
name|number
parameter_list|)
block|{
name|numberTags
operator|=
name|addTo
argument_list|(
name|numberTags
argument_list|,
name|number
argument_list|,
name|NumberTag
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|NumberTag
name|getNumber
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|numberTags
argument_list|,
name|NumberTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|NumberTag
argument_list|>
name|getNumberList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|numberTags
argument_list|,
name|NumberTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPerson
parameter_list|(
name|Person
name|person
parameter_list|)
block|{
name|personValue
operator|=
name|addTo
argument_list|(
name|personValue
argument_list|,
name|person
argument_list|,
name|Person
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|Person
name|getPerson
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|personValue
argument_list|,
name|Person
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|Person
argument_list|>
name|getPersonList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|personValue
argument_list|,
name|Person
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPos
parameter_list|(
name|PosTag
name|pos
parameter_list|)
block|{
name|posTags
operator|=
name|addTo
argument_list|(
name|posTags
argument_list|,
name|pos
argument_list|,
name|PosTag
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|PosTag
name|getPos
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|posTags
argument_list|,
name|PosTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|PosTag
argument_list|>
name|getPosList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|posTags
argument_list|,
name|PosTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|void
name|addTense
parameter_list|(
name|TenseTag
name|tense
parameter_list|)
block|{
name|tenseTags
operator|=
name|addTo
argument_list|(
name|tenseTags
argument_list|,
name|tense
argument_list|,
name|TenseTag
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|TenseTag
name|getTense
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|tenseTags
argument_list|,
name|TenseTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|TenseTag
argument_list|>
name|getTenseList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|tenseTags
argument_list|,
name|TenseTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|void
name|addVerbForm
parameter_list|(
name|VerbMoodTag
name|verbForm
parameter_list|)
block|{
name|verbFormTags
operator|=
name|addTo
argument_list|(
name|verbFormTags
argument_list|,
name|verbForm
argument_list|,
name|VerbMoodTag
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|VerbMoodTag
name|getVerbMood
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|verbFormTags
argument_list|,
name|VerbMoodTag
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|VerbMoodTag
argument_list|>
name|getVerbMoodList
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
name|verbFormTags
argument_list|,
name|VerbMoodTag
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|lemma
operator|.
name|hashCode
argument_list|()
operator|+
operator|(
name|posTags
operator|!=
literal|null
condition|?
name|posTags
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|genderTags
operator|!=
literal|null
condition|?
name|genderTags
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|personValue
operator|!=
literal|null
condition|?
name|personValue
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|caseFeatureTags
operator|!=
literal|null
condition|?
name|caseFeatureTags
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|definitnessValue
operator|!=
literal|null
condition|?
name|definitnessValue
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|verbFormTags
operator|!=
literal|null
condition|?
name|verbFormTags
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|tenseTags
operator|!=
literal|null
condition|?
name|tenseTags
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|MorphoFeatures
operator|&&
name|lemma
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|MorphoFeatures
operator|)
name|o
operator|)
operator|.
name|lemma
argument_list|)
condition|)
block|{
name|MorphoFeatures
name|lt
init|=
operator|(
name|MorphoFeatures
operator|)
name|o
decl_stmt|;
return|return
operator|(
operator|(
name|genderTags
operator|!=
literal|null
operator|&&
name|genderTags
operator|.
name|equals
argument_list|(
name|lt
operator|.
name|genderTags
argument_list|)
operator|)
operator|||
operator|(
name|genderTags
operator|==
literal|null
operator|&&
name|lt
operator|.
name|genderTags
operator|==
literal|null
operator|)
operator|)
operator|&&
operator|(
operator|(
name|caseFeatureTags
operator|!=
literal|null
operator|&&
name|caseFeatureTags
operator|.
name|equals
argument_list|(
name|lt
operator|.
name|caseFeatureTags
argument_list|)
operator|)
operator|||
operator|(
name|caseFeatureTags
operator|==
literal|null
operator|&&
name|lt
operator|.
name|caseFeatureTags
operator|==
literal|null
operator|)
operator|)
operator|&&
operator|(
operator|(
name|tenseTags
operator|!=
literal|null
operator|&&
name|tenseTags
operator|.
name|equals
argument_list|(
name|lt
operator|.
name|tenseTags
argument_list|)
operator|)
operator|||
operator|(
name|tenseTags
operator|==
literal|null
operator|&&
name|lt
operator|.
name|tenseTags
operator|==
literal|null
operator|)
operator|)
operator|&&
operator|(
operator|(
name|numberTags
operator|!=
literal|null
operator|&&
name|numberTags
operator|.
name|equals
argument_list|(
name|lt
operator|.
name|numberTags
argument_list|)
operator|)
operator|||
operator|(
name|numberTags
operator|==
literal|null
operator|&&
name|lt
operator|.
name|numberTags
operator|==
literal|null
operator|)
operator|)
operator|&&
operator|(
operator|(
name|definitnessValue
operator|!=
literal|null
operator|&&
name|definitnessValue
operator|.
name|equals
argument_list|(
name|lt
operator|.
name|definitnessValue
argument_list|)
operator|)
operator|||
operator|(
name|definitnessValue
operator|==
literal|null
operator|&&
name|lt
operator|.
name|definitnessValue
operator|==
literal|null
operator|)
operator|)
operator|&&
operator|(
operator|(
name|personValue
operator|!=
literal|null
operator|&&
name|personValue
operator|.
name|equals
argument_list|(
name|lt
operator|.
name|personValue
argument_list|)
operator|)
operator|||
operator|(
name|personValue
operator|==
literal|null
operator|&&
name|lt
operator|.
name|personValue
operator|==
literal|null
operator|)
operator|)
operator|&&
operator|(
operator|(
name|verbFormTags
operator|!=
literal|null
operator|&&
name|verbFormTags
operator|.
name|equals
argument_list|(
name|lt
operator|.
name|verbFormTags
argument_list|)
operator|)
operator|||
operator|(
name|verbFormTags
operator|==
literal|null
operator|&&
name|lt
operator|.
name|verbFormTags
operator|==
literal|null
operator|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"MorphoTag( lemma:"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lemma
argument_list|)
expr_stmt|;
if|if
condition|(
name|posTags
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
operator|.
name|append
argument_list|(
name|posTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|genderTags
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
operator|.
name|append
argument_list|(
name|genderTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numberTags
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
operator|.
name|append
argument_list|(
name|numberTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|personValue
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
operator|.
name|append
argument_list|(
name|personValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definitnessValue
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
operator|.
name|append
argument_list|(
name|definitnessValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|caseFeatureTags
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
operator|.
name|append
argument_list|(
name|caseFeatureTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbFormTags
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
operator|.
name|append
argument_list|(
name|verbFormTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tenseTags
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"|tense:"
argument_list|)
operator|.
name|append
argument_list|(
name|tenseTags
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* ------------------------------------------------------------      * Utility methods to read/write data to the Object fields      * by using lazzy initialization of single or multiple (List)      * values.      * ------------------------------------------------------------      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|addTo
parameter_list|(
name|Object
name|field
parameter_list|,
name|T
name|value
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|field
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
operator|(
operator|(
name|Collection
argument_list|<
name|T
argument_list|>
operator|)
name|field
operator|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|field
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
call|(
name|T
call|)
argument_list|(
operator|(
name|List
operator|)
name|field
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|T
operator|)
name|field
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getValues
parameter_list|(
name|Object
name|field
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|T
argument_list|>
operator|)
name|field
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|T
operator|)
name|field
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

