begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SentenceImpl
extends|extends
name|SectionImpl
implements|implements
name|Sentence
block|{
specifier|protected
name|SentenceImpl
parameter_list|(
name|AnalysedTextImpl
name|at
parameter_list|,
name|Span
name|relativeTo
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|super
argument_list|(
name|at
argument_list|,
name|SpanTypeEnum
operator|.
name|Sentence
argument_list|,
name|relativeTo
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.stanbol.enhancer.nlp.model.impl.Sentence#addChunk(int, int)      */
annotation|@
name|Override
specifier|public
name|ChunkImpl
name|addChunk
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|register
argument_list|(
operator|new
name|ChunkImpl
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.stanbol.enhancer.nlp.model.impl.Sentence#getChunks()      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Chunk
argument_list|>
name|getChunks
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|Chunk
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

