begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Annotated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|phrase
operator|.
name|PhraseTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_comment
comment|/**  * An TagSet used for tagging {@link Annotated} resources like {@link Token}s,  * {@link Chunk}s or even whole {@link Sentence}s and   * {@link AnalysedText Texts}s.<p>  * A TagSet defines a set of {@link Tag} and can be usd for one or more  * {@link #getLanguages() languages}.<p>  * {@link TagSet} uses generics to allow the specification of more specific   * TagSets e.g. for {@link PosTag} or {@link PhraseTag}s.<p>  */
end_comment

begin_class
specifier|public
class|class
name|TagSet
parameter_list|<
name|T
extends|extends
name|Tag
parameter_list|<
name|T
parameter_list|>
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|tag2PosTag
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Creates an AnnotationModel for Tags of a specific type (e.g.      * {@link PosTag} or {@link PhraseTag}) that can be used for the parsed      * Languages.<p>      * In addition AnnotationModels allow to add additional properties.      * Those can be used to assign information such as the       *  In addition this constructor allows to parse      * URIs for Ontologies that define the model and the linking to the      *<a herf="http://nlp2rdf.lod2.eu/olia/">nlp2rdf OLIA</a> annotation and      * linking models.<p>      * In the future those metadata might even be used by components to       * automatically create Annotation models.<p>      * NOTE that the parsed name us used as unique criteria. TODO this should      * be evaluated.       * @param name the unique name (is used for {@link #hashCode()} and       * @param languages the languages      */
specifier|public
name|TagSet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed name MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|languages
operator|!=
literal|null
operator|&&
name|languages
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|langSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languages
argument_list|)
argument_list|)
decl_stmt|;
name|langSet
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|langSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the properties of this AnnotationModel      * @return      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
comment|/**      * @return the name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return the languages      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLanguages
parameter_list|()
block|{
return|return
name|languages
return|;
block|}
comment|/**      * Adds an PosTag. This will replace any existing      * Tag with the same {@link Tag#getTag()} value!       * @param tag the tag to add to this TagSet      */
specifier|public
name|void
name|addTag
parameter_list|(
name|T
name|tag
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tag
operator|.
name|getAnnotationModel
argument_list|()
operator|!=
literal|null
operator|||
name|this
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|getAnnotationModel
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to add "
operator|+
name|tag
operator|+
literal|" to "
operator|+
name|this
operator|+
literal|"because it is already assigned to "
operator|+
name|tag
operator|.
name|getAnnotationModel
argument_list|()
argument_list|)
throw|;
block|}
name|tag
operator|.
name|setAnnotationModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|T
name|oldTag
init|=
name|tag2PosTag
operator|.
name|put
argument_list|(
name|tag
operator|.
name|getTag
argument_list|()
argument_list|,
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTag
operator|!=
literal|null
operator|&&
name|this
operator|.
name|equals
argument_list|(
name|oldTag
operator|.
name|getAnnotationModel
argument_list|()
argument_list|)
condition|)
block|{
name|oldTag
operator|.
name|setAnnotationModel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|T
name|getTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
return|return
name|tag2PosTag
operator|.
name|get
argument_list|(
name|tag
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|tag2PosTag
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"AnnotationModel [name: %s |lanuages: %s]"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|languages
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|TagSet
operator|&&
name|name
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TagSet
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

