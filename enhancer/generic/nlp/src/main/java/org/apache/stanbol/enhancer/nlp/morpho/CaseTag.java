begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_comment
comment|/**  * An Case tag typically assigned by a Morphological Analyzer (an  * NLP component) to a {@link Token}<p>  * @author Alessio Bosca  */
end_comment

begin_class
specifier|public
class|class
name|CaseTag
extends|extends
name|Tag
argument_list|<
name|CaseTag
argument_list|>
block|{
specifier|private
specifier|final
name|Case
name|caseCategory
decl_stmt|;
comment|/**      * Creates a new Case tag for the parsed tag. The created Tag is not      * assigned to any {@link Case}.<p> This constructor can be used      * by {@link EnhancementEngine}s that encounter an Tag they do not know       * (e.g. that is not defined by the configured {@link TagSet}).<p>      * @param tag the Tag      * @throws IllegalArgumentException if the parsed tag is<code>null</code>      * or empty.      */
specifier|public
name|CaseTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a CaseTag that is assigned to a {@link Case}      * @param tag the tag      * @param case the lexical case or<code>null</code> if not known      * @throws IllegalArgumentException if the parsed tag is<code>null</code>      * or empty.      */
specifier|public
name|CaseTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|Case
name|caseCat
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|caseCategory
operator|=
name|caseCat
expr_stmt|;
block|}
comment|/**      * The case of this tag (if known)      * @return the case or<code>null</code> if not mapped to any      */
specifier|public
name|Case
name|getCase
parameter_list|()
block|{
return|return
name|this
operator|.
name|caseCategory
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"CASE %s (%s)"
argument_list|,
name|tag
argument_list|,
name|caseCategory
operator|==
literal|null
condition|?
literal|"none"
else|:
name|caseCategory
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|tag
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|&&
name|obj
operator|instanceof
name|CaseTag
operator|&&
operator|(
name|caseCategory
operator|==
literal|null
operator|&&
operator|(
operator|(
name|CaseTag
operator|)
name|obj
operator|)
operator|.
name|caseCategory
operator|==
literal|null
operator|)
operator|||
operator|(
name|caseCategory
operator|!=
literal|null
operator|&&
name|caseCategory
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CaseTag
operator|)
name|obj
operator|)
operator|.
name|caseCategory
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

