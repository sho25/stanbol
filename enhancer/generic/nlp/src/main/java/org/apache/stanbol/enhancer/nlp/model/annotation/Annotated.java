begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_interface
specifier|public
interface|interface
name|Annotated
block|{
comment|/**      * Method for requesting Values of a given Key. This allows to request      * Values without an {@link Annotation}.      * @param key the Key      * @return the Value with the highest probability      */
name|Value
argument_list|<
name|?
argument_list|>
name|getValue
parameter_list|(
name|Object
name|key
parameter_list|)
function_decl|;
comment|/**      * Method for requesting the Value of an Annotation.      * @param annotation the requested {@link Annotation}      * @return the Value with the highest probability      * @throws ClassCastException if values of {@link Annotation#getKey()} are      * not of type V      */
parameter_list|<
name|V
parameter_list|>
name|Value
argument_list|<
name|V
argument_list|>
name|getAnnotation
parameter_list|(
name|Annotation
argument_list|<
name|?
argument_list|,
name|V
argument_list|>
name|annotation
parameter_list|)
function_decl|;
comment|/**      * Method for requesting Values of a given Key. This allows to request      * Values without an {@link Annotation}.      * @param key the Key      * @return all Value sorted by probability      */
name|List
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|getValues
parameter_list|(
name|Object
name|key
parameter_list|)
function_decl|;
comment|/**      * Method for requesting the Value of an Annotation.      * @param annotation the requested {@link Annotation}      * @return all Values sorted by probability      * @throws ClassCastException if the returned value of       * {@link Annotation#getKey()} is not of type V      */
parameter_list|<
name|V
parameter_list|>
name|List
argument_list|<
name|Value
argument_list|<
name|V
argument_list|>
argument_list|>
name|getAnnotations
parameter_list|(
name|Annotation
argument_list|<
name|?
argument_list|,
name|V
argument_list|>
name|annotation
parameter_list|)
function_decl|;
comment|/**      * Appends an Annotation to eventually already existing values       * @param annotation the annotation      * @param value the value to append      */
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|addAnnotation
parameter_list|(
name|Annotation
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|annotation
parameter_list|,
name|Value
argument_list|<
name|V
argument_list|>
name|value
parameter_list|)
function_decl|;
comment|/**      * Replaces existing Annotations with the parsed one      * @param annotation the annotation      * @param value the value for the annotation      */
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|setAnnotation
parameter_list|(
name|Annotation
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|annotation
parameter_list|,
name|Value
argument_list|<
name|V
argument_list|>
name|value
parameter_list|)
function_decl|;
comment|/**      * Appends an Annotation to eventually already existing values       * @param annotation the annotation      * @param value the value to append      */
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|addAnnotations
parameter_list|(
name|Annotation
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|annotation
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
function_decl|;
comment|/**      * Replaces existing Annotations with the parsed one      * @param annotation the annotation      * @param value the value for the annotation      */
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|setAnnotations
parameter_list|(
name|Annotation
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|annotation
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

