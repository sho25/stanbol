begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|Tag
parameter_list|<
name|T
extends|extends
name|Tag
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
comment|//lol ??!! is that how to define T
specifier|protected
specifier|final
name|String
name|tag
decl_stmt|;
specifier|private
name|TagSet
argument_list|<
name|T
argument_list|>
name|annotationModel
decl_stmt|;
comment|/**      * Creates a PosTag for the given String      * @param tag the tag      * @throws IllegalArgumentException if the parsed tag is<code>null</code>      * or empty.      */
specifier|public
name|Tag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
literal|null
operator|||
name|tag
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The tag MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
comment|/**      * @return the annotationModel      */
specifier|public
specifier|final
name|TagSet
argument_list|<
name|T
argument_list|>
name|getAnnotationModel
parameter_list|()
block|{
return|return
name|annotationModel
return|;
block|}
comment|/**      * Used by the {@link TagSet} class to assign itself to an PosTag      * that is {@link TagSet#addTag(PosTag) added}.      * @param annotationModel the annotationModel to set      */
specifier|protected
specifier|final
name|void
name|setAnnotationModel
parameter_list|(
name|TagSet
argument_list|<
name|T
argument_list|>
name|annotationModel
parameter_list|)
block|{
name|this
operator|.
name|annotationModel
operator|=
name|annotationModel
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %s "
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|tag
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|tag
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Tag
operator|&&
name|tag
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Tag
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|tag
argument_list|)
condition|)
block|{
return|return
operator|(
name|annotationModel
operator|==
literal|null
operator|&&
operator|(
operator|(
name|Tag
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|annotationModel
operator|==
literal|null
operator|)
operator|||
operator|(
name|annotationModel
operator|!=
literal|null
operator|&&
name|annotationModel
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Tag
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|annotationModel
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

