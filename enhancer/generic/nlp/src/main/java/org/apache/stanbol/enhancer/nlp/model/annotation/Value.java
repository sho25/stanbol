begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Value
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * For Values that do not have a probability we use<code>-1.0d</code>      */
specifier|public
specifier|static
specifier|final
name|double
name|UNKNOWN_PROBABILITY
init|=
operator|-
literal|1.0d
decl_stmt|;
comment|/**      * The value      */
specifier|private
specifier|final
name|T
name|value
decl_stmt|;
comment|/**      * The probability of the Annotation      */
specifier|private
specifier|final
name|double
name|probability
decl_stmt|;
comment|/**      * Creates an Annotation for the value with an {@link #UNKNOWN_PROBABILITY      * unknown probability}.      * @param value the value      */
specifier|public
name|Value
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
name|UNKNOWN_PROBABILITY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Value
parameter_list|(
name|T
name|value
parameter_list|,
name|double
name|probability
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Value MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|probability
operator|!=
name|UNKNOWN_PROBABILITY
operator|&&
operator|(
name|probability
operator|>
literal|1
operator|||
name|probability
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Probabilities MUST BE in the range [0..1]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|probability
operator|=
name|probability
expr_stmt|;
block|}
specifier|public
specifier|final
name|T
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|final
name|double
name|probability
parameter_list|()
block|{
return|return
name|probability
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Value
argument_list|<
name|T
argument_list|>
name|value
parameter_list|(
name|T
name|value
parameter_list|)
block|{
return|return
operator|new
name|Value
argument_list|<
name|T
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Value
argument_list|<
name|T
argument_list|>
name|value
parameter_list|(
name|T
name|value
parameter_list|,
name|double
name|probability
parameter_list|)
block|{
return|return
operator|new
name|Value
argument_list|<
name|T
argument_list|>
argument_list|(
name|value
argument_list|,
name|probability
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Value
argument_list|<
name|T
argument_list|>
argument_list|>
name|values
parameter_list|(
name|T
modifier|...
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Value
argument_list|<
name|T
argument_list|>
argument_list|>
name|valList
init|=
operator|new
name|ArrayList
argument_list|<
name|Value
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|value
range|:
name|values
control|)
block|{
name|valList
operator|.
name|add
argument_list|(
operator|new
name|Value
argument_list|<
name|T
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|valList
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Value
argument_list|<
name|T
argument_list|>
argument_list|>
name|values
parameter_list|(
name|T
index|[]
name|values
parameter_list|,
name|double
index|[]
name|probabilities
parameter_list|)
block|{
return|return
name|values
argument_list|(
name|values
argument_list|,
name|probabilities
argument_list|,
name|values
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Value
argument_list|<
name|T
argument_list|>
argument_list|>
name|values
parameter_list|(
name|T
index|[]
name|values
parameter_list|,
name|double
index|[]
name|probabilities
parameter_list|,
name|int
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|Value
argument_list|<
name|T
argument_list|>
argument_list|>
name|valList
init|=
operator|new
name|ArrayList
argument_list|<
name|Value
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|elements
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
name|i
operator|++
control|)
block|{
name|valList
operator|.
name|add
argument_list|(
operator|new
name|Value
argument_list|<
name|T
argument_list|>
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|probabilities
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|valList
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|//for long hash see
comment|//http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#hashCode()
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|probability
argument_list|)
decl_stmt|;
return|return
name|value
operator|.
name|hashCode
argument_list|()
operator|+
call|(
name|int
call|)
argument_list|(
name|bits
operator|^
operator|(
name|bits
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|Value
operator|&&
name|value
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|value
argument_list|)
operator|&&
name|probability
operator|==
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|probability
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Value ["
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|probability
operator|!=
name|UNKNOWN_PROBABILITY
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|".prob="
argument_list|)
operator|.
name|append
argument_list|(
name|probability
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Comparator that sorts Values ONLY based on {@link Value#probability()} -      * DO NOT USE with {@link Set} implementations as it will only allow a       * single Value with the same probability.<p>      * Values with {@link #UNKNOWN_PROBABILITY} are considered as lowest      * probability.      */
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|PROBABILITY_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Value
argument_list|<
name|?
argument_list|>
name|o1
parameter_list|,
name|Value
argument_list|<
name|?
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|o2
operator|.
name|probability
argument_list|,
name|o1
operator|.
name|probability
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

