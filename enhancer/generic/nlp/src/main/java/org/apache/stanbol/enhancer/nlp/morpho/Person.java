begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_comment
comment|/**  * Enumeration representing the different persons of words based on the<a*  * href="http://purl.org/olia/olia.owl">OLIA</a> Ontology  *   */
end_comment

begin_enum
specifier|public
enum|enum
name|Person
block|{
comment|/**      * Refers to the speaker and one or more nonparticipants, but not hearer(s). Contrasts with      * FirstPersonInclusive (Crystal 1997: 285). (http://purl.oclc.org/linguistics/gold/First)      */
name|First
argument_list|(
literal|"FirstPerson"
argument_list|)
block|,
comment|/**      * Refers to the person(s) the speaker is addressing (Crystal 1997: 285).      * (http://purl.oclc.org/linguistics/gold/Second)      */
name|Second
argument_list|(
literal|"SecondPerson"
argument_list|)
block|,
comment|/**      * Third person is deictic reference to a referent(s) not identified as the speaker or addressee. For      * example in English "he", "she", "they" or the third person singular verb suffix -s, e.g. in      * "Hesometimes flies."      * (http://www.sil.org/linguistics/GlossaryOfLinguisticTerms/WhatIsThirdPersonDeixis.htm 20.11.06)      */
name|Third
argument_list|(
literal|"ThirdPerson"
argument_list|)
block|;
specifier|static
specifier|final
name|String
name|OLIA_NAMESPACE
init|=
literal|"http://purl.org/olia/olia.owl#"
decl_stmt|;
name|UriRef
name|uri
decl_stmt|;
name|Person
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Person
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|uri
operator|=
operator|new
name|UriRef
argument_list|(
name|OLIA_NAMESPACE
operator|+
operator|(
name|name
operator|==
literal|null
condition|?
name|name
argument_list|()
else|:
name|name
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UriRef
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
block|}
end_enum

end_unit

