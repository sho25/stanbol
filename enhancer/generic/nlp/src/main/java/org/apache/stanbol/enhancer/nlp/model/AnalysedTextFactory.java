begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|impl
operator|.
name|AnalysedTextFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|NoSuchPartException
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of the {@link AnalysedTextFactory} that  * provides the implementation of the {@link #createAnalysedText(ContentItem, Blob)}  * based on the {@link #createAnalysedText(Blob)} method.  *<p>  * The {@link #getDefaultInstance()} methods returns the in-memory implementation  * of the AnalyzedText domain model and should only be used outside of an  * OSGI Service as implementation are also registered as OSGI services.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AnalysedTextFactory
block|{
specifier|private
specifier|static
name|AnalysedTextFactory
name|defaultInstance
init|=
operator|new
name|AnalysedTextFactoryImpl
argument_list|()
decl_stmt|;
comment|/**      * Creates an {@link AnalysedText} instance for the parsed {@link Blob}      * and registers itself as       * {@link ContentItem#addPart(org.apache.clerezza.rdf.core.UriRef, Object)       * ContentPart} with the {@link UriRef} {@link AnalysedText#ANALYSED_TEXT_URI}      * to the parsed {@link ContentItem}.<p>      * If already a ContentPart with the given UriRef is registered this       * Method will throw an {@link IllegalStateException}.      * @param ci the ContentItem to register the created {@link AnalysedText} instance      * @param blob the analysed {@link Blob}      * @return the created {@link AnalysedText}      * @throws IllegalArgumentException of<code>null</code> is parsed as      * ContentItem or Blob      * @throws IllegalStateException if there is already an ContentPart is      * registered for {@link AnalysedText#ANALYSED_TEXT_URI} with the parsed      * ContentItem.      * @throws IOException on any error while reading data from the parsed blob      */
specifier|public
specifier|final
name|AnalysedText
name|createAnalysedText
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|AnalysedText
name|existing
init|=
name|ci
operator|.
name|getPart
argument_list|(
name|AnalysedText
operator|.
name|ANALYSED_TEXT_URI
argument_list|,
name|AnalysedText
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The AnalysedText ContentPart already exists (impl: "
operator|+
name|existing
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"| blob: "
operator|+
name|existing
operator|.
name|getBlob
argument_list|()
operator|.
name|getMimeType
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchPartException
name|e
parameter_list|)
block|{
comment|//this is the expected case
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"A ContentPart with the URI '"
operator|+
name|AnalysedText
operator|.
name|ANALYSED_TEXT_URI
operator|+
literal|"' already exists but the parts "
operator|+
literal|"type is not compatible with "
operator|+
name|AnalysedText
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|//create the Analysed text
name|AnalysedText
name|at
init|=
name|createAnalysedText
argument_list|(
name|blob
argument_list|)
decl_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//NOTE: there is a possibility that an other thread has added
comment|// the contentpart
name|ci
operator|.
name|addPart
argument_list|(
name|AnalysedText
operator|.
name|ANALYSED_TEXT_URI
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|at
return|;
block|}
comment|/**      * Creates a AnalysedText instance for the parsed blob.<p>      * NOTE: This implementation does NOT register the {@link AnalysedText}      * as ContentPart.       * @param blob the analysed Blob      * @return the AnalysedText      * @throws IllegalArgumentException if<code>null</code> is parsed as       * {@link Blob}.      * @throws IOException on any error while reading data from the parsed blob      */
specifier|public
specifier|abstract
name|AnalysedText
name|createAnalysedText
parameter_list|(
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Intended to be used outside of an OSGI container to obtain an      * instance of a {@link AnalysedTextFactory}.<p>      * When using this within an OSGI environment it is preferred to obtain      * the factory as a service (e.g. via the BundleContext, an ServiceTracker      * or by injection). As this allows the usage of different implementations.      *<p>      * This is hard-wired with the default implementation contained within this      * module.      * @return the default {@link AnalysedTextFactory} instance.      */
specifier|public
specifier|static
specifier|final
name|AnalysedTextFactory
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
block|}
end_class

end_unit

