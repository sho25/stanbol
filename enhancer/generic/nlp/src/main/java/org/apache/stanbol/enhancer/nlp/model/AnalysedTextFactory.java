begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|impl
operator|.
name|AnalysedTextFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AnalysedTextFactory
block|{
specifier|private
specifier|static
name|AnalysedTextFactory
name|defaultInstance
init|=
operator|new
name|AnalysedTextFactoryImpl
argument_list|()
decl_stmt|;
comment|/**      * Creates an {@link AnalysedText} instance for the parsed {@link Blob}      * and registers itself as       * {@link ContentItem#addPart(org.apache.clerezza.rdf.core.UriRef, Object)       * ContentPart} with the {@link UriRef} {@link AnalysedText#ANALYSED_TEXT_URI}      * to the parsed {@link ContentItem}.<p>      * If already a ContentPart with the given UriRef is registered this       * Method will throw an {@link IllegalStateException}.      * @param ci the ContentItem to register the created {@link AnalysedText} instance      * @param blob the analysed {@link Blob}      * @return the created {@link AnalysedText}      * @throws IllegalArgumentException of<code>null</code> is parsed as      * ContentItem or Blob      * @throws IllegalStateException if there is already an ContentPart is      * registered for {@link AnalysedText#ANALYSED_TEXT_URI} with the parsed      * ContentItem.      * @throws IOException on any error while reading data from the parsed blob      */
specifier|public
specifier|abstract
name|AnalysedText
name|createAnalysedText
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Creates a AnalysedText instance for the parsed blob.<p>      * NOTE: This implementation does NOT register the {@link AnalysedText}      * as ContentPart.       * @param blob the analysed Blob      * @return the AnalysedText      * @throws IllegalArgumentException if<code>null</code> is parsed as       * {@link Blob}.      * @throws IOException on any error while reading data from the parsed blob      */
specifier|public
specifier|abstract
name|AnalysedText
name|createAnalysedText
parameter_list|(
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Intended to be used outside of an OSGI container to obtain an      * instance of a {@link AnalysedTextFactory}.<p>      * When using this within an OSGI environment it is preferred to obtain      * the factory as a service (e.g. via the BundleContext, an ServiceTracker      * or by injection). As this allows the usage of different implementations.      *<p>      * This is hard-wired with the default implementation contained within this      * module.      * @return the default {@link AnalysedTextFactory} instance.      */
specifier|public
specifier|static
specifier|final
name|AnalysedTextFactory
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
block|}
end_class

end_unit

