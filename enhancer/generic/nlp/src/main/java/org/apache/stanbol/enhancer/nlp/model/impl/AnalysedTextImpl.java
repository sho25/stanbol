begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_comment
comment|/**  * The Class added as ContentPart to the contentItem  * @author westei  *  */
end_comment

begin_class
specifier|public
class|class
name|AnalysedTextImpl
extends|extends
name|SectionImpl
implements|implements
name|AnalysedText
block|{
specifier|private
specifier|final
name|Blob
name|blob
decl_stmt|;
comment|/**      * The analysed text      */
specifier|private
name|String
name|text
decl_stmt|;
specifier|protected
name|NavigableMap
argument_list|<
name|Span
argument_list|,
name|Span
argument_list|>
name|spans
init|=
operator|new
name|TreeMap
argument_list|<
name|Span
argument_list|,
name|Span
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AnalysedTextImpl
parameter_list|(
name|Blob
name|blob
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|SpanTypeEnum
operator|.
name|Text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//the the context to itself
name|this
operator|.
name|blob
operator|=
name|blob
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SpanTypeEnum
name|getType
parameter_list|()
block|{
return|return
name|SpanTypeEnum
operator|.
name|Text
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.stanbol.enhancer.nlp.model.impl.AnalyzedText#addSentence(int, int)      */
annotation|@
name|Override
specifier|public
name|SentenceImpl
name|addSentence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|register
argument_list|(
operator|new
name|SentenceImpl
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.stanbol.enhancer.nlp.model.impl.AnalyzedText#getSentences()      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Sentence
argument_list|>
name|getSentences
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|Sentence
operator|.
name|class
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.stanbol.enhancer.nlp.model.impl.Sentence#addChunk(int, int)      */
annotation|@
name|Override
specifier|public
name|ChunkImpl
name|addChunk
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|register
argument_list|(
operator|new
name|ChunkImpl
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.stanbol.enhancer.nlp.model.impl.Sentence#getChunks()      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Chunk
argument_list|>
name|getChunks
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|Chunk
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Reference to the Blob those data got analysed      * @return      */
specifier|public
specifier|final
name|Blob
name|getAnalysedBlob
parameter_list|()
block|{
return|return
name|blob
return|;
block|}
annotation|@
name|Override
specifier|public
name|CharSequence
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|getBlob
parameter_list|()
block|{
return|return
name|blob
return|;
block|}
block|}
end_class

end_unit

