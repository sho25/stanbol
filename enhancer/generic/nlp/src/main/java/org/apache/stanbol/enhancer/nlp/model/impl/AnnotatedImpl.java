begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Annotated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_class
specifier|public
class|class
name|AnnotatedImpl
implements|implements
name|Annotated
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|annotations
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|annotations
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_SET
else|:
name|annotations
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Value
argument_list|<
name|?
argument_list|>
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|annotations
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|value
init|=
name|annotations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Value
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|value
operator|)
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|final
name|List
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|getValues
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|annotations
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Object
name|value
init|=
name|annotations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Value
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|singleton
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
decl_stmt|;
return|return
operator|(
name|List
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|singleton
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|final
parameter_list|<
name|V
parameter_list|>
name|Value
argument_list|<
name|V
argument_list|>
name|getAnnotation
parameter_list|(
name|Annotation
argument_list|<
name|V
argument_list|>
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotations
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|value
init|=
name|annotations
operator|.
name|get
argument_list|(
name|annotation
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Value
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|Value
argument_list|<
name|V
argument_list|>
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Value
argument_list|<
name|V
argument_list|>
index|[]
operator|)
name|value
operator|)
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|final
parameter_list|<
name|V
parameter_list|>
name|List
argument_list|<
name|Value
argument_list|<
name|V
argument_list|>
argument_list|>
name|getAnnotations
parameter_list|(
name|Annotation
argument_list|<
name|V
argument_list|>
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotations
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Object
name|value
init|=
name|annotations
operator|.
name|get
argument_list|(
name|annotation
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Value
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|singleton
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
decl_stmt|;
return|return
operator|(
name|List
argument_list|<
name|Value
argument_list|<
name|V
argument_list|>
argument_list|>
operator|)
name|singleton
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Value
argument_list|<
name|V
argument_list|>
index|[]
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|addAnnotations
parameter_list|(
name|Annotation
argument_list|<
name|V
argument_list|>
name|annotation
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|addValuesInternal
argument_list|(
name|annotation
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addValues
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|addValuesInternal
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**      * Just here because of Java generics combined with Collections ...      * @param key      * @param values      */
specifier|private
name|void
name|addValuesInternal
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|initAnnotations
argument_list|()
decl_stmt|;
name|Object
name|currentValue
init|=
name|annotations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|newValues
decl_stmt|;
if|if
condition|(
name|currentValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|newValues
operator|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newValues
operator|=
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|Value
argument_list|<
name|?
argument_list|>
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|newValues
argument_list|,
name|Value
operator|.
name|PROBABILITY_COMPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentValue
operator|instanceof
name|Value
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|newValues
operator|=
operator|new
name|Value
argument_list|<
name|?
argument_list|>
index|[
name|values
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|newValues
operator|)
index|[
literal|0
index|]
operator|=
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|currentValue
expr_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Object
name|value
operator|:
name|values
control|)
block|{
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|newValues
operator|)
index|[
name|index
index|]
operator|=
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|value
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|newValues
argument_list|,
name|Value
operator|.
name|PROBABILITY_COMPARATOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//an Array
name|int
name|length
init|=
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|currentValue
operator|)
operator|.
name|length
decl_stmt|;
name|newValues
operator|=
operator|new
name|Value
argument_list|<
name|?
argument_list|>
index|[
name|values
operator|.
name|size
argument_list|()
operator|+
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentValue
argument_list|,
literal|0
argument_list|,
name|newValues
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|newValues
operator|)
index|[
name|length
index|]
operator|=
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|value
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|newValues
argument_list|,
name|Value
operator|.
name|PROBABILITY_COMPARATOR
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
parameter_list|(
name|key
parameter_list|,
name|newValues
parameter_list|)
constructor_decl|;
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|setAnnotations
parameter_list|(
name|Annotation
argument_list|<
name|V
argument_list|>
name|annotation
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|setValuesInternal
argument_list|(
name|annotation
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setValues
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|<
name|?
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|setValuesInternal
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Just here because of Java generics combined with Collections ...      * @param key      * @param values      */
end_comment

begin_function
specifier|private
name|void
name|setValuesInternal
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|initAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we need to copy, because users might change the parsed Array!
name|Value
argument_list|<
name|?
argument_list|>
index|[]
name|copy
init|=
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|Value
argument_list|<
name|?
argument_list|>
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|copy
argument_list|,
name|Value
operator|.
name|PROBABILITY_COMPARATOR
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initAnnotations
parameter_list|()
block|{
if|if
condition|(
name|annotations
operator|==
literal|null
condition|)
block|{
comment|//avoid sync for the typical case
name|annotations
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|annotations
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|addAnnotation
parameter_list|(
name|Annotation
argument_list|<
name|V
argument_list|>
name|annotation
parameter_list|,
name|Value
argument_list|<
name|V
argument_list|>
name|value
parameter_list|)
block|{
name|addValue
argument_list|(
name|annotation
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addValue
parameter_list|(
name|String
name|key
parameter_list|,
name|Value
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|initAnnotations
argument_list|()
decl_stmt|;
name|Object
name|currentValue
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentValue
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentValue
operator|instanceof
name|Value
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Value
argument_list|<
name|?
argument_list|>
index|[]
name|newValues
init|=
operator|new
name|Value
argument_list|<
name|?
argument_list|>
index|[]
block|{
operator|(
name|Value
argument_list|<
name|?
argument_list|>
operator|)
name|currentValue
operator|,
name|value
block|}
empty_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|newValues
argument_list|,
name|Value
operator|.
name|PROBABILITY_COMPARATOR
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//array
name|int
name|length
init|=
operator|(
operator|(
name|Value
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|currentValue
operator|)
operator|.
name|length
decl_stmt|;
name|Value
argument_list|<
name|?
argument_list|>
index|[]
name|newValues
init|=
operator|new
name|Value
argument_list|<
name|?
argument_list|>
index|[
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentValue
argument_list|,
literal|0
argument_list|,
name|newValues
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|newValues
index|[
name|length
index|]
operator|=
name|value
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|newValues
argument_list|,
name|Value
operator|.
name|PROBABILITY_COMPARATOR
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|setAnnotation
parameter_list|(
name|Annotation
argument_list|<
name|V
argument_list|>
name|annotation
parameter_list|,
name|Value
argument_list|<
name|V
argument_list|>
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|annotation
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|key
parameter_list|,
name|Value
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|annotations
operator|==
literal|null
operator|&&
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|initAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

