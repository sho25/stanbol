begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|coref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|Tag
import|;
end_import

begin_comment
comment|/**  * Represents a coreference resolution tag attached to a {@link Token}. It  * contains information about other {@link Token}s which refer to the  * aforementioned {@link Token}.  *   * @author Cristian Petroaca  *   */
end_comment

begin_class
specifier|public
class|class
name|CorefTag
extends|extends
name|Tag
argument_list|<
name|CorefTag
argument_list|>
block|{
comment|/** 	 * Shows whether the {@link Token} to which this tag is attached is the 	 * representative metion in the chain. 	 */
specifier|private
name|boolean
name|isRepresentative
decl_stmt|;
comment|/** 	 * A set of {@link Token}s representing metions of the {@link Token} to 	 * which this tag is attached. 	 */
specifier|private
name|Set
argument_list|<
name|Span
argument_list|>
name|mentions
decl_stmt|;
specifier|public
name|CorefTag
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|Collections
operator|.
expr|<
name|Span
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorefTag
parameter_list|(
name|boolean
name|isRepresentative
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|isRepresentative
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|Collections
operator|.
expr|<
name|Span
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorefTag
parameter_list|(
name|boolean
name|isRepresentative
parameter_list|,
name|Set
argument_list|<
name|Span
argument_list|>
name|mentions
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|isRepresentative
argument_list|,
name|mentions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorefTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|boolean
name|isRepresentative
parameter_list|,
name|Set
argument_list|<
name|Span
argument_list|>
name|mentions
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|isRepresentative
operator|=
name|isRepresentative
expr_stmt|;
name|this
operator|.
name|mentions
operator|=
name|mentions
expr_stmt|;
block|}
comment|/** 	 * Getter whether the {@link Token} to which this tag is attached is the 	 * representative mention in the chain. 	 *  	 * @return the representative state 	 */
specifier|public
name|boolean
name|isRepresentative
parameter_list|()
block|{
return|return
name|this
operator|.
name|isRepresentative
return|;
block|}
comment|/** 	 * Getter for the set of {@link Token}s representing mentions of the 	 * {@link Token} to which this tag is attached. 	 *  	 * @return 	 */
specifier|public
name|Set
argument_list|<
name|Span
argument_list|>
name|getMentions
parameter_list|()
block|{
return|return
name|this
operator|.
name|mentions
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|+
operator|(
operator|(
name|this
operator|.
name|mentions
operator|!=
literal|null
operator|)
condition|?
name|this
operator|.
name|mentions
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|&&
operator|(
name|obj
operator|instanceof
name|CorefTag
operator|)
operator|&&
operator|(
name|this
operator|.
name|mentions
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CorefTag
operator|)
name|obj
operator|)
operator|.
name|getMentions
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

