begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_comment
comment|/**  * An POS (part-of-speech) tag typically assigned by an POS-Tagger (an  * NLP component) to a {@link Token} by using the {@link POS#POS_ANNOTATION}<p>  * The only required field is {@link #getTag()} - the string tag assigned by  * the POS Tagger.<p>  * PosTags can be mapped to a {@link LexicalCategory} and be part of an  * {@link TagSet}. NOTE that the {@link TagSet} is set by  * the {@link TagSet#addTag(PosTag)} method.<p>  */
end_comment

begin_class
specifier|public
class|class
name|PosTag
extends|extends
name|Tag
argument_list|<
name|PosTag
argument_list|>
block|{
comment|/**      * The {@link LexicalCategory LexicalCategories} applying to this PosTag      */
specifier|private
specifier|final
name|Set
argument_list|<
name|LexicalCategory
argument_list|>
name|category
decl_stmt|;
comment|/**      * The mapped {@link Pos} tags. Empty if none are mapped      */
specifier|private
specifier|final
name|Set
argument_list|<
name|Pos
argument_list|>
name|pos
decl_stmt|;
comment|/**      * NOTE: NULL if {@link #pos} is empty!      */
specifier|private
specifier|final
name|Set
argument_list|<
name|Pos
argument_list|>
name|posHierarchy
decl_stmt|;
comment|/**      * Creates a new POS tag for the parsed tag. The created Tag is not      * assigned to any {@link LexicalCategory}.<p> This constructor can be used      * by {@link EnhancementEngine}s that encounter an Tag they do not know       * (e.g. that is not defined by the configured {@link TagSet}).<p>      * @param tag the Tag      * @throws IllegalArgumentException if the parsed tag is<code>null</code>      * or empty.      */
specifier|public
name|PosTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
operator|(
name|LexicalCategory
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a PosTag that is assigned to a {@link LexicalCategory}      * @param tag the tag      * @param category the lexical categor(ies) mapped to the tag      * @throws IllegalArgumentException if the parsed tag is<code>null</code>      * or empty.      */
specifier|public
name|PosTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|LexicalCategory
modifier|...
name|category
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|category
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|LexicalCategory
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|category
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|category
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|category
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pos
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|posHierarchy
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a PosTag that is assigned to a {@link LexicalCategory}      * @param tag the tag      * @param pos a concrete {@link Pos} mapped to the string      * @param furtherPos allows to add additional {@link Pos} mappings      * @throws IllegalArgumentException if the parsed tag is<code>null</code>      * or empty.      */
specifier|public
name|PosTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|Pos
name|pos
parameter_list|,
name|Pos
modifier|...
name|furtherPos
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|LexicalCategory
operator|.
name|class
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|pos
argument_list|,
name|furtherPos
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PosTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|LexicalCategory
name|category
parameter_list|,
name|Pos
name|pos
parameter_list|,
name|Pos
modifier|...
name|furtherPos
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
name|category
operator|==
literal|null
condition|?
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|LexicalCategory
operator|.
name|class
argument_list|)
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|category
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|pos
argument_list|,
name|furtherPos
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PosTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|Collection
argument_list|<
name|LexicalCategory
argument_list|>
name|categories
parameter_list|,
name|Collection
argument_list|<
name|Pos
argument_list|>
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
name|categories
argument_list|,
name|pos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PosTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|Collection
argument_list|<
name|LexicalCategory
argument_list|>
name|categories
parameter_list|,
name|Collection
argument_list|<
name|Pos
argument_list|>
name|pos
parameter_list|,
name|boolean
name|copy
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|copy
condition|)
block|{
name|this
operator|.
name|pos
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Pos
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|pos
operator|.
name|addAll
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|pos
operator|=
operator|(
name|EnumSet
argument_list|<
name|Pos
argument_list|>
operator|)
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|copy
condition|)
block|{
name|this
operator|.
name|category
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|LexicalCategory
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|categories
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|category
operator|.
name|addAll
argument_list|(
name|categories
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|category
operator|=
operator|(
name|EnumSet
argument_list|<
name|LexicalCategory
argument_list|>
operator|)
name|categories
expr_stmt|;
block|}
comment|//and the union over the pos parents
name|this
operator|.
name|posHierarchy
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Pos
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Pos
name|p
range|:
name|this
operator|.
name|pos
control|)
block|{
name|this
operator|.
name|posHierarchy
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|hierarchy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|category
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|categories
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The {@link LexicalCategory LexicalCategories} of this tag      * @return the {@link LexicalCategory LexicalCategories} or an      * empty {@link Set} if the string {@link #getTag() tag} is       * not mapped.      */
specifier|public
name|Set
argument_list|<
name|LexicalCategory
argument_list|>
name|getCategories
parameter_list|()
block|{
return|return
name|category
return|;
block|}
comment|/**      * Checks if this {@link PosTag} is mapped to the parsed      * {@link LexicalCategory}      * @param category the category      * @return<code>true</code> if this PosTag is mapped to      * the parsed category.      */
specifier|public
name|boolean
name|hasCategory
parameter_list|(
name|LexicalCategory
name|category
parameter_list|)
block|{
return|return
name|this
operator|.
name|category
operator|.
name|contains
argument_list|(
name|category
argument_list|)
return|;
block|}
comment|/**      * Checks if the {@link PosTag} is of the parsed {@link Pos}      * tag. This also considers the transitive hierarchy of      * the {@link Pos} enum.      * @param pos the {@link Pos} to check      * @return<code>true</code> if this PosTag is mapped to      * the parsed {@link Pos}.      */
specifier|public
name|boolean
name|hasPos
parameter_list|(
name|Pos
name|pos
parameter_list|)
block|{
return|return
name|this
operator|.
name|pos
operator|.
name|isEmpty
argument_list|()
condition|?
literal|false
else|:
name|posHierarchy
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> if this PosTag is mapped to a      * {@link LexicalCategory} or a {@link Pos} type as defined      * by the<a herf="">Olia</a> Ontology      * @return      */
specifier|public
name|boolean
name|isMapped
parameter_list|()
block|{
return|return
operator|!
name|category
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Getter for the {@link Pos} mapped to this PosTag      * @return the mapped {@link Pos} mapped to the string      * string {@link #getTag() tag} or an empty set of not      * mapped. This are the directly mapped {@link Pos} types      * and does not include the parent Pos types.      */
specifier|public
name|Set
argument_list|<
name|Pos
argument_list|>
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Pos
argument_list|>
name|getPosHierarchy
parameter_list|()
block|{
return|return
name|posHierarchy
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"pos: "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|null
operator|||
operator|!
name|category
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|pos
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pos
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//.name());
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|category
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|category
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//.name());
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|category
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|tag
operator|.
name|hashCode
argument_list|()
operator|+
name|category
operator|.
name|hashCode
argument_list|()
operator|+
name|pos
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|&&
name|obj
operator|instanceof
name|PosTag
operator|&&
name|category
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PosTag
operator|)
name|obj
operator|)
operator|.
name|category
argument_list|)
operator|&&
name|pos
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PosTag
operator|)
name|obj
operator|)
operator|.
name|pos
argument_list|)
return|;
block|}
block|}
end_class

end_unit

