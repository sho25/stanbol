begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_comment
comment|/**  * Defines verb tenses as defined by the  *<a href="">OLIA</a> Ontology.<p>  * The hierarchy is represented by this enumeration.  * The {@link Set} of parent concepts is accessible via  * the {@link #getParent()} and {@link #getTenses()}.  */
end_comment

begin_enum
specifier|public
enum|enum
name|Tense
block|{
name|NotAnchored
argument_list|(
literal|"NotTemporallyAnchored"
argument_list|)
block|,
name|Absolute
argument_list|(
literal|"AbsoluteTense"
argument_list|)
block|,
name|CloseFuture
parameter_list|(
name|Absolute
parameter_list|)
operator|,
constructor|Future(Absolute
block|)
enum|,
name|HodiernalFuture
argument_list|(
name|Future
argument_list|)
operator|,
name|ImmediateFuture
argument_list|(
name|Future
argument_list|)
operator|,
name|NearFuture
argument_list|(
name|Future
argument_list|)
operator|,
name|PostHodiernalFuture
argument_list|(
name|Future
argument_list|)
operator|,
name|RemoteFuture
argument_list|(
name|Future
argument_list|)
operator|,
name|SimpleFuture
argument_list|(
name|Future
argument_list|)
operator|,
name|Past
argument_list|(
name|Absolute
argument_list|)
operator|,
name|HesternalPast
argument_list|(
name|Past
argument_list|)
operator|,
name|HodiernalPast
argument_list|(
name|Past
argument_list|)
operator|,
name|ImmediatePast
argument_list|(
name|Past
argument_list|)
operator|,
name|RecentPast
argument_list|(
name|Past
argument_list|)
operator|,
name|RemotePast
argument_list|(
name|Past
argument_list|)
operator|,
name|SimplePast
argument_list|(
name|Past
argument_list|)
operator|,
name|StillPast
argument_list|(
name|Past
argument_list|)
operator|,
name|Imperfect
argument_list|(
name|StillPast
argument_list|)
operator|,
name|Aorist
argument_list|(
name|Past
argument_list|)
operator|,
name|Perfect
argument_list|(
name|Absolute
argument_list|)
operator|,
name|PreHodiernalPast
argument_list|(
name|Absolute
argument_list|)
operator|,
name|Present
argument_list|(
name|Absolute
argument_list|)
operator|,
name|Transgressive
argument_list|(
name|Present
argument_list|)
operator|,
name|AbsoluteRelative
argument_list|(
literal|"AbsoluteRelativeTense"
argument_list|)
operator|,
name|FutureInFuture
argument_list|(
name|AbsoluteRelative
argument_list|)
operator|,
name|FutureInPast
argument_list|(
name|AbsoluteRelative
argument_list|)
operator|,
name|PastPerfect
argument_list|(
literal|"PastPerfectTense"
argument_list|,
name|AbsoluteRelative
argument_list|)
operator|,
name|PastInFuture
argument_list|(
name|AbsoluteRelative
argument_list|)
operator|,
name|PluperfectTense
argument_list|(
name|AbsoluteRelative
argument_list|)
operator|,
name|Relative
argument_list|(
literal|"RelativeTense"
argument_list|)
operator|,
name|FuturePerfect
argument_list|(
name|Relative
argument_list|)
operator|,
name|RelativePast
argument_list|(
name|Relative
argument_list|)
operator|,
name|RelativePresent
argument_list|(
name|Relative
argument_list|)
operator|,
enum|;
end_enum

begin_decl_stmt
specifier|static
specifier|final
name|String
name|OLIA_NAMESPACE
init|=
literal|"http://purl.org/olia/olia.owl#"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|UriRef
name|uri
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Tense
name|parent
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Tense
argument_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
block|;     }
name|Tense
argument_list|(
name|Tense
name|parent
argument_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|parent
argument_list|)
block|;     }
name|Tense
argument_list|(
name|String
name|name
argument_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
block|;     }
name|Tense
argument_list|(
name|String
name|name
argument_list|,
name|Tense
name|parent
argument_list|)
block|{
name|uri
operator|=
operator|new
name|UriRef
argument_list|(
name|OLIA_NAMESPACE
operator|+
operator|(
name|name
operator|==
literal|null
operator|?
name|name
argument_list|()
operator|:
name|name
operator|)
argument_list|)
block|;
name|this
operator|.
name|parent
operator|=
name|parent
block|;     }
comment|/**      * Getter for the parent tense (e.g.      * {@link Tense#Future} for {@link Tense#NearFuture})      * @return the direct parent or<code>null</code> if none      */
specifier|public
name|Tense
name|getParent
argument_list|()
block|{
return|return
name|parent
return|;
block|}
end_expr_stmt

begin_comment
comment|/**      * Returns the transitive closure over      * the {@link #getParent() parent} tenses including      * this instance (e.g.      * [{@link Tense#Absolute}, {@link Tense#Future}, {@link Tense#NearFuture}] for      * {@link Tense#NearFuture}).<p>      * Implementation Note: Internally an {@link EnumSet} is used       * to represent the transitive closure. As the iteration order      * of an {@link EnumSet} is based on the natural order (the      * {@link Enum#ordinal()} values) AND the ordering of the      * Tenses in this enumeration is from generic to specific the      * ordering of the Tenses in the returned Set is guaranteed      * to be from generic to specific.      * @return the transitive closure over parent      * tenses.      */
end_comment

begin_function
specifier|public
name|Set
argument_list|<
name|Tense
argument_list|>
name|getTenses
parameter_list|()
block|{
return|return
name|transitiveClosureMap
operator|.
name|get
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|UriRef
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * This is needed because one can not create EnumSet instances before the      * initialization of an Enum has finished.<p>      * To keep using the much faster {@link EnumSet} a static member initialised      * in an static {} block is used as a workaround. The {@link Tense#getTenses()}      * method does use this static member instead of a member variable      */
end_comment

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Tense
argument_list|,
name|Set
argument_list|<
name|Tense
argument_list|>
argument_list|>
name|transitiveClosureMap
decl_stmt|;
end_decl_stmt

begin_static
static|static
block|{
name|transitiveClosureMap
operator|=
operator|new
name|EnumMap
argument_list|<
name|Tense
argument_list|,
name|Set
argument_list|<
name|Tense
argument_list|>
argument_list|>
argument_list|(
name|Tense
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Tense
name|tense
range|:
name|Tense
operator|.
name|values
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Tense
argument_list|>
name|parents
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|tense
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Tense
argument_list|>
name|transParents
init|=
name|transitiveClosureMap
operator|.
name|get
argument_list|(
name|tense
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transParents
operator|!=
literal|null
condition|)
block|{
name|parents
operator|.
name|addAll
argument_list|(
name|transParents
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tense
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|tense
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// else no parent
name|transitiveClosureMap
operator|.
name|put
argument_list|(
name|tense
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
block|}
end_static

unit|}
end_unit

