begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|json
operator|.
name|valuetype
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|json
operator|.
name|valuetype
operator|.
name|ValueTypeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|json
operator|.
name|valuetype
operator|.
name|ValueTypeSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|phrase
operator|.
name|PhraseTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|IGNORE
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
block|{
name|ValueTypeParser
operator|.
name|class
block|,
name|ValueTypeSerializer
operator|.
name|class
block|}
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ValueTypeParser
operator|.
name|PROPERTY_TYPE
argument_list|,
name|value
operator|=
name|PhraseTagSupport
operator|.
name|TYPE_VALUE
argument_list|)
specifier|public
class|class
name|PhraseTagSupport
implements|implements
name|ValueTypeParser
argument_list|<
name|PhraseTag
argument_list|>
implements|,
name|ValueTypeSerializer
argument_list|<
name|PhraseTag
argument_list|>
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PhraseTagSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_VALUE
init|=
literal|"org.apache.stanbol.enhancer.nlp.ner.PhraseTag"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|PhraseTag
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|PhraseTag
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectNode
name|serialize
parameter_list|(
name|ObjectMapper
name|mapper
parameter_list|,
name|PhraseTag
name|value
parameter_list|)
block|{
name|ObjectNode
name|jTag
init|=
name|mapper
operator|.
name|createObjectNode
argument_list|()
decl_stmt|;
name|jTag
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
name|value
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|getCategory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jTag
operator|.
name|put
argument_list|(
literal|"lc"
argument_list|,
name|value
operator|.
name|getCategory
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jTag
return|;
block|}
annotation|@
name|Override
specifier|public
name|PhraseTag
name|parse
parameter_list|(
name|ObjectNode
name|jValue
parameter_list|)
block|{
name|JsonNode
name|tag
init|=
name|jValue
operator|.
name|path
argument_list|(
literal|"tag"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tag
operator|.
name|isTextual
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse PhraseTag. The value of the "
operator|+
literal|"'tag' field MUST have a textual value (json: "
operator|+
name|jValue
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|JsonNode
name|jCat
init|=
name|jValue
operator|.
name|path
argument_list|(
literal|"lc"
argument_list|)
decl_stmt|;
name|LexicalCategory
name|lc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jCat
operator|.
name|isTextual
argument_list|()
condition|)
block|{
try|try
block|{
name|lc
operator|=
name|LexicalCategory
operator|.
name|valueOf
argument_list|(
name|jCat
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse category for PhraseTag from '"
operator|+
name|jCat
operator|.
name|getTextValue
argument_list|()
operator|+
literal|"' (will create with tag only)!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|jCat
operator|.
name|isInt
argument_list|()
condition|)
block|{
name|lc
operator|=
name|LexicalCategory
operator|.
name|values
argument_list|()
index|[
name|jCat
operator|.
name|getIntValue
argument_list|()
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|jCat
operator|.
name|isMissingNode
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse category for PhraseTag from "
operator|+
name|jCat
operator|+
literal|"(will create with tag only)"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PhraseTag
argument_list|(
name|tag
operator|.
name|getTextValue
argument_list|()
argument_list|,
name|lc
argument_list|)
return|;
block|}
block|}
end_class

end_unit

