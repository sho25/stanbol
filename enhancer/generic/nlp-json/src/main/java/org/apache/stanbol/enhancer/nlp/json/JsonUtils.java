begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JsonUtils
block|{
specifier|private
name|JsonUtils
parameter_list|()
block|{}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @param jValue      * @param categories      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|EnumSet
argument_list|<
name|T
argument_list|>
name|parseEnum
parameter_list|(
name|ObjectNode
name|jValue
parameter_list|,
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
specifier|final
name|EnumSet
argument_list|<
name|T
argument_list|>
name|categories
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|JsonNode
name|node
init|=
name|jValue
operator|.
name|path
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isMissingNode
argument_list|()
condition|)
block|{
return|return
name|categories
return|;
comment|//no values nothing to do
block|}
if|if
condition|(
name|node
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|ArrayNode
name|jLcs
init|=
operator|(
name|ArrayNode
operator|)
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jLcs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JsonNode
name|jLc
init|=
name|jLcs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|jLc
operator|.
name|isTextual
argument_list|()
condition|)
block|{
try|try
block|{
name|categories
operator|.
name|add
argument_list|(
name|Enum
operator|.
name|valueOf
argument_list|(
name|type
argument_list|,
name|jLc
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unknown "
operator|+
name|type
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" '"
operator|+
name|jLc
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|jLc
operator|.
name|isInt
argument_list|()
condition|)
block|{
name|categories
operator|.
name|add
argument_list|(
name|type
operator|.
name|getEnumConstants
argument_list|()
index|[
name|jLc
operator|.
name|asInt
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unknow value in '{}' Array at index [{}]: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|key
block|,
name|i
block|,
name|jLc
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isTextual
argument_list|()
condition|)
block|{
try|try
block|{
name|categories
operator|.
name|add
argument_list|(
name|Enum
operator|.
name|valueOf
argument_list|(
name|type
argument_list|,
name|node
operator|.
name|getTextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unknown "
operator|+
name|type
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" '"
operator|+
name|node
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isInt
argument_list|()
condition|)
block|{
name|categories
operator|.
name|add
argument_list|(
name|type
operator|.
name|getEnumConstants
argument_list|()
index|[
name|node
operator|.
name|asInt
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unknow value for key '{}': {}"
argument_list|,
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|categories
return|;
block|}
block|}
end_class

end_unit

