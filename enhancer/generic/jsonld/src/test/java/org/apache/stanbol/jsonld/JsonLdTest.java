begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|jsonld
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author Fabian Christ  *  */
end_comment

begin_class
specifier|public
class|class
name|JsonLdTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample1
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://example.org/myvocab#"
argument_list|,
literal|"myvocab"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|jsonLdResource
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|jsonLdResource
operator|.
name|addType
argument_list|(
literal|"foaf:Person"
argument_list|)
expr_stmt|;
name|jsonLdResource
operator|.
name|putProperty
argument_list|(
literal|"foaf:name"
argument_list|,
literal|"Manu Sporny"
argument_list|)
expr_stmt|;
name|jsonLdResource
operator|.
name|putProperty
argument_list|(
literal|"foaf:homepage"
argument_list|,
literal|"<http://manu.sporny.org/>"
argument_list|)
expr_stmt|;
name|jsonLdResource
operator|.
name|putProperty
argument_list|(
literal|"sioc:avatar"
argument_list|,
literal|"<http://twitter.com/account/profile_image/manusporny>"
argument_list|)
expr_stmt|;
name|jsonLdResource
operator|.
name|putProperty
argument_list|(
literal|"myvocab:credits"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
literal|"dummy"
argument_list|,
name|jsonLdResource
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"myvocab\":\"http:\\/\\/example.org\\/myvocab#\"},\"a\":\"foaf:Person\",\"foaf:homepage\":\"<http:\\/\\/manu.sporny.org\\/>\",\"foaf:name\":\"Manu Sporny\",\"myvocab:credits\":500,\"sioc:avatar\":\"<http:\\/\\/twitter.com\\/account\\/profile_image\\/manusporny>\"}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"myvocab\": \"http:\\/\\/example.org\\/myvocab#\"\n    },\n    \"a\": \"foaf:Person\",\n    \"foaf:homepage\": \"<http:\\/\\/manu.sporny.org\\/>\",\n    \"foaf:name\": \"Manu Sporny\",\n    \"myvocab:credits\": 500,    \"sioc:avatar\": \"<http:\\/\\/twitter.com\\/account\\/profile_image\\/manusporny>\"\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample2_JointGraph
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|,
literal|"foaf"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setSubject
argument_list|(
literal|"_:bnode1"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|addType
argument_list|(
literal|"foaf:Person"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"foaf:homepage"
argument_list|,
literal|"<http://example.com/bob>"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"foaf:name"
argument_list|,
literal|"Bob"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r1
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r2
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r2
operator|.
name|setSubject
argument_list|(
literal|"_:bnode2"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|addType
argument_list|(
literal|"foaf:Person"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|putProperty
argument_list|(
literal|"foaf:homepage"
argument_list|,
literal|"<http://example.com/eve>"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|putProperty
argument_list|(
literal|"foaf:name"
argument_list|,
literal|"Eve"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r2
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r3
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r3
operator|.
name|setSubject
argument_list|(
literal|"_:bnode3"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|addType
argument_list|(
literal|"foaf:Person"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|putProperty
argument_list|(
literal|"foaf:homepage"
argument_list|,
literal|"<http://example.com/bert>"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|putProperty
argument_list|(
literal|"foaf:name"
argument_list|,
literal|"Bert"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r3
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"},\"@\":[{\"@\":\"_:bnode1\",\"a\":\"foaf:Person\",\"foaf:homepage\":\"<http:\\/\\/example.com\\/bob>\",\"foaf:name\":\"Bob\"},{\"@\":\"_:bnode2\",\"a\":\"foaf:Person\",\"foaf:homepage\":\"<http:\\/\\/example.com\\/eve>\",\"foaf:name\":\"Eve\"},{\"@\":\"_:bnode3\",\"a\":\"foaf:Person\",\"foaf:homepage\":\"<http:\\/\\/example.com\\/bert>\",\"foaf:name\":\"Bert\"}]}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"\n    },\n    \"@\": [\n        {\n            \"@\": \"_:bnode1\",\n            \"a\": \"foaf:Person\",\n            \"foaf:homepage\": \"<http:\\/\\/example.com\\/bob>\",\n            \"foaf:name\": \"Bob\"\n        },\n        {\n            \"@\": \"_:bnode2\",\n            \"a\": \"foaf:Person\",\n            \"foaf:homepage\": \"<http:\\/\\/example.com\\/eve>\",\n            \"foaf:name\": \"Eve\"\n        },\n        {\n            \"@\": \"_:bnode3\",\n            \"a\": \"foaf:Person\",\n            \"foaf:homepage\": \"<http:\\/\\/example.com\\/bert>\",\n            \"foaf:name\": \"Bert\"\n        }\n    ]\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample2_DisjointGraph
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|setUseJointGraphs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|,
literal|"foaf"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setSubject
argument_list|(
literal|"_:bnode1"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|addType
argument_list|(
literal|"foaf:Person"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"foaf:homepage"
argument_list|,
literal|"<http://example.com/bob>"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"foaf:name"
argument_list|,
literal|"Bob"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r1
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r2
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r2
operator|.
name|setSubject
argument_list|(
literal|"_:bnode2"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|addType
argument_list|(
literal|"foaf:Person"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|putProperty
argument_list|(
literal|"foaf:homepage"
argument_list|,
literal|"<http://example.com/eve>"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|putProperty
argument_list|(
literal|"foaf:name"
argument_list|,
literal|"Eve"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r2
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r3
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r3
operator|.
name|setSubject
argument_list|(
literal|"_:bnode3"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|addType
argument_list|(
literal|"foaf:Person"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|putProperty
argument_list|(
literal|"foaf:homepage"
argument_list|,
literal|"<http://example.com/eve>"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|putProperty
argument_list|(
literal|"foaf:name"
argument_list|,
literal|"Eve"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r3
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"[{\"#\":{\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"},\"@\":\"_:bnode1\",\"a\":\"foaf:Person\",\"foaf:homepage\":\"<http:\\/\\/example.com\\/bob>\",\"foaf:name\":\"Bob\"},{\"#\":{\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"},\"@\":\"_:bnode2\",\"a\":\"foaf:Person\",\"foaf:homepage\":\"<http:\\/\\/example.com\\/eve>\",\"foaf:name\":\"Eve\"},{\"#\":{\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"},\"@\":\"_:bnode3\",\"a\":\"foaf:Person\",\"foaf:homepage\":\"<http:\\/\\/example.com\\/eve>\",\"foaf:name\":\"Eve\"}]"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"[\n    {\n        \"#\": {\n            \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"\n        },\n        \"@\": \"_:bnode1\",\n        \"a\": \"foaf:Person\",\n        \"foaf:homepage\": \"<http:\\/\\/example.com\\/bob>\",\n        \"foaf:name\": \"Bob\"\n    },\n    {\n        \"#\": {\n            \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"\n        },\n        \"@\": \"_:bnode2\",\n        \"a\": \"foaf:Person\",\n        \"foaf:homepage\": \"<http:\\/\\/example.com\\/eve>\",\n        \"foaf:name\": \"Eve\"\n    },\n    {\n        \"#\": {\n            \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\"\n        },\n        \"@\": \"_:bnode3\",\n        \"a\": \"foaf:Person\",\n        \"foaf:homepage\": \"<http:\\/\\/example.com\\/eve>\",\n        \"foaf:name\": \"Eve\"\n    }\n]"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample3
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://microformats.org/profile/hcard#vcard"
argument_list|,
literal|"vcard"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://microformats.org/profile/hcard#url"
argument_list|,
literal|"url"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://microformats.org/profile/hcard#fn"
argument_list|,
literal|"fn"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setSubject
argument_list|(
literal|"_:bnode1"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|addType
argument_list|(
literal|"vcard"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"url"
argument_list|,
literal|"<http://tantek.com/>"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"fn"
argument_list|,
literal|"Tantek Celik"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r1
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"fn\":\"http:\\/\\/microformats.org\\/profile\\/hcard#fn\",\"url\":\"http:\\/\\/microformats.org\\/profile\\/hcard#url\",\"vcard\":\"http:\\/\\/microformats.org\\/profile\\/hcard#vcard\"},\"@\":\"_:bnode1\",\"a\":\"vcard\",\"fn\":\"Tantek Celik\",\"url\":\"<http:\\/\\/tantek.com\\/>\"}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"fn\": \"http:\\/\\/microformats.org\\/profile\\/hcard#fn\",\n        \"url\": \"http:\\/\\/microformats.org\\/profile\\/hcard#url\",\n        \"vcard\": \"http:\\/\\/microformats.org\\/profile\\/hcard#vcard\"\n    },\n    \"@\": \"_:bnode1\",\n    \"a\": \"vcard\",\n    \"fn\": \"Tantek Celik\",\n    \"url\": \"<http:\\/\\/tantek.com\\/>\"\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample3DefaultContext
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://example.org/default-vocab#"
argument_list|,
literal|"#vocab"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://example.org/baseurl/"
argument_list|,
literal|"#base"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema#"
argument_list|,
literal|"xsd"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://purl.org/dc/terms/"
argument_list|,
literal|"dc"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|,
literal|"foaf"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://rdfs.org/sioc/ns#"
argument_list|,
literal|"sioc"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://creativecommons.org/ns#"
argument_list|,
literal|"cc"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2003/01/geo/wgs84_pos#"
argument_list|,
literal|"geo"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2006/vcard/ns#"
argument_list|,
literal|"vcard"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2002/12/cal/ical#"
argument_list|,
literal|"cal"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://usefulinc.com/ns/doap#"
argument_list|,
literal|"doap"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/Person"
argument_list|,
literal|"Person"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/name"
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/homepage"
argument_list|,
literal|"homepage"
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"#base\":\"http:\\/\\/example.org\\/baseurl\\/\",\"#vocab\":\"http:\\/\\/example.org\\/default-vocab#\",\"cal\":\"http:\\/\\/www.w3.org\\/2002\\/12\\/cal\\/ical#\",\"cc\":\"http:\\/\\/creativecommons.org\\/ns#\",\"dc\":\"http:\\/\\/purl.org\\/dc\\/terms\\/\",\"doap\":\"http:\\/\\/usefulinc.com\\/ns\\/doap#\",\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\"geo\":\"http:\\/\\/www.w3.org\\/2003\\/01\\/geo\\/wgs84_pos#\",\"homepage\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/homepage\",\"name\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/name\",\"Person\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/Person\",\"sioc\":\"http:\\/\\/rdfs.org\\/sioc\\/ns#\",\"vcard\":\"http:\\/\\/www.w3.org\\/2006\\/vcard\\/ns#\",\"xsd\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"}}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"#base\": \"http:\\/\\/example.org\\/baseurl\\/\",\n        \"#vocab\": \"http:\\/\\/example.org\\/default-vocab#\",\n        \"cal\": \"http:\\/\\/www.w3.org\\/2002\\/12\\/cal\\/ical#\",\n        \"cc\": \"http:\\/\\/creativecommons.org\\/ns#\",\n        \"dc\": \"http:\\/\\/purl.org\\/dc\\/terms\\/\",\n        \"doap\": \"http:\\/\\/usefulinc.com\\/ns\\/doap#\",\n        \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\n        \"geo\": \"http:\\/\\/www.w3.org\\/2003\\/01\\/geo\\/wgs84_pos#\",\n        \"homepage\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/homepage\",\n        \"name\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/name\",\n        \"Person\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/Person\",\n        \"sioc\": \"http:\\/\\/rdfs.org\\/sioc\\/ns#\",\n        \"vcard\": \"http:\\/\\/www.w3.org\\/2006\\/vcard\\/ns#\",\n        \"xsd\": \"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"\n    }\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample4Microformats
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|setUseJointGraphs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setSubject
argument_list|(
literal|"<http://purl.oreilly.com/works/45U8QJGZSQKDH8N>"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|addType
argument_list|(
literal|"http://purl.org/vocab/frbr/core#Work"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"http://purl.org/dc/terms/title"
argument_list|,
literal|"Just a Geek"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"http://purl.org/dc/terms/creator"
argument_list|,
literal|"Whil Wheaton"
argument_list|)
expr_stmt|;
name|String
index|[]
name|realizationValues
init|=
block|{
literal|"<http://purl.oreilly.com/products/9780596007683.BOOK>"
block|,
literal|"<http://purl.oreilly.com/products/9780596802189.EBOOK>"
block|}
decl_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"http://purl.org/vocab/frbr/core#realization"
argument_list|,
name|realizationValues
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r1
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r2
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r2
operator|.
name|setSubject
argument_list|(
literal|"<http://purl.oreilly.com/products/9780596007683.BOOK>"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|addType
argument_list|(
literal|"<http://purl.org/vocab/frbr/core#Expression>"
argument_list|)
expr_stmt|;
name|r2
operator|.
name|putProperty
argument_list|(
literal|"http://purl.org/dc/terms/type"
argument_list|,
literal|"<http://purl.oreilly.com/product-types/BOOK>"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r2
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r3
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r3
operator|.
name|setSubject
argument_list|(
literal|"<http://purl.oreilly.com/products/9780596802189.EBOOK>"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|addType
argument_list|(
literal|"http://purl.org/vocab/frbr/core#Expression"
argument_list|)
expr_stmt|;
name|r3
operator|.
name|putProperty
argument_list|(
literal|"http://purl.org/dc/terms/type"
argument_list|,
literal|"<http://purl.oreilly.com/product-types/BOOK>"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
name|r3
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"[{\"@\":\"<http:\\/\\/purl.oreilly.com\\/products\\/9780596007683.BOOK>\",\"a\":\"<http:\\/\\/purl.org\\/vocab\\/frbr\\/core#Expression>\",\"http:\\/\\/purl.org\\/dc\\/terms\\/type\":\"<http:\\/\\/purl.oreilly.com\\/product-types\\/BOOK>\"},{\"@\":\"<http:\\/\\/purl.oreilly.com\\/products\\/9780596802189.EBOOK>\",\"a\":\"http:\\/\\/purl.org\\/vocab\\/frbr\\/core#Expression\",\"http:\\/\\/purl.org\\/dc\\/terms\\/type\":\"<http:\\/\\/purl.oreilly.com\\/product-types\\/BOOK>\"},{\"@\":\"<http:\\/\\/purl.oreilly.com\\/works\\/45U8QJGZSQKDH8N>\",\"a\":\"http:\\/\\/purl.org\\/vocab\\/frbr\\/core#Work\",\"http:\\/\\/purl.org\\/dc\\/terms\\/creator\":\"Whil Wheaton\",\"http:\\/\\/purl.org\\/dc\\/terms\\/title\":\"Just a Geek\",\"http:\\/\\/purl.org\\/vocab\\/frbr\\/core#realization\":[\"<http:\\/\\/purl.oreilly.com\\/products\\/9780596007683.BOOK>\",\"<http:\\/\\/purl.oreilly.com\\/products\\/9780596802189.EBOOK>\"]}]"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"[\n    {\n        \"@\": \"<http:\\/\\/purl.oreilly.com\\/products\\/9780596007683.BOOK>\",\n        \"a\": \"<http:\\/\\/purl.org\\/vocab\\/frbr\\/core#Expression>\",\n        \"http:\\/\\/purl.org\\/dc\\/terms\\/type\": \"<http:\\/\\/purl.oreilly.com\\/product-types\\/BOOK>\"\n    },\n    {\n        \"@\": \"<http:\\/\\/purl.oreilly.com\\/products\\/9780596802189.EBOOK>\",\n        \"a\": \"http:\\/\\/purl.org\\/vocab\\/frbr\\/core#Expression\",\n        \"http:\\/\\/purl.org\\/dc\\/terms\\/type\": \"<http:\\/\\/purl.oreilly.com\\/product-types\\/BOOK>\"\n    },\n    {\n        \"@\": \"<http:\\/\\/purl.oreilly.com\\/works\\/45U8QJGZSQKDH8N>\",\n        \"a\": \"http:\\/\\/purl.org\\/vocab\\/frbr\\/core#Work\",\n        \"http:\\/\\/purl.org\\/dc\\/terms\\/creator\": \"Whil Wheaton\",\n        \"http:\\/\\/purl.org\\/dc\\/terms\\/title\": \"Just a Geek\",\n        \"http:\\/\\/purl.org\\/vocab\\/frbr\\/core#realization\": [\n            \"<http:\\/\\/purl.oreilly.com\\/products\\/9780596007683.BOOK>\",\n            \"<http:\\/\\/purl.oreilly.com\\/products\\/9780596802189.EBOOK>\"\n        ]\n    }\n]"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample5TypedLiterals
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema#"
argument_list|,
literal|"xsd"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://purl.org/dc/terms/"
argument_list|,
literal|"dc"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"http://purl.org/dc/terms/modified"
argument_list|,
literal|"2010-05-29T14:17:39+02:00^^http://www.w3.org/2001/XMLSchema#dateTime"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
literal|"r1"
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"dc\":\"http:\\/\\/purl.org\\/dc\\/terms\\/\",\"xsd\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"},\"dc:modified\":\"2010-05-29T14:17:39+02:00^^xsd:dateTime\"}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"dc\": \"http:\\/\\/purl.org\\/dc\\/terms\\/\",\n        \"xsd\": \"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"\n    },\n    \"dc:modified\": \"2010-05-29T14:17:39+02:00^^xsd:dateTime\"\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample6MultipleObjects
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema#"
argument_list|,
literal|"xsd"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|,
literal|"foaf"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setSubject
argument_list|(
literal|"<http://example.org/people#joebob>"
argument_list|)
expr_stmt|;
name|String
index|[]
name|nicks
init|=
operator|new
name|String
index|[]
block|{
literal|"\"stu\"^^http://www.w3.org/2001/XMLSchema#string"
block|,
literal|"\"groknar\"^^http://www.w3.org/2001/XMLSchema#string"
block|,
literal|"\"radface\"^^http://www.w3.org/2001/XMLSchema#string"
block|}
decl_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"http://xmlns.com/foaf/0.1/nick"
argument_list|,
name|nicks
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
literal|"r1"
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\"xsd\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"},\"@\":\"<http:\\/\\/example.org\\/people#joebob>\",\"foaf:nick\":[\"\\\"stu\\\"^^xsd:string\",\"\\\"groknar\\\"^^xsd:string\",\"\\\"radface\\\"^^xsd:string\"]}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\n        \"xsd\": \"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"\n    },\n    \"@\": \"<http:\\/\\/example.org\\/people#joebob>\",\n    \"foaf:nick\": [\n        \"\\\"stu\\\"^^xsd:string\",\n        \"\\\"groknar\\\"^^xsd:string\",\n        \"\\\"radface\\\"^^xsd:string\"\n    ]\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample7NoNSApply
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|setApplyNamespaces
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema#"
argument_list|,
literal|"xsd"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|,
literal|"foaf"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setSubject
argument_list|(
literal|"<http://example.org/people#joebob>"
argument_list|)
expr_stmt|;
name|String
index|[]
name|nicks
init|=
operator|new
name|String
index|[]
block|{
literal|"\"stu\"^^http://www.w3.org/2001/XMLSchema#string"
block|,
literal|"\"groknar\"^^http://www.w3.org/2001/XMLSchema#string"
block|,
literal|"\"radface\"^^http://www.w3.org/2001/XMLSchema#string"
block|}
decl_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"http://xmlns.com/foaf/0.1/nick"
argument_list|,
name|nicks
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
literal|"r1"
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\"xsd\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"},\"@\":\"<http:\\/\\/example.org\\/people#joebob>\",\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/nick\":[\"\\\"stu\\\"^^http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\",\"\\\"groknar\\\"^^http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\",\"\\\"radface\\\"^^http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\"]}"
decl_stmt|;
name|toConsole
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|toConsole
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\n        \"xsd\": \"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"\n    },\n    \"@\": \"<http:\\/\\/example.org\\/people#joebob>\",\n    \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/nick\": [\n        \"\\\"stu\\\"^^http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\",\n        \"\\\"groknar\\\"^^http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\",\n        \"\\\"radface\\\"^^http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\"\n    ]\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecExample8NoNSApply
parameter_list|()
block|{
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|setApplyNamespaces
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema#"
argument_list|,
literal|"xsd"
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|addNamespacePrefix
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|,
literal|"foaf"
argument_list|)
expr_stmt|;
name|JsonLdResource
name|r1
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setSubject
argument_list|(
literal|"<http://example.org/people#joebob>"
argument_list|)
expr_stmt|;
name|String
index|[]
name|nicks
init|=
operator|new
name|String
index|[]
block|{
literal|"\"stu\"^^xsd:string"
block|,
literal|"\"groknar\"^^xsd:string"
block|,
literal|"\"radface\"^^xsd:string"
block|}
decl_stmt|;
name|r1
operator|.
name|putProperty
argument_list|(
literal|"http://xmlns.com/foaf/0.1/nick"
argument_list|,
name|nicks
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|put
argument_list|(
literal|"r1"
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|jsonLd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"#\":{\"foaf\":\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\"xsd\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"},\"@\":\"<http:\\/\\/example.org\\/people#joebob>\",\"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/nick\":[\"\\\"stu\\\"^^xsd:string\",\"\\\"groknar\\\"^^xsd:string\",\"\\\"radface\\\"^^xsd:string\"]}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actualIndent
init|=
name|jsonLd
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|expectedIndent
init|=
literal|"{\n    \"#\": {\n        \"foaf\": \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/\",\n        \"xsd\": \"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#\"\n    },\n    \"@\": \"<http:\\/\\/example.org\\/people#joebob>\",\n    \"http:\\/\\/xmlns.com\\/foaf\\/0.1\\/nick\": [\n        \"\\\"stu\\\"^^xsd:string\",\n        \"\\\"groknar\\\"^^xsd:string\",\n        \"\\\"radface\\\"^^xsd:string\"\n    ]\n}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndent
argument_list|,
name|actualIndent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|toConsole
parameter_list|(
name|String
name|actual
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|actual
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"\\\\\\\\"
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

