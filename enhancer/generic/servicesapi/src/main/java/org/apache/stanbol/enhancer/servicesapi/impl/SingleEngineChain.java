begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|createExecutionPlan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|writeExecutionNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ChainException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_comment
comment|/**  * Intended to be used if one needs to wrap a single {@link EnhancementEngine}  * with a {@link Chain} to execute it by using the  * {@link EnhancementJobManager#enhanceContent(org.apache.stanbol.enhancer.servicesapi.ContentItem, String)}  * method.<p>  * This Chain implementation is NOT intended to be registered as OSGI service.  * The intension is that it is instantiated by the component (e.g. the implementation  * of a RESTful service) for an {@link EnhancementEngine} and directly parsed  * to the {@link EnhancementJobManager}.  *   * @author Rupert Westenthaler   *  */
end_comment

begin_class
specifier|public
class|class
name|SingleEngineChain
implements|implements
name|Chain
block|{
specifier|private
specifier|final
name|Graph
name|executionPlan
decl_stmt|;
specifier|private
specifier|final
name|EnhancementEngine
name|engine
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**      * Creates a {@link Chain} for a single {@link EnhancementEngine}      * @param engine the engine      */
specifier|public
name|SingleEngineChain
parameter_list|(
name|EnhancementEngine
name|engine
parameter_list|)
block|{
name|this
argument_list|(
name|engine
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a {@link Chain} for a single {@link EnhancementEngine} including      * optional chain scoped enhancement properties      * @param engine the engine      * @param enhProps chain scoped enhancement properties or<code>null</code>      * if none.      * @since 0.12.1      */
specifier|public
name|SingleEngineChain
parameter_list|(
name|EnhancementEngine
name|engine
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhProps
parameter_list|)
block|{
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EnhancementEngine MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|engine
operator|.
name|getName
argument_list|()
operator|+
literal|"Chain"
expr_stmt|;
name|MGraph
name|graph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
name|writeExecutionNode
argument_list|(
name|graph
argument_list|,
name|createExecutionPlan
argument_list|(
name|graph
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
argument_list|,
name|engine
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|enhProps
argument_list|)
expr_stmt|;
name|executionPlan
operator|=
name|graph
operator|.
name|getGraph
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Graph
name|getExecutionPlan
parameter_list|()
throws|throws
name|ChainException
block|{
return|return
name|executionPlan
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEngines
parameter_list|()
throws|throws
name|ChainException
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|engine
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

