begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_comment
comment|/**  * Compares {@link ServiceReference}s based on the {@link Constants#SERVICE_RANKING}  * property value. Highest Rank will be listed first.<p>  * TODO: This is a copy of the same Comparator within the  * "stanbol/commons/solr/core module"   * (org.apache.stanbol.commons.solr.utils.ServiceReferenceRankingComparator).  * However creating an own dependency because of that seemed also not the right  * thing to do.   */
end_comment

begin_class
specifier|public
class|class
name|ServiceReferenceRankingComparator
implements|implements
name|Comparator
argument_list|<
name|ServiceReference
argument_list|>
block|{
comment|/**      * Singelton instance      */
specifier|public
specifier|static
name|ServiceReferenceRankingComparator
name|INSTANCE
init|=
operator|new
name|ServiceReferenceRankingComparator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ServiceReference
name|ref1
parameter_list|,
name|ServiceReference
name|ref2
parameter_list|)
block|{
name|int
name|r1
decl_stmt|,
name|r2
decl_stmt|;
name|Object
name|tmp
init|=
name|ref1
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
decl_stmt|;
name|r1
operator|=
name|tmp
operator|!=
literal|null
condition|?
operator|(
operator|(
name|Integer
operator|)
name|tmp
operator|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|tmp
operator|=
name|ref2
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
expr_stmt|;
name|r2
operator|=
name|tmp
operator|!=
literal|null
condition|?
operator|(
operator|(
name|Integer
operator|)
name|tmp
operator|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|r1
operator|==
name|r2
condition|)
block|{
name|tmp
operator|=
name|ref1
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
expr_stmt|;
name|long
name|id1
init|=
name|tmp
operator|!=
literal|null
condition|?
operator|(
operator|(
name|Long
operator|)
name|tmp
operator|)
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|tmp
operator|=
name|ref2
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
expr_stmt|;
name|long
name|id2
init|=
name|tmp
operator|!=
literal|null
condition|?
operator|(
operator|(
name|Long
operator|)
name|tmp
operator|)
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|//the lowest id must be first -> id1< id2 -> [id1,id2] -> return -1
return|return
name|id1
operator|<
name|id2
condition|?
operator|-
literal|1
else|:
name|id2
operator|==
name|id1
condition|?
literal|0
else|:
literal|1
return|;
block|}
else|else
block|{
comment|//the highest ranking MUST BE first -> r1< r2 -> [r2,r1] -> return 1
return|return
name|r1
operator|<
name|r2
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

