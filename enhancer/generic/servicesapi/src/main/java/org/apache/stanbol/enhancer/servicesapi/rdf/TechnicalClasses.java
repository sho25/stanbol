begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_comment
comment|/**  * Classes to be used as types for resources that are not real life entities but  * technical data modeling for Stanbol Enhancer components.  *  * @author ogrisel  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TechnicalClasses
block|{
specifier|private
name|TechnicalClasses
parameter_list|()
block|{}
comment|/**      * Type used for all enhancement created by Stanbol Enhancer      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|ENHANCER_ENHANCEMENT
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|fise
operator|+
literal|"Enhancement"
argument_list|)
decl_stmt|;
comment|/**      * Type used for annotations on Text created by Stanbol Enhancer. This type is intended      * to be used in combination with ENHANCER_ENHANCEMENT      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|ENHANCER_TEXTANNOTATION
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|fise
operator|+
literal|"TextAnnotation"
argument_list|)
decl_stmt|;
comment|/**      * Type used for annotations of named entities. This type is intended      * to be used in combination with ENHANCER_ENHANCEMENT      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|ENHANCER_ENTITYANNOTATION
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|fise
operator|+
literal|"EntityAnnotation"
argument_list|)
decl_stmt|;
comment|/**      * Type used for annotations documents. This type is intended      * to be used in combination with ENHANCER_ENHANCEMENT and      * ENHANCER_ENTITYANNOTATION as a complimentary marker to suggest      * that the referenced is the one of the primary topic of the      * whole document or of a specific section specified by a linked      * TextAnnotation.       *       * The entity or concept is not necessarily explicitly mentioned      * in the document (like a traditional entity occurrence would).      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|ENHANCER_TOPICANNOTATION
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|fise
operator|+
literal|"TopicAnnotation"
argument_list|)
decl_stmt|;
comment|/**      * To be used as a type pour any semantic knowledge extraction      */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|UriRef
name|ENHANCER_EXTRACTION
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://iks-project.eu/ns/enhancer/extraction/Extraction"
argument_list|)
decl_stmt|;
comment|/**      * To be used as a complement type for extraction that are relevant only to      * the portion of context item (i.e. a sentence, an expression, a word)      * TODO: rwesten: Check how this standard can be used for Stanbol Enhancer enhancements      * @deprecated      */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|UriRef
name|ANNOTEA_ANNOTATION
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://www.w3.org/2000/10/annotation-ns#Annotation"
argument_list|)
decl_stmt|;
comment|/**      * To be used to type the URI of the content item being annotated by Stanbol Enhancer      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|FOAF_DOCUMENT
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|foaf
operator|+
literal|"Document"
argument_list|)
decl_stmt|;
comment|/**      * Used to indicate, that an EntityAnnotation describes an Categorisation.      * see<a href="http://wiki.iks-project.eu/index.php/ZemantaEnhancementEngine#Mapping_of_Categories">      * Mapping of Categories</a> for more Information)      * @deprecated the preferred rdf:type for categories and topics is      * {@link OntologicalClasses#SKOS_CONCEPT} (see       *<a href="https://issues.apache.org/jira/browse/STANBOL-617">STANBOL-617</a>)      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|ENHANCER_CATEGORY
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|fise
operator|+
literal|"Category"
argument_list|)
decl_stmt|;
comment|/**      * DC terms Linguistic System is the type used as Range for the dc:language      * property. As this property is also used for describing the language      * as identified for analysed content this type is used as dc:type for      * {@value #ENHANCER_TEXTANNOTATION} describing the language of the text      * (see       *<a href="https://issues.apache.org/jira/browse/STANBOL-613">STANBOL-613</a>)      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|DCTERMS_LINGUISTIC_SYSTEM
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"LinguisticSystem"
argument_list|)
decl_stmt|;
comment|/**      * The confidence level of {@link #ENHANCER_ENHANCEMENT}s      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|FNHANCER_CONFIDENCE_LEVEL
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|fise
operator|+
literal|"ConfidenceLevel"
argument_list|)
decl_stmt|;
comment|/**      * Enumeration over the four instance of the {@link #FNHANCER_CONFIDENCE_LEVEL}      * class as introduced by      *<a herf="https://issues.apache.org/jira/browse/STANBOL-631">STANBOL-631</a>)      *<p>      * {@link #name()} returns the local name; {@link #toString()} the URI as      * {@link String}.      * @author Rupert Westenthaler      *      */
specifier|public
specifier|static
enum|enum
name|CONFIDENCE_LEVEL_ENUM
block|{
name|certain
block|,
name|ambiguous
block|,
name|suggestion
block|,
name|uncertain
block|;
specifier|private
specifier|final
name|UriRef
name|uri
decl_stmt|;
specifier|private
specifier|final
name|String
name|localName
decl_stmt|;
specifier|private
name|CONFIDENCE_LEVEL_ENUM
parameter_list|()
block|{
name|localName
operator|=
literal|"cl-"
operator|+
name|name
argument_list|()
expr_stmt|;
name|uri
operator|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|fise
operator|+
name|localName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|localName
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
operator|.
name|toString
argument_list|()
return|;
block|}
block|;
specifier|public
name|UriRef
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|UriRef
argument_list|,
name|CONFIDENCE_LEVEL_ENUM
argument_list|>
name|uriRef2enum
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CONFIDENCE_LEVEL_ENUM
argument_list|>
name|uri2enum
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|UriRef
argument_list|,
name|CONFIDENCE_LEVEL_ENUM
argument_list|>
name|ur
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|TechnicalClasses
operator|.
name|CONFIDENCE_LEVEL_ENUM
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CONFIDENCE_LEVEL_ENUM
argument_list|>
name|us
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TechnicalClasses
operator|.
name|CONFIDENCE_LEVEL_ENUM
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CONFIDENCE_LEVEL_ENUM
name|cl
range|:
name|CONFIDENCE_LEVEL_ENUM
operator|.
name|values
argument_list|()
control|)
block|{
name|ur
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getUri
argument_list|()
argument_list|,
name|cl
argument_list|)
expr_stmt|;
name|us
operator|.
name|put
argument_list|(
name|cl
operator|.
name|toString
argument_list|()
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
name|uriRef2enum
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|ur
argument_list|)
expr_stmt|;
name|uri2enum
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|us
argument_list|)
expr_stmt|;
block|}
comment|/**          * Getter for the fise:ConfidenceLevel instance for the {@link UriRef}          * @param uri the URI          * @return the fise:ConfidenceLevel instance or<code>null</code> if the          * parsed URI is not one of the four defined instances          */
specifier|public
specifier|static
name|CONFIDENCE_LEVEL_ENUM
name|getConfidenceLevel
parameter_list|(
name|UriRef
name|uri
parameter_list|)
block|{
return|return
name|uriRef2enum
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**          * Getter for the fise:ConfidenceLevel instance for the {@link UriRef}          * @param uri the URI string          * @return the fise:ConfidenceLevel instance or<code>null</code> if the          * parsed URI is not one of the four defined instances          */
specifier|public
specifier|static
name|CONFIDENCE_LEVEL_ENUM
name|getConfidenceLevel
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|uri2enum
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

