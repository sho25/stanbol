begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_comment
comment|/**  * Abstract base implementation that reads the of the   * {@link EnhancementEngine#PROPERTY_NAME} from configuration parsed in   * the activate methods and implements the {@link #getName()} method. If the   * name is missing or empty a {@link ConfigurationException} is thrown.<p>  * In addition this Class defines a {@link Service}, {@link Component} and   * {@link Property} annotations for<ul>  *<li> EnhancementEngine#PROPERTY_NAME  *<li> {@link Constants#SERVICE_RANKING}  *</ul>  * This annotations can be {@link Component#inherit()} to sub classes and would  * allow users to specify the name and the ranking of an engine by using e.g. the  * Apache Felix Webconsole.<p>  *   * @author Rupert Westenthaler  *   * @param<A> Exception thrown by the {@link #activate(ComponentContext)} method  * @param<D> Exception thrown by the {@link #deactivate(ComponentContext)} method  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
block|}
argument_list|)
annotation|@
name|Service
specifier|public
specifier|abstract
class|class
name|AbstractEnhancementEngine
parameter_list|<
name|A
extends|extends
name|Exception
parameter_list|,
name|D
extends|extends
name|Exception
parameter_list|>
implements|implements
name|EnhancementEngine
block|{
specifier|private
name|String
name|name
decl_stmt|;
comment|/**      * activator that reads and validates the {@link EnhancementEngine#PROPERTY_NAME}      * property from the {@link ComponentContext#getProperties()}.      * @param ctx the component context      * @throws ConfigurationException if the required property       * {@link EnhancementEngine#PROPERTY_NAME} is missing or empty      * @throws A to allow sub classes to throw any kind of exception      */
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|A
block|{
name|Object
name|value
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|value
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_NAME
argument_list|,
literal|"The configured"
operator|+
literal|"name of an EnhancementEngine MUST NOT be empty!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|value
operator|==
literal|null
condition|?
literal|"The name is a required property!"
else|:
literal|"The name of an EnhancementEngine MUST be an non empty String "
operator|+
literal|"(type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|" value: "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Deactivates this component and re-sets the name to<code>null</code>      * @param ctx not used      * @throws D to allow sub classes to throw any Exception      */
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|D
block|{
name|name
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Prints the simple name of the Class and the configured Name.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s(name=%s)"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

