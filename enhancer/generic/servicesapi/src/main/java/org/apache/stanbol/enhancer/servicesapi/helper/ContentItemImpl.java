begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|LockableMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|LockableMGraphWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|NoSuchPartException
import|;
end_import

begin_comment
comment|/**   * A generic ContentItem implementation that takes the uri, main content part  * and the graph used to store the metadata as parameter.  *<p>  * This content item consisting initially of a single blob.   * Subclasses don't have to care about multi-parts aspects of content item.   * By inheriting from this class the ability for clients to add additional parts   * is ensured.   *<p>  * Even through this class does implement the full {@link ContentItem} interface  * it is marked as abstract and has only a protected constructor because it is  * not intended that users directly instantiate it. The intended usage is to  * create subclasses that instantiate ContentItmes with specific combinations  * of {@link Blob} nad {@link MGraph} implementations.<p>  * Examples are:<ul>  *<li>The {@link InMemoryContentItem} intended for in-memory  * storage of ContentItems during the stateless enhancement workflow  *<li> The {@link WebContentItem} that allows to create a ContentItem from an   * URI.  *</ul>  * TODO (rwesten): check if we want this to be an abstract class or if there are  * reasons to have a general purpose ContentItem implementation  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ContentItemImpl
implements|implements
name|ContentItem
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|MAIN_BLOB_SUFFIX
init|=
literal|"_main"
decl_stmt|;
comment|/**      * Holds the content parts of this ContentItem      */
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|parts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 * The uri of the ContentItem 	 */
specifier|private
specifier|final
name|UriRef
name|uri
decl_stmt|;
comment|/** 	 * The uri of the main content part (the {@link Blob} parsed with the constructor) 	 */
specifier|private
specifier|final
name|UriRef
name|mainBlobUri
decl_stmt|;
specifier|private
specifier|final
name|LockableMGraph
name|metadata
decl_stmt|;
specifier|protected
specifier|final
name|Lock
name|readLock
decl_stmt|;
specifier|protected
specifier|final
name|Lock
name|writeLock
decl_stmt|;
specifier|protected
name|ContentItemImpl
parameter_list|(
name|UriRef
name|uri
parameter_list|,
name|Blob
name|main
parameter_list|,
name|MGraph
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The URI for the ContentItem MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|main
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The main Blob MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tha parsed graph MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|mainBlobUri
operator|=
operator|new
name|UriRef
argument_list|(
name|uri
operator|.
name|getUnicodeString
argument_list|()
operator|+
name|MAIN_BLOB_SUFFIX
argument_list|)
expr_stmt|;
name|this
operator|.
name|parts
operator|.
name|put
argument_list|(
name|mainBlobUri
argument_list|,
name|main
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|instanceof
name|LockableMGraph
condition|)
block|{
name|this
operator|.
name|metadata
operator|=
operator|(
name|LockableMGraph
operator|)
name|metadata
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|metadata
operator|=
operator|new
name|LockableMGraphWrapper
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|//init the read and write lock
name|this
operator|.
name|readLock
operator|=
name|this
operator|.
name|metadata
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|this
operator|.
name|metadata
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
comment|//Better parse the Blob in the Constructor than calling a public
comment|//method on a may be not fully initialised instance
comment|//parts.put(new UriRef(uri.getUnicodeString()+"_main"), getBlob());
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|ReadWriteLock
name|getLock
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|getLock
argument_list|()
return|;
block|}
comment|/** 	 * Final getter retrieving the Blob via {@link #getPart(UriRef, Class)} 	 * with<code>{@link #getUri()}+{@link #MAIN_BLOB_SUFFIX}</code> 	 */
annotation|@
name|Override
specifier|public
specifier|final
name|Blob
name|getBlob
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|(
name|Blob
operator|)
name|parts
operator|.
name|get
argument_list|(
name|mainBlobUri
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
name|getBlob
argument_list|()
operator|.
name|getStream
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|getBlob
argument_list|()
operator|.
name|getMimeType
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPart
parameter_list|(
name|UriRef
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|NoSuchPartException
block|{
if|if
condition|(
name|parts
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|parts
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchPartException
argument_list|(
name|uri
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|UriRef
name|getPartUri
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|NoSuchPartException
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|parts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|count
operator|==
name|index
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|NoSuchPartException
argument_list|(
name|index
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPart
parameter_list|(
name|int
name|index
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|NoSuchPartException
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|parts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|count
operator|==
name|index
condition|)
block|{
name|result
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchPartException
argument_list|(
literal|"The body part 0 is of type "
operator|+
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" which cannot be converted to "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|result
return|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|NoSuchPartException
argument_list|(
name|index
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addPart
parameter_list|(
name|UriRef
name|uriRef
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|uriRef
operator|==
literal|null
operator|||
name|object
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed content part ID and "
operator|+
literal|"object MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|uriRef
operator|.
name|equals
argument_list|(
name|mainBlobUri
argument_list|)
condition|)
block|{
comment|//avoid that this method is used to
comment|//reset the main content part
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed content part ID MUST "
operator|+
literal|"NOT be equals to the ID used by the main Content Part "
operator|+
literal|"( ContentItem.getUri()+\"_main\")"
argument_list|)
throw|;
block|}
return|return
name|parts
operator|.
name|put
argument_list|(
name|uriRef
argument_list|,
name|object
argument_list|)
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|UriRef
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|public
name|LockableMGraph
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uri
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|//TODO: is it OK to check only for the uri? An implementation that takes
comment|//      the uri, metadata and all content parts into account might be
comment|//      to expensive for most common use cases.
return|return
name|o
operator|instanceof
name|ContentItem
operator|&&
comment|//check type
operator|(
operator|(
name|ContentItem
operator|)
name|o
operator|)
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s uri=[%s], content=[%s;mime-type:%s%s], metadata=[%s triples], "
operator|+
literal|"parts=%s"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
comment|//the implementation
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
comment|//the URI
comment|//the size in Bytes (if available)
name|getBlob
argument_list|()
operator|.
name|getContentLength
argument_list|()
operator|>=
literal|0
condition|?
operator|(
literal|"size:"
operator|+
name|getBlob
argument_list|()
operator|.
name|getContentLength
argument_list|()
operator|+
literal|" bytes;"
operator|)
else|:
literal|""
argument_list|,
name|getBlob
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|,
comment|//the mime-type
comment|//and parameter (if available)
name|getBlob
argument_list|()
operator|.
name|getParameter
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
operator|(
literal|";parameter:"
operator|+
name|getBlob
argument_list|()
operator|.
name|getParameter
argument_list|()
operator|)
argument_list|,
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
comment|//the number of triples
name|parts
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
comment|//and the part URIs
block|}
block|}
end_class

end_unit

