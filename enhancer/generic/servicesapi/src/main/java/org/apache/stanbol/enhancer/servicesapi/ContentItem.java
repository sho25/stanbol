begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_comment
comment|/**  * A unit of content that Stanbol Enhancer can enhance.  *<p>  * Gives access to the binary content that  * was registered, and the ImmutableGraph that represents its metadata  * (provided by client and/or generated).  */
end_comment

begin_interface
specifier|public
interface|interface
name|ContentItem
block|{
comment|/** The Uri of this ContentItem (either supplied by client or generated by Stanbol Enhancer) */
name|IRI
name|getUri
parameter_list|()
function_decl|;
comment|/**      * The binary content stream. Shortcut for      *<code>{@link #getBlob()}{@link Blob#getStream() .getStream()}</code>      * @return the InputStream      */
name|InputStream
name|getStream
parameter_list|()
function_decl|;
comment|/**      * The MimeType. Shortcut for      *<code>{@link #getBlob()}{@link Blob#getMimeType() .getMimeType()}</code>.      * @return the MimeType as string      */
name|String
name|getMimeType
parameter_list|()
function_decl|;
comment|/**      * Read/write lock used to synchronise access to the {@link #getMetadata()      * metadata} and the content parts of this content item.<p>      * The lock needs to be used for reading and writing information from/to      * the ContentItem. In case the {@link Graph} retured by {@link #getMetadata()}      * is an instanceof used by the {@link org.apache.clerezza.rdf.core.access.LockableGraph}      * the {@link Lock} returned by this mehtod is the same as used by the      * metadata.This is to avoid deadlocks when using a lock while iterating over       * the {@link #getMetadata() metadata} and simultaneously accessing the content       * parts.      *        * @return the lock used for the content parts and the {@link LockableGraph}      * containing the metadata of this content item.      */
name|ReadWriteLock
name|getLock
parameter_list|()
function_decl|;
comment|/** Optional metadata */
name|Graph
name|getMetadata
parameter_list|()
function_decl|;
comment|/**      * The main content of this content item      *       * @return the blob at index 0      */
name|Blob
name|getBlob
parameter_list|()
function_decl|;
comment|/**      * A content item may consists of multiple parts, while the part with index 0 should always be a blob,      * higher position may be used by Enhancer to story arbitrary objects, such objects can be used for       * accessing the precomputations of EnhancementEngines previous in the chain.      * @throws NoSuchPartException if no part with the parsed index exists      * @throws ClassCastException if the class of the part is not compatiple with      * the requested class      * @throws IllegalArgumentException if<code>null</code> is parsed as      * clazz.      */
parameter_list|<
name|T
parameter_list|>
name|T
name|getPart
parameter_list|(
name|int
name|index
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|NoSuchPartException
function_decl|;
comment|/**      * Each part of the content item has a URI. EnhancementEngines typically access parts by their Uri as the      * position may vary depending on the chain.      * @throws NoSuchPartException if no part with the parsed uri exists      * @throws ClassCastException if the class of the part is not compatiple with      * the requested class      * @throws IllegalArgumentException if<code>null</code> is parsed as      * uri or clazz.      */
parameter_list|<
name|T
parameter_list|>
name|T
name|getPart
parameter_list|(
name|IRI
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|NoSuchPartException
function_decl|;
comment|/**      * Get the uri of the part at the specified index      * @throws NoSuchPartException if no part with the parsed index exists      */
name|IRI
name|getPartUri
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|NoSuchPartException
function_decl|;
comment|/**      * Add a new part to this ContentItem      *       * @param uriRef the URI of the part      * @param object the part      * @return the part replaced by the parsed object or<code>null</code> if      * no part with the parsed URI was present      * @throws IllegalArgumentException if<code>null</code> is parsed as      * uriRef or object.      */
name|Object
name|addPart
parameter_list|(
name|IRI
name|uriRef
parameter_list|,
name|Object
name|object
parameter_list|)
function_decl|;
comment|/**      * Removes a part - other than the main content part - from this ContentItem      * @param index the index of the part to remove. NOTE that index '0'       * - the main content part - can NOT be removed!      * @throws NoSuchPartException if no ContentPart with the parsed id exists      * @throws IllegalArgumentException it the parsed index&lt; 0      * @throws IllegalStateException if '0' is parsed as index. The index '0'       * - the main content part - can NOT be removed!      */
name|void
name|removePart
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      * Removes a part - other than the main content part - from this ContentItem      * @param uriRef the uri of the part to remove. NOTE that the part with the      * uri<code>{@link #getPartUri(int) getPartUri(0)}</code> - the main       * content part - can NOT be removed!      * @throws NoSuchPartException if no ContentPart with the parsed uri exists      * @throws IllegalArgumentException it the parsed uri is<code>null</code>      * @throws IllegalStateException if the parsed uri is equals to      *<code>{@link #getPartUri(int) getPartUri(0)}</code>. This uri refers to      * the main content part. This part can NOT be removed by this method      */
name|void
name|removePart
parameter_list|(
name|IRI
name|uriRef
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

