begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility Class with methods allowing to parse line based configurations formatted  * like:  *<code><pre>  *&lt;key1&gt;;&lt;parm1&gt;=&lt;value1&gt;,&lt;value2&gt;;&lt;parm2&gt;=&lt;value1&gt;...  *&lt;key2&gt;;&lt;state&gt  *&lt;key3&gt;;&lt;state&gt=true  *&lt;key4&gt;;&lt;parm1&gt;=&lt;value1&gt;;&lt;parm1&gt;=&lt;value2&gt;  *</pre></code>  * Rules:<ul>  *<li> keys MUST NOT be contained multiple times  *<li> lines with empty keys are ignored (this includes empty lines or   * lines that are<code>null</code>)  *<li> If parameter appear multiple time values are appended  *<li> empty parameter names are ignored  *<li> parameters MIST NOT start with '='  *</ul>  *<p>  * This is intended to be used to parse richer configurations form OSGI  * configuration files.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ConfigUtils
block|{
specifier|private
name|ConfigUtils
parameter_list|()
block|{
comment|/* Do not create instances of utility classes */
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rdfExt2Formats
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
comment|//default to rdf+xml
name|m
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
comment|//no extension is also mapped to rdf+xml
name|m
operator|.
name|put
argument_list|(
literal|"rdf"
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"xml"
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"owl"
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"rdfs"
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"json"
argument_list|,
name|SupportedFormat
operator|.
name|RDF_JSON
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"nt"
argument_list|,
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"n3"
argument_list|,
name|SupportedFormat
operator|.
name|N3
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"ttl"
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
expr_stmt|;
name|rdfExt2Formats
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|/**      * Guesses the RDF format based on the provided file extension. Parsing      *<code>null</code> will return the default format.      * @param extension the extension or<code>null</code> to ask for the default      * @return the mime type or<code>null</code> if the parsed extension is not      * known.      */
specifier|public
specifier|static
name|String
name|guessRdfFormat
parameter_list|(
name|String
name|extension
parameter_list|)
block|{
return|return
name|rdfExt2Formats
operator|.
name|get
argument_list|(
name|extension
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Parses configurations formatted like      *<code><pre>      *&lt;key1&gt;;&lt;parm1&gt;=&lt;value1&gt;,&lt;value2&gt;;&lt;parm2&gt;=&lt;value1&gt;...      *&lt;key2&gt;;&lt;state&gt      *&lt;key3&gt;;&lt;state&gt=true      *&lt;key4&gt;;&lt;parm1&gt;=&lt;value1&gt;;&lt;parm1&gt;=&lt;value2&gt;      *</pre></code>      * Rules:<ul>      *<li> keys MUST NOT be contained multiple times      *<li> lines with empty keys are ignored (this includes empty lines or       * lines that are<code>null</code>)      *<li> If parameter appear multiple time values are appended      *<li> empty parameter names are ignored      *<li> parameters MIST NOT start with '='      *</ul>      * @param configuration The configuration      * @throws IllegalArgumentException on any syntax error in the parsed      * configuration      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|parseConfig
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|configuration
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|configuration
control|)
block|{
name|parseLine
argument_list|(
name|config
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
comment|/**      * Parses configurations formatted like      *<code><pre>      *&lt;key1&gt;;&lt;parm1&gt;=&lt;value1&gt;,&lt;value2&gt;;&lt;parm2&gt;=&lt;value1&gt;...      *&lt;key2&gt;;&lt;state&gt      *&lt;key3&gt;;&lt;state&gt=true      *&lt;key4&gt;;&lt;parm1&gt;=&lt;value1&gt;;&lt;parm1&gt;=&lt;value2&gt;      *</pre></code>      * Rules:<ul>      *<li> keys MUST NOT be contained multiple times      *<li> lines with empty keys are ignored (this includes empty lines or       * lines that are<code>null</code>)      *<li> If parameter appear multiple time values are appended      *<li> empty parameter names are ignored      *<li> parameters MIST NOT start with '='      *</ul>      * @param confIterator The Iterator over the lines of the configuration.      * @throws IllegalArgumentException on any syntax error in the parsed      * configuration      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|parseConfig
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|confIterator
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|confIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|parseLine
argument_list|(
name|config
argument_list|,
name|confIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
comment|/**      * Internally used to parse single lines of an parsed {@link Iterable} or      * {@link Iterator}      * @param config the map used to write the parsed values      * @param line the line to parse      */
specifier|private
specifier|static
name|void
name|parseLine
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|config
parameter_list|,
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|isEmpty
argument_list|()
operator|||
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|';'
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration entry ignored because of empty Engine name "
operator|+
literal|"(entry: '"
operator|+
name|line
operator|+
literal|"')!"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|elements
init|=
name|line
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|elements
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|getParameters
argument_list|(
name|elements
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The configuration MUST NOT contain the same key '"
operator|+
name|elements
index|[
literal|0
index|]
operator|+
literal|"' multiple times!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses the boolean value form the values for the parsed key.      * The state is assumed as<code>true</code> if the key is present and the       * value is either an empty list of the first element of the list evaluates      * to<code>{@link Boolean#parseBoolean(String)} == true</code>.      * @param parameters the parameter      * @param key the key      * @return the boolean state of the requested key      */
specifier|public
specifier|static
name|boolean
name|getState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|value
init|=
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
operator|&&
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|/**      * Getter for the first value of a given key      * @param parameters the parameters      * @param key the key      * @return the first value or<code>null</code> if the key is not present      * or the list is empty.      */
specifier|public
specifier|static
name|String
name|getValue
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Utility that parses 'key=value,value2' parameters from the parsed array.      * If key appear multiple time values are appended.      * @param elements the elements      * @param start the start position within the parsed array to start parsing      * @return the parsed parameters. If no value is provided for a key the      * value of entries will be NOT<code>null</code> but en empty list. The      * returned Map provides read and write access.      * @throws IllegalArgumentExeption if elements are illegal formatted (e.g.      * if the start with an '='      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getParameters
parameter_list|(
name|String
index|[]
name|elements
parameter_list|,
name|int
name|start
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
decl_stmt|;
if|if
condition|(
name|elements
operator|.
name|length
operator|>
name|start
condition|)
block|{
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|elements
operator|.
name|length
operator|-
name|start
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|elements
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|elements
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|elements
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'='
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to "
operator|+
literal|"parse parameters because element at index "
operator|+
name|i
operator|+
literal|" MUST NOT start with '=' (element: '"
operator|+
name|elements
index|[
name|i
index|]
operator|+
literal|"')!"
argument_list|)
throw|;
block|}
name|int
name|sepIndex
init|=
name|elements
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
name|String
name|param
init|=
name|sepIndex
operator|>
literal|0
condition|?
name|elements
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sepIndex
argument_list|)
operator|.
name|trim
argument_list|()
else|:
name|elements
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|sepIndex
operator|>
literal|0
operator|&&
name|elements
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|>
name|sepIndex
operator|+
literal|1
condition|?
name|elements
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
name|sepIndex
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paramValues
init|=
name|parameters
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValues
operator|==
literal|null
condition|)
block|{
name|paramValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|paramValues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|v
range|:
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|paramValues
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|parameters
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
block|}
end_class

end_unit

