begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionMetadataHelper
import|;
end_import

begin_class
specifier|public
class|class
name|ExecutionMetadata
block|{
specifier|private
specifier|final
name|ChainExecution
name|chainExecution
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Execution
argument_list|>
name|engineExecutions
decl_stmt|;
specifier|public
specifier|static
name|ExecutionMetadata
name|parseFrom
parameter_list|(
name|TripleCollection
name|executionMetadata
parameter_list|,
name|UriRef
name|contentItemUri
parameter_list|)
block|{
name|NonLiteral
name|ce
init|=
name|ExecutionMetadataHelper
operator|.
name|getChainExecution
argument_list|(
name|executionMetadata
argument_list|,
name|contentItemUri
argument_list|)
decl_stmt|;
name|ExecutionMetadata
name|em
decl_stmt|;
if|if
condition|(
name|ce
operator|!=
literal|null
condition|)
block|{
name|em
operator|=
operator|new
name|ExecutionMetadata
argument_list|(
name|executionMetadata
argument_list|,
name|contentItemUri
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|em
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|em
return|;
block|}
specifier|private
name|ExecutionMetadata
parameter_list|(
name|TripleCollection
name|executionMetadata
parameter_list|,
name|UriRef
name|contentItemUri
parameter_list|,
name|NonLiteral
name|ce
parameter_list|)
block|{
name|chainExecution
operator|=
operator|new
name|ChainExecution
argument_list|(
name|executionMetadata
argument_list|,
name|ce
argument_list|)
expr_stmt|;
name|engineExecutions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Execution
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|NonLiteral
name|ex
range|:
name|ExecutionMetadataHelper
operator|.
name|getExecutions
argument_list|(
name|executionMetadata
argument_list|,
name|ce
argument_list|)
control|)
block|{
name|Execution
name|execution
init|=
operator|new
name|Execution
argument_list|(
name|chainExecution
argument_list|,
name|executionMetadata
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|engineExecutions
operator|.
name|put
argument_list|(
name|execution
operator|.
name|getExecutionNode
argument_list|()
operator|.
name|getEngineName
argument_list|()
argument_list|,
name|execution
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ChainExecution
name|getChainExecution
parameter_list|()
block|{
return|return
name|chainExecution
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Execution
argument_list|>
name|getEngineExecutions
parameter_list|()
block|{
return|return
name|engineExecutions
return|;
block|}
block|}
end_class

end_unit

