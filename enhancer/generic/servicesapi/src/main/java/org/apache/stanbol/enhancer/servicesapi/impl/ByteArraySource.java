begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentSource
import|;
end_import

begin_comment
comment|/**  * Allows to use a byte array as {@link ContentSource}. If the content is  * already stored in an byte array this implementation is preferable over the  * {@link StreamSource} as it does not require to copy the content to yet an  * other byte array when creating an in-memory content item when using the  * {@link #getData()} method.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ByteArraySource
implements|implements
name|ContentSource
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|NO_HEADERS
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|content
decl_stmt|;
specifier|private
name|String
name|mt
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
decl_stmt|;
comment|/**      * Constructs a {@link ContentSource} for the passed byte array. The mime type will      * be set to "<code>application/octet-stream</code>"      * @param content the array containing the content      */
specifier|public
name|ByteArraySource
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|this
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a {@link ContentSource} for the passed byte array and mime type.       * When parsing text the charset should be set as mime type parameter (e.g.      * "<code>text/plain; charset=UTF-8</code>". UTF-8 is assumed as default if       * missing.      * @param content the array containing the content      * @param mt the media type or<code>null</code> if unknown      */
specifier|public
name|ByteArraySource
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mt
parameter_list|)
block|{
name|this
argument_list|(
name|content
argument_list|,
name|mt
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a {@link ContentSource} for the passed byte array and mime type.       * When parsing text the charset should be set as mime type parameter (e.g.      * "<code>text/plain; charset=UTF-8</code>". UTF-8 is assumed as default if       * missing.<p>      * This allows in addition to pass the file name or the original file.<br>      * NOTE however this information is currently not used       * as the {@link Blob} interface does not support those information      * @param content the array containing the content      * @param mt the media type or<code>null</code> if unknown      * @param fileName the file name or<code>null</code> if unknown      */
specifier|public
name|ByteArraySource
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mt
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
argument_list|(
name|content
argument_list|,
name|mt
argument_list|,
name|fileName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a {@link ContentSource} for the passed byte array and mime type.       * When parsing text the charset should be set as mime type parameter (e.g.      * "<code>text/plain; charset=UTF-8</code>". UTF-8 is assumed as default if       * missing.<p>      * This allows in addition to pass the file name and a map with       * additional header fields (e.g. HTTP headers).<br>      * NOTE however this information is currently not used       * as the {@link Blob} interface does not support those information      * @param content the array containing the content      * @param mt the media type or<code>null</code> if unknown      * @param fileName the file name or<code>null</code> if unknown      * @param headers additional headers or<code>null</code>/empty map if none.      */
specifier|public
name|ByteArraySource
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mt
parameter_list|,
name|String
name|fileName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|)
block|{
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed byte array MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|mt
operator|=
name|mt
operator|==
literal|null
condition|?
literal|"application/octet-stream"
else|:
name|mt
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|headers
operator|==
literal|null
condition|?
name|NO_HEADERS
else|:
name|headers
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|content
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMediaType
parameter_list|()
block|{
return|return
name|mt
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
block|}
end_class

end_unit

