begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionMetadataHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|ExecutionPlan
import|;
end_import

begin_comment
comment|/**  * Parses the Chain  * @author westei  *  */
end_comment

begin_class
specifier|public
class|class
name|ChainExecution
extends|extends
name|Execution
block|{
specifier|private
specifier|final
name|String
name|chainName
decl_stmt|;
specifier|public
name|ChainExecution
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|NonLiteral
name|node
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|graph
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|NonLiteral
name|ep
init|=
name|ExecutionMetadataHelper
operator|.
name|getExecutionPlanNode
argument_list|(
name|graph
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|chainName
operator|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|ep
argument_list|,
name|ExecutionPlan
operator|.
name|CHAIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chainName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getChainName
parameter_list|()
block|{
return|return
name|chainName
return|;
block|}
block|}
end_class

end_unit

