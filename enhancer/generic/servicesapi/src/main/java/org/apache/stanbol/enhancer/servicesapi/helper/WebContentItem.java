begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_comment
comment|/**  * A ContentItem retrieving its content and MediaType by dereferencing a given   * URI. After the content is loaded from the remote server it is cached   * {@link InMemoryBlob in-memory}.  *   * After construction the<code>metadata</code> graph is empty.  *  */
end_comment

begin_comment
comment|/*  * The current implementation keeps the content in memory after the first connection   * to the remote server.   */
end_comment

begin_class
specifier|public
class|class
name|WebContentItem
extends|extends
name|ContentItemImpl
block|{
comment|/** 	 * Creates an instance for a given URL and uses a {@link SimpleMGraph} to 	 * store metadata in memory. 	 *  	 * @param url the dereferenceable URI 	 */
specifier|public
name|WebContentItem
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an instance for a given URL and an existing {@link MGraph} to      * store the metadata.      * @param url the dereferenceable URI      * @param metadata the {@link MGraph} to store the metadata      */
specifier|public
name|WebContentItem
parameter_list|(
name|URL
name|url
parameter_list|,
name|MGraph
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|UriRef
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UrlBlob
argument_list|(
name|url
argument_list|)
argument_list|,
name|metadata
operator|==
literal|null
condition|?
operator|new
name|SimpleMGraph
argument_list|()
else|:
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Blob implementation that dereferences the parsed URL on the first 	 * access to the Blob. The downloaded content is stored within an 	 * {@link InMemoryBlob} 	 * 	 */
specifier|private
specifier|static
class|class
name|UrlBlob
implements|implements
name|Blob
block|{
specifier|private
name|Blob
name|dereferenced
decl_stmt|;
specifier|private
specifier|final
name|URL
name|url
decl_stmt|;
specifier|protected
name|UrlBlob
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
if|if
condition|(
name|dereferenced
operator|==
literal|null
condition|)
block|{
name|dereference
argument_list|()
expr_stmt|;
block|}
return|return
name|dereferenced
operator|.
name|getMimeType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
if|if
condition|(
name|dereferenced
operator|==
literal|null
condition|)
block|{
name|dereference
argument_list|()
expr_stmt|;
block|}
return|return
name|dereferenced
operator|.
name|getStream
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameter
parameter_list|()
block|{
if|if
condition|(
name|dereferenced
operator|==
literal|null
condition|)
block|{
name|dereference
argument_list|()
expr_stmt|;
block|}
return|return
name|dereferenced
operator|.
name|getParameter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
if|if
condition|(
name|dereferenced
operator|==
literal|null
condition|)
block|{
name|dereference
argument_list|()
expr_stmt|;
block|}
return|return
name|dereferenced
operator|.
name|getContentLength
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|dereference
parameter_list|()
block|{
comment|//checking again in the synchronized section
if|if
condition|(
name|dereferenced
operator|==
literal|null
condition|)
block|{
name|URLConnection
name|uc
decl_stmt|;
try|try
block|{
name|uc
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|uc
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|String
name|mimeType
init|=
name|uc
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
literal|"application/octet-stream"
expr_stmt|;
block|}
name|dereferenced
operator|=
operator|new
name|InMemoryBlob
argument_list|(
name|in
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception derefereing URI "
operator|+
name|url
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

