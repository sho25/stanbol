begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|getDependend
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|getEngine
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|isOptional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_comment
comment|/**  * BaseException thrown by {@link Chain} implementations or  * {@link EnhancementJobManager} implementations when encountering problems   * while executing e Chain  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ChainException
extends|extends
name|EnhancementException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|ChainException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ChainException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a chain exception for the parsed node within the parsed executionPlan      * @param executionPlan      * @param node      * @param message      * @param cause      */
specifier|public
name|ChainException
parameter_list|(
name|Graph
name|executionPlan
parameter_list|,
name|NonLiteral
name|node
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to execute node {} (engine: {} | optional : {}"
operator|+
literal|" | dependsOn : {}) because of: {}"
argument_list|,
name|node
argument_list|,
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
argument_list|,
name|isOptional
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
argument_list|,
name|getDependend
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
argument_list|,
name|message
operator|==
literal|null
operator|||
name|message
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"<unknown>"
else|:
name|message
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

