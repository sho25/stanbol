begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|serviceapi
operator|.
name|helper
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
operator|.
name|ORDERING_EXTRACTION_ENHANCEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
operator|.
name|ORDERING_NLP_LANGAUGE_DETECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
operator|.
name|ORDERING_NLP_POS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
operator|.
name|ORDERING_NLP_SENTENCE_DETECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
operator|.
name|ORDERING_NLP_TOKENIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
operator|.
name|ORDERING_POST_PROCESSING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ChainException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionMetadataHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|ContentItemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * UnitTests for EnhancementProperties   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|EnhancementPropertyTest
block|{
specifier|private
specifier|static
specifier|final
class|class
name|TestEnhancementEngine
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
decl_stmt|;
name|TestEnhancementEngine
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|order
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|singletonMap
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TestEnhancementEngine
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{         }
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|props
return|;
block|}
block|}
empty_stmt|;
specifier|private
specifier|static
class|class
name|TestContentItem
extends|extends
name|ContentItemImpl
block|{
specifier|protected
name|TestContentItem
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|UriRef
argument_list|(
name|uri
argument_list|)
argument_list|,
operator|new
name|TestBlob
argument_list|(
name|content
argument_list|)
argument_list|,
operator|new
name|IndexedMGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestBlob
implements|implements
name|Blob
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
name|TestBlob
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|text
operator|.
name|getBytes
argument_list|(
name|UTF8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
literal|"text/plain"
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameter
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"charset"
argument_list|,
name|UTF8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
block|}
comment|/**      * Simple Chain implementation that support chain scope enhancement properties      * as used for some of the tests.      */
specifier|private
specifier|static
class|class
name|TestChain
implements|implements
name|Chain
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|engines
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|chainProperties
decl_stmt|;
name|TestChain
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|engines
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|engines
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|TestChain
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|engines
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|chainProperties
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|engines
operator|=
name|engines
expr_stmt|;
name|this
operator|.
name|chainProperties
operator|=
name|chainProperties
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Graph
name|getExecutionPlan
parameter_list|()
throws|throws
name|ChainException
block|{
return|return
name|ExecutionPlanHelper
operator|.
name|calculateExecutionPlan
argument_list|(
name|name
argument_list|,
name|engines
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|chainProperties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEngines
parameter_list|()
throws|throws
name|ChainException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|engines
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|engine
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_MAX_SUGGESTIONS
init|=
literal|"enhancer.maxSuggestions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_DEREFERENCE_LANGUAGES
init|=
literal|"engine.dereference.language"
decl_stmt|;
comment|// Some EnhancementEngines we will use in the test chains
specifier|private
specifier|static
specifier|final
name|EnhancementEngine
name|langdetect
init|=
operator|new
name|TestEnhancementEngine
argument_list|(
literal|"langdetect"
argument_list|,
name|ORDERING_NLP_LANGAUGE_DETECTION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnhancementEngine
name|sentence
init|=
operator|new
name|TestEnhancementEngine
argument_list|(
literal|"sentence"
argument_list|,
name|ORDERING_NLP_SENTENCE_DETECTION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnhancementEngine
name|token
init|=
operator|new
name|TestEnhancementEngine
argument_list|(
literal|"token"
argument_list|,
name|ORDERING_NLP_TOKENIZING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnhancementEngine
name|pos
init|=
operator|new
name|TestEnhancementEngine
argument_list|(
literal|"pos"
argument_list|,
name|ORDERING_NLP_POS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnhancementEngine
name|linking
init|=
operator|new
name|TestEnhancementEngine
argument_list|(
literal|"linking"
argument_list|,
name|ORDERING_EXTRACTION_ENHANCEMENT
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnhancementEngine
name|dereference
init|=
operator|new
name|TestEnhancementEngine
argument_list|(
literal|"dereference"
argument_list|,
name|ORDERING_POST_PROCESSING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|engines
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|langdetect
argument_list|,
name|sentence
argument_list|,
name|token
argument_list|,
name|pos
argument_list|,
name|linking
argument_list|,
name|dereference
argument_list|)
decl_stmt|;
comment|// The chain we will use for the tests
specifier|private
name|ContentItem
name|contentItem
decl_stmt|;
comment|/**      * creates the content item used by the test      * @throws ChainException      */
annotation|@
name|Before
specifier|public
name|void
name|initContentItem
parameter_list|()
throws|throws
name|ChainException
block|{
name|contentItem
operator|=
operator|new
name|TestContentItem
argument_list|(
literal|"urn:apache.stanbol:enhancer:test1"
argument_list|,
literal|"This is a test"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialises the ExecutionMetadata based on the chain used by the test.      * This is typically done by the {@link EnhancementJobManager}, but as we do      * not use one for the tests we need to do this part manually      * @param chain      * @throws ChainException      */
specifier|protected
name|void
name|initExecutionMetadata
parameter_list|(
name|Chain
name|chain
parameter_list|)
throws|throws
name|ChainException
block|{
comment|//init the ExecutionMetadata ... this is normally done by the EnhancementJobManager
name|MGraph
name|em
init|=
name|ExecutionMetadataHelper
operator|.
name|initExecutionMetadataContentPart
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|Graph
name|ep
init|=
name|chain
operator|.
name|getExecutionPlan
argument_list|()
decl_stmt|;
name|em
operator|.
name|addAll
argument_list|(
name|ep
argument_list|)
expr_stmt|;
name|ExecutionMetadataHelper
operator|.
name|initExecutionMetadata
argument_list|(
name|em
argument_list|,
name|ep
argument_list|,
name|contentItem
operator|.
name|getUri
argument_list|()
argument_list|,
name|chain
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleProperty
parameter_list|()
throws|throws
name|ChainException
block|{
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|)
argument_list|)
expr_stmt|;
comment|//(1) test a a enhancement property overridden with a engine specific one
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ep
init|=
name|ContentItemHelper
operator|.
name|initRequestPropertiesContentPart
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"EnhancementProperties ContentPart was not initialised"
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|ep
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
comment|//global property
comment|//we expect enhancer.maxSuggestions=5 for the langdetect engine
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiValueProperty
parameter_list|()
throws|throws
name|ChainException
block|{
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|derefernceLanguages
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
comment|//(1) test a a enhancement property overridden with a engine specific one
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ep
init|=
name|ContentItemHelper
operator|.
name|initRequestPropertiesContentPart
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"EnhancementProperties ContentPart was not initialised"
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|ep
operator|.
name|put
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|,
name|derefernceLanguages
argument_list|)
expr_stmt|;
comment|//global property
comment|//we expect enhancer.maxSuggestions=5 for the langdetect engine
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|derefernceLanguages
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngineSpecificProperties
parameter_list|()
throws|throws
name|ChainException
block|{
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|derefernceLanguages
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
name|String
name|maxSuggestions
init|=
literal|"5"
decl_stmt|;
comment|//(1) test a a enhancement property overridden with a engine specific one
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ep
init|=
name|ContentItemHelper
operator|.
name|initRequestPropertiesContentPart
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"EnhancementProperties ContentPart was not initialised"
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|ep
operator|.
name|put
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|maxSuggestions
argument_list|)
expr_stmt|;
name|ep
operator|.
name|put
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|,
name|derefernceLanguages
argument_list|)
expr_stmt|;
comment|//we expect enhancer.maxSuggestions=5 for the langdetect engine
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxSuggestions
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|derefernceLanguages
operator|.
name|containsAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|derefernceLanguages
operator|.
name|size
argument_list|()
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//else empty
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngineSpecificPropertyOverrides
parameter_list|()
throws|throws
name|ChainException
block|{
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|)
argument_list|)
expr_stmt|;
comment|//(1) test a a enhancement property overridden with a engine specific one
name|String
name|specific
init|=
name|linking
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ep
init|=
name|ContentItemHelper
operator|.
name|initRequestPropertiesContentPart
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"EnhancementProperties ContentPart was not initialised"
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|ep
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
comment|//global property
name|ep
operator|.
name|put
argument_list|(
name|specific
operator|+
literal|':'
operator|+
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
comment|//engine specific
comment|//we expect enhancer.maxSuggestions=5 for the langdetect engine
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|specific
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This tests if the {@link ExecutionPlanHelper} correctly adds Enhancement      * Properties to generated Execution plans.<p>      * NOTE: If this fails also tests testing chain level properties are expected      * to fail. This only present to validate that the ExecutionPlan is correctly      * generated by the {@link ExecutionPlanHelper}      * @throws ChainException      */
annotation|@
name|Test
specifier|public
name|void
name|testExecutionPropertySupportOfExecutionPlanHelper
parameter_list|()
throws|throws
name|ChainException
block|{
comment|//the value we are setting
name|Collection
argument_list|<
name|String
argument_list|>
name|derefernceLanguages
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
name|Integer
name|maxSuggestions
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|UriRef
name|maxSuggestionsProperty
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|ehp
operator|+
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
decl_stmt|;
name|UriRef
name|dereferenceLanguagesProperty
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|ehp
operator|+
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
decl_stmt|;
comment|//set up the map with the enhancement properties we want to set for the
comment|//Enhancement Chain
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|enhancementProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|chainProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|chainProperties
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|maxSuggestions
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|chainProperties
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|linkingProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|linkingProperties
operator|.
name|put
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|,
name|derefernceLanguages
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|,
name|linkingProperties
argument_list|)
expr_stmt|;
comment|//create the ExecutionPlan
name|Graph
name|ep
init|=
name|ExecutionPlanHelper
operator|.
name|calculateExecutionPlan
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|enhancementProperties
argument_list|)
decl_stmt|;
comment|//now assert that the enhancement properties where correctly written
comment|//first the property we set on the chain level
name|NonLiteral
name|epNode
init|=
name|ExecutionPlanHelper
operator|.
name|getExecutionPlan
argument_list|(
name|ep
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|epNode
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|maxSuggestionValues
init|=
name|ep
operator|.
name|filter
argument_list|(
name|epNode
argument_list|,
name|maxSuggestionsProperty
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|maxSuggestionValues
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|maxSuggestionValue
init|=
name|maxSuggestionValues
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|maxSuggestionValues
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxSuggestionValue
operator|instanceof
name|TypedLiteral
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxSuggestions
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
operator|(
name|TypedLiteral
operator|)
name|maxSuggestionValue
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxSuggestions
argument_list|,
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|maxSuggestionValue
argument_list|)
argument_list|)
expr_stmt|;
comment|//second the property we set for the linking engine
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|NonLiteral
name|ee
range|:
name|ExecutionPlanHelper
operator|.
name|getExecutionNodes
argument_list|(
name|ep
argument_list|,
name|epNode
argument_list|)
control|)
block|{
name|String
name|engineName
init|=
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|ep
argument_list|,
name|ee
argument_list|)
decl_stmt|;
if|if
condition|(
name|linking
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|engineName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|derefLangValues
init|=
name|ep
operator|.
name|filter
argument_list|(
name|ee
argument_list|,
name|dereferenceLanguagesProperty
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|derefLangValues
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numValues
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|derefLangValues
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|derefLangValues
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|PlainLiteral
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|derefernceLanguages
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|PlainLiteral
operator|)
name|r
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|numValues
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|derefernceLanguages
operator|.
name|size
argument_list|()
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"ExecutionNode for the Linking Engine was not present!"
argument_list|,
name|found
argument_list|)
expr_stmt|;
comment|//NOTE: this does not validate that there are no other (not expected)
comment|//      enhancement properties in the executionPlan
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleChainScopedProperty
parameter_list|()
throws|throws
name|ChainException
block|{
comment|//set up the map with the enhancement properties we want to set for the
comment|//Enhancement Chain
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|enhancementProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//set enhancer.maxSuggestions=5 as chain property (applies for all engines)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|chainProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|chainProperties
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|chainProperties
argument_list|)
expr_stmt|;
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|,
name|enhancementProperties
argument_list|)
argument_list|)
expr_stmt|;
comment|//we expect enhancer.maxSuggestions=5 for the all engine
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngineSpecificChainScopedProperty
parameter_list|()
throws|throws
name|ChainException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|derefernceLanguages
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
name|String
name|maxSuggestions
init|=
literal|"5"
decl_stmt|;
comment|//set up the map with the enhancement properties we want to set for the
comment|//Enhancement Chain
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|enhancementProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//set enhancer.maxSuggestions=5 as chain property (applies for all engines)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|linkingProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|linkingProperties
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxSuggestions
argument_list|)
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|,
name|linkingProperties
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dereferenceProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|dereferenceProperties
operator|.
name|put
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|,
name|derefernceLanguages
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|,
name|dereferenceProperties
argument_list|)
expr_stmt|;
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|,
name|enhancementProperties
argument_list|)
argument_list|)
expr_stmt|;
comment|//we expect enhancer.maxSuggestions=5 for the langdetect engine
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxSuggestions
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|derefernceLanguages
operator|.
name|containsAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|derefernceLanguages
operator|.
name|size
argument_list|()
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//else empty
block|}
block|}
comment|/**      * This tests that chain scoped chain properties are overridden by       * chain scoped engine specific properties      * @throws ChainException      */
annotation|@
name|Test
specifier|public
name|void
name|testChainScopedEngineSpecificPropertyOverrides
parameter_list|()
throws|throws
name|ChainException
block|{
comment|//set enhancer.maxSuggestions=5 as chain property (applies for all engines)
comment|//and enhancer.maxSuggestions=10 for the linking engine
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|enhancementProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|chainProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|chainProperties
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|chainProperties
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|linkingProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|linkingProperties
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|,
name|linkingProperties
argument_list|)
expr_stmt|;
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|,
name|enhancementProperties
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestScopedPropertiesOverrideChainScopedProperties
parameter_list|()
throws|throws
name|ChainException
block|{
comment|//This tests two cases:
comment|// 1. enhancer.maxSuggestions=5 set as chain scoped chain property overridden
comment|//    by enhancer.maxSuggestions=10 set as request scoped property for the
comment|//    linking engine
name|Integer
name|chainMaxSuggestion
init|=
literal|5
decl_stmt|;
name|String
name|requestMaySuggestion
init|=
literal|"10"
decl_stmt|;
comment|// 2. engine.dereference.language=[en,de] set as chain scoped dereference engine
comment|//    specific property is overridden by engine.dereference.language=[it,fr]
comment|//    set as request scoped property for the same engine
name|Collection
argument_list|<
name|String
argument_list|>
name|chainDerefLang
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|requestDerefLang
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"it"
argument_list|,
literal|"fr"
argument_list|)
decl_stmt|;
comment|//set enhancer.maxSuggestions=5 as chain property (applies for all engines)
comment|//and enhancer.maxSuggestions=10 for the linking engine
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|enhancementProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|chainProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|chainProperties
operator|.
name|put
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|chainMaxSuggestion
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dereferenceProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|dereferenceProperties
operator|.
name|put
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|,
name|chainDerefLang
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|,
name|dereferenceProperties
argument_list|)
expr_stmt|;
name|enhancementProperties
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|chainProperties
argument_list|)
expr_stmt|;
name|initExecutionMetadata
argument_list|(
operator|new
name|TestChain
argument_list|(
literal|"test"
argument_list|,
name|engines
argument_list|,
name|enhancementProperties
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ep
init|=
name|ContentItemHelper
operator|.
name|initRequestPropertiesContentPart
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"EnhancementProperties ContentPart was not initialised"
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|ep
operator|.
name|put
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|PROPERTY_MAX_SUGGESTIONS
argument_list|,
name|requestMaySuggestion
argument_list|)
expr_stmt|;
name|ep
operator|.
name|put
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|,
name|requestDerefLang
argument_list|)
expr_stmt|;
for|for
control|(
name|EnhancementEngine
name|engine
range|:
name|engines
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|EnhancementEngineHelper
operator|.
name|getEnhancementProperties
argument_list|(
name|engine
argument_list|,
name|contentItem
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
literal|2
else|:
literal|1
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|linking
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_MAX_SUGGESTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|engine
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dereference
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|props
operator|.
name|get
argument_list|(
name|PROPERTY_DEREFERENCE_LANGUAGES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|requestDerefLang
operator|.
name|containsAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestDerefLang
operator|.
name|size
argument_list|()
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

