begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|serviceapi
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|NoSuchPartException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ContentItemTest
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContentItemTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|ciUri
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Blob
name|blob
init|=
operator|new
name|InMemoryBlob
argument_list|(
literal|"hello"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingUri
parameter_list|()
block|{
operator|new
name|ContentItemImpl
argument_list|(
literal|null
argument_list|,
name|blob
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
block|{}
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingBlob
parameter_list|()
block|{
operator|new
name|ContentItemImpl
argument_list|(
name|ciUri
argument_list|,
literal|null
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
block|{}
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingMetadata
parameter_list|()
block|{
operator|new
name|ContentItemImpl
argument_list|(
name|ciUri
argument_list|,
name|blob
argument_list|,
literal|null
argument_list|)
block|{}
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addingAndRetrieving
parameter_list|()
block|{
name|ContentItem
name|ci
init|=
operator|new
name|ContentItemImpl
argument_list|(
name|ciUri
argument_list|,
name|blob
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
block|{}
decl_stmt|;
name|UriRef
name|partUri
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://foo/"
argument_list|)
decl_stmt|;
name|Date
name|someObject
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|ci
operator|.
name|addPart
argument_list|(
name|partUri
argument_list|,
name|someObject
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ciUri
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/ontology#hasPart"
argument_list|)
argument_list|,
name|partUri
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|partUri
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/ontology#isPartOf"
argument_list|)
argument_list|,
name|ciUri
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|someObject
argument_list|,
name|ci
operator|.
name|getPart
argument_list|(
name|partUri
argument_list|,
name|Date
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|someObject
argument_list|,
name|ci
operator|.
name|getPart
argument_list|(
literal|1
argument_list|,
name|Date
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partUri
argument_list|,
name|ci
operator|.
name|getPartUri
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ciUri
operator|.
name|getUnicodeString
argument_list|()
operator|+
literal|"_main"
argument_list|)
argument_list|,
name|ci
operator|.
name|getPartUri
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ci
operator|.
name|getPart
argument_list|(
literal|2
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Requesting non existance part MUST throw an NoSuchPartException"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchPartException
name|e
parameter_list|)
block|{
comment|/* expected*/
block|}
try|try
block|{
name|ci
operator|.
name|getPart
argument_list|(
operator|new
name|UriRef
argument_list|(
literal|"http://foo/nonexisting"
argument_list|)
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Requesting non existance part MUST throw an NoSuchPartException"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchPartException
name|e
parameter_list|)
block|{
comment|/* expected*/
block|}
try|try
block|{
name|ci
operator|.
name|getPartUri
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Requesting non existance part MUST throw an NoSuchPartException"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchPartException
name|e
parameter_list|)
block|{
comment|/* expected*/
block|}
comment|//finally log the toString
name|log
operator|.
name|info
argument_list|(
literal|"toString: {}"
argument_list|,
name|ci
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|addPartWithoutUri
parameter_list|()
block|{
name|ContentItem
name|ci
init|=
operator|new
name|ContentItemImpl
argument_list|(
name|ciUri
argument_list|,
name|blob
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
block|{}
decl_stmt|;
name|ci
operator|.
name|addPart
argument_list|(
literal|null
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|addPartWithoutPartContent
parameter_list|()
block|{
name|ContentItem
name|ci
init|=
operator|new
name|ContentItemImpl
argument_list|(
name|ciUri
argument_list|,
name|blob
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
block|{}
decl_stmt|;
name|ci
operator|.
name|addPart
argument_list|(
operator|new
name|UriRef
argument_list|(
literal|"http://foo/"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * The ContentItem MUST NOT allow to replace the main content part (the      * Blob stored at index 0)      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|replaceMainPart
parameter_list|()
block|{
name|ContentItem
name|ci
init|=
operator|new
name|ContentItemImpl
argument_list|(
name|ciUri
argument_list|,
name|blob
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
block|{}
decl_stmt|;
name|UriRef
name|mainPart
init|=
name|ci
operator|.
name|getPartUri
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ci
operator|.
name|addPart
argument_list|(
name|mainPart
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

