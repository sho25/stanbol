begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|serviceapi
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|ByteArraySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ContentSourceTest
block|{
specifier|protected
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_STRING
init|=
literal|"Thîs áre têst dàtá!"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_MT
init|=
literal|"application/octet-stream"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_DEFAULT_MT
init|=
literal|"text/plain; charset=UTF-8"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|MT
init|=
literal|"text/plain"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"test.txt"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|HEADERS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|HEADERS
operator|.
name|put
argument_list|(
literal|"Accept"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"application/rdf+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|HEADERS
operator|.
name|put
argument_list|(
literal|"Accept-Language"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|String
name|MT_WITH_PARAM
init|=
literal|"text/plain; charset=UTF-8"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|DATA
init|=
operator|new
name|String
argument_list|(
name|TEST_STRING
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF8
argument_list|)
decl_stmt|;
comment|/*      * Tests ensuring the IllegalArgumentExceptions if null is parsed as stream      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingStream
parameter_list|()
block|{
operator|new
name|StreamSource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingStream1
parameter_list|()
block|{
operator|new
name|StreamSource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingStream2
parameter_list|()
block|{
operator|new
name|StreamSource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingStream3
parameter_list|()
block|{
operator|new
name|StreamSource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingStream4
parameter_list|()
block|{
operator|new
name|StreamSource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
block|}
comment|/*      * Tests ensuring the IllegalArgumentExceptions if null is parsed as      * byte array to       */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingByteArray
parameter_list|()
block|{
operator|new
name|ByteArraySource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingByteArray1
parameter_list|()
block|{
operator|new
name|ByteArraySource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingByteArray2
parameter_list|()
block|{
operator|new
name|ByteArraySource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingByteArray3
parameter_list|()
block|{
operator|new
name|ByteArraySource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
block|}
comment|/*      * Tests ensuring the IllegalArgumentExceptions if null is parsed as      * String to       */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingString
parameter_list|()
block|{
operator|new
name|StringSource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingString1
parameter_list|()
block|{
operator|new
name|StringSource
argument_list|(
literal|null
argument_list|,
name|MT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingString2
parameter_list|()
block|{
operator|new
name|StringSource
argument_list|(
literal|null
argument_list|,
name|UTF8
argument_list|,
name|MT
argument_list|)
expr_stmt|;
block|}
comment|/*      * Tests checking correct handling of data      */
annotation|@
name|Test
specifier|public
name|void
name|checkStreamFromStreamSource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|source
operator|.
name|getStream
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|DATA
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|source
operator|.
name|getStream
argument_list|()
expr_stmt|;
comment|//multiple calls are supported -> is OK
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|//multiple calls are not supported -> illegal state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkDataFromStreamSource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|DATA
argument_list|,
name|source
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//multiple calls must work
name|source
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkStreamFromByteArraySource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|source
operator|.
name|getStream
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|DATA
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|source
operator|.
name|getStream
argument_list|()
expr_stmt|;
comment|//multiple calls are supported -> is OK
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|//multiple calls are not supported -> illegal state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkDataFromByteArraySource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|DATA
argument_list|,
name|source
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//also check that the array is not copied
comment|//Also checks multiple calls to getData MUST work
name|assertSame
argument_list|(
name|DATA
argument_list|,
name|source
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkStreamFromStringSource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|source
operator|.
name|getStream
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|DATA
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|source
operator|.
name|getStream
argument_list|()
expr_stmt|;
comment|//multiple calls are supported -> is OK
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|//multiple calls are not supported -> illegal state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
block|}
comment|//test different encoding
name|Charset
name|ISO8859_4
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"ISO-8859-4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|iso8859_4_data
init|=
name|TEST_STRING
operator|.
name|getBytes
argument_list|(
name|ISO8859_4
argument_list|)
decl_stmt|;
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
name|ISO8859_4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|source
operator|.
name|getStream
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|iso8859_4_data
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkDataFromStringSource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|DATA
argument_list|,
name|source
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//multiple calls must work
name|source
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
comment|/*      * Tests checking correct handling of parameters and default values      */
annotation|@
name|Test
specifier|public
name|void
name|checkMediaTypeForStreamSource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
literal|null
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
name|MT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
name|MT
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
name|MT
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
comment|//Parameters MUST BE preserved!
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
name|MT_WITH_PARAM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT_WITH_PARAM
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
name|MT_WITH_PARAM
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT_WITH_PARAM
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
name|MT_WITH_PARAM
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT_WITH_PARAM
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkMediaTypeForByteArraySource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
literal|null
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
name|MT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
name|MT
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
comment|//Parameters MUST BE preserved!
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
name|MT_WITH_PARAM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT_WITH_PARAM
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
name|MT_WITH_PARAM
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT_WITH_PARAM
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
name|MT_WITH_PARAM
argument_list|,
name|FILE_NAME
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MT_WITH_PARAM
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkMediaTypeForStringSource
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|STRING_DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING_DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
name|UTF8
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING_DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING_DEFAULT_MT
argument_list|,
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
comment|//this can be used to force the system default
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mt
init|=
name|ContentItemHelper
operator|.
name|parseMimeType
argument_list|(
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|OTHER_MT
init|=
literal|"text/rtf"
decl_stmt|;
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
name|OTHER_MT
argument_list|)
expr_stmt|;
name|mt
operator|=
name|ContentItemHelper
operator|.
name|parseMimeType
argument_list|(
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OTHER_MT
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UTF8
operator|.
name|name
argument_list|()
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
literal|null
argument_list|,
name|OTHER_MT
argument_list|)
expr_stmt|;
name|mt
operator|=
name|ContentItemHelper
operator|.
name|parseMimeType
argument_list|(
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OTHER_MT
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UTF8
operator|.
name|name
argument_list|()
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Charset
name|ISO8859_4
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"ISO-8859-4"
argument_list|)
decl_stmt|;
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_STRING
argument_list|,
name|ISO8859_4
argument_list|,
name|OTHER_MT
argument_list|)
expr_stmt|;
name|mt
operator|=
name|ContentItemHelper
operator|.
name|parseMimeType
argument_list|(
name|source
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OTHER_MT
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ISO8859_4
operator|.
name|name
argument_list|()
argument_list|,
name|mt
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkFileName
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|source
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
literal|null
argument_list|,
name|FILE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_NAME
argument_list|,
name|source
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
literal|null
argument_list|,
name|FILE_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_NAME
argument_list|,
name|source
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
literal|null
argument_list|,
name|FILE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_NAME
argument_list|,
name|source
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkHeaders
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|source
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|getHeaders
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEADERS
argument_list|,
name|source
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|source
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|source
operator|.
name|getHeaders
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ByteArraySource
argument_list|(
name|DATA
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HEADERS
argument_list|,
name|source
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

