begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|serviceapi
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class intended to be extended by UnitTest classes for specific {@link Blob}  * implementations. This class tests if parsed mime-types are handled correctly.  * It does not test the actual handling of the data, because this is considered  * specific for each Blob implementation.<p>  * The {@link #getBlobToTestMimetypeHandling(String)} MUST BE implemented to use  * the generic unit tests defined by this class.<p>  *<b>NOTE:</b>: {@link Blob} implementation can use the   * {@link ContentItemHelper#parseMimeType(String)} method for parsing   * mime-type string.  * @see InMemoryBlobTest  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBlobTest
block|{
comment|/**      * Getter used to get the Blob to test mime-type handling. The content is      * not used for such tests and may be set to anything.      * @param mimeType the mimetype      * @return      */
specifier|protected
specifier|abstract
name|Blob
name|getBlobToTestMimetypeHandling
parameter_list|(
name|String
name|mimeType
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|testNullWildCard
parameter_list|()
block|{
name|Blob
name|blob
decl_stmt|;
try|try
block|{
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//if no detection of the mimeType is supported this is expected
return|return;
block|}
comment|//if autodetection is supported, check that the mimetype is not null
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|blob
operator|.
name|getMimeType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyMimeType
parameter_list|()
block|{
name|getBlobToTestMimetypeHandling
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWildcardType
parameter_list|()
block|{
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"*/*;charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWildcardSubType
parameter_list|()
block|{
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/*;charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyMimetype
parameter_list|()
block|{
name|getBlobToTestMimetypeHandling
argument_list|(
literal|";charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingSubType
parameter_list|()
block|{
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text;charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyType
parameter_list|()
block|{
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"/plain;charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptySubType
parameter_list|()
block|{
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/;charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMimeType
parameter_list|()
block|{
name|Blob
name|blob
init|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset=UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset=UTF-8;other=test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleSeparators
parameter_list|()
block|{
name|Blob
name|blob
init|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;;charset=UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset=UTF-8;;other=test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalFormatedParameter
parameter_list|()
block|{
name|Blob
name|blob
init|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;=UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset=UTF-8;=illegal"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;=illegal;charset=UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset="
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset=UTF-8;test="
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;charset=UTF-8;test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|blob
operator|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;test;charset=UTF-8;"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testReadOnlyParameter
parameter_list|()
block|{
name|Blob
name|blob
init|=
name|getBlobToTestMimetypeHandling
argument_list|(
literal|"text/plain;test;charset=UTF-8"
argument_list|)
decl_stmt|;
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

