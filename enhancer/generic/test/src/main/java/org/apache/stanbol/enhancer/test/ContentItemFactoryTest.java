begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|simple
operator|.
name|SimpleGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Enhancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This UnitTest MUST BE passed by all {@link ContentItemFactory} implementations.  * It only checks the creation of {@link ContentItem}s and {@link Blob}s. It  * does not actually test the ContentItem and Blob implementations as those  * need to pass {@link ContentItemTest} and {@link BlobTest} respectively.  *   * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ContentItemFactoryTest
block|{
comment|/**      * Internally used to test {@link ContentReference} constructors      */
specifier|private
specifier|static
name|ContentReference
name|TEST_CR
init|=
operator|new
name|ContentReference
argument_list|()
block|{
name|ContentSource
name|source
init|=
operator|new
name|StringSource
argument_list|(
literal|"Dummy Reference Content"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
literal|"urn:dummy.reference"
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentSource
name|dereference
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|source
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Internally used to test {@link ContentSource} constructors      */
specifier|private
specifier|static
name|ContentSource
name|TEST_CS
init|=
operator|new
name|StringSource
argument_list|(
literal|"Dummy Content"
argument_list|)
decl_stmt|;
comment|/**      * The prefix used for testing      */
specifier|private
specifier|static
name|String
name|PREFIX
init|=
literal|"http://www.example.com/prefix#"
decl_stmt|;
comment|/**      * The {@link ContentItem#getUri() ID} used for testing      */
specifier|private
specifier|static
name|IRI
name|ID
init|=
operator|new
name|IRI
argument_list|(
literal|"http://www.example.com/content-items#12345"
argument_list|)
decl_stmt|;
comment|/**      * ImmutableGraph used to test of parsed metadata are preserved      */
specifier|private
specifier|static
name|Graph
name|METADATA
init|=
operator|new
name|SimpleGraph
argument_list|()
decl_stmt|;
static|static
block|{
name|METADATA
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ID
argument_list|,
name|Properties
operator|.
name|RDF_TYPE
argument_list|,
name|Enhancer
operator|.
name|CONTENT_ITEM
argument_list|)
argument_list|)
expr_stmt|;
name|METADATA
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ID
argument_list|,
name|Properties
operator|.
name|RDFS_LABEL
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"Test ContentItem"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Member variable for the {@link ContentItemFactory} instance used for      * testing. This is initialise {@link Before} the first unit test is      * esecuted.       */
specifier|protected
name|ContentItemFactory
name|contentItemFactory
decl_stmt|;
comment|/**      * This method is assumed to return an new ContentItemFactory instance on       * every call. Currently it is called only once in the {@link Before} state      * of the first test.<p>      * Subclasses can use the {@link #contentItemFactory} member      * variable in additional tests.      * @return the {@link ContentItemFactory} instance used for the tests.      */
specifier|protected
specifier|abstract
name|ContentItemFactory
name|createContentItemFactory
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Initialises the {@link #contentItemFactory} {@link Before} the first       * unit test is executed. Needs not to be manually called by test methods.      */
annotation|@
name|Before
specifier|public
name|void
name|initFactory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|contentItemFactory
operator|==
literal|null
condition|)
block|{
name|contentItemFactory
operator|=
name|createContentItemFactory
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to create ContentItemFactory instance"
argument_list|,
name|contentItemFactory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Set of tests to test that IllegalArgumentExceptions are      * thrown if null is parsed as ContentSource to the various      * createContentItem methods      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiContentSource
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
operator|(
name|ContentSource
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiContentSource2
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|PREFIX
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiContentSource3
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|ID
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiContentSource4
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|ID
argument_list|,
literal|null
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiContentSource5
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|PREFIX
argument_list|,
literal|null
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Set of tests to test that IllegalArgumentExceptions are      * thrown if null is parsed as ContentReference to the various      * createContentItem methods      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiContentReference
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
operator|(
name|ContentReference
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiContentReference2
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
literal|null
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Set of tests to test that IllegalArgumentExceptions are      * thrown if null is parsed to the createBlob methods.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingBlobContentReference
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createBlob
argument_list|(
operator|(
name|ContentReference
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingBlobContentSource
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createBlob
argument_list|(
operator|(
name|ContentSource
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/*      * Set of tests to test that IllegalArgumentExceptions if      * null is parsed as prefix      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
name|TEST_CS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingCiPrefix2
parameter_list|()
throws|throws
name|IOException
block|{
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
name|TEST_CS
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the generated ID starts with the parsed prefix      */
annotation|@
name|Test
specifier|public
name|void
name|testPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|PREFIX
argument_list|,
name|TEST_CS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The ID of the created ContentItem MUST start with the parsed prefix"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|PREFIX
argument_list|,
name|TEST_CS
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The ID of the created ContentItem MUST start with the parsed prefix"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the parsed URI is used as ID of the ContentItem      */
annotation|@
name|Test
specifier|public
name|void
name|testURI
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|ID
argument_list|,
name|TEST_CS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The ID of the created ContentItem MUST be equals to the parsed ID"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|ID
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|ID
argument_list|,
name|TEST_CS
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The ID of the created ContentItem MUST be equals to the parsed ID"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the generation of valid IDs if no or<code>null</code> is parsed      * as id      */
annotation|@
name|Test
specifier|public
name|void
name|testDefaultId
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|TEST_CS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
operator|(
name|IRI
operator|)
literal|null
argument_list|,
name|TEST_CS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
operator|(
name|IRI
operator|)
literal|null
argument_list|,
name|TEST_CS
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if the {@link ContentReference#getReference()} is used as ID for      * the contentItem      */
annotation|@
name|Test
specifier|public
name|void
name|testContentReferenceId
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|TEST_CR
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_CR
operator|.
name|getReference
argument_list|()
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|TEST_CR
argument_list|,
operator|new
name|SimpleGraph
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_CR
operator|.
name|getReference
argument_list|()
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if triples contained in parsed Metadata are also present within       * the {@link ContentItem#getMetadata()} graph      */
annotation|@
name|Test
specifier|public
name|void
name|testParsedMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|TEST_CR
argument_list|,
name|METADATA
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The created ContentItem MUST contain parsed metadata"
argument_list|,
name|METADATA
operator|.
name|size
argument_list|()
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|ID
argument_list|,
name|TEST_CS
argument_list|,
name|METADATA
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The created ContentItem MUST contain parsed metadata"
argument_list|,
name|METADATA
operator|.
name|size
argument_list|()
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|PREFIX
argument_list|,
name|TEST_CS
argument_list|,
name|METADATA
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The created ContentItem MUST contain parsed metadata"
argument_list|,
name|METADATA
operator|.
name|size
argument_list|()
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentSink
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mt
init|=
literal|"text/plain"
decl_stmt|;
name|Charset
name|ISO8859_4
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"ISO-8859-4"
argument_list|)
decl_stmt|;
name|ContentSink
name|cs
init|=
name|contentItemFactory
operator|.
name|createContentSink
argument_list|(
name|mt
operator|+
literal|"; charset="
operator|+
name|ISO8859_4
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getBlob
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|cs
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cs
argument_list|)
expr_stmt|;
comment|// multiple calls MUST return the same OutputStream!
name|assertSame
argument_list|(
name|out
argument_list|,
name|cs
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
comment|//test mime type
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getBlob
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
comment|//get MimeType MUST return the simple mime type
name|assertEquals
argument_list|(
name|mt
argument_list|,
name|cs
operator|.
name|getBlob
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|charsetParam
init|=
name|cs
operator|.
name|getBlob
argument_list|()
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected charset parameter is missing!"
argument_list|,
name|charsetParam
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ISO8859_4
operator|.
name|name
argument_list|()
argument_list|,
name|charsetParam
argument_list|)
expr_stmt|;
comment|//now write some data to the sink
name|String
name|TEST_CONTENT
init|=
literal|"Thîs tésts wrîtîng to â ConténtSînk!"
decl_stmt|;
comment|//note this uses the same charset as parsed as charset in the
comment|//constructor!
name|IOUtils
operator|.
name|write
argument_list|(
name|TEST_CONTENT
argument_list|,
name|cs
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|ISO8859_4
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|cs
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
comment|//now read the data from the blob
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|cs
operator|.
name|getBlob
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|,
name|charsetParam
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_CONTENT
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentSinkDefaultMimeType
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|DEFAULT
init|=
literal|"application/octet-stream"
decl_stmt|;
name|ContentSink
name|cs
init|=
name|contentItemFactory
operator|.
name|createContentSink
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getBlob
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getBlob
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
comment|//get MimeType MUST return the simple mime type
name|assertEquals
argument_list|(
name|DEFAULT
argument_list|,
name|cs
operator|.
name|getBlob
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getBlob
argument_list|()
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

