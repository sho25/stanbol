begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility that provides utilities for Unit Tests that need to access remote  * services  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RemoteServiceHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RemoteServiceHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RemoteServiceHelper
parameter_list|()
block|{}
comment|/**      * Catches {@link IOException}s or {@link EngineException} that are caused      * by {@link IOException}s indicating that a remote service is not available      * @param e the Exception to check      * @param containedInMessage Optionally an Err      * @throws T the parsed Exception if it was not caused by an External service      * that is not available      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Exception
parameter_list|>
name|void
name|checkServiceUnavailable
parameter_list|(
name|T
name|e
parameter_list|,
name|String
modifier|...
name|containedInMessage
parameter_list|)
throws|throws
name|T
block|{
name|Throwable
name|check
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|EngineException
condition|)
block|{
name|check
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
comment|//check the cuase
block|}
else|else
block|{
name|check
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|check
operator|instanceof
name|UnknownHostException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"deactivate Test because of "
operator|+
name|check
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|check
operator|instanceof
name|SocketTimeoutException
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"deactivate Test because of "
operator|+
name|check
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|check
operator|instanceof
name|IOException
condition|)
block|{
name|String
name|message
init|=
name|check
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|//check for typical messates
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|contains
argument_list|(
literal|"Connection refused"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"deactivate Test because connection to remote service was refused (Message: '"
operator|+
name|check
operator|.
name|getMessage
argument_list|()
operator|+
literal|"')"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"Server returned HTTP response code: 50"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"deactivate Test because Internal Error of remote serivce (Message: '"
operator|+
name|check
operator|.
name|getMessage
argument_list|()
operator|+
literal|"')"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|containedInMessage
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|contained
range|:
name|containedInMessage
control|)
block|{
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|contained
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"deactivate Test because IOException of remote Service contained '"
operator|+
name|contained
operator|+
literal|"' (Message: '"
operator|+
name|check
operator|.
name|getMessage
argument_list|()
operator|+
literal|"')"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
throw|throw
name|e
throw|;
block|}
block|}
end_class

end_unit

