begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|ByteArraySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_comment
comment|/**  * Holds the parsed data in an byte array.<p>  * In case a byte[]  is used to construct the parsed data are NOT copied. In  * case of an {@link ByteArrayOutputStream} data are retrieved from the stream  * on each call to {@link #getStream()} if new data where added to the output  * stream in the meantime.<p>  * Also NOTE that all public constructors are deprecated. Users are  * encouraged to use the {@link InMemoryContentItemFactory} with a fitting  * {@link ContentSource} or {@link ContentReference} to create {@link Blob}  * instances.<p>  * NOTES regarding the deprecated Constructors:<br>  * Strings are encoded as UTF-8 and {@link InputStream} are copied by using   * {@link IOUtils#toByteArray(InputStream)}.<p>  * The default mime-types (if<code>null</code> is parsed as mimeType) are for  * Strings "text/plain" and in all other cases "application/octet-stream".  */
end_comment

begin_class
specifier|public
class|class
name|InMemoryBlob
implements|implements
name|Blob
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TEXT_MIMETYPE
init|=
literal|"text/plain"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BINARY_MIMETYPE
init|=
literal|"application/octet-stream"
decl_stmt|;
specifier|protected
specifier|final
name|String
name|mimeType
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|bao
decl_stmt|;
specifier|private
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
comment|/** 	 * Creates an {@link InMemoryBlob} for the parsed String. If a "charset" 	 * parameter is present for the parsed mimeType it is replaced with "UTF-8" 	 * used to encode the Sting as byte[]. 	 * @param text the text 	 * @param mimeType the mimeType. If<code>null</code> "text/plain" is used 	 * as default 	 * @deprecated use {@link InMemoryContentItemFactory#createBlob(ContentSource)}  	 * with a {@link StringSource} instead 	 */
specifier|public
name|InMemoryBlob
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
name|this
argument_list|(
name|text
operator|.
name|getBytes
argument_list|(
name|UTF8
argument_list|)
argument_list|,
name|mimeType
operator|!=
literal|null
condition|?
name|mimeType
else|:
name|DEFAULT_TEXT_MIMETYPE
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"charset"
argument_list|,
name|UTF8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates an instance for the parsed {@link InputStream}. Data are copied 	 * to a byte array. The parsed stream is closed after copying the data. 	 * @param in the {@link InputStream}. MUST NOT be<code>null</code> 	 * @param mimeType the mime-type. If<code>null</code>  "application/octet-stream" 	 * is used as default. 	 * @throws IOException indicates an error while reading from the parsed stream      * @deprecated use {@link InMemoryContentItemFactory#createBlob(ContentSource)} with      * a {@link StreamSource} instead 	 */
specifier|public
name|InMemoryBlob
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates an instance for the parsed byte array. The array is NOT copied 	 * therefore changes within that array will be reflected to components 	 * reading the data from this Blob. 	 * @param data the data. MIST NOT be<code>null</code> 	 * @param mimeType the mime-type. If<code>null</code>  "application/octet-stream"      * is used as default.      * @deprecated use {@link InMemoryContentItemFactory#createBlob(ContentSource)}       * with a {@link ByteArraySource} instead 	 */
specifier|public
name|InMemoryBlob
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
name|this
argument_list|(
name|data
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor that allows to create a byte array backed Blob based on a 	 * fixed set of parsed data. 	 * @param data the data (content of the Blob) 	 * @param mimeType the mimeType (<code>null</code> if not know; supports parameters) 	 * @param parsedParameters additional parameters (will override parameters parsed 	 * with the mimeType;<code>null</code> or mepty map if none) 	 */
specifier|protected
name|InMemoryBlob
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsedParameters
parameter_list|)
block|{
name|this
argument_list|(
name|mimeType
argument_list|,
name|parsedParameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed content MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|/**      * Allows to create a in-memory {@link Blob} that represents the data as      * written to the parsed {@link ByteArrayOutputStream}. NOTE that      * {@link #getStream()} will return an {@link InputStream} over the       * {@link ByteArrayOutputStream#toByteArray() available bytes} at the      * time of the call. Therefore it will return partial contents if not yet      * all data where written to the parsed output stream!<p>      * To workaround this one would need to use a pipe with an infinite buffer      * that can be read my multiple {@link InputStream}s. However currently this      * feature is not required by the {@link ContentSink} interface.      * @param bao the {@link ByteArrayOutputStream}      * @param mimeType the mimeType (<code>null</code> if not know; supports parameters)      * @param parsedParameters additional parameters (will override parameters parsed      * with the mimeType;<code>null</code> or mepty map if none)      * @throws IllegalArgumentException if the parsed output stream is<code>null</code>      */
specifier|protected
name|InMemoryBlob
parameter_list|(
name|ByteArrayOutputStream
name|bao
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsedParameters
parameter_list|)
block|{
name|this
argument_list|(
name|mimeType
argument_list|,
name|parsedParameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|bao
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed ByteArrayOutputStream MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bao
operator|=
name|bao
expr_stmt|;
block|}
comment|/**      * Internally used to correctly init the parsed mimeType and parameter      * @param mimeType      * @param parsedParameters      */
specifier|private
name|InMemoryBlob
parameter_list|(
name|String
name|mimeType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsedParameters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mimeType
operator|=
name|DEFAULT_BINARY_MIMETYPE
expr_stmt|;
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parameters
operator|=
name|ContentItemHelper
operator|.
name|parseMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|parameters
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parsedParameters
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|putAll
argument_list|(
name|parsedParameters
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|InputStream
name|getStream
parameter_list|()
block|{
comment|//if a ByteArrayOutputStream is used to stream the data to the blob,
comment|//than check if we need to create a new array for creating the stream.
if|if
condition|(
name|bao
operator|!=
literal|null
operator|&&
name|bao
operator|.
name|size
argument_list|()
operator|!=
name|size
condition|)
block|{
name|data
operator|=
name|bao
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|size
operator|=
name|data
operator|.
name|length
expr_stmt|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|bao
operator|!=
literal|null
condition|?
name|bao
operator|.
name|size
argument_list|()
else|:
name|data
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameter
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
block|}
end_class

end_unit

