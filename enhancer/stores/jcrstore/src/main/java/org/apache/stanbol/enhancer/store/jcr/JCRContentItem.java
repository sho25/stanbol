begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|store
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|InvalidQueryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|event
operator|.
name|FilterTriple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|event
operator|.
name|GraphEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|event
operator|.
name|GraphListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|store
operator|.
name|JCRStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JCRContentItem
implements|implements
name|ContentItem
implements|,
name|GraphListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENHANCER_ID_PROP
init|=
literal|"stanbolEnhancerId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OBJECT
init|=
literal|"object"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PREDICATE
init|=
literal|"predicate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
literal|"subject"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JCR_DATA
init|=
literal|"jcr:data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JCR_MIME_TYPE
init|=
literal|"jcr:mimeType"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Node
name|jcrNode
decl_stmt|;
comment|// private static byte[] data;
specifier|public
name|JCRContentItem
parameter_list|(
name|String
name|id
parameter_list|,
name|Node
name|parent
parameter_list|)
throws|throws
name|InvalidQueryException
throws|,
name|RepositoryException
block|{
name|jcrNode
operator|=
name|JCRStore
operator|.
name|findNodeById
argument_list|(
name|id
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"constructor with id: "
operator|+
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|jcrNode
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"found no node for id "
operator|+
name|id
operator|+
literal|" creating new one"
argument_list|)
expr_stmt|;
name|createNode
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|JCRContentItem
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|MGraph
name|metadata
parameter_list|,
name|Node
name|parent
parameter_list|)
throws|throws
name|ItemExistsException
throws|,
name|PathNotFoundException
throws|,
name|VersionException
throws|,
name|ConstraintViolationException
throws|,
name|LockException
throws|,
name|RepositoryException
block|{
comment|// first check if the id already exists
name|jcrNode
operator|=
name|JCRStore
operator|.
name|findNodeById
argument_list|(
name|id
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"full constructor with id: "
operator|+
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|jcrNode
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"found no node for id "
operator|+
name|id
operator|+
literal|" creating new one"
argument_list|)
expr_stmt|;
name|createNode
argument_list|(
name|id
argument_list|,
name|content
argument_list|,
name|mimeType
argument_list|,
name|metadata
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createNode
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|MGraph
name|metadata
parameter_list|,
name|Node
name|parent
parameter_list|)
throws|throws
name|ItemExistsException
throws|,
name|PathNotFoundException
throws|,
name|VersionException
throws|,
name|ConstraintViolationException
throws|,
name|LockException
throws|,
name|RepositoryException
throws|,
name|ValueFormatException
throws|,
name|AccessDeniedException
throws|,
name|InvalidItemStateException
throws|,
name|NoSuchNodeTypeException
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|SimpleMGraph
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
literal|"application/octet-stream"
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
name|content
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
name|jcrNode
operator|=
name|parent
operator|.
name|addNode
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|jcrNode
operator|.
name|setProperty
argument_list|(
name|ENHANCER_ID_PROP
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|jcrNode
operator|.
name|setProperty
argument_list|(
name|JCR_DATA
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|jcrNode
operator|.
name|setProperty
argument_list|(
name|JCR_MIME_TYPE
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
comment|// graph nodes
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iterator
init|=
name|metadata
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"triple "
operator|+
name|triple
operator|.
name|getSubject
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|triple
operator|.
name|getPredicate
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|triple
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|persistTriple
argument_list|(
name|counter
operator|+
literal|""
argument_list|,
name|triple
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"creating node at path: "
operator|+
name|jcrNode
operator|.
name|getPath
argument_list|()
operator|+
literal|" with num of triples "
operator|+
name|counter
argument_list|)
expr_stmt|;
name|jcrNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|persistTriple
parameter_list|(
name|String
name|nameHint
parameter_list|,
name|Triple
name|triple
parameter_list|)
throws|throws
name|ItemExistsException
throws|,
name|PathNotFoundException
throws|,
name|VersionException
throws|,
name|ConstraintViolationException
throws|,
name|LockException
throws|,
name|RepositoryException
throws|,
name|ValueFormatException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|Long
operator|.
name|toString
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|36
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameHint
operator|!=
literal|null
operator|&&
operator|!
name|nameHint
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|jcrNode
operator|.
name|hasNode
argument_list|(
name|nameHint
argument_list|)
condition|)
block|{
name|name
operator|=
name|nameHint
expr_stmt|;
block|}
block|}
name|Node
name|tripleNode
init|=
name|jcrNode
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|/*          * TODO: Rupert Westenthaler 25.01.2011          * Using the toString method of the subject, predicate and object is          * not sufficient here. One needs to treat UriRefs, PlainLiterals,          * TypedLiterals and especially BNodes (blank nodes) differently.          * For Plain literals it is important to also store the language. For          * Typed Literals it is important to store the xsd:dataType (or even          * map the xsd:dataType to the according jcr:type.          * For BNodes one needs to keep a bidirectional mapping between the          * BNode instance and the JCR:Property (e.g. by using an random ID as          * value and map this value to an BNode instance.          */
name|tripleNode
operator|.
name|setProperty
argument_list|(
name|SUBJECT
argument_list|,
name|triple
operator|.
name|getSubject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tripleNode
operator|.
name|setProperty
argument_list|(
name|PREDICATE
argument_list|,
name|triple
operator|.
name|getPredicate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tripleNode
operator|.
name|setProperty
argument_list|(
name|OBJECT
argument_list|,
name|triple
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"persisted triple "
operator|+
name|triple
operator|.
name|getSubject
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|triple
operator|.
name|getPredicate
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|triple
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jcrNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|jcrNode
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"entering getId, but no node initialized"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jcrNode
operator|.
name|hasProperty
argument_list|(
name|ENHANCER_ID_PROP
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"found id: "
operator|+
name|jcrNode
operator|.
name|getProperty
argument_list|(
name|ENHANCER_ID_PROP
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jcrNode
operator|.
name|getProperty
argument_list|(
name|ENHANCER_ID_PROP
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"entering getId, but node has no ID value"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|MGraph
name|getMetadata
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|jcrNode
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"entering getMetadata, but no node initialized"
argument_list|)
expr_stmt|;
block|}
name|MGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
comment|// loop over children
name|NodeIterator
name|children
init|=
name|jcrNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|childNode
init|=
name|children
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|childNode
operator|.
name|hasProperty
argument_list|(
name|SUBJECT
argument_list|)
operator|&&
name|childNode
operator|.
name|hasProperty
argument_list|(
name|PREDICATE
argument_list|)
operator|&&
name|childNode
operator|.
name|hasProperty
argument_list|(
name|OBJECT
argument_list|)
condition|)
block|{
comment|/*                      * TODO: Rupert Westenthaler 25.01.2011                      * Triples may use                      *  - any kind of NonLiteral as Subject (BNode or UriRef)                      *  - only an UriRef as property (Predicate)                      *  - any Resource (PlainLiteral, TypedLiteral, NBode or UriRef)                      *    as Object.                      *  The Node representing the triple need to store the required                       *  information and this mapping implementation need to be                      *  adapted accordingly.                      *  See also TODO for createNode(..)                      */
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|new
name|UriRef
argument_list|(
name|childNode
operator|.
name|getProperty
argument_list|(
name|SUBJECT
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|childNode
operator|.
name|getProperty
argument_list|(
name|PREDICATE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|childNode
operator|.
name|getProperty
argument_list|(
name|OBJECT
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|graph
operator|.
name|addGraphListener
argument_list|(
name|this
argument_list|,
operator|new
name|FilterTriple
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|jcrNode
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"entering getMimeType, but no node initialized"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jcrNode
operator|.
name|hasProperty
argument_list|(
name|JCR_MIME_TYPE
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"found mimetype: "
operator|+
name|jcrNode
operator|.
name|getProperty
argument_list|(
name|JCR_MIME_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jcrNode
operator|.
name|getProperty
argument_list|(
name|JCR_MIME_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"entering getId, but node has no ID value"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|jcrNode
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"entering getStream, but no node initialized"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jcrNode
operator|.
name|hasProperty
argument_list|(
name|JCR_DATA
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"found content"
argument_list|)
expr_stmt|;
return|return
name|jcrNode
operator|.
name|getProperty
argument_list|(
name|JCR_DATA
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getStream
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"entering getStream, but node has no ID value"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * For now this handles only cases when triples are added, but not removed      */
specifier|public
name|void
name|graphChanged
parameter_list|(
name|List
argument_list|<
name|GraphEvent
argument_list|>
name|events
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|GraphEvent
argument_list|>
name|i
init|=
name|events
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GraphEvent
name|ge
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"event: "
operator|+
name|ge
operator|.
name|getTriple
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|persistTriple
argument_list|(
literal|null
argument_list|,
name|ge
operator|.
name|getTriple
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemExistsException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

