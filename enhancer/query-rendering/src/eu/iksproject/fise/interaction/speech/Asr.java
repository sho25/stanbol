begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|speech
package|;
end_package

begin_comment
comment|/*  * Copyright 2010  * German Research Center for Artificial Intelligence (DFKI)  * Department of Intelligent User Interfaces  * Germany  *  *     http://www.dfki.de/web/forschung/iui  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  * Authors:  *     Sebastian Germesin  *     Massimo Romanelli  *     Tilman Becker  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|cmu
operator|.
name|sphinx
operator|.
name|frontend
operator|.
name|util
operator|.
name|StreamDataSource
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|cmu
operator|.
name|sphinx
operator|.
name|jsgf
operator|.
name|JSGFGrammar
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|cmu
operator|.
name|sphinx
operator|.
name|recognizer
operator|.
name|Recognizer
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|cmu
operator|.
name|sphinx
operator|.
name|result
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|cmu
operator|.
name|sphinx
operator|.
name|util
operator|.
name|props
operator|.
name|ConfigurationManager
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|cmu
operator|.
name|sphinx
operator|.
name|util
operator|.
name|props
operator|.
name|PropertyException
import|;
end_import

begin_class
specifier|public
class|class
name|Asr
block|{
specifier|private
name|Recognizer
name|recognizer
decl_stmt|;
specifier|private
name|JSGFGrammar
name|jsgfGrammarManager
decl_stmt|;
specifier|private
name|StreamDataSource
name|inputStreamDataSource
decl_stmt|;
specifier|public
name|Asr
parameter_list|(
name|String
name|configFilename
parameter_list|)
throws|throws
name|IOException
throws|,
name|PropertyException
throws|,
name|InstantiationException
block|{
name|URL
name|url
init|=
operator|new
name|File
argument_list|(
name|configFilename
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|ConfigurationManager
name|cm
init|=
operator|new
name|ConfigurationManager
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// retrive the recognizer, jsgfGrammar and the microphone from
comment|// the configuration file.
name|recognizer
operator|=
operator|(
name|Recognizer
operator|)
name|cm
operator|.
name|lookup
argument_list|(
literal|"recognizer"
argument_list|)
expr_stmt|;
name|jsgfGrammarManager
operator|=
operator|(
name|JSGFGrammar
operator|)
name|cm
operator|.
name|lookup
argument_list|(
literal|"jsgfGrammar"
argument_list|)
expr_stmt|;
name|inputStreamDataSource
operator|=
operator|(
name|StreamDataSource
operator|)
name|cm
operator|.
name|lookup
argument_list|(
literal|"inputStreamDataSource"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" Loading recognizer ..."
argument_list|)
expr_stmt|;
name|recognizer
operator|.
name|allocate
argument_list|()
expr_stmt|;
name|dumpSampleSentences
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|recognizeSpeech
parameter_list|(
name|byte
index|[]
name|audioData
parameter_list|)
block|{
name|InputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|audioData
argument_list|)
decl_stmt|;
name|inputStreamDataSource
operator|.
name|setInputStream
argument_list|(
name|input
argument_list|,
name|ByteArrayInputStream
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|recognizer
operator|.
name|recognize
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|result
operator|.
name|getBestFinalResultNoFiller
argument_list|()
return|;
block|}
block|}
specifier|protected
name|void
name|dumpSampleSentences
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Speak one of: \n"
argument_list|)
expr_stmt|;
name|jsgfGrammarManager
operator|.
name|dumpRandomSentences
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deallocate
parameter_list|()
block|{
name|recognizer
operator|.
name|deallocate
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

