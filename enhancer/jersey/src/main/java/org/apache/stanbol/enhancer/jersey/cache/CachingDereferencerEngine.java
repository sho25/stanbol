begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_comment
comment|/**  * Simple engine that does not enhance content items but fetches resources  * metadata from remote sites to cache them locally for the sole purpose of  * displaying up to date data in the user interface.  *<p>  * This engine might be replaced by a proper dereferencer engine in a future  * version of enhancer.  *  * @author Olivier Grisel  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|CachingDereferencerEngine
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
implements|,
name|EntityCacheProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENTITY_CACHE_GRAPH_NAME
init|=
literal|"enhancerEntityCache"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine. Currently set to      * {@link EnhancementJobManager#DEFAULT_ORDER}      */
specifier|public
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ORDERING_POST_PROCESSING
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|Parser
name|parser
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|Store
name|store
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|WeightedTcProvider
name|tcProvider
decl_stmt|;
specifier|protected
name|ThreadPoolExecutor
name|executor
decl_stmt|;
specifier|protected
name|BlockingQueue
argument_list|<
name|TripleCollection
argument_list|>
name|serializationQueue
decl_stmt|;
specifier|protected
name|Thread
name|serializer
decl_stmt|;
specifier|protected
name|boolean
name|serializerActive
init|=
literal|false
decl_stmt|;
specifier|protected
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|fetchTaskQueue
decl_stmt|;
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|IOException
block|{
name|fetchTaskQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
expr_stmt|;
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|fetchTaskQueue
argument_list|)
expr_stmt|;
name|serializationQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|TripleCollection
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|MGraph
name|entityCache
init|=
name|getEntityCache
argument_list|()
decl_stmt|;
name|serializerActive
operator|=
literal|true
expr_stmt|;
name|serializer
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|serializerActive
condition|)
block|{
try|try
block|{
name|entityCache
operator|.
name|addAll
argument_list|(
name|serializationQueue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|serializer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|IOException
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
name|fetchTaskQueue
operator|=
literal|null
expr_stmt|;
comment|// stop the serialization queue by sending it a last job
name|serializerActive
operator|=
literal|false
expr_stmt|;
name|serializationQueue
operator|.
name|add
argument_list|(
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|references
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entities
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|entities
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
operator|(
name|UriRef
operator|)
name|entities
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MGraph
name|entityCache
init|=
name|getEntityCache
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|UriRef
name|reference
range|:
name|references
control|)
block|{
if|if
condition|(
name|entityCache
operator|.
name|filter
argument_list|(
name|reference
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// already in cache
continue|continue;
block|}
if|if
condition|(
name|fetchTaskQueue
operator|.
name|contains
argument_list|(
name|reference
argument_list|)
condition|)
block|{
comment|// optim: do not try to submit twice the same job
continue|continue;
block|}
comment|// asynchronously dereference (fire and forget)
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
comment|// overridden to implement queue membership to avoid
comment|// duplicate submissions for dereferencing of the same URI
if|if
condition|(
name|other
operator|instanceof
name|UriRef
condition|)
block|{
return|return
name|reference
operator|.
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
return|return
name|this
operator|==
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|serializationQueue
operator|.
name|add
argument_list|(
name|dereference
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unable to dereference "
operator|+
name|reference
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Graph
name|dereferenceHTTP
parameter_list|(
name|UriRef
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|reference
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|URLConnection
name|con
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|addRequestProperty
argument_list|(
literal|"Accept"
argument_list|,
name|RDF_XML
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|con
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|RDF_XML
argument_list|)
return|;
block|}
specifier|public
name|Graph
name|dereferenceSPARQL
parameter_list|(
name|String
name|endpointURL
parameter_list|,
name|UriRef
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"CONSTRUCT { "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" ?p ?o } WHERE { "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" ?p ?o }"
argument_list|)
expr_stmt|;
name|String
name|format
init|=
name|RDF_XML
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|endpointURL
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"query"
argument_list|,
literal|"{query}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"format"
argument_list|,
literal|"{format}"
argument_list|)
operator|.
name|build
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|format
argument_list|)
decl_stmt|;
specifier|final
name|URLConnection
name|con
init|=
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|addRequestProperty
argument_list|(
literal|"Accept"
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|con
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|format
argument_list|)
return|;
block|}
specifier|public
name|Graph
name|dereference
parameter_list|(
name|UriRef
name|reference
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"dereferencing: "
operator|+
name|reference
argument_list|)
expr_stmt|;
comment|// TODO: make the switch between SPARQL and HTTP configurable
if|if
condition|(
name|reference
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http://dbpedia.org/resource/"
argument_list|)
condition|)
block|{
comment|// special handling of dbpedia references using SPARQL since the
comment|// basic HTTP dereference run the risk of a truncated output
return|return
name|dereferenceSPARQL
argument_list|(
literal|"http://dbpedia.org/sparql"
argument_list|,
name|reference
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|dereferenceHTTP
argument_list|(
name|reference
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|ENHANCE_SYNCHRONOUS
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|defaultOrder
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|MGraph
name|getEntityCache
parameter_list|()
block|{
specifier|final
name|UriRef
name|graphUri
init|=
operator|new
name|UriRef
argument_list|(
name|ENTITY_CACHE_GRAPH_NAME
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|tcProvider
operator|.
name|getMGraph
argument_list|(
name|graphUri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|e
parameter_list|)
block|{
return|return
name|tcProvider
operator|.
name|createMGraph
argument_list|(
name|graphUri
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

