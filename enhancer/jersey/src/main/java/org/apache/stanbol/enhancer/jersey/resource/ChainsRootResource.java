begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|utils
operator|.
name|MediaTypeUtil
operator|.
name|JSON_LD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancerUtils
operator|.
name|addActiveChains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancerUtils
operator|.
name|buildChainsMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|ChainsTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Object
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/enhancer/chain"
argument_list|)
specifier|public
class|class
name|ChainsRootResource
extends|extends
name|BaseStanbolResource
block|{
annotation|@
name|Reference
specifier|private
name|EnhancementJobManager
name|jobManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|EnhancementEngineManager
name|engineManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ContentItemFactory
name|ciFactory
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Serializer
name|serializer
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
name|_chainCache
decl_stmt|;
specifier|protected
name|ChainsTracker
name|chainTracker
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
specifier|final
name|BundleContext
name|bc
init|=
name|ctx
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|chainTracker
operator|=
operator|new
name|ChainsTracker
argument_list|(
name|ctx
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
operator|new
name|ServiceTrackerCustomizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|service
init|=
name|bc
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|_chainCache
operator|=
literal|null
expr_stmt|;
comment|//rebuild the cache on the next call
block|}
return|return
name|service
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|_chainCache
operator|=
literal|null
expr_stmt|;
comment|//rebuild the cache on the next call
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bc
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|_chainCache
operator|=
literal|null
expr_stmt|;
comment|//rebuild the cache on the next call
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|chainTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|chainTracker
operator|!=
literal|null
condition|)
block|{
name|chainTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|chainTracker
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the list of active chain      * @return the list of active chain (both {@link ServiceReference}      * and service).      */
specifier|protected
name|Collection
argument_list|<
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
name|getActiveChains
parameter_list|()
block|{
return|return
name|getChainsMap
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * Getter for an active chain by name      * @param name the name of the chain      * @return the active {@link Chain} (both {@link ServiceReference}      * and service) or<code>null<code> if none is active with this name      */
specifier|protected
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
name|getActiveChains
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getChainsMap
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * @return      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
name|getChainsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
name|chains
init|=
name|_chainCache
decl_stmt|;
if|if
condition|(
name|chains
operator|==
literal|null
condition|)
block|{
name|chains
operator|=
name|buildChainsMap
argument_list|(
name|chainTracker
argument_list|)
expr_stmt|;
name|this
operator|.
name|_chainCache
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|chains
argument_list|)
expr_stmt|;
block|}
return|return
name|chains
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"{chain}"
argument_list|)
specifier|public
name|GenericEnhancerUiResource
name|get
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"chain"
argument_list|)
name|String
name|chain
parameter_list|)
block|{
return|return
operator|new
name|GenericEnhancerUiResource
argument_list|(
name|chain
argument_list|,
name|jobManager
argument_list|,
name|engineManager
argument_list|,
name|chainTracker
argument_list|,
name|ciFactory
argument_list|,
name|serializer
argument_list|,
name|getLayoutConfiguration
argument_list|()
argument_list|,
name|getUriInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/*@OPTIONS     public Response handleCorsPreflight(@Context HttpHeaders headers){         ResponseBuilder res = Response.ok();         enableCORS(servletContext,res, headers);         return res.build();     }*/
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|,
name|TEXT_HTML
argument_list|)
decl_stmt|;
comment|//addCORSOrigin(servletContext,res, headers);
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|JSON_LD
block|,
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|,
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|}
argument_list|)
specifier|public
name|Response
name|getEngines
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|String
name|rootUrl
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
name|getRootUrl
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|MGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|addActiveChains
argument_list|(
name|getActiveChains
argument_list|()
argument_list|,
name|chainTracker
operator|.
name|getDefault
argument_list|()
argument_list|,
name|graph
argument_list|,
name|rootUrl
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|(
name|graph
argument_list|)
decl_stmt|;
comment|//addCORSOrigin(servletContext,res, headers);
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Chain
argument_list|>
name|getChains
parameter_list|()
block|{
name|List
argument_list|<
name|Chain
argument_list|>
name|chains
init|=
operator|new
name|ArrayList
argument_list|<
name|Chain
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
name|entry
range|:
name|getActiveChains
argument_list|()
control|)
block|{
name|chains
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|chains
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Chain
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Chain
name|o1
parameter_list|,
name|Chain
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|chains
return|;
block|}
specifier|public
name|String
name|getServicePid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
name|entry
init|=
name|getActiveChains
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Integer
name|getServiceRanking
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
name|entry
init|=
name|getActiveChains
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Integer
name|ranking
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|ranking
operator|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ranking
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ranking
return|;
block|}
block|}
specifier|public
name|Long
name|getServiceId
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
name|entry
init|=
name|getActiveChains
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Chain
name|getDefaultChain
parameter_list|()
block|{
return|return
name|chainTracker
operator|.
name|getDefault
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDefault
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|chainTracker
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

