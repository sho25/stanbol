begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|ExecutionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|ExecutionPlan
import|;
end_import

begin_comment
comment|/**  * Defines Constants and utilities for using EnhancementProperties  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EnhancementPropertiesHelper
block|{
specifier|private
name|EnhancementPropertiesHelper
parameter_list|()
block|{
comment|/* no instances allowed*/
block|}
comment|/**      * URI used to register an {@link ContentItem#getPart(int, Class) contentPart}      * of the type {@link Map Map&lt;String,Objext&gt;} that contains properties      * for the enhancement process.<p>      * TODO: This might move to servicesapi and also accessible to enhancement      * engines      */
specifier|public
specifier|static
specifier|final
name|UriRef
name|ENHANCEMENT_PROPERTIES_URI
init|=
operator|new
name|UriRef
argument_list|(
literal|"urn:apache.org:stanbol.web:enhancement.properties"
argument_list|)
decl_stmt|;
comment|/**      * Boolean switch parsed as {@link QueryParam} tha allows to deactivate the      * inclusion of the {@link ContentItem#getMetadata()} in the Response      */
specifier|public
specifier|static
specifier|final
name|String
name|OMIT_METADATA
init|=
literal|"stanbol.enhancer.web.omitMetadata"
decl_stmt|;
comment|/**      * {@link Set Set&lt;String&gt;} containing all the URIs of the      * {@link ContentItem#getPart(UriRef, Class) ContentParts} representing       * RDF data (compatible to Clerezza {@link TripleCollection}). If the       * returned set contains '*' than all such content parts need to be returned.<p>      * NOTE: This can also be used to include the EnhancementProperties      * as "applciation/json" in the Response by adding this      * {@link EnhancementPropertiesHelper#ENHANCEMENT_PROPERTIES_URI uri}.      */
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_CONTENT_PART
init|=
literal|"stanbol.enhancer.web.outputContentPart"
decl_stmt|;
comment|/**      * Allows to omit all parsed content parts regardless of the {@link #OUTPUT_CONTENT_PART}      * configuration      */
specifier|public
specifier|static
specifier|final
name|String
name|OMIT_PARSED_CONTENT
init|=
literal|"stanbol.enhancer.web.omitParsed"
decl_stmt|;
comment|/**      * {@link Collection Collection&lt;String&gt;} containing mime types. This      * allows to specify what versions of the parsed content to be included in      * the response. e.g. ["text/*","application/pdf"] would include all text      * formats and PDF.      */
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_CONTENT
init|=
literal|"stanbol.enhancer.web.outputContent"
decl_stmt|;
comment|/**      * This allows to copy the {@link ExecutionMetadata} and {@link ExecutionPlan}      * data stored in a {@link ContentItem#getPart(UriRef, Class) contentPart} with      * the URI {@link ExecutionMetadata#CHAIN_EXECUTION} over to the      * {@link ContentItem#getMetadata() metadata} of the content item.<p>      * This feature is intended to allow users to retrieve such meta information      * without the need to use parse Multipart MIME responses.      */
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_EXECUTION_METADATA
init|=
literal|"stanbol.enhancer.web.executionmetadata"
decl_stmt|;
comment|/**      * The used format to encode RDF graphs for "multipart/*" responses. This      * needs to be parsed separately, because the Accept header needs to be      * set to "multipart/from-data" in such cases      */
specifier|public
specifier|static
specifier|final
name|String
name|RDF_FORMAT
init|=
literal|"stanbol.enhancer.web.rdfFormat"
decl_stmt|;
comment|/**      * {@link Set Set&lt;String&gt;} containing all the {@link UriRef}s of       * {@link ContentItem#getPart(int, Class) ContentItem.getPart}(uri,{@link Blob})      * that where parsed with the request.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARSED_CONTENT_URIS
init|=
literal|"stanbol.enhancer.web.parsedContentURIs"
decl_stmt|;
comment|/**      * Getter for the EnhancementProperties for an {@link ContentItem}. If they      * do not already exist they are created and added to the ContentItem as      * contentPart with the URI {@link #ENHANCEMENT_PROPERTIES_URI}      * @param ci the contentItem MUST NOT be NULL      * @return the enhancement properties      * @throws IllegalArgumentException if<code>null</code> is parsed as {@link ContentItem}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getEnhancementProperties
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed ContentItem MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
decl_stmt|;
try|try
block|{
name|enhancementProperties
operator|=
name|ci
operator|.
name|getPart
argument_list|(
name|ENHANCEMENT_PROPERTIES_URI
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|enhancementProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|ci
operator|.
name|addPart
argument_list|(
name|ENHANCEMENT_PROPERTIES_URI
argument_list|,
name|enhancementProperties
argument_list|)
expr_stmt|;
block|}
return|return
name|enhancementProperties
return|;
block|}
specifier|private
specifier|static
name|Object
name|get
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|enhancementProperties
operator|==
literal|null
condition|?
literal|null
else|:
name|enhancementProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Getter for the value of the parsed type for a given key.      * @param enhancementProperties the enhancement properties      * @param key the key      * @param type the type MUST NOT be<code>null</code>      * @return the values      * @throws ClassCastException if the value is not compatible to the      * parsed type      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|,
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed type MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|get
argument_list|(
name|enhancementProperties
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|value
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"EnhancementProperties value for key '"
operator|+
name|key
operator|+
literal|"' is not of the expected type "
operator|+
name|type
operator|+
literal|" but was"
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Getter for the boolean state based on the value of the parsed key.      * If the value is not of type {@link Boolean} the       * {@link Boolean#parseBoolean(String)} is used on the {@link Object#toString()}      * method of the value.      * @param enhancementProperties the enhancementProperties      * @param key the key      * @return the state      */
specifier|public
specifier|static
name|boolean
name|getState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|state
init|=
name|get
argument_list|(
name|enhancementProperties
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|state
operator|==
literal|null
condition|?
literal|false
else|:
name|state
operator|instanceof
name|Boolean
condition|?
operator|(
operator|(
name|Boolean
operator|)
name|state
operator|)
operator|.
name|booleanValue
argument_list|()
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isOmitParsedContent
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|)
block|{
return|return
name|getState
argument_list|(
name|enhancementProperties
argument_list|,
name|OMIT_PARSED_CONTENT
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isIncludeExecutionMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|)
block|{
return|return
name|getState
argument_list|(
name|enhancementProperties
argument_list|,
name|INCLUDE_EXECUTION_METADATA
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isOmitMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|)
block|{
return|return
name|getState
argument_list|(
name|enhancementProperties
argument_list|,
name|OMIT_METADATA
argument_list|)
return|;
block|}
comment|/**      *       * @param enhancementProperties      * @return      * @throws ClassCastException if the value is not an Set      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getParsedContentURIs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|)
block|{
return|return
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|enhancementProperties
argument_list|,
name|PARSED_CONTENT_URIS
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      *       * @param enhancementProperties      * @return      * @throws ClassCastException if the value is not an {@link Set}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getOutputContentParts
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|)
block|{
return|return
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|enhancementProperties
argument_list|,
name|OUTPUT_CONTENT_PART
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      *       * @param enhancementProperties      * @return      * @throws ClassCastException if the value is not an {@link Collections}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getOutputContent
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|)
block|{
return|return
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|get
argument_list|(
name|enhancementProperties
argument_list|,
name|OUTPUT_CONTENT
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      *       * @param enhancementProperties      * @return      * @throws ClassCastException if the value is not an {@link Collections}      */
specifier|public
specifier|static
name|String
name|getRdfFormat
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|get
argument_list|(
name|enhancementProperties
argument_list|,
name|RDF_FORMAT
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

