begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Enhancer
operator|.
name|ENHANCEMENT_ENGINE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ChainManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Enhancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|EnhancerUtils
block|{
specifier|private
name|EnhancerUtils
parameter_list|()
block|{}
empty_stmt|;
comment|/**      * Uses the parsed {@link EnhancementEngineManager} to build a Map      * representing the current snapshot of the active enhancement engines.      *       * @param engineManager The engine manager used to build the snapshot      * @return the map with the names as key and an Entry with the {@link ServiceReference}      * and the {@link EnhancementEngine} instance as value.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|EnhancementEngine
argument_list|>
argument_list|>
name|buildEnginesMap
parameter_list|(
name|EnhancementEngineManager
name|engineManager
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|EnhancementEngine
argument_list|>
argument_list|>
name|engines
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|EnhancementEngine
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|engineName
range|:
name|engineManager
operator|.
name|getActiveEngineNames
argument_list|()
control|)
block|{
name|ServiceReference
name|engineRef
init|=
name|engineManager
operator|.
name|getReference
argument_list|(
name|engineName
argument_list|)
decl_stmt|;
if|if
condition|(
name|engineRef
operator|!=
literal|null
condition|)
block|{
name|EnhancementEngine
name|engine
init|=
name|engineManager
operator|.
name|getEngine
argument_list|(
name|engineRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|EnhancementEngine
argument_list|>
name|m
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|engineRef
argument_list|,
name|engine
argument_list|)
decl_stmt|;
name|engines
operator|.
name|put
argument_list|(
name|engineName
argument_list|,
name|m
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|engines
return|;
block|}
comment|/**      * Uses the parsed {@link ChainManager} to build a Map      * representing the current snapshot of the active enhancement chains.      *       * @param chainManager The chain manager used to build the snapshot      * @return the map with the names as key and an Entry with the {@link ServiceReference}      * and the {@link Chain} instance as value.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
name|buildChainsMap
parameter_list|(
name|ChainManager
name|chainManager
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
name|chains
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|chainName
range|:
name|chainManager
operator|.
name|getActiveChainNames
argument_list|()
control|)
block|{
name|ServiceReference
name|chainRef
init|=
name|chainManager
operator|.
name|getReference
argument_list|(
name|chainName
argument_list|)
decl_stmt|;
if|if
condition|(
name|chainRef
operator|!=
literal|null
condition|)
block|{
name|Chain
name|chain
init|=
name|chainManager
operator|.
name|getChain
argument_list|(
name|chainRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|chain
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
name|m
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|chainRef
argument_list|,
name|chain
argument_list|)
decl_stmt|;
name|chains
operator|.
name|put
argument_list|(
name|chainName
argument_list|,
name|m
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|chains
return|;
block|}
comment|/**      * Create the RDF data for the currently active EnhancementEngines.<p>      * Note the the parsed rootUrl MUST already consider offsets configured      * for the Stanbol RESTful service. When called from within a      * {@link BaseStanbolResource} the following code segment should be used:<p>      *<code><pre>      *     String rootUrl = uriInfo.getBaseUriBuilder().path(getRootUrl()).build().toString();      *</pre></code>      * @param engineManager the enhancement engine manager      * @param graph the RDF graph to add the triples      * @param rootUrl the root URL used by the current request      */
specifier|public
specifier|static
name|void
name|addActiveEngines
parameter_list|(
name|EnhancementEngineManager
name|engineManager
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|String
name|rootUrl
parameter_list|)
block|{
name|addActiveEngines
argument_list|(
name|buildEnginesMap
argument_list|(
name|engineManager
argument_list|)
operator|.
name|values
argument_list|()
argument_list|,
name|graph
argument_list|,
name|rootUrl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the RDF data for the currently active EnhancementEngines.<p>      * Note the the parsed rootUrl MUST already consider offsets configured      * for the Stanbol RESTful service. When called from within a      * {@link BaseStanbolResource} the following code segment should be used:<p>      *<code><pre>      *     String rootUrl = uriInfo.getBaseUriBuilder().path(getRootUrl()).build().toString();      *</pre></code>      * @param activeEngines the active enhancement engines as {@link Entry entries}.      * @param graph the RDF graph to add the triples      * @param rootUrl the root URL used by the current request      * @see EnhancerUtils#buildEnginesMap(EnhancementEngineManager)      */
specifier|public
specifier|static
name|void
name|addActiveEngines
parameter_list|(
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|EnhancementEngine
argument_list|>
argument_list|>
name|activeEngines
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|String
name|rootUrl
parameter_list|)
block|{
name|UriRef
name|enhancerResource
init|=
operator|new
name|UriRef
argument_list|(
name|rootUrl
operator|+
literal|"enhancer"
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancerResource
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|Enhancer
operator|.
name|ENHANCER
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|EnhancementEngine
argument_list|>
name|entry
range|:
name|activeEngines
control|)
block|{
name|UriRef
name|engineResource
init|=
operator|new
name|UriRef
argument_list|(
name|rootUrl
operator|+
literal|"enhancer/engine/"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancerResource
argument_list|,
name|Enhancer
operator|.
name|HAS_ENGINE
argument_list|,
name|engineResource
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|engineResource
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|ENHANCEMENT_ENGINE
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|engineResource
argument_list|,
name|RDFS
operator|.
name|label
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Create the RDF data for the currently active Enhancement {@link Chain}s.<p>      * Note the the parsed rootUrl MUST already consider offsets configured      * for the Stanbol RESTful service. When called from within a      * {@link BaseStanbolResource} the following code segment should be used:<p>      *<code><pre>      *     String rootUrl = uriInfo.getBaseUriBuilder().path(getRootUrl()).build().toString();      *</pre></code>      * @param chainManager the enhancement chain manager.      * @param graph the RDF graph to add the triples      * @param rootUrl the root URL used by the current request      */
specifier|public
specifier|static
name|void
name|addActiveChains
parameter_list|(
name|ChainManager
name|chainManager
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|String
name|rootUrl
parameter_list|)
block|{
name|addActiveChains
argument_list|(
name|buildChainsMap
argument_list|(
name|chainManager
argument_list|)
operator|.
name|values
argument_list|()
argument_list|,
name|chainManager
operator|.
name|getDefault
argument_list|()
argument_list|,
name|graph
argument_list|,
name|rootUrl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the RDF data for the currently active Enhancement {@link Chain}s.<p>      * Note the the parsed rootUrl MUST already consider offsets configured      * for the Stanbol RESTful service. When called from within a      * {@link BaseStanbolResource} the following code segment should be used:<p>      *<code><pre>      *     String rootUrl = uriInfo.getBaseUriBuilder().path(getRootUrl()).build().toString();      *</pre></code>      * @param activeChains the active enhancement chains as {@link Entry entries}.      * @param defaultChain the default chain      * @param graph the RDF graph to add the triples      * @param rootUrl the root URL used by the current request      */
specifier|public
specifier|static
name|void
name|addActiveChains
parameter_list|(
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
argument_list|>
name|activeChains
parameter_list|,
name|Chain
name|defaultChain
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|String
name|rootUrl
parameter_list|)
block|{
name|UriRef
name|enhancer
init|=
operator|new
name|UriRef
argument_list|(
name|rootUrl
operator|+
literal|"enhancer"
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancer
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|Enhancer
operator|.
name|ENHANCER
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServiceReference
argument_list|,
name|Chain
argument_list|>
name|entry
range|:
name|activeChains
control|)
block|{
name|UriRef
name|chainResource
init|=
operator|new
name|UriRef
argument_list|(
name|rootUrl
operator|+
literal|"enhancer/chain/"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancer
argument_list|,
name|Enhancer
operator|.
name|HAS_CHAIN
argument_list|,
name|chainResource
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|defaultChain
argument_list|)
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancer
argument_list|,
name|Enhancer
operator|.
name|HAS_DEFAULT_CHAIN
argument_list|,
name|chainResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|chainResource
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|Enhancer
operator|.
name|ENHANCEMENT_CHAIN
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|chainResource
argument_list|,
name|RDFS
operator|.
name|label
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

