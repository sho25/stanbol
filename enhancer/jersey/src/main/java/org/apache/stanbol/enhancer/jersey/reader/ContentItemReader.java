begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|reader
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|ENHANCEMENT_PROPERTIES_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|PARSED_CONTENT_URIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|getEnhancementProperties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
operator|.
name|randomUUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|parser
operator|.
name|JenaParserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileItemIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileItemStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileUploadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|mapped
operator|.
name|SimpleConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|ContentItemReader
implements|implements
name|MessageBodyReader
argument_list|<
name|ContentItem
argument_list|>
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContentItemReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileUpload
name|fu
init|=
operator|new
name|FileUpload
argument_list|()
decl_stmt|;
specifier|private
name|Parser
name|__parser
decl_stmt|;
specifier|private
name|ServletContext
name|context
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|MULTIPART
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
operator|.
name|getType
argument_list|()
operator|+
literal|"/*"
argument_list|)
decl_stmt|;
specifier|public
name|ContentItemReader
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Lazy initialisation for the parser.      * @return teh parser      */
specifier|protected
specifier|final
name|Parser
name|getParser
parameter_list|()
block|{
comment|/*          * Needed because Jersey tries to create an instance          * during initialisation. At that time the {@link BundleContext} required          * by {@link ContextHelper#getServiceFromContext(Class, ServletContext)}          * is not yet present resulting in an Exception.          */
if|if
condition|(
name|__parser
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|__parser
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//mainly for unit tests we want also allow initialisation without context
name|__parser
operator|=
operator|new
name|Parser
argument_list|()
expr_stmt|;
name|__parser
operator|.
name|bindParsingProvider
argument_list|(
operator|new
name|JenaParserProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|__parser
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|ContentItem
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentItem
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|ContentItem
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
name|InputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
comment|//boolean withMetadata = withMetadata(httpHeaders);
name|ContentItem
name|contentItem
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parsedContentIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|isCompatible
argument_list|(
name|MULTIPART
argument_list|)
condition|)
block|{
comment|//try to read ContentItem from "multipart/from-data"
name|MGraph
name|metadata
init|=
literal|null
decl_stmt|;
name|FileItemIterator
name|fileItemIterator
decl_stmt|;
name|String
name|contentItemId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileItemIterator
operator|=
name|fu
operator|.
name|getItemIterator
argument_list|(
operator|new
name|MessageBodyReaderContext
argument_list|(
name|entityStream
argument_list|,
name|mediaType
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|fileItemIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileItemStream
name|fis
init|=
name|fileItemIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|fis
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"metadata"
argument_list|)
condition|)
block|{
if|if
condition|(
name|contentItem
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The Multipart MIME part with the 'metadata' "
operator|+
literal|"MUST BE before the MIME part containing the "
operator|+
literal|"'content'!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
comment|//the metadata may define the ID for the contentItem
if|if
condition|(
name|fis
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fis
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contentItemId
operator|=
name|fis
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|metadata
operator|=
operator|new
name|IndexedMGraph
argument_list|()
expr_stmt|;
try|try
block|{
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|metadata
argument_list|,
name|fis
operator|.
name|openStream
argument_list|()
argument_list|,
name|fis
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse Metadata "
operator|+
literal|"from Multipart MIME part '%s' ("
operator|+
literal|"contentItem: %s| contentType: %s)"
argument_list|,
name|fis
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|fis
operator|.
name|getName
argument_list|()
argument_list|,
name|fis
operator|.
name|getContentType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|fis
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content"
argument_list|)
condition|)
block|{
name|contentItem
operator|=
name|createContentItem
argument_list|(
name|contentItemId
argument_list|,
name|metadata
argument_list|,
name|fis
argument_list|,
name|parsedContentIds
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fis
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
operator|||
name|fis
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|ENHANCEMENT_PROPERTIES_URI
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
condition|)
block|{
comment|//parse the enhancementProperties
if|if
condition|(
name|contentItem
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Multipart MIME parts for "
operator|+
literal|"EnhancementProperties MUST BE after the "
operator|+
literal|"MIME parts for 'metadata' AND 'content'"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
name|MediaType
name|propMediaType
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|fis
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|APPLICATION_JSON_TYPE
operator|.
name|isCompatible
argument_list|(
name|propMediaType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"EnhancementProperties (Multipart MIME parts"
operator|+
literal|"with the name '"
operator|+
name|fis
operator|.
name|getFieldName
argument_list|()
operator|+
literal|"') MUST "
operator|+
literal|"BE encoded as 'appicaltion/json' (encountered: '"
operator|+
name|fis
operator|.
name|getContentType
argument_list|()
operator|+
literal|"')!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|propCharset
init|=
name|propMediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
if|if
condition|(
name|propCharset
operator|==
literal|null
condition|)
block|{
name|propCharset
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProperties
init|=
name|getEnhancementProperties
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
try|try
block|{
name|enhancementProperties
operator|.
name|putAll
argument_list|(
name|toMap
argument_list|(
operator|new
name|JSONObject
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|fis
operator|.
name|openStream
argument_list|()
argument_list|,
name|propCharset
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unable to parse EnhancementProperties from"
operator|+
literal|"Multipart MIME parts with the name 'properties'!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|//additional metadata as serialised RDF
if|if
condition|(
name|contentItem
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Multipart MIME parts for additional "
operator|+
literal|"contentParts MUST BE after the MIME "
operator|+
literal|"parts for 'metadata' AND 'content'"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fis
operator|.
name|getFieldName
argument_list|()
operator|==
literal|null
operator|||
name|fis
operator|.
name|getFieldName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Multipart MIME parts representing "
operator|+
literal|"ContentParts for additional RDF metadata"
operator|+
literal|"MUST define the contentParts URI as"
operator|+
literal|"'name' of the MIME part!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
name|MGraph
name|graph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
try|try
block|{
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|graph
argument_list|,
name|fis
operator|.
name|openStream
argument_list|()
argument_list|,
name|fis
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse RDF "
operator|+
literal|"for ContentPart '%s' ( contentType: %s)"
argument_list|,
name|fis
operator|.
name|getName
argument_list|()
argument_list|,
name|fis
operator|.
name|getContentType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
name|UriRef
name|contentPartId
init|=
operator|new
name|UriRef
argument_list|(
name|fis
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|contentItem
operator|.
name|addPart
argument_list|(
name|contentPartId
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentItem
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The parsed multipart content item does not contain "
operator|+
literal|"any content. The content is expected to be contained "
operator|+
literal|"in a MIME part with the name 'content'. This part can "
operator|+
literal|" be also a 'multipart/alternate' if multiple content "
operator|+
literal|"parts need to be included in requests."
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileUploadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|//normal content
name|contentItem
operator|=
operator|new
name|InMemoryContentItem
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|entityStream
argument_list|)
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//add the URI of the main content
name|parsedContentIds
operator|.
name|add
argument_list|(
name|contentItem
operator|.
name|getPartUri
argument_list|(
literal|0
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//set the parsed contentIDs to the EnhancementProperties
name|getEnhancementProperties
argument_list|(
name|contentItem
argument_list|)
operator|.
name|put
argument_list|(
name|PARSED_CONTENT_URIS
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|parsedContentIds
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|contentItem
return|;
block|}
comment|/**      * Creates a ContentItem      * @param id the ID or<code>null</code> if not known      * @param metadata the metadata or<code>null</code> if not parsed. NOTE that      * if<code>id == null</code> also<code>metadata == null</code> and       *<code>id != null</code> also<code>metadata != null</code>.      * @param content the {@link FileItemStream} of the MIME part representing      * the content. If {@link FileItemStream#getContentType()} is compatible with      * "multipart/*" than this will further parse for multiple parsed content      * version. In any other case the contents of the parsed {@link FileItemStream}      * will be directly add as content for the {@link ContentItem} created by      * this method.      * @param parsedContentParts used to add the IDs of parsed contentParts       * @return the created content item      * @throws IOException on any error while accessing the contents of the parsed      * {@link FileItemStream}      * @throws FileUploadException if the parsed contents are not correctly      * encoded Multipoart MIME      */
specifier|private
name|ContentItem
name|createContentItem
parameter_list|(
name|String
name|id
parameter_list|,
name|MGraph
name|metadata
parameter_list|,
name|FileItemStream
name|content
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|parsedContentParts
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileUploadException
block|{
name|MediaType
name|partContentType
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|content
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
name|ContentItem
name|contentItem
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|MULTIPART
operator|.
name|isCompatible
argument_list|(
name|partContentType
argument_list|)
condition|)
block|{
comment|//multiple contentParts are parsed
name|FileItemIterator
name|contentPartIterator
init|=
name|fu
operator|.
name|getItemIterator
argument_list|(
operator|new
name|MessageBodyReaderContext
argument_list|(
name|content
operator|.
name|openStream
argument_list|()
argument_list|,
name|partContentType
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|contentPartIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileItemStream
name|fis
init|=
name|contentPartIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentItem
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"create ContentItem {} for content (type:{})"
argument_list|,
name|id
argument_list|,
name|content
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|contentItem
operator|=
operator|new
name|InMemoryContentItem
argument_list|(
name|id
argument_list|,
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fis
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|,
name|fis
operator|.
name|getContentType
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Blob
name|blob
init|=
operator|new
name|InMemoryBlob
argument_list|(
name|fis
operator|.
name|openStream
argument_list|()
argument_list|,
name|fis
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|contentPartId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fis
operator|.
name|getFieldName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fis
operator|.
name|getFieldName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contentPartId
operator|=
operator|new
name|UriRef
argument_list|(
name|fis
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//generating a random ID might break metadata
comment|//TODO maybe we should throw an exception instead
name|contentPartId
operator|=
operator|new
name|UriRef
argument_list|(
literal|"urn:contentpart:"
operator|+
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"  ... add Blob {} to ContentItem {} with content (type:{})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|contentPartId
block|,
name|id
block|,
name|fis
operator|.
name|getContentType
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|contentItem
operator|.
name|addPart
argument_list|(
name|contentPartId
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|parsedContentParts
operator|.
name|add
argument_list|(
name|contentPartId
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"create ContentItem {} for content (type:{})"
argument_list|,
name|id
argument_list|,
name|content
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|contentItem
operator|=
operator|new
name|InMemoryContentItem
argument_list|(
name|id
argument_list|,
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|content
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|,
name|content
operator|.
name|getContentType
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|//add the URI of the main content to the parsed contentParts
name|parsedContentParts
operator|.
name|add
argument_list|(
name|contentItem
operator|.
name|getPartUri
argument_list|(
literal|0
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|contentItem
return|;
block|}
comment|/**      * Adapter from the parameter present in an {@link MessageBodyReader} to      * the {@link RequestContext} as used by the commons.fileupload framework      * @author rwesten      *      */
specifier|private
specifier|static
class|class
name|MessageBodyReaderContext
implements|implements
name|RequestContext
block|{
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
specifier|private
specifier|final
name|String
name|contentType
decl_stmt|;
specifier|private
specifier|final
name|String
name|charEncoding
decl_stmt|;
specifier|public
name|MessageBodyReaderContext
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|mediaType
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
name|charset
init|=
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|this
operator|.
name|charEncoding
operator|=
name|charset
operator|==
literal|null
condition|?
literal|"UTF-8"
else|:
name|charset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharacterEncoding
parameter_list|()
block|{
return|return
name|charEncoding
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getContentLength
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
return|;
block|}
block|}
comment|/**      * Converts a JSON object to a java Map. Nested JSONArrays are converted      * to collections and nested JSONObjects are converted to Maps.      * @param object      * @return      * @throws JSONException      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|(
name|JSONObject
name|object
parameter_list|)
throws|throws
name|JSONException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|keys
init|=
name|object
operator|.
name|keys
argument_list|()
init|;
name|keys
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|getValue
argument_list|(
name|object
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/**      * @param object      * @param data      * @param key      * @throws JSONException      */
specifier|private
name|Object
name|getValue
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|value
operator|instanceof
name|JSONObject
condition|)
block|{
return|return
name|toMap
argument_list|(
operator|(
name|JSONObject
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|JSONArray
condition|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|(
operator|(
name|JSONArray
operator|)
name|value
operator|)
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|JSONArray
operator|)
name|value
operator|)
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|getValue
argument_list|(
operator|(
operator|(
name|JSONArray
operator|)
name|value
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

