begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|writers
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
operator|.
name|getContentParts
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
operator|.
name|getMimeTypeWithParameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|serializer
operator|.
name|JenaSerializerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|FormBodyPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|HttpMultipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MultipartEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|AbstractContentBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|ContentBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|ContentDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|InputStreamBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionMetadataHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryContentItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|util
operator|.
name|StringKeyIgnoreCaseMultivaluedMap
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|ContentItemWriter
implements|implements
name|MessageBodyWriter
argument_list|<
name|ContentItem
argument_list|>
block|{
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|protected
name|Serializer
name|serializer
decl_stmt|;
specifier|public
name|ContentItemWriter
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|servletContext
operator|=
name|servletContext
expr_stmt|;
if|if
condition|(
name|servletContext
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Serializer
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializer
operator|=
operator|new
name|Serializer
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|bindSerializingProvider
argument_list|(
operator|new
name|JenaSerializerProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
operator|.
name|isCompatible
argument_list|(
name|mediaType
argument_list|)
operator|&&
name|ContentItem
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|ContentItem
name|t
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|OutputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|String
name|boundary
init|=
literal|"contentItem"
decl_stmt|;
name|String
name|charsetName
init|=
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
name|charsetName
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s; charset=%s; boundary=%s"
argument_list|,
name|mediaType
operator|.
name|getType
argument_list|()
argument_list|,
name|mediaType
operator|.
name|getSubtype
argument_list|()
argument_list|,
name|charset
operator|.
name|toString
argument_list|()
argument_list|,
name|boundary
argument_list|)
decl_stmt|;
name|HttpMultipart
name|entity
init|=
operator|new
name|HttpMultipart
argument_list|(
literal|"from-data"
argument_list|,
name|charset
argument_list|,
name|boundary
argument_list|)
decl_stmt|;
name|entity
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
literal|"metadata"
argument_list|,
operator|new
name|ClerezzaContentBody
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
comment|//TODO: find a way to parse the intended RDF serialisation format
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|HttpMultipart
name|content
init|=
operator|new
name|HttpMultipart
argument_list|(
literal|"alternate"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
literal|"contentParts"
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|entry
range|:
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|content
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|InputStreamBody
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|,
name|getMimeTypeWithParameters
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//no file name
block|}
comment|//add all the blobs
name|entity
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
literal|"content"
argument_list|,
operator|new
name|MultipartContentBody
argument_list|(
name|content
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//add additional metadata stored in contentParts
for|for
control|(
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|TripleCollection
argument_list|>
name|entry
range|:
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|TripleCollection
operator|.
name|class
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entity
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|ClerezzaContentBody
argument_list|(
literal|null
argument_list|,
comment|//no file name
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entity
operator|.
name|writeTo
argument_list|(
name|entityStream
argument_list|)
expr_stmt|;
name|httpHeaders
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|Object
operator|)
name|contentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Supports sending multipart mime as {@link ContentBody}.      * @author Rupert Westenthaler      *      */
specifier|private
class|class
name|MultipartContentBody
extends|extends
name|AbstractContentBody
implements|implements
name|ContentBody
implements|,
name|ContentDescriptor
block|{
specifier|private
name|HttpMultipart
name|multipart
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|MultipartContentBody
parameter_list|(
name|HttpMultipart
name|multipart
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"multipart/%s; boundary=%s"
argument_list|,
name|multipart
operator|.
name|getSubType
argument_list|()
argument_list|,
name|multipart
operator|.
name|getBoundary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|multipart
operator|=
name|multipart
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharset
parameter_list|()
block|{
return|return
name|multipart
operator|.
name|getCharset
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTransferEncoding
parameter_list|()
block|{
return|return
literal|"7bit"
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|multipart
operator|.
name|getTotalLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|multipart
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Supports serialised RDF graphs as {@link ContentBody}      * @author Rupert Westenthaler      *      */
specifier|private
class|class
name|ClerezzaContentBody
extends|extends
name|AbstractContentBody
implements|implements
name|ContentBody
implements|,
name|ContentDescriptor
block|{
specifier|private
name|TripleCollection
name|graph
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|protected
name|ClerezzaContentBody
parameter_list|(
name|String
name|name
parameter_list|,
name|TripleCollection
name|graph
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
name|super
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|graph
operator|=
name|graph
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharset
parameter_list|()
block|{
return|return
literal|"UTF-8"
return|;
comment|//clerezza uses statically UTF-8
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTransferEncoding
parameter_list|()
block|{
comment|// TODO Javadoc says 7bit; constants is MIMETYPE define 8bit and binary
return|return
literal|"7bit"
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|graph
argument_list|,
name|getMediaType
argument_list|()
operator|+
literal|'/'
operator|+
name|getSubType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

