begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|writers
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|WILDCARD_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|ENHANCEMENT_PROPERTIES_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|getEnhancementProperties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|getOutputContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|getOutputContentParts
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|getParsedContentURIs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|isOmitMetadata
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
operator|.
name|isOmitParsedContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
operator|.
name|getBlob
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
operator|.
name|getContentParts
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|FormBodyPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|HttpMultipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MIME
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|AbstractContentBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|ContentBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|ContentDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|StringBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jersey
operator|.
name|utils
operator|.
name|EnhancementPropertiesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|ContentItemWriter
implements|implements
name|MessageBodyWriter
argument_list|<
name|ContentItem
argument_list|>
block|{
comment|/**      * The "multipart/*" wilrcard      */
specifier|private
specifier|static
specifier|final
name|MediaType
name|MULTIPART
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|MULTIPART_FORM_DATA_TYPE
operator|.
name|getType
argument_list|()
operator|+
literal|"/*"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_ITEM_BOUNDARY
init|=
literal|"contentItem"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|DEFAULT_RDF_FORMAT
init|=
operator|new
name|MediaType
argument_list|(
name|APPLICATION_JSON_TYPE
operator|.
name|getType
argument_list|()
argument_list|,
name|APPLICATION_JSON_TYPE
operator|.
name|getSubtype
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"charset"
argument_list|,
name|UTF8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Serializer
name|__serializer
decl_stmt|;
specifier|private
name|ServletContext
name|context
decl_stmt|;
specifier|public
name|ContentItemWriter
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Lazzy initialisation for the {@link Serializer}      * @return the {@link Serializer}      */
specifier|protected
name|Serializer
name|getSerializer
parameter_list|()
block|{
comment|/*          * Needed because Jersey tries to create an instance          * during initialisation. At that time the {@link BundleContext} required          * by {@link ContextHelper#getServiceFromContext(Class, ServletContext)}          * is not yet present resulting in an Exception.          */
if|if
condition|(
name|__serializer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|__serializer
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Serializer
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServletContext is NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|__serializer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Clerezza RDF Serializer service is not available(service class:"
operator|+
name|Serializer
operator|.
name|class
operator|+
literal|")!"
argument_list|)
throw|;
block|}
block|}
return|return
name|__serializer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
comment|//MediaType.MULTIPART_FORM_DATA_TYPE.isCompatible(mediaType)&&
name|ContentItem
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|ContentItem
name|t
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|OutputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
comment|//(0) handle default dataType
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|getEnhancementProperties
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|boolean
name|omitMetadata
init|=
name|isOmitMetadata
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|MULTIPART
operator|.
name|isCompatible
argument_list|(
name|mediaType
argument_list|)
condition|)
block|{
comment|//two possible cases
if|if
condition|(
operator|!
name|omitMetadata
condition|)
block|{
comment|//  (1) just return the RDF data
comment|//(1.a) Backward support for default dataType if no Accept header is set
if|if
condition|(
name|mediaType
operator|.
name|isWildcardType
argument_list|()
operator|||
name|TEXT_PLAIN_TYPE
operator|.
name|isCompatible
argument_list|(
name|mediaType
argument_list|)
operator|||
name|APPLICATION_OCTET_STREAM_TYPE
operator|.
name|isCompatible
argument_list|(
name|mediaType
argument_list|)
condition|)
block|{
name|mediaType
operator|=
operator|new
name|MediaType
argument_list|(
name|APPLICATION_JSON_TYPE
operator|.
name|getType
argument_list|()
argument_list|,
name|APPLICATION_JSON_TYPE
operator|.
name|getSubtype
argument_list|()
argument_list|,
comment|//Clerezza serialisers are hard coded to use UTF-8
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"charset"
argument_list|,
name|UTF8
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|httpHeaders
operator|.
name|putSingle
argument_list|(
literal|"Content-Type"
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|entityStream
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//  (2) return a single content part
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|getBlob
argument_list|(
name|ci
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPart
operator|==
literal|null
condition|)
block|{
comment|//no alternate content with the requeste media type
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|UNSUPPORTED_MEDIA_TYPE
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The requested enhancement chain has not created an "
operator|+
literal|"version of the parsed content in the reuqest media "
operator|+
literal|"type "
operator|+
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
comment|//found -> stream the content to the client
comment|//NOTE: This assumes that the presence of a charset
comment|//      implies reading/writing character streams
name|String
name|requestedCharset
init|=
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|String
name|blobCharset
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|Charset
name|readerCharset
init|=
name|blobCharset
operator|==
literal|null
condition|?
name|UTF8
else|:
name|Charset
operator|.
name|forName
argument_list|(
name|blobCharset
argument_list|)
decl_stmt|;
name|Charset
name|writerCharset
init|=
name|requestedCharset
operator|==
literal|null
condition|?
literal|null
else|:
name|Charset
operator|.
name|forName
argument_list|(
name|requestedCharset
argument_list|)
decl_stmt|;
if|if
condition|(
name|writerCharset
operator|!=
literal|null
operator|&&
operator|!
name|writerCharset
operator|.
name|equals
argument_list|(
name|readerCharset
argument_list|)
condition|)
block|{
comment|//we need to transcode
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|contentPart
operator|.
name|getValue
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|,
name|readerCharset
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|entityStream
argument_list|,
name|writerCharset
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//no transcoding
if|if
condition|(
name|requestedCharset
operator|==
literal|null
operator|&&
name|blobCharset
operator|!=
literal|null
condition|)
block|{
name|httpHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
operator|+
literal|"; charset="
operator|+
name|blobCharset
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|in
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|entityStream
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// multipart mime requested!
specifier|final
name|String
name|charsetName
init|=
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
specifier|final
name|Charset
name|charset
init|=
name|charsetName
operator|!=
literal|null
condition|?
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
else|:
name|UTF8
decl_stmt|;
name|MediaType
name|rdfFormat
decl_stmt|;
name|String
name|rdfFormatString
init|=
name|EnhancementPropertiesHelper
operator|.
name|getRdfFormat
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|rdfFormatString
operator|==
literal|null
operator|||
name|rdfFormatString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rdfFormat
operator|=
name|DEFAULT_RDF_FORMAT
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|rdfFormat
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|rdfFormatString
argument_list|)
expr_stmt|;
if|if
condition|(
name|rdfFormat
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|//use the charset of the default RDF format
name|rdfFormat
operator|=
operator|new
name|MediaType
argument_list|(
name|rdfFormat
operator|.
name|getType
argument_list|()
argument_list|,
name|rdfFormat
operator|.
name|getSubtype
argument_list|()
argument_list|,
name|DEFAULT_RDF_FORMAT
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The specified RDF format '%s' (used "
operator|+
literal|" to serialize all RDF parts of multipart MIME responses)"
operator|+
literal|" is not a well formated MIME type"
argument_list|,
name|rdfFormatString
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//(1) setting the correct header
name|String
name|contentType
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s; charset=%s; boundary=%s"
argument_list|,
name|mediaType
operator|.
name|getType
argument_list|()
argument_list|,
name|mediaType
operator|.
name|getSubtype
argument_list|()
argument_list|,
name|charset
operator|.
name|toString
argument_list|()
argument_list|,
name|CONTENT_ITEM_BOUNDARY
argument_list|)
decl_stmt|;
name|httpHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|HttpMultipart
name|entity
init|=
operator|new
name|HttpMultipart
argument_list|(
literal|"from-data"
argument_list|,
name|charset
argument_list|,
name|CONTENT_ITEM_BOUNDARY
argument_list|)
decl_stmt|;
comment|//(2) serialising the metadata
if|if
condition|(
operator|!
name|isOmitMetadata
argument_list|(
name|properties
argument_list|)
condition|)
block|{
name|entity
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
literal|"metadata"
argument_list|,
operator|new
name|ClerezzaContentBody
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|rdfFormat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//(3) serialising the Content (Bloby)
comment|//(3.a) Filter based on parameter
name|List
argument_list|<
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
argument_list|>
name|includedBlobs
init|=
name|filterBlobs
argument_list|(
name|ci
argument_list|,
name|properties
argument_list|)
decl_stmt|;
comment|//(3.b) Serialise the filtered
if|if
condition|(
operator|!
name|includedBlobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HttpMultipart
name|content
init|=
operator|new
name|HttpMultipart
argument_list|(
literal|"alternate"
argument_list|,
name|UTF8
argument_list|,
literal|"contentParts"
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|entry
range|:
name|includedBlobs
control|)
block|{
name|content
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|BlobContentBody
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//no file name
block|}
comment|//add all the blobs
name|entity
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
literal|"content"
argument_list|,
operator|new
name|MultipartContentBody
argument_list|(
name|content
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//else no content to include
name|Set
argument_list|<
name|String
argument_list|>
name|includeContentParts
init|=
name|getIncludedContentPartURIs
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeContentParts
operator|!=
literal|null
condition|)
block|{
comment|//(4) serialise EnhancementProperties
if|if
condition|(
name|includeContentParts
operator|.
name|isEmpty
argument_list|()
operator|||
name|includeContentParts
operator|.
name|contains
argument_list|(
name|ENHANCEMENT_PROPERTIES_URI
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
condition|)
block|{
name|JSONObject
name|object
decl_stmt|;
try|try
block|{
name|object
operator|=
name|toJson
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unable to convert EnhancementProperties to "
operator|+
literal|"JSON (values : "
operator|+
name|properties
operator|+
literal|")!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
name|entity
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
name|ENHANCEMENT_PROPERTIES_URI
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|StringBody
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|,
name|UTF8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//(5) additional RDF metadata stored in contentParts
for|for
control|(
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|TripleCollection
argument_list|>
name|entry
range|:
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|TripleCollection
operator|.
name|class
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|includeContentParts
operator|.
name|isEmpty
argument_list|()
operator|||
name|includeContentParts
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|entity
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|ClerezzaContentBody
argument_list|(
literal|null
argument_list|,
comment|//no file name
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|rdfFormat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else ignore this content part
block|}
block|}
name|entity
operator|.
name|writeTo
argument_list|(
name|entityStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param properties      * @return      */
specifier|private
name|JSONObject
name|toJson
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|object
return|;
block|}
comment|/**      * @param entry      * @return      * @throws JSONException      */
specifier|private
name|Object
name|getValue
parameter_list|(
name|Object
name|javaValue
parameter_list|)
throws|throws
name|JSONException
block|{
name|Object
name|value
decl_stmt|;
if|if
condition|(
name|javaValue
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|value
operator|=
operator|new
name|JSONArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
operator|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|javaValue
control|)
block|{
operator|(
operator|(
name|JSONArray
operator|)
name|value
operator|)
operator|.
name|put
argument_list|(
name|getValue
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|javaValue
operator|instanceof
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|value
operator|=
name|toJson
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|javaValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|javaValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_class

begin_comment
comment|/**      * @param properties      * @return      */
end_comment

begin_function
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getIncludedContentPartURIs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|ocp
init|=
name|getOutputContentParts
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|ocp
operator|==
literal|null
operator|||
name|ocp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|includeContentParts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|ocp
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeContentParts
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|includeContentParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//empty == none
name|includeContentParts
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeContentParts
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// * == all -> empty list
name|includeContentParts
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|includeContentParts
return|;
block|}
end_function

begin_comment
comment|/**      * @param ci      * @param properties      * @return      */
end_comment

begin_function
specifier|private
name|List
argument_list|<
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
argument_list|>
name|filterBlobs
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
argument_list|>
name|includedContentPartList
decl_stmt|;
name|Set
argument_list|<
name|MediaType
argument_list|>
name|includeMediaTypes
init|=
name|getIncludedMediaTypes
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeMediaTypes
operator|==
literal|null
condition|)
block|{
name|includedContentPartList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|includedContentPartList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreContentPartUris
init|=
name|getIgnoredContentURIs
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|nextContentPartEntry
label|:
for|for
control|(
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|entry
range|:
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreContentPartUris
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
condition|)
block|{
name|Blob
name|blob
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|MediaType
name|blobMediaType
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MediaType
name|included
range|:
name|includeMediaTypes
control|)
block|{
if|if
condition|(
name|blobMediaType
operator|.
name|isCompatible
argument_list|(
name|included
argument_list|)
condition|)
block|{
name|includedContentPartList
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
continue|continue
name|nextContentPartEntry
continue|;
block|}
block|}
block|}
comment|//else ignore this Blob
block|}
block|}
return|return
name|includedContentPartList
return|;
block|}
end_function

begin_comment
comment|/**      * @param properties      * @return      */
end_comment

begin_function
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getIgnoredContentURIs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreContentPartUris
init|=
name|isOmitParsedContent
argument_list|(
name|properties
argument_list|)
condition|?
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|getParsedContentURIs
argument_list|(
name|properties
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|ignoreContentPartUris
operator|==
literal|null
condition|)
block|{
name|ignoreContentPartUris
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
return|return
name|ignoreContentPartUris
return|;
block|}
end_function

begin_comment
comment|/**      * @param properties      * @return      */
end_comment

begin_function
specifier|private
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getIncludedMediaTypes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|includeMediaTypeStrings
init|=
name|getOutputContent
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeMediaTypeStrings
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|MediaType
argument_list|>
name|includeMediaTypes
init|=
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|includeMediaTypeStrings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|includeString
range|:
name|includeMediaTypeStrings
control|)
block|{
if|if
condition|(
name|includeString
operator|!=
literal|null
condition|)
block|{
name|includeString
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|includeString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|includeString
argument_list|)
condition|)
block|{
comment|//also support '*' for '*/*'
name|includeMediaTypes
operator|.
name|add
argument_list|(
name|WILDCARD_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|includeMediaTypes
operator|.
name|add
argument_list|(
name|MediaType
operator|.
name|valueOf
argument_list|(
name|includeString
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The parsed outputContent parameter "
operator|+
name|includeMediaTypeStrings
operator|+
literal|" contain an "
operator|+
literal|"illegal formated MediaType!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|includeMediaTypes
operator|.
name|contains
argument_list|(
name|WILDCARD_TYPE
argument_list|)
condition|)
block|{
name|includeMediaTypes
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|WILDCARD_TYPE
argument_list|)
expr_stmt|;
block|}
return|return
name|includeMediaTypes
return|;
block|}
end_function

begin_comment
comment|/**      * Supports sending multipart mime as {@link ContentBody}.      * @author Rupert Westenthaler      *      */
end_comment

begin_class
specifier|private
class|class
name|MultipartContentBody
extends|extends
name|AbstractContentBody
implements|implements
name|ContentBody
implements|,
name|ContentDescriptor
block|{
specifier|private
name|HttpMultipart
name|multipart
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|MultipartContentBody
parameter_list|(
name|HttpMultipart
name|multipart
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"multipart/%s; boundary=%s"
argument_list|,
name|multipart
operator|.
name|getSubType
argument_list|()
argument_list|,
name|multipart
operator|.
name|getBoundary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|multipart
operator|=
name|multipart
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharset
parameter_list|()
block|{
return|return
name|multipart
operator|.
name|getCharset
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTransferEncoding
parameter_list|()
block|{
return|return
name|MIME
operator|.
name|ENC_8BIT
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|multipart
operator|.
name|getTotalLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|multipart
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Supports serialised RDF graphs as {@link ContentBody}      * @author Rupert Westenthaler      *      */
end_comment

begin_class
specifier|private
class|class
name|ClerezzaContentBody
extends|extends
name|AbstractContentBody
implements|implements
name|ContentBody
implements|,
name|ContentDescriptor
block|{
specifier|private
name|TripleCollection
name|graph
decl_stmt|;
specifier|private
name|String
name|charset
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|protected
name|ClerezzaContentBody
parameter_list|(
name|String
name|name
parameter_list|,
name|TripleCollection
name|graph
parameter_list|,
name|MediaType
name|mimeType
parameter_list|)
block|{
name|super
argument_list|(
name|mimeType
operator|.
name|getType
argument_list|()
operator|+
literal|'/'
operator|+
name|mimeType
operator|.
name|getSubtype
argument_list|()
argument_list|)
expr_stmt|;
name|charset
operator|=
name|mimeType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
expr_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
operator|||
name|charset
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|charset
operator|=
name|UTF8
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|graph
operator|=
name|graph
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharset
parameter_list|()
block|{
return|return
name|charset
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTransferEncoding
parameter_list|()
block|{
return|return
name|MIME
operator|.
name|ENC_8BIT
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|graph
argument_list|,
name|getMediaType
argument_list|()
operator|+
literal|'/'
operator|+
name|getSubType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|BlobContentBody
extends|extends
name|AbstractContentBody
block|{
specifier|private
name|Blob
name|blob
decl_stmt|;
specifier|public
name|BlobContentBody
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
name|super
argument_list|(
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blob
operator|=
name|blob
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|blob
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharset
parameter_list|()
block|{
return|return
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTransferEncoding
parameter_list|()
block|{
return|return
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
operator|==
literal|null
condition|?
name|MIME
operator|.
name|ENC_BINARY
else|:
name|MIME
operator|.
name|ENC_8BIT
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

unit|}
end_unit

