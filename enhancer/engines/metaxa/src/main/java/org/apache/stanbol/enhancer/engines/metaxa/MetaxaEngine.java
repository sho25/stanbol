begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
operator|.
name|randomUUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TypedLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
operator|.
name|MetaxaCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
operator|.
name|RDF2GoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
operator|.
name|html
operator|.
name|BundleURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
operator|.
name|html
operator|.
name|HtmlExtractorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|aifbcommons
operator|.
name|collection
operator|.
name|ClosableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|BlankNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|DatatypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|impl
operator|.
name|URIImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|ExtractorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link MetaxaEngine}  *  * @author Joerg Steffen, DFKI  * @version $Id$  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"metaxa"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|MetaxaEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|IOException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetaxaEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Plain text content of a content item.       */
specifier|public
specifier|static
specifier|final
name|UriRef
name|NIE_PLAINTEXTCONTENT
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|nie
operator|+
literal|"plainTextContent"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URIImpl
name|NIE_PLAINTEXT_PROPERTY
init|=
operator|new
name|URIImpl
argument_list|(
name|NIE_PLAINTEXTCONTENT
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine. Currently set to      * {@link ServiceProperties#ORDERING_PRE_PROCESSING}      */
specifier|public
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ORDERING_PRE_PROCESSING
decl_stmt|;
comment|/**      * name of a file defining the available docuemnt extractors for Metaxa. By default, the builtin file 'extractionregistry.xml' is used.      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|MetaxaEngine
operator|.
name|DEFAULT_EXTRACTION_REGISTRY
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|GLOBAL_EXTRACTOR_REGISTRY
init|=
literal|"org.apache.stanbol.enhancer.engines.metaxa.extractionregistry"
decl_stmt|;
comment|/**      * name of a file that defines the set of extractors for HTML documents. By default, the builtin file 'htmlextractors.xml' is used."      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|MetaxaEngine
operator|.
name|DEFAULT_HTML_EXTRACTOR_REGISTRY
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|HTML_EXTRACTOR_REGISTRY
init|=
literal|"org.apache.stanbol.enhancer.engines.metaxa.htmlextractors"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
block|{
literal|"text/plain"
block|}
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|IGNORE_MIME_TYPES
init|=
literal|"org.apache.stanbol.enhancer.engines.metaxa.ignoreMimeTypes"
decl_stmt|;
comment|/**      * a boolean option whether extracted text should be included in the metadata as value of the NIE.plainTextContent property      */
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_TEXT_IN_METADATA
init|=
literal|"org.apache.stanbol.enhancer.engines.metaxa.includeText"
decl_stmt|;
specifier|private
name|MetaxaCore
name|extractor
decl_stmt|;
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_EXTRACTION_REGISTRY
init|=
literal|"extractionregistry.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_HTML_EXTRACTOR_REGISTRY
init|=
literal|"htmlextractors.xml"
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|ignoredMimeTypes
decl_stmt|;
specifier|private
name|boolean
name|includeText
init|=
literal|false
decl_stmt|;
comment|/**      * The activate method.      *      * @param ce the {@link ComponentContext}      * @throws IOException if initializing fails      */
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|IOException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|String
name|extractionRegistry
init|=
name|DEFAULT_EXTRACTION_REGISTRY
decl_stmt|;
name|String
name|htmlExtractors
init|=
name|DEFAULT_HTML_EXTRACTOR_REGISTRY
decl_stmt|;
name|this
operator|.
name|bundleContext
operator|=
name|ce
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|BundleURIResolver
operator|.
name|BUNDLE
operator|=
name|this
operator|.
name|bundleContext
operator|.
name|getBundle
argument_list|()
expr_stmt|;
try|try
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|confFile
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|GLOBAL_EXTRACTOR_REGISTRY
argument_list|)
decl_stmt|;
if|if
condition|(
name|confFile
operator|!=
literal|null
operator|&&
name|confFile
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|extractionRegistry
operator|=
name|confFile
expr_stmt|;
block|}
name|confFile
operator|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|HTML_EXTRACTOR_REGISTRY
argument_list|)
expr_stmt|;
if|if
condition|(
name|confFile
operator|!=
literal|null
operator|&&
name|confFile
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|htmlExtractors
operator|=
name|confFile
expr_stmt|;
block|}
name|this
operator|.
name|extractor
operator|=
operator|new
name|MetaxaCore
argument_list|(
name|extractionRegistry
argument_list|)
expr_stmt|;
name|HtmlExtractorFactory
operator|.
name|REGISTRY_CONFIGURATION
operator|=
name|htmlExtractors
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Object
name|value
init|=
name|ce
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|IGNORE_MIME_TYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|ignoredMimeTypes
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|ignoredMimeTypes
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|mimeType
operator|:
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
name|ignoredMimeTypes
operator|.
name|add
argument_list|(
name|mimeType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ignoredMimeTypes
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ignoredMimeTypes
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|ce
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|INCLUDE_TEXT_IN_METADATA
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|includeText
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Include Text set to: {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * The deactivate method.      *      * @param ce the {@link ComponentContext}      */
end_comment

begin_function
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
block|{
name|super
operator|.
name|deactivate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|this
operator|.
name|extractor
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|mimeType
init|=
name|ci
operator|.
name|getMimeType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ignoredMimeTypes
operator|.
name|contains
argument_list|(
name|mimeType
argument_list|)
operator|&&
name|this
operator|.
name|extractor
operator|.
name|isSupported
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
return|return
name|ENHANCE_ASYNC
return|;
comment|//supports now asynchronous execution!
block|}
return|return
name|CANNOT_ENHANCE
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
block|{
comment|// get model from the extraction
name|URIImpl
name|docId
decl_stmt|;
name|Model
name|m
decl_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|docId
operator|=
operator|new
name|URIImpl
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
name|this
operator|.
name|extractor
operator|.
name|extract
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|,
name|docId
argument_list|,
name|ci
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// add the statements from this model to the Metadata model
if|if
condition|(
literal|null
operator|!=
name|m
condition|)
block|{
comment|/*                String text = MetaxaCore.getText(m);                log.info(text);                 */
comment|// get the model where to add the statements
comment|/*                  * NOTE(rweten):                   *  There is no need to create an TextEnhancement to mark that                  *  a ContentItem was processed by Metaxa, because the                  *  ExecutionMetadata do record this anyway.                  */
comment|//
comment|// create enhancement
comment|//UriRef textEnhancement = EnhancementEngineHelper.createTextEnhancement(ci, this);
comment|// set confidence value to 1.0
comment|//g.add(new TripleImpl(textEnhancement, Properties.ENHANCER_CONFIDENCE, literalFactory.createTypedLiteral(1.0)));
name|RDF2GoUtils
operator|.
name|urifyBlankNodes
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|BlankNode
argument_list|,
name|BNode
argument_list|>
name|blankNodeMap
init|=
operator|new
name|HashMap
argument_list|<
name|BlankNode
argument_list|,
name|BNode
argument_list|>
argument_list|()
decl_stmt|;
name|ClosableIterator
argument_list|<
name|Statement
argument_list|>
name|it
init|=
name|m
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|byteOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|byteOut
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
name|MGraph
name|g
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
comment|//first add to a temporary graph
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|oneStmt
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//we need to treat triples that provide the plain/text
comment|//version differently. Such Objects need to be added to
comment|//the plain text Blob!
if|if
condition|(
name|oneStmt
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|docId
argument_list|)
operator|&&
name|oneStmt
operator|.
name|getPredicate
argument_list|()
operator|.
name|equals
argument_list|(
name|NIE_PLAINTEXT_PROPERTY
argument_list|)
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|oneStmt
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeText
condition|)
block|{
name|NonLiteral
name|subject
init|=
operator|(
name|NonLiteral
operator|)
name|asClerezzaResource
argument_list|(
name|oneStmt
operator|.
name|getSubject
argument_list|()
argument_list|,
name|blankNodeMap
argument_list|)
decl_stmt|;
name|UriRef
name|predicate
init|=
operator|(
name|UriRef
operator|)
name|asClerezzaResource
argument_list|(
name|oneStmt
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|blankNodeMap
argument_list|)
decl_stmt|;
name|Resource
name|object
init|=
name|asClerezzaResource
argument_list|(
name|oneStmt
operator|.
name|getObject
argument_list|()
argument_list|,
name|blankNodeMap
argument_list|)
decl_stmt|;
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//add metadata to the metadata of the contentItem
name|NonLiteral
name|subject
init|=
operator|(
name|NonLiteral
operator|)
name|asClerezzaResource
argument_list|(
name|oneStmt
operator|.
name|getSubject
argument_list|()
argument_list|,
name|blankNodeMap
argument_list|)
decl_stmt|;
name|UriRef
name|predicate
init|=
operator|(
name|UriRef
operator|)
name|asClerezzaResource
argument_list|(
name|oneStmt
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|blankNodeMap
argument_list|)
decl_stmt|;
name|Resource
name|object
init|=
name|asClerezzaResource
argument_list|(
name|oneStmt
operator|.
name|getObject
argument_list|()
argument_list|,
name|blankNodeMap
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|subject
operator|&&
literal|null
operator|!=
name|predicate
operator|&&
literal|null
operator|!=
name|object
condition|)
block|{
name|Triple
name|t
init|=
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|g
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"added "
operator|+
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//now acquire a write lock and add the extracted
comment|//metadata to the content item
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|addAll
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|plainTextData
init|=
name|byteOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|plainTextData
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|//add plain text to the content item
name|UriRef
name|blobUri
init|=
operator|new
name|UriRef
argument_list|(
literal|"urn:metaxa:plain-text:"
operator|+
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
name|Blob
name|plainTextBlob
init|=
operator|new
name|InMemoryBlob
argument_list|(
name|plainTextData
argument_list|,
literal|"text/plain;charset="
operator|+
name|charset
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ci
operator|.
name|addPart
argument_list|(
name|blobUri
argument_list|,
name|plainTextBlob
argument_list|)
expr_stmt|;
comment|//TODO: add contentPart metadata to the contentItem
block|}
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
name|m
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExtractorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**      * Converts the given RDF2Go node into a corresponding Clerezza object.      *      * @param node a {@link Node}      * @return a {@link Resource}      */
end_comment

begin_function
specifier|public
specifier|static
name|Resource
name|asClerezzaResource
parameter_list|(
name|Node
name|node
parameter_list|,
name|HashMap
argument_list|<
name|BlankNode
argument_list|,
name|BNode
argument_list|>
name|blankNodeMap
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|URI
condition|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|node
operator|.
name|asURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|BlankNode
condition|)
block|{
name|BNode
name|bNode
init|=
name|blankNodeMap
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|bNode
operator|==
literal|null
condition|)
block|{
name|bNode
operator|=
operator|new
name|BNode
argument_list|()
expr_stmt|;
name|blankNodeMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|asBlankNode
argument_list|()
argument_list|,
name|bNode
argument_list|)
expr_stmt|;
block|}
return|return
name|bNode
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|DatatypeLiteral
condition|)
block|{
name|DatatypeLiteral
name|dtl
init|=
name|node
operator|.
name|asDatatypeLiteral
argument_list|()
decl_stmt|;
return|return
operator|new
name|TypedLiteralImpl
argument_list|(
name|dtl
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|UriRef
argument_list|(
name|dtl
operator|.
name|getDatatype
argument_list|()
operator|.
name|asURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|PlainLiteral
condition|)
block|{
return|return
operator|new
name|PlainLiteralImpl
argument_list|(
name|node
operator|.
name|asLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|defaultOrder
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

