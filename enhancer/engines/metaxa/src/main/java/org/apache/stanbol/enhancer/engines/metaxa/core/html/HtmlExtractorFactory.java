begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
operator|.
name|html
package|;
end_package

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|Extractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * HtmlExtractorFactory.java  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|HtmlExtractorFactory
extends|extends
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|html
operator|.
name|HtmlExtractorFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HtmlExtractorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|REGISTRY_CONFIGURATION
init|=
literal|"htmlextractors.xml"
decl_stmt|;
specifier|private
name|HtmlExtractionRegistry
name|registry
decl_stmt|;
specifier|private
name|HtmlParser
name|parser
decl_stmt|;
specifier|public
name|HtmlExtractorFactory
parameter_list|()
throws|throws
name|InstantiationException
block|{
name|this
operator|.
name|parser
operator|=
operator|new
name|HtmlParser
argument_list|()
expr_stmt|;
try|try
block|{
name|registry
operator|=
operator|new
name|HtmlExtractionRegistry
argument_list|(
name|REGISTRY_CONFIGURATION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InitializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Registry Initialization Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InstantiationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Extractor
name|get
parameter_list|()
block|{
return|return
operator|new
name|IksHtmlExtractor
argument_list|(
name|registry
argument_list|,
name|parser
argument_list|)
return|;
block|}
block|}
end_class

end_unit

