begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|aifbcommons
operator|.
name|collection
operator|.
name|ClosableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|impl
operator|.
name|URIImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|Extractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|ExtractorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|ExtractorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|ExtractorRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|extractor
operator|.
name|impl
operator|.
name|DefaultExtractorRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|rdf
operator|.
name|RDFContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|rdf
operator|.
name|RDFContainerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|rdf
operator|.
name|impl
operator|.
name|RDFContainerFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticdesktop
operator|.
name|aperture
operator|.
name|vocabulary
operator|.
name|NIE
import|;
end_import

begin_comment
comment|/**  * {@link MetaxaCore} provides the functionality to extract metadata and text  * for a number of different document formats (pdf, html, etc.).  *  * @author Joerg Steffen, DFKI  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|MetaxaCore
block|{
comment|/**      * Contains the configured extractors.      */
specifier|private
name|ExtractorRegistry
name|extractorRegistry
decl_stmt|;
comment|/**      * Creates a new instance of {@code ApertureExtractor} using the given      * configuration.      *      * @param configFileName      *            a {@link String} with the config file name.      * @throws IOException      *             if there is an error during initialization      */
specifier|public
name|MetaxaCore
parameter_list|(
name|String
name|configFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|configFileName
argument_list|)
decl_stmt|;
name|this
operator|.
name|extractorRegistry
operator|=
operator|new
name|DefaultExtractorRegistry
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns {@code true} if the given MIME type is supported by the      * extractor.      *      * @param mimeType      *            a {@link String} with the MIME type      * @return a {@code boolean}      */
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Set
name|factories
init|=
name|this
operator|.
name|extractorRegistry
operator|.
name|getExtractorFactories
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
return|return
name|factories
operator|!=
literal|null
operator|&&
operator|!
name|factories
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Returns a model containing all the metadata that could be extracted      * by reading the given input stream using the given MIME type.      *      * @param in      *            an {@link InputStream} where to read the document from      * @param docId      *            a {@link String} with the document URI      * @param mimeType      *            a {@link String} with the MIME type      * @return a {@link Model} containing the metadata or {@code null} if no      *         extractor is available for the given MIME type      * @throws ExtractorException      *             if there is an error when extracting the metadata      * @throws IOException      *             if there is an error when reading the input stream      */
specifier|public
name|Model
name|extract
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|URIImpl
name|docId
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|ExtractorException
throws|,
name|IOException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Set
name|factories
init|=
name|this
operator|.
name|extractorRegistry
operator|.
name|getExtractorFactories
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
name|Model
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|factories
operator|!=
literal|null
operator|&&
operator|!
name|factories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// get extractor from the first available factory
name|ExtractorFactory
name|factory
init|=
operator|(
name|ExtractorFactory
operator|)
name|factories
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Extractor
name|extractor
init|=
name|factory
operator|.
name|get
argument_list|()
decl_stmt|;
name|RDFContainerFactory
name|containerFactory
init|=
operator|new
name|RDFContainerFactoryImpl
argument_list|()
decl_stmt|;
name|RDFContainer
name|container
init|=
name|containerFactory
operator|.
name|getRDFContainer
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|extractor
operator|.
name|extract
argument_list|(
name|container
operator|.
name|getDescribedUri
argument_list|()
argument_list|,
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|,
literal|8192
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mimeType
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|=
name|container
operator|.
name|getModel
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Returns a documents plain text if contained in the given extracted      * metadata.      *      * @param model      *            a {@link Model} with the extracted metadata      * @return a {@link String} with the plain text content or {@code null} if      *         no plain text was contained in the extracted metadata      */
specifier|public
specifier|static
name|String
name|getText
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|ClosableIterator
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
literal|null
decl_stmt|;
try|try
block|{
name|statements
operator|=
name|model
operator|.
name|findStatements
argument_list|(
name|Variable
operator|.
name|ANY
argument_list|,
name|NIE
operator|.
name|plainTextContent
argument_list|,
name|Variable
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
while|while
condition|(
name|statements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|statement
init|=
name|statements
operator|.
name|next
argument_list|()
decl_stmt|;
name|Node
name|value
init|=
name|statement
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Literal
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
name|text
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|statements
operator|!=
literal|null
condition|)
block|{
name|statements
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

