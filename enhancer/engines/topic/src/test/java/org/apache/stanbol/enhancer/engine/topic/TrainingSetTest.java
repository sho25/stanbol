begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|topic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|SolrTrainingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TrainingSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|TrainingSetTest
extends|extends
name|BaseTestWithSolrCore
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_1
init|=
literal|"http://example.com/topics/topic1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_2
init|=
literal|"http://example.com/topics/topic2"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_3
init|=
literal|"http://example.com/topics/topic3"
decl_stmt|;
specifier|protected
name|EmbeddedSolrServer
name|trainingsetSolrServer
decl_stmt|;
specifier|protected
name|File
name|solrHome
decl_stmt|;
specifier|protected
name|SolrTrainingSet
name|trainingSet
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|ConfigurationException
block|{
name|solrHome
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"topicTrainingSetTest_"
argument_list|,
literal|"_solr_cores"
argument_list|)
expr_stmt|;
name|solrHome
operator|.
name|delete
argument_list|()
expr_stmt|;
name|solrHome
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|trainingsetSolrServer
operator|=
name|makeEmptyEmbeddedSolrServer
argument_list|(
name|solrHome
argument_list|,
literal|"trainingsetserver"
argument_list|,
literal|"trainingset"
argument_list|)
expr_stmt|;
name|trainingSet
operator|=
operator|new
name|SolrTrainingSet
argument_list|()
expr_stmt|;
name|trainingSet
operator|.
name|configure
argument_list|(
name|getDefaultConfigParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanupEmbeddedSolrServer
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
name|solrHome
operator|=
literal|null
expr_stmt|;
name|trainingsetSolrServer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyTrainingSet
parameter_list|()
throws|throws
name|TrainingSetException
block|{
name|Batch
argument_list|<
name|String
argument_list|>
name|examples
init|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getNegativeExamples
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getNegativeExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoringExamples
parameter_list|()
throws|throws
name|ConfigurationException
throws|,
name|TrainingSetException
block|{
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|"example1"
argument_list|,
literal|"Text of example1."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|"example2"
argument_list|,
literal|"Text of example2."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_2
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|"example3"
argument_list|,
literal|"Text of example3."
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Batch
argument_list|<
name|String
argument_list|>
name|examples
init|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_2
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Text of example2."
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_3
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Text of example1."
argument_list|,
literal|"Text of example2."
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getNegativeExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Text of example3."
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
comment|// Test example update by adding topic3 to example1. The results of the previous query should remain
comment|// the same (inplace update).
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|"example1"
argument_list|,
literal|"Text of example1."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_3
argument_list|)
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_3
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|examples
operator|.
name|items
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Text of example1."
argument_list|,
literal|"Text of example2."
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchingPositiveExamples
parameter_list|()
throws|throws
name|ConfigurationException
throws|,
name|TrainingSetException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expectedCollectedText
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|collectedText
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|28
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
literal|"Text of example"
operator|+
name|i
operator|+
literal|"."
decl_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|"example-"
operator|+
name|i
argument_list|,
name|text
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCollectedText
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|trainingSet
operator|.
name|setBatchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Batch
argument_list|<
name|String
argument_list|>
name|examples
init|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_2
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|collectedText
operator|.
name|addAll
argument_list|(
name|examples
operator|.
name|items
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_2
argument_list|)
argument_list|,
name|examples
operator|.
name|nextOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|collectedText
operator|.
name|addAll
argument_list|(
name|examples
operator|.
name|items
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_2
argument_list|)
argument_list|,
name|examples
operator|.
name|nextOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|collectedText
operator|.
name|addAll
argument_list|(
name|examples
operator|.
name|items
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCollectedText
argument_list|,
name|collectedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchingNegativeExamplesAndAutoId
parameter_list|()
throws|throws
name|ConfigurationException
throws|,
name|TrainingSetException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expectedCollectedText
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|collectedText
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
literal|"Text of example"
operator|+
name|i
operator|+
literal|"."
decl_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
name|text
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCollectedText
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|trainingSet
operator|.
name|setBatchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Batch
argument_list|<
name|String
argument_list|>
name|examples
init|=
name|trainingSet
operator|.
name|getNegativeExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_2
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|collectedText
operator|.
name|addAll
argument_list|(
name|examples
operator|.
name|items
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|examples
operator|=
name|trainingSet
operator|.
name|getNegativeExamples
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_2
argument_list|)
argument_list|,
name|examples
operator|.
name|nextOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|examples
operator|.
name|items
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|collectedText
operator|.
name|addAll
argument_list|(
name|examples
operator|.
name|items
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|examples
operator|.
name|hasMore
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCollectedText
argument_list|,
name|collectedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|date0
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|updatedTopics
init|=
name|trainingSet
operator|.
name|getUpdatedTopics
argument_list|(
name|date0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|updatedTopics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|"example1"
argument_list|,
literal|"Text of example1."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|"example2"
argument_list|,
literal|"Text of example2."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPIC_1
argument_list|,
name|TOPIC_2
argument_list|)
argument_list|)
expr_stmt|;
name|updatedTopics
operator|=
name|trainingSet
operator|.
name|getUpdatedTopics
argument_list|(
name|date0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|updatedTopics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|updatedTopics
operator|.
name|contains
argument_list|(
name|TOPIC_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|updatedTopics
operator|.
name|contains
argument_list|(
name|TOPIC_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the new registration look as compared to a new date:
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Calendar
name|date1
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|updatedTopics
operator|=
name|trainingSet
operator|.
name|getUpdatedTopics
argument_list|(
name|date1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|updatedTopics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultConfigParams
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|SOLR_CORE
argument_list|,
name|trainingsetSolrServer
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|TRAINING_SET_ID
argument_list|,
literal|"test-training-set"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|EXAMPLE_ID_FIELD
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|EXAMPLE_TEXT_FIELD
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|TOPICS_URI_FIELD
argument_list|,
literal|"topics"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|MODIFICATION_DATE_FIELD
argument_list|,
literal|"modification_dt"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

