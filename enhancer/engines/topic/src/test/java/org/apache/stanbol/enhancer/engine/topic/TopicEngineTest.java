begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|topic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|StreamQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ClassificationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ClassifierException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|EmbeddedSolrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TopicSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
operator|.
name|SolrTrainingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
operator|.
name|TrainingSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TopicEngineTest
extends|extends
name|EmbeddedSolrHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopicEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|EmbeddedSolrServer
name|classifierSolrServer
decl_stmt|;
name|EmbeddedSolrServer
name|trainingSetSolrServer
decl_stmt|;
name|File
name|solrHome
decl_stmt|;
name|SolrTrainingSet
name|trainingSet
decl_stmt|;
name|TopicClassificationEngine
name|classifier
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|solrHome
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"topicEngineTest_"
argument_list|,
literal|"_solr_cores"
argument_list|)
expr_stmt|;
name|solrHome
operator|.
name|delete
argument_list|()
expr_stmt|;
name|solrHome
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|classifierSolrServer
operator|=
name|makeEmbeddedSolrServer
argument_list|(
name|solrHome
argument_list|,
literal|"classifierserver"
argument_list|,
literal|"classifier"
argument_list|,
literal|"classifier"
argument_list|)
expr_stmt|;
name|classifier
operator|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|getDefaultClassifierConfigParams
argument_list|()
argument_list|)
expr_stmt|;
name|trainingSetSolrServer
operator|=
name|makeEmbeddedSolrServer
argument_list|(
name|solrHome
argument_list|,
literal|"trainingsetserver"
argument_list|,
literal|"trainingset"
argument_list|,
literal|"trainingset"
argument_list|)
expr_stmt|;
name|trainingSet
operator|=
operator|new
name|SolrTrainingSet
argument_list|()
expr_stmt|;
name|trainingSet
operator|.
name|configure
argument_list|(
name|getDefaultTrainingSetConfigParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanupEmbeddedSolrServer
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
name|solrHome
operator|=
literal|null
expr_stmt|;
name|classifierSolrServer
operator|=
literal|null
expr_stmt|;
name|trainingSetSolrServer
operator|=
literal|null
expr_stmt|;
name|trainingSet
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|loadSampleTopicsFromTSV
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|assertNotNull
argument_list|(
name|classifierSolrServer
argument_list|)
expr_stmt|;
name|String
name|topicSnippetsPath
init|=
literal|"/topics_abstracts_snippet.tsv"
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|topicSnippetsPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find test resource: "
operator|+
name|topicSnippetsPath
argument_list|,
name|is
argument_list|)
expr_stmt|;
comment|// Build a query for the CSV importer
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQueryType
argument_list|(
literal|"/update/csv"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"commit"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"separator"
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"headers"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"fieldnames"
argument_list|,
literal|"topic,popularity,broader,text"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|STREAM_CONTENTTYPE
argument_list|,
literal|"text/plan;charset=utf-8"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|STREAM_BODY
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Upload an index
name|QueryResponse
name|response
init|=
operator|new
name|StreamQueryRequest
argument_list|(
name|query
argument_list|)
operator|.
name|process
argument_list|(
name|classifierSolrServer
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Indexed test topics in %dms"
argument_list|,
name|response
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngineConfiguation
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getDefaultClassifierConfigParams
argument_list|()
decl_stmt|;
name|TopicClassificationEngine
name|classifier
init|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|engineId
argument_list|,
literal|"test-engine"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|getActiveSolrServer
argument_list|()
argument_list|,
name|classifierSolrServer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|conceptUriField
argument_list|,
literal|"concept"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|similarityField
argument_list|,
literal|"classifier_features"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|acceptedLanguages
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// check some required attributes
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configWithMissingTopicField
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|configWithMissingTopicField
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|configWithMissingTopicField
operator|.
name|remove
argument_list|(
name|TopicClassificationEngine
operator|.
name|CONCEPT_URI_FIELD
argument_list|)
expr_stmt|;
try|try
block|{
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|configWithMissingTopicField
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have raised a ConfigurationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configWithMissingEngineId
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|configWithMissingEngineId
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|configWithMissingEngineId
operator|.
name|remove
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENGINE_ID
argument_list|)
expr_stmt|;
try|try
block|{
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|configWithMissingEngineId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have raised a ConfigurationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{}
comment|// check accept language optional param
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configWithAcceptLangage
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|configWithAcceptLangage
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|configWithAcceptLangage
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|LANGUAGES
argument_list|,
literal|"en, fr"
argument_list|)
expr_stmt|;
name|classifier
operator|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|configWithAcceptLangage
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|acceptedLanguages
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"fr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProgrammaticThesaurusConstruction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register the roots of the taxonomy
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|classifier
operator|.
name|getRootConcepts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register some non root nodes
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|,
literal|"http://example.com/topics/root2"
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"http://example.com/topics/node2"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"http://example.com/topics/node3"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|,
literal|"http://example.com/topics/node2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the root where not impacted
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|classifier
operator|.
name|getRootConcepts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the other nodes have the same broader topics as at creation time
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"http://example.com/topics/node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the induced narrower relationships
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerConcepts
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerConcepts
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerConcepts
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerConcepts
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerConcepts
argument_list|(
literal|"http://example.com/topics/node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getNarrowerConcepts
argument_list|(
literal|"http://example.com/topics/node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyIndexTopicClassification
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicClassificationEngine
name|engine
init|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|getDefaultClassifierConfigParams
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
name|engine
operator|.
name|suggestTopics
argument_list|(
literal|"This is a test."
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|suggestedTopics
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|suggestedTopics
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// @Test
comment|// to get updated to work with the new Solr schema + move the CSV import directly to the classifier or
comment|// training set API
specifier|public
name|void
name|testTopicClassification
parameter_list|()
throws|throws
name|Exception
block|{
name|loadSampleTopicsFromTSV
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"The Man Who Shot Liberty Valance is a 1962"
operator|+
literal|" American Western film directed by John Ford,"
operator|+
literal|" narrated by Charlton Heston and starring James"
operator|+
literal|" Stewart, John Wayne and Vivien Leigh."
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|suggestedTopics
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|suggestedTopics
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TopicSuggestion
name|bestSuggestion
init|=
name|suggestedTopics
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bestSuggestion
operator|.
name|conceptUri
argument_list|,
literal|"Category:American_films"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrainClassifierFromExamples
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mini taxonomy for news articles
name|String
index|[]
name|business
init|=
block|{
literal|"urn:topics/business"
block|,
literal|"http://dbpedia.org/resource/Business"
block|}
decl_stmt|;
name|String
index|[]
name|technology
init|=
block|{
literal|"urn:topics/technology"
block|,
literal|"http://dbpedia.org/resource/Technology"
block|}
decl_stmt|;
name|String
name|apple
init|=
literal|"urn:topics/apple"
decl_stmt|;
name|String
name|sport
init|=
literal|"urn:topics/sport"
decl_stmt|;
name|String
name|football
init|=
literal|"urn:topics/football"
decl_stmt|;
name|String
name|worldcup
init|=
literal|"urn:topics/worldcup"
decl_stmt|;
name|String
name|music
init|=
literal|"urn:topics/music"
decl_stmt|;
name|String
name|law
init|=
literal|"urn:topics/law"
decl_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|business
index|[
literal|0
index|]
argument_list|,
name|business
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|technology
index|[
literal|0
index|]
argument_list|,
name|technology
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|sport
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|music
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|apple
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|business
index|[
literal|0
index|]
argument_list|,
name|technology
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|football
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|sport
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|worldcup
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|)
argument_list|)
expr_stmt|;
comment|// train the classifier on an empty dataset
name|classifier
operator|.
name|setTrainingSet
argument_list|(
name|trainingSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// the model is updated but does not predict anything
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestions
init|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"I like the sound of vuvuzula in the morning!"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|suggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that updating the model incrementally without changing the dataset won't change anything.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets register some examples including stop words as well to limit statistical artifacts cause by
comment|// the small size of the training set.
name|String
name|STOP_WORDS
init|=
literal|" the a is are be in at "
decl_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Money, money, money is the root of all evil."
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|business
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"VC invested more money in tech startups in 2011."
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|business
index|[
literal|0
index|]
argument_list|,
name|technology
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Apple's iPad is a small handheld computer with a touch screen UI"
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|apple
argument_list|,
name|technology
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Apple sold the iPad at a very high price"
operator|+
literal|" and made record profits."
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|apple
argument_list|,
name|business
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Manchester United won 3-2 against FC Barcelona."
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"The 2012 Football Worldcup takes place in Brazil."
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|,
name|worldcup
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Vuvuzela made the soundtrack of the"
operator|+
literal|" football worldcup of 2010 in South Africa."
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|,
name|worldcup
argument_list|,
name|music
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Amon Tobin will be live in Paris soon."
operator|+
name|STOP_WORDS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|music
argument_list|)
argument_list|)
expr_stmt|;
comment|// retrain the model: all topics are recomputed
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// test the trained classifier
name|suggestions
operator|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"I like the sound of vuvuzula in the morning!"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
operator|>=
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|worldcup
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|music
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|football
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sport
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
comment|// check that the scores are decreasing:
name|assertTrue
argument_list|(
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|score
operator|>=
name|suggestions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|score
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suggestions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|score
operator|>=
name|suggestions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|score
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suggestions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|score
operator|>=
name|suggestions
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|score
argument_list|)
expr_stmt|;
name|suggestions
operator|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"Apple is no longer a startup."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|apple
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryTopicUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|business
index|[
literal|0
index|]
argument_list|,
name|technology
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|broader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|technology
index|[
literal|0
index|]
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|technology
index|[
literal|1
index|]
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryTopicUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|business
index|[
literal|0
index|]
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|business
index|[
literal|1
index|]
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|primaryTopicUri
argument_list|)
expr_stmt|;
name|suggestions
operator|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"You can watch the worldcup on your iPad."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|apple
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|worldcup
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
comment|// test incremental update of a single root node
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Dubstep is a broken beat musical style as are Hip-Hop,"
operator|+
literal|" Dancehall or Drum& Bass"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|music
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"Glory box is best mixed as dubstep."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|music
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|conceptUri
argument_list|)
expr_stmt|;
comment|// test incremental update of a leaf node (the parent topic needs re-indexing too)
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"The Brazil team has won the cup so many times."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|worldcup
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// it's always possible to rebuild all models from scratch
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// it's also possible to define new topics on an existing model and leverage incremental indexing for
comment|// them as long as there are effectively registered on the classifier
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Under Belgian law, judges and prosecutors are judicial officers with equal rank and pay."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|law
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Prosecutors are typically lawyers who possess a law degree,"
operator|+
literal|" and are recognized as legal professionals by the court"
operator|+
literal|" in which they intend to represent the state."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|law
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|law
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// registering new subtopics invalidate the models of the parent as well
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"urn:topics/sportsmafia"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|,
name|business
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerformanceEstimates
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassificationReport
name|performanceEstimates
decl_stmt|;
comment|// no registered topic
try|try
block|{
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:t/001"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have raised ClassifierException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassifierException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// register some topics
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"urn:t/001"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
literal|"urn:t/002"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:t/001"
argument_list|)
argument_list|)
expr_stmt|;
name|performanceEstimates
operator|=
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:t/002"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|performanceEstimates
operator|.
name|uptodate
argument_list|)
expr_stmt|;
comment|// update the performance metadata manually
name|classifier
operator|.
name|updatePerformanceMetadata
argument_list|(
literal|"urn:t/002"
argument_list|,
literal|0.76f
argument_list|,
literal|0.60f
argument_list|,
literal|34
argument_list|,
literal|32
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ex14"
argument_list|,
literal|"ex78"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ex34"
argument_list|,
literal|"ex23"
argument_list|,
literal|"ex89"
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|getActiveSolrServer
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|performanceEstimates
operator|=
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:t/002"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|performanceEstimates
operator|.
name|uptodate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.76f
argument_list|,
name|performanceEstimates
operator|.
name|precision
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.60f
argument_list|,
name|performanceEstimates
operator|.
name|recall
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.67f
argument_list|,
name|performanceEstimates
operator|.
name|f1
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|performanceEstimates
operator|.
name|positiveSupport
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32
argument_list|,
name|performanceEstimates
operator|.
name|negativeSupport
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|classifier
operator|.
name|getBroaderConcepts
argument_list|(
literal|"urn:t/002"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"urn:t/001"
argument_list|)
argument_list|)
expr_stmt|;
comment|// accumulate other folds statistics and compute means of statistics
name|classifier
operator|.
name|updatePerformanceMetadata
argument_list|(
literal|"urn:t/002"
argument_list|,
literal|0.79f
argument_list|,
literal|0.63f
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ex1"
argument_list|,
literal|"ex5"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ex3"
argument_list|,
literal|"ex10"
argument_list|,
literal|"ex11"
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|getActiveSolrServer
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|performanceEstimates
operator|=
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:t/002"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|performanceEstimates
operator|.
name|uptodate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.775f
argument_list|,
name|performanceEstimates
operator|.
name|precision
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.615f
argument_list|,
name|performanceEstimates
operator|.
name|recall
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.695f
argument_list|,
name|performanceEstimates
operator|.
name|f1
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|44
argument_list|,
name|performanceEstimates
operator|.
name|positiveSupport
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|performanceEstimates
operator|.
name|negativeSupport
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCrossValidation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// seed a pseudo random number generator for reproducible tests
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClassificationReport
name|performanceEstimates
decl_stmt|;
comment|// build an artificial data set used for training models and evaluation
name|int
name|numberOfTopics
init|=
literal|10
decl_stmt|;
name|int
name|numberOfDocuments
init|=
literal|100
decl_stmt|;
name|int
name|vocabSizeMin
init|=
literal|20
decl_stmt|;
name|int
name|vocabSizeMax
init|=
literal|30
decl_stmt|;
name|initArtificialTrainingSet
argument_list|(
name|numberOfTopics
argument_list|,
name|numberOfDocuments
argument_list|,
name|vocabSizeMin
argument_list|,
name|vocabSizeMax
argument_list|,
name|rng
argument_list|)
expr_stmt|;
comment|// by default the reports are not computed
name|performanceEstimates
operator|=
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:t/001"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|performanceEstimates
operator|.
name|uptodate
argument_list|)
expr_stmt|;
name|performanceEstimates
operator|=
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:t/002"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|performanceEstimates
operator|.
name|uptodate
argument_list|)
expr_stmt|;
name|performanceEstimates
operator|=
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:t/003"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|performanceEstimates
operator|.
name|uptodate
argument_list|)
expr_stmt|;
try|try
block|{
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
literal|"urn:doesnotexist"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have raised a ClassifierException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassifierException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// launch an evaluation of the classifier according to the current state of the training set
name|assertEquals
argument_list|(
name|numberOfTopics
argument_list|,
name|classifier
operator|.
name|updatePerformanceEstimates
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfTopics
condition|;
name|i
operator|++
control|)
block|{
name|String
name|topic
init|=
name|String
operator|.
name|format
argument_list|(
literal|"urn:t/%03d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|performanceEstimates
operator|=
name|classifier
operator|.
name|getPerformanceEstimates
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|performanceEstimates
operator|.
name|uptodate
argument_list|)
expr_stmt|;
name|assertGreater
argument_list|(
name|performanceEstimates
operator|.
name|precision
argument_list|,
literal|0.45f
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|performanceEstimates
operator|.
name|falsePositiveExampleIds
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|performanceEstimates
operator|.
name|falseNegativeExampleIds
argument_list|)
expr_stmt|;
if|if
condition|(
name|performanceEstimates
operator|.
name|precision
operator|<
literal|1
condition|)
block|{
name|assertFalse
argument_list|(
name|performanceEstimates
operator|.
name|falsePositiveExampleIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|performanceEstimates
operator|.
name|recall
operator|<
literal|1
condition|)
block|{
name|assertFalse
argument_list|(
name|performanceEstimates
operator|.
name|falseNegativeExampleIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertGreater
argument_list|(
name|performanceEstimates
operator|.
name|recall
argument_list|,
literal|0.45f
argument_list|)
expr_stmt|;
name|assertGreater
argument_list|(
name|performanceEstimates
operator|.
name|f1
argument_list|,
literal|0.55f
argument_list|)
expr_stmt|;
comment|// very small support, hence the estimates are unstable, hence we set low min expectations, but we
comment|// need this test to run reasonably fast...
name|assertGreater
argument_list|(
name|performanceEstimates
operator|.
name|positiveSupport
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertGreater
argument_list|(
name|performanceEstimates
operator|.
name|negativeSupport
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|performanceEstimates
operator|.
name|evaluationDate
argument_list|)
expr_stmt|;
block|}
comment|// TODO: test model invalidation by registering a sub topic manually
block|}
specifier|protected
name|void
name|assertGreater
parameter_list|(
name|float
name|large
parameter_list|,
name|float
name|small
parameter_list|)
block|{
if|if
condition|(
name|small
operator|>
name|large
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected %f to be greater than %f."
argument_list|,
name|large
argument_list|,
name|small
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|initArtificialTrainingSet
parameter_list|(
name|int
name|numberOfTopics
parameter_list|,
name|int
name|numberOfDocuments
parameter_list|,
name|int
name|vocabSizeMin
parameter_list|,
name|int
name|vocabSizeMax
parameter_list|,
name|Random
name|rng
parameter_list|)
throws|throws
name|ClassifierException
throws|,
name|TrainingSetException
block|{
comment|// define some artificial topics and register them to the classifier
name|String
index|[]
name|stopWords
init|=
name|randomVocabulary
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
name|rng
argument_list|)
decl_stmt|;
name|String
index|[]
name|topics
init|=
operator|new
name|String
index|[
name|numberOfTopics
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|vocabularies
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfTopics
condition|;
name|i
operator|++
control|)
block|{
name|String
name|topic
init|=
name|String
operator|.
name|format
argument_list|(
literal|"urn:t/%03d"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|topics
index|[
name|i
index|]
operator|=
name|topic
expr_stmt|;
name|classifier
operator|.
name|addConcept
argument_list|(
name|topic
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
index|[]
name|terms
init|=
name|randomVocabulary
argument_list|(
name|i
argument_list|,
name|vocabSizeMin
argument_list|,
name|vocabSizeMax
argument_list|,
name|rng
argument_list|)
decl_stmt|;
name|vocabularies
operator|.
name|put
argument_list|(
name|topic
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
name|classifier
operator|.
name|setTrainingSet
argument_list|(
name|trainingSet
argument_list|)
expr_stmt|;
comment|// build a random data where each example has a couple of dominating topics and other words
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfDocuments
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|documentTerms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// add terms from some non-dominant topics that are used as classification target
name|int
name|numberOfDominantTopics
init|=
name|rng
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// between 1 and 3 topics
name|List
argument_list|<
name|String
argument_list|>
name|documentTopics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfDominantTopics
condition|;
name|j
operator|++
control|)
block|{
name|String
name|topic
init|=
name|randomTopicAndTerms
argument_list|(
name|topics
argument_list|,
name|vocabularies
argument_list|,
name|documentTerms
argument_list|,
literal|100
argument_list|,
literal|150
argument_list|,
name|rng
argument_list|)
decl_stmt|;
name|documentTopics
operator|.
name|add
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
comment|// add terms from some non-dominant topics
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|randomTopicAndTerms
argument_list|(
name|topics
argument_list|,
name|vocabularies
argument_list|,
name|documentTerms
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|,
name|rng
argument_list|)
expr_stmt|;
block|}
comment|// add some non discriminative terms not linked to any topic
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|documentTerms
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|stopWords
index|[
name|rng
operator|.
name|nextInt
argument_list|(
name|stopWords
operator|.
name|length
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// register the generated example in the training set
name|String
name|text
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|documentTerms
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"example_%03d"
argument_list|,
name|i
argument_list|)
argument_list|,
name|text
argument_list|,
name|documentTopics
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
index|[]
name|randomVocabulary
parameter_list|(
name|int
name|topicIndex
parameter_list|,
name|int
name|vocabSizeMin
parameter_list|,
name|int
name|vocabSizeMax
parameter_list|,
name|Random
name|rng
parameter_list|)
block|{
name|int
name|vocSize
init|=
name|rng
operator|.
name|nextInt
argument_list|(
name|vocabSizeMax
operator|+
literal|1
operator|-
name|vocabSizeMin
argument_list|)
operator|+
name|vocabSizeMin
decl_stmt|;
name|String
index|[]
name|terms
init|=
operator|new
name|String
index|[
name|vocSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|vocSize
condition|;
name|j
operator|++
control|)
block|{
comment|// define some artificial vocabulary for each topic to automatically generate random examples
comment|// with some topic structure
name|terms
index|[
name|j
index|]
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"term_%03d_t%03d"
argument_list|,
name|j
argument_list|,
name|topicIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
specifier|protected
name|String
name|randomTopicAndTerms
parameter_list|(
name|String
index|[]
name|topics
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|vocabularies
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|documentTerms
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|Random
name|rng
parameter_list|)
block|{
name|String
name|topic
init|=
name|topics
index|[
name|rng
operator|.
name|nextInt
argument_list|(
name|topics
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|String
index|[]
name|terms
init|=
name|vocabularies
operator|.
name|get
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|int
name|numberOfDominantTopicTerm
init|=
name|rng
operator|.
name|nextInt
argument_list|(
name|max
operator|+
literal|1
operator|-
name|min
argument_list|)
operator|+
name|min
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfDominantTopicTerm
condition|;
name|k
operator|++
control|)
block|{
name|documentTerms
operator|.
name|add
argument_list|(
name|terms
index|[
name|rng
operator|.
name|nextInt
argument_list|(
name|terms
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|topic
return|;
block|}
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultClassifierConfigParams
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENGINE_ID
argument_list|,
literal|"test-engine"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENTRY_ID_FIELD
argument_list|,
literal|"entry_id"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENTRY_TYPE_FIELD
argument_list|,
literal|"entry_type"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|MODEL_ENTRY_ID_FIELD
argument_list|,
literal|"model_entry_id"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|SOLR_CORE
argument_list|,
name|classifierSolrServer
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|CONCEPT_URI_FIELD
argument_list|,
literal|"concept"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|PRIMARY_TOPIC_URI_FIELD
argument_list|,
literal|"primary_topic"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|SIMILARTITY_FIELD
argument_list|,
literal|"classifier_features"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|BROADER_FIELD
argument_list|,
literal|"broader"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|MODEL_UPDATE_DATE_FIELD
argument_list|,
literal|"last_update_dt"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|MODEL_EVALUATION_DATE_FIELD
argument_list|,
literal|"last_evaluation_dt"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|PRECISION_FIELD
argument_list|,
literal|"precision"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|RECALL_FIELD
argument_list|,
literal|"recall"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|POSITIVE_SUPPORT_FIELD
argument_list|,
literal|"positive_support"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|NEGATIVE_SUPPORT_FIELD
argument_list|,
literal|"negative_support"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|FALSE_POSITIVES_FIELD
argument_list|,
literal|"false_positives"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|FALSE_NEGATIVES_FIELD
argument_list|,
literal|"false_negatives"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultTrainingSetConfigParams
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|SOLR_CORE
argument_list|,
name|trainingSetSolrServer
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|TRAINING_SET_ID
argument_list|,
literal|"test-training-set"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|EXAMPLE_ID_FIELD
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|EXAMPLE_TEXT_FIELD
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|TOPICS_URI_FIELD
argument_list|,
literal|"topics"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|MODIFICATION_DATE_FIELD
argument_list|,
literal|"modification_dt"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

