begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|topic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|StreamQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|SolrTrainingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TopicSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TopicEngineTest
extends|extends
name|BaseTestWithSolrCore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopicEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|EmbeddedSolrServer
name|classifierSolrServer
decl_stmt|;
name|EmbeddedSolrServer
name|trainingSetSolrServer
decl_stmt|;
name|File
name|solrHome
decl_stmt|;
name|SolrTrainingSet
name|trainingSet
decl_stmt|;
name|TopicClassificationEngine
name|classifier
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|solrHome
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"topicEngineTest_"
argument_list|,
literal|"_solr_cores"
argument_list|)
expr_stmt|;
name|solrHome
operator|.
name|delete
argument_list|()
expr_stmt|;
name|solrHome
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|classifierSolrServer
operator|=
name|makeEmptyEmbeddedSolrServer
argument_list|(
name|solrHome
argument_list|,
literal|"classifierserver"
argument_list|,
literal|"classifier"
argument_list|)
expr_stmt|;
name|classifier
operator|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|getDefaultClassifierConfigParams
argument_list|()
argument_list|)
expr_stmt|;
name|trainingSetSolrServer
operator|=
name|makeEmptyEmbeddedSolrServer
argument_list|(
name|solrHome
argument_list|,
literal|"trainingsetserver"
argument_list|,
literal|"trainingset"
argument_list|)
expr_stmt|;
name|trainingSet
operator|=
operator|new
name|SolrTrainingSet
argument_list|()
expr_stmt|;
name|trainingSet
operator|.
name|configure
argument_list|(
name|getDefaultTrainingSetConfigParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanupEmbeddedSolrServer
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
name|solrHome
operator|=
literal|null
expr_stmt|;
name|classifierSolrServer
operator|=
literal|null
expr_stmt|;
name|trainingSetSolrServer
operator|=
literal|null
expr_stmt|;
name|trainingSet
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|loadSampleTopicsFromTSV
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|assertNotNull
argument_list|(
name|classifierSolrServer
argument_list|)
expr_stmt|;
name|String
name|topicSnippetsPath
init|=
literal|"/classifier/topics_abstracts_snippet.tsv"
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|topicSnippetsPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find test resource: "
operator|+
name|topicSnippetsPath
argument_list|,
name|is
argument_list|)
expr_stmt|;
comment|// Build a query for the CSV importer
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQueryType
argument_list|(
literal|"/update/csv"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"commit"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"separator"
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"headers"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"fieldnames"
argument_list|,
literal|"topic,popularity,paths,text"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|STREAM_CONTENTTYPE
argument_list|,
literal|"text/plan;charset=utf-8"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|STREAM_BODY
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Upload an index
name|QueryResponse
name|response
init|=
operator|new
name|StreamQueryRequest
argument_list|(
name|query
argument_list|)
operator|.
name|process
argument_list|(
name|classifierSolrServer
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Indexed test topics in %dms"
argument_list|,
name|response
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngineConfiguation
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getDefaultClassifierConfigParams
argument_list|()
decl_stmt|;
name|TopicClassificationEngine
name|classifier
init|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|engineId
argument_list|,
literal|"test-engine"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|getActiveSolrServer
argument_list|()
argument_list|,
name|classifierSolrServer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|topicUriField
argument_list|,
literal|"topic"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|similarityField
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|acceptedLanguages
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// check some required attributes
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configWithMissingTopicField
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|configWithMissingTopicField
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|configWithMissingTopicField
operator|.
name|remove
argument_list|(
name|TopicClassificationEngine
operator|.
name|TOPIC_URI_FIELD
argument_list|)
expr_stmt|;
try|try
block|{
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|configWithMissingTopicField
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have raised a ConfigurationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configWithMissingEngineId
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|configWithMissingEngineId
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|configWithMissingEngineId
operator|.
name|remove
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENGINE_ID
argument_list|)
expr_stmt|;
try|try
block|{
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|configWithMissingEngineId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have raised a ConfigurationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{}
comment|// check accept language optional param
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configWithAcceptLangage
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|configWithAcceptLangage
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|configWithAcceptLangage
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|LANGUAGES
argument_list|,
literal|"en, fr"
argument_list|)
expr_stmt|;
name|classifier
operator|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|configWithAcceptLangage
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|classifier
operator|.
name|acceptedLanguages
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"fr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProgrammaticThesaurusConstruction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register the roots of the taxonomy
name|classifier
operator|.
name|addTopic
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|classifier
operator|.
name|getTopicRoots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register some non root nodes
name|classifier
operator|.
name|addTopic
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|,
literal|"http://example.com/topics/root2"
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
literal|"http://example.com/topics/node2"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
literal|"http://example.com/topics/node3"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|,
literal|"http://example.com/topics/node2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the root where not impacted
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|classifier
operator|.
name|getTopicRoots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the other nodes have the same broader topics as at creation time
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|classifier
operator|.
name|getBroaderTopics
argument_list|(
literal|"http://example.com/topics/node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the induced narrower relationships
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerTopics
argument_list|(
literal|"http://example.com/topics/root1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerTopics
argument_list|(
literal|"http://example.com/topics/root2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerTopics
argument_list|(
literal|"http://example.com/topics/root3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerTopics
argument_list|(
literal|"http://example.com/topics/node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classifier
operator|.
name|getNarrowerTopics
argument_list|(
literal|"http://example.com/topics/node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|getNarrowerTopics
argument_list|(
literal|"http://example.com/topics/node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyIndexTopicClassification
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicClassificationEngine
name|engine
init|=
name|TopicClassificationEngine
operator|.
name|fromParameters
argument_list|(
name|getDefaultClassifierConfigParams
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
name|engine
operator|.
name|suggestTopics
argument_list|(
literal|"This is a test."
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|suggestedTopics
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|suggestedTopics
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTopicClassification
parameter_list|()
throws|throws
name|Exception
block|{
name|loadSampleTopicsFromTSV
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"The Man Who Shot Liberty Valance is a 1962"
operator|+
literal|" American Western film directed by John Ford,"
operator|+
literal|" narrated by Charlton Heston and starring James"
operator|+
literal|" Stewart, John Wayne and Vivien Leigh."
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|suggestedTopics
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|suggestedTopics
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TopicSuggestion
name|bestSuggestion
init|=
name|suggestedTopics
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bestSuggestion
operator|.
name|uri
argument_list|,
literal|"Category:American_films"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
specifier|public
name|void
name|testTrainClassifierFromExamples
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mini taxonomy for news articles
name|String
name|business
init|=
literal|"urn:topics/business"
decl_stmt|;
name|String
name|technology
init|=
literal|"urn:topics/technology"
decl_stmt|;
name|String
name|apple
init|=
literal|"urn:topics/apple"
decl_stmt|;
name|String
name|sport
init|=
literal|"urn:topics/sport"
decl_stmt|;
name|String
name|football
init|=
literal|"urn:topics/football"
decl_stmt|;
name|String
name|wordcup
init|=
literal|"urn:topics/wordcup"
decl_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
name|business
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
name|technology
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
name|sport
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
name|apple
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|business
argument_list|,
name|technology
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
name|football
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|sport
argument_list|)
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|addTopic
argument_list|(
name|wordcup
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|)
argument_list|)
expr_stmt|;
comment|// train the classifier on an empty dataset
name|classifier
operator|.
name|setTrainingSet
argument_list|(
name|trainingSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// the model is updated but does not predict anything
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestions
init|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"I like the sound of vuvuzula in the morning!"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|suggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// further update of the model leave do not change any topic
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets register some examples
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Money, money, money is the root of all evil."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|business
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"VC invested more money in tech startups in 2011."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|business
argument_list|,
name|technology
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Apple sold many iPads at a very high price"
operator|+
literal|" and made record profits."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|apple
argument_list|,
name|business
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Manchester United won 3-2 against FC Barcelona."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|)
argument_list|)
expr_stmt|;
name|trainingSet
operator|.
name|registerExample
argument_list|(
literal|null
argument_list|,
literal|"Vuvuzela made the soundtrack of the"
operator|+
literal|" football wordcup of 2010 in South Africa."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|football
argument_list|,
name|wordcup
argument_list|)
argument_list|)
expr_stmt|;
comment|// retrain the model: all 6 topics are impacted by the new examples
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|classifier
operator|.
name|updateModel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
literal|"I like the sound of vuvuzula in the morning!"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|suggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|wordcup
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|uri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|football
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|uri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sport
argument_list|,
name|suggestions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultClassifierConfigParams
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENGINE_ID
argument_list|,
literal|"test-engine"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|SOLR_CORE
argument_list|,
name|classifierSolrServer
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|TOPIC_URI_FIELD
argument_list|,
literal|"topic"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|SIMILARTITY_FIELD
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|BROADER_FIELD
argument_list|,
literal|"broader"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultTrainingSetConfigParams
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|SOLR_CORE
argument_list|,
name|trainingSetSolrServer
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|TRAINING_SET_ID
argument_list|,
literal|"test-training-set"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|EXAMPLE_ID_FIELD
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|EXAMPLE_TEXT_FIELD
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|TOPICS_URI_FIELD
argument_list|,
literal|"topics"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|SolrTrainingSet
operator|.
name|MODIFICATION_DATE_FIELD
argument_list|,
literal|"modification_dt"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

