begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|topic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|NIE_PLAINTEXTCONTENT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MoreLikeThisParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|StreamQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ClassifierException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ConfiguredSolrCoreTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TopicClassifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TopicSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TrainingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TrainingSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Enhancement Engine that provides the ability to assign a text document to a set of topics indexed in a  * dedicated Solr core. The assignment logic comes from terms frequencies match of the text of the document to  * categorize with the text indexed for each topic.  *   * The solr server is expected to be configured with the MoreLikeThisHandler and the matching fields from the  * engine configuration.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|ENGINE_ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|ORDER
argument_list|,
name|intValue
operator|=
literal|100
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|SOLR_CORE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|LANGUAGES
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|SIMILARTITY_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|TOPIC_URI_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|BROADER_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|MATERIALIZED_PATH_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|MODEL_UPDATE_DATE_FIELD
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|TopicClassificationEngine
extends|extends
name|ConfiguredSolrCoreTracker
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
implements|,
name|TopicClassifier
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENGINE_ID
init|=
literal|"org.apache.stanbol.enhancer.engine.id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_CORE
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.solrCore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LANGUAGES
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.languages"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ORDER
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.order"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SIMILARTITY_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.similarityField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_URI_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.uriField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BROADER_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.broaderField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MATERIALIZED_PATH_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.materializedPathField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_UPDATE_DATE_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.modelUpdateField"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopicClassificationEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|engineId
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|acceptedLanguages
decl_stmt|;
specifier|protected
name|Integer
name|order
init|=
name|ORDERING_EXTRACTION_ENHANCEMENT
decl_stmt|;
specifier|protected
name|String
name|similarityField
decl_stmt|;
specifier|protected
name|String
name|topicUriField
decl_stmt|;
specifier|protected
name|String
name|modelUpdateDateField
decl_stmt|;
specifier|protected
name|String
name|broaderField
decl_stmt|;
specifier|protected
name|String
name|materializedPathField
decl_stmt|;
specifier|protected
name|int
name|numTopics
init|=
literal|10
decl_stmt|;
specifier|protected
name|TrainingSet
name|trainingSet
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|InvalidSyntaxException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|configure
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|indexTracker
operator|!=
literal|null
condition|)
block|{
name|indexTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|engineId
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|ENGINE_ID
argument_list|)
expr_stmt|;
name|similarityField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|SIMILARTITY_FIELD
argument_list|)
expr_stmt|;
name|topicUriField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|TOPIC_URI_FIELD
argument_list|)
expr_stmt|;
name|acceptedLanguages
operator|=
name|getStringListParan
argument_list|(
name|config
argument_list|,
name|LANGUAGES
argument_list|)
expr_stmt|;
name|configureSolrCore
argument_list|(
name|config
argument_list|,
name|SOLR_CORE
argument_list|)
expr_stmt|;
comment|// optional fields, can be null
name|broaderField
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|BROADER_FIELD
argument_list|)
expr_stmt|;
name|materializedPathField
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|TOPIC_URI_FIELD
argument_list|)
expr_stmt|;
name|modelUpdateDateField
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|MODEL_UPDATE_DATE_FIELD
argument_list|)
expr_stmt|;
name|Object
name|orderParamValue
init|=
name|config
operator|.
name|get
argument_list|(
name|ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderParamValue
operator|!=
literal|null
condition|)
block|{
name|order
operator|=
operator|(
name|Integer
operator|)
name|orderParamValue
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|text
init|=
name|getTextFromContentItem
argument_list|(
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|getActiveSolrServer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Solr Core '%s' is not available."
argument_list|,
name|solrCoreId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|CANNOT_ENHANCE
return|;
block|}
if|if
condition|(
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
return|return
name|ENHANCE_SYNCHRONOUS
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|text
init|=
name|getTextFromContentItem
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|topics
decl_stmt|;
try|try
block|{
name|topics
operator|=
name|suggestTopics
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassifierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|TopicSuggestion
name|topic
range|:
name|topics
control|)
block|{
name|UriRef
name|enhancement
init|=
name|EnhancementEngineHelper
operator|.
name|createEntityEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancement
argument_list|,
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|ENHANCER_TOPICANNOTATION
argument_list|)
argument_list|)
expr_stmt|;
comment|// add link to entity
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancement
argument_list|,
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
operator|new
name|UriRef
argument_list|(
name|topic
operator|.
name|uri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: make it possible to dereference and the path to the root the entities according to a
comment|// configuration parameter
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|order
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getTextFromContentItem
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|InvalidContentException
block|{
comment|// Refactor the following using an adapter.
name|String
name|text
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getMimeType
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// TODO: handle explicit charsets if any and fallback to UTF-8 if missing
name|text
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|NIE_PLAINTEXTCONTENT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|text
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|text
return|;
block|}
specifier|public
specifier|static
name|TopicClassificationEngine
name|fromParameters
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|TopicClassificationEngine
name|engine
init|=
operator|new
name|TopicClassificationEngine
argument_list|()
decl_stmt|;
name|engine
operator|.
name|configure
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
comment|// classifier API
annotation|@
name|Override
specifier|public
name|String
name|getSchemeId
parameter_list|()
block|{
return|return
name|engineId
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAcceptedLanguages
parameter_list|()
block|{
return|return
name|acceptedLanguages
return|;
block|}
specifier|public
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestTopics
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
operator|new
name|ArrayList
argument_list|<
name|TopicSuggestion
argument_list|>
argument_list|(
name|numTopics
argument_list|)
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQueryType
argument_list|(
literal|"/"
operator|+
name|MoreLikeThisParams
operator|.
name|MLT
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MATCH_INCLUDE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MIN_DOC_FREQ
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MIN_TERM_FREQ
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// TODO: find a way to parse the interesting terms and report them
comment|// for debugging / explanation in dedicated RDF data structure.
comment|// query.set(MoreLikeThisParams.INTERESTING_TERMS, "details");
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|SIMILARITY_FIELDS
argument_list|,
name|similarityField
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|STREAM_BODY
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
name|numTopics
argument_list|)
expr_stmt|;
try|try
block|{
name|StreamQueryRequest
name|request
init|=
operator|new
name|StreamQueryRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|request
operator|.
name|process
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|results
init|=
name|response
operator|.
name|getResults
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|result
range|:
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|SolrDocument
index|[
literal|0
index|]
argument_list|)
control|)
block|{
name|String
name|uri
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Solr Core '%s' is missing required field '%s'."
argument_list|,
name|solrCoreId
argument_list|,
name|topicUriField
argument_list|)
argument_list|)
throw|;
block|}
name|suggestedTopics
operator|.
name|add
argument_list|(
operator|new
name|TopicSuggestion
argument_list|(
name|uri
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"unknown handler: /mlt"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"SolrServer with id '%s' for topic engine '%s' lacks"
operator|+
literal|" configuration for the MoreLikeThisHandler"
argument_list|,
name|solrCoreId
argument_list|,
name|engineId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|suggestedTopics
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNarrowerTopics
parameter_list|(
name|String
name|broadTopicId
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|narrowerTopics
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|broaderField
operator|==
literal|null
condition|)
block|{
return|return
name|narrowerTopics
return|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
comment|// use a filter query to avoid string escaping issues with special solr chars
name|query
operator|.
name|addFilterQuery
argument_list|(
literal|"{!field f="
operator|+
name|broaderField
operator|+
literal|"}"
operator|+
name|broadTopicId
argument_list|)
expr_stmt|;
name|query
operator|.
name|addField
argument_list|(
name|topicUriField
argument_list|)
expr_stmt|;
name|query
operator|.
name|addSortField
argument_list|(
name|topicUriField
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|SolrDocument
name|result
range|:
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
control|)
block|{
name|narrowerTopics
operator|.
name|add
argument_list|(
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching narrower topics of '%s' on Solr Core '%s'."
argument_list|,
name|broadTopicId
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|narrowerTopics
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBroaderTopics
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|broaderTopics
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|broaderField
operator|==
literal|null
condition|)
block|{
return|return
name|broaderTopics
return|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
comment|// use a filter query to avoid string escaping issues with special solr chars
name|query
operator|.
name|addFilterQuery
argument_list|(
literal|"{!field f="
operator|+
name|topicUriField
operator|+
literal|"}"
operator|+
name|id
argument_list|)
expr_stmt|;
name|query
operator|.
name|addField
argument_list|(
name|broaderField
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|SolrDocument
name|result
range|:
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
control|)
block|{
comment|// there should be only one results
name|Collection
argument_list|<
name|Object
argument_list|>
name|broaderFieldValues
init|=
name|result
operator|.
name|getFieldValues
argument_list|(
name|broaderField
argument_list|)
decl_stmt|;
if|if
condition|(
name|broaderFieldValues
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Object
name|value
range|:
name|broaderFieldValues
control|)
block|{
name|broaderTopics
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching broader topics of '%s' on Solr Core '%s'."
argument_list|,
name|id
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|broaderTopics
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTopicRoots
parameter_list|()
throws|throws
name|ClassifierException
block|{
comment|// TODO: this can be very big on flat thesauri: should we enable a paging API instead?
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|rootTopics
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|broaderField
operator|!=
literal|null
condition|)
block|{
comment|// find any topic with an empty broaderField
name|query
operator|.
name|setParam
argument_list|(
literal|"q"
argument_list|,
literal|"-"
operator|+
name|broaderField
operator|+
literal|":[\"\" TO *]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// find any topic
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|SolrDocument
name|result
range|:
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
control|)
block|{
name|rootTopics
operator|.
name|add
argument_list|(
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching root topics on Solr Core '%s'."
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|rootTopics
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addTopic
parameter_list|(
name|String
name|id
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|broaderTopics
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|topicUriField
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|broaderTopics
operator|!=
literal|null
operator|&&
name|broaderField
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|broaderField
argument_list|,
name|broaderTopics
argument_list|)
expr_stmt|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|solrServer
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error adding topic with id '%s' on Solr Core '%s'"
argument_list|,
name|id
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeTopic
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|solrServer
operator|.
name|deleteByQuery
argument_list|(
name|topicUriField
operator|+
literal|":"
operator|+
name|id
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error adding topic with id '%s' on Solr Core '%s'"
argument_list|,
name|id
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUpdatable
parameter_list|()
block|{
return|return
name|trainingSet
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTrainingSet
parameter_list|(
name|TrainingSet
name|trainingSet
parameter_list|)
block|{
name|this
operator|.
name|trainingSet
operator|=
name|trainingSet
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|updateModel
parameter_list|(
name|boolean
name|incremental
parameter_list|)
throws|throws
name|TrainingSetException
block|{
name|checkTrainingSet
argument_list|()
expr_stmt|;
comment|// TODO:
comment|// perform a first query to iterate over all the registered topics sorted by id (to allow for paging)
comment|// for each topic find the last update date of the union of the topic and it's narrower topic
return|return
literal|0
return|;
block|}
specifier|protected
name|void
name|checkTrainingSet
parameter_list|()
throws|throws
name|TrainingSetException
block|{
if|if
condition|(
name|trainingSet
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|TrainingSetException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"TopicClassificationEngine %s has no registered"
operator|+
literal|" training set hence cannot be updated."
argument_list|,
name|engineId
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

