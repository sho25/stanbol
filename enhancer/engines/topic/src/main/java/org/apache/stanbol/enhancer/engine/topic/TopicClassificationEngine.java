begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|topic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|NIE_PLAINTEXTCONTENT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|ClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MoreLikeThisParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|StreamQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|BatchProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ClassificationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ClassifierException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ConfiguredSolrCoreTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|EmbeddedSolrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TopicClassifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TopicSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|UTCTimeStamper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
operator|.
name|Example
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
operator|.
name|TrainingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
operator|.
name|TrainingSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Enhancement Engine that provides the ability to assign a text document to a set of topics indexed in a  * dedicated Solr core. The assignment logic comes from terms frequencies match of the text of the document to  * categorize with the text indexed for each topic.  *   * The solr server is expected to be configured with the MoreLikeThisHandler and the matching fields from the  * engine configuration.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|ENGINE_ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|ORDER
argument_list|,
name|intValue
operator|=
literal|100
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|SOLR_CORE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|LANGUAGES
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|SIMILARTITY_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|TOPIC_URI_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|BROADER_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|MODEL_UPDATE_DATE_FIELD
argument_list|,
name|value
operator|=
literal|"last_update_dt"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|PRECISION_FIELD
argument_list|,
name|value
operator|=
literal|"precision"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|RECALL_FIELD
argument_list|,
name|value
operator|=
literal|"recall"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|MODEL_ENTRY_ID_FIELD
argument_list|,
name|value
operator|=
literal|"model_entry_id"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|MODEL_EVALUATION_DATE_FIELD
argument_list|,
name|value
operator|=
literal|"last_evaluation_dt"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|FALSE_NEGATIVES_FIELD
argument_list|,
name|value
operator|=
literal|"false_negatives"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|FALSE_POSITIVES_FIELD
argument_list|,
name|value
operator|=
literal|"false_positives"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|POSITIVE_SUPPORT_FIELD
argument_list|,
name|value
operator|=
literal|"positive_support"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TopicClassificationEngine
operator|.
name|NEGATIVE_SUPPORT_FIELD
argument_list|,
name|value
operator|=
literal|"negative_support"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|TopicClassificationEngine
extends|extends
name|ConfiguredSolrCoreTracker
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
implements|,
name|TopicClassifier
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_ENTRY
init|=
literal|"model"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|METADATA_ENTRY
init|=
literal|"metadata"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENGINE_ID
init|=
literal|"org.apache.stanbol.enhancer.engine.id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_CORE
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.solrCore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LANGUAGES
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.languages"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ORDER
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.order"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_ID_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.entryIdField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_TYPE_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.entryTypeField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SIMILARTITY_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.similarityField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_URI_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.uriField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BROADER_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.broaderField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_UPDATE_DATE_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.modelUpdateDateField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_EVALUATION_DATE_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.modelEvaluationDateField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_ENTRY_ID_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.modelEntryIdField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRECISION_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.precisionField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RECALL_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.recallField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FALSE_POSITIVES_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.falsePositivesField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FALSE_NEGATIVES_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.falseNegativesField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POSITIVE_SUPPORT_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.positiveSupportField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NEGATIVE_SUPPORT_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.negativeSupportField"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopicClassificationEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_NON_EMPTY_FIELD
init|=
literal|"[\"\" TO *]"
decl_stmt|;
comment|// TODO: make the following bounds configurable
specifier|public
name|int
name|MAX_CHARS_PER_TOPIC
init|=
literal|100000
decl_stmt|;
specifier|public
name|Integer
name|MAX_ROOTS
init|=
literal|1000
decl_stmt|;
specifier|public
name|int
name|MAX_SUGGESTIONS
init|=
literal|5
decl_stmt|;
comment|// never suggest more than this: this is expected to be a reasonable
comment|// estimate of the number of topics occuring in each documents
specifier|protected
name|String
name|engineId
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|acceptedLanguages
decl_stmt|;
specifier|protected
name|Integer
name|order
init|=
name|ORDERING_EXTRACTION_ENHANCEMENT
decl_stmt|;
specifier|protected
name|String
name|similarityField
decl_stmt|;
specifier|protected
name|String
name|topicUriField
decl_stmt|;
specifier|protected
name|String
name|broaderField
decl_stmt|;
specifier|protected
name|String
name|modelUpdateDateField
decl_stmt|;
specifier|protected
name|String
name|modelEvaluationDateField
decl_stmt|;
specifier|protected
name|String
name|precisionField
decl_stmt|;
specifier|protected
name|String
name|recallField
decl_stmt|;
specifier|protected
name|TrainingSet
name|trainingSet
decl_stmt|;
comment|// the ENTRY_*_FIELD are basically a hack to use a single Solr core to make documents with partially
comment|// updateable stored fields: the logical document is splitted into two parts joined by entryIdField. The
comment|// first part has entryTypeField field with value METADATA_ENTRY and the second half has entryTypeField
comment|// with value MODEL_ENTRY.
comment|// The logical primary key stays the topic id.
specifier|protected
name|String
name|entryIdField
decl_stmt|;
specifier|protected
name|String
name|entryTypeField
decl_stmt|;
specifier|protected
name|String
name|modelEntryIdField
decl_stmt|;
specifier|protected
name|String
name|positiveSupportField
decl_stmt|;
specifier|protected
name|String
name|negativeSupportField
decl_stmt|;
specifier|protected
name|String
name|falsePositivesField
decl_stmt|;
specifier|protected
name|String
name|falseNegativesField
decl_stmt|;
comment|// customize the behavior of the classifier instance for model evaluation
specifier|protected
name|int
name|cvFoldIndex
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|cvFoldCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|File
name|evaluationFolder
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|InvalidSyntaxException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|configure
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|indexTracker
operator|!=
literal|null
condition|)
block|{
name|indexTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|engineId
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|ENGINE_ID
argument_list|)
expr_stmt|;
name|entryIdField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|ENTRY_ID_FIELD
argument_list|)
expr_stmt|;
name|modelEntryIdField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|MODEL_ENTRY_ID_FIELD
argument_list|)
expr_stmt|;
name|topicUriField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|TOPIC_URI_FIELD
argument_list|)
expr_stmt|;
name|entryTypeField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|ENTRY_TYPE_FIELD
argument_list|)
expr_stmt|;
name|similarityField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|SIMILARTITY_FIELD
argument_list|)
expr_stmt|;
name|acceptedLanguages
operator|=
name|getStringListParan
argument_list|(
name|config
argument_list|,
name|LANGUAGES
argument_list|)
expr_stmt|;
name|precisionField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|PRECISION_FIELD
argument_list|)
expr_stmt|;
name|recallField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|RECALL_FIELD
argument_list|)
expr_stmt|;
name|modelUpdateDateField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|MODEL_UPDATE_DATE_FIELD
argument_list|)
expr_stmt|;
name|modelEvaluationDateField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|MODEL_EVALUATION_DATE_FIELD
argument_list|)
expr_stmt|;
name|falsePositivesField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|FALSE_POSITIVES_FIELD
argument_list|)
expr_stmt|;
name|falseNegativesField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|FALSE_NEGATIVES_FIELD
argument_list|)
expr_stmt|;
name|positiveSupportField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|POSITIVE_SUPPORT_FIELD
argument_list|)
expr_stmt|;
name|negativeSupportField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|NEGATIVE_SUPPORT_FIELD
argument_list|)
expr_stmt|;
name|configureSolrCore
argument_list|(
name|config
argument_list|,
name|SOLR_CORE
argument_list|)
expr_stmt|;
comment|// optional fields, can be null
name|broaderField
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|BROADER_FIELD
argument_list|)
expr_stmt|;
name|Object
name|orderParamValue
init|=
name|config
operator|.
name|get
argument_list|(
name|ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderParamValue
operator|!=
literal|null
condition|)
block|{
name|order
operator|=
operator|(
name|Integer
operator|)
name|orderParamValue
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|text
init|=
name|getTextFromContentItem
argument_list|(
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|getActiveSolrServer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Solr Core '%s' is not available."
argument_list|,
name|solrCoreId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|CANNOT_ENHANCE
return|;
block|}
if|if
condition|(
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
return|return
name|ENHANCE_SYNCHRONOUS
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|text
init|=
name|getTextFromContentItem
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|topics
decl_stmt|;
try|try
block|{
name|topics
operator|=
name|suggestTopics
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassifierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|TopicSuggestion
name|topic
range|:
name|topics
control|)
block|{
name|UriRef
name|enhancement
init|=
name|EnhancementEngineHelper
operator|.
name|createEntityEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancement
argument_list|,
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|ENHANCER_TOPICANNOTATION
argument_list|)
argument_list|)
expr_stmt|;
comment|// add link to entity
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancement
argument_list|,
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
operator|new
name|UriRef
argument_list|(
name|topic
operator|.
name|uri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: make it possible to dereference and the path to the root the entities according to a
comment|// configuration parameter
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|order
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getTextFromContentItem
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|InvalidContentException
block|{
comment|// Refactor the following using an adapter.
name|String
name|text
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getMimeType
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// TODO: handle explicit charsets if any and fallback to UTF-8 if missing
name|text
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|NIE_PLAINTEXTCONTENT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|text
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|text
return|;
block|}
specifier|public
specifier|static
name|TopicClassificationEngine
name|fromParameters
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|TopicClassificationEngine
name|engine
init|=
operator|new
name|TopicClassificationEngine
argument_list|()
decl_stmt|;
name|engine
operator|.
name|configure
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
comment|// classifier API
annotation|@
name|Override
specifier|public
name|String
name|getSchemeId
parameter_list|()
block|{
return|return
name|engineId
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAcceptedLanguages
parameter_list|()
block|{
return|return
name|acceptedLanguages
return|;
block|}
specifier|public
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestTopics
parameter_list|(
name|Collection
argument_list|<
name|Object
argument_list|>
name|contents
parameter_list|)
throws|throws
name|ClassifierException
block|{
return|return
name|suggestTopics
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|contents
argument_list|,
literal|"\n\n"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestTopics
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
operator|new
name|ArrayList
argument_list|<
name|TopicSuggestion
argument_list|>
argument_list|(
name|MAX_SUGGESTIONS
operator|*
literal|3
argument_list|)
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQueryType
argument_list|(
literal|"/"
operator|+
name|MoreLikeThisParams
operator|.
name|MLT
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFilterQueries
argument_list|(
name|entryTypeField
operator|+
literal|":"
operator|+
name|MODEL_ENTRY
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MATCH_INCLUDE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MIN_DOC_FREQ
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MIN_TERM_FREQ
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MAX_QUERY_TERMS
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|MAX_NUM_TOKENS_PARSED
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// TODO: find a way to parse the interesting terms and report them
comment|// for debugging / explanation in dedicated RDF data structure.
comment|// query.set(MoreLikeThisParams.INTERESTING_TERMS, "details");
name|query
operator|.
name|set
argument_list|(
name|MoreLikeThisParams
operator|.
name|SIMILARITY_FIELDS
argument_list|,
name|similarityField
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|STREAM_BODY
argument_list|,
name|text
argument_list|)
expr_stmt|;
comment|// over query the number of suggestions to find a statistical cut based on the curve of the scores of
comment|// the top suggestion
name|query
operator|.
name|setRows
argument_list|(
name|MAX_SUGGESTIONS
operator|*
literal|3
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
name|topicUriField
argument_list|)
expr_stmt|;
name|query
operator|.
name|setIncludeScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|StreamQueryRequest
name|request
init|=
operator|new
name|StreamQueryRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|request
operator|.
name|process
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|results
init|=
name|response
operator|.
name|getResults
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|result
range|:
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|SolrDocument
index|[
literal|0
index|]
argument_list|)
control|)
block|{
name|String
name|uri
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Solr Core '%s' is missing required field '%s'."
argument_list|,
name|solrCoreId
argument_list|,
name|topicUriField
argument_list|)
argument_list|)
throw|;
block|}
name|Float
name|score
init|=
operator|(
name|Float
operator|)
name|result
operator|.
name|getFirstValue
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
name|suggestedTopics
operator|.
name|add
argument_list|(
operator|new
name|TopicSuggestion
argument_list|(
name|uri
argument_list|,
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"unknown handler: /mlt"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"SolrServer with id '%s' for topic engine '%s' lacks"
operator|+
literal|" configuration for the MoreLikeThisHandler"
argument_list|,
name|solrCoreId
argument_list|,
name|engineId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|suggestedTopics
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
comment|// no need to apply the cutting heuristic
return|return
name|suggestedTopics
return|;
block|}
comment|// filter out suggestion that are less than some threshold based on the mean of the top scores
name|float
name|mean
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|TopicSuggestion
name|suggestion
range|:
name|suggestedTopics
control|)
block|{
name|mean
operator|+=
name|suggestion
operator|.
name|score
operator|/
name|suggestedTopics
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|float
name|threshold
init|=
literal|0.25f
operator|*
name|suggestedTopics
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|score
operator|+
literal|0.75f
operator|*
name|mean
decl_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|filteredSuggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|TopicSuggestion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TopicSuggestion
name|suggestion
range|:
name|suggestedTopics
control|)
block|{
if|if
condition|(
name|filteredSuggestions
operator|.
name|size
argument_list|()
operator|>=
name|MAX_SUGGESTIONS
condition|)
block|{
return|return
name|filteredSuggestions
return|;
block|}
if|if
condition|(
name|filteredSuggestions
operator|.
name|isEmpty
argument_list|()
operator|||
name|suggestion
operator|.
name|score
operator|>
name|threshold
condition|)
block|{
name|filteredSuggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|filteredSuggestions
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNarrowerTopics
parameter_list|(
name|String
name|broadTopicId
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|narrowerTopics
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|broaderField
operator|==
literal|null
condition|)
block|{
return|return
name|narrowerTopics
return|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
name|entryTypeField
operator|+
literal|":"
operator|+
name|METADATA_ENTRY
argument_list|)
decl_stmt|;
comment|// use a filter query to avoid string escaping issues with special solr chars
name|query
operator|.
name|addFilterQuery
argument_list|(
literal|"{!field f="
operator|+
name|broaderField
operator|+
literal|"}"
operator|+
name|broadTopicId
argument_list|)
expr_stmt|;
name|query
operator|.
name|addField
argument_list|(
name|topicUriField
argument_list|)
expr_stmt|;
name|query
operator|.
name|addSortField
argument_list|(
name|topicUriField
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|SolrDocument
name|result
range|:
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
control|)
block|{
name|narrowerTopics
operator|.
name|add
argument_list|(
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching narrower topics of '%s' on Solr Core '%s'."
argument_list|,
name|broadTopicId
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|narrowerTopics
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBroaderTopics
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|broaderTopics
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|broaderField
operator|==
literal|null
condition|)
block|{
return|return
name|broaderTopics
return|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
name|topicUriField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|addField
argument_list|(
name|broaderField
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|SolrDocument
name|result
range|:
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
control|)
block|{
comment|// there should be only one results
name|Collection
argument_list|<
name|Object
argument_list|>
name|broaderFieldValues
init|=
name|result
operator|.
name|getFieldValues
argument_list|(
name|broaderField
argument_list|)
decl_stmt|;
if|if
condition|(
name|broaderFieldValues
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Object
name|value
range|:
name|broaderFieldValues
control|)
block|{
name|broaderTopics
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching broader topics of '%s' on Solr Core '%s'."
argument_list|,
name|id
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|broaderTopics
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTopicRoots
parameter_list|()
throws|throws
name|ClassifierException
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|rootTopics
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
comment|// TODO: this can be very big on flat thesauri: should we enable a paging API instead?
name|query
operator|.
name|setRows
argument_list|(
name|MAX_ROOTS
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
name|topicUriField
argument_list|)
expr_stmt|;
name|query
operator|.
name|setSortField
argument_list|(
name|topicUriField
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
if|if
condition|(
name|broaderField
operator|!=
literal|null
condition|)
block|{
comment|// find any topic with an empty broaderField
name|query
operator|.
name|setParam
argument_list|(
literal|"q"
argument_list|,
name|entryTypeField
operator|+
literal|":"
operator|+
name|METADATA_ENTRY
operator|+
literal|" AND -"
operator|+
name|broaderField
operator|+
literal|":"
operator|+
name|SOLR_NON_EMPTY_FIELD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// find any topic
name|query
operator|.
name|setQuery
argument_list|(
name|entryTypeField
operator|+
literal|":"
operator|+
name|METADATA_ENTRY
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|QueryResponse
name|response
init|=
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|MAX_ROOTS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"TopicClassifier '%s' has more than %d registered topic roots."
operator|+
literal|" Some roots might be ignored."
argument_list|,
name|engineId
argument_list|,
name|MAX_ROOTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrDocument
name|result
range|:
name|response
operator|.
name|getResults
argument_list|()
control|)
block|{
name|rootTopics
operator|.
name|add
argument_list|(
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching root topics on Solr Core '%s'."
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|rootTopics
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addTopic
parameter_list|(
name|String
name|topicId
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|broaderTopics
parameter_list|)
throws|throws
name|ClassifierException
block|{
comment|// ensure that there is no previous topic registered with the same id
name|removeTopic
argument_list|(
name|topicId
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|metadataEntry
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|String
name|metadataEntryId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|modelEntryId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|topicUriField
argument_list|,
name|topicId
argument_list|)
expr_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|entryIdField
argument_list|,
name|metadataEntryId
argument_list|)
expr_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|modelEntryIdField
argument_list|,
name|modelEntryId
argument_list|)
expr_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|entryTypeField
argument_list|,
name|METADATA_ENTRY
argument_list|)
expr_stmt|;
if|if
condition|(
name|broaderTopics
operator|!=
literal|null
operator|&&
name|broaderField
operator|!=
literal|null
condition|)
block|{
name|metadataEntry
operator|.
name|addField
argument_list|(
name|broaderField
argument_list|,
name|broaderTopics
argument_list|)
expr_stmt|;
block|}
name|SolrInputDocument
name|modelEntry
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|modelEntry
operator|.
name|addField
argument_list|(
name|entryIdField
argument_list|,
name|modelEntryId
argument_list|)
expr_stmt|;
name|modelEntry
operator|.
name|addField
argument_list|(
name|topicUriField
argument_list|,
name|topicId
argument_list|)
expr_stmt|;
name|modelEntry
operator|.
name|addField
argument_list|(
name|entryTypeField
argument_list|,
name|MODEL_ENTRY
argument_list|)
expr_stmt|;
if|if
condition|(
name|broaderTopics
operator|!=
literal|null
condition|)
block|{
name|invalidateModelFields
argument_list|(
name|broaderTopics
argument_list|,
name|modelUpdateDateField
argument_list|,
name|modelEvaluationDateField
argument_list|)
expr_stmt|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|UpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|add
argument_list|(
name|metadataEntry
argument_list|)
expr_stmt|;
name|request
operator|.
name|add
argument_list|(
name|modelEntry
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error adding topic with id '%s' on Solr Core '%s'"
argument_list|,
name|topicId
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*      * The commit is the responsibility of the caller.      */
specifier|protected
name|void
name|invalidateModelFields
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|topicIds
parameter_list|,
name|String
modifier|...
name|fieldNames
parameter_list|)
throws|throws
name|ClassifierException
block|{
if|if
condition|(
name|topicIds
operator|.
name|isEmpty
argument_list|()
operator|||
name|fieldNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|invalidatedFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldNames
argument_list|)
decl_stmt|;
try|try
block|{
name|UpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|topicId
range|:
name|topicIds
control|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
name|entryTypeField
operator|+
literal|":"
operator|+
name|METADATA_ENTRY
operator|+
literal|" AND "
operator|+
name|topicUriField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|topicId
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrDocument
name|result
range|:
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
control|)
block|{
comment|// there should be only one (or none: tolerated)
name|SolrInputDocument
name|newEntry
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|result
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|invalidatedFields
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|newEntry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|result
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|add
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
block|}
block|}
name|solrServer
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error invalidating topics [%s] on Solr Core '%s'"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|topicIds
argument_list|,
literal|", "
argument_list|)
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeTopic
parameter_list|(
name|String
name|topicId
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|solrServer
operator|.
name|deleteByQuery
argument_list|(
name|topicUriField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|topicId
argument_list|)
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error removing topic with id '%s' on Solr Core '%s'"
argument_list|,
name|topicId
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUpdatable
parameter_list|()
block|{
return|return
name|trainingSet
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTrainingSet
parameter_list|(
name|TrainingSet
name|trainingSet
parameter_list|)
block|{
name|this
operator|.
name|trainingSet
operator|=
name|trainingSet
expr_stmt|;
block|}
specifier|protected
name|int
name|batchOverTopics
parameter_list|(
name|BatchProcessor
argument_list|<
name|SolrDocument
argument_list|>
name|processor
parameter_list|)
throws|throws
name|TrainingSetException
block|{
comment|// TODO: implement incremental update by using the date informations
name|int
name|processedCount
init|=
literal|0
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|String
name|q
init|=
name|entryTypeField
operator|+
literal|":"
operator|+
name|METADATA_ENTRY
decl_stmt|;
name|String
name|offset
init|=
literal|null
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
name|query
operator|.
name|addSortField
argument_list|(
name|topicUriField
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
name|batchSize
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|done
condition|)
block|{
comment|// batch over all the indexed topics
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|" AND "
operator|+
name|topicUriField
operator|+
literal|":["
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|offset
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|" TO *]"
expr_stmt|;
block|}
name|query
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|batchDocuments
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrDocument
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|result
range|:
name|response
operator|.
name|getResults
argument_list|()
control|)
block|{
name|String
name|topicId
init|=
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|batchSize
condition|)
block|{
name|offset
operator|=
name|topicId
expr_stmt|;
block|}
else|else
block|{
name|count
operator|++
expr_stmt|;
name|batchDocuments
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|processedCount
operator|+=
name|processor
operator|.
name|process
argument_list|(
name|batchDocuments
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|<
name|batchSize
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|solrServer
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while updating topics on Solr Core '%s'."
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|TrainingSetException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|processedCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|updateModel
parameter_list|(
name|boolean
name|incremental
parameter_list|)
throws|throws
name|TrainingSetException
throws|,
name|ClassifierException
block|{
name|checkTrainingSet
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|incremental
operator|&&
name|modelUpdateDateField
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|MODEL_UPDATE_DATE_FIELD
operator|+
literal|" field is not configured: switching to batch update mode."
argument_list|)
expr_stmt|;
name|incremental
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
name|boolean
name|incr
init|=
name|incremental
decl_stmt|;
name|int
name|updatedTopics
init|=
name|batchOverTopics
argument_list|(
operator|new
name|BatchProcessor
argument_list|<
name|SolrDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|process
parameter_list|(
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|batch
parameter_list|)
throws|throws
name|ClassifierException
throws|,
name|TrainingSetException
block|{
name|int
name|processed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SolrDocument
name|result
range|:
name|batch
control|)
block|{
name|String
name|topicId
init|=
name|result
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|impactedTopics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|impactedTopics
operator|.
name|add
argument_list|(
name|topicId
argument_list|)
expr_stmt|;
name|impactedTopics
operator|.
name|addAll
argument_list|(
name|getNarrowerTopics
argument_list|(
name|topicId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|incr
condition|)
block|{
name|Date
name|lastModelUpdate
init|=
operator|(
name|Date
operator|)
name|result
operator|.
name|getFirstValue
argument_list|(
name|modelUpdateDateField
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastModelUpdate
operator|!=
literal|null
operator|&&
operator|!
name|trainingSet
operator|.
name|hasChangedSince
argument_list|(
name|impactedTopics
argument_list|,
name|lastModelUpdate
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|String
name|metadataEntryId
init|=
name|result
operator|.
name|getFirstValue
argument_list|(
name|entryIdField
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|modelEntryId
init|=
name|result
operator|.
name|getFirstValue
argument_list|(
name|modelEntryIdField
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|updateTopic
argument_list|(
name|topicId
argument_list|,
name|metadataEntryId
argument_list|,
name|modelEntryId
argument_list|,
name|impactedTopics
argument_list|,
name|result
operator|.
name|getFieldValues
argument_list|(
name|broaderField
argument_list|)
argument_list|)
expr_stmt|;
name|processed
operator|++
expr_stmt|;
block|}
return|return
name|processed
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|long
name|stop
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sucessfully updated {} topics in {}s"
argument_list|,
name|updatedTopics
argument_list|,
call|(
name|double
call|)
argument_list|(
name|stop
operator|-
name|start
argument_list|)
operator|/
literal|1000.
argument_list|)
expr_stmt|;
return|return
name|updatedTopics
return|;
block|}
comment|/**      * @param topicId      *            the topic model to update      * @param metadataEntryId      *            of the metadata entry id of the topic      * @param modelEntryId      *            of the model entry id of the topic      * @param impactedTopics      *            the list of impacted topics (e.g. the topic node and direct children)      * @param broaderTopics      *            the collection of broader to re-add in the broader field      */
specifier|protected
name|void
name|updateTopic
parameter_list|(
name|String
name|topicId
parameter_list|,
name|String
name|metadataId
parameter_list|,
name|String
name|modelId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|impactedTopics
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|broaderTopics
parameter_list|)
throws|throws
name|TrainingSetException
throws|,
name|ClassifierException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Batch
argument_list|<
name|Example
argument_list|>
name|examples
init|=
name|Batch
operator|.
name|emtpyBatch
argument_list|(
name|Example
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
do|do
block|{
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|impactedTopics
argument_list|,
name|examples
operator|.
name|nextOffset
argument_list|)
expr_stmt|;
for|for
control|(
name|Example
name|example
range|:
name|examples
operator|.
name|items
control|)
block|{
if|if
condition|(
operator|(
name|cvFoldCount
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|offset
operator|%
name|cvFoldCount
operator|==
name|cvFoldIndex
operator|)
condition|)
block|{
comment|// we are performing a cross validation session and this example belong to the test
comment|// fold hence should be skipped
name|offset
operator|++
expr_stmt|;
continue|continue;
block|}
name|offset
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|example
operator|.
name|contents
argument_list|,
literal|"\n\n"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
name|MAX_CHARS_PER_TOPIC
operator|&&
name|examples
operator|.
name|hasMore
condition|)
do|;
comment|// reindex the topic with the new text data collected from the examples
name|SolrInputDocument
name|modelEntry
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|modelEntry
operator|.
name|addField
argument_list|(
name|entryIdField
argument_list|,
name|modelId
argument_list|)
expr_stmt|;
name|modelEntry
operator|.
name|addField
argument_list|(
name|topicUriField
argument_list|,
name|topicId
argument_list|)
expr_stmt|;
name|modelEntry
operator|.
name|addField
argument_list|(
name|entryTypeField
argument_list|,
name|MODEL_ENTRY
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|modelEntry
operator|.
name|addField
argument_list|(
name|similarityField
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
comment|// update the metadata of the topic model
name|SolrInputDocument
name|metadataEntry
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|entryIdField
argument_list|,
name|metadataId
argument_list|)
expr_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|modelEntryIdField
argument_list|,
name|modelId
argument_list|)
expr_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|entryTypeField
argument_list|,
name|METADATA_ENTRY
argument_list|)
expr_stmt|;
name|metadataEntry
operator|.
name|addField
argument_list|(
name|topicUriField
argument_list|,
name|topicId
argument_list|)
expr_stmt|;
if|if
condition|(
name|broaderTopics
operator|!=
literal|null
operator|&&
name|broaderField
operator|!=
literal|null
condition|)
block|{
name|metadataEntry
operator|.
name|addField
argument_list|(
name|broaderField
argument_list|,
name|broaderTopics
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modelUpdateDateField
operator|!=
literal|null
condition|)
block|{
name|metadataEntry
operator|.
name|addField
argument_list|(
name|modelUpdateDateField
argument_list|,
name|UTCTimeStamper
operator|.
name|nowUtcDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|UpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|add
argument_list|(
name|metadataEntry
argument_list|)
expr_stmt|;
name|request
operator|.
name|add
argument_list|(
name|modelEntry
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// the commit is done by the caller in batch
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error updating topic with id '%s' on Solr Core '%s'"
argument_list|,
name|topicId
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|long
name|stop
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sucessfully updated topic {} in {}s"
argument_list|,
name|topicId
argument_list|,
call|(
name|double
call|)
argument_list|(
name|stop
operator|-
name|start
argument_list|)
operator|/
literal|1000.
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkTrainingSet
parameter_list|()
throws|throws
name|TrainingSetException
block|{
if|if
condition|(
name|trainingSet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TrainingSetException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"TopicClassificationEngine %s has no registered"
operator|+
literal|" training set hence cannot be updated."
argument_list|,
name|engineId
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCrossValidationInfo
parameter_list|(
name|int
name|foldIndex
parameter_list|,
name|int
name|foldCount
parameter_list|)
block|{
if|if
condition|(
name|foldIndex
operator|>
name|foldCount
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"foldIndex=%d should be smaller than foldCount=%d - 1"
argument_list|,
name|foldIndex
argument_list|,
name|foldCount
argument_list|)
argument_list|)
throw|;
block|}
name|cvFoldIndex
operator|=
name|foldIndex
expr_stmt|;
name|cvFoldCount
operator|=
name|foldCount
expr_stmt|;
block|}
specifier|protected
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCanonicalConfiguration
parameter_list|(
name|EmbeddedSolrServer
name|server
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENGINE_ID
argument_list|,
name|engineId
operator|+
literal|"-evaluation"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENTRY_ID_FIELD
argument_list|,
literal|"entry_id"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|ENTRY_TYPE_FIELD
argument_list|,
literal|"entry_type"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|MODEL_ENTRY_ID_FIELD
argument_list|,
literal|"model_entry_id"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|SOLR_CORE
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|TOPIC_URI_FIELD
argument_list|,
literal|"topic"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|SIMILARTITY_FIELD
argument_list|,
literal|"classifier_features"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|BROADER_FIELD
argument_list|,
literal|"broader"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|MODEL_UPDATE_DATE_FIELD
argument_list|,
literal|"last_update_dt"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|MODEL_EVALUATION_DATE_FIELD
argument_list|,
literal|"last_evaluation_dt"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|PRECISION_FIELD
argument_list|,
literal|"precision"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|RECALL_FIELD
argument_list|,
literal|"recall"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|POSITIVE_SUPPORT_FIELD
argument_list|,
literal|"positive_support"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|NEGATIVE_SUPPORT_FIELD
argument_list|,
literal|"negative_support"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|FALSE_POSITIVES_FIELD
argument_list|,
literal|"false_positives"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|TopicClassificationEngine
operator|.
name|FALSE_NEGATIVES_FIELD
argument_list|,
literal|"false_negatives"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
specifier|public
name|boolean
name|isEvaluationRunning
parameter_list|()
block|{
return|return
name|evaluationFolder
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|updatePerformanceEstimates
parameter_list|(
name|boolean
name|incremental
parameter_list|)
throws|throws
name|ClassifierException
throws|,
name|TrainingSetException
block|{
if|if
condition|(
name|evaluationFolder
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
literal|"Another evaluation is already running"
argument_list|)
throw|;
block|}
name|int
name|updatedTopics
init|=
literal|0
decl_stmt|;
name|int
name|cvFoldCount
init|=
literal|3
decl_stmt|;
comment|// 3-folds CV is hardcoded for now
name|TopicClassificationEngine
name|classifier
init|=
operator|new
name|TopicClassificationEngine
argument_list|()
decl_stmt|;
name|classifier
operator|.
name|setTrainingSet
argument_list|(
name|trainingSet
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TODO: make the temporary folder path configurable with a property
name|evaluationFolder
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"stanbol-classifier-evaluation-"
argument_list|,
literal|"-solr"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|cvFoldIndex
init|=
literal|0
init|;
name|cvFoldIndex
operator|<
name|cvFoldCount
condition|;
name|cvFoldIndex
operator|++
control|)
block|{
name|updatedTopics
operator|=
name|performCVFold
argument_list|(
name|classifier
argument_list|,
name|cvFoldIndex
argument_list|,
name|cvFoldCount
argument_list|,
name|incremental
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|evaluationFolder
argument_list|)
expr_stmt|;
name|evaluationFolder
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|updatedTopics
return|;
block|}
specifier|protected
name|int
name|performCVFold
parameter_list|(
specifier|final
name|TopicClassificationEngine
name|classifier
parameter_list|,
name|int
name|cvFoldIndex
parameter_list|,
name|int
name|cvFoldCount
parameter_list|,
name|boolean
name|incremental
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|TrainingSetException
throws|,
name|ClassifierException
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Performing evaluation CV iteration %d/%d on classifier %s"
argument_list|,
name|cvFoldIndex
operator|+
literal|1
argument_list|,
name|cvFoldCount
argument_list|,
name|engineId
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|evaluationFolder
argument_list|)
expr_stmt|;
name|evaluationFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
try|try
block|{
name|EmbeddedSolrServer
name|evaluationServer
init|=
name|EmbeddedSolrHelper
operator|.
name|makeEmbeddedSolrServer
argument_list|(
name|evaluationFolder
argument_list|,
literal|"evaluationclassifierserver"
argument_list|,
literal|"classifier"
argument_list|,
literal|"classifier"
argument_list|)
decl_stmt|;
name|classifier
operator|.
name|configure
argument_list|(
name|getCanonicalConfiguration
argument_list|(
name|evaluationServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// iterate over all the topics to register them in the evaluation classifier
name|batchOverTopics
argument_list|(
operator|new
name|BatchProcessor
argument_list|<
name|SolrDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|process
parameter_list|(
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|batch
parameter_list|)
throws|throws
name|ClassifierException
block|{
for|for
control|(
name|SolrDocument
name|topicEntry
range|:
name|batch
control|)
block|{
name|String
name|topicId
init|=
name|topicEntry
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|broader
init|=
name|topicEntry
operator|.
name|getFieldValues
argument_list|(
name|broaderField
argument_list|)
decl_stmt|;
if|if
condition|(
name|broader
operator|==
literal|null
condition|)
block|{
name|classifier
operator|.
name|addTopic
argument_list|(
name|topicId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|broaderTopics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|broaderTopic
range|:
name|broader
control|)
block|{
name|broaderTopics
operator|.
name|add
argument_list|(
name|broaderTopic
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classifier
operator|.
name|addTopic
argument_list|(
name|topicId
argument_list|,
name|broaderTopics
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|batch
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// build the model on the for the current train CV folds
name|classifier
operator|.
name|setCrossValidationInfo
argument_list|(
name|cvFoldIndex
argument_list|,
name|cvFoldCount
argument_list|)
expr_stmt|;
name|classifier
operator|.
name|updateModel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|foldCount
init|=
name|cvFoldCount
decl_stmt|;
specifier|final
name|int
name|foldIndex
init|=
name|cvFoldIndex
decl_stmt|;
comment|// iterate over the topics again to compute scores on the test fold
name|int
name|updatedTopics
init|=
name|batchOverTopics
argument_list|(
operator|new
name|BatchProcessor
argument_list|<
name|SolrDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|process
parameter_list|(
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|batch
parameter_list|)
throws|throws
name|TrainingSetException
throws|,
name|ClassifierException
block|{
name|int
name|offset
decl_stmt|;
for|for
control|(
name|SolrDocument
name|topicMetadata
range|:
name|batch
control|)
block|{
name|String
name|topic
init|=
name|topicMetadata
operator|.
name|getFirstValue
argument_list|(
name|topicUriField
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|topics
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|falseNegativeExamples
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|truePositives
init|=
literal|0
decl_stmt|;
name|int
name|falseNegatives
init|=
literal|0
decl_stmt|;
name|int
name|positiveSupport
init|=
literal|0
decl_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|Batch
argument_list|<
name|Example
argument_list|>
name|examples
init|=
name|Batch
operator|.
name|emtpyBatch
argument_list|(
name|Example
operator|.
name|class
argument_list|)
decl_stmt|;
do|do
block|{
name|examples
operator|=
name|trainingSet
operator|.
name|getPositiveExamples
argument_list|(
name|topics
argument_list|,
name|examples
operator|.
name|nextOffset
argument_list|)
expr_stmt|;
for|for
control|(
name|Example
name|example
range|:
name|examples
operator|.
name|items
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|offset
operator|%
name|foldCount
operator|==
name|foldIndex
operator|)
condition|)
block|{
comment|// this example is not part of the test fold, skip it
name|offset
operator|++
expr_stmt|;
continue|continue;
block|}
name|positiveSupport
operator|++
expr_stmt|;
name|offset
operator|++
expr_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
name|example
operator|.
name|contents
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TopicSuggestion
name|suggestedTopic
range|:
name|suggestedTopics
control|)
block|{
if|if
condition|(
name|topic
operator|.
name|equals
argument_list|(
name|suggestedTopic
operator|.
name|uri
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|truePositives
operator|++
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|falseNegatives
operator|++
expr_stmt|;
name|falseNegativeExamples
operator|.
name|add
argument_list|(
name|example
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|examples
operator|.
name|hasMore
condition|)
do|;
comment|// TODO: put a bound on the number of examples
name|List
argument_list|<
name|String
argument_list|>
name|falsePositiveExamples
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|falsePositives
init|=
literal|0
decl_stmt|;
name|int
name|negativeSupport
init|=
literal|0
decl_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|examples
operator|=
name|Batch
operator|.
name|emtpyBatch
argument_list|(
name|Example
operator|.
name|class
argument_list|)
expr_stmt|;
do|do
block|{
name|examples
operator|=
name|trainingSet
operator|.
name|getNegativeExamples
argument_list|(
name|topics
argument_list|,
name|examples
operator|.
name|nextOffset
argument_list|)
expr_stmt|;
for|for
control|(
name|Example
name|example
range|:
name|examples
operator|.
name|items
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|offset
operator|%
name|foldCount
operator|==
name|foldIndex
operator|)
condition|)
block|{
comment|// TODO: change the dataset API to include exampleId
comment|// this example is not part of the test fold, skip it
name|offset
operator|++
expr_stmt|;
continue|continue;
block|}
name|negativeSupport
operator|++
expr_stmt|;
name|offset
operator|++
expr_stmt|;
name|List
argument_list|<
name|TopicSuggestion
argument_list|>
name|suggestedTopics
init|=
name|classifier
operator|.
name|suggestTopics
argument_list|(
name|example
operator|.
name|contents
argument_list|)
decl_stmt|;
for|for
control|(
name|TopicSuggestion
name|suggestedTopic
range|:
name|suggestedTopics
control|)
block|{
if|if
condition|(
name|topic
operator|.
name|equals
argument_list|(
name|suggestedTopic
operator|.
name|uri
argument_list|)
condition|)
block|{
name|falsePositives
operator|++
expr_stmt|;
name|falsePositiveExamples
operator|.
name|add
argument_list|(
name|example
operator|.
name|id
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// we don't need to collect true negatives
block|}
block|}
do|while
condition|(
name|examples
operator|.
name|hasMore
condition|)
do|;
comment|// TODO: put a bound on the number of examples
comment|// compute precision, recall and f1 score for the current test fold and topic
name|float
name|precision
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|truePositives
operator|!=
literal|0
operator|||
name|falsePositives
operator|!=
literal|0
condition|)
block|{
name|precision
operator|=
name|truePositives
operator|/
call|(
name|float
call|)
argument_list|(
name|truePositives
operator|+
name|falsePositives
argument_list|)
expr_stmt|;
block|}
name|float
name|recall
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|truePositives
operator|!=
literal|0
operator|||
name|falseNegatives
operator|!=
literal|0
condition|)
block|{
name|recall
operator|=
name|truePositives
operator|/
call|(
name|float
call|)
argument_list|(
name|truePositives
operator|+
name|falseNegatives
argument_list|)
expr_stmt|;
block|}
name|updatePerformanceMetadata
argument_list|(
name|topic
argument_list|,
name|precision
argument_list|,
name|recall
argument_list|,
name|positiveSupport
argument_list|,
name|negativeSupport
argument_list|,
name|falsePositiveExamples
argument_list|,
name|falseNegativeExamples
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getActiveSolrServer
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|batch
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|float
name|averageF1
init|=
literal|0.0f
decl_stmt|;
name|long
name|stop
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Finished CV iteration %d/%d on classifier %s in %fs. F1-score = %f"
argument_list|,
name|cvFoldIndex
operator|+
literal|1
argument_list|,
name|cvFoldCount
argument_list|,
name|engineId
argument_list|,
operator|(
name|stop
operator|-
name|start
operator|)
operator|/
literal|1000.0
argument_list|,
name|averageF1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|updatedTopics
return|;
block|}
comment|/**      * Update the performance statistics in a metadata entry of a topic. It is the responsibility of the      * caller to commit.      */
specifier|protected
name|void
name|updatePerformanceMetadata
parameter_list|(
name|String
name|topicId
parameter_list|,
name|float
name|precision
parameter_list|,
name|float
name|recall
parameter_list|,
name|int
name|positiveSupport
parameter_list|,
name|int
name|negativeSupport
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|falsePositiveExamples
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|falseNegativeExamples
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
name|entryTypeField
operator|+
literal|":"
operator|+
name|METADATA_ENTRY
operator|+
literal|" AND "
operator|+
name|topicUriField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|topicId
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrDocument
name|result
range|:
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
control|)
block|{
comment|// there should be only one (or none: tolerated)
comment|// fetch any old values to update (all metadata fields are assumed to be stored)s
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|fieldValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|result
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|fieldValues
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|result
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addToList
argument_list|(
name|fieldValues
argument_list|,
name|precisionField
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|addToList
argument_list|(
name|fieldValues
argument_list|,
name|recallField
argument_list|,
name|recall
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|fieldValues
argument_list|,
name|positiveSupportField
argument_list|,
name|positiveSupport
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|fieldValues
argument_list|,
name|negativeSupportField
argument_list|,
name|negativeSupport
argument_list|)
expr_stmt|;
comment|// TODO: handle supports too...
comment|// addToList(fieldValues, falsePositivesField, falsePositiveExamples);
comment|// addToList(fieldValues, falseNegativesField, falseNegativeExamples);
name|SolrInputDocument
name|newEntry
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|fieldValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newEntry
operator|.
name|addField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newEntry
operator|.
name|setField
argument_list|(
name|modelEvaluationDateField
argument_list|,
name|UTCTimeStamper
operator|.
name|nowUtcDate
argument_list|()
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|add
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error updating performance metadata for topic '%s' on Solr Core '%s'"
argument_list|,
name|topicId
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|increment
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|fieldValues
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|count
parameter_list|)
block|{
comment|// this collection is expected to be a singleton for this particular field
name|Collection
argument_list|<
name|Object
argument_list|>
name|oldValues
init|=
name|fieldValues
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValues
operator|!=
literal|null
operator|&&
operator|!
name|oldValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|count
operator|+=
operator|(
name|Integer
operator|)
name|oldValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|addToList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|fieldValues
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldValues
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|fieldValues
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|fieldValues
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClassificationReport
name|getPerformanceEstimates
parameter_list|(
name|String
name|topicId
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
name|entryTypeField
operator|+
literal|":"
operator|+
name|METADATA_ENTRY
operator|+
literal|" AND "
operator|+
name|topicUriField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|topicId
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|SolrDocumentList
name|results
init|=
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"'%s' is not a registered topic"
argument_list|,
name|topicId
argument_list|)
argument_list|)
throw|;
block|}
name|SolrDocument
name|metadata
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Float
name|precision
init|=
name|computeMeanValue
argument_list|(
name|metadata
argument_list|,
name|precisionField
argument_list|)
decl_stmt|;
name|Float
name|recall
init|=
name|computeMeanValue
argument_list|(
name|metadata
argument_list|,
name|recallField
argument_list|)
decl_stmt|;
name|int
name|positiveSupport
init|=
name|computeSumValue
argument_list|(
name|metadata
argument_list|,
name|positiveSupportField
argument_list|)
decl_stmt|;
name|int
name|negativeSupport
init|=
name|computeSumValue
argument_list|(
name|metadata
argument_list|,
name|negativeSupportField
argument_list|)
decl_stmt|;
name|Date
name|evaluationDate
init|=
operator|(
name|Date
operator|)
name|metadata
operator|.
name|getFirstValue
argument_list|(
name|modelEvaluationDateField
argument_list|)
decl_stmt|;
name|boolean
name|uptodate
init|=
name|evaluationDate
operator|!=
literal|null
decl_stmt|;
name|ClassificationReport
name|report
init|=
operator|new
name|ClassificationReport
argument_list|(
name|precision
argument_list|,
name|recall
argument_list|,
name|positiveSupport
argument_list|,
name|negativeSupport
argument_list|,
name|uptodate
argument_list|,
name|evaluationDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getFieldValues
argument_list|(
name|falsePositivesField
argument_list|)
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|setField
argument_list|(
name|falsePositivesField
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|falsePositiveId
range|:
name|metadata
operator|.
name|getFieldValues
argument_list|(
name|falsePositivesField
argument_list|)
control|)
block|{
name|report
operator|.
name|falsePositiveExampleIds
operator|.
name|add
argument_list|(
name|falsePositiveId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|.
name|getFieldValues
argument_list|(
name|falseNegativesField
argument_list|)
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|setField
argument_list|(
name|falseNegativesField
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|falseNegativeId
range|:
name|metadata
operator|.
name|getFieldValues
argument_list|(
name|falseNegativesField
argument_list|)
control|)
block|{
name|report
operator|.
name|falseNegativeExampleIds
operator|.
name|add
argument_list|(
name|falseNegativeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassifierException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error fetching the performance report for topic "
operator|+
name|topicId
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Float
name|computeMeanValue
parameter_list|(
name|SolrDocument
name|metadata
parameter_list|,
name|String
name|fielName
parameter_list|)
block|{
name|Float
name|mean
init|=
literal|0f
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|metadata
operator|.
name|getFieldValues
argument_list|(
name|fielName
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mean
return|;
block|}
for|for
control|(
name|Object
name|v
range|:
name|values
control|)
block|{
name|mean
operator|+=
operator|(
name|Float
operator|)
name|v
operator|/
name|values
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|mean
return|;
block|}
specifier|protected
name|Integer
name|computeSumValue
parameter_list|(
name|SolrDocument
name|metadata
parameter_list|,
name|String
name|fielName
parameter_list|)
block|{
name|Integer
name|sum
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|metadata
operator|.
name|getFieldValues
argument_list|(
name|fielName
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|sum
return|;
block|}
for|for
control|(
name|Object
name|v
range|:
name|values
control|)
block|{
name|sum
operator|+=
operator|(
name|Integer
operator|)
name|v
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
block|}
end_class

end_unit

