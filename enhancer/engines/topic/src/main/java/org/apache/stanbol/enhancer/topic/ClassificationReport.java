begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Data transfer object to report estimated classification performance of a classifier.  *   *<p>  * Report scores to evaluate the quality of a model on a labeled evaluation dataset (that should not have been  * used when training the model).  *</p>  *   *<p>  * See: http://en.wikipedia.org/wiki/Precision_and_recall  *</p>  *   *<p>  * Precision, Recall are F1-score and preferred over a simple rate of good classification so as to account for  * potentially imbalanced evaluation set (e.g. when the number of negative examples is much larger than the  * number of positive examples).  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|ClassificationReport
block|{
comment|/**      * Number of true positives divided by the sum of true positives and false positives.      */
specifier|public
specifier|final
name|float
name|precision
decl_stmt|;
comment|/**      * Number of true positives divided by the sum of true positives and false negatives.      */
specifier|public
specifier|final
name|float
name|recall
decl_stmt|;
comment|/**      * Harmonic mean of the precision and recall that balance the importance of false positive and false      * negatives equally.      */
specifier|public
specifier|final
name|float
name|f1
decl_stmt|;
comment|/**      * Total number of positive examples used by the evaluation procedure.      */
specifier|public
specifier|final
name|int
name|positiveSupport
decl_stmt|;
comment|/**      * Total number of negative examples used by the evaluation procedure.      */
specifier|public
specifier|final
name|int
name|negativeSupport
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|uptodate
decl_stmt|;
specifier|public
specifier|final
name|Date
name|evaluationDate
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|falsePositiveExampleIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|falseNegativeExampleIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ClassificationReport
parameter_list|(
name|float
name|precision
parameter_list|,
name|float
name|recall
parameter_list|,
name|float
name|f1
parameter_list|,
name|int
name|positiveSupport
parameter_list|,
name|int
name|negativeSupport
parameter_list|,
name|boolean
name|uptodate
parameter_list|,
name|Date
name|evaluationDate
parameter_list|)
block|{
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|recall
operator|=
name|recall
expr_stmt|;
name|this
operator|.
name|f1
operator|=
name|f1
expr_stmt|;
name|this
operator|.
name|positiveSupport
operator|=
name|positiveSupport
expr_stmt|;
name|this
operator|.
name|negativeSupport
operator|=
name|negativeSupport
expr_stmt|;
name|this
operator|.
name|uptodate
operator|=
name|uptodate
expr_stmt|;
name|this
operator|.
name|evaluationDate
operator|=
name|evaluationDate
expr_stmt|;
block|}
block|}
end_class

end_unit

