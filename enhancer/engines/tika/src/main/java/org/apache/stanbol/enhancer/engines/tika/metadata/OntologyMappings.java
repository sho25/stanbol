begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
operator|.
name|metadata
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|disjoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|SKOS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|XSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|CreativeCommons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|DublinCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Geographic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|MSOffice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TIFF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|XMPDM
import|;
end_import

begin_comment
comment|/**  * Defines mappings for keys used by Apache Tika in the {@link Metadata} to  * ontology properties.<p>  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|OntologyMappings
implements|implements
name|Iterable
argument_list|<
name|Mapping
argument_list|>
block|{
specifier|private
specifier|static
name|OntologyMappings
name|defaultMappings
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Collection
argument_list|<
name|Mapping
argument_list|>
argument_list|>
name|mappings
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Collection
argument_list|<
name|Mapping
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Used to protect the default mappings from modifications      */
specifier|private
name|boolean
name|readonly
init|=
literal|false
decl_stmt|;
comment|/**      * The media ontology namespace      */
specifier|private
specifier|static
name|String
name|ma
init|=
literal|"http://www.w3.org/ns/ma-ont#"
decl_stmt|;
specifier|public
specifier|static
name|OntologyMappings
name|getDefaultMappings
parameter_list|()
block|{
if|if
condition|(
name|defaultMappings
operator|==
literal|null
condition|)
block|{
name|defaultMappings
operator|=
operator|new
name|OntologyMappings
argument_list|()
expr_stmt|;
comment|//TODO: validate the defaults
name|addMediaResourceOntologyMappings
argument_list|(
name|defaultMappings
argument_list|)
expr_stmt|;
name|addNepomukMessageMappings
argument_list|(
name|defaultMappings
argument_list|)
expr_stmt|;
name|addRdfsMappings
argument_list|(
name|defaultMappings
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultMappings
return|;
block|}
comment|/**      * @param mappings      */
specifier|public
specifier|static
name|void
name|addNepomukMessageMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
name|String
name|nmo
init|=
literal|"http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#"
decl_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|nmo
operator|+
literal|"bbc"
argument_list|,
name|Message
operator|.
name|MESSAGE_BCC
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|nmo
operator|+
literal|"cc"
argument_list|,
name|Message
operator|.
name|MESSAGE_CC
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|nmo
operator|+
literal|"from"
argument_list|,
name|Message
operator|.
name|MESSAGE_FROM
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|nmo
operator|+
literal|"to"
argument_list|,
name|Message
operator|.
name|MESSAGE_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param mappings      */
specifier|public
specifier|static
name|void
name|addGeoMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|+
literal|"alt"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|Geographic
operator|.
name|ALTITUDE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|+
literal|"lat"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|Geographic
operator|.
name|LATITUDE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|+
literal|"long"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|Geographic
operator|.
name|LONGITUDE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Maps the {@link TIFF} metadata to the Nepomuk EXIF ontology. This uses      * the more preceise datatyped as defined by {@link TIFF} rather than      * xsd:string as defined for most of the properites within the Nepomuk      * ontology.      * @param mappings      */
specifier|public
specifier|static
name|void
name|addNepomukExifMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
name|String
name|exif
init|=
literal|"http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#"
decl_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"bitsPerSample"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|BITS_PER_SAMPLE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"make"
argument_list|,
name|TIFF
operator|.
name|EQUIPMENT_MAKE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"model"
argument_list|,
name|TIFF
operator|.
name|EQUIPMENT_MODEL
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"exposureTime"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|TIFF
operator|.
name|EXPOSURE_TIME
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"fNumber"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|TIFF
operator|.
name|F_NUMBER
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"flash"
argument_list|,
name|XSD
operator|.
name|boolean_
argument_list|,
name|TIFF
operator|.
name|FLASH_FIRED
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"focalLength"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|TIFF
operator|.
name|FOCAL_LENGTH
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"relatedImageLength"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|IMAGE_LENGTH
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"relatedImageWidth"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|IMAGE_WIDTH
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"isoSpeedRatings"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|ISO_SPEED_RATINGS
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"orientation"
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
name|TIFF
operator|.
name|ORIENTATION
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"dateTimeOriginal"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|TIFF
operator|.
name|ORIGINAL_DATE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"xResolution"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|TIFF
operator|.
name|RESOLUTION_HORIZONTAL
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"resolutionUnit"
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
name|TIFF
operator|.
name|RESOLUTION_UNIT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"yResolution"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|TIFF
operator|.
name|RESOLUTION_VERTICAL
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"samplesPerPixel"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|SAMPLES_PER_PIXEL
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|exif
operator|+
literal|"software"
argument_list|,
name|TIFF
operator|.
name|SOFTWARE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the Mappings for {@link DublinCore}<p>      * Two mappings are added for each property<ul>      *<li><a href="http://dublincore.org/documents/dcmi-terms/">Dublin Core Terms</a>      *<li> The<a href="http://www.w3.org/TR/mediaont-10/#dc-table">DC terms       * mappings</a> of the Media Annotation Ontology.      *</ul>      * @param mappings The ontology mappings to add the DC mappings      */
specifier|public
specifier|static
name|void
name|addDcMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
name|String
name|dc
init|=
name|NamespaceEnum
operator|.
name|dc
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"contributor"
argument_list|,
name|DublinCore
operator|.
name|CONTRIBUTOR
argument_list|,
name|MSOffice
operator|.
name|LAST_AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"coverage"
argument_list|,
name|DublinCore
operator|.
name|COVERAGE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"creator"
argument_list|,
name|DublinCore
operator|.
name|CREATOR
argument_list|,
name|MSOffice
operator|.
name|AUTHOR
argument_list|,
literal|"initial-creator"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"description"
argument_list|,
name|DublinCore
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"format"
argument_list|,
name|DublinCore
operator|.
name|FORMAT
argument_list|,
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"identifier"
argument_list|,
name|DublinCore
operator|.
name|IDENTIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"language"
argument_list|,
name|DublinCore
operator|.
name|LANGUAGE
argument_list|,
name|HttpHeaders
operator|.
name|CONTENT_LANGUAGE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"modified"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|DublinCore
operator|.
name|MODIFIED
argument_list|,
literal|"Last-Modified"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"publisher"
argument_list|,
name|DublinCore
operator|.
name|PUBLISHER
argument_list|,
name|MSOffice
operator|.
name|COMPANY
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"relation"
argument_list|,
name|DublinCore
operator|.
name|RELATION
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"rights"
argument_list|,
name|DublinCore
operator|.
name|RIGHTS
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"source"
argument_list|,
name|DublinCore
operator|.
name|SOURCE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"subject"
argument_list|,
name|DublinCore
operator|.
name|SUBJECT
argument_list|,
name|MSOffice
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"title"
argument_list|,
name|DublinCore
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"type"
argument_list|,
name|DublinCore
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|dc
operator|+
literal|"date"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|DublinCore
operator|.
name|DATE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//MS Office -> DC
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"created"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|MSOffice
operator|.
name|CREATION_DATE
operator|.
name|getName
argument_list|()
argument_list|,
literal|"created"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addMediaResourceOntologyMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasContributor"
argument_list|,
name|DublinCore
operator|.
name|CONTRIBUTOR
argument_list|,
name|XMPDM
operator|.
name|ARTIST
operator|.
name|getName
argument_list|()
argument_list|,
name|XMPDM
operator|.
name|COMPOSER
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|ResourceMapping
argument_list|(
name|ma
operator|+
literal|"hasLocation"
argument_list|,
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"Location"
argument_list|)
argument_list|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"locationName"
argument_list|,
name|DublinCore
operator|.
name|COVERAGE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasCreator"
argument_list|,
name|DublinCore
operator|.
name|CREATOR
argument_list|,
name|MSOffice
operator|.
name|AUTHOR
argument_list|,
literal|"initial-creator"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"description"
argument_list|,
name|DublinCore
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasFormat"
argument_list|,
name|DublinCore
operator|.
name|FORMAT
argument_list|,
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * Excerpt of the MA recommendation:          *   The identifier of a media resource is represented in RDF by the URI           *   of the node representing that media resource. If a resource is           *   identified by several URI, owl:sameAs should be used.          */
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|OWL
operator|.
name|sameAs
argument_list|,
name|RDFS
operator|.
name|Resource
argument_list|,
name|DublinCore
operator|.
name|IDENTIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasLanguage"
argument_list|,
name|DublinCore
operator|.
name|LANGUAGE
argument_list|,
name|HttpHeaders
operator|.
name|CONTENT_LANGUAGE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"editDate"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|DublinCore
operator|.
name|MODIFIED
argument_list|,
name|MSOffice
operator|.
name|LAST_SAVED
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasPublisher"
argument_list|,
name|DublinCore
operator|.
name|PUBLISHER
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasRelatedResource"
argument_list|,
name|DublinCore
operator|.
name|RELATION
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"copyright"
argument_list|,
name|RDFS
operator|.
name|Resource
argument_list|,
comment|//DC:rights and cc:license
name|DublinCore
operator|.
name|RIGHTS
argument_list|,
name|CreativeCommons
operator|.
name|LICENSE_LOCATION
argument_list|,
name|CreativeCommons
operator|.
name|LICENSE_URL
argument_list|,
name|XMPDM
operator|.
name|COPYRIGHT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"isMemberOf"
argument_list|,
name|DublinCore
operator|.
name|SOURCE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasKeyword"
argument_list|,
name|DublinCore
operator|.
name|SUBJECT
argument_list|,
name|MSOffice
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"title"
argument_list|,
name|DublinCore
operator|.
name|TITLE
argument_list|,
name|XMPDM
operator|.
name|SCENE
operator|.
name|getName
argument_list|()
argument_list|,
name|XMPDM
operator|.
name|TAPE_NAME
operator|.
name|getName
argument_list|()
argument_list|,
name|XMPDM
operator|.
name|SHOT_NAME
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"alternativeTitle"
argument_list|,
name|XMPDM
operator|.
name|ALT_TAPE_NAME
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"mainOriginalTitle"
argument_list|,
name|XMPDM
operator|.
name|ALBUM
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasGenre"
argument_list|,
name|DublinCore
operator|.
name|TYPE
argument_list|,
name|XMPDM
operator|.
name|GENRE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"creationDate"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|DublinCore
operator|.
name|DATE
operator|.
name|getName
argument_list|()
argument_list|,
name|MSOffice
operator|.
name|CREATION_DATE
operator|.
name|getName
argument_list|()
argument_list|,
literal|"created"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"description"
argument_list|,
name|DublinCore
operator|.
name|DESCRIPTION
argument_list|,
name|MSOffice
operator|.
name|COMMENTS
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasContributor"
argument_list|,
name|MSOffice
operator|.
name|LAST_AUTHOR
argument_list|,
name|MSOffice
operator|.
name|AUTHOR
argument_list|,
name|XMPDM
operator|.
name|ENGINEER
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//other properties -> Media Ontology
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasCreator"
argument_list|,
literal|"producer"
argument_list|,
literal|"initial-creator"
argument_list|)
argument_list|)
expr_stmt|;
comment|//EXIF -> Media Ontology
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"frameHeight"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|IMAGE_LENGTH
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"frameWidth"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|IMAGE_WIDTH
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"creationDate"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|TIFF
operator|.
name|ORIGINAL_DATE
operator|.
name|getName
argument_list|()
argument_list|,
name|XMPDM
operator|.
name|SHOT_DATE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//XMP -> Media Ontology
comment|//here we need to split up the metadata for the audio and video
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"releaseDate"
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
name|XMPDM
operator|.
name|RELEASE_DATE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|ResourceMapping
argument_list|(
name|ma
operator|+
literal|"hasTrack"
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|/* no required */
block|}
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|//optional
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasFormat"
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
name|XMPDM
operator|.
name|AUDIO_CHANNEL_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasCompression"
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
name|XMPDM
operator|.
name|AUDIO_COMPRESSOR
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"editDate"
argument_list|,
name|XMPDM
operator|.
name|AUDIO_MOD_DATE
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"samplingRate"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|XMPDM
operator|.
name|AUDIO_SAMPLE_RATE
operator|.
name|getName
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Mapping
index|[]
block|{
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"MediaFragment"
argument_list|)
block|,
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"Track"
argument_list|)
block|,
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"AudioTrack"
argument_list|)
block|,             }
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|ResourceMapping
argument_list|(
name|ma
operator|+
literal|"hasTrack"
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|/* no required */
block|}
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|//optional
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"hasCompression"
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
name|XMPDM
operator|.
name|VIDEO_COMPRESSOR
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"editDate"
argument_list|,
name|XMPDM
operator|.
name|VIDEO_MOD_DATE
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"frameRate"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|XMPDM
operator|.
name|VIDEO_FRAME_RATE
operator|.
name|getName
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|//additioanl
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"MediaFragment"
argument_list|)
block|,
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"Track"
argument_list|)
block|,
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"VideoTrack"
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"frameHeight"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|IMAGE_LENGTH
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"frameWidth"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|TIFF
operator|.
name|IMAGE_WIDTH
operator|.
name|getName
argument_list|()
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"numberOfTracks"
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
name|XMPDM
operator|.
name|TRACK_NUMBER
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"averageBitRate"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
operator|new
name|Mapping
operator|.
name|Converter
argument_list|()
block|{
comment|//we need to convert from MByte/min to kByte/sec
annotation|@
name|Override
specifier|public
name|Resource
name|convert
parameter_list|(
name|Resource
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|TypedLiteral
operator|&&
name|XSD
operator|.
name|double_
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TypedLiteral
operator|)
name|value
operator|)
operator|.
name|getDataType
argument_list|()
argument_list|)
condition|)
block|{
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|double
name|mm
init|=
name|lf
operator|.
name|createObject
argument_list|(
name|Double
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|value
argument_list|)
decl_stmt|;
return|return
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|mm
operator|*
literal|1024
operator|/
literal|60
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
return|;
comment|//do not convert
block|}
block|}
block|}
argument_list|,
name|XMPDM
operator|.
name|FILE_DATA_RATE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//GEO -> Media Resource Ontology
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|ResourceMapping
argument_list|(
name|ma
operator|+
literal|"hasLocation"
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|//required
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"locationLatitude"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|Geographic
operator|.
name|LATITUDE
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"locationLongitude"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|Geographic
operator|.
name|LONGITUDE
operator|.
name|getName
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|//optional
operator|new
name|PropertyMapping
argument_list|(
name|ma
operator|+
literal|"locationAltitude"
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
name|Geographic
operator|.
name|ALTITUDE
operator|.
name|getName
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Mapping
index|[]
block|{
comment|//additional
operator|new
name|TypeMapping
argument_list|(
name|ma
operator|+
literal|"Location"
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO
comment|//    public static void addNepomukId3Mappings(OntologyMappings mappings){
comment|//        XMPDM.ABS_PEAK_AUDIO_FILE_PATH;
comment|//        XMPDM.ALBUM;
comment|//        XMPDM.ALT_TAPE_NAME;
comment|//        XMPDM.ARTIST;
comment|//        XMPDM.AUDIO_CHANNEL_TYPE;
comment|//        XMPDM.AUDIO_COMPRESSOR;
comment|//        XMPDM.AUDIO_MOD_DATE;
comment|//        XMPDM.AUDIO_SAMPLE_RATE;
comment|//        XMPDM.AUDIO_SAMPLE_TYPE;
comment|//        XMPDM.COMPOSER;
comment|//        XMPDM.COPYRIGHT;
comment|//        XMPDM.ENGINEER;
comment|//        XMPDM.FILE_DATA_RATE;
comment|//        XMPDM.GENRE;
comment|//        XMPDM.INSTRUMENT;
comment|//        XMPDM.KEY;
comment|//        XMPDM.LOG_COMMENT;
comment|//        XMPDM.LOOP;
comment|//        XMPDM.METADATA_MOD_DATE;
comment|//        XMPDM.NUMBER_OF_BEATS;
comment|//        XMPDM.PULL_DOWN;
comment|//        XMPDM.RELATIVE_PEAK_AUDIO_FILE_PATH;
comment|//        XMPDM.RELEASE_DATE;
comment|//        XMPDM.SCALE_TYPE;
comment|//        XMPDM.SCENE;
comment|//        XMPDM.SHOT_DATE;
comment|//        XMPDM.SHOT_LOCATION;
comment|//        XMPDM.SHOT_NAME;
comment|//        XMPDM.SPEAKER_PLACEMENT;
comment|//        XMPDM.STRETCH_MODE;
comment|//        XMPDM.TAPE_NAME;
comment|//        XMPDM.TEMPO;
comment|//        XMPDM.TIME_SIGNATURE;
comment|//        XMPDM.TRACK_NUMBER;
comment|//        XMPDM.VIDEO_ALPHA_MODE;
comment|//        XMPDM.VIDEO_ALPHA_UNITY_IS_TRANSPARENT;
comment|//        XMPDM.VIDEO_COLOR_SPACE;
comment|//        XMPDM.VIDEO_COMPRESSOR;
comment|//        XMPDM.VIDEO_FIELD_ORDER;
comment|//        XMPDM.VIDEO_FRAME_RATE;
comment|//        XMPDM.VIDEO_MOD_DATE;
comment|//        XMPDM.VIDEO_PIXEL_ASPECT_RATIO;
comment|//        XMPDM.VIDEO_PIXEL_DEPTH;
comment|//    }
specifier|public
specifier|static
name|void
name|addSkosMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
comment|//DC -> SKOS
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|SKOS
operator|.
name|prefLabel
argument_list|,
name|DublinCore
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|SKOS
operator|.
name|definition
argument_list|,
name|DublinCore
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|SKOS
operator|.
name|notation
argument_list|,
name|DublinCore
operator|.
name|IDENTIFIER
argument_list|)
argument_list|)
expr_stmt|;
comment|//MS Office -> SKOS
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|SKOS
operator|.
name|note
argument_list|,
name|MSOffice
operator|.
name|COMMENTS
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|SKOS
operator|.
name|editorialNote
argument_list|,
name|MSOffice
operator|.
name|NOTES
argument_list|,
name|XMPDM
operator|.
name|LOG_COMMENT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addRdfsMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
comment|//DC
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|RDFS
operator|.
name|label
argument_list|,
name|DublinCore
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|addMappings
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
name|RDFS
operator|.
name|comment
argument_list|,
name|DublinCore
operator|.
name|DESCRIPTION
argument_list|,
name|MSOffice
operator|.
name|COMMENTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Maps only {@link CreativeCommons#LICENSE_URL} to cc:license      * @param mappings      */
specifier|public
specifier|static
name|void
name|addCreativeCommonsMappings
parameter_list|(
name|OntologyMappings
name|mappings
parameter_list|)
block|{
name|mappings
operator|.
name|addMapping
argument_list|(
operator|new
name|PropertyMapping
argument_list|(
literal|"http://creativecommons.org/ns#license"
argument_list|,
name|RDFS
operator|.
name|Resource
argument_list|,
name|CreativeCommons
operator|.
name|LICENSE_URL
argument_list|,
name|CreativeCommons
operator|.
name|LICENSE_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMappings
parameter_list|(
name|Mapping
modifier|...
name|mappings
parameter_list|)
block|{
if|if
condition|(
name|mappings
operator|==
literal|null
operator|||
name|mappings
operator|.
name|length
operator|>
literal|1
condition|)
block|{
return|return;
comment|//nothing to do
block|}
for|for
control|(
name|Mapping
name|m
range|:
name|mappings
control|)
block|{
name|addMapping
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addMapping
parameter_list|(
name|Mapping
name|mapping
parameter_list|)
block|{
if|if
condition|(
name|readonly
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" instance is read only!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return;
comment|//nothing to do
block|}
name|Collection
argument_list|<
name|Mapping
argument_list|>
name|propMappings
init|=
name|this
operator|.
name|mappings
operator|.
name|get
argument_list|(
name|mapping
operator|.
name|getOntologyProperty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|propMappings
operator|==
literal|null
condition|)
block|{
name|propMappings
operator|=
operator|new
name|HashSet
argument_list|<
name|Mapping
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|getOntologyProperty
argument_list|()
argument_list|,
name|propMappings
argument_list|)
expr_stmt|;
block|}
name|propMappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removePropertyMappings
parameter_list|(
name|UriRef
name|property
parameter_list|)
block|{
if|if
condition|(
name|readonly
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" instance is read only!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mappings
operator|.
name|remove
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|apply
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|UriRef
name|context
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|names
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Mapping
name|mapping
range|:
name|this
control|)
block|{
if|if
condition|(
name|mapping
operator|.
name|getMappedTikaProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|disjoint
argument_list|(
name|keys
argument_list|,
name|mapping
operator|.
name|getMappedTikaProperties
argument_list|()
argument_list|)
condition|)
block|{
name|mapping
operator|.
name|apply
argument_list|(
name|graph
argument_list|,
name|context
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Mapping
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Mapping
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|Collection
argument_list|<
name|Mapping
argument_list|>
argument_list|>
name|mappingsIt
init|=
name|OntologyMappings
operator|.
name|this
operator|.
name|mappings
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Mapping
argument_list|>
name|mappingIt
init|=
name|Collections
operator|.
name|EMPTY_LIST
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
comment|//assumes no empty lists as values of OntologyMappings.this.mappings
return|return
name|mappingIt
operator|.
name|hasNext
argument_list|()
operator|||
name|mappingsIt
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Mapping
name|next
parameter_list|()
block|{
comment|//assumes no empty lists as values of OntologyMappings.this.mappings
if|if
condition|(
operator|!
name|mappingIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|mappingIt
operator|=
name|mappingsIt
operator|.
name|next
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|mappingIt
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Removal not Supported!"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

