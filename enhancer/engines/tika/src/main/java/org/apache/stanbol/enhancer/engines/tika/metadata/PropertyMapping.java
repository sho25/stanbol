begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PropertyMapping
extends|extends
name|Mapping
block|{
comment|/**      * A Set with the mapped properties      */
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|tikaProperties
decl_stmt|;
specifier|public
name|PropertyMapping
parameter_list|(
name|String
name|ontProperty
parameter_list|,
name|UriRef
name|ontType
parameter_list|,
name|String
modifier|...
name|tikaProperties
parameter_list|)
block|{
name|this
argument_list|(
name|ontProperty
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|UriRef
argument_list|(
name|ontProperty
argument_list|)
argument_list|,
name|ontType
argument_list|,
name|tikaProperties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PropertyMapping
parameter_list|(
name|String
name|ontProperty
parameter_list|,
name|UriRef
name|ontType
parameter_list|,
name|Converter
name|converter
parameter_list|,
name|String
modifier|...
name|tikaProperties
parameter_list|)
block|{
name|this
argument_list|(
name|ontProperty
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|UriRef
argument_list|(
name|ontProperty
argument_list|)
argument_list|,
name|ontType
argument_list|,
name|converter
argument_list|,
name|tikaProperties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PropertyMapping
parameter_list|(
name|String
name|ontProperty
parameter_list|,
name|String
modifier|...
name|tikaProperties
parameter_list|)
block|{
name|this
argument_list|(
name|ontProperty
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|UriRef
argument_list|(
name|ontProperty
argument_list|)
argument_list|,
literal|null
argument_list|,
name|tikaProperties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PropertyMapping
parameter_list|(
name|UriRef
name|ontProperty
parameter_list|,
name|String
modifier|...
name|tikaProperties
parameter_list|)
block|{
name|this
argument_list|(
name|ontProperty
argument_list|,
literal|null
argument_list|,
name|tikaProperties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PropertyMapping
parameter_list|(
name|UriRef
name|ontProperty
parameter_list|,
name|UriRef
name|ontType
parameter_list|,
name|String
modifier|...
name|tikaProperties
parameter_list|)
block|{
name|this
argument_list|(
name|ontProperty
argument_list|,
name|ontType
argument_list|,
literal|null
argument_list|,
name|tikaProperties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PropertyMapping
parameter_list|(
name|UriRef
name|ontProperty
parameter_list|,
name|UriRef
name|ontType
parameter_list|,
name|Converter
name|converter
parameter_list|,
name|String
modifier|...
name|tikaProperties
parameter_list|)
block|{
name|super
argument_list|(
name|ontProperty
argument_list|,
name|ontType
argument_list|,
name|converter
argument_list|)
expr_stmt|;
if|if
condition|(
name|tikaProperties
operator|==
literal|null
operator|||
name|tikaProperties
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The list of parsed Tika properties MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|tikaProperties
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tikaProperties
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tikaProperties
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
operator|||
name|this
operator|.
name|tikaProperties
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Teh parsed list of Tika properties MUST NOT "
operator|+
literal|"contain NULL or empty members (parsed: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|tikaProperties
argument_list|)
operator|+
literal|")!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Set
argument_list|<
name|Resource
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tikaProperty
range|:
name|tikaProperties
control|)
block|{
name|String
index|[]
name|tikaPropValues
init|=
name|metadata
operator|.
name|getValues
argument_list|(
name|tikaProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|tikaPropValues
operator|!=
literal|null
operator|&&
name|tikaPropValues
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|tikaPropValue
range|:
name|tikaPropValues
control|)
block|{
name|Resource
name|resource
init|=
name|toResource
argument_list|(
name|tikaPropValue
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|mappingLogger
operator|.
name|log
argument_list|(
name|subject
argument_list|,
name|ontProperty
argument_list|,
name|tikaProperty
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|values
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|values
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|Resource
name|resource
range|:
name|values
control|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|ontProperty
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMappedTikaProperties
parameter_list|()
block|{
return|return
name|tikaProperties
return|;
block|}
block|}
end_class

end_unit

