begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|toByteArray
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
operator|.
name|TikaEngine
operator|.
name|XHTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
operator|.
name|OCTET_STREAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|TikaEngineTest
block|{
specifier|private
specifier|static
name|TikaEngine
name|engine
decl_stmt|;
specifier|private
specifier|static
name|MockComponentContext
name|context
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
block|{
name|context
operator|=
operator|new
name|MockComponentContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|properties
operator|.
name|put
argument_list|(
name|TikaEngine
operator|.
name|PROPERTY_NAME
argument_list|,
literal|"tika"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|bindServices
parameter_list|()
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
name|engine
operator|=
operator|new
name|TikaEngine
argument_list|()
expr_stmt|;
name|engine
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHtml
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.html"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>The Apache Stanbol Enhancer</title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPdf
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
comment|//PDF created by Apple Pages
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.pdf"
argument_list|,
literal|"application/pdf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities "
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<div class=\"page\">"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
comment|//PDF created by OpenOffice
name|ci
operator|=
name|createContentItem
argument_list|(
literal|"test2.pdf"
argument_list|,
literal|"application/pdf"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
comment|//validate plain text results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|plainTextBlob
operator|=
name|contentPart
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|xhtmlBlob
operator|=
name|contentPart
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<div class=\"page\">"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMsWord
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.doc"
argument_list|,
literal|"application/msword"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRtf
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.rtf"
argument_list|,
literal|"application/rtf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOdt
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.odt"
argument_list|,
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentTypeDetection
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.pdf"
argument_list|,
name|OCTET_STREAM
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<div class=\"page\">"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that text is not processed      */
annotation|@
name|Test
specifier|public
name|void
name|testText
parameter_list|()
throws|throws
name|EngineException
block|{
name|byte
index|[]
name|data
init|=
operator|(
literal|"The Stanbol enhancer can "
operator|+
literal|"detect famous cities such as Paris and people such as Bob "
operator|+
literal|"Marley."
operator|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|ContentItem
name|ci
init|=
operator|new
name|InMemoryContentItem
argument_list|(
name|data
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ContentItemHelper
operator|.
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsupported
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.pages"
argument_list|,
literal|"application/x-iwork-pages-sffpages"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
comment|//it MUST NOT give an error but also not add a content part
name|assertNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
comment|//only the original content
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ContentItemHelper
operator|.
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXhtml
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.xhtml"
argument_list|,
name|XHTML
operator|.
name|toString
argument_list|()
operator|+
literal|"; charset=UTF-8"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|)
expr_stmt|;
comment|//only the original and the plain text
comment|// this asserts that no xhtml is parsed from the parsed xhtml content
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ContentItemHelper
operator|.
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ContentItem
name|createContentItem
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|InputStream
name|in
init|=
name|TikaEngineTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|toByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read test data!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|UriRef
name|ref
init|=
operator|new
name|UriRef
argument_list|(
literal|"urn:contentItem:content-"
operator|+
name|ContentItemHelper
operator|.
name|toHexString
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|InMemoryContentItem
argument_list|(
name|data
argument_list|,
name|contentType
argument_list|)
return|;
block|}
comment|/**      * Tests if the parsed regex pattern are contained in any line of the parsed      * test      * @throws IOException       */
specifier|public
name|void
name|assertContentRegexp
parameter_list|(
name|Blob
name|blob
parameter_list|,
name|String
modifier|...
name|regexp
parameter_list|)
throws|throws
name|IOException
block|{
name|Charset
name|charset
decl_stmt|;
if|if
condition|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
condition|)
block|{
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
expr_stmt|;
block|}
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|nextPattern
label|:
for|for
control|(
name|String
name|expr
range|:
name|regexp
control|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
operator|+
name|expr
operator|+
literal|".*"
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|blob
operator|.
name|getStream
argument_list|()
argument_list|,
name|charset
argument_list|)
expr_stmt|;
specifier|final
name|LineIterator
name|it
init|=
operator|new
name|LineIterator
argument_list|(
name|reader
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|String
name|line
init|=
name|it
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue
name|nextPattern
continue|;
block|}
block|}
name|fail
argument_list|(
name|this
operator|+
literal|": no match for regexp '"
operator|+
name|expr
operator|+
literal|"', content=\n"
operator|+
name|IOUtils
operator|.
name|toString
argument_list|(
name|blob
operator|.
name|getStream
argument_list|()
argument_list|,
name|charset
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|unbindServices
parameter_list|()
block|{
comment|/*nothing to do */
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdownServices
parameter_list|()
block|{
name|engine
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|engine
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

