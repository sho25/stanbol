begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|refactor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|refactor
operator|.
name|dereferencer
operator|.
name|Dereferencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|refactor
operator|.
name|dereferencer
operator|.
name|DereferencerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|OsgiUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|GraphContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|GraphSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|AlreadyExistingRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeEliminationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|Refactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * This an engine to post-process the enhancements. Its main goal is to refactor the RDF produced by the  * enhancement applying some vocabulary related to a specific task.  *   * To do that, exploit a Refactor recipe and an ontology scope of OntoNet.  *   * The first implementation is targeted to SEO use case. * It retrieves data by dereferencing the entities, *  * includes the DBpedia ontology * refactor the data using the google rich snippets vocabulary.  *   * @author anuzzolese, alberto.musetti  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"seo_refactoring"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|RefactorEnhancementEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
comment|/**      * A special input source that allows to bind a physical IRI with an ontology parsed from an input stream.      * Due to its unconventional nature it is kept private.      *       * @author alexdma      *       */
specifier|private
class|class
name|GraphContentSourceWithPhysicalIRI
extends|extends
name|GraphContentInputSource
block|{
specifier|public
name|GraphContentSourceWithPhysicalIRI
parameter_list|(
name|InputStream
name|content
parameter_list|,
name|IRI
name|physicalIri
parameter_list|)
block|{
name|super
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|bindPhysicalIri
argument_list|(
name|physicalIri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|APPEND_OTHER_ENHANCEMENT_GRAPHS
init|=
name|RefactorEnhancementEngineConf
operator|.
name|APPEND_OTHER_ENHANCEMENT_GRAPHS
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"google_rich_snippet_rules"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RECIPE_ID
init|=
name|RefactorEnhancementEngineConf
operator|.
name|RECIPE_ID
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|""
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RECIPE_LOCATION
init|=
name|RefactorEnhancementEngineConf
operator|.
name|RECIPE_LOCATION
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"seo"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SCOPE
init|=
name|RefactorEnhancementEngineConf
operator|.
name|SCOPE
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|cardinality
operator|=
literal|1000
argument_list|,
name|value
operator|=
block|{
literal|"http://ontologydesignpatterns.org/ont/iks/kres/dbpedia_demo.owl"
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SCOPE_CORE_ONTOLOGY
init|=
name|RefactorEnhancementEngineConf
operator|.
name|SCOPE_CORE_ONTOLOGY
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|USE_ENTITY_HUB
init|=
name|RefactorEnhancementEngineConf
operator|.
name|USE_ENTITY_HUB
decl_stmt|;
specifier|private
name|ComponentContext
name|context
decl_stmt|;
annotation|@
name|Reference
name|Dereferencer
name|dereferencer
decl_stmt|;
specifier|private
name|RefactorEnhancementEngineConf
name|engineConfiguration
decl_stmt|;
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
name|ONManager
name|onManager
decl_stmt|;
annotation|@
name|Reference
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
name|ontologyProvider
decl_stmt|;
specifier|private
name|ComponentInstance
name|refactorEngineComponentInstance
decl_stmt|;
annotation|@
name|Reference
name|Refactorer
name|refactorer
decl_stmt|;
annotation|@
name|Reference
name|ReferencedSiteManager
name|referencedSiteManager
decl_stmt|;
annotation|@
name|Reference
name|RuleStore
name|ruleStore
decl_stmt|;
specifier|private
name|OntologyScope
name|scope
decl_stmt|;
annotation|@
name|Reference
name|SessionManager
name|sessionManager
decl_stmt|;
comment|/**      * Activating the component      *       * @param context      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|RefactorEnhancementEngine
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|super
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|// copy the properties to a map
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|properties
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Configuration property: "
operator|+
name|key
operator|+
literal|" :- "
operator|+
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Initialize engine-specific features.
name|engineConfiguration
operator|=
operator|new
name|DefaultRefactorEnhancementEngineConf
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|initEngine
argument_list|(
name|engineConfiguration
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|RefactorEnhancementEngine
operator|.
name|class
operator|+
literal|" activated."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|/*          * Being a post-processing engine, the Refactor can enhance only content items that are previously          * enhanced by other enhancement engines.          */
return|return
name|ci
operator|.
name|getMetadata
argument_list|()
operator|==
literal|null
condition|?
name|CANNOT_ENHANCE
else|:
name|ENHANCE_SYNCHRONOUS
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// Prepare the OntoNet environment. First we create the OntoNet session in which run the whole
specifier|final
name|Session
name|session
decl_stmt|;
try|try
block|{
name|session
operator|=
name|sessionManager
operator|.
name|createSession
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SessionLimitException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
literal|"OntoNet session quota reached. The Refactor Engine requires its own new session to execute."
argument_list|)
throw|;
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EngineException
argument_list|(
literal|"Failed to create OntoNet session. The Refactor Engine requires its own new session to execute."
argument_list|)
throw|;
name|log
operator|.
name|debug
argument_list|(
literal|"Refactor enhancement job will run in session '{}'."
argument_list|,
name|session
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve and filter the metadata graph for entities recognized by the engines.
specifier|final
name|MGraph
name|metadataGraph
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|,
name|signaturesGraph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
comment|// FIXME the Stanbol Enhancer vocabulary should be retrieved from somewhere in the enhancer API.
specifier|final
name|UriRef
name|ENHANCER_ENTITY_REFERENCE
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://fise.iks-project.eu/ontology/entity-reference"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|tripleIt
init|=
name|metadataGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|tripleIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Get the entity URI
name|Resource
name|obj
init|=
name|tripleIt
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|UriRef
operator|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid UriRef for entity reference {}. Skipping."
argument_list|,
name|obj
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|entityReference
init|=
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Trying to resolve entity {}"
argument_list|,
name|entityReference
argument_list|)
expr_stmt|;
comment|// Populate the entity signatures graph, by querying either the Entity Hub or the dereferencer.
if|if
condition|(
name|engineConfiguration
operator|.
name|isEntityHubUsed
argument_list|()
condition|)
block|{
name|MGraph
name|result
init|=
name|populateWithEntity
argument_list|(
name|entityReference
argument_list|,
name|signaturesGraph
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|signaturesGraph
operator|&&
name|result
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Entity Hub query added triples to a new graph instead of populating the supplied one!"
operator|+
literal|" New signatures will be discarded."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
try|try
block|{
name|OntologyInputSource
argument_list|<
name|TripleCollection
argument_list|,
name|?
argument_list|>
name|source
init|=
operator|new
name|GraphContentSourceWithPhysicalIRI
argument_list|(
name|dereferencer
operator|.
name|resolve
argument_list|(
name|entityReference
argument_list|)
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|entityReference
argument_list|)
argument_list|)
decl_stmt|;
name|signaturesGraph
operator|.
name|addAll
argument_list|(
name|source
operator|.
name|getRootOntology
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to dereference entity "
operator|+
name|entityReference
operator|+
literal|". Skipping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
try|try
block|{
comment|/*              * The dedicated session for this job will store the following: (1) all the (merged) signatures              * for all detected entities; (2) the original content metadata graph returned earlier in the              * chain.              *               * There is no chance that (2) could be null, as it was previously controlled by the JobManager              * through the canEnhance() method and the computeEnhancement is always called iff the former              * returns true.              */
name|session
operator|.
name|addOntology
argument_list|(
operator|new
name|GraphSource
argument_list|(
name|signaturesGraph
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|addOntology
argument_list|(
operator|new
name|GraphSource
argument_list|(
name|metadataGraph
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
literal|"Cannot add enhancement graph to OntoNet session for refactoring"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
try|try
block|{
comment|/*              * Export the entire session (incl. entities and enhancement graph) as a single merged ontology.              *               * TODO the refactorer should have methods to accommodate an OntologyCollector directly instead.              */
name|OWLOntology
name|ontology
init|=
name|session
operator|.
name|export
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Refactoring recipe IRI is : "
operator|+
name|engineConfiguration
operator|.
name|getRecipeId
argument_list|()
argument_list|)
expr_stmt|;
comment|/*              * We pass the ontology and the recipe IRI to the Refactor that returns the refactored graph              * expressed by using the given vocabulary.              *               * To perform the refactoring of the ontology to a given vocabulary we use the Stanbol Refactor.              */
name|Recipe
name|recipe
init|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|engineConfiguration
operator|.
name|getRecipeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Recipe {} contains {} rules."
argument_list|,
name|recipe
argument_list|,
name|recipe
operator|.
name|getRuleList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"The ontology to be refactor is {}"
argument_list|,
name|ontology
argument_list|)
expr_stmt|;
name|TripleCollection
name|tc
init|=
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|ontology
argument_list|)
argument_list|,
name|recipe
argument_list|)
decl_stmt|;
comment|/*              * ontology = refactorer .ontologyRefactoring(ontology,              * IRI.create(engineConfiguration.getRecipeId()));              */
comment|/*              * The newly generated ontology is converted to Clarezza format and then added os substitued to              * the old mGraph.              */
if|if
condition|(
name|engineConfiguration
operator|.
name|isInGraphAppendMode
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Metadata of the content will replace old ones."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadataGraph
operator|.
name|clear
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content metadata will be appended to the existing ones."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|metadataGraph
operator|.
name|addAll
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Refactor engine execution failed on content item "
operator|+
name|ci
operator|+
literal|"."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Refactor engine could not find recipe "
operator|+
name|engineConfiguration
operator|.
name|getRecipeId
argument_list|()
operator|+
literal|" to refactor content item "
operator|+
name|ci
operator|+
literal|"."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
literal|"Refactor Engine has failed."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|/*              * The session needs to be destroyed anyhow.              *               * Clear contents before destroying (FIXME only do this until this is implemented in the              * destroySession() method).              */
for|for
control|(
name|IRI
name|iri
range|:
name|session
operator|.
name|listManagedOntologies
argument_list|()
control|)
block|{
try|try
block|{
name|String
name|key
init|=
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|iri
argument_list|)
decl_stmt|;
name|ontologyProvider
operator|.
name|getStore
argument_list|()
operator|.
name|deleteTripleCollection
argument_list|(
operator|new
name|UriRef
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to delete triple collection "
operator|+
name|iri
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|sessionManager
operator|.
name|destroySession
argument_list|(
name|session
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|createRefactorEngineComponent
parameter_list|(
name|ComponentFactory
name|factory
parameter_list|)
block|{
comment|// both create*** methods sync on the searcherAndDereferencerLock to avoid
comment|// multiple component instances because of concurrent calls
synchronized|synchronized
init|(
name|this
operator|.
name|lock
init|)
block|{
if|if
condition|(
name|refactorEngineComponentInstance
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|refactorEngineComponentInstance
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
comment|// Deactivation clears all the rules and releases OntoNet resources.
name|UriRef
name|recipeId
init|=
operator|new
name|UriRef
argument_list|(
name|engineConfiguration
operator|.
name|getRecipeId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// step 1: get all the rules
name|log
operator|.
name|debug
argument_list|(
literal|"Recipe {} and its associated rules will be removed from the rule store."
argument_list|,
name|recipeId
argument_list|)
expr_stmt|;
name|Recipe
name|recipe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recipe
operator|!=
literal|null
condition|)
block|{
comment|// step 2: remove the recipe
try|try
block|{
if|if
condition|(
name|ruleStore
operator|.
name|removeRecipe
argument_list|(
name|recipeId
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Recipe {} has been removed correctly. Note that its rules will be removed separately."
argument_list|,
name|recipeId
argument_list|)
expr_stmt|;
block|}
else|else
name|log
operator|.
name|error
argument_list|(
literal|"Recipe {} cannot be removed."
argument_list|,
name|recipeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeEliminationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The recipe "
operator|+
name|engineConfiguration
operator|.
name|getRecipeId
argument_list|()
operator|+
literal|" doesn't exist"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// step 3: clear OntoNet resources
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|scope
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|onManager
operator|.
name|deregisterScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"OntoNet resources released : scope {}"
argument_list|,
name|scope
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|RefactorEnhancementEngine
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fetch the OWLOntology containing the graph associated to an entity from Linked Data. It uses the Entity      * Hub for accessing LOD and fetching entities.      *       * @param entityURI      *            {@link String}      * @return the {@link OWLOntology} of the entity      */
specifier|private
name|MGraph
name|populateWithEntity
parameter_list|(
name|String
name|entityURI
parameter_list|,
name|MGraph
name|target
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Requesting signature of entity {}"
argument_list|,
name|entityURI
argument_list|)
expr_stmt|;
name|MGraph
name|graph
init|=
name|target
operator|!=
literal|null
condition|?
name|target
else|:
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
comment|// Query the Entity Hub
name|Entity
name|signature
init|=
name|referencedSiteManager
operator|.
name|getEntity
argument_list|(
name|entityURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|signature
operator|!=
literal|null
condition|)
block|{
name|RdfRepresentation
name|rdfSignature
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|toRdfRepresentation
argument_list|(
name|signature
operator|.
name|getRepresentation
argument_list|()
argument_list|)
decl_stmt|;
name|graph
operator|.
name|addAll
argument_list|(
name|rdfSignature
operator|.
name|getRdfGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|graph
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|ServiceProperties
operator|.
name|ORDERING_POST_PROCESSING
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Method for adding ontologies to the scope core ontology.      *<ol>      *<li>Get all the ontologies from the property.</li>      *<li>Create a base scope.</li>      *<li>Retrieve the ontology space from the scope.</li>      *<li>Add the ontologies to the scope via ontology space.</li>      *</ol>      */
specifier|private
name|void
name|initEngine
parameter_list|(
name|RefactorEnhancementEngineConf
name|engineConfiguration
parameter_list|)
block|{
comment|// IRI dulcifierScopeIRI = IRI.create((String) context.getProperties().get(SCOPE));
name|String
name|scopeId
init|=
name|engineConfiguration
operator|.
name|getScope
argument_list|()
decl_stmt|;
comment|// Create or get the scope with the configured ID
try|try
block|{
name|scope
operator|=
name|onManager
operator|.
name|createOntologyScope
argument_list|(
name|scopeId
argument_list|)
expr_stmt|;
comment|// No need to deactivate a newly created scope.
block|}
catch|catch
parameter_list|(
name|DuplicateIDException
name|e
parameter_list|)
block|{
name|scope
operator|=
name|onManager
operator|.
name|getScope
argument_list|(
name|scopeId
argument_list|)
expr_stmt|;
name|onManager
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// All resolvable ontologies stated in the configuration are loaded into the core space.
name|OntologySpace
name|ontologySpace
init|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
decl_stmt|;
name|ontologySpace
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|String
index|[]
name|coreScopeOntologySet
init|=
name|engineConfiguration
operator|.
name|getScopeCoreOntologies
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|failed
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Will now load requested ontology into the core space of scope '{}'."
argument_list|,
name|scopeId
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|sharedManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|IRI
name|physicalIRI
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|coreScopeOntologySet
operator|.
name|length
condition|;
name|o
operator|++
control|)
block|{
name|String
name|url
init|=
name|coreScopeOntologySet
index|[
name|o
index|]
decl_stmt|;
try|try
block|{
name|physicalIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// TODO replace with a Clerezza equivalent
name|ontologySpace
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologyIRISource
argument_list|(
name|physicalIRI
argument_list|,
name|sharedManager
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load ontology from physical location "
operator|+
name|physicalIRI
operator|+
literal|" Continuing with next..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Ontology space {} was found locked for modification. Cannot populate."
argument_list|,
name|ontologySpace
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|success
control|)
name|log
operator|.
name|info
argument_list|(
literal|">> {} : SUCCESS"
argument_list|,
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|failed
control|)
name|log
operator|.
name|info
argument_list|(
literal|">> {} : FAILED"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ontologySpace
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|onManager
operator|.
name|containsScope
argument_list|(
name|scopeId
argument_list|)
condition|)
name|onManager
operator|.
name|registerScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|onManager
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/*          * The first thing to do is to create a recipe in the rule store that can be used by the engine to          * refactor the enhancement graphs.          */
name|String
name|recipeId
init|=
name|engineConfiguration
operator|.
name|getRecipeId
argument_list|()
decl_stmt|;
name|Recipe
name|recipe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|createRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistingRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"A recipe with ID {} already exists in the store."
argument_list|,
name|recipeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recipe
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initialised blank recipe with ID {}"
argument_list|,
name|recipeId
argument_list|)
expr_stmt|;
comment|/*              * The set of rule to put in the recipe can be provided by the user. A default set of rules is              * provided in /META-INF/default/seo_rules.sem. Use the property engine.refactor in the felix              * console to pass to the engine your set of rules.              */
name|String
name|recipeLocation
init|=
name|engineConfiguration
operator|.
name|getRecipeLocation
argument_list|()
decl_stmt|;
name|InputStream
name|recipeStream
init|=
literal|null
decl_stmt|;
name|String
name|recipeString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|recipeLocation
operator|!=
literal|null
operator|&&
operator|!
name|recipeLocation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Dereferencer
name|dereferencer
init|=
operator|new
name|DereferencerImpl
argument_list|()
decl_stmt|;
try|try
block|{
name|recipeStream
operator|=
name|dereferencer
operator|.
name|resolve
argument_list|(
name|recipeLocation
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loaded recipe from external source {}"
argument_list|,
name|recipeLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Recipe Stream is null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO remove this part (or manage it better in the @Activate method).
name|String
name|loc
init|=
literal|"/META-INF/default/seo_rules.sem"
decl_stmt|;
name|recipeStream
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loaded default recipe in {}."
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recipeStream
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|recipeStream
argument_list|)
argument_list|)
decl_stmt|;
name|recipeString
operator|=
literal|""
expr_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|recipeString
operator|+=
name|line
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load Refactor Engine recipe from stream. Aborting read. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|recipeString
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Recipe content follows :\n{}"
argument_list|,
name|recipeString
argument_list|)
expr_stmt|;
if|if
condition|(
name|recipeString
operator|!=
literal|null
condition|)
block|{
name|ruleStore
operator|.
name|addRulesToRecipe
argument_list|(
name|recipe
argument_list|,
name|recipeString
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added rules to recipe {}"
argument_list|,
name|recipeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

