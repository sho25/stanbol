begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|zemanta
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|zemanta
operator|.
name|ZemantaOntologyEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_CATEGORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
import|;
end_import

begin_comment
comment|/**  * Apache Stanbol Enhancer Zemanta enhancement engine.  * This enhancement engine uses the the Zemanta API for enhancing content.  * See http://developer.zemanta.com  * To run this engine you need a Zemanta API key configured (see README)  *<p>  * For detailed information on the mappings of Zemanta annotations to Stanbol  * Enhancer enhancements see   *<a>http://wiki.iks-project.eu/index.php/ZemantaEnhancementEngine</a>  *<p>  * This implementation currently only provides Stanbol Enhancer enhancements for  * Zemanta Recognitions.  *  * @author michaelmarth  * @author Rupert Westenthaler  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ZemantaEnhancementEngine
implements|implements
name|EnhancementEngine
block|{
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|API_KEY_PROPERTY
init|=
literal|"org.apache.stanbol.enhancer.engines.zemanta.key"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DMOZ_BASE_URL
init|=
literal|"http://www.dmoz.org/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZEMANTA_DMOZ_PREFIX
init|=
literal|"Top/"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEXT_PLAIN_MIMETYPE
init|=
literal|"text/plain"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEXT_HTML_MIMETYPE
init|=
literal|"text/html"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZemantaEnhancementEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|key
decl_stmt|;
specifier|public
name|LiteralFactory
name|literalFactory
decl_stmt|;
specifier|protected
name|BundleContext
name|bundleContext
decl_stmt|;
annotation|@
name|Activate
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|IOException
block|{
name|bundleContext
operator|=
name|ce
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|ce
operator|!=
literal|null
condition|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|key
operator|=
name|properties
operator|.
name|get
argument_list|(
name|API_KEY_PROPERTY
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|warnKeyMissing
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"found Zemanta API key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|warnKeyMissing
argument_list|()
expr_stmt|;
block|}
comment|//init the LiteralFactory
name|literalFactory
operator|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|warnKeyMissing
parameter_list|()
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No Zemanata API key configured. Zemanta engine will not work properly!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
block|{
name|literalFactory
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
name|String
name|mimeType
init|=
name|ci
operator|.
name|getMimeType
argument_list|()
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
literal|2
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|TEXT_PLAIN_MIMETYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
return|return
name|ENHANCE_SYNCHRONOUS
return|;
block|}
if|if
condition|(
name|TEXT_HTML_MIMETYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
return|return
name|ENHANCE_SYNCHRONOUS
return|;
block|}
return|return
name|CANNOT_ENHANCE
return|;
block|}
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|text
decl_stmt|;
try|try
block|{
name|text
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"nothing to enhance"
argument_list|)
expr_stmt|;
return|return;
block|}
name|MGraph
name|graph
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|UriRef
name|ciId
init|=
operator|new
name|UriRef
argument_list|(
name|ci
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//we need to store the results of Zemanta in an temp graph
name|MGraph
name|results
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|ZemantaAPIWrapper
name|zemanta
init|=
operator|new
name|ZemantaAPIWrapper
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|zemanta
operator|.
name|enhance
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|//now we need to process the results and convert them into the Enhancer
comment|//annotation structure
name|processRecognition
argument_list|(
name|results
argument_list|,
name|graph
argument_list|,
name|text
argument_list|,
name|ciId
argument_list|)
expr_stmt|;
name|processCategories
argument_list|(
name|results
argument_list|,
name|graph
argument_list|,
name|ciId
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processCategories
parameter_list|(
name|MGraph
name|results
parameter_list|,
name|MGraph
name|enhancements
parameter_list|,
name|UriRef
name|ciId
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|categories
init|=
name|results
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|Category
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|categories
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|category
init|=
name|categories
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"process category "
operator|+
name|category
argument_list|)
expr_stmt|;
name|Double
name|confidence
init|=
name|parseConfidence
argument_list|(
name|results
argument_list|,
name|category
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> confidence :"
operator|+
name|confidence
argument_list|)
expr_stmt|;
comment|//now we need to follow the Target link
name|UriRef
name|target
init|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|results
argument_list|,
name|category
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|target
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
comment|//first check the the used categorisation
name|UriRef
name|categorisationScheme
init|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|results
argument_list|,
name|target
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|categorization
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|categorisationScheme
operator|!=
literal|null
operator|&&
name|categorisationScheme
operator|.
name|equals
argument_list|(
name|ZemantaOntologyEnum
operator|.
name|categorization_DMOZ
operator|.
name|getUri
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|categoryTitle
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|results
argument_list|,
name|target
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|title
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|categoryTitle
operator|!=
literal|null
condition|)
block|{
comment|//now write the Stanbol Enhancer entity enhancement
name|UriRef
name|categoryEnhancement
init|=
name|EnhancementEngineHelper
operator|.
name|createEntityEnhancement
argument_list|(
name|enhancements
argument_list|,
name|this
argument_list|,
name|ciId
argument_list|)
decl_stmt|;
comment|//write the title
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|categoryEnhancement
argument_list|,
name|ENHANCER_ENTITY_LABEL
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|categoryTitle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//write the reference
if|if
condition|(
name|categoryTitle
operator|.
name|startsWith
argument_list|(
name|ZEMANTA_DMOZ_PREFIX
argument_list|)
condition|)
block|{
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|categoryEnhancement
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
operator|new
name|UriRef
argument_list|(
name|DMOZ_BASE_URL
operator|+
name|categoryTitle
operator|.
name|substring
argument_list|(
name|ZEMANTA_DMOZ_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//write the confidence
if|if
condition|(
name|confidence
operator|!=
literal|null
condition|)
block|{
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|categoryEnhancement
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|confidence
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//we need to write the entity type and the dc:type
comment|// see http://wiki.iks-project.eu/index.php/ZemantaEnhancementEngine#Mapping_of_Categories
comment|// for more Information
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|categoryEnhancement
argument_list|,
name|DC_TYPE
argument_list|,
name|ENHANCER_CATEGORY
argument_list|)
argument_list|)
expr_stmt|;
comment|//Use the Zemanta Category as type for the referred Entity
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|categoryEnhancement
argument_list|,
name|ENHANCER_ENTITY_TYPE
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|Category
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to process category "
operator|+
name|category
operator|+
literal|" because no title is present"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to process category "
operator|+
name|category
operator|+
literal|" because categorisation scheme != DMOZ ("
operator|+
name|categorisationScheme
operator|+
literal|" != "
operator|+
name|ZemantaOntologyEnum
operator|.
name|categorization_DMOZ
operator|.
name|getUri
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to process category "
operator|+
name|category
operator|+
literal|" because no target node was found"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Processes all Zemanta Recognitions and converts them to the according      * FISE enhancements      *      * @param results      the results of the Zemanta enhancement process      * @param enhancements the graph containing the current Stanbol Enhancer      *                     enhancements      * @param text         the content of the content item as string      */
specifier|protected
name|void
name|processRecognition
parameter_list|(
name|MGraph
name|results
parameter_list|,
name|MGraph
name|enhancements
parameter_list|,
name|String
name|text
parameter_list|,
name|UriRef
name|ciId
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|recognitions
init|=
name|results
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|Recognition
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|recognitions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|recognition
init|=
name|recognitions
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"process recognition "
operator|+
name|recognition
argument_list|)
expr_stmt|;
comment|//first get everything we need for the textAnnotations
name|Double
name|confidence
init|=
name|parseConfidence
argument_list|(
name|results
argument_list|,
name|recognition
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> confidence :"
operator|+
name|confidence
argument_list|)
expr_stmt|;
name|String
name|anchor
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|results
argument_list|,
name|recognition
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|anchor
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> anchor :"
operator|+
name|anchor
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
name|textAnnotations
init|=
name|processTextAnnotation
argument_list|(
name|enhancements
argument_list|,
name|text
argument_list|,
name|ciId
argument_list|,
name|anchor
argument_list|,
name|confidence
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> number of textAnnotations :"
operator|+
name|textAnnotations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//second we need to create the EntityAnnotation that represent the
comment|//recognition
name|NonLiteral
name|object
init|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|results
argument_list|,
name|recognition
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|object
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> object :"
operator|+
name|object
argument_list|)
expr_stmt|;
comment|//The targets represent the linked entities
comment|//  ... and yes there can be more of them!
comment|//TODO: can we create an EntityAnnotation with several referred entities?
comment|//      Should we use the owl:sameAs to decide that!
name|Set
argument_list|<
name|UriRef
argument_list|>
name|sameAsSet
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|sameAs
init|=
name|EnhancementEngineHelper
operator|.
name|getReferences
argument_list|(
name|results
argument_list|,
name|object
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|owlSameAs
operator|.
name|getUri
argument_list|()
argument_list|)
init|;
name|sameAs
operator|.
name|hasNext
argument_list|()
condition|;
name|sameAsSet
operator|.
name|add
argument_list|(
name|sameAs
operator|.
name|next
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> sameAs :"
operator|+
name|sameAsSet
argument_list|)
expr_stmt|;
comment|//now parse the targets and look if there are others than the one
comment|//merged by using sameAs
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|targets
init|=
name|EnhancementEngineHelper
operator|.
name|getReferences
argument_list|(
name|results
argument_list|,
name|object
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|target
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|title
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|targets
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//the entityRef is the URL of the target
name|UriRef
name|entity
init|=
name|targets
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    -  target :"
operator|+
name|entity
argument_list|)
expr_stmt|;
name|UriRef
name|targetType
init|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|results
argument_list|,
name|entity
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|targetType
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"       o type :"
operator|+
name|targetType
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZemantaOntologyEnum
operator|.
name|targetType_RDF
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|targetType
argument_list|)
condition|)
block|{
name|String
name|targetTitle
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|results
argument_list|,
name|entity
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|title
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"       o title :"
operator|+
name|targetTitle
argument_list|)
expr_stmt|;
if|if
condition|(
name|sameAsSet
operator|.
name|contains
argument_list|(
name|entity
argument_list|)
condition|)
block|{
if|if
condition|(
name|title
operator|==
literal|null
condition|)
block|{
name|title
operator|=
name|targetTitle
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|title
operator|.
name|equals
argument_list|(
name|targetTitle
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Entities marked with owl:sameAs do use different labels '"
operator|+
name|title
operator|+
literal|"' != '"
operator|+
name|targetTitle
operator|+
literal|"'!"
argument_list|)
expr_stmt|;
block|}
comment|//else the same label used by both -> thats expected
block|}
else|else
block|{
comment|//maybe we should create an second entityEnhancement, but I think, that such a case should
comment|//not happen. So write an warning for now
name|log
operator|.
name|warn
argument_list|(
literal|"Found Target with type RDF, that is not linked with owl:sameAs to the others (this: '"
operator|+
name|entity
operator|+
literal|" | sameAs: "
operator|+
name|sameAsSet
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"  - no Enhancement for "
operator|+
name|entity
operator|+
literal|" will be created"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else -> do not process -> RDF Entities only
comment|//TODO: targetTypes are not parsed by Zemanta, therefore we can not set
comment|//      any entity types!
block|}
comment|//create the entityEnhancement
name|UriRef
name|entityEnhancement
init|=
name|EnhancementEngineHelper
operator|.
name|createEntityEnhancement
argument_list|(
name|enhancements
argument_list|,
name|this
argument_list|,
name|ciId
argument_list|)
decl_stmt|;
if|if
condition|(
name|confidence
operator|!=
literal|null
condition|)
block|{
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityEnhancement
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|confidence
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NonLiteral
name|relatedTextAnnotation
range|:
name|textAnnotations
control|)
block|{
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityEnhancement
argument_list|,
name|DC_RELATION
argument_list|,
name|relatedTextAnnotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|UriRef
name|entity
range|:
name|sameAsSet
control|)
block|{
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityEnhancement
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityEnhancement
argument_list|,
name|ENHANCER_ENTITY_LABEL
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|title
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Helper method to parse the confidence property for an resource. Zemanta      * does not the the xsd data type, because of that we need to parse the      * double value based on the string.      *      * @param tc       the graph used to query for confidence value      * @param resource the resource holding the confidence property      *      * @return the confidence of<code>null</code> if no confidence property is      *         present for the parsed resource of the value can not be converted to a      *         double value.      * @see ZemantaOntologyEnum#confidence      */
specifier|private
specifier|static
name|Double
name|parseConfidence
parameter_list|(
name|TripleCollection
name|tc
parameter_list|,
name|NonLiteral
name|resource
parameter_list|)
block|{
name|String
name|confidenceString
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|tc
argument_list|,
name|resource
argument_list|,
name|ZemantaOntologyEnum
operator|.
name|confidence
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|confidence
decl_stmt|;
if|if
condition|(
name|confidenceString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|confidence
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|confidenceString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse Float confidence for Literal value '"
operator|+
name|confidenceString
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|confidence
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|confidence
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|confidence
return|;
block|}
comment|/**      * This Methods searches/creates text annotations for anchor points of Zemanta      * extractions.      *<p>      * First this method searches for text annotations that do use the anchor as      * selected text. Second it searches for occurrences of the anchor within the      * content of the content and checks if there is an text annotation for that      * occurrence. If not it creates an new one.      *      * @param enhancements the graph containing the meta data      * @param text         the content as string      * @param ciId         the ID of the content item      * @param anchor       the anchor text      * @param confidence   the confidence to be used for newly created text annotations      *      * @return a collection of all existing/created text annotations for the parsed anchor      */
specifier|private
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
name|processTextAnnotation
parameter_list|(
name|MGraph
name|enhancements
parameter_list|,
name|String
name|text
parameter_list|,
name|UriRef
name|ciId
parameter_list|,
name|String
name|anchor
parameter_list|,
name|Double
name|confidence
parameter_list|)
block|{
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
name|textAnnotations
init|=
operator|new
name|ArrayList
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|anchorLength
init|=
name|anchor
operator|.
name|length
argument_list|()
decl_stmt|;
name|Literal
name|anchorLiteral
init|=
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|anchor
argument_list|)
decl_stmt|;
comment|//first search for existing TextAnnotations for the anchor
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
argument_list|>
name|existingTextAnnotationsMap
init|=
name|searchExistingTextAnnotations
argument_list|(
name|enhancements
argument_list|,
name|anchorLiteral
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|current
init|=
name|text
operator|.
name|indexOf
argument_list|(
name|anchor
argument_list|)
init|;
name|current
operator|>=
literal|0
condition|;
name|current
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|anchor
argument_list|,
name|current
operator|+
literal|1
argument_list|)
control|)
block|{
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
name|existingTextAnnotations
init|=
name|existingTextAnnotationsMap
operator|.
name|get
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingTextAnnotations
operator|!=
literal|null
condition|)
block|{
comment|//use the existing once
name|textAnnotations
operator|.
name|addAll
argument_list|(
name|existingTextAnnotations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we need to create an new one!
name|UriRef
name|textAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|enhancements
argument_list|,
name|this
argument_list|,
name|ciId
argument_list|)
decl_stmt|;
name|textAnnotations
operator|.
name|add
argument_list|(
name|textAnnotation
argument_list|)
expr_stmt|;
comment|//write the selection
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_START
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|current
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_END
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|current
operator|+
name|anchorLength
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
name|anchorLiteral
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO: Currently I use the confidence of the extraction, but I think this is more
comment|//      related to the annotated Entity rather to the selected text.
if|if
condition|(
name|confidence
operator|!=
literal|null
condition|)
block|{
name|enhancements
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|confidence
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO: No idea about the type of the Annotation, because we do not have an type of the entity!
comment|//      One would need to get the types from the referred Source
block|}
block|}
return|return
name|textAnnotations
return|;
block|}
comment|/**      * Search for existing TextAnnotations for an given selected text and      * returns an Map that uses the start position as an key and a list of      * text annotations as an value.      *      * @param enhancements  the graph containing the enhancements to be searched      * @param anchorLiteral the Literal representing the selected text      *      * @return Map that uses the start position as an key and a list of      *         text annotations as an value.      */
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
argument_list|>
name|searchExistingTextAnnotations
parameter_list|(
name|MGraph
name|enhancements
parameter_list|,
name|Literal
name|anchorLiteral
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|textAnnotationsIterator
init|=
name|enhancements
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
name|anchorLiteral
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
argument_list|>
name|existingTextAnnotationsMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|textAnnotationsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|subject
init|=
name|textAnnotationsIterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|//test rdfType
if|if
condition|(
name|enhancements
operator|.
name|contains
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
argument_list|)
condition|)
block|{
name|Integer
name|start
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|enhancements
argument_list|,
name|subject
argument_list|,
name|ENHANCER_START
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|literalFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|NonLiteral
argument_list|>
name|textAnnotationList
init|=
name|existingTextAnnotationsMap
operator|.
name|get
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|textAnnotationList
operator|==
literal|null
condition|)
block|{
name|textAnnotationList
operator|=
operator|new
name|ArrayList
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
expr_stmt|;
name|existingTextAnnotationsMap
operator|.
name|put
argument_list|(
name|start
argument_list|,
name|textAnnotationList
argument_list|)
expr_stmt|;
block|}
name|textAnnotationList
operator|.
name|add
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|existingTextAnnotationsMap
return|;
block|}
block|}
end_class

end_unit

