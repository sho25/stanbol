begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|PosTagsCollectionEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|PosTypeChunker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|PosTypeCollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|AnalysedText
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|AnalysedContent
import|;
end_import

begin_comment
comment|/**  * Factory to {@link #create(String, String)} {@link AnalysedContent} instances  * based on OpenNLP and the {@link TextAnalyzer} utility.<p>  * This factory allows to configure a set of POS types that are used to  * determine if {@link Token}s are processed (used to search for terms) or not.  * This configuration is used by all {@link AnalysedContent} instances created  * by using this Factory.<p>  * Preconfigured sets of POS types are available by the   * {@link PosTagsCollectionEnum}. The {@link PosTagsCollectionEnum#EN_NOUN}  * set is used as default.  *  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|OpenNlpAnalysedContentFactory
block|{
specifier|private
specifier|final
name|TextAnalyzer
name|textAnalyzer
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|languagePosTags
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The set of POS (Part-of-Speech) tags also used by the       * {@link PosTypeChunker#DEFAULT_BUILD_CHUNK_POS_TYPES} as defaults.      * This will select Nouns and foreign words as defined in the       *<a href="http://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html">      * Penn Treebank</a> tag set<p>      */
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_POS_TAGS
init|=
name|PosTagsCollectionEnum
operator|.
name|EN_NOUN
operator|.
name|getTags
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|OpenNlpAnalysedContentFactory
name|getInstance
parameter_list|(
name|TextAnalyzer
name|textAnalyzer
parameter_list|)
block|{
return|return
operator|new
name|OpenNlpAnalysedContentFactory
argument_list|(
name|textAnalyzer
argument_list|)
return|;
block|}
comment|/**      * Setter for the POS tags used to process Words in the given language.      * The<code>null</code> language is used whenever no configuration is      * available for a given language. Setting the posTags to<code>null</code>      * will remove a language from the configuration.      * If a configuration for a given language is missing and there is also no      * default configuration (e.g. after calling       *<code>setLanguagePosTags(null, null)</code>) {@link AnalysedContent}      * instances created by this factory will always return<code>false</code>      * on calls to {@link AnalysedContent#processPOS(String)};      * @param language the language      * @param posTags the pos tags      */
specifier|public
name|void
name|setLanguagePosTags
parameter_list|(
name|String
name|language
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|posTags
parameter_list|)
block|{
if|if
condition|(
name|posTags
operator|!=
literal|null
condition|)
block|{
name|languagePosTags
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|posTags
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|languagePosTags
operator|.
name|remove
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|OpenNlpAnalysedContentFactory
parameter_list|(
name|TextAnalyzer
name|textAnalyzer
parameter_list|)
block|{
if|if
condition|(
name|textAnalyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed TextAnalyzer MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|textAnalyzer
operator|=
name|textAnalyzer
expr_stmt|;
name|setLanguagePosTags
argument_list|(
literal|null
argument_list|,
name|DEFAULT_POS_TAGS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AnalysedContent
name|create
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|language
parameter_list|)
block|{
return|return
operator|new
name|OpenNlpAnalysedContent
argument_list|(
name|text
argument_list|,
name|language
argument_list|)
return|;
block|}
comment|/**      * Implementation of the {@link AnalysedContent} based on OpenNLP and the      * {@link TextAnalyzer} component      * @author Rupert Westenthaler      *      */
specifier|private
class|class
name|OpenNlpAnalysedContent
implements|implements
name|AnalysedContent
block|{
specifier|private
specifier|final
name|String
name|language
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|AnalysedText
argument_list|>
name|sentences
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|posTags
decl_stmt|;
specifier|private
name|OpenNlpAnalysedContent
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|lang
expr_stmt|;
name|this
operator|.
name|sentences
operator|=
name|textAnalyzer
operator|.
name|analyse
argument_list|(
name|text
argument_list|,
name|lang
argument_list|)
expr_stmt|;
name|this
operator|.
name|posTags
operator|=
name|PosTagsCollectionEnum
operator|.
name|getPosTagCollection
argument_list|(
name|lang
argument_list|,
name|PosTypeCollectionType
operator|.
name|NOUN
argument_list|)
expr_stmt|;
block|}
comment|/**          * Getter for the Iterator over the analysed sentences. This Method          * is expected to return always the same Iterator instance.          * @return the iterator over the analysed sentences          */
specifier|public
name|Iterator
argument_list|<
name|AnalysedText
argument_list|>
name|getAnalysedText
parameter_list|()
block|{
return|return
name|sentences
return|;
block|}
comment|/**          * Called to check if a {@link Token} should be used to search for          * Concepts within the Taxonomy based on the POS tag of the Token.          * @param posTag the POS tag to check          * @return<code>true</code> if Tokens with this POS tag should be          * included in searches. Otherwise<code>false</code>. Also returns          *<code>true</code> if no POS type configuration is available for the          * language parsed in the constructor          */
annotation|@
name|Override
specifier|public
name|Boolean
name|processPOS
parameter_list|(
name|String
name|posTag
parameter_list|)
block|{
return|return
name|posTags
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|posTags
operator|.
name|contains
argument_list|(
name|posTag
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**          * Not yet implemented.          * @param chunkTag the type of the chunk          * @return returns always<code>true</code>          */
annotation|@
name|Override
specifier|public
name|Boolean
name|processChunk
parameter_list|(
name|String
name|chunkTag
parameter_list|)
block|{
comment|// TODO implement
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|label
parameter_list|)
block|{
return|return
name|textAnalyzer
operator|.
name|getTokenizer
argument_list|(
name|language
argument_list|)
operator|.
name|tokenize
argument_list|(
name|label
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

