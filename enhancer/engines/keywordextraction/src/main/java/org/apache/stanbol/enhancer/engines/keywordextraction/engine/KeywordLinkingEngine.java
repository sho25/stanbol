begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|engine
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
operator|.
name|getFullName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|TextAnalyzerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|AnalysedContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|LinkedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinkerConfig
operator|.
name|RedirectProcessingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|LinkedEntity
operator|.
name|Occurrence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
operator|.
name|EntityhubSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
operator|.
name|OpenNlpAnalysedContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
operator|.
name|ReferencedSiteSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
operator|.
name|TrackingEntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|// the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|REFERENCED_SITE_ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|NAME_FIELD
argument_list|,
name|value
operator|=
name|EntityLinkerConfig
operator|.
name|DEFAULT_NAME_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|CASE_SENSITIVE
argument_list|,
name|boolValue
operator|=
name|EntityLinkerConfig
operator|.
name|DEFAULT_CASE_SENSITIVE_MATCHING_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|TYPE_FIELD
argument_list|,
name|value
operator|=
name|EntityLinkerConfig
operator|.
name|DEFAULT_TYPE_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|REDIRECT_FIELD
argument_list|,
name|value
operator|=
name|EntityLinkerConfig
operator|.
name|DEFAULT_REDIRECT_FIELD
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|REDIRECT_PROCESSING_MODE
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KeywordLinkingEngine
operator|.
name|REDIRECT_PROCESSING_MODE
operator|+
literal|".option.ignore"
argument_list|,
name|name
operator|=
literal|"IGNORE"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KeywordLinkingEngine
operator|.
name|REDIRECT_PROCESSING_MODE
operator|+
literal|".option.addValues"
argument_list|,
name|name
operator|=
literal|"ADD_VALUES"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KeywordLinkingEngine
operator|.
name|REDIRECT_PROCESSING_MODE
operator|+
literal|".option.follow"
argument_list|,
name|name
operator|=
literal|"FOLLOW"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"IGNORE"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|MIN_SEARCH_TOKEN_LENGTH
argument_list|,
name|intValue
operator|=
name|EntityLinkerConfig
operator|.
name|DEFAULT_MIN_SEARCH_TOKEN_LENGTH
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|KEYWORD_TOKENIZER
argument_list|,
name|boolValue
operator|=
literal|false
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|MAX_SUGGESTIONS
argument_list|,
name|intValue
operator|=
name|EntityLinkerConfig
operator|.
name|DEFAULT_SUGGESTIONS
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|PROCESSED_LANGUAGES
argument_list|,
name|value
operator|=
literal|""
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|DEFAULT_MATCHING_LANGUAGE
argument_list|,
name|value
operator|=
literal|""
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|TYPE_MAPPINGS
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|KeywordLinkingEngine
operator|.
name|DEREFERENCE_ENTITIES
argument_list|,
name|boolValue
operator|=
name|KeywordLinkingEngine
operator|.
name|DEFAULT_DEREFERENCE_ENTITIES_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|KeywordLinkingEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeywordLinkingEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This is used to check the content type of parsed {@link ContentItem}s for      * plain text      */
specifier|protected
specifier|static
specifier|final
name|String
name|TEXT_PLAIN_MIMETYPE
init|=
literal|"text/plain"
decl_stmt|;
comment|/**      * Contains the only supported mime type {@link #TEXT_PLAIN_MIMETYPE}      */
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_MIMETYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|TEXT_PLAIN_MIMETYPE
argument_list|)
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine.      * This Engine creates TextAnnotations that should not be processed by other Engines.      * Therefore it uses a lower rank than {@link ServiceProperties#ORDERING_DEFAULT}      * to ensure that other engines do not get confused      */
specifier|public
specifier|static
specifier|final
name|Integer
name|DEFAULT_ORDER
init|=
name|ServiceProperties
operator|.
name|ORDERING_DEFAULT
operator|-
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REFERENCED_SITE_ID
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.referencedSiteId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.nameField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.typeField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CASE_SENSITIVE
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.caseSensitive"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REDIRECT_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.redirectField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REDIRECT_PROCESSING_MODE
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.redirectMode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_SEARCH_TOKEN_LENGTH
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.minSearchTokenLength"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SUGGESTIONS
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.maxSuggestions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROCESSED_LANGUAGES
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.processedLanguages"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_FOUND_TOKENS
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.minFoundTokens"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MATCHING_LANGUAGE
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.defaultMatchingLanguage"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_POS_TAG_PROBABILITY
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.minPosTagProbability"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_MAPPINGS
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.typeMappings"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEYWORD_TOKENIZER
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.keywordTokenizer"
decl_stmt|;
comment|//  public static final String ENABLE_CHUNKER = "org.apache.stanbol.enhancer.engines.keywordextraction.enableChunker";
comment|/**      * Adds the dereference feature (STANBOL-333) also to this engine.      * This will be replaced by STANBOL-336.       */
specifier|public
specifier|static
specifier|final
name|String
name|DEREFERENCE_ENTITIES
init|=
literal|"org.apache.stanbol.enhancer.engines.keywordextraction.dereference"
decl_stmt|;
comment|/**      * The default state to dereference entities set to<code>true</code>.      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DEREFERENCE_ENTITIES_STATE
init|=
literal|true
decl_stmt|;
comment|/**      * Additional fields added for dereferenced entities      */
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|DEREFERENCE_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getFullName
argument_list|(
literal|"rdfs:comment"
argument_list|)
argument_list|,
name|getFullName
argument_list|(
literal|"geo:lat"
argument_list|)
argument_list|,
name|getFullName
argument_list|(
literal|"geo:long"
argument_list|)
argument_list|,
name|getFullName
argument_list|(
literal|"foaf:depiction"
argument_list|)
argument_list|,
name|getFullName
argument_list|(
literal|"dbp-ont:thumbnail"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The dereferenceEntitiesState as set in {@link #activateEntityDereference(Dictionary)}      */
specifier|private
name|boolean
name|dereferenceEntitiesState
decl_stmt|;
comment|/**      * Default set of languages. This is an empty set indicating that texts in any      * language are processed.       */
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_LANGUAGES
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_MIN_POS_TAG_PROBABILITY
init|=
literal|0.8
decl_stmt|;
comment|/**      * The languages this engine is configured to enhance. An empty List is      * considered as active for any language      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|languages
init|=
name|DEFAULT_LANGUAGES
decl_stmt|;
comment|/**      * The literal representing the LangIDEngine as creator.      */
specifier|public
specifier|static
specifier|final
name|Literal
name|LANG_ID_ENGINE_NAME
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
literal|"org.apache.stanbol.enhancer.engines.langid.LangIdEnhancementEngine"
argument_list|)
decl_stmt|;
specifier|private
name|EntitySearcher
name|entitySearcher
decl_stmt|;
specifier|private
name|EntityLinkerConfig
name|linkerConfig
decl_stmt|;
specifier|private
name|TextAnalyzerConfig
name|nlpConfig
decl_stmt|;
comment|/**      * The reference to the OpenNLP component      */
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
specifier|private
name|OpenNLP
name|openNLP
decl_stmt|;
comment|//TextAnalyzer was changed to have a scope of a single request ( call to
comment|//#computeEnhancement!
comment|//private TextAnalyzer textAnalyser;
comment|/**      * Used to create {@link AnalysedContent} instances for parsed content items      */
specifier|private
name|OpenNlpAnalysedContentFactory
name|analysedContentFactory
decl_stmt|;
comment|/**      * The literalFactory used to create typed literals      */
specifier|private
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For this engine that means it is necessary to check if the used {@link ReferencedSite} can operate      * offline or not.      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      */
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      *       * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
comment|/**      * Default constructor as used by OSGI. This expects that       * {@link #activate(ComponentContext)} is called before usage      */
specifier|public
name|KeywordLinkingEngine
parameter_list|()
block|{     }
comment|/**      * Internal Constructor used by {@link #createInstance(OpenNLP, EntitySearcher, EntityLinkerConfig)}      * @param openNLP      * @param entitySearcher      * @param config      */
specifier|protected
name|KeywordLinkingEngine
parameter_list|(
name|OpenNLP
name|openNLP
parameter_list|,
name|EntitySearcher
name|entitySearcher
parameter_list|,
name|TextAnalyzerConfig
name|nlpConfig
parameter_list|,
name|EntityLinkerConfig
name|linkingConfig
parameter_list|)
block|{
name|this
operator|.
name|openNLP
operator|=
name|openNLP
expr_stmt|;
name|this
operator|.
name|linkerConfig
operator|=
name|linkingConfig
operator|!=
literal|null
condition|?
name|linkingConfig
else|:
operator|new
name|EntityLinkerConfig
argument_list|()
expr_stmt|;
name|this
operator|.
name|nlpConfig
operator|=
name|nlpConfig
operator|!=
literal|null
condition|?
name|nlpConfig
else|:
operator|new
name|TextAnalyzerConfig
argument_list|()
expr_stmt|;
name|this
operator|.
name|analysedContentFactory
operator|=
name|OpenNlpAnalysedContentFactory
operator|.
name|getInstance
argument_list|(
name|openNLP
argument_list|,
name|nlpConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|entitySearcher
operator|=
name|entitySearcher
expr_stmt|;
block|}
comment|/**      * Allows to create an instance that can be used outside of an OSGI      * environment. This is mainly intended for unit tests.      * @param openNLP The {@link OpenNLP} instance used for natural language processing      * @param entitySearcher the searcher used to lookup terms      * @param config the configuration or<code>null</code> to use the defaults      * @return the created engine instance      */
specifier|public
specifier|static
name|KeywordLinkingEngine
name|createInstance
parameter_list|(
name|OpenNLP
name|openNLP
parameter_list|,
name|EntitySearcher
name|entitySearcher
parameter_list|,
name|TextAnalyzerConfig
name|nlpConfig
parameter_list|,
name|EntityLinkerConfig
name|linkingConfig
parameter_list|)
block|{
return|return
operator|new
name|KeywordLinkingEngine
argument_list|(
name|openNLP
argument_list|,
name|entitySearcher
argument_list|,
name|nlpConfig
argument_list|,
name|linkingConfig
argument_list|)
return|;
block|}
comment|/**      * Checks if the parsed language is enabled for processing.      * @param language The language to process      * @return the processing state for the parsed language.      */
specifier|protected
name|boolean
name|isProcessableLanguages
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|languages
operator|.
name|isEmpty
argument_list|()
operator|||
name|languages
operator|.
name|contains
argument_list|(
name|language
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|DEFAULT_ORDER
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|ENHANCE_ASYNC
return|;
comment|//KeywordLinking now supports async processing
block|}
else|else
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|isOfflineMode
argument_list|()
operator|&&
operator|!
name|entitySearcher
operator|.
name|supportsOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
literal|"Offline mode is not supported by the Component used to lookup Entities"
argument_list|)
throw|;
block|}
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPart
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No ContentPart with a supported Mime Type"
operator|+
literal|"found for ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|"(supported: '"
operator|+
name|SUPPORTED_MIMETYPES
operator|+
literal|"') -> this indicates that canEnhance was"
operator|+
literal|"NOT called and indicates a bug in the used EnhancementJobManager!"
argument_list|)
throw|;
block|}
name|String
name|text
decl_stmt|;
try|try
block|{
name|text
operator|=
name|ContentItemHelper
operator|.
name|getText
argument_list|(
name|contentPart
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to extract "
operator|+
literal|" text from ContentPart %s of ContentItem %s!"
argument_list|,
name|contentPart
operator|.
name|getKey
argument_list|()
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// TODO: make the length of the data a field of the ContentItem
comment|// interface to be able to filter out empty items in the canEnhance
comment|// method
name|log
operator|.
name|warn
argument_list|(
literal|"ContentPart {} of ContentItem does not contain any Text to extract knowledge from"
argument_list|,
name|contentPart
operator|.
name|getKey
argument_list|()
argument_list|,
name|ci
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//Determine the language
name|String
name|language
decl_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|language
operator|=
name|extractLanguage
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isProcessableLanguages
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"computeEnhancements for ContentItem {} language {} text={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|language
block|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|text
argument_list|,
literal|100
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|EntityLinker
name|entityLinker
init|=
operator|new
name|EntityLinker
argument_list|(
name|analysedContentFactory
operator|.
name|create
argument_list|(
name|text
argument_list|,
name|language
argument_list|)
argument_list|,
name|entitySearcher
argument_list|,
name|linkerConfig
argument_list|)
decl_stmt|;
comment|//process
name|entityLinker
operator|.
name|process
argument_list|()
expr_stmt|;
comment|//write results (requires a write lock)
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|writeEnhancements
argument_list|(
name|ci
argument_list|,
name|entityLinker
operator|.
name|getLinkedEntities
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"ignore ContentItem {} because language '{}' is not configured to"
operator|+
literal|"be processed by this engine."
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes the Enhancements for the {@link LinkedEntity LinkedEntities}      * extracted from the parsed ContentItem      * @param ci      * @param linkedEntities      * @param language      */
specifier|private
name|void
name|writeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Collection
argument_list|<
name|LinkedEntity
argument_list|>
name|linkedEntities
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|Language
name|languageObject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languageObject
operator|=
operator|new
name|Language
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|LinkedEntity
name|linkedEntity
range|:
name|linkedEntities
control|)
block|{
name|Collection
argument_list|<
name|UriRef
argument_list|>
name|textAnnotations
init|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|(
name|linkedEntity
operator|.
name|getOccurrences
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//first create the TextAnnotations for the Occurrences
for|for
control|(
name|Occurrence
name|occurrence
range|:
name|linkedEntity
operator|.
name|getOccurrences
argument_list|()
control|)
block|{
name|UriRef
name|textAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|textAnnotations
operator|.
name|add
argument_list|(
name|textAnnotation
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_START
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|getStart
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_END
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|getEnd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occurrence
operator|.
name|getContext
argument_list|()
argument_list|,
name|languageObject
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occurrence
operator|.
name|getSelectedText
argument_list|()
argument_list|,
name|languageObject
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|linkedEntity
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|UriRef
name|dcType
range|:
name|linkedEntity
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|DC_TYPE
argument_list|,
name|dcType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//now the EntityAnnotations for the Suggestions
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
name|UriRef
name|entityAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createEntityEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|//should we use the label used for the match, or search the
comment|//representation for the best label ... currently its the matched one
name|Text
name|label
init|=
name|suggestion
operator|.
name|getBestLabel
argument_list|(
name|linkerConfig
operator|.
name|getNameField
argument_list|()
argument_list|,
name|language
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_ENTITY_LABEL
argument_list|,
name|label
operator|.
name|getLanguage
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|PlainLiteralImpl
argument_list|(
name|label
operator|.
name|getText
argument_list|()
argument_list|)
else|:
operator|new
name|PlainLiteralImpl
argument_list|(
name|label
operator|.
name|getText
argument_list|()
argument_list|,
operator|new
name|Language
argument_list|(
name|label
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
operator|new
name|UriRef
argument_list|(
name|suggestion
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|suggestionTypes
init|=
name|suggestion
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getReferences
argument_list|(
name|linkerConfig
operator|.
name|getTypeField
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|suggestionTypes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_ENTITY_TYPE
argument_list|,
operator|new
name|UriRef
argument_list|(
name|suggestionTypes
operator|.
name|next
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|suggestion
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|UriRef
name|textAnnotation
range|:
name|textAnnotations
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|DC_RELATION
argument_list|,
name|textAnnotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//in case dereferencing of Entities is enabled we need also to
comment|//add the RDF data for entities
if|if
condition|(
name|dereferenceEntitiesState
condition|)
block|{
name|metadata
operator|.
name|addAll
argument_list|(
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|toRdfRepresentation
argument_list|(
name|suggestion
operator|.
name|getRepresentation
argument_list|()
argument_list|)
operator|.
name|getRdfGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Extracts the language of the parsed ContentItem by using      * {@link EnhancementEngineHelper#getLanguage(ContentItem)} and "en" as      * default.      * @param ci the content item      * @return the language      */
specifier|private
name|String
name|extractLanguage
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
name|String
name|lang
init|=
name|EnhancementEngineHelper
operator|.
name|getLanguage
argument_list|(
name|ci
argument_list|)
decl_stmt|;
comment|//        if(lang != null){
comment|//        MGraph metadata = ci.getMetadata();
comment|//        Iterator<Triple> langaugeEnhancementCreatorTriples =
comment|//            metadata.filter(null, Properties.DC_CREATOR, LANG_ID_ENGINE_NAME);
comment|//        if(langaugeEnhancementCreatorTriples.hasNext()){
comment|//            String lang = EnhancementEngineHelper.getString(metadata,
comment|//                langaugeEnhancementCreatorTriples.next().getSubject(),
comment|//                Properties.DC_LANGUAGE);
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
block|{
return|return
name|lang
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to extract language for ContentItem %s! The Enhancement of the %s is missing the %s property"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|LANG_ID_ENGINE_NAME
operator|.
name|getLexicalForm
argument_list|()
block|,
name|Properties
operator|.
name|DC_LANGUAGE
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|" ... return 'en' as default"
argument_list|)
expr_stmt|;
return|return
literal|"en"
return|;
block|}
comment|//        } else {
comment|//            log.warn("Unable to extract language for ContentItem %s! Is the %s active?",
comment|//                ci.getUri().getUnicodeString(),LANG_ID_ENGINE_NAME.getLexicalForm());
comment|//            log.warn(" ... return 'en' as default");
comment|//            return "en";
comment|//        }
block|}
comment|/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -      * Methods for activate() and deactivate() the properties configureable via      * OSGI.      *       * NOTEs:      * Directly calling super.activate and super.deactivate      * is possible but might not be applicable in all cases.      * The activate**(...) and deactivate**() Methods are intended to be      * called by subclasses that need more control over the initialisation      * process.      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -      */
comment|/**      * Activates this Engine. Subclasses should not call this method but rather      * call<ul>      *<li> {@link #activateEntitySearcher(ComponentContext, Dictionary)}      *<li> {@link #initEntityLinkerConfig(Dictionary, EntityLinkerConfig)} and      *<li> {@link #activateTextAnalyzerConfig(Dictionary)}      *<li> {@link #dereferenceEntitiesState} (needs to be called after       * {@link #initEntityLinkerConfig(Dictionary, EntityLinkerConfig)})      *</ul>      * if applicable.      * @param context the Component context      * @throws ConfigurationException if the required {@link #REFERENCED_SITE_ID}      * configuration is missing or any of the other properties has an illegal value      */
annotation|@
name|Activate
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|activateTextAnalyzerConfig
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|activateEntitySearcher
argument_list|(
name|context
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|activateEntityLinkerConfig
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|activateEntityDereference
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Inits the {@link #dereferenceEntitiesState} based on the      * {@link #DEREFERENCE_ENTITIES} configuration.      * @param properties the configuration      */
specifier|protected
specifier|final
name|void
name|activateEntityDereference
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEREFERENCE_ENTITIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|dereferenceEntitiesState
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dereferenceEntitiesState
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dereferenceEntitiesState
operator|=
name|DEFAULT_DEREFERENCE_ENTITIES_STATE
expr_stmt|;
block|}
if|if
condition|(
name|dereferenceEntitiesState
condition|)
block|{
name|linkerConfig
operator|.
name|getSelectedFields
argument_list|()
operator|.
name|addAll
argument_list|(
name|DEREFERENCE_FIELDS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Initialise the {@link TextAnalyzer} component.<p>      * Currently this includes the following configurations:<ul>      *<li>{@link #PROCESSED_LANGUAGES}: If no configuration is present the      * default (process all languages) is used.      *<li> {@value #MIN_POS_TAG_PROBABILITY}: If no configuration is      * present the #DEFAULT_MIN_POS_TAG_PROBABILITY is used      * languages based on the value of the      *       * @param configuration the OSGI component configuration      */
specifier|protected
specifier|final
name|void
name|activateTextAnalyzerConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|nlpConfig
operator|=
operator|new
name|TextAnalyzerConfig
argument_list|()
expr_stmt|;
name|Object
name|value
decl_stmt|;
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|PROCESSED_LANGUAGES
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|languages
operator|=
name|DEFAULT_LANGUAGES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|languageArray
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|languages
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|language
range|:
name|languageArray
control|)
block|{
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|language
operator|=
name|language
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languages
operator|.
name|add
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|MIN_POS_TAG_PROBABILITY
argument_list|)
expr_stmt|;
name|double
name|minPosTagProb
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|minPosTagProb
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|minPosTagProb
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_POS_TAG_PROBABILITY
argument_list|,
literal|"Unable to parse the min POS tag probability from the parsed value "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|minPosTagProb
operator|=
name|DEFAULT_MIN_POS_TAG_PROBABILITY
expr_stmt|;
block|}
if|if
condition|(
name|minPosTagProb
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_POS_TAG_PROBABILITY
argument_list|,
literal|"The configured min POS tag probability MUST BE in the range [0..1] "
operator|+
literal|"or< 0 to deactivate this feature (parsed value "
operator|+
name|value
operator|+
literal|")!"
argument_list|)
throw|;
block|}
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|KEYWORD_TOKENIZER
argument_list|)
expr_stmt|;
comment|//the keyword tokenizer config
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|nlpConfig
operator|.
name|forceKeywordTokenizer
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nlpConfig
operator|.
name|forceKeywordTokenizer
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nlpConfig
operator|.
name|setMinPosTagProbability
argument_list|(
name|minPosTagProb
argument_list|)
expr_stmt|;
name|analysedContentFactory
operator|=
name|OpenNlpAnalysedContentFactory
operator|.
name|getInstance
argument_list|(
name|openNLP
argument_list|,
name|nlpConfig
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures the parsed {@link EntityLinkerConfig} with the values of the      * following properties:<ul>      *<li>{@link #NAME_FIELD}      *<li>{@link #TYPE_FIELD}      *<li>{@link #REDIRECT_FIELD}      *<li>{@link #REDIRECT_PROCESSING_MODE}      *<li>{@link #MAX_SUGGESTIONS}      *<li>{@link #MIN_SEARCH_TOKEN_LENGTH}      *<li>{@link #MIN_FOUND_TOKENS}      *</ul>      * This Method create an new {@link EntityLinkerConfig} instance only if      *<code>{@link #linkerConfig} == null</code>. If the instance is already initialised      * that all current values for keys missing in the parsed configuration are      * preserved.      * @param configuration the configuration      * @throws ConfigurationException In case of an illegal value in the parsed configuration.      * Note that all configuration are assumed as optional, therefore missing values will not      * case a ConfigurationException.      */
specifier|protected
name|void
name|activateEntityLinkerConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|linkerConfig
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|linkerConfig
operator|=
operator|new
name|EntityLinkerConfig
argument_list|()
expr_stmt|;
block|}
name|Object
name|value
decl_stmt|;
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|NAME_FIELD
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|NAME_FIELD
argument_list|,
literal|"The configured name field MUST NOT be empty"
argument_list|)
throw|;
block|}
name|linkerConfig
operator|.
name|setNameField
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//init case sensitivity
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|CASE_SENSITIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|linkerConfig
operator|.
name|setCaseSensitiveMatchingState
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|linkerConfig
operator|.
name|setCaseSensitiveMatchingState
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//if NULL or empty use default
comment|//init TYPE_FIELD
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|TYPE_FIELD
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|TYPE_FIELD
argument_list|,
literal|"The configured name field MUST NOT be empty"
argument_list|)
throw|;
block|}
name|linkerConfig
operator|.
name|setTypeField
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//init REDIRECT_FIELD
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|REDIRECT_FIELD
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|NAME_FIELD
argument_list|,
literal|"The configured name field MUST NOT be empty"
argument_list|)
throw|;
block|}
name|linkerConfig
operator|.
name|setRedirectField
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//init MAX_SUGGESTIONS
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|MAX_SUGGESTIONS
argument_list|)
expr_stmt|;
name|Integer
name|maxSuggestions
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|maxSuggestions
operator|=
operator|(
name|Integer
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|maxSuggestions
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MAX_SUGGESTIONS
argument_list|,
literal|"Values MUST be valid Integer values> 0"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|maxSuggestions
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|maxSuggestions
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxSuggestions
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MAX_SUGGESTIONS
argument_list|,
literal|"Values MUST be valid Integer values> 0"
argument_list|)
throw|;
block|}
name|linkerConfig
operator|.
name|setMaxSuggestions
argument_list|(
name|maxSuggestions
argument_list|)
expr_stmt|;
block|}
comment|//init MIN_FOUND_TOKENS
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|MIN_FOUND_TOKENS
argument_list|)
expr_stmt|;
name|Integer
name|minFoundTokens
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|minFoundTokens
operator|=
operator|(
name|Integer
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|minFoundTokens
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_FOUND_TOKENS
argument_list|,
literal|"Values MUST be valid Integer values> 0"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|minFoundTokens
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|minFoundTokens
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minFoundTokens
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_FOUND_TOKENS
argument_list|,
literal|"Values MUST be valid Integer values> 0"
argument_list|)
throw|;
block|}
name|linkerConfig
operator|.
name|setMinFoundTokens
argument_list|(
name|minFoundTokens
argument_list|)
expr_stmt|;
block|}
comment|// init MIN_SEARCH_TOKEN_LENGTH
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|MIN_SEARCH_TOKEN_LENGTH
argument_list|)
expr_stmt|;
name|Integer
name|minSearchTokenLength
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|minSearchTokenLength
operator|=
operator|(
name|Integer
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|minSearchTokenLength
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_SEARCH_TOKEN_LENGTH
argument_list|,
literal|"Values MUST be valid Integer values> 0"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|minSearchTokenLength
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|minSearchTokenLength
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minSearchTokenLength
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_SEARCH_TOKEN_LENGTH
argument_list|,
literal|"Values MUST be valid Integer values> 0"
argument_list|)
throw|;
block|}
name|linkerConfig
operator|.
name|setMaxSuggestions
argument_list|(
name|minSearchTokenLength
argument_list|)
expr_stmt|;
block|}
comment|//init the REDIRECT_PROCESSING_MODE
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|REDIRECT_PROCESSING_MODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|linkerConfig
operator|.
name|setRedirectProcessingMode
argument_list|(
name|RedirectProcessingMode
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|REDIRECT_PROCESSING_MODE
argument_list|,
literal|"Values MUST be one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|RedirectProcessingMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|//init the DEFAULT_LANGUAGE
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|DEFAULT_MATCHING_LANGUAGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|defaultLang
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultLang
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|linkerConfig
operator|.
name|setDefaultLanguage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defaultLang
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DEFAULT_MATCHING_LANGUAGE
argument_list|,
literal|"Illegal language code '"
operator|+
name|defaultLang
operator|+
literal|"'! Language Codes MUST BE at least 2 chars long."
argument_list|)
throw|;
block|}
else|else
block|{
name|linkerConfig
operator|.
name|setDefaultLanguage
argument_list|(
name|defaultLang
argument_list|)
expr_stmt|;
block|}
block|}
comment|//init type mappings
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|TYPE_MAPPINGS
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
comment|//support array
name|value
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
comment|//single value
name|value
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
comment|//and collection
name|log
operator|.
name|info
argument_list|(
literal|"Init Type Mappings"
argument_list|)
expr_stmt|;
name|configs
label|:
for|for
control|(
name|Object
name|o
operator|:
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|usage
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"useages: "
argument_list|)
decl_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"a: '{uri}' short for {uri}> {uri} | "
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"b: '{source1};{source2};..;{sourceN}> {target}'"
argument_list|)
expr_stmt|;
name|String
index|[]
name|config
init|=
name|o
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|">"
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid Type Mapping Config '{}': Missing Source Type ({}) -> ignore this config"
argument_list|,
name|o
argument_list|,
name|usage
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
name|String
index|[]
name|sourceTypes
init|=
name|config
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceTypes
operator|.
name|length
operator|>
literal|1
operator|&&
operator|(
name|config
operator|.
name|length
operator|<
literal|2
operator|||
name|config
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid Type Mapping Config '{}': Missing Target Type '{}' ({}) -> ignore this config"
argument_list|,
name|o
argument_list|,
name|usage
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
name|String
name|targetType
init|=
name|config
operator|.
name|length
operator|<
literal|2
condition|?
name|sourceTypes
index|[
literal|0
index|]
else|:
name|config
index|[
literal|1
index|]
decl_stmt|;
name|targetType
operator|=
name|getFullName
argument_list|(
name|targetType
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|//support for ns:localName
try|try
block|{
comment|//validate
operator|new
name|URI
argument_list|(
name|targetType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid URI '{}' in Type Mapping Config '{}' -> ignore this config"
argument_list|,
name|sourceTypes
index|[
literal|0
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
name|UriRef
name|targetUri
init|=
operator|new
name|UriRef
argument_list|(
name|targetType
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sourceType
range|:
name|sourceTypes
control|)
block|{
if|if
condition|(
operator|!
name|sourceType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sourceType
operator|=
name|getFullName
argument_list|(
name|sourceType
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|//support for ns:localName
try|try
block|{
comment|//validate
operator|new
name|URI
argument_list|(
name|sourceType
argument_list|)
expr_stmt|;
name|UriRef
name|old
init|=
name|linkerConfig
operator|.
name|setTypeMapping
argument_list|(
name|sourceType
argument_list|,
name|targetUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"> add type mapping {}> {}"
argument_list|,
name|sourceType
argument_list|,
name|targetType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"> set type mapping {}> {} (old: {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|sourceType
block|,
name|targetType
block|,
name|old
operator|.
name|getUnicodeString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid URI '{}' in Type Mapping Config '{}' -> ignore this source type"
argument_list|,
name|sourceTypes
index|[
literal|0
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No Type mappings configured"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Initialise the {@link #entitySearcher} based on the value of the      * {@link #REFERENCED_SITE_ID} property in the parsed configuration      * @param context      * @param configuration      * @throws ConfigurationException      */
end_comment

begin_function
specifier|protected
name|void
name|activateEntitySearcher
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|value
init|=
name|configuration
operator|.
name|get
argument_list|(
name|REFERENCED_SITE_ID
argument_list|)
decl_stmt|;
comment|//init the EntitySource
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|REFERENCED_SITE_ID
argument_list|,
literal|"The ID of the Referenced Site is a required Parameter and MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|String
name|refSiteId
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|refSiteId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|REFERENCED_SITE_ID
argument_list|,
literal|"The ID of the Referenced Site is a required Parameter and MUST NOT be an empty String!"
argument_list|)
throw|;
block|}
comment|//TODO: make limit configurable!
if|if
condition|(
name|Entityhub
operator|.
name|ENTITYHUB_IDS
operator|.
name|contains
argument_list|(
name|refSiteId
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|entitySearcher
operator|=
operator|new
name|EntityhubSearcher
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entitySearcher
operator|=
operator|new
name|ReferencedSiteSearcher
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|refSiteId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Deactivates this Engine. Subclasses should not call this method but rather      * call<ul>      *<li> {@link #deactivateEntitySearcher()}      *<li> {@link #deactivateEntityLinkerConfig()} and      *<li> {@link #deactivateProcessedLanguages())}      *</ul>      * @param context the context (not used)      */
end_comment

begin_function
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|deactivateEntitySearcher
argument_list|()
expr_stmt|;
name|deactivateTextAnalyzerConfig
argument_list|()
expr_stmt|;
name|deactivateEntityLinkerConfig
argument_list|()
expr_stmt|;
name|deactivateEntityDereference
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Resets the {@link #dereferenceEntitiesState} to       * {@link #DEFAULT_DEREFERENCE_ENTITIES_STATE}      */
end_comment

begin_function
specifier|protected
specifier|final
name|void
name|deactivateEntityDereference
parameter_list|()
block|{
name|dereferenceEntitiesState
operator|=
name|DEFAULT_DEREFERENCE_ENTITIES_STATE
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Deactivates the {@link TextAnalyzer} as well as resets the set of languages      * to process to {@link #DEFAULT_LANGUAGES}      */
end_comment

begin_function
specifier|protected
name|void
name|deactivateTextAnalyzerConfig
parameter_list|()
block|{
name|this
operator|.
name|nlpConfig
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|analysedContentFactory
operator|=
literal|null
expr_stmt|;
name|languages
operator|=
name|DEFAULT_LANGUAGES
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * sets the {@link EntityLinkerConfig} to<code>null</code>      */
end_comment

begin_function
specifier|protected
name|void
name|deactivateEntityLinkerConfig
parameter_list|()
block|{
name|linkerConfig
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Closes and resets the EntitySearcher. Also calls      * {@link TrackingEntitySearcher#close()} if applicable.       */
end_comment

begin_function
specifier|protected
name|void
name|deactivateEntitySearcher
parameter_list|()
block|{
if|if
condition|(
name|entitySearcher
operator|instanceof
name|TrackingEntitySearcher
argument_list|<
name|?
argument_list|>
condition|)
block|{
comment|//close tracking EntitySearcher
operator|(
operator|(
name|TrackingEntitySearcher
argument_list|<
name|?
argument_list|>
operator|)
name|entitySearcher
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|entitySearcher
operator|=
literal|null
expr_stmt|;
block|}
end_function

unit|}
end_unit

