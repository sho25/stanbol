begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|SimpleTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|TextAnalyzerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|impl
operator|.
name|ClasspathDataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|impl
operator|.
name|TestSearcherImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|LinkedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinkerConfig
operator|.
name|RedirectProcessingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
operator|.
name|OpenNlpAnalysedContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TODO: convert this to an integration test!  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|TestTaxonomyLinker
block|{
comment|/**      * The context for the tests (same as in TestOpenNLPEnhancementEngine)      */
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TEXT
init|=
literal|"Dr. Patrick Marshall (1869 - November 1950) was a"
operator|+
literal|" geologist who lived in New Zealand and worked at the University of Otago."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TEXT2
init|=
literal|"A CBS televised debate between Australia's "
operator|+
literal|"candidates for Prime Minister in the upcoming US election has been rescheduled "
operator|+
literal|"and shortend, to avoid a clash with popular cookery sow MasterChef."
decl_stmt|;
specifier|static
name|TestSearcherImpl
name|searcher
decl_stmt|;
specifier|static
name|ValueFactory
name|factory
init|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|OpenNLP
name|openNLP
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REDIRECT
init|=
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"seeAlso"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
block|{
name|openNLP
operator|=
operator|new
name|OpenNLP
argument_list|(
operator|new
name|ClasspathDataFileProvider
argument_list|(
literal|"DUMMY_SYMBOLIC_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|TestSearcherImpl
argument_list|(
name|NAME
argument_list|,
name|SimpleTokenizer
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
comment|//add some terms to the searcher
name|Representation
name|rep
init|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:PatrickMarshall"
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Patrick Marshall"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PERSON
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:Geologist"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Geologist"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|REDIRECT
argument_list|,
literal|"urn:test:redirect:Geologist"
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
comment|//a redirect
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:redirect:Geologist"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Geologe (redirect)"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:NewZealand"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"New Zealand"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:UniversityOfOtago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"University of Otago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:University"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"University"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:Otago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Otago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|bindServices
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|After
specifier|public
name|void
name|unbindServices
parameter_list|()
block|{     }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdownServices
parameter_list|()
block|{     }
specifier|public
specifier|static
name|ContentItem
name|getContentItem
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|ContentItem
argument_list|()
block|{
name|SimpleMGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
literal|"text/plain"
return|;
block|}
specifier|public
name|MGraph
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTaxonomyLinker
parameter_list|()
throws|throws
name|Exception
block|{
name|OpenNlpAnalysedContentFactory
name|acf
init|=
name|OpenNlpAnalysedContentFactory
operator|.
name|getInstance
argument_list|(
name|openNLP
argument_list|,
operator|new
name|TextAnalyzerConfig
argument_list|()
argument_list|)
decl_stmt|;
name|EntityLinkerConfig
name|config
init|=
operator|new
name|EntityLinkerConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setRedirectProcessingMode
argument_list|(
name|RedirectProcessingMode
operator|.
name|FOLLOW
argument_list|)
expr_stmt|;
name|EntityLinker
name|linker
init|=
operator|new
name|EntityLinker
argument_list|(
name|acf
operator|.
name|create
argument_list|(
name|TEST_TEXT
argument_list|,
literal|"en"
argument_list|)
argument_list|,
name|searcher
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|linker
operator|.
name|process
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedResults
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"Patrick Marshall"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:PatrickMarshall"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"geologist"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:redirect:Geologist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//the redirected entity
name|expectedResults
operator|.
name|put
argument_list|(
literal|"New Zealand"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:NewZealand"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"University of Otago"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:UniversityOfOtago"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LinkedEntity
name|linkedEntity
range|:
name|linker
operator|.
name|getLinkedEntities
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedSuggestions
init|=
name|expectedResults
operator|.
name|remove
argument_list|(
name|linkedEntity
operator|.
name|getSelectedText
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"LinkedEntity "
operator|+
name|linkedEntity
operator|.
name|getSelectedText
argument_list|()
operator|+
literal|"is not an expected Result (or was found twice)"
argument_list|,
name|expectedSuggestions
argument_list|)
expr_stmt|;
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of suggestions "
operator|+
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" != number of expected suggestions "
operator|+
name|expectedSuggestions
operator|.
name|size
argument_list|()
operator|+
literal|"for selection "
operator|+
name|linkedEntity
operator|.
name|getSelectedText
argument_list|()
argument_list|,
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|expectedSuggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|score
init|=
name|linkedEntity
operator|.
name|getScore
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSuggestions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Suggestion
name|suggestion
init|=
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expecced Suggestion at Rank "
operator|+
name|i
operator|+
literal|" expected: "
operator|+
name|expectedSuggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" suggestion: "
operator|+
name|suggestion
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|expectedSuggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|suggestion
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Score of suggestion "
operator|+
name|i
operator|+
literal|"("
operator|+
name|suggestion
operator|.
name|getScore
argument_list|()
operator|+
literal|"> as of the previous one ("
operator|+
name|score
operator|+
literal|")"
argument_list|,
name|score
operator|>=
name|suggestion
operator|.
name|getScore
argument_list|()
argument_list|)
expr_stmt|;
name|score
operator|=
name|suggestion
operator|.
name|getScore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

