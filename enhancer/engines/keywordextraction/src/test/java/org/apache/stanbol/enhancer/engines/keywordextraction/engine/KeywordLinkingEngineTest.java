begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|engine
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_CREATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_LANGUAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_ENTITYANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
operator|.
name|validateAllTextAnnotations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
operator|.
name|validateEntityAnnotation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|SimpleTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|TextAnalyzerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|engine
operator|.
name|KeywordLinkingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|impl
operator|.
name|ClasspathDataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|impl
operator|.
name|TestSearcherImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntityLinkerConfig
operator|.
name|RedirectProcessingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|LinkedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
operator|.
name|OpenNlpAnalysedContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO: convert this to an integration test!  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|KeywordLinkingEngineTest
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeywordLinkingEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The context for the tests (same as in TestOpenNLPEnhancementEngine)      */
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TEXT
init|=
literal|"Dr. Patrick Marshall (1869 - November 1950) was a"
operator|+
literal|" geologist who lived in New Zealand and worked at the University of Otago."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TEXT2
init|=
literal|"A CBS televised debate between Australia's "
operator|+
literal|"candidates for Prime Minister in the upcoming US election has been rescheduled "
operator|+
literal|"and shortend, to avoid a clash with popular cookery sow MasterChef."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ContentItemFactory
name|ciFactory
init|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_REFERENCED_SITE_NAME
init|=
literal|"dummRefSiteName"
decl_stmt|;
specifier|static
name|TestSearcherImpl
name|searcher
decl_stmt|;
specifier|static
name|ValueFactory
name|factory
init|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|OpenNLP
name|openNLP
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REDIRECT
init|=
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"seeAlso"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
block|{
name|openNLP
operator|=
operator|new
name|OpenNLP
argument_list|(
operator|new
name|ClasspathDataFileProvider
argument_list|(
literal|"DUMMY_SYMBOLIC_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|TestSearcherImpl
argument_list|(
name|NAME
argument_list|,
name|SimpleTokenizer
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
comment|//add some terms to the searcher
name|Representation
name|rep
init|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:PatrickMarshall"
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Patrick Marshall"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PERSON
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:Geologist"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Geologist"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|REDIRECT
argument_list|,
literal|"urn:test:redirect:Geologist"
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
comment|//a redirect
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:redirect:Geologist"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Geologe (redirect)"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:NewZealand"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"New Zealand"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:UniversityOfOtago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"University of Otago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:University"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"University"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:Otago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Otago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
comment|//add a 2nd Otago (Place and University
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:Otago_Texas"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Otago (Texas)"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"Otago"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|rep
operator|=
name|factory
operator|.
name|createRepresentation
argument_list|(
literal|"urn:test:UniversityOfOtago_Texas"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|NAME
argument_list|,
literal|"University of Otago (Texas)"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|TYPE
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|addEntity
argument_list|(
name|rep
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|bindServices
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|After
specifier|public
name|void
name|unbindServices
parameter_list|()
block|{     }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdownServices
parameter_list|()
block|{     }
specifier|public
specifier|static
name|ContentItem
name|getContentItem
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|UriRef
argument_list|(
name|id
argument_list|)
argument_list|,
operator|new
name|StringSource
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This tests the EntityLinker functionality (if the expected Entities      * are linked)      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testTaxonomyLinker
parameter_list|()
throws|throws
name|Exception
block|{
name|OpenNlpAnalysedContentFactory
name|acf
init|=
name|OpenNlpAnalysedContentFactory
operator|.
name|getInstance
argument_list|(
name|openNLP
argument_list|,
operator|new
name|TextAnalyzerConfig
argument_list|()
argument_list|)
decl_stmt|;
name|EntityLinkerConfig
name|config
init|=
operator|new
name|EntityLinkerConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setRedirectProcessingMode
argument_list|(
name|RedirectProcessingMode
operator|.
name|FOLLOW
argument_list|)
expr_stmt|;
name|EntityLinker
name|linker
init|=
operator|new
name|EntityLinker
argument_list|(
name|acf
operator|.
name|create
argument_list|(
name|TEST_TEXT
argument_list|,
literal|"en"
argument_list|)
argument_list|,
name|searcher
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|linker
operator|.
name|process
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedResults
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"Patrick Marshall"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:PatrickMarshall"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"geologist"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:redirect:Geologist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//the redirected entity
name|expectedResults
operator|.
name|put
argument_list|(
literal|"New Zealand"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:NewZealand"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"University of Otago"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:test:UniversityOfOtago"
argument_list|,
literal|"urn:test:UniversityOfOtago_Texas"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LinkedEntity
name|linkedEntity
range|:
name|linker
operator|.
name|getLinkedEntities
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedSuggestions
init|=
name|expectedResults
operator|.
name|remove
argument_list|(
name|linkedEntity
operator|.
name|getSelectedText
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"LinkedEntity "
operator|+
name|linkedEntity
operator|.
name|getSelectedText
argument_list|()
operator|+
literal|"is not an expected Result (or was found twice)"
argument_list|,
name|expectedSuggestions
argument_list|)
expr_stmt|;
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of suggestions "
operator|+
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" != number of expected suggestions "
operator|+
name|expectedSuggestions
operator|.
name|size
argument_list|()
operator|+
literal|"for selection "
operator|+
name|linkedEntity
operator|.
name|getSelectedText
argument_list|()
argument_list|,
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|expectedSuggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|score
init|=
name|linkedEntity
operator|.
name|getScore
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSuggestions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Suggestion
name|suggestion
init|=
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expecced Suggestion at Rank "
operator|+
name|i
operator|+
literal|" expected: "
operator|+
name|expectedSuggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" suggestion: "
operator|+
name|suggestion
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|expectedSuggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|suggestion
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Score of suggestion "
operator|+
name|i
operator|+
literal|"("
operator|+
name|suggestion
operator|.
name|getScore
argument_list|()
operator|+
literal|"> as of the previous one ("
operator|+
name|score
operator|+
literal|")"
argument_list|,
name|score
operator|>=
name|suggestion
operator|.
name|getScore
argument_list|()
argument_list|)
expr_stmt|;
name|score
operator|=
name|suggestion
operator|.
name|getScore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This tests if the Enhancements created by the Engine confirm to the      * rules defined for the Stanbol Enhancement Structure.      * @throws IOException      * @throws EngineException      */
annotation|@
name|Test
specifier|public
name|void
name|testEngine
parameter_list|()
throws|throws
name|IOException
throws|,
name|EngineException
block|{
name|EntityLinkerConfig
name|linkerConfig
init|=
operator|new
name|EntityLinkerConfig
argument_list|()
decl_stmt|;
name|linkerConfig
operator|.
name|setRedirectProcessingMode
argument_list|(
name|RedirectProcessingMode
operator|.
name|FOLLOW
argument_list|)
expr_stmt|;
name|KeywordLinkingEngine
name|engine
init|=
name|KeywordLinkingEngine
operator|.
name|createInstance
argument_list|(
name|openNLP
argument_list|,
name|searcher
argument_list|,
operator|new
name|TextAnalyzerConfig
argument_list|()
argument_list|,
name|linkerConfig
argument_list|)
decl_stmt|;
name|engine
operator|.
name|referencedSiteName
operator|=
name|TEST_REFERENCED_SITE_NAME
expr_stmt|;
name|ContentItem
name|ci
init|=
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|StringSource
argument_list|(
name|TEST_TEXT
argument_list|)
argument_list|)
decl_stmt|;
comment|//tells the engine that this is an English text
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|DC_LANGUAGE
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"en"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//compute the enhancements
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
comment|//validate the enhancement results
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
name|expectedValues
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|expectedValues
operator|.
name|put
argument_list|(
name|ENHANCER_EXTRACTED_FROM
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|put
argument_list|(
name|DC_CREATOR
argument_list|,
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|engine
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//adding null as expected for confidence makes it a required property
name|expectedValues
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//validate create fise:TextAnnotations
name|int
name|numTextAnnotations
init|=
name|validateAllTextAnnotations
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|TEST_TEXT
argument_list|,
name|expectedValues
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Four fise:TextAnnotations are expected by this Test"
argument_list|,
literal|4
argument_list|,
name|numTextAnnotations
argument_list|)
expr_stmt|;
comment|//validate create fise:EntityAnnotations
name|int
name|numEntityAnnotations
init|=
name|validateAllEntityAnnotations
argument_list|(
name|ci
argument_list|,
name|expectedValues
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Five fise:EntityAnnotations are expected by this Test"
argument_list|,
literal|5
argument_list|,
name|numEntityAnnotations
argument_list|)
expr_stmt|;
block|}
comment|/**      * Similar to {@link EnhancementStructureHelper#validateAllEntityAnnotations(org.apache.clerezza.rdf.core.TripleCollection, Map)}      * but in addition checks fise:confidence [0..1] and entityhub:site properties      * @param ci      * @param expectedValues      * @return      */
specifier|private
specifier|static
name|int
name|validateAllEntityAnnotations
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
name|expectedValues
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entityAnnotationIterator
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_ENTITYANNOTATION
argument_list|)
decl_stmt|;
name|int
name|entityAnnotationCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|entityAnnotationIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|entityAnnotation
init|=
operator|(
name|UriRef
operator|)
name|entityAnnotationIterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|// test if selected Text is added
name|validateEntityAnnotation
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|entityAnnotation
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
comment|//validate also that the confidence is between [0..1]
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|confidenceIterator
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|entityAnnotation
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//Confidence is now checked by the EnhancementStructureHelper (STANBOL-630)
comment|//            assertTrue("Expected fise:confidence value is missing (entityAnnotation "
comment|//                    +entityAnnotation+")",confidenceIterator.hasNext());
comment|//            Double confidence = LiteralFactory.getInstance().createObject(Double.class,
comment|//                (TypedLiteral)confidenceIterator.next().getObject());
comment|//            assertTrue("fise:confidence MUST BE<= 1 (value= '"+confidence
comment|//                    + "',entityAnnotation " +entityAnnotation+")",
comment|//                    1.0>= confidence.doubleValue());
comment|//            assertTrue("fise:confidence MUST BE>= 0 (value= '"+confidence
comment|//                    +"',entityAnnotation "+entityAnnotation+")",
comment|//                    0.0<= confidence.doubleValue());
comment|//Test the entityhub:site property (STANBOL-625)
name|UriRef
name|ENTITYHUB_SITE
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|site
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entitySiteIterator
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|entityAnnotation
argument_list|,
name|ENTITYHUB_SITE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected entityhub:site value is missing (entityAnnotation "
operator|+
name|entityAnnotation
operator|+
literal|")"
argument_list|,
name|entitySiteIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|siteResource
init|=
name|entitySiteIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"entityhub:site values MUST BE Literals"
argument_list|,
name|siteResource
operator|instanceof
name|Literal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'"
operator|+
name|TEST_REFERENCED_SITE_NAME
operator|+
literal|"' is expected as "
operator|+
literal|"entityhub:site value"
argument_list|,
name|TEST_REFERENCED_SITE_NAME
argument_list|,
operator|(
operator|(
name|Literal
operator|)
name|siteResource
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"entityhub:site MUST HAVE only a single value"
argument_list|,
name|entitySiteIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|entityAnnotationCount
operator|++
expr_stmt|;
block|}
return|return
name|entityAnnotationCount
return|;
block|}
block|}
end_class

end_unit

