begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitytagging
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|getLevenshteinDistance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ReferenceConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Engine that uses a {@link Site} to search for entities for existing TextAnnotations of an Content  * Item.  *   * @author ogrisel, rwesten  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|// the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|NamedEntityTaggingEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
comment|//(value = "dbpedia")
specifier|public
specifier|static
specifier|final
name|String
name|REFERENCED_SITE_ID
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.referencedSiteId"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PERSON_STATE
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.personState"
decl_stmt|;
annotation|@
name|Property
comment|//(value = "dbp-ont:Person")
specifier|public
specifier|static
specifier|final
name|String
name|PERSON_TYPE
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.personType"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|ORG_STATE
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.organisationState"
decl_stmt|;
annotation|@
name|Property
comment|//(value = "dbp-ont:Organisation")
specifier|public
specifier|static
specifier|final
name|String
name|ORG_TYPE
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.organisationType"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PLACE_STATE
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.placeState"
decl_stmt|;
annotation|@
name|Property
comment|//(value = "dbp-ont:Place")
specifier|public
specifier|static
specifier|final
name|String
name|PLACE_TYPE
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.placeType"
decl_stmt|;
comment|/**      * Use the RDFS label as default      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"rdfs:label"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|NAME_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.nameField"
decl_stmt|;
comment|/**      * Use the RDFS label as default      */
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DEREFERENCE_ENTITIES
init|=
literal|"org.apache.stanbol.enhancer.engines.entitytagging.dereference"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|0
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_RANKING
init|=
name|Constants
operator|.
name|SERVICE_RANKING
decl_stmt|;
comment|/**      * The default language for labels included in the enhancement metadata      * (if not available for the parsed content).      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_LANGUAGE
init|=
literal|"en"
decl_stmt|;
comment|/**      * Service of the Entityhub that manages all the active referenced Site. This Service is used to lookup the      * configured Referenced Site when we need to enhance a content item.      */
annotation|@
name|Reference
specifier|protected
name|SiteManager
name|siteManager
decl_stmt|;
comment|/**      * Used to lookup Entities if the {@link #REFERENCED_SITE_ID} property is      * set to "entityhub" or "local"      */
annotation|@
name|Reference
specifier|protected
name|Entityhub
name|entityhub
decl_stmt|;
comment|/**      * This holds the id of the {@link Site} used to lookup Entities      * or<code>null</code> if the {@link Entityhub} is used.       */
specifier|protected
name|String
name|referencedSiteID
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine. Currently set to      * {@link EnhancementJobManager#DEFAULT_ORDER}      */
specifier|public
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ORDERING_EXTRACTION_ENHANCEMENT
decl_stmt|;
comment|/**      * State if text annotations of type {@link OntologicalClasses#DBPEDIA_PERSON} are enhanced by this engine      */
specifier|protected
name|boolean
name|personState
decl_stmt|;
comment|/**      * State if text annotations of type {@link OntologicalClasses#DBPEDIA_ORGANISATION} are enhanced by this      * engine      */
specifier|protected
name|boolean
name|orgState
decl_stmt|;
comment|/**      * State if text annotations of type {@link OntologicalClasses#DBPEDIA_PLACE} are enhanced by this engine      */
specifier|protected
name|boolean
name|placeState
decl_stmt|;
comment|/**      * The rdf:type constraint used to search for persons or<code>null</code> if no type constraint should be      * used      */
specifier|protected
name|String
name|personType
decl_stmt|;
comment|/**      * The rdf:type constraint used to search for organisations or<code>null</code> if no type constraint      * should be used      */
specifier|protected
name|String
name|orgType
decl_stmt|;
comment|/**      * The rdf:type constraint used to search for places or<code>null</code> if no type constraint should be      * used      */
specifier|protected
name|String
name|placeType
decl_stmt|;
comment|/**      * The field used to search for the selected text of the TextAnnotation.      */
specifier|protected
name|String
name|nameField
decl_stmt|;
comment|/**      * The number of Suggestions to be added      */
specifier|protected
name|Integer
name|numSuggestions
init|=
literal|3
decl_stmt|;
specifier|protected
name|boolean
name|dereferenceEntities
init|=
literal|true
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For this engine that means it is necessary to check if the used {@link Site} can operate      * offline or not.      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      *       * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Object
name|referencedSiteID
init|=
name|config
operator|.
name|get
argument_list|(
name|REFERENCED_SITE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|referencedSiteID
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|REFERENCED_SITE_ID
argument_list|,
literal|"The ID of the Referenced Site is a required Parameter and MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|referencedSiteID
operator|=
name|referencedSiteID
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|referencedSiteID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|REFERENCED_SITE_ID
argument_list|,
literal|"The ID of the Referenced Site is a required Parameter and MUST NOT be an empty String!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Entityhub
operator|.
name|ENTITYHUB_IDS
operator|.
name|contains
argument_list|(
name|this
operator|.
name|referencedSiteID
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Init NamedEntityTaggingEngine instance for the Entityhub"
argument_list|)
expr_stmt|;
name|this
operator|.
name|referencedSiteID
operator|=
literal|null
expr_stmt|;
block|}
name|Object
name|state
init|=
name|config
operator|.
name|get
argument_list|(
name|PERSON_STATE
argument_list|)
decl_stmt|;
name|personState
operator|=
name|state
operator|==
literal|null
condition|?
literal|true
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|config
operator|.
name|get
argument_list|(
name|ORG_STATE
argument_list|)
expr_stmt|;
name|orgState
operator|=
name|state
operator|==
literal|null
condition|?
literal|true
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|config
operator|.
name|get
argument_list|(
name|PLACE_STATE
argument_list|)
expr_stmt|;
name|placeState
operator|=
name|state
operator|==
literal|null
condition|?
literal|true
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|type
init|=
name|config
operator|.
name|get
argument_list|(
name|PERSON_TYPE
argument_list|)
decl_stmt|;
name|personType
operator|=
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
name|config
operator|.
name|get
argument_list|(
name|ORG_TYPE
argument_list|)
expr_stmt|;
name|orgType
operator|=
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
name|config
operator|.
name|get
argument_list|(
name|PLACE_TYPE
argument_list|)
expr_stmt|;
name|placeType
operator|=
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|nameField
init|=
name|config
operator|.
name|get
argument_list|(
name|NAME_FIELD
argument_list|)
decl_stmt|;
name|this
operator|.
name|nameField
operator|=
name|nameField
operator|==
literal|null
operator|||
name|nameField
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
else|:
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|nameField
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|dereferenceEntities
init|=
name|config
operator|.
name|get
argument_list|(
name|DEREFERENCE_ENTITIES
argument_list|)
decl_stmt|;
name|this
operator|.
name|dereferenceEntities
operator|=
name|state
operator|==
literal|null
condition|?
literal|true
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|dereferenceEntities
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|referencedSiteID
operator|=
literal|null
expr_stmt|;
name|personType
operator|=
literal|null
expr_stmt|;
name|orgType
operator|=
literal|null
expr_stmt|;
name|placeType
operator|=
literal|null
expr_stmt|;
name|nameField
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
specifier|final
name|Site
name|site
decl_stmt|;
if|if
condition|(
name|referencedSiteID
operator|!=
literal|null
condition|)
block|{
comment|//lookup the referenced site
name|site
operator|=
name|siteManager
operator|.
name|getSite
argument_list|(
name|referencedSiteID
argument_list|)
expr_stmt|;
comment|//ensure that it is present
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to enhance %s because Referenced Site %s is currently not active!"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|referencedSiteID
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// TODO: throwing Exceptions is currently deactivated. We need a more clear
comment|// policy what do to in such situations
comment|// throw new EngineException(msg);
return|return;
block|}
comment|//and that it supports offline mode if required
if|if
condition|(
name|isOfflineMode
argument_list|()
operator|&&
operator|!
name|site
operator|.
name|supportsLocalMode
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to enhance ci {} because OfflineMode is not supported by ReferencedSite {}."
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// null indicates to use the Entityhub to lookup Entities
name|site
operator|=
literal|null
expr_stmt|;
block|}
name|MGraph
name|graph
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// Retrieve the existing text annotations (requires read lock)
name|Map
argument_list|<
name|NamedEntity
argument_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
argument_list|>
name|textAnnotations
init|=
operator|new
name|HashMap
argument_list|<
name|NamedEntity
argument_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//the language extracted for the parsed content or NULL if not available
name|String
name|contentLangauge
decl_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|contentLangauge
operator|=
name|EnhancementEngineHelper
operator|.
name|getLanguage
argument_list|(
name|ci
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|UriRef
name|uri
init|=
operator|(
name|UriRef
operator|)
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|graph
operator|.
name|filter
argument_list|(
name|uri
argument_list|,
name|Properties
operator|.
name|DC_RELATION
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// this is not the most specific occurrence of this name: skip
continue|continue;
block|}
name|NamedEntity
name|namedEntity
init|=
name|NamedEntity
operator|.
name|createFromTextAnnotation
argument_list|(
name|graph
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|namedEntity
operator|!=
literal|null
condition|)
block|{
comment|// This is a first occurrence, collect any subsumed annotations
name|List
argument_list|<
name|UriRef
argument_list|>
name|subsumed
init|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|DC_RELATION
argument_list|,
name|uri
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subsumed
operator|.
name|add
argument_list|(
operator|(
name|UriRef
operator|)
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|textAnnotations
operator|.
name|put
argument_list|(
name|namedEntity
argument_list|,
name|subsumed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|//search the suggestions
name|Map
argument_list|<
name|NamedEntity
argument_list|,
name|List
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|suggestions
init|=
operator|new
name|HashMap
argument_list|<
name|NamedEntity
argument_list|,
name|List
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
argument_list|(
name|textAnnotations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NamedEntity
argument_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
argument_list|>
name|entry
range|:
name|textAnnotations
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|Suggestion
argument_list|>
name|entitySuggestions
init|=
name|computeEntityRecommentations
argument_list|(
name|site
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|contentLangauge
argument_list|)
decl_stmt|;
if|if
condition|(
name|entitySuggestions
operator|!=
literal|null
operator|&&
operator|!
name|entitySuggestions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|suggestions
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entitySuggestions
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//now write the results (requires write lock)
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|RdfValueFactory
name|factory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|entityData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NamedEntity
argument_list|,
name|List
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|entitySuggestions
range|:
name|suggestions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|UriRef
argument_list|>
name|subsumed
init|=
name|textAnnotations
operator|.
name|get
argument_list|(
name|entitySuggestions
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NonLiteral
argument_list|>
name|annotationsToRelate
init|=
operator|new
name|ArrayList
argument_list|<
name|NonLiteral
argument_list|>
argument_list|(
name|subsumed
argument_list|)
decl_stmt|;
name|annotationsToRelate
operator|.
name|add
argument_list|(
name|entitySuggestions
operator|.
name|getKey
argument_list|()
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|entitySuggestions
operator|.
name|getValue
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Add Suggestion {} for {}"
argument_list|,
name|suggestion
operator|.
name|getEntity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|entitySuggestions
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|EnhancementRDFUtils
operator|.
name|writeEntityAnnotation
argument_list|(
name|this
argument_list|,
name|literalFactory
argument_list|,
name|graph
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|annotationsToRelate
argument_list|,
name|suggestion
argument_list|,
name|nameField
argument_list|,
comment|//TODO: maybe we want labels in a different language than the
comment|//      language of the content (e.g. Accept-Language header)?!
name|contentLangauge
operator|==
literal|null
condition|?
name|DEFAULT_LANGUAGE
else|:
name|contentLangauge
argument_list|)
expr_stmt|;
if|if
condition|(
name|dereferenceEntities
condition|)
block|{
name|entityData
operator|.
name|put
argument_list|(
name|suggestion
operator|.
name|getEntity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getEntity
argument_list|()
operator|.
name|getRepresentation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//if dereferneceEntities is true the entityData will also contain all
comment|//Representations to add! If false entityData will be empty
for|for
control|(
name|Representation
name|rep
range|:
name|entityData
operator|.
name|values
argument_list|()
control|)
block|{
name|graph
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|toRdfRepresentation
argument_list|(
name|rep
argument_list|)
operator|.
name|getRdfGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Computes the Enhancements      * @param site The {@link SiteException} id or<code>null</code> to      * use the {@link Entityhub}      * @param literalFactory the {@link LiteralFactory} used to create RDF Literals      * @param contentItemId the id of the contentItem      * @param textAnnotation the text annotation to enhance      * @param subsumedAnnotations other text annotations for the same entity       * @param language the language of the analysed text or<code>null</code>      * if not available.      * @return the suggestions for the parsed {@link NamedEntity}      * @throws EntityhubException On any Error while looking up Entities via      * the Entityhub      */
specifier|protected
specifier|final
name|List
argument_list|<
name|Suggestion
argument_list|>
name|computeEntityRecommentations
parameter_list|(
name|Site
name|site
parameter_list|,
name|NamedEntity
name|namedEntity
parameter_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
name|subsumedAnnotations
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|EntityhubException
block|{
comment|// First get the required properties for the parsed textAnnotation
comment|// ... and check the values
name|log
operator|.
name|debug
argument_list|(
literal|"Process {}"
argument_list|,
name|namedEntity
argument_list|)
expr_stmt|;
name|FieldQuery
name|query
init|=
name|site
operator|==
literal|null
condition|?
comment|//if site is NULL use the Entityhub
name|entityhub
operator|.
name|getQueryFactory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
else|:
name|site
operator|.
name|getQueryFactory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
comment|// replace spaces with plus to create an AND search for all words in the name!
name|Constraint
name|labelConstraint
decl_stmt|;
comment|//TODO: make case sensitivity configurable
name|boolean
name|casesensitive
init|=
literal|false
decl_stmt|;
name|String
name|namedEntityLabel
init|=
name|casesensitive
condition|?
name|namedEntity
operator|.
name|getName
argument_list|()
else|:
name|namedEntity
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
comment|//search labels in the language and without language
name|labelConstraint
operator|=
operator|new
name|TextConstraint
argument_list|(
name|namedEntityLabel
argument_list|,
name|casesensitive
argument_list|,
name|language
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|labelConstraint
operator|=
operator|new
name|TextConstraint
argument_list|(
name|namedEntityLabel
argument_list|,
name|casesensitive
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setConstraint
argument_list|(
name|nameField
argument_list|,
name|labelConstraint
argument_list|)
expr_stmt|;
if|if
condition|(
name|OntologicalClasses
operator|.
name|DBPEDIA_PERSON
operator|.
name|equals
argument_list|(
name|namedEntity
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|personState
condition|)
block|{
if|if
condition|(
name|personType
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|RDF_TYPE
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|personType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else no type constraint
block|}
else|else
block|{
comment|// ignore people
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|DBPEDIA_ORGANISATION
operator|.
name|equals
argument_list|(
name|namedEntity
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|orgState
condition|)
block|{
if|if
condition|(
name|orgType
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|RDF_TYPE
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|orgType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else no type constraint
block|}
else|else
block|{
comment|// ignore people
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
operator|.
name|equals
argument_list|(
name|namedEntity
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|placeState
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|placeType
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|RDF_TYPE
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|placeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else no type constraint
block|}
else|else
block|{
comment|// ignore people
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
name|query
operator|.
name|setLimit
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|20
argument_list|,
name|this
operator|.
name|numSuggestions
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|Entity
argument_list|>
name|results
init|=
name|site
operator|==
literal|null
condition|?
comment|//if site is NULL
name|entityhub
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
else|:
comment|//use the Entityhub
name|site
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|//else the referenced site
name|log
operator|.
name|debug
argument_list|(
literal|" - {} results returned by query {}"
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//no results nothing to do
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|//we need to normalise the confidence values from [0..1]
comment|// * levenshtein distance as absolute (1.0 for exact match)
comment|// * Solr scores * levenshtein to rank entities relative to each other
name|Float
name|maxScore
init|=
literal|null
decl_stmt|;
name|Float
name|maxExactScore
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Suggestion
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|(
name|numSuggestions
argument_list|)
decl_stmt|;
comment|//assumes entities are sorted by score
for|for
control|(
name|Iterator
argument_list|<
name|Entity
argument_list|>
name|guesses
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|guesses
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Suggestion
name|match
init|=
operator|new
name|Suggestion
argument_list|(
name|guesses
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|Representation
name|rep
init|=
name|match
operator|.
name|getEntity
argument_list|()
operator|.
name|getRepresentation
argument_list|()
decl_stmt|;
name|Float
name|score
init|=
name|rep
operator|.
name|getFirst
argument_list|(
name|RdfResourceEnum
operator|.
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|,
name|Float
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxScore
operator|==
literal|null
condition|)
block|{
name|maxScore
operator|=
name|score
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Text
argument_list|>
name|labels
init|=
name|rep
operator|.
name|getText
argument_list|(
name|nameField
argument_list|)
decl_stmt|;
while|while
condition|(
name|labels
operator|.
name|hasNext
argument_list|()
operator|&&
name|match
operator|.
name|getLevenshtein
argument_list|()
operator|<
literal|1.0
condition|)
block|{
name|Text
name|label
init|=
name|labels
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
operator|||
comment|//if the content language is unknown -> accept all labels
name|label
operator|.
name|getLanguage
argument_list|()
operator|==
literal|null
operator|||
comment|//accept labels with no language
comment|//and labels in the same language as the content
operator|(
name|language
operator|!=
literal|null
operator|&&
name|label
operator|.
name|getLanguage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|language
argument_list|)
operator|)
condition|)
block|{
name|double
name|actMatch
init|=
name|levenshtein
argument_list|(
name|casesensitive
condition|?
name|label
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
else|:
name|label
operator|.
name|getText
argument_list|()
argument_list|,
name|namedEntityLabel
argument_list|)
decl_stmt|;
if|if
condition|(
name|actMatch
operator|>
name|match
operator|.
name|getLevenshtein
argument_list|()
condition|)
block|{
name|match
operator|.
name|setLevenshtein
argument_list|(
name|actMatch
argument_list|)
expr_stmt|;
name|match
operator|.
name|setMatchedLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|match
operator|.
name|getMatchedLabel
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|match
operator|.
name|getLevenshtein
argument_list|()
operator|==
literal|1.0
condition|)
block|{
if|if
condition|(
name|maxExactScore
operator|==
literal|null
condition|)
block|{
name|maxExactScore
operator|=
name|score
expr_stmt|;
block|}
comment|//normalise exact matches against the best exact score
name|match
operator|.
name|setScore
argument_list|(
name|score
operator|.
name|doubleValue
argument_list|()
operator|/
name|maxExactScore
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//normalise partial matches against the best match and the
comment|//Levenshtein similarity with the label
name|match
operator|.
name|setScore
argument_list|(
name|score
operator|.
name|doubleValue
argument_list|()
operator|*
name|match
operator|.
name|getLevenshtein
argument_list|()
operator|/
name|maxScore
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|matches
operator|.
name|add
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No value of {} for Entity {}!"
argument_list|,
name|nameField
argument_list|,
name|match
operator|.
name|getEntity
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//now sort the results
name|Collections
operator|.
name|sort
argument_list|(
name|matches
argument_list|)
expr_stmt|;
return|return
name|matches
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|matches
operator|.
name|size
argument_list|()
argument_list|,
name|numSuggestions
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This EnhancementEngine can enhance any ContentItem as it does consume      * existing TextAnnotations with the configured dc:type's      * @see org.apache.stanbol.enhancer.servicesapi.EnhancementEngine#canEnhance(org.apache.stanbol.enhancer.servicesapi.ContentItem)      */
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
return|return
name|ENHANCE_ASYNC
return|;
comment|//Entity tagging now supports asyc processing
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|defaultOrder
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Compares two strings (after {@link StringUtils#trim(String) trimming})      * by using the Levenshtein's Edit Distance of the two      * strings. Does not return the {@link Integer} number of changes but      *<code>1-(changes/maxStringSizeAfterTrim)</code><p>      * @param s1 the first string      * @param s2 the second string      * @return the distance      * @throws IllegalArgumentException if any of the two parsed strings is NULL      */
specifier|private
specifier|static
name|double
name|levenshtein
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
operator|||
name|s2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NONE of the parsed String MUST BE NULL!"
argument_list|)
throw|;
block|}
name|s1
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|s2
operator|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|s2
argument_list|)
expr_stmt|;
return|return
name|s1
operator|.
name|isEmpty
argument_list|()
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1.0
operator|-
operator|(
operator|(
operator|(
name|double
operator|)
name|getLevenshteinDistance
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|)
operator|/
operator|(
call|(
name|double
call|)
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

