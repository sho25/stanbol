begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitytagging
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * A suggestion of an {@link Entity} for a fise:TextAnnotation processed  * by the NamedEntityTaggingEngine  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|Suggestion
implements|implements
name|Comparable
argument_list|<
name|Suggestion
argument_list|>
block|{
specifier|private
specifier|final
name|Entity
name|entity
decl_stmt|;
specifier|private
name|double
name|levenshtein
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Double
name|score
decl_stmt|;
specifier|private
name|Text
name|matchedLabel
decl_stmt|;
specifier|protected
name|Suggestion
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
block|}
comment|/**      * @return the levenshtein      */
specifier|public
specifier|final
name|double
name|getLevenshtein
parameter_list|()
block|{
return|return
name|levenshtein
return|;
block|}
comment|/**      * @param levenshtein the levenshtein to set      */
specifier|protected
specifier|final
name|void
name|setLevenshtein
parameter_list|(
name|double
name|levenshtein
parameter_list|)
block|{
name|this
operator|.
name|levenshtein
operator|=
name|levenshtein
expr_stmt|;
block|}
comment|/**      * @return the score      */
specifier|public
specifier|final
name|Double
name|getScore
parameter_list|()
block|{
return|return
name|score
return|;
block|}
comment|/**      * @param score the score to set      */
specifier|protected
specifier|final
name|void
name|setScore
parameter_list|(
name|Double
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
comment|/**      * @return the matchedLabel      */
specifier|public
specifier|final
name|Text
name|getMatchedLabel
parameter_list|()
block|{
return|return
name|matchedLabel
return|;
block|}
comment|/**      * @param matchedLabel the matchedLabel to set      */
specifier|protected
specifier|final
name|void
name|setMatchedLabel
parameter_list|(
name|Text
name|matchedLabel
parameter_list|)
block|{
name|this
operator|.
name|matchedLabel
operator|=
name|matchedLabel
expr_stmt|;
block|}
comment|/**      * @return the entity      */
specifier|public
specifier|final
name|Entity
name|getEntity
parameter_list|()
block|{
return|return
name|entity
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Suggestion
name|other
parameter_list|)
block|{
return|return
name|other
operator|.
name|score
operator|.
name|compareTo
argument_list|(
name|score
argument_list|)
return|;
block|}
block|}
end_class

end_unit

