begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitytagging
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_comment
comment|/**  *   * The Standalone implementation of the ManagedSolrServer uses   * {@link ServiceLoader} to search for {@link DataFileProvider}.  * This implementation ensures that the DBpedia default data index can be loaded  * and initialised by the StandaloneManagedSolrServer.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|TestDataFileProvider
implements|implements
name|DataFileProvider
block|{
specifier|private
specifier|static
name|String
name|DBPEDIA_PREFIX
init|=
literal|"org/apache/stanbol/data/site/dbpedia/default/index/"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|comments
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|resource
init|=
name|DBPEDIA_PREFIX
operator|+
name|filename
decl_stmt|;
name|URL
name|resourceUri
init|=
name|lookupResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceUri
operator|!=
literal|null
condition|)
block|{
return|return
name|resourceUri
operator|.
name|openStream
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource '"
operator|+
name|resource
operator|+
literal|"' not found"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|comments
parameter_list|)
block|{
return|return
name|lookupResource
argument_list|(
name|DBPEDIA_PREFIX
operator|+
name|filename
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * @param resource      * @return      */
specifier|private
name|URL
name|lookupResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|ClassLoader
name|cl
init|=
name|TestDataFileProvider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|URL
name|resourceUri
init|=
name|cl
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceUri
operator|==
literal|null
condition|)
block|{
name|cl
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
name|resourceUri
operator|=
name|cl
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceUri
operator|==
literal|null
condition|)
block|{
name|resourceUri
operator|=
name|ClassLoader
operator|.
name|getSystemResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceUri
return|;
block|}
block|}
end_class

end_unit

