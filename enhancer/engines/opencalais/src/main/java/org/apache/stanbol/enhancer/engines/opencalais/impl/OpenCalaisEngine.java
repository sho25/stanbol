begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opencalais
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_LANGUAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_RELATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|SolutionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OnlineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides an interface to the OpenCalais service for Named Entity Recognition.  * It uses the OpenCalais REST service with the 'paramsXML' structures for passing  * parameters {@link http://www.opencalais.com/documentation/calais-web-service-api/api-invocation/rest-using-paramsxml)}.  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"opencalais"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|OpenCalaisEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenCalaisEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This contains the directly supported MIME types of this enhancement engine.      */
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_MIMETYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"text/plain"
argument_list|,
literal|"text/html"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * This contains a list of languages supported by OpenCalais.      * If the metadata don't contain a value for the language as the value of the {@link Property.DC_LANG property}      * it is left to the grace of the OpenCalais whether it accepts the text.      * OpenCalais uses its own language identifcation anyway.      */
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_LANGUAGES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"fr"
argument_list|,
literal|"es"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine. Currently set to      * {@link ServiceProperties#ORDERING_EXTRACTION_ENHANCEMENT} + 10. It should run after Metaxa and LangId.      */
specifier|public
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ServiceProperties
operator|.
name|ORDERING_EXTRACTION_ENHANCEMENT
operator|+
literal|10
decl_stmt|;
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|LICENSE_KEY
init|=
literal|"org.apache.stanbol.enhancer.engines.opencalais.license"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"http://api.opencalais.com/enlighten/rest/"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CALAIS_URL_KEY
init|=
literal|"org.apache.stanbol.enhancer.engines.opencalais.url"
decl_stmt|;
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|CALAIS_TYPE_MAP_KEY
init|=
literal|"org.apache.stanbol.enhancer.engines.opencalais.typeMap"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"true"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CALAIS_NER_ONLY_MODE_KEY
init|=
literal|"org.apache.stanbol.enhancer.engines.opencalais.NERonly"
decl_stmt|;
comment|/**      * the URL for the Calais REST Service      */
specifier|private
name|String
name|calaisUrl
init|=
literal|"http://api.opencalais.com/enlighten/rest/"
decl_stmt|;
comment|/**      * the license key from OpenCalais for using the service      */
specifier|private
name|String
name|licenseKey
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|calaisTypeMapFile
init|=
literal|null
decl_stmt|;
comment|/**      * specify whether only the NER results from OpenCalais should be used. Entity references from OpenCalais will be omitted. This mode is intended to be used with another entity tagging engine.      */
specifier|private
name|boolean
name|onlyNERMode
decl_stmt|;
annotation|@
name|Reference
name|TcManager
name|tcManager
decl_stmt|;
comment|/**      * Only activate this engine in online mode      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Reference
specifier|private
name|OnlineMode
name|onlineMode
decl_stmt|;
name|BundleContext
name|bundleContext
decl_stmt|;
comment|/**      * a map for mapping Calais classes to other classes (e.g. from dbpedia)      */
specifier|private
name|Map
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
name|calaisTypeMap
decl_stmt|;
comment|/**      * the default file containing type mappings. Key and value are separated by the regular expression ' ?= ?'.      */
specifier|private
specifier|static
specifier|final
name|String
name|CALAIS_TYPE_MAP_DEFAULT
init|=
literal|"calaisTypeMap.txt"
decl_stmt|;
specifier|public
name|String
name|getLicenseKey
parameter_list|()
block|{
return|return
name|licenseKey
return|;
block|}
specifier|public
name|void
name|setLicenseKey
parameter_list|(
name|String
name|licenseKey
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|licenseKey
operator|==
literal|null
operator|||
name|licenseKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|LICENSE_KEY
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s : please configure a OpenCalais License key to use this engine (e.g. by"
operator|+
literal|"using the 'Configuration' tab of the Apache Felix Web Console)."
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|licenseKey
operator|=
name|licenseKey
expr_stmt|;
block|}
specifier|public
name|String
name|getCalaisUrl
parameter_list|()
block|{
return|return
name|calaisUrl
return|;
block|}
specifier|public
name|void
name|setCalaisUrl
parameter_list|(
name|String
name|calaisUrl
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|calaisUrl
operator|==
literal|null
operator|||
name|calaisUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|CALAIS_URL_KEY
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s : please configure the URL of the OpenCalais Webservice (e.g. by"
operator|+
literal|"using the 'Configuration' tab of the Apache Felix Web Console)."
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|calaisUrl
operator|=
name|calaisUrl
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
name|getCalaisTypeMap
parameter_list|()
block|{
return|return
name|calaisTypeMap
return|;
block|}
specifier|public
name|void
name|setCalaisTypeMap
parameter_list|(
name|Map
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
name|calaisTypeMap
parameter_list|)
block|{
name|this
operator|.
name|calaisTypeMap
operator|=
name|calaisTypeMap
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|defaultOrder
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|loadTypeMap
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
operator|&&
name|resource
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CALAIS_TYPE_MAP_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
operator|(
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
continue|continue;
name|String
index|[]
name|entry
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s*=\\s*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|calaisTypeMap
operator|.
name|put
argument_list|(
operator|new
name|UriRef
argument_list|(
name|entry
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|entry
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in reading type map file: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|language
init|=
name|getMetadataLanguage
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|!
name|SUPPORTED_LANGUAGES
operator|.
name|contains
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"OpenCalais can not process ContentItem {} because "
operator|+
literal|"language {} is not supported (supported: {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ci
operator|.
name|getUri
argument_list|()
block|,
name|language
block|,
name|SUPPORTED_LANGUAGES
block|}
argument_list|)
expr_stmt|;
return|return
name|CANNOT_ENHANCE
return|;
block|}
return|return
name|ENHANCE_ASYNC
return|;
comment|//OpenCalais now support async processing!
block|}
return|return
name|CANNOT_ENHANCE
return|;
block|}
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPart
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No ContentPart with an supported Mimetype '"
operator|+
name|SUPPORTED_MIMETYPES
operator|+
literal|"' found for ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|": This is also checked in the canEnhance method! -> This "
operator|+
literal|"indicated an Bug in the implementation of the "
operator|+
literal|"EnhancementJobManager!"
argument_list|)
throw|;
block|}
name|String
name|text
decl_stmt|;
try|try
block|{
name|text
operator|=
name|ContentItemHelper
operator|.
name|getText
argument_list|(
name|contentPart
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|MGraph
name|calaisModel
init|=
name|getCalaisAnalysis
argument_list|(
name|text
argument_list|,
name|contentPart
operator|.
name|getValue
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|calaisModel
operator|!=
literal|null
condition|)
block|{
comment|//Acquire a write lock on the ContentItem when adding the enhancements
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|createEnhancements
argument_list|(
name|queryModel
argument_list|(
name|calaisModel
argument_list|)
argument_list|,
name|ci
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Serializer
name|serializer
init|=
name|Serializer
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|debugStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|debugStream
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
literal|"application/rdf+xml"
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Calais Enhancements:\n{}"
argument_list|,
name|debugStream
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This generates enhancement structures for the entities from OpenCalais      * and adds them to the content item's metadata.      * For each entity a TextAnnotation and an EntityAnnotation are created.      * An EntityAnnotation can relate to several TextAnnotations.      *      * @param occs a Collection of entity information      * @param ci the content item      */
specifier|public
name|void
name|createEnhancements
parameter_list|(
name|Collection
argument_list|<
name|CalaisEntityOccurrence
argument_list|>
name|occs
parameter_list|,
name|ContentItem
name|ci
parameter_list|)
block|{
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|Language
name|language
decl_stmt|;
comment|// used for plain literals representing parts fo the content
name|String
name|langString
init|=
name|getMetadataLanguage
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|langString
operator|!=
literal|null
operator|&&
operator|!
name|langString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|language
operator|=
operator|new
name|Language
argument_list|(
name|langString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|language
operator|=
literal|null
expr_stmt|;
block|}
comment|//TODO create TextEnhancement (form, start, end, type?) and EntityAnnotation (id, name, type)
name|HashMap
argument_list|<
name|Resource
argument_list|,
name|UriRef
argument_list|>
name|entityAnnotationMap
init|=
operator|new
name|HashMap
argument_list|<
name|Resource
argument_list|,
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CalaisEntityOccurrence
name|occ
range|:
name|occs
control|)
block|{
name|UriRef
name|textAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|MGraph
name|model
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|model
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_TYPE
argument_list|,
name|occ
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
comment|// for autotagger use the name instead of the matched term (that might be a pronoun!)
if|if
condition|(
name|onlyNERMode
condition|)
block|{
name|model
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occ
operator|.
name|name
argument_list|,
name|language
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occ
operator|.
name|exact
argument_list|,
name|language
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_START
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occ
operator|.
name|offset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_END
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occ
operator|.
name|offset
operator|+
name|occ
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occ
operator|.
name|context
argument_list|,
name|language
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//create EntityAnnotation only once but add a reference to the textAnnotation
if|if
condition|(
name|entityAnnotationMap
operator|.
name|containsKey
argument_list|(
name|occ
operator|.
name|id
argument_list|)
condition|)
block|{
name|model
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotationMap
operator|.
name|get
argument_list|(
name|occ
operator|.
name|id
argument_list|)
argument_list|,
name|DC_RELATION
argument_list|,
name|textAnnotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|onlyNERMode
condition|)
block|{
comment|// don't create Calais specific entity annotations; let the autotagger do its's own
comment|// but add a pointer to the first text annotation with that name
name|entityAnnotationMap
operator|.
name|put
argument_list|(
name|occ
operator|.
name|id
argument_list|,
name|textAnnotation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//                UriRef entityAnnotation = EnhancementEngineHelper.createEntityEnhancement(ci, this);
comment|//                entityAnnotationMap.put(occ.id, entityAnnotation);
comment|//                model.add(new TripleImpl(entityAnnotation, DC_RELATION, textAnnotation));
comment|//                model.add(new TripleImpl(entityAnnotation, ENHANCER_ENTITY_LABEL, occ.name));
comment|//                model.add(new TripleImpl(entityAnnotation, ENHANCER_ENTITY_TYPE, occ.type));
comment|//                model.add(new TripleImpl(entityAnnotation, ENHANCER_ENTITY_REFERENCE, occ.id));
block|}
block|}
block|}
block|}
comment|/**      * Retrieves the annotations from OpenCalais as RDF/XML. From that an MGraph is created.      *      * @param text the text to send to OpenCalais      *      * @return an MGraph with all annotations      *      * @throws EngineException      */
specifier|public
name|MGraph
name|getCalaisAnalysis
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|mimeType
operator|.
name|equals
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
name|mimeType
operator|=
literal|"text/raw"
expr_stmt|;
block|}
name|String
name|calaisParams
init|=
literal|"<c:params xmlns:c=\"http://s.opencalais.com/1/pred/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">"
operator|+
literal|"<c:processingDirectives c:contentType=\""
operator|+
name|mimeType
operator|+
literal|"\" "
operator|+
comment|//    "c:enableMetadataType=\"GenericRelations,SocialTags\" "+
comment|//    "c:enableMetadataType=\"GenericRelations\" "+
literal|"c:outputFormat=\"rdf/xml\" "
operator|+
literal|"c:calculateRelevanceScore=\"false\" "
operator|+
literal|"c:omitOutputtingOriginalText=\"true\""
operator|+
literal|">"
operator|+
literal|"</c:processingDirectives>"
operator|+
literal|"</c:params>"
decl_stmt|;
name|MGraph
name|model
init|=
literal|null
decl_stmt|;
try|try
block|{
name|StringBuilder
name|postParams
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|postParams
operator|.
name|append
argument_list|(
literal|"licenseID="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|getLicenseKey
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"&content="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|text
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"&paramsXML="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|calaisParams
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get annotations from Calais
name|log
operator|.
name|info
argument_list|(
literal|"Calais request sent"
argument_list|)
expr_stmt|;
name|String
name|calaisResult
init|=
name|doPostRequest
argument_list|(
name|this
operator|.
name|getCalaisUrl
argument_list|()
argument_list|,
literal|null
argument_list|,
name|postParams
operator|.
name|toString
argument_list|()
argument_list|,
literal|"application/x-www-form-urlencoded"
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Calais response received: {}"
argument_list|,
name|calaisResult
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Calais response:\n {}"
argument_list|,
name|calaisResult
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Calais data:\n{}"
argument_list|,
name|calaisResult
argument_list|)
expr_stmt|;
comment|// build model from Calais result
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|calaisResult
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|=
name|readModel
argument_list|(
name|in
argument_list|,
literal|"application/rdf+xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|model
return|;
block|}
comment|/**      * Parses an InputStream of RDF data and produces an MGraph from them      *      * @param in The InputStream of RDF data      * @param format the format of the RDF data      *      * @return the resulting MGraph or null if the RDF serialization format is not supported by the parser      */
specifier|public
name|MGraph
name|readModel
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|format
parameter_list|)
block|{
name|Parser
name|parser
init|=
name|Parser
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|getSupportedFormats
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|Graph
name|graph
init|=
name|parser
operator|.
name|parse
argument_list|(
name|in
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|MGraph
name|model
init|=
operator|new
name|SimpleMGraph
argument_list|(
name|graph
argument_list|)
decl_stmt|;
return|return
name|model
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported RDF format: {}\nSupported RDF formats: {}"
argument_list|,
name|format
argument_list|,
name|parser
operator|.
name|getSupportedFormats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Extracts the relevant entity information from the Calais RDF data.      * The entities and the relted information is extracted by a Sparql query.      *      * @param model the MGraph representing the Calais data      *      * @return a Collection of entity information      */
specifier|public
name|Collection
argument_list|<
name|CalaisEntityOccurrence
argument_list|>
name|queryModel
parameter_list|(
name|MGraph
name|model
parameter_list|)
block|{
comment|//TODO extract also Geo info (latitude/longitude)?
name|String
name|query
init|=
literal|"PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> "
operator|+
literal|"PREFIX xsd:<http://www.w3.org/2001/XMLSchema#> "
operator|+
literal|"PREFIX p:<http://s.opencalais.com/1/pred/> "
operator|+
literal|"PREFIX t:<http://s.opencalais.com/1/type/em/e/> "
operator|+
literal|"SELECT DISTINCT ?id ?did ?name ?type ?dtype ?offset ?length ?exact ?context ?score WHERE { "
operator|+
literal|"?id p:name ?name ."
operator|+
literal|"?id rdf:type ?type ."
operator|+
literal|"?y p:subject ?id ."
operator|+
literal|"?y p:offset ?offset ."
operator|+
literal|"?y p:length ?length ."
operator|+
literal|"?y p:exact ?exact ."
operator|+
literal|"?y p:detection ?context ."
operator|+
literal|" OPTIONAL { ?z p:subject ?id . ?z p:relevance ?score . } "
operator|+
comment|// get disambiguated entity references if available
literal|" OPTIONAL { ?did p:subject ?id . ?did p:name ?name . ?did rdf:type ?dtype . } "
operator|+
literal|"FILTER ("
operator|+
literal|"?type = t:Person || "
operator|+
literal|"?type = t:City || "
operator|+
literal|"?type = t:Continent || "
operator|+
literal|"?type = t:Country || "
operator|+
literal|"?type = t:ProvinceOrState || "
operator|+
literal|"?type = t:Region || "
operator|+
literal|"?type = t:Company || "
operator|+
literal|"?type = t:Facility || "
operator|+
literal|"?type = t:Organization "
operator|+
literal|")"
operator|+
literal|"} "
decl_stmt|;
name|Collection
argument_list|<
name|CalaisEntityOccurrence
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|CalaisEntityOccurrence
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|SelectQuery
name|sQuery
init|=
operator|(
name|SelectQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|sQuery
argument_list|,
name|model
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolutionMapping
name|row
init|=
name|rs
operator|.
name|next
argument_list|()
decl_stmt|;
name|CalaisEntityOccurrence
name|occ
init|=
operator|new
name|CalaisEntityOccurrence
argument_list|()
decl_stmt|;
name|Resource
name|disambiguated
init|=
name|row
operator|.
name|get
argument_list|(
literal|"did"
argument_list|)
decl_stmt|;
name|occ
operator|.
name|id
operator|=
operator|(
name|disambiguated
operator|==
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
else|:
name|disambiguated
operator|)
expr_stmt|;
if|if
condition|(
name|onlyNERMode
condition|)
block|{
name|occ
operator|.
name|type
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|occ
operator|.
name|type
operator|=
operator|(
name|disambiguated
operator|==
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
else|:
name|row
operator|.
name|get
argument_list|(
literal|"dtype"
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|calaisTypeMap
operator|!=
literal|null
condition|)
block|{
name|UriRef
name|mappedType
init|=
name|calaisTypeMap
operator|.
name|get
argument_list|(
name|occ
operator|.
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedType
operator|!=
literal|null
condition|)
block|{
name|occ
operator|.
name|type
operator|=
name|mappedType
expr_stmt|;
block|}
block|}
name|occ
operator|.
name|name
operator|=
operator|(
operator|(
name|Literal
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|)
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
name|occ
operator|.
name|exact
operator|=
operator|(
operator|(
name|Literal
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"exact"
argument_list|)
operator|)
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
comment|//TODO for html the offsets might not be those of the original document but refer to a cleaned up version?
name|occ
operator|.
name|offset
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"offset"
argument_list|)
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove brackets
name|occ
operator|.
name|context
operator|=
operator|(
operator|(
name|Literal
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"context"
argument_list|)
operator|)
operator|.
name|getLexicalForm
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[\\[\\]]"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|occ
operator|.
name|length
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|occ
operator|.
name|relevance
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|occ
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Found {} occurences"
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Sends a POST request to the given url.      *      * @param targetUrl a<code>String</code> with the target url      * @param params a<code>Map<String,String></code> object containing the url parameters;      *        use<code>null</code> if there are no parameters      * @param body a<code>String</code> with the body of the post request; use      *<code>null</code> if the body is empty      * @param contentType a<code>String</code> with the content type of the post      *        request; use<code>null</code> for the default content type      *<code>text/xml; charset=utf-8</code>      * @param responseEncoding a<code>String</code> with the encoding used to      *        read the server response; use<code>null</code> for the default charset      *      * @return a<code>String</code> with the server response      *      * @throws IOException if an error occurs      */
specifier|public
specifier|static
name|String
name|doPostRequest
parameter_list|(
name|String
name|targetUrl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|body
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|responseEncoding
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|urlString
init|=
operator|new
name|StringBuilder
argument_list|(
name|targetUrl
argument_list|)
decl_stmt|;
comment|// add parameters to url
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|urlString
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|params
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oneParam
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|urlString
operator|.
name|append
argument_list|(
name|oneParam
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|oneParam
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|urlString
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// init connection
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlString
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|urlConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|urlConn
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|urlConn
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|body
condition|)
block|{
name|urlConn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|urlConn
operator|.
name|setDoOutput
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|urlConn
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|contentType
condition|)
block|{
name|contentType
operator|=
literal|"text/xml; charset=utf-8"
expr_stmt|;
block|}
name|urlConn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|// send POST output
if|if
condition|(
literal|null
operator|!=
name|body
condition|)
block|{
name|OutputStreamWriter
name|printout
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|urlConn
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
decl_stmt|;
name|printout
operator|.
name|write
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|printout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|printout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// get response data
if|if
condition|(
literal|null
operator|==
name|responseEncoding
condition|)
block|{
name|responseEncoding
operator|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|urlConn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|responseEncoding
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMetadataLanguage
parameter_list|(
name|MGraph
name|model
parameter_list|,
name|NonLiteral
name|subj
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|model
operator|.
name|filter
argument_list|(
name|subj
argument_list|,
name|DC_LANGUAGE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|langNode
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
return|return
name|getLexicalForm
argument_list|(
name|langNode
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getLexicalForm
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|res
operator|instanceof
name|Literal
condition|)
block|{
return|return
operator|(
operator|(
name|Literal
operator|)
name|res
operator|)
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * The activate method.      *      * @param ce the {@link ComponentContext}      */
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundleContext
operator|=
name|ce
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
comment|//TODO initialize Extractor
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|license
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|LICENSE_KEY
argument_list|)
decl_stmt|;
name|String
name|url
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|CALAIS_URL_KEY
argument_list|)
decl_stmt|;
name|calaisTypeMapFile
operator|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|CALAIS_TYPE_MAP_KEY
argument_list|)
expr_stmt|;
name|String
name|standAlone
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|CALAIS_NER_ONLY_MODE_KEY
argument_list|)
decl_stmt|;
name|setLicenseKey
argument_list|(
name|license
argument_list|)
expr_stmt|;
name|setCalaisUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|calaisTypeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
argument_list|()
expr_stmt|;
name|loadTypeMap
argument_list|(
name|calaisTypeMapFile
argument_list|)
expr_stmt|;
name|onlyNERMode
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|standAlone
argument_list|)
expr_stmt|;
comment|//      this.tcManager = TcManager.getInstance();
block|}
comment|/**      * The deactivate method.      *      * @param ce the {@link ComponentContext}      */
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
block|{
name|super
operator|.
name|deactivate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

