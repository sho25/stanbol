begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|pos
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|PosTagsCollectionEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|olia
operator|.
name|English
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|olia
operator|.
name|German
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|olia
operator|.
name|Spanish
import|;
end_import

begin_comment
comment|/**  * {@link TagSet}s for known<a herf="http://opennlp.apache.org/">OpenNLP</a>  * POS models.<p>  * When available this refers to models defined by the   *<a herf="http://nlp2rdf.lod2.eu/olia/">OLIA</a> Ontologies. Other TagSets  * are - for now - directly defined in this class.  *<p>  * Specifications in this class are based on {@link PosTagsCollectionEnum}.  *  Links/defines to the POS {@link TagSet}s used by  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PosTagSetRegistry
block|{
specifier|private
specifier|static
name|PosTagSetRegistry
name|instance
init|=
operator|new
name|PosTagSetRegistry
argument_list|()
decl_stmt|;
specifier|private
name|PosTagSetRegistry
parameter_list|()
block|{}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|>
name|models
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|PosTagSetRegistry
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|models
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for the {@link TagSet} by language. If no {@link TagSet}      * is available for an Language this will return<code>null</code>      * @param language the language      * @return the AnnotationModel or<code>null</code> if non is defined      */
specifier|public
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|getTagSet
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|models
operator|.
name|get
argument_list|(
name|language
argument_list|)
return|;
block|}
comment|/**      * Links to the Penn Treebank model as defined by the       *<a herf="http://nlp2rdf.lod2.eu/olia/">OLIA</a> Ontology.      * @see English#PENN_TREEBANK      */
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|ENGLISH
init|=
name|English
operator|.
name|PENN_TREEBANK
decl_stmt|;
static|static
block|{
comment|//adds the English model to the getInstance()
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|ENGLISH
argument_list|)
expr_stmt|;
block|}
comment|/**      * Links to the STTS model as defined by the       *<a herf="http://nlp2rdf.lod2.eu/olia/">OLIA</a> Ontology.      * @see German#STTS      */
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|GERMAN
init|=
name|German
operator|.
name|STTS
decl_stmt|;
static|static
block|{
comment|//adds the English model to the getInstance()
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|GERMAN
argument_list|)
expr_stmt|;
block|}
comment|/**      * Links to the PAROLE model as defined by the       *<a herf="http://nlp2rdf.lod2.eu/olia/">OLIA</a> Ontology.      * @see Spanish#PAROLE      */
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|SPANISH
init|=
name|Spanish
operator|.
name|PAROLE
decl_stmt|;
static|static
block|{
comment|//adds the Spanish model to the getInstance()
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|SPANISH
argument_list|)
expr_stmt|;
block|}
comment|/**      * POS types representing Nouns for Danish based on the PAROLE Tagset as      * described by<a href="http://korpus.dsl.dk/paroledoc_en.pdf">this paper</a>      */
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|DANISH
init|=
operator|new
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|(
literal|"PAROLE Danish"
argument_list|,
literal|"da"
argument_list|)
decl_stmt|;
static|static
block|{
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"N"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"NP"
argument_list|,
name|Pos
operator|.
name|ProperNoun
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"NC"
argument_list|,
name|Pos
operator|.
name|CommonNoun
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"AC"
argument_list|,
name|Pos
operator|.
name|CardinalNumber
argument_list|)
argument_list|)
expr_stmt|;
comment|//numbers
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"AO"
argument_list|,
name|Pos
operator|.
name|OrdinalNumber
argument_list|)
argument_list|)
expr_stmt|;
comment|//numbers
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"AN"
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"XX"
argument_list|,
name|Pos
operator|.
name|Typo
argument_list|)
argument_list|)
expr_stmt|;
comment|//non-words (incl typos ..)
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"XF"
argument_list|,
name|Pos
operator|.
name|Foreign
argument_list|)
argument_list|)
expr_stmt|;
comment|//foreign word
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"XR"
argument_list|,
name|Pos
operator|.
name|Symbol
argument_list|)
argument_list|)
expr_stmt|;
comment|//symbol letters
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"XA"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
comment|//abbreviations
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"XS"
argument_list|,
name|Pos
operator|.
name|Abbreviation
argument_list|)
argument_list|)
expr_stmt|;
comment|//abbreviations
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"V"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VA"
argument_list|,
name|Pos
operator|.
name|MainVerb
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VAD"
argument_list|,
name|Pos
operator|.
name|MainVerb
argument_list|,
name|Pos
operator|.
name|IndicativeVerb
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VAF"
argument_list|,
name|Pos
operator|.
name|MainVerb
argument_list|,
name|Pos
operator|.
name|Infinitive
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VAG"
argument_list|,
name|Pos
operator|.
name|MainVerb
argument_list|,
name|Pos
operator|.
name|Gerund
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VAPR"
argument_list|,
name|Pos
operator|.
name|MainVerb
argument_list|,
name|Pos
operator|.
name|PresentParticiple
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VAPA"
argument_list|,
name|Pos
operator|.
name|MainVerb
argument_list|,
name|Pos
operator|.
name|PastParticiple
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VE"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO MedialVerb is missing
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VED"
argument_list|,
name|Pos
operator|.
name|IndicativeVerb
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO MedialVerb is missing
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VEF"
argument_list|,
name|Pos
operator|.
name|Infinitive
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO MedialVerb is missing
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"XP"
argument_list|,
name|LexicalCategory
operator|.
name|Punctuation
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"CC"
argument_list|,
name|Pos
operator|.
name|CoordinatingConjunction
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"SC"
argument_list|,
name|Pos
operator|.
name|SubordinatingConjunction
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"U"
argument_list|)
argument_list|)
expr_stmt|;
comment|//unmarked for degree
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"SP"
argument_list|,
name|Pos
operator|.
name|Preposition
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"R"
argument_list|,
name|Pos
operator|.
name|AdjectivalAdverb
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"RG"
argument_list|,
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PD"
argument_list|,
name|Pos
operator|.
name|DemonstrativePronoun
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PI"
argument_list|,
name|Pos
operator|.
name|IndefinitePronoun
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PT"
argument_list|,
name|Pos
operator|.
name|InterrogativePronoun
argument_list|,
name|Pos
operator|.
name|RelativePronoun
argument_list|)
argument_list|)
expr_stmt|;
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PP"
argument_list|,
name|Pos
operator|.
name|PersonalPronoun
argument_list|)
argument_list|)
expr_stmt|;
comment|//unsure
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PO"
argument_list|,
name|Pos
operator|.
name|PossessivePronoun
argument_list|)
argument_list|)
expr_stmt|;
comment|//unsure
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PC"
argument_list|,
name|Pos
operator|.
name|ReciprocalPronoun
argument_list|)
argument_list|)
expr_stmt|;
comment|//unsure
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"U="
argument_list|,
name|LexicalCategory
operator|.
name|Unique
argument_list|)
argument_list|)
expr_stmt|;
comment|//unsure
name|DANISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"I="
argument_list|,
name|LexicalCategory
operator|.
name|Interjection
argument_list|)
argument_list|)
expr_stmt|;
comment|//unsure
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|DANISH
argument_list|)
expr_stmt|;
block|}
comment|/**      * POS tags for the Portuguese POS model of OpenNLP based the      *<a href="http://beta.visl.sdu.dk/visl/pt/symbolset-floresta.html">PALAVRAS tag set</a>      *<p>      */
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|PORTUGUESE
init|=
operator|new
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|(
literal|"PALAVRAS Portuguese"
argument_list|,
literal|"pt"
argument_list|)
decl_stmt|;
static|static
block|{
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"n"
argument_list|,
name|Pos
operator|.
name|CommonNoun
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"prop"
argument_list|,
name|Pos
operator|.
name|ProperNoun
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"adj"
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"v-fin"
argument_list|,
name|Pos
operator|.
name|FiniteVerb
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"v-inf"
argument_list|,
name|Pos
operator|.
name|Infinitive
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"v-pcp"
argument_list|,
name|Pos
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"v-ger"
argument_list|,
name|Pos
operator|.
name|Gerund
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"art"
argument_list|,
name|Pos
operator|.
name|Article
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"pron"
argument_list|,
name|Pos
operator|.
name|Pronoun
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"pron-pers"
argument_list|,
name|Pos
operator|.
name|PersonalPronoun
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"pron-det"
argument_list|,
name|Pos
operator|.
name|DeterminalPronoun
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"pron-indp"
argument_list|,
name|Pos
operator|.
name|Pronoun
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO: missing independent pronoun
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"adv"
argument_list|,
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"num"
argument_list|,
name|Pos
operator|.
name|Numeral
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"prp"
argument_list|,
name|Pos
operator|.
name|Preposition
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"in"
argument_list|,
name|LexicalCategory
operator|.
name|Interjection
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"conj-s"
argument_list|,
name|Pos
operator|.
name|SubordinatingConjunction
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"conj-c"
argument_list|,
name|Pos
operator|.
name|CoordinatingConjunction
argument_list|)
argument_list|)
expr_stmt|;
name|PORTUGUESE
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"punc"
argument_list|,
name|LexicalCategory
operator|.
name|Punctuation
argument_list|)
argument_list|)
expr_stmt|;
comment|//missing on the webpage ^
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|PORTUGUESE
argument_list|)
expr_stmt|;
block|}
comment|/**      * POS tags used by the Dutch POS model of OpenNLP for Dutch.<p>      * Source: J.T. Berghmans, "WOTAN: Een automatische grammatikale tagger       * voor het Nederlands", doctoral dissertation, Department of language&       * Speech, Nijmegen University (renamed to Radboud University),       * december 1994.<p>      *<b>NOTE:</b> This {@link TagSet} DOES NOT distinquish beteen Proper- and      * Common- Nouns!<p>      */
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|DUTCH
init|=
operator|new
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|(
literal|"WOTAN Dutch"
argument_list|,
literal|"nl"
argument_list|)
decl_stmt|;
static|static
block|{
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Adj"
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Adv"
argument_list|,
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Art"
argument_list|,
name|Pos
operator|.
name|Article
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Conj"
argument_list|,
name|LexicalCategory
operator|.
name|Conjuction
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Int"
argument_list|,
name|LexicalCategory
operator|.
name|Interjection
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"N"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Num"
argument_list|,
name|Pos
operator|.
name|Numeral
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Misc"
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Prep"
argument_list|,
name|Pos
operator|.
name|Preposition
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Pron"
argument_list|,
name|Pos
operator|.
name|Pronoun
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"Punc"
argument_list|,
name|LexicalCategory
operator|.
name|Punctuation
argument_list|)
argument_list|)
expr_stmt|;
name|DUTCH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"V"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|DUTCH
argument_list|)
expr_stmt|;
block|}
comment|/**      * POS tags used by the Swedish POS model of OpenNLP for Swedish based on the      *<a href="http://w3.msi.vxu.se/users/nivre/research/MAMBAlex.html">      * Lexical categories in MAMBA</a>      * Most of the<i>'interesting'</i> {@link Pos} mappings would be defined      * as "Features" of MABAS.      */
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|SWEDISH
init|=
operator|new
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|(
literal|"MAMBA Swedish"
argument_list|,
literal|"sv"
argument_list|)
decl_stmt|;
static|static
block|{
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PN"
argument_list|,
name|Pos
operator|.
name|ProperNoun
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"MN"
argument_list|,
name|Pos
operator|.
name|CommonNoun
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO: missing Meta-Nouns
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"AN"
argument_list|,
name|Pos
operator|.
name|CommonNoun
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO: missing Adjectival noun
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VN"
argument_list|,
name|Pos
operator|.
name|VerbalNoun
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"NN"
argument_list|,
name|Pos
operator|.
name|CommonNoun
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PO"
argument_list|,
name|Pos
operator|.
name|Pronoun
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"EN"
argument_list|,
name|Pos
operator|.
name|IndefiniteArticle
argument_list|,
name|Pos
operator|.
name|Numeral
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"RO"
argument_list|,
name|Pos
operator|.
name|Numeral
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"AJ"
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"AV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"vara" (be)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"BV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"bli(va)" (become)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"HV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"ha(va)" (have)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"WV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"vilja" (want)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"QV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"kunna" (can)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"MV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"måste" (must)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"KV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|// locution "komma att" (periphrastic future)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"SV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"skola" (will, shall)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"GV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//"göra" (do, make)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"FV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//få" (get)
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VV"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
comment|//all other verbs
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"TP"
argument_list|,
name|Pos
operator|.
name|PastParticiple
argument_list|)
argument_list|)
expr_stmt|;
comment|//PerfectParticle
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"SP"
argument_list|,
name|Pos
operator|.
name|PresentParticiple
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"AB"
argument_list|,
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PR"
argument_list|,
name|Pos
operator|.
name|Preposition
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IM"
argument_list|,
name|Pos
operator|.
name|Infinitive
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"++"
argument_list|,
name|Pos
operator|.
name|CoordinatingConjunction
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"UK"
argument_list|,
name|Pos
operator|.
name|SubordinatingConjunction
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IK"
argument_list|,
name|Pos
operator|.
name|Comma
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IP"
argument_list|,
name|Pos
operator|.
name|Point
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"I?"
argument_list|,
name|Pos
operator|.
name|QuestionMark
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IU"
argument_list|,
name|Pos
operator|.
name|ExclamativePoint
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IQ"
argument_list|,
name|Pos
operator|.
name|Colon
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IS"
argument_list|,
name|Pos
operator|.
name|SemiColon
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IT"
argument_list|,
name|Pos
operator|.
name|Hyphen
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IR"
argument_list|,
name|Pos
operator|.
name|ParentheticalPunctuation
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IC"
argument_list|,
name|LexicalCategory
operator|.
name|Punctuation
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PU"
argument_list|,
name|Pos
operator|.
name|ListMarker
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"IG"
argument_list|,
name|LexicalCategory
operator|.
name|Punctuation
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"YY"
argument_list|,
name|Pos
operator|.
name|Interjection
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"ID"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
name|SWEDISH
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"XX"
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|SWEDISH
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

