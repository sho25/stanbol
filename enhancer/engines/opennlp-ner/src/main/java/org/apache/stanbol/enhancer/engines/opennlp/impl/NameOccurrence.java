begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_class
specifier|public
class|class
name|NameOccurrence
block|{
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|start
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|end
decl_stmt|;
specifier|public
specifier|final
name|String
name|context
decl_stmt|;
specifier|public
specifier|final
name|Double
name|confidence
decl_stmt|;
specifier|public
specifier|final
name|UriRef
name|type
decl_stmt|;
specifier|public
name|NameOccurrence
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|start
parameter_list|,
name|Integer
name|end
parameter_list|,
name|UriRef
name|type
parameter_list|,
name|String
name|context
parameter_list|,
name|Double
name|confidence
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|confidence
operator|=
name|confidence
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[name='%s', start='%d', end='%d', type='%s', confidence='%f', context='%s']"
argument_list|,
name|name
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|type
argument_list|,
name|confidence
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

