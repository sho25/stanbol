begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|ner
operator|.
name|NerTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_class
specifier|public
class|class
name|NEREngineConfig
block|{
comment|/**      * Default mapping for Concept types to dc:type values added for      * TextAnnotations.      */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|UriRef
argument_list|>
name|DEFAULT_ENTITY_TYPE_MAPPINGS
decl_stmt|;
static|static
block|{
comment|//the default mappings for the default NER types
name|Map
argument_list|<
name|String
argument_list|,
name|UriRef
argument_list|>
name|mappings
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
literal|"person"
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PERSON
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
literal|"organization"
argument_list|,
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
argument_list|)
expr_stmt|;
name|DEFAULT_ENTITY_TYPE_MAPPINGS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Holds the configured {@link NerTag}s - the mappings from the      * named entity name to the {@link UriRef} type used for the      *<code>dc:type</code> value for<code>fise:TextAnnotation</code>s      */
specifier|private
name|TagSet
argument_list|<
name|NerTag
argument_list|>
name|nerTagSet
init|=
operator|new
name|TagSet
argument_list|<
name|NerTag
argument_list|>
argument_list|(
literal|"NER TagSet"
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|additionalNerModels
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The default model types      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|defaultModelTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|DEFAULT_ENTITY_TYPE_MAPPINGS
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * TODO: replace with Language as soon as STANBOL-733 is re-integrated with      * the Stanbol trunk      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|processedLanguages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|defaultLanguage
decl_stmt|;
specifier|public
name|NEREngineConfig
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|UriRef
argument_list|>
name|mapping
range|:
name|DEFAULT_ENTITY_TYPE_MAPPINGS
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nerTagSet
operator|.
name|addTag
argument_list|(
operator|new
name|NerTag
argument_list|(
name|mapping
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapping
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|addCustomNameFinderModel
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|modelFileName
parameter_list|)
block|{
if|if
condition|(
name|lang
operator|==
literal|null
operator|||
name|lang
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed lanaguage MUST NOT be NULL or empty!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|modelFileName
operator|==
literal|null
operator|||
name|modelFileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed NER model name MUST NOT be NULL or empty!"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|currentModels
init|=
name|additionalNerModels
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentModels
operator|==
literal|null
condition|)
block|{
name|currentModels
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|additionalNerModels
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|currentModels
argument_list|)
expr_stmt|;
block|}
name|currentModels
operator|.
name|add
argument_list|(
name|modelFileName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeCustomNameFinderModel
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|modelFileName
parameter_list|)
block|{
if|if
condition|(
name|lang
operator|==
literal|null
operator|||
name|lang
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed lanaguage MUST NOT be NULL or empty!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|modelFileName
operator|==
literal|null
operator|||
name|modelFileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed NER model name MUST NOT be NULL or empty!"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|currentModels
init|=
name|additionalNerModels
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentModels
operator|!=
literal|null
operator|&&
comment|//if models for that language are present
name|currentModels
operator|.
name|remove
argument_list|(
name|modelFileName
argument_list|)
operator|&&
comment|// and the model was actually remove
name|currentModels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//no other models present for this language
name|additionalNerModels
operator|.
name|remove
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getProcessedLanguages
parameter_list|()
block|{
return|return
name|processedLanguages
return|;
block|}
comment|/**      * Checks if the parsed language is enabled for processing.      * If<code>null</code> is parsed as language this returns<code>false</code>      * even if processing of all languages is enabled.<p>      * NOTE: If this Method returns<code>true</code> this does      * not mean that text with this language can be actually processed because this      * also requires that the NER model for this language are available via the      * parsed {@link OpenNLP} instance.      * @param lang the language      * @return the state      */
specifier|public
name|boolean
name|isProcessedLangage
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|lang
operator|!=
literal|null
operator|&&
operator|(
name|processedLanguages
operator|.
name|isEmpty
argument_list|()
operator|||
name|processedLanguages
operator|.
name|contains
argument_list|(
name|lang
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|setDefaultLanguage
parameter_list|(
name|String
name|defaultLanguage
parameter_list|)
block|{
name|this
operator|.
name|defaultLanguage
operator|=
name|defaultLanguage
expr_stmt|;
block|}
specifier|public
name|String
name|getDefaultLanguage
parameter_list|()
block|{
return|return
name|defaultLanguage
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDefaultModelTypes
parameter_list|()
block|{
return|return
name|defaultModelTypes
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getSpecificNerModles
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|modelNames
init|=
name|additionalNerModels
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
return|return
name|modelNames
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|modelNames
return|;
block|}
comment|/**      * Getter for the {@link NerTag} of the parsed Named Entity      * name. If not yet present a new {@link NerTag} (with no      *<code>dc:type</code> mapping) is created and added to the      * configuration.      * @param namedEntityType the NamedEntity name.      * @return the NerTag. Guaranteed to be not<code>null</code>      * @throws IllegalArgumentException if the parsed NamedEntity      * type is<code>null</code> or an empty String.      */
specifier|public
name|NerTag
name|getNerTag
parameter_list|(
name|String
name|namedEntityType
parameter_list|)
block|{
if|if
condition|(
name|namedEntityType
operator|==
literal|null
operator|||
name|namedEntityType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed NamedEntity string MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|NerTag
name|tag
init|=
name|nerTagSet
operator|.
name|getTag
argument_list|(
name|namedEntityType
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|null
condition|)
block|{
name|tag
operator|=
operator|new
name|NerTag
argument_list|(
name|namedEntityType
argument_list|)
expr_stmt|;
name|nerTagSet
operator|.
name|addTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
return|return
name|tag
return|;
block|}
comment|/**      * Setter for a NamedEntity name&gt;<code>dc:tyoe</code>      * mapping.      * @param namedEntityType the Named Entity type (as      * used by the OpenNLP NameFinder model)      * @param dcType the<code>dc:Type</code> used for the      * NamedEntity or<code>nulll</code> if non      * @throws IllegalArgumentException if the parsed NamedEntity      * type is<code>null</code> or an empty String.      */
specifier|public
name|void
name|setMappedType
parameter_list|(
name|String
name|namedEntityType
parameter_list|,
name|UriRef
name|dcType
parameter_list|)
block|{
if|if
condition|(
name|namedEntityType
operator|!=
literal|null
operator|&&
operator|!
name|namedEntityType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nerTagSet
operator|.
name|addTag
argument_list|(
operator|new
name|NerTag
argument_list|(
name|namedEntityType
argument_list|,
name|dcType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed NamedEntity type MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

