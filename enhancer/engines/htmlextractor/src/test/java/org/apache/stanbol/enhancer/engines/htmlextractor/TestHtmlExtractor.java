begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
operator|.
name|ClerezzaRDFUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
operator|.
name|ExtractorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
operator|.
name|HtmlExtractionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
operator|.
name|HtmlExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
operator|.
name|HtmlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
operator|.
name|InitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  *   */
end_comment

begin_class
specifier|public
class|class
name|TestHtmlExtractor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHtmlExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HtmlParser
name|parser
decl_stmt|;
specifier|private
specifier|static
name|HtmlExtractionRegistry
name|registry
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|oneTimeSetup
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|registry
operator|=
operator|new
name|HtmlExtractionRegistry
argument_list|(
literal|"htmlextractors.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InitializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Registry Initialization Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|parser
operator|=
operator|new
name|HtmlParser
argument_list|()
expr_stmt|;
block|}
comment|/**      * This tests the RDFa extraction.      *      * @throws ExtractorException if there is an error during extraction      * @throws IOException if there is an error when reading the document      */
annotation|@
name|Test
specifier|public
name|void
name|testRdfaExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|HtmlExtractor
name|extractor
init|=
operator|new
name|HtmlExtractor
argument_list|(
name|registry
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|MGraph
name|model
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|String
name|testFile
init|=
literal|"test-rdfa.html"
decl_stmt|;
comment|// extract text from RDFa annotated html
name|InputStream
name|in
init|=
name|getResourceAsStream
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to load resource "
operator|+
name|testFile
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|extract
argument_list|(
literal|"file://"
operator|+
name|testFile
argument_list|,
name|in
argument_list|,
literal|null
argument_list|,
literal|"text/html"
argument_list|,
name|model
argument_list|)
expr_stmt|;
comment|// show triples
name|int
name|tripleCounter
init|=
name|model
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"RDFa triples: {}"
argument_list|,
name|tripleCounter
argument_list|)
expr_stmt|;
name|printTriples
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|tripleCounter
argument_list|)
expr_stmt|;
name|ClerezzaRDFUtils
operator|.
name|makeConnected
argument_list|(
name|model
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"file://"
operator|+
name|testFile
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|nie
operator|+
literal|"contains"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** This tests some Microformat extraction      *       * @throws ExtractorException if there is an error during extraction      * @throws IOException if there is an error when reading the document      */
annotation|@
name|Test
specifier|public
name|void
name|testMFExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|HtmlExtractor
name|extractor
init|=
operator|new
name|HtmlExtractor
argument_list|(
name|registry
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|MGraph
name|model
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|String
name|testFile
init|=
literal|"test-MF.html"
decl_stmt|;
comment|// extract text from RDFa annotated html
name|InputStream
name|in
init|=
name|getResourceAsStream
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to load resource "
operator|+
name|testFile
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|extract
argument_list|(
literal|"file://"
operator|+
name|testFile
argument_list|,
name|in
argument_list|,
literal|null
argument_list|,
literal|"text/html"
argument_list|,
name|model
argument_list|)
expr_stmt|;
comment|// show triples
name|int
name|tripleCounter
init|=
name|model
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Microformat triples: {}"
argument_list|,
name|tripleCounter
argument_list|)
expr_stmt|;
name|printTriples
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|127
argument_list|,
name|tripleCounter
argument_list|)
expr_stmt|;
name|ClerezzaRDFUtils
operator|.
name|makeConnected
argument_list|(
name|model
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"file://"
operator|+
name|testFile
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|nie
operator|+
literal|"contains"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** This tests the merging of disconnected graphs under a single root      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testRootExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|HtmlExtractor
name|extractor
init|=
operator|new
name|HtmlExtractor
argument_list|(
name|registry
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|MGraph
name|model
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|String
name|testFile
init|=
literal|"test-MultiRoot.html"
decl_stmt|;
comment|// extract text from RDFa annotated html
name|InputStream
name|in
init|=
name|getResourceAsStream
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to load resource "
operator|+
name|testFile
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|extract
argument_list|(
literal|"file://"
operator|+
name|testFile
argument_list|,
name|in
argument_list|,
literal|null
argument_list|,
literal|"text/html"
argument_list|,
name|model
argument_list|)
expr_stmt|;
comment|// show triples
name|int
name|tripleCounter
init|=
name|model
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Triples: {}"
argument_list|,
name|tripleCounter
argument_list|)
expr_stmt|;
name|printTriples
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|roots
init|=
name|ClerezzaRDFUtils
operator|.
name|findRoots
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|roots
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|ClerezzaRDFUtils
operator|.
name|makeConnected
argument_list|(
name|model
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"file://"
operator|+
name|testFile
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|nie
operator|+
literal|"contains"
argument_list|)
argument_list|)
expr_stmt|;
name|roots
operator|=
name|ClerezzaRDFUtils
operator|.
name|findRoots
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|testResultFile
parameter_list|)
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testResultFile
argument_list|)
return|;
block|}
specifier|private
name|void
name|printTriples
parameter_list|(
name|MGraph
name|model
parameter_list|)
block|{
for|for
control|(
name|Triple
name|t
range|:
name|model
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

