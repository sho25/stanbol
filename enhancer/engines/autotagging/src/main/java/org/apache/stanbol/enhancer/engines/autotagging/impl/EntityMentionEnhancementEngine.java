begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|autotagging
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|Autotagger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|TagInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|autotagging
operator|.
name|AutotaggerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
import|;
end_import

begin_comment
comment|/**  * Engine that uses an AutotaggerProvider to process existing TextAnnotations of  * an Content Item and searches for related Entities by using the Autotagger  *  * @author ogrisel, rwesten  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|EntityMentionEnhancementEngine
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
name|AutotaggerProvider
name|autotaggerProvider
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine. Currently set to      * {@link EnhancementJobManager#DEFAULT_ORDER}      */
specifier|public
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ORDERING_EXTRACTION_ENHANCEMENT
decl_stmt|;
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|Autotagger
name|autotagger
init|=
name|autotaggerProvider
operator|.
name|getAutotagger
argument_list|()
decl_stmt|;
if|if
condition|(
name|autotagger
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" is deactivated: cannot process content item: "
operator|+
name|ci
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|UriRef
name|contentItemId
init|=
operator|new
name|UriRef
argument_list|(
name|ci
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|MGraph
name|graph
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// Retrieve the existing text annotations
name|Map
argument_list|<
name|UriRef
argument_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
argument_list|>
name|textAnnotations
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|UriRef
name|uri
init|=
operator|(
name|UriRef
operator|)
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|graph
operator|.
name|filter
argument_list|(
name|uri
argument_list|,
name|DC_RELATION
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// this is not the most specific occurrence of this name: skip
continue|continue;
block|}
comment|// This is a first occurrence, collect any subsumed annotations
name|List
argument_list|<
name|UriRef
argument_list|>
name|subsumed
init|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|DC_RELATION
argument_list|,
name|uri
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subsumed
operator|.
name|add
argument_list|(
operator|(
name|UriRef
operator|)
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|textAnnotations
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|subsumed
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
argument_list|>
name|entry
range|:
name|textAnnotations
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|computeEntityRecommendations
argument_list|(
name|autotagger
argument_list|,
name|literalFactory
argument_list|,
name|graph
argument_list|,
name|contentItemId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
specifier|final
name|Collection
argument_list|<
name|TagInfo
argument_list|>
name|computeEntityRecommendations
parameter_list|(
name|Autotagger
name|autotagger
parameter_list|,
name|LiteralFactory
name|literalFactory
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|UriRef
name|contentItemId
parameter_list|,
name|UriRef
name|textAnnotation
parameter_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
name|subsumedAnnotations
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First get the required properties for the parsed textAnnotation
comment|// ... and check the values
name|String
name|name
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to process TextAnnotation "
operator|+
name|textAnnotation
operator|+
literal|" because property"
operator|+
name|ENHANCER_SELECTED_TEXT
operator|+
literal|" is not present"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|String
name|context
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
literal|""
expr_stmt|;
block|}
comment|// aggregate context from subsumed entries:
for|for
control|(
name|NonLiteral
name|subsumedAnnotation
range|:
name|subsumedAnnotations
control|)
block|{
name|String
name|otherContext
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|subsumedAnnotation
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherContext
operator|!=
literal|null
condition|)
block|{
name|context
operator|+=
literal|" "
operator|+
name|otherContext
expr_stmt|;
block|}
block|}
name|UriRef
name|type
init|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|DC_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to process TextAnnotation "
operator|+
name|textAnnotation
operator|+
literal|" because property"
operator|+
name|DC_TYPE
operator|+
literal|" is not present"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Process TextAnnotation "
operator|+
name|name
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
comment|// this is a name lookup + context for disambiguation.
name|List
argument_list|<
name|TagInfo
argument_list|>
name|matchingEntities
init|=
name|autotagger
operator|.
name|suggestForType
argument_list|(
name|name
argument_list|,
name|context
operator|.
name|trim
argument_list|()
argument_list|,
name|type
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NonLiteral
argument_list|>
name|annotationsToRelate
init|=
operator|new
name|ArrayList
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
decl_stmt|;
name|annotationsToRelate
operator|.
name|add
argument_list|(
name|textAnnotation
argument_list|)
expr_stmt|;
name|annotationsToRelate
operator|.
name|addAll
argument_list|(
name|subsumedAnnotations
argument_list|)
expr_stmt|;
for|for
control|(
name|TagInfo
name|guess
range|:
name|matchingEntities
control|)
block|{
name|EnhancementRDFUtils
operator|.
name|writeEntityAnnotation
argument_list|(
name|this
argument_list|,
name|literalFactory
argument_list|,
name|graph
argument_list|,
name|contentItemId
argument_list|,
name|annotationsToRelate
argument_list|,
name|guess
argument_list|)
expr_stmt|;
block|}
return|return
name|matchingEntities
return|;
block|}
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
comment|/*          * This engine consumes existing enhancements because of that it can          * enhance any type of ci! TODO: It would also be possible to check here          * if there is an TextAnnotation and use that as result!          */
return|return
name|ENHANCE_SYNCHRONOUS
return|;
block|}
specifier|public
name|void
name|bindAutotaggerProvider
parameter_list|(
name|AutotaggerProvider
name|autotaggerProvider
parameter_list|)
block|{
name|this
operator|.
name|autotaggerProvider
operator|=
name|autotaggerProvider
expr_stmt|;
block|}
specifier|public
name|void
name|unbindAutotaggerProvider
parameter_list|(
name|AutotaggerProvider
name|autotaggerProvider
parameter_list|)
block|{
name|this
operator|.
name|autotaggerProvider
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|defaultOrder
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

