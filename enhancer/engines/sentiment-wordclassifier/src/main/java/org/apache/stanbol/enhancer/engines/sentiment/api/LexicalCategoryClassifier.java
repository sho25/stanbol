begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2012 Sebastian Schaffert  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|sentiment
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_comment
comment|/**  * Implements the {@link #isAdjective(PosTag)} and {@link #isNoun(PosTag)}  * methods by using the {@link LexicalCategory} of the parsed {@link PosTag}.<p>  * This should be sufficient for all POS TagSets that are mapped to   * {@link LexicalCategory}. For other TagSets users will need to manually  * check {@link PosTag#getTag()}.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LexicalCategoryClassifier
implements|implements
name|SentimentClassifier
block|{
specifier|public
specifier|abstract
name|double
name|classifyWord
parameter_list|(
name|String
name|word
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|isAdjective
parameter_list|(
name|PosTag
name|posTag
parameter_list|)
block|{
return|return
name|posTag
operator|.
name|getCategory
argument_list|()
operator|!=
literal|null
operator|&&
name|LexicalCategory
operator|.
name|Adjective
operator|==
name|posTag
operator|.
name|getCategory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNoun
parameter_list|(
name|PosTag
name|posTag
parameter_list|)
block|{
return|return
name|posTag
operator|.
name|getCategory
argument_list|()
operator|!=
literal|null
operator|&&
name|LexicalCategory
operator|.
name|Noun
operator|==
name|posTag
operator|.
name|getCategory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

