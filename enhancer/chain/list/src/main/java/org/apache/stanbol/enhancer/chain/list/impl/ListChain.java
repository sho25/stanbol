begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|chain
operator|.
name|list
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ConfigUtils
operator|.
name|getState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|createExecutionPlan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|writeExecutionNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ChainException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This Chain implementation takes a list of engines names as input   * and uses the "org.apache.stanbol.enhancer.engine.order " metadata provided by   * such engines to calculate the ExecutionGraph.<p>  *   * Similar the current WeightedJobManager implementation Engines would be  * dependent to each other based on decreasing order values. Engines with the   * same order value would could be executed in parallel.<p>  *   * This implementation is targeted for easy configuration - just a list of the   * engine names contained within a chain - but has limited possibilities to   * control the execution order within an chain. However it is expected   * that it provides enough flexibility for most of the usage scenarios.<p>  *   * This engine also supports the definition of additional parameters for  * Enhancement Engines. The syntax is the same as used by BND tools:   *<pre><code>  *&lt;engineName&gt;;&ltparam-name&gt=&ltparam-value&gt  *&lt;engineName&gt;;&ltparam-name&gt  *</code></pre>  * Parameter without value are interpreted as enabled boolean switch<p>  *   * Currently this Chain implementation supports the following Parameter:<ul>  *<li> optional: Boolean switch that allows to define that the execution of this  * engine is not required.  *</ul>  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|inherit
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Chain
operator|.
name|PROPERTY_NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ListChain
operator|.
name|PROPERTY_ENGINE_LIST
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|Chain
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ListChain
extends|extends
name|AbstractChain
implements|implements
name|Chain
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ListChain
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The list of Enhancement Engine names used to build the Execution Plan      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENGINE_LIST
init|=
literal|"stanbol.enhancer.chain.list.enginelist"
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|engineNames
decl_stmt|;
specifier|private
name|Graph
name|executionPlan
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_ENGINE_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configuredChain
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|configuredChain
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_ENGINE_LIST
argument_list|,
literal|"The engines of a List Chain MUST BE configured as Array of "
operator|+
literal|"Strings (parsed: "
operator|+
operator|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getClass
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|engineNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|configuredChain
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|NonLiteral
name|last
init|=
literal|null
decl_stmt|;
name|MGraph
name|ep
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|NonLiteral
name|epNode
init|=
name|createExecutionPlan
argument_list|(
name|ep
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Parse ListChain config:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|configuredChain
control|)
block|{
try|try
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|parsed
init|=
name|ConfigUtils
operator|.
name|parseConfigEntry
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|engineNames
operator|.
name|add
argument_list|(
name|parsed
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_ENGINE_LIST
argument_list|,
literal|"The EnhancementEngine '"
operator|+
name|parsed
operator|.
name|getKey
argument_list|()
operator|+
literal|"' is mentioned"
operator|+
literal|"twice in the configured list!"
argument_list|)
throw|;
block|}
name|boolean
name|optional
init|=
name|getState
argument_list|(
name|parsed
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"optional"
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> Engine: {} ({})"
argument_list|,
name|parsed
operator|.
name|getKey
argument_list|()
argument_list|,
name|optional
condition|?
literal|"optional"
else|:
literal|"required"
argument_list|)
expr_stmt|;
name|last
operator|=
name|writeExecutionNode
argument_list|(
name|ep
argument_list|,
name|epNode
argument_list|,
name|parsed
operator|.
name|getKey
argument_list|()
argument_list|,
name|optional
argument_list|,
name|last
operator|==
literal|null
condition|?
literal|null
else|:
name|Collections
operator|.
name|singleton
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_ENGINE_LIST
argument_list|,
literal|"Unable to parse Chain Configuraiton (message: '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"')!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|engineNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_ENGINE_LIST
argument_list|,
literal|"The configured chain MUST at least contain a single valid entry!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|engineNames
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|engineNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|executionPlan
operator|=
name|ep
operator|.
name|getGraph
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|engineNames
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|executionPlan
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Graph
name|getExecutionPlan
parameter_list|()
throws|throws
name|ChainException
block|{
return|return
name|executionPlan
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEngines
parameter_list|()
block|{
return|return
name|engineNames
return|;
block|}
block|}
end_class

end_unit

