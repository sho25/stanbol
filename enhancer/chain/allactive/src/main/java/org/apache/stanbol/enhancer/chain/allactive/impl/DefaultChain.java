begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|chain
operator|.
name|allactive
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_comment
comment|/**  * This is actually no {@link Chain} implementation, but an component that -   * if {@link #PROPERTY_ENABLED} is set to<code>true</code> - ensures that an  * instance of the {@link AllActiveEnginesChain} with the   * {@link EnhancementEngine#PROPERTY_NAME} = "default" and  * the {@link Constants#SERVICE_RANKING} = {@link Integer#MIN_VALUE} is   * registered as service.<p>  * This ensures that the behaviour of the Stanbol Enhancer - to enhance parsed   * {@link ContentItem}s by using all currently active   * {@link EnhancementEngine}s - is still the default after the introduction of   * {@link Chain}s. See the documentation of the Stanbol Enhancer for details.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|DefaultChain
block|{
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
name|DefaultChain
operator|.
name|DEFAULT_STATE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENABLED
init|=
literal|"stanbol.enhancer.chain.default.enabled"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|DefaultChain
operator|.
name|DEFAULT_NAME
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_NAME
init|=
literal|"stanbol.enhancer.chain.default.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_STATE
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NAME
init|=
literal|"default"
decl_stmt|;
specifier|private
name|ServiceRegistration
name|defaultChainReg
decl_stmt|;
specifier|private
name|AllActiveEnginesChain
name|defaultChain
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|boolean
name|enabled
init|=
name|DEFAULT_STATE
decl_stmt|;
name|Object
name|value
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|enabled
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_NAME
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|value
operator|==
literal|null
condition|?
name|DEFAULT_NAME
else|:
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_NAME
argument_list|,
literal|"The parsed name for the default chain MUST NOT be empty!"
argument_list|)
throw|;
block|}
name|int
name|ranking
decl_stmt|;
name|value
operator|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|ranking
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ranking
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|"Unable to pase Integer service.ranking value"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ranking
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|enabled
condition|)
block|{
name|defaultChain
operator|=
operator|new
name|AllActiveEnginesChain
argument_list|(
name|ctx
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Chain
operator|.
name|PROPERTY_NAME
argument_list|,
name|defaultChain
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|ranking
argument_list|)
expr_stmt|;
name|defaultChainReg
operator|=
name|ctx
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|Chain
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultChain
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|defaultChainReg
operator|!=
literal|null
condition|)
block|{
name|defaultChainReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|defaultChainReg
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|defaultChain
operator|!=
literal|null
condition|)
block|{
name|defaultChain
operator|.
name|close
argument_list|()
expr_stmt|;
name|defaultChain
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

