begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|jena
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QuerySolution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QuerySolutionMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Syntax
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|TDBFactory
import|;
end_import

begin_comment
comment|/**  * Read a Jena model and extract the most popular resources given by a  * "tab separated values" files that holds the rank information of the  * resources.  *  * For instance such as file can be computed from the page links info of DBpedia  * using the corpusmaker toolkit: http://github.com/ogrisel/corpusmaker  *  * As it takes from 1h to 3h to compute such statistics, a precomputed file is  * available here:  *  * http://dl.dropbox.com/u/5743203/IKS/autotagging/incoming-counts-redirected.  * tsv.gz  *  * @author ogrisel  */
end_comment

begin_class
specifier|public
class|class
name|ModelResampler
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|maxTopResources
init|=
literal|10000
decl_stmt|;
specifier|protected
name|File
name|tsvScoreFile
decl_stmt|;
specifier|public
name|ModelResampler
parameter_list|()
block|{
comment|// use default values
block|}
specifier|public
name|ModelResampler
name|withMaxTopResources
parameter_list|(
name|int
name|maxTopResources
parameter_list|)
block|{
name|this
operator|.
name|maxTopResources
operator|=
name|maxTopResources
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ModelResampler
name|withPrecomputedScoresFile
parameter_list|(
name|File
name|tsvRanksFile
parameter_list|)
block|{
name|tsvScoreFile
operator|=
name|tsvRanksFile
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Perform a query that returns a result set iterating over all typed      * resource. The ordering of the results is undefined.      *      * @param model the model to query      * @return a result set where 'resource' is bound to the a resource      */
specifier|public
name|ResultSet
name|queryAllResources
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|QuerySolution
name|mapping
init|=
operator|new
name|QuerySolutionMap
argument_list|()
decl_stmt|;
name|StringBuilder
name|qb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"SELECT distinct ?resource   "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|" ?resource a ?type . "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|" FILTER ( isURI(?resource) ) . "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"} "
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|qb
operator|.
name|toString
argument_list|()
argument_list|,
name|Syntax
operator|.
name|syntaxARQ
argument_list|)
decl_stmt|;
name|QueryExecution
name|qexec
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|q
argument_list|,
name|model
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
return|return
name|qexec
operator|.
name|execSelect
argument_list|()
return|;
block|}
comment|/**      * Perform a query to find the top popular resources by counting incoming      * links. The score values are normalized (the most popular resource as a      * score of 1.0, unless all scores are 0.0).      *      * @param model the model to query      * @return a result set where 'resource' is bound to a popular resource      */
specifier|public
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
name|queryTopResources
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|QuerySolution
name|mapping
init|=
operator|new
name|QuerySolutionMap
argument_list|()
decl_stmt|;
name|StringBuilder
name|qb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"SELECT ?resource ( count(?incoming) AS ?count )  "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|" ?resource a ?type . "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|" OPTIONAL { ?incoming ?relationship ?resource . } . "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|" FILTER ( isURI(?resource) ) . "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"} "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"GROUP BY ?resource "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
literal|"ORDER BY DESC ( ?count ) "
argument_list|)
expr_stmt|;
name|qb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"OFFSET 0 LIMIT %d"
argument_list|,
name|maxTopResources
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|qb
operator|.
name|toString
argument_list|()
argument_list|,
name|Syntax
operator|.
name|syntaxARQ
argument_list|)
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|q
argument_list|,
name|model
argument_list|,
name|mapping
argument_list|)
operator|.
name|execSelect
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
argument_list|()
block|{
name|long
name|sampled
init|=
literal|0
decl_stmt|;
name|double
name|maxScore
init|=
literal|1.0
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|resultSet
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|ResourceInfo
name|next
parameter_list|()
block|{
name|QuerySolution
name|nextSolution
init|=
name|resultSet
operator|.
name|nextSolution
argument_list|()
decl_stmt|;
name|double
name|count
init|=
name|nextSolution
operator|.
name|getLiteral
argument_list|(
literal|"count"
argument_list|)
operator|.
name|getDouble
argument_list|()
decl_stmt|;
name|double
name|score
init|=
name|Math
operator|.
name|log1p
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|sampled
operator|==
literal|0
operator|&&
name|count
operator|>
literal|0
condition|)
block|{
name|maxScore
operator|=
name|score
expr_stmt|;
block|}
name|sampled
operator|++
expr_stmt|;
return|return
operator|new
name|ResourceInfo
argument_list|(
name|nextSolution
operator|.
name|getResource
argument_list|(
literal|"resource"
argument_list|)
argument_list|,
name|score
operator|/
name|maxScore
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
name|findTopResources
parameter_list|(
specifier|final
name|Model
name|model
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
name|tsvScoreFile
operator|==
literal|null
condition|)
block|{
return|return
name|queryTopResources
argument_list|(
name|model
argument_list|)
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tsvScoreFile
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
argument_list|()
block|{
name|double
name|maxScore
init|=
literal|1.0
decl_stmt|;
name|int
name|sampled
init|=
literal|0
decl_stmt|;
name|ResourceInfo
name|nextRi
init|=
literal|null
decl_stmt|;
specifier|protected
name|ResourceInfo
name|fetchNext
parameter_list|(
name|boolean
name|andForget
parameter_list|)
block|{
name|ResourceInfo
name|result
init|=
name|nextRi
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lines
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|lines
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"skipping line: '%s'"
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fetchNext
argument_list|(
name|andForget
argument_list|)
return|;
block|}
name|double
name|score
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
comment|// take the log to avoid over popular entities to
comment|// dominate the results (attenuate the Zipf law of
comment|// culturally generated distribution)
name|score
operator|=
name|Math
operator|.
name|log1p
argument_list|(
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|sampled
operator|==
literal|0
operator|&&
name|score
operator|>
literal|0
condition|)
block|{
name|maxScore
operator|=
name|score
expr_stmt|;
block|}
name|String
name|resource
init|=
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
block|{
name|resource
operator|=
literal|"http://dbpedia.org/resource/"
operator|+
name|resource
expr_stmt|;
block|}
name|Resource
name|r
init|=
name|model
operator|.
name|createResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|containsResource
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"skipping resource: '%s', not found in model"
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fetchNext
argument_list|(
name|andForget
argument_list|)
return|;
block|}
name|result
operator|=
operator|new
name|ResourceInfo
argument_list|(
name|r
argument_list|,
name|score
operator|/
name|maxScore
argument_list|)
expr_stmt|;
block|}
block|}
name|nextRi
operator|=
name|andForget
condition|?
literal|null
else|:
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|sampled
operator|<
name|maxTopResources
operator|&&
name|fetchNext
argument_list|(
literal|false
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|ResourceInfo
name|next
parameter_list|()
block|{
name|ResourceInfo
name|next
init|=
name|fetchNext
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|sampled
operator|++
expr_stmt|;
return|return
name|next
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
comment|/**      * Iteratively sample statements carried by popular resources of sourceModel      * into targetModel.      *      * @param sourceModel model to sample popular resources from      * @param targetModel model to save resource attributes to      * @return an iterator over popular resource to monitor progress      * @throws IOException      * @throws FileNotFoundException      */
specifier|public
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
name|samplerIterator
parameter_list|(
specifier|final
name|Model
name|sourceModel
parameter_list|,
specifier|final
name|Model
name|targetModel
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
specifier|final
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
name|topResources
init|=
name|findTopResources
argument_list|(
name|sourceModel
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|topResources
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|ResourceInfo
name|next
parameter_list|()
block|{
name|ResourceInfo
name|ri
init|=
name|topResources
operator|.
name|next
argument_list|()
decl_stmt|;
name|StmtIterator
name|stmts
init|=
name|sourceModel
operator|.
name|listStatements
argument_list|(
name|ri
operator|.
name|resource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|targetModel
operator|.
name|add
argument_list|(
name|stmts
argument_list|)
expr_stmt|;
name|targetModel
operator|.
name|add
argument_list|(
name|targetModel
operator|.
name|createLiteralStatement
argument_list|(
name|ri
operator|.
name|resource
argument_list|,
name|targetModel
operator|.
name|getProperty
argument_list|(
name|ModelIndexer
operator|.
name|POPULARITY_SCORE_PROPERTY
argument_list|)
argument_list|,
name|ri
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ri
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
comment|/**      * Extract the most popular resources ranked by incoming relation into s *      * targetModel.      *      * @param sourceModel model to extract popular resource from      * @param targetModel model where to save the extracted resources data      *      * @throws IOException      * @throws FileNotFoundException      */
specifier|public
name|void
name|extractMostPopular
parameter_list|(
name|Model
name|sourceModel
parameter_list|,
name|Model
name|targetModel
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"computing the list of resources to sample..."
argument_list|)
expr_stmt|;
name|long
name|lastTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ResourceInfo
argument_list|>
name|iterator
init|=
name|samplerIterator
argument_list|(
name|sourceModel
argument_list|,
name|targetModel
argument_list|)
decl_stmt|;
name|long
name|newTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"query took %fs"
argument_list|,
operator|(
name|newTime
operator|-
name|lastTime
operator|)
operator|/
literal|1000.
argument_list|)
argument_list|)
expr_stmt|;
name|lastTime
operator|=
name|newTime
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|long
name|checkpointSize
init|=
literal|5000
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ResourceInfo
name|ri
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
operator|&&
name|ri
operator|.
name|score
operator|==
literal|0.0f
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"most popular resource '%s' has a score of 0.0..."
argument_list|,
name|ri
operator|.
name|resource
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
name|checkpointSize
operator|==
literal|0
condition|)
block|{
name|newTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|double
name|duration
init|=
operator|(
name|newTime
operator|-
name|lastTime
operator|)
operator|/
literal|1000.
decl_stmt|;
name|String
name|uri
init|=
name|ri
operator|.
name|resource
operator|.
name|getURI
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"sampled resource %09d (at '%s' with score %f) - %f entities/s"
argument_list|,
name|i
argument_list|,
name|URLDecoder
operator|.
name|decode
argument_list|(
name|uri
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
name|ri
operator|.
name|score
argument_list|,
name|checkpointSize
operator|/
name|duration
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"invalid URI '%s': %s"
argument_list|,
name|uri
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastTime
operator|=
name|newTime
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"successfully sampled %09d resources"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|resample
parameter_list|(
name|File
name|srcTdbFolder
parameter_list|,
name|File
name|targetFile
parameter_list|,
name|File
name|scoresFile
parameter_list|,
name|int
name|maxTopResources
parameter_list|)
throws|throws
name|IOException
block|{
name|Model
name|sourceModel
init|=
name|TDBFactory
operator|.
name|createModel
argument_list|(
name|srcTdbFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|targetFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|format
init|=
literal|null
decl_stmt|;
name|boolean
name|useTemporaryModel
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".nt"
argument_list|)
condition|)
block|{
name|format
operator|=
literal|"N-TRIPLE"
expr_stmt|;
name|useTemporaryModel
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".n3"
argument_list|)
condition|)
block|{
name|format
operator|=
literal|"N3"
expr_stmt|;
name|useTemporaryModel
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
comment|// format = null will use the XML syntax
name|useTemporaryModel
operator|=
literal|true
expr_stmt|;
block|}
comment|// TODO: use a temporary TDB model in a temporary directory instead of
comment|// a memory model that lacks scalability?
name|Model
name|targetModel
init|=
name|useTemporaryModel
condition|?
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
else|:
name|TDBFactory
operator|.
name|createModel
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|ModelResampler
name|sampler
init|=
operator|new
name|ModelResampler
argument_list|()
operator|.
name|withMaxTopResources
argument_list|(
name|maxTopResources
argument_list|)
operator|.
name|withPrecomputedScoresFile
argument_list|(
name|scoresFile
argument_list|)
decl_stmt|;
name|sampler
operator|.
name|extractMostPopular
argument_list|(
name|sourceModel
argument_list|,
name|targetModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|useTemporaryModel
condition|)
block|{
name|targetModel
operator|.
name|write
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|targetFile
argument_list|)
argument_list|,
name|format
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

