begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|Autotagger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|TagInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|jena
operator|.
name|ModelIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
operator|.
name|jena
operator|.
name|ModelResampler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|TDBFactory
import|;
end_import

begin_comment
comment|/**  * Command line User Interface for importing RDF data into Jena models from  * dumps, sampling the relevant part and indexing the results with Lucene.  *  * @author ogrisel  */
end_comment

begin_class
specifier|public
class|class
name|CommandLineRunner
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MODEL_DIRECTORY
init|=
literal|"m"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILENAMES_TO_LOAD
init|=
literal|"f"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FILES
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
name|Options
name|makeCommonOptions
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"display this help and exit"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"d"
argument_list|,
literal|"debug"
argument_list|,
literal|false
argument_list|,
literal|"show debug stacktrace upon error"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|MODEL_DIRECTORY
argument_list|,
literal|"modeldirectory"
argument_list|,
literal|true
argument_list|,
literal|"configure output model directory"
argument_list|)
expr_stmt|;
name|Option
name|filenamesOption
init|=
operator|new
name|Option
argument_list|(
name|FILENAMES_TO_LOAD
argument_list|,
literal|"filenames"
argument_list|,
literal|true
argument_list|,
literal|"list of files to load into model"
argument_list|)
decl_stmt|;
name|filenamesOption
operator|.
name|setValueSeparator
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|filenamesOption
operator|.
name|setArgs
argument_list|(
name|MAX_FILES
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|filenamesOption
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
specifier|public
specifier|static
name|void
name|handleModel
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|Options
name|options
init|=
name|makeCommonOptions
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
operator|||
name|line
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"model /path/to/tdb-model file.nt [file2.n3.gz file3.xml.bz2 ...]"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|modelPath
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
name|MODEL_DIRECTORY
argument_list|)
condition|)
block|{
name|modelPath
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
name|MODEL_DIRECTORY
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"please specify model directory "
operator|+
literal|"with "
operator|+
name|MODEL_DIRECTORY
operator|+
literal|" option switch"
argument_list|)
throw|;
name|String
index|[]
name|filenames
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
name|FILENAMES_TO_LOAD
argument_list|)
condition|)
block|{
name|filenames
operator|=
name|line
operator|.
name|getOptionValues
argument_list|(
name|FILENAMES_TO_LOAD
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"please specify "
operator|+
literal|"at least one filename to load using "
operator|+
name|FILENAMES_TO_LOAD
operator|+
literal|" option switch and ';' as separator"
argument_list|)
throw|;
name|Model
name|model
init|=
name|TDBFactory
operator|.
name|createModel
argument_list|(
name|modelPath
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|filename
range|:
name|filenames
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"loading '%s' into model '%s'..."
argument_list|,
name|filename
argument_list|,
name|modelPath
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".gz"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|filename
operator|=
name|filename
operator|.
name|replaceFirst
argument_list|(
literal|"\\.gz$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".bz2"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|filename
operator|=
name|filename
operator|.
name|replaceFirst
argument_list|(
literal|"\\.bz2$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|String
name|format
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".nt"
argument_list|)
condition|)
block|{
name|format
operator|=
literal|"N-TRIPLE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".n3"
argument_list|)
condition|)
block|{
name|format
operator|=
literal|"N3"
expr_stmt|;
block|}
comment|// XML is the default format
name|model
operator|.
name|read
argument_list|(
name|is
argument_list|,
literal|null
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" done"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|handleResample
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|Options
name|options
init|=
name|makeCommonOptions
argument_list|()
decl_stmt|;
name|Option
name|maxTopResourcesOpt
init|=
operator|new
name|Option
argument_list|(
literal|"t"
argument_list|,
literal|"max-top-resources"
argument_list|,
literal|true
argument_list|,
literal|"maximum number of resources to sample"
argument_list|)
decl_stmt|;
name|maxTopResourcesOpt
operator|.
name|setType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|maxTopResourcesOpt
argument_list|)
expr_stmt|;
name|Option
name|scoreFileOpt
init|=
operator|new
name|Option
argument_list|(
literal|"s"
argument_list|,
literal|"score-file"
argument_list|,
literal|true
argument_list|,
literal|"use TSV file holding ranked and scored resources"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|scoreFileOpt
argument_list|)
expr_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|boolean
name|debug
init|=
name|line
operator|.
name|hasOption
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|args
operator|=
name|line
operator|.
name|getArgs
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
operator|||
name|line
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"resample /path/to/src-tdb-model /path/to/sampled-tdb-model"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|maxTopResources
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"t"
argument_list|,
literal|"10000"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|scores
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
name|ModelResampler
operator|.
name|resample
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|scores
argument_list|)
argument_list|,
name|maxTopResources
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ERROR: %s - %s"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|handleIndex
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|Options
name|options
init|=
name|makeCommonOptions
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|args
operator|=
name|line
operator|.
name|getArgs
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
operator|||
name|line
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"index /path/to/tdb-model /path/to/lucene-index"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ModelIndexer
operator|.
name|index
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|handleSuggest
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|Options
name|options
init|=
name|makeCommonOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"i"
argument_list|,
literal|"index"
argument_list|,
literal|true
argument_list|,
literal|"path to a specific lucene directory"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"n"
argument_list|,
literal|"name"
argument_list|,
literal|true
argument_list|,
literal|"restrict suggestions to lookup entities matching the provided name"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"c"
argument_list|,
literal|"context"
argument_list|,
literal|true
argument_list|,
literal|"restrict suggestions to entities similar to the provided context"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"f"
argument_list|,
literal|"context-file"
argument_list|,
literal|true
argument_list|,
literal|"restrict suggestions to entities similar to the provided utf-8 text file"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"t"
argument_list|,
literal|"type"
argument_list|,
literal|true
argument_list|,
literal|"restrict suggestions to entities of given type"
argument_list|)
expr_stmt|;
name|Option
name|maxSuggestionsOpt
init|=
operator|new
name|Option
argument_list|(
literal|"s"
argument_list|,
literal|"max-suggestions"
argument_list|,
literal|true
argument_list|,
literal|"maximum number of suggestions"
argument_list|)
decl_stmt|;
name|maxSuggestionsOpt
operator|.
name|setType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|maxSuggestionsOpt
argument_list|)
expr_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|args
operator|=
name|line
operator|.
name|getArgs
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"n"
argument_list|)
decl_stmt|;
name|String
name|context
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"c"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|contextFile
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
operator|||
operator|(
name|name
operator|==
literal|null
operator|&&
name|context
operator|==
literal|null
operator|&&
name|contextFile
operator|==
literal|null
operator|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"suggest --name \"John Smith\" --context-file smith-biography.txt "
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|customIndex
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|customIndex
operator|!=
literal|null
condition|)
block|{
name|dir
operator|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|customIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|ModelIndexer
operator|.
name|buildDefaultIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|maxSuggestions
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"s"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|Autotagger
name|tagger
init|=
operator|new
name|Autotagger
argument_list|(
name|dir
argument_list|)
operator|.
name|withMaxSuggestions
argument_list|(
name|maxSuggestions
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextFile
operator|!=
literal|null
condition|)
block|{
name|context
operator|+=
literal|" "
expr_stmt|;
name|context
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|contextFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Computing suggestions..."
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TagInfo
argument_list|>
name|suggestions
init|=
name|tagger
operator|.
name|suggestForType
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|" done in %dms:\n"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suggestions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TagInfo
name|tag
init|=
name|suggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Suggestion #%d (score: %f): '%s'\n"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|tag
operator|.
name|getConfidence
argument_list|()
argument_list|,
name|tag
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"URI:\t%s\n"
argument_list|,
name|tag
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tagType
range|:
name|tag
operator|.
name|getType
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"type:\t%s\n"
argument_list|,
name|tagType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected command: model, resample, index or suggest"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|command
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|commandArgs
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"model"
argument_list|)
condition|)
block|{
name|handleModel
argument_list|(
name|commandArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"resample"
argument_list|)
condition|)
block|{
name|handleResample
argument_list|(
name|commandArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|handleIndex
argument_list|(
name|commandArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"suggest"
argument_list|)
condition|)
block|{
name|handleSuggest
argument_list|(
name|commandArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|append
argument_list|(
literal|"Unknown command: "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

