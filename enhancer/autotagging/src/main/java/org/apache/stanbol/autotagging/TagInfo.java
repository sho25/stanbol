begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|autotagging
package|;
end_package

begin_comment
comment|/**  * Simple data transfer object to hold the results of the Autotagger annotation  * process. This then can be mapped to a very simple RDF graph to publish the  * results annotations to third party applications.  *  * @author ogrisel  */
end_comment

begin_class
specifier|public
class|class
name|TagInfo
block|{
comment|/**      * Unique ID of the entity that is related to the text content. This is      * typically the DBpedia unique URI of the entity.      */
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
comment|/**      * Human readable label (or name) of the related entity.      */
specifier|private
specifier|final
name|String
name|label
decl_stmt|;
comment|/**      * Measure of the estimated quality of the suggestion, the bigger, the      * better. The actual range of values is data and implementation specific.      */
specifier|private
specifier|final
name|Double
name|confidence
decl_stmt|;
comment|/**      * List of types of the related entity. This typically a list of owl:Class      * from the DBpedia ontology (e.g. 'http://dbpedia.org/ontology/Person').      */
specifier|private
specifier|final
name|String
index|[]
name|type
decl_stmt|;
specifier|public
name|TagInfo
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|label
parameter_list|,
name|String
index|[]
name|type
parameter_list|,
name|double
name|confidence
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter id MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|confidence
operator|=
name|confidence
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s [%f]"
argument_list|,
name|label
argument_list|,
name|confidence
argument_list|)
return|;
block|}
comment|/**      * Checks for != null, instanceof TagInfor and equals id      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|TagInfo
operator|&&
operator|(
operator|(
name|TagInfo
operator|)
name|obj
operator|)
operator|.
name|id
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
operator|(
operator|(
name|TagInfo
operator|)
name|obj
operator|)
operator|.
name|confidence
operator|.
name|equals
argument_list|(
name|confidence
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
specifier|final
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
specifier|public
specifier|final
name|Double
name|getConfidence
parameter_list|()
block|{
return|return
name|confidence
return|;
block|}
specifier|public
specifier|final
name|String
index|[]
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Implementation based on the id and confidence property      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|.
name|hashCode
argument_list|()
operator|+
name|confidence
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

