begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|ldpath
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|ldpath
operator|.
name|ContentItemBackendTest
operator|.
name|getTestResource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|ldpath
operator|.
name|ContentItemBackendTest
operator|.
name|parseRdfData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|ParsingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|parser
operator|.
name|JenaParserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|ContentItemBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|ByteArraySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|LDPath
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_comment
comment|/**  * Uses the "example.*" files to build a contentItem. This contains a big  * number of Text/EntityAnnotation and is used here to provide useage examples  * of the Stanbol Enhancer LDPath functions.<p>  * In addition setting the {@value #ITERATIONS} parameter to a value>= 100  * is a good option to do performance testing. Lower values suffer from  * JIT optimisation. Indexing times on my Machine (1:340ms , 10:100ms,   * 100:66ms, 1000:60ms)  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|UsageExamples
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UsageExamples
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ContentItemFactory
name|ciFactory
init|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|ITERATIONS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|ContentItem
name|ci
decl_stmt|;
specifier|private
name|ContentItemBackend
name|backend
decl_stmt|;
specifier|private
name|LDPath
argument_list|<
name|Resource
argument_list|>
name|ldpath
decl_stmt|;
specifier|private
specifier|static
name|double
name|indexingTime
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|readTestData
parameter_list|()
throws|throws
name|IOException
block|{
comment|//add the metadata
name|ParsingProvider
name|parser
init|=
operator|new
name|JenaParserProvider
argument_list|()
decl_stmt|;
comment|//create the content Item with the HTML content
name|MGraph
name|rdfData
init|=
name|parseRdfData
argument_list|(
name|parser
argument_list|,
literal|"example.rdf.zip"
argument_list|)
decl_stmt|;
name|UriRef
name|contentItemId
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|rdfData
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentItemId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
block|{
name|contentItemId
operator|=
operator|(
name|UriRef
operator|)
name|r
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"multiple ContentItems IDs contained in the RDF test data"
argument_list|,
name|contentItemId
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"RDF data doe not contain an Enhancement extracted form "
operator|+
literal|"the content item"
argument_list|,
name|contentItemId
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getTestResource
argument_list|(
literal|"example.txt"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Example Plain text content not found"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|byte
index|[]
name|textData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ci
operator|=
name|ciFactory
operator|.
name|createContentItem
argument_list|(
name|contentItemId
argument_list|,
operator|new
name|ByteArraySource
argument_list|(
name|textData
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|addAll
argument_list|(
name|rdfData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|initBackend
parameter_list|()
block|{
if|if
condition|(
name|backend
operator|==
literal|null
condition|)
block|{
name|backend
operator|=
operator|new
name|ContentItemBackend
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ldpath
operator|==
literal|null
condition|)
block|{
name|ldpath
operator|=
operator|new
name|LDPath
argument_list|<
name|Resource
argument_list|>
argument_list|(
name|backend
argument_list|,
name|EnhancerLDPath
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This provides some example on how to select persons extracted from      * a contentItem      * @throws LDPathParseException      */
annotation|@
name|Test
specifier|public
name|void
name|exampleExtractedPersons
parameter_list|()
throws|throws
name|LDPathParseException
block|{
name|StringBuilder
name|program
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|program
operator|.
name|append
argument_list|(
literal|"personMentions = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Person]/fise:selected-text :: xsd:string;"
argument_list|)
expr_stmt|;
comment|//this uses the labels of suggested person with the highest confidence
comment|//but also the selected-text as fallback if no entity is suggested.
name|program
operator|.
name|append
argument_list|(
literal|"personNames = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Person]/fn:first(fn:suggestion(.,\"1\")/fise:entity-label,fise:selected-text) :: xsd:string;"
argument_list|)
expr_stmt|;
name|program
operator|.
name|append
argument_list|(
literal|"linkedPersons = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Person]/fn:suggestedEntity(.,\"1\") :: xsd:anyURI;"
argument_list|)
expr_stmt|;
comment|//this selects only linked Artists
name|program
operator|.
name|append
argument_list|(
literal|"linkedArtists = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Person]/fn:suggestion(.)"
operator|+
literal|"[fise:entity-type is dbpedia-ont:Artist]/fise:entity-reference :: xsd:anyURI;"
argument_list|)
expr_stmt|;
name|Program
argument_list|<
name|Resource
argument_list|>
name|personProgram
init|=
name|ldpath
operator|.
name|parseProgram
argument_list|(
operator|new
name|StringReader
argument_list|(
name|program
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"- - - - - - - - - - - - - "
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Person Indexing Examples"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|execute
argument_list|(
name|personProgram
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|logResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Execute the ldpath program  {@link #ITERATIONS} times and adds the      * average execution time to {@link #indexingTime}      * @param personProgram      * @return the results      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|execute
parameter_list|(
name|Program
argument_list|<
name|Resource
argument_list|>
name|personProgram
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|personProgram
operator|.
name|execute
argument_list|(
name|backend
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|personProgram
operator|.
name|execute
argument_list|(
name|backend
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|duration
init|=
operator|(
call|(
name|double
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ITERATIONS
argument_list|)
operator|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"processing time {}ms (average over {} iterations)"
argument_list|,
name|duration
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ITERATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|indexingTime
operator|=
name|indexingTime
operator|+
name|duration
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * This provides some example on how to select persons extracted from      * a contentItem      * @throws LDPathParseException      */
annotation|@
name|Test
specifier|public
name|void
name|exampleExtractedPlaces
parameter_list|()
throws|throws
name|LDPathParseException
block|{
name|StringBuilder
name|program
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|program
operator|.
name|append
argument_list|(
literal|"locationMentions = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Place]/fise:selected-text :: xsd:string;"
argument_list|)
expr_stmt|;
comment|//this uses the labels of suggested places with the highest confidence
comment|//but also the selected-text as fallback if no entity is suggested.
name|program
operator|.
name|append
argument_list|(
literal|"locationNames = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Place]/fn:first(fn:suggestion(.,\"1\")/fise:entity-label,fise:selected-text) :: xsd:string;"
argument_list|)
expr_stmt|;
name|program
operator|.
name|append
argument_list|(
literal|"linkedPlaces = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Place]/fn:suggestedEntity(.,\"1\") :: xsd:anyURI;"
argument_list|)
expr_stmt|;
comment|//this selects only linked Artists
name|program
operator|.
name|append
argument_list|(
literal|"linkedCountries = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Place]/fn:suggestion(.)"
operator|+
literal|"[fise:entity-type is dbpedia-ont:Country]/fise:entity-reference :: xsd:anyURI;"
argument_list|)
expr_stmt|;
name|Program
argument_list|<
name|Resource
argument_list|>
name|personProgram
init|=
name|ldpath
operator|.
name|parseProgram
argument_list|(
operator|new
name|StringReader
argument_list|(
name|program
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"- - - - - - - - - - - - -"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Places Indexing Examples"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|execute
argument_list|(
name|personProgram
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|logResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * This provides some example on how to select persons extracted from      * a contentItem      * @throws LDPathParseException      */
annotation|@
name|Test
specifier|public
name|void
name|exampleExtractedOrganization
parameter_list|()
throws|throws
name|LDPathParseException
block|{
name|StringBuilder
name|program
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|program
operator|.
name|append
argument_list|(
literal|"orgMentions = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Organisation]/fise:selected-text :: xsd:string;"
argument_list|)
expr_stmt|;
comment|//this uses the labels of suggested organisations with the highest confidence
comment|//but also the selected-text as fallback if no entity is suggested.
name|program
operator|.
name|append
argument_list|(
literal|"orgNames = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Organisation]/fn:first(fn:suggestion(.,\"1\")/fise:entity-label,fise:selected-text) :: xsd:string;"
argument_list|)
expr_stmt|;
name|program
operator|.
name|append
argument_list|(
literal|"linkedOrgs = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Organisation]/fn:suggestedEntity(.,\"1\") :: xsd:anyURI;"
argument_list|)
expr_stmt|;
comment|//this selects only linked education organisations
comment|//NOTE: this does not use a limit on suggestion(.)!
name|program
operator|.
name|append
argument_list|(
literal|"linkedEducationOrg = fn:textAnnotation(.)"
operator|+
literal|"[dc:type is dbpedia-ont:Organisation]/fn:suggestion(.)"
operator|+
literal|"[fise:entity-type is dbpedia-ont:EducationalInstitution]/fise:entity-reference :: xsd:anyURI;"
argument_list|)
expr_stmt|;
name|Program
argument_list|<
name|Resource
argument_list|>
name|personProgram
init|=
name|ldpath
operator|.
name|parseProgram
argument_list|(
operator|new
name|StringReader
argument_list|(
name|program
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"- - - - - - - - - - - - -"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Places Indexing Examples"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|execute
argument_list|(
name|personProgram
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|logResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * This provides some example on how to select persons extracted from      * a contentItem      * @throws LDPathParseException      */
annotation|@
name|Test
specifier|public
name|void
name|exampleExtractedConcepts
parameter_list|()
throws|throws
name|LDPathParseException
block|{
name|StringBuilder
name|program
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|program
operator|.
name|append
argument_list|(
literal|"conceptNames = fn:entityAnnotation(.)"
operator|+
literal|"[fise:entity-type is skos:Concept]/fise:entity-label :: xsd:anyURI;"
argument_list|)
expr_stmt|;
comment|//this uses the labels of suggested person with the highest confidence
comment|//but also the selected-text as fallback if no entity is suggested.
name|program
operator|.
name|append
argument_list|(
literal|"linkedConcepts = fn:entityAnnotation(.)"
operator|+
literal|"[fise:entity-type is skos:Concept]/fise:entity-reference :: xsd:anyURI;"
argument_list|)
expr_stmt|;
name|Program
argument_list|<
name|Resource
argument_list|>
name|personProgram
init|=
name|ldpath
operator|.
name|parseProgram
argument_list|(
operator|new
name|StringReader
argument_list|(
name|program
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"- - - - - - - - - - - - -"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Concept Indexing Examples"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|execute
argument_list|(
name|personProgram
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|logResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|logResults
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|field
range|:
name|result
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Field {}: {} values"
argument_list|,
name|field
operator|.
name|getKey
argument_list|()
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|field
operator|.
name|getValue
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    {} (type: '{}')"
argument_list|,
name|value
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|printDuration
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"- - - - - - - - - - - - - - - - - - - - - - - - - "
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Indexing Time: {}ms (average over {} iterations)"
argument_list|,
name|indexingTime
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ITERATIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

