begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|ldpath
operator|.
name|function
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
operator|.
name|parseMimeType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|ldpath
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|ContentItemBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides access to the contents stored in {@link Blob}s added as content parts  * to a contentItem.<p>  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ContentFunction
extends|extends
name|ContentItemFunction
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContentFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|public
name|ContentFunction
parameter_list|()
block|{
name|super
argument_list|(
literal|"content"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|apply
parameter_list|(
name|ContentItemBackend
name|backend
parameter_list|,
name|Resource
name|context
parameter_list|,
name|Collection
argument_list|<
name|Resource
argument_list|>
modifier|...
name|args
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|ContentItem
name|ci
init|=
name|backend
operator|.
name|getContentItem
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mimeTypes
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|mimeTypes
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|mimeTypes
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|params
init|=
name|Collections
operator|.
name|concat
argument_list|(
name|args
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|params
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|param
init|=
name|params
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|mediaTypeString
init|=
name|backend
operator|.
name|stringValue
argument_list|(
name|param
argument_list|)
decl_stmt|;
try|try
block|{
name|mimeTypes
operator|.
name|add
argument_list|(
name|parseMimeType
argument_list|(
name|mediaTypeString
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid mediaType '%s' (based on RFC 2046) parsed!"
argument_list|,
name|mediaTypeString
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collection
argument_list|<
name|Resource
argument_list|>
name|result
decl_stmt|;
name|Blob
name|blob
decl_stmt|;
if|if
condition|(
name|mimeTypes
operator|==
literal|null
operator|||
name|mimeTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|blob
operator|=
name|ci
operator|.
name|getBlob
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|entry
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|mimeTypes
argument_list|)
decl_stmt|;
name|blob
operator|=
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getValue
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|blob
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|charset
init|=
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
argument_list|(
name|backend
operator|.
name|createLiteral
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|blob
operator|.
name|getStream
argument_list|()
argument_list|,
name|charset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//binary content
name|byte
index|[]
name|data
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|blob
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
argument_list|(
operator|(
name|Resource
operator|)
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read contents from Blob '"
operator|+
name|blob
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"' of ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSignature
parameter_list|()
block|{
return|return
literal|"content = fn:content({content-resource},{media-type},{media-type2},.., {media-typeN})"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Provides access to the Content stored in Blobs of the ContentItem"
return|;
block|}
block|}
end_class

end_unit

