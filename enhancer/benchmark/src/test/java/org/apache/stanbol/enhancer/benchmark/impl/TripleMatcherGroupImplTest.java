begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|simple
operator|.
name|SimpleGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|TripleMatcherGroupImplTest
block|{
specifier|private
name|Graph
name|graph
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createGraph
parameter_list|()
block|{
name|graph
operator|=
operator|new
name|SimpleGraph
argument_list|()
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|TripleUtil
operator|.
name|uriTriple
argument_list|(
literal|"S1"
argument_list|,
literal|"P1"
argument_list|,
literal|"01"
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|TripleUtil
operator|.
name|uriTriple
argument_list|(
literal|"S1"
argument_list|,
literal|"P1"
argument_list|,
literal|"02"
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|TripleUtil
operator|.
name|uriTriple
argument_list|(
literal|"S2"
argument_list|,
literal|"P1"
argument_list|,
literal|"01"
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|TripleUtil
operator|.
name|uriTriple
argument_list|(
literal|"S2"
argument_list|,
literal|"P1"
argument_list|,
literal|"02"
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|TripleUtil
operator|.
name|uriTriple
argument_list|(
literal|"S3"
argument_list|,
literal|"P1"
argument_list|,
literal|"01"
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|TripleUtil
operator|.
name|uriTriple
argument_list|(
literal|"S4"
argument_list|,
literal|"P1"
argument_list|,
literal|"02"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TripleMatcherGroupImpl
name|group
init|=
operator|new
name|TripleMatcherGroupImpl
argument_list|(
literal|true
argument_list|,
literal|"no description"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Empty matcher group should find nothing"
argument_list|,
literal|0
argument_list|,
name|group
operator|.
name|getMatchingSubjects
argument_list|(
name|graph
operator|.
name|getImmutableGraph
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add two matchers, only S1 and S2 match all of them
name|group
operator|.
name|addMatcher
argument_list|(
operator|new
name|TripleMatcherImpl
argument_list|(
literal|"P1 URI 01"
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|addMatcher
argument_list|(
operator|new
name|TripleMatcherImpl
argument_list|(
literal|"P1 URI 02"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|IRI
argument_list|>
name|actual
init|=
name|group
operator|.
name|getMatchingSubjects
argument_list|(
name|graph
operator|.
name|getImmutableGraph
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|IRI
argument_list|>
name|expected
init|=
name|TripleUtil
operator|.
name|uriRefSet
argument_list|(
literal|"S1"
argument_list|,
literal|"S2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Size of results "
operator|+
name|actual
operator|+
literal|" matches "
operator|+
name|expected
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Content of results "
operator|+
name|actual
operator|+
literal|" matches "
operator|+
name|expected
argument_list|,
name|expected
operator|.
name|containsAll
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

