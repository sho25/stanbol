begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|TripleMatcher
import|;
end_import

begin_class
class|class
name|TripleMatcherImpl
implements|implements
name|TripleMatcher
block|{
specifier|private
specifier|final
name|String
name|operator
decl_stmt|;
specifier|private
specifier|final
name|UriRef
name|predicateUri
decl_stmt|;
specifier|private
specifier|final
name|UriRef
name|objectUri
decl_stmt|;
comment|/** Build from a line supplied by the parser.      *  Format is PREDICATE_URI OPERATOR ARGUMENTS,       */
name|TripleMatcherImpl
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|parts
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid TripleMatcher format in line ["
operator|+
name|line
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|predicateUri
operator|=
operator|new
name|UriRef
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|operator
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
literal|"URI"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
condition|)
block|{
name|objectUri
operator|=
operator|new
name|UriRef
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO support other operators
name|objectUri
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ("
operator|+
name|getExpression
argument_list|()
operator|+
literal|")"
return|;
block|}
comment|/** Get the expression used to build this matcher */
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|predicateUri
operator|+
literal|" "
operator|+
name|operator
operator|+
literal|" "
operator|+
name|objectUri
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Triple
name|t
parameter_list|)
block|{
return|return
name|objectUri
operator|!=
literal|null
operator|&&
name|t
operator|.
name|getPredicate
argument_list|()
operator|.
name|equals
argument_list|(
name|predicateUri
argument_list|)
operator|&&
name|t
operator|.
name|getObject
argument_list|()
operator|.
name|equals
argument_list|(
name|objectUri
argument_list|)
return|;
block|}
block|}
end_class

end_unit

