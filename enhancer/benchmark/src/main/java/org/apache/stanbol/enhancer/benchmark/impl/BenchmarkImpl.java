begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|BenchmarkResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|TripleMatcherGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
class|class
name|BenchmarkImpl
extends|extends
name|LinkedList
argument_list|<
name|TripleMatcherGroup
argument_list|>
implements|implements
name|Benchmark
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|inputText
decl_stmt|;
specifier|private
name|Graph
name|graph
decl_stmt|;
specifier|private
name|ContentItemFactory
name|ciFactory
decl_stmt|;
specifier|private
name|Chain
name|chain
decl_stmt|;
comment|/** Not public: meant to be constructed by parsing */
name|BenchmarkImpl
parameter_list|()
block|{     }
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/** @inheritDoc */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|void
name|setInputText
parameter_list|(
name|String
name|inputText
parameter_list|)
block|{
name|this
operator|.
name|inputText
operator|=
name|inputText
expr_stmt|;
block|}
comment|/** @inheritDoc */
annotation|@
name|Override
specifier|public
name|String
name|getInputText
parameter_list|()
block|{
return|return
name|inputText
return|;
block|}
comment|/** @inheritDoc */
annotation|@
name|Override
specifier|public
name|Chain
name|getChain
parameter_list|()
block|{
return|return
name|chain
return|;
block|}
name|void
name|setChain
parameter_list|(
name|Chain
name|chain
parameter_list|)
block|{
name|this
operator|.
name|chain
operator|=
name|chain
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BenchmarkResult
argument_list|>
name|execute
parameter_list|(
name|EnhancementJobManager
name|jobManager
parameter_list|,
name|ContentItemFactory
name|ciFactory
parameter_list|)
throws|throws
name|EnhancementException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|inputText
operator|==
literal|null
operator|||
name|inputText
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"inputText is null or empty, cannot run benchmark"
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|BenchmarkResult
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|BenchmarkResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TripleMatcherGroup
name|g
range|:
name|this
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|BenchmarkResultImpl
argument_list|(
name|g
argument_list|,
name|getGraph
argument_list|(
name|jobManager
argument_list|,
name|ciFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** @inheritDoc */
specifier|public
name|Graph
name|getGraph
parameter_list|(
name|EnhancementJobManager
name|jobManager
parameter_list|,
name|ContentItemFactory
name|ciFactory
parameter_list|)
throws|throws
name|EnhancementException
block|{
if|if
condition|(
name|graph
operator|==
literal|null
condition|)
block|{
name|ContentItem
name|ci
decl_stmt|;
try|try
block|{
name|ci
operator|=
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|StringSource
argument_list|(
name|inputText
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create a ContentItem"
operator|+
literal|"using '"
operator|+
name|ciFactory
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|chain
operator|==
literal|null
condition|)
block|{
name|jobManager
operator|.
name|enhanceContent
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//parsing null as chain does not work!
name|jobManager
operator|.
name|enhanceContent
argument_list|(
name|ci
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
name|graph
operator|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|getGraph
argument_list|()
expr_stmt|;
block|}
return|return
name|graph
return|;
block|}
block|}
end_class

end_unit

