begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|RuntimeErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|BenchmarkEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|BenchmarkParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|TripleMatcherGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryContentItem
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|false
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|BenchmarkEngineImpl
implements|implements
name|BenchmarkEngine
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|EnhancementJobManager
name|jobManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|BenchmarkParser
name|parser
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|runBenchmark
parameter_list|(
name|String
name|benchmarkText
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|output
argument_list|)
decl_stmt|;
comment|// TODO better formatting
name|pw
operator|.
name|println
argument_list|(
literal|"<pre>"
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Benchmark
argument_list|>
name|benchmarks
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|benchmarkText
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|benchmarks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No valid benchmarks found in input ["
operator|+
name|benchmarkText
operator|+
literal|"]"
argument_list|)
throw|;
block|}
for|for
control|(
name|Benchmark
name|b
range|:
name|benchmarks
control|)
block|{
comment|// TODO move this to benchmark class
comment|// TODO Benchmark should validate itself
specifier|final
name|ContentItem
name|ci
init|=
operator|new
name|InMemoryContentItem
argument_list|(
name|b
operator|.
name|getInputText
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"text/plain"
argument_list|)
decl_stmt|;
name|jobManager
operator|.
name|enhanceContent
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"BENCHMARK:"
operator|+
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TripleMatcherGroup
name|g
range|:
name|b
control|)
block|{
specifier|final
name|Set
argument_list|<
name|UriRef
argument_list|>
name|s
init|=
name|g
operator|.
name|getMatchingSubjects
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|getGraph
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|isExpectGroup
argument_list|()
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"EXPECT OK: "
operator|+
name|g
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"**ERROR** EXPECT FAILED: "
operator|+
name|g
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"**ERROR** COMPLAIN: "
operator|+
name|s
operator|.
name|size
argument_list|()
operator|+
literal|" matches for group "
operator|+
name|g
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"NO COMPLAINTS: "
operator|+
name|g
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|pw
operator|.
name|println
argument_list|(
literal|" ("
operator|+
name|s
operator|.
name|size
argument_list|()
operator|+
literal|" matches)"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"END OF BENCHMARK:"
operator|+
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

