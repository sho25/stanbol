begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|TripleMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|TripleMatcherGroup
import|;
end_import

begin_class
specifier|public
class|class
name|TripleMatcherGroupImpl
implements|implements
name|TripleMatcherGroup
block|{
specifier|private
name|List
argument_list|<
name|TripleMatcher
argument_list|>
name|matchers
init|=
operator|new
name|ArrayList
argument_list|<
name|TripleMatcher
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isExpect
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
name|TripleMatcherGroupImpl
parameter_list|(
name|boolean
name|isExpect
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|isExpect
operator|=
name|isExpect
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
name|void
name|addMatcher
parameter_list|(
name|TripleMatcher
name|m
parameter_list|)
block|{
name|matchers
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ("
operator|+
name|description
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExpectGroup
parameter_list|()
block|{
return|return
name|isExpect
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|UriRef
argument_list|>
name|getMatchingSubjects
parameter_list|(
name|Graph
name|g
parameter_list|)
block|{
if|if
condition|(
name|matchers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
return|;
block|}
comment|// For all matchers, find the set of subjects that match
comment|// and compute the intersection of those sets
name|Set
argument_list|<
name|UriRef
argument_list|>
name|intersection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TripleMatcher
name|m
range|:
name|matchers
control|)
block|{
specifier|final
name|Set
argument_list|<
name|UriRef
argument_list|>
name|s
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|g
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|(
name|t
argument_list|)
condition|)
block|{
specifier|final
name|NonLiteral
name|n
init|=
name|t
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|UriRef
condition|)
block|{
name|s
operator|.
name|add
argument_list|(
operator|(
name|UriRef
operator|)
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO do we need to handle non-UriRef subjects?
block|}
block|}
block|}
if|if
condition|(
name|intersection
operator|==
literal|null
condition|)
block|{
name|intersection
operator|=
name|s
expr_stmt|;
block|}
else|else
block|{
name|intersection
operator|.
name|retainAll
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|intersection
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|TripleMatcher
argument_list|>
name|getMatchers
parameter_list|()
block|{
return|return
name|matchers
return|;
block|}
block|}
end_class

end_unit

