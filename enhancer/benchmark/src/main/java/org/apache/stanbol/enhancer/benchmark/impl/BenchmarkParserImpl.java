begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|BenchmarkParser
import|;
end_import

begin_comment
comment|/** BenchmarkParser implementation */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
specifier|public
class|class
name|BenchmarkParserImpl
implements|implements
name|BenchmarkParser
block|{
specifier|private
specifier|static
class|class
name|ParserContext
block|{
name|List
argument_list|<
name|BenchmarkImpl
argument_list|>
name|benchmarks
decl_stmt|;
name|BenchmarkImpl
name|currentBenchmark
decl_stmt|;
name|TripleMatcherGroupImpl
name|currentGroup
decl_stmt|;
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|State
block|{
specifier|protected
specifier|final
name|ParserContext
name|ctx
decl_stmt|;
name|State
parameter_list|(
name|ParserContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
block|}
name|State
name|read
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|line
operator|.
name|startsWith
argument_list|(
name|COMMENT_MARKER
argument_list|)
condition|)
block|{
comment|// Switch states on marker lines, or let current state
comment|// parse current line
if|if
condition|(
name|INPUT_SECTION_MARKER
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputState
argument_list|(
name|ctx
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|EXPECT_SECTION_MARKER
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
operator|new
name|MatcherGroupState
argument_list|(
name|ctx
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|COMPLAIN_SECTION_MARKER
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
operator|new
name|MatcherGroupState
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|consume
argument_list|(
name|line
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
comment|/** Get field value if current line is in the form "KEY: value here",          *  null if not.          */
specifier|protected
specifier|static
name|String
name|getField
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|fieldName
operator|+
name|FIELD_SEPARATOR
argument_list|)
condition|)
block|{
name|value
operator|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
name|FIELD_SEPARATOR
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/** Consume supplied line and return the next state           *  (which might this one if no state change is needed)           */
specifier|protected
specifier|abstract
name|State
name|consume
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
empty_stmt|;
specifier|private
specifier|static
class|class
name|InitState
extends|extends
name|State
block|{
name|InitState
parameter_list|(
name|ParserContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|State
name|consume
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|this
return|;
block|}
block|}
empty_stmt|;
specifier|private
specifier|static
class|class
name|InputState
extends|extends
name|State
block|{
name|InputState
parameter_list|(
name|ParserContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|currentBenchmark
operator|=
operator|new
name|BenchmarkImpl
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|benchmarks
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|currentBenchmark
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|State
name|consume
parameter_list|(
name|String
name|line
parameter_list|)
block|{
comment|// Add all lines to the benchmark's input text,
comment|// separated by one space
specifier|final
name|String
name|cur
init|=
name|ctx
operator|.
name|currentBenchmark
operator|.
name|getInputText
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
block|{
name|ctx
operator|.
name|currentBenchmark
operator|.
name|setInputText
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|currentBenchmark
operator|.
name|setInputText
argument_list|(
name|cur
operator|+
literal|" "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
empty_stmt|;
specifier|private
specifier|static
class|class
name|MatcherGroupState
extends|extends
name|State
block|{
specifier|private
specifier|final
name|boolean
name|isExpect
decl_stmt|;
name|MatcherGroupState
parameter_list|(
name|ParserContext
name|ctx
parameter_list|,
name|boolean
name|isExpect
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|isExpect
operator|=
name|isExpect
expr_stmt|;
block|}
specifier|protected
name|State
name|consume
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Description field starts a new group
specifier|final
name|String
name|desc
init|=
name|getField
argument_list|(
name|line
argument_list|,
name|DESCRIPTION_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|currentGroup
operator|=
operator|new
name|TripleMatcherGroupImpl
argument_list|(
name|isExpect
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|currentBenchmark
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|currentGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Each line is a new matcher
name|ctx
operator|.
name|currentGroup
operator|.
name|addMatcher
argument_list|(
operator|new
name|TripleMatcherImpl
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Benchmark
argument_list|>
name|parse
parameter_list|(
name|Reader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|ParserContext
name|ctx
init|=
operator|new
name|ParserContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|benchmarks
operator|=
operator|new
name|ArrayList
argument_list|<
name|BenchmarkImpl
argument_list|>
argument_list|()
expr_stmt|;
name|State
name|state
init|=
operator|new
name|InitState
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|state
operator|.
name|read
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|ctx
operator|.
name|benchmarks
return|;
block|}
block|}
end_class

end_unit

