begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|benchmark
operator|.
name|BenchmarkEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Front-end servlet for the benchmark module */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|false
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
class|class
name|BenchmarkServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|HttpService
name|httpService
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|BenchmarkEngine
name|benchmarkEngine
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_CONTENT
init|=
literal|"content"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MOUNT_PATH
init|=
literal|"/benchmark"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|DEFAULT_MOUNT_PATH
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MOUNT_PATH_PROPERTY
init|=
literal|"mount.path"
decl_stmt|;
specifier|private
name|String
name|mountPath
decl_stmt|;
comment|// TODO temp example
specifier|public
specifier|static
specifier|final
name|String
name|EXAMPLE
init|=
literal|"= INPUT =\n"
operator|+
literal|"# Comments such as this one are ignored\n"
operator|+
literal|"# This is the enhancer input, can be split on several lines\n"
operator|+
literal|"Bob\n"
operator|+
literal|"Marley was born in Kingston, Jamaica.\n"
operator|+
literal|"\n"
operator|+
literal|"= EXPECT =\n"
operator|+
literal|"# EXPECT defines groups of predicate/object matchers that we expect to find in the output\n"
operator|+
literal|"# Each group applies to one given enhancement: for the expectation to succeed, at least\n"
operator|+
literal|"# one enhancement must match all lines in the group\n"
operator|+
literal|"\n"
operator|+
literal|"Description: Kingston must be found\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-reference URI http://dbpedia.org/resource/Kingston%2C_Jamaica\n"
operator|+
literal|"\n"
operator|+
literal|"Description: This one should fail\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-reference URI http://dbpedia.org/resource/Basel\n"
operator|+
literal|"\n"
operator|+
literal|"# The description: line starts a new group\n"
operator|+
literal|"Description: Bob Marley must be found as a musical artist\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-type URI http://dbpedia.org/ontology/MusicalArtist\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-reference URI http://dbpedia.org/resource/Bob_Marley\n"
operator|+
literal|"\n"
operator|+
literal|"= COMPLAIN =\n"
operator|+
literal|"\n"
operator|+
literal|"Description: Miles Davis must not be found\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-type URI http://dbpedia.org/ontology/MusicalArtist\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-reference URI http://dbpedia.org/resource/Miles_Davis\n"
operator|+
literal|"\n"
operator|+
literal|"Description: Bob Marley in the COMPLAIN section should fail\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-type URI http://dbpedia.org/ontology/MusicalArtist\n"
operator|+
literal|"http://fise.iks-project.eu/ontology/entity-reference URI http://dbpedia.org/resource/Bob_Marley\n"
decl_stmt|;
comment|/** Register with HttpService when activated */
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ServletException
throws|,
name|NamespaceException
block|{
name|mountPath
operator|=
operator|(
name|String
operator|)
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|MOUNT_PATH_PROPERTY
argument_list|)
expr_stmt|;
if|if
condition|(
name|mountPath
operator|==
literal|null
condition|)
block|{
name|mountPath
operator|=
name|DEFAULT_MOUNT_PATH
expr_stmt|;
block|}
name|httpService
operator|.
name|registerServlet
argument_list|(
name|mountPath
argument_list|,
name|this
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Servlet mounted at {}"
argument_list|,
name|mountPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|httpService
operator|.
name|unregister
argument_list|(
name|mountPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// TODO need a nicer page...
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<html><body>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<form method='POST'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='submit'/><br/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<textarea name='content' rows='60' cols='120'>"
operator|+
name|EXAMPLE
operator|+
literal|"</textarea>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</form>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|String
name|content
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|PARAM_CONTENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Missing "
operator|+
name|PARAM_CONTENT
operator|+
literal|" parameter"
argument_list|)
throw|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
try|try
block|{
name|benchmarkEngine
operator|.
name|runBenchmark
argument_list|(
name|content
argument_list|,
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO better error reporting
name|log
operator|.
name|error
argument_list|(
literal|"Exception in runBenchmark"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

