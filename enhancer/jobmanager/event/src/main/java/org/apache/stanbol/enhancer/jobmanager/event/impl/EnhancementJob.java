begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jobmanager
operator|.
name|event
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|getDependend
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|getEngine
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|isOptional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents the enhancement of a {@link ContentItem} by following the  * execution plan provided by a {@link Chain} as parsed to an  * {@link EnhancementJobManager}.<p>  * TODO: This might become part of the Stanbol Enhancer Services API.  *   * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|EnhancementJob
block|{
comment|/*      * NOTE on debug level Loggings      *       *  ++ ... init some activity      *>> ... started some activity (thread has the requested lock)      *<< ... completed some activity (thread has released the lock)      *        *  n: ... no lock      *  r: ... read lock      *  w: ... write lock      */
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnhancementJob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
specifier|private
specifier|final
name|Graph
name|executionPlan
decl_stmt|;
specifier|private
specifier|final
name|String
name|chain
decl_stmt|;
specifier|private
specifier|final
name|ContentItem
name|contentItem
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|completed
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|unmodCompleted
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|running
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|unmodRunning
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|executable
decl_stmt|;
specifier|private
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|errormessages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Exception
name|error
init|=
literal|null
decl_stmt|;
specifier|public
name|EnhancementJob
parameter_list|(
name|ContentItem
name|contentItem
parameter_list|,
name|String
name|chainName
parameter_list|,
name|Graph
name|executionPlan
parameter_list|)
block|{
if|if
condition|(
name|contentItem
operator|==
literal|null
operator|||
name|chainName
operator|==
literal|null
operator|||
name|executionPlan
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed contentItem and executionPlan MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|contentItem
operator|=
name|contentItem
expr_stmt|;
name|this
operator|.
name|readLock
operator|=
name|contentItem
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|contentItem
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|executionPlan
operator|=
name|executionPlan
expr_stmt|;
name|this
operator|.
name|chain
operator|=
name|chainName
expr_stmt|;
name|completed
operator|=
operator|new
name|HashSet
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
expr_stmt|;
name|unmodCompleted
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|completed
argument_list|)
expr_stmt|;
name|running
operator|=
operator|new
name|HashSet
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
expr_stmt|;
name|unmodRunning
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|running
argument_list|)
expr_stmt|;
comment|//check the first engines to execute
name|checkExecutable
argument_list|()
expr_stmt|;
block|}
comment|/**      * The used execution plan for processing the {@link ContentItem}      *       * @return the executionPlan      */
specifier|public
specifier|final
name|Graph
name|getExecutionPlan
parameter_list|()
block|{
return|return
name|executionPlan
return|;
block|}
comment|/**      * The ContentItem enhanced by this job.      *       * @return      */
specifier|public
specifier|final
name|ContentItem
name|getContentItem
parameter_list|()
block|{
return|return
name|contentItem
return|;
block|}
comment|/**      * This returns the name of the Chain used to initialise the execution plan for this enhancement job.      *<p>      * NOTE that because chains can change (activate, change, deactivate) at any moment there is no guarantee      * that the a chain with that name is still available nor that calling {@link Chain#getExecutionPlan()}      * will be equals to the {@link #getExecutionPlan()} used by this enhancement job. This is the reason why      * this method just returns the name of the chain and not the {@link Chain} instance.      *       * @return      */
specifier|public
specifier|final
name|String
name|getChainName
parameter_list|()
block|{
return|return
name|chain
return|;
block|}
comment|/**      * Getter for the lock used to synchronise read/write to this enhancement job. This returns the lock      * provided by {@link ContentItem#getLock()}      *       * @return the read/write lock for this enhancement job      */
specifier|public
specifier|final
name|ReadWriteLock
name|getLock
parameter_list|()
block|{
return|return
name|contentItem
operator|.
name|getLock
argument_list|()
return|;
block|}
comment|/**      * Getter for a read only view over the currently running executions.      *       * @return the currently running executions.      */
specifier|public
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|getRunning
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"++ r: {}"
argument_list|,
literal|"getRunning"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> r: {}"
argument_list|,
literal|"getRunning"
argument_list|)
expr_stmt|;
return|return
name|unmodRunning
return|;
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< r: {}"
argument_list|,
literal|"getRunning"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Getter for a read only view over the completed execution.      *       * @return the completed execution nodes      */
specifier|public
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|getCompleted
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"++ r: {}"
argument_list|,
literal|"getCompleted"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> r: {}"
argument_list|,
literal|"getCompleted"
argument_list|)
expr_stmt|;
return|return
name|unmodCompleted
return|;
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< r: {}"
argument_list|,
literal|"getCompleted"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sets the state of the parsed executionNode to completed. This also validates if the new state      * confirms to the ExectionPlan (e.g. if all nodes the parsed node depends on are also marked as      * completed).      *       * @param executionNode      *            the exectionNode to be marked as running      * @throws IllegalArgumentException      *             if<code>null</code> is parsed as execution node      * @throws IllegalStateException      *             if the parsed execution node can not be marked as completed because some of its      *             depended nodes are not yet marked as completed.      */
specifier|public
name|void
name|setCompleted
parameter_list|(
name|NonLiteral
name|executionNode
parameter_list|)
block|{
if|if
condition|(
name|executionNode
operator|!=
literal|null
condition|)
block|{
name|String
name|engine
init|=
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
decl_stmt|;
name|boolean
name|optional
init|=
name|isOptional
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|dependsOn
init|=
name|getDependend
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"++ w: {}: {}"
argument_list|,
literal|"setCompleted"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> w: {}: {}"
argument_list|,
literal|"setCompleted"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|completed
operator|.
name|contains
argument_list|(
name|executionNode
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Execution of Engine '{}' for ContentItem {} already "
operator|+
literal|"marked as completed(chain: {}, node: {}, optional {})."
operator|+
literal|" -> call ignored"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engine
block|,
name|contentItem
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|chain
block|,
name|executionNode
block|,
name|optional
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|completed
operator|.
name|containsAll
argument_list|(
name|dependsOn
argument_list|)
condition|)
block|{
comment|// TODO maybe define an own Exception for such cases
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to set state of ExectionNode '"
operator|+
name|executionNode
operator|+
literal|"' (chain '"
operator|+
name|chain
operator|+
literal|"' | contentItem '"
operator|+
name|contentItem
operator|.
name|getUri
argument_list|()
operator|+
literal|"') to completed, because some of its depended "
operator|+
literal|"nodes are not marked completed yet. This indicates an Bug in the "
operator|+
literal|"implementation of the JobManager used to execute the ExecutionPlan. "
operator|+
literal|"(this.dependsOn="
operator|+
name|dependsOn
operator|+
literal|"| chain.completed "
operator|+
name|completed
operator|+
literal|" | chain.running "
operator|+
name|running
operator|+
literal|")!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|running
operator|.
name|remove
argument_list|(
name|executionNode
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Execution of '{}' for ContentItem {} completed "
operator|+
literal|"(chain: {}, node: {}, optional {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engine
block|,
name|contentItem
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|chain
block|,
name|executionNode
block|,
name|optional
block|}
argument_list|)
expr_stmt|;
block|}
name|completed
operator|.
name|add
argument_list|(
name|executionNode
argument_list|)
expr_stmt|;
comment|// update the executables ... this will also recognise if finished
name|checkExecutable
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< w: {}: {}"
argument_list|,
literal|"setCompleted"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sets the state of the parsed executionNode to running. This also validates if the new state      * confirms to the ExectionPlan (e.g. if all nodes the parsed node depends on are already marked as      * completed).      *       * @param executionNode      *            the exectionNode to be marked as running      * @throws IllegalArgumentException      *             if<code>null</code> is parsed as execution node      * @throws IllegalStateException      *             if the parsed execution node can not be marked as running because some of its depended      *             nodes are not yet marked as completed.      */
specifier|public
name|void
name|setRunning
parameter_list|(
name|NonLiteral
name|executionNode
parameter_list|)
block|{
if|if
condition|(
name|executionNode
operator|!=
literal|null
condition|)
block|{
name|String
name|engine
init|=
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
decl_stmt|;
name|boolean
name|optional
init|=
name|isOptional
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|dependsOn
init|=
name|getDependend
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"++ w: {}: {}"
argument_list|,
literal|"setRunning"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> w: {}: {}"
argument_list|,
literal|"setRunning"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|completed
operator|.
name|contains
argument_list|(
name|executionNode
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to set state of ExectionNode '"
operator|+
name|executionNode
operator|+
literal|"'(chain '"
operator|+
name|chain
operator|+
literal|"' | contentItem '"
operator|+
name|contentItem
operator|.
name|getUri
argument_list|()
operator|+
literal|"') to running, because"
operator|+
literal|"it is already marked as completed. This indicates "
operator|+
literal|"an Bug in the implementation of the JobManager "
operator|+
literal|"used to execute the ExecutionPlan (chain state: "
operator|+
literal|"completed "
operator|+
name|completed
operator|+
literal|" | running "
operator|+
name|running
operator|+
literal|")!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|completed
operator|.
name|containsAll
argument_list|(
name|dependsOn
argument_list|)
condition|)
block|{
comment|// TODO maybe define an own Exception for such cases
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to set state of ExectionNode '"
operator|+
name|executionNode
operator|+
literal|"' (chain '"
operator|+
name|chain
operator|+
literal|"' | contentItem '"
operator|+
name|contentItem
operator|.
name|getUri
argument_list|()
operator|+
literal|"') to running, because "
operator|+
literal|"some of its depended nodes are not marked "
operator|+
literal|"completed yet. This indicates an Bug in the "
operator|+
literal|"implementation of the JobManager used to execute "
operator|+
literal|"the ExecutionPlan (this.dependsOn="
operator|+
name|dependsOn
operator|+
literal|"| chain.completed "
operator|+
name|completed
operator|+
literal|" | chain.running "
operator|+
name|running
operator|+
literal|")!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|running
operator|.
name|add
argument_list|(
name|executionNode
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Execution of Engine '{}' for ContentItem {} already "
operator|+
literal|"marked as running(chain: {}, node: {}, optional {})."
operator|+
literal|" -> call ignored"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engine
block|,
name|contentItem
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|chain
block|,
name|executionNode
block|,
name|optional
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Started Execution of '{}' for ContentItem {} "
operator|+
literal|"(chain: {}, node: {}, optional {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engine
block|,
name|contentItem
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|chain
block|,
name|executionNode
block|,
name|optional
block|}
argument_list|)
expr_stmt|;
comment|// update the executables ... this will also recognise if finished
name|checkExecutable
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< w: {}: {}"
argument_list|,
literal|"setRunning"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|executionNode
argument_list|)
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed ExecutionNode MUST NOT be NULL!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * updated the {@link #executable} and also checks for {@link #finished}<p>      * Assumed to be called within a write lock!      */
specifier|private
name|void
name|checkExecutable
parameter_list|()
block|{
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|executeable
init|=
name|ExecutionPlanHelper
operator|.
name|getExecutable
argument_list|(
name|executionPlan
argument_list|,
name|completed
argument_list|)
decl_stmt|;
comment|//a Chain finishes if no engine is running and no more nodes are executable
if|if
condition|(
operator|!
name|failed
condition|)
block|{
name|executeable
operator|.
name|removeAll
argument_list|(
name|running
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|engines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|executeable
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NonLiteral
name|node
range|:
name|executeable
control|)
block|{
name|engines
operator|.
name|add
argument_list|(
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"MARK {} as executeable"
argument_list|,
name|engines
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|executable
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|executeable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//do not mark engines as executeable if chain already failed
name|this
operator|.
name|executable
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the executable nodes.      * @return the nodes that can be executed next based on the completed and      * currently running engines.      */
specifier|public
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|getExecutable
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"++ r: {}"
argument_list|,
literal|"getExecutable"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|">> r: {}"
argument_list|,
literal|"getExecutable"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|executable
return|;
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< r: {}"
argument_list|,
literal|"getExecutable"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns true if this chain has finished.      * @return if this enhancement job is finished.      */
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"++ r: {}"
argument_list|,
literal|"isFinished"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> r: {}"
argument_list|,
literal|"isFinished"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|executable
operator|.
name|isEmpty
argument_list|()
operator|&&
name|running
operator|.
name|isEmpty
argument_list|()
return|;
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< r: {}"
argument_list|,
literal|"isFinished"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFailed
parameter_list|(
name|NonLiteral
name|node
parameter_list|,
name|EnhancementEngine
name|engine
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
specifier|final
name|boolean
name|optional
init|=
name|isOptional
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
decl_stmt|;
specifier|final
name|String
name|engineName
init|=
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"++ w: {}: {}"
argument_list|,
literal|"setFailed"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> w: {}: {}"
argument_list|,
literal|"setFailed"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|optional
operator|&&
operator|!
name|failed
condition|)
block|{
comment|//the first errors for this chain
name|failed
operator|=
literal|true
expr_stmt|;
name|error
operator|=
name|exception
expr_stmt|;
block|}
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|optional
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Optional Engine '%s' of enhancement "
operator|+
literal|"Chain '%s' skiped for ContentItem %s because the Engine"
argument_list|,
name|engineName
argument_list|,
name|chain
argument_list|,
name|contentItem
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to enhance ContentItem '%s' by using "
operator|+
literal|"enhancement chain '%s' because the required Enhancement Engine %s "
argument_list|,
name|contentItem
operator|.
name|getUri
argument_list|()
argument_list|,
name|chain
argument_list|,
name|engineName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"is currently not active"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"was unable to process the content "
operator|+
literal|"(Engine class: %s)"
argument_list|,
name|engine
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"(reason:"
argument_list|)
operator|.
name|append
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|append
argument_list|(
literal|'!'
argument_list|)
expr_stmt|;
if|if
condition|(
name|optional
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errormessages
operator|.
name|add
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setCompleted
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|//we are done with that node!
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< w: {}: {}"
argument_list|,
literal|"setFailed"
argument_list|,
name|ExecutionPlanHelper
operator|.
name|getEngine
argument_list|(
name|executionPlan
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the failed state. Note that EnhancementJobs might be already      * failed but not yet finished.      * @return if the EnhancementJob has failed or not.      */
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"++ r: {}"
argument_list|,
literal|"isFailed"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> r: {}"
argument_list|,
literal|"isFailed"
argument_list|)
expr_stmt|;
return|return
name|failed
return|;
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<< r: {}"
argument_list|,
literal|"isFailed"
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|contentItem
operator|.
name|getUri
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|EnhancementJob
operator|&&
name|contentItem
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|EnhancementJob
operator|)
name|o
operator|)
operator|.
name|contentItem
operator|.
name|getUri
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"EnhancementJob for ContentItem "
operator|+
name|contentItem
operator|.
name|getUri
argument_list|()
return|;
block|}
comment|/**      * If {@link #isFailed()} this can be used to retrieve the message of the      * occurred error.      * @return the message of the error that caused the enhancement job to fail.      */
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|errormessages
operator|==
literal|null
operator|||
name|errormessages
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|errormessages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * if {@link #isFailed()} this may contain the {@link Exception} that caused      * the enhancement job to fail.       * @return The Exception or<code>null</code> if no exception is available      */
specifier|public
name|Exception
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
block|}
end_class

end_unit

