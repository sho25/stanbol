begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jobmanager
operator|.
name|event
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jobmanager
operator|.
name|event
operator|.
name|Constants
operator|.
name|PROPERTY_EXECUTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jobmanager
operator|.
name|event
operator|.
name|Constants
operator|.
name|PROPERTY_JOB_MANAGER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jobmanager
operator|.
name|event
operator|.
name|Constants
operator|.
name|TOPIC_JOB_MANAGER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionPlanHelper
operator|.
name|getEngine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ExecutionMetadataHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|execution
operator|.
name|ChainExecution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|execution
operator|.
name|Execution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|execution
operator|.
name|ExecutionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|EventAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|EnhancementJobHandler
implements|implements
name|EventHandler
block|{
specifier|private
name|EnhancementEngineManager
name|engineManager
decl_stmt|;
specifier|private
name|EventAdmin
name|eventAdmin
decl_stmt|;
comment|/*      * NOTE on debug level Loggings      *       *  ++ ... init some activity      *>> ... started some activity (thread has the requested lock)      *<< ... completed some activity (thread has released the lock)      *        *  n: ... no lock      *  r: ... read lock      *  w: ... write lock      */
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnhancementJobHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Keys are {@link EnhancementJob}s currently asynchronously enhancing       * contentItems and the values are the objects used to interrupt the       * requesting thread as soon as the enhancement process has finished.       */
specifier|private
name|Map
argument_list|<
name|EnhancementJob
argument_list|,
name|EnhancementJobObserver
argument_list|>
name|processingJobs
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|processingLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|Thread
name|observerDaemon
decl_stmt|;
specifier|public
name|EnhancementJobHandler
parameter_list|(
name|EventAdmin
name|eventAdmin
parameter_list|,
name|EnhancementEngineManager
name|engineManager
parameter_list|)
block|{
if|if
condition|(
name|eventAdmin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EventAdmin service MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|engineManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EnhancementEngineManager MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|eventAdmin
operator|=
name|eventAdmin
expr_stmt|;
name|this
operator|.
name|engineManager
operator|=
name|engineManager
expr_stmt|;
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|processingJobs
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|EnhancementJob
argument_list|,
name|EnhancementJobObserver
argument_list|>
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|observerDaemon
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|EnhancementJobObserverDaemon
argument_list|()
argument_list|)
expr_stmt|;
name|observerDaemon
operator|.
name|setName
argument_list|(
literal|"Event Job Manager Observer Daemon"
argument_list|)
expr_stmt|;
name|observerDaemon
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|observerDaemon
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Closes this Handler and notifies all components that wait for still      * running jobs      */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"deactivate {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Object
name|o
range|:
name|processingJobs
operator|.
name|values
argument_list|()
control|)
block|{
synchronized|synchronized
init|(
name|o
init|)
block|{
name|o
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|processingJobs
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|observerDaemon
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Registers an EnhancementJob and will start the enhancement process.      * When the process is finished or this service is deactivated the      * returned oject will be notified. Therefore callers that need to       * wait for the completion of the parsed job will want to      *<code><pre>      *   Object object = enhancementJobHandler.register();      *   while(!job.isFinished()& enhancementJobHandler != null){      *       synchronized (object) {      *           try {      *               object.wait();      *           } catch (InterruptedException e) {}      *       }      *   }      *</pre></code>      * @param enhancementJob the enhancement job to register      * @return An object that will get {@link Object#notifyAll()} as soon as      * {@link EnhancementJob#isFinished()} or this instance is deactivated      */
specifier|public
name|EnhancementJobObserver
name|register
parameter_list|(
name|EnhancementJob
name|enhancementJob
parameter_list|)
block|{
specifier|final
name|boolean
name|init
decl_stmt|;
name|EnhancementJobObserver
name|observer
decl_stmt|;
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|enhancementJob
operator|==
literal|null
operator|||
name|processingJobs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|observer
operator|=
name|processingJobs
operator|.
name|get
argument_list|(
name|enhancementJob
argument_list|)
expr_stmt|;
if|if
condition|(
name|observer
operator|==
literal|null
condition|)
block|{
name|observer
operator|=
operator|new
name|EnhancementJobObserver
argument_list|(
name|enhancementJob
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logJobInfo
argument_list|(
name|log
argument_list|,
name|enhancementJob
argument_list|,
literal|"Add EnhancementJob:"
argument_list|,
name|log
operator|.
name|isTraceEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|processingJobs
operator|.
name|put
argument_list|(
name|enhancementJob
argument_list|,
name|observer
argument_list|)
expr_stmt|;
name|init
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Request to register an EnhancementJob for an ContentItem {} that is"
operator|+
literal|"already registered "
operator|+
name|enhancementJob
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|init
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|init
condition|)
block|{
name|observer
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|enhancementJob
operator|.
name|startProcessing
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"++ w: {}"
argument_list|,
literal|"init execution"
argument_list|)
expr_stmt|;
name|enhancementJob
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|trace
argument_list|(
literal|">> w: {}"
argument_list|,
literal|"init execution"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|executeNextNodes
argument_list|(
name|enhancementJob
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Unable to start Execution of "
operator|+
name|enhancementJob
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|logJobInfo
argument_list|(
name|log
argument_list|,
name|enhancementJob
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"finishing job ..."
argument_list|)
expr_stmt|;
name|finish
argument_list|(
name|enhancementJob
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"<< w: {}"
argument_list|,
literal|"init execution"
argument_list|)
expr_stmt|;
name|enhancementJob
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|observer
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|EnhancementJob
name|job
init|=
operator|(
name|EnhancementJob
operator|)
name|event
operator|.
name|getProperty
argument_list|(
name|PROPERTY_JOB_MANAGER
argument_list|)
decl_stmt|;
name|NonLiteral
name|execution
init|=
operator|(
name|NonLiteral
operator|)
name|event
operator|.
name|getProperty
argument_list|(
name|PROPERTY_EXECUTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
operator|||
name|execution
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to process EnhancementEvent where EnhancementJob "
operator|+
literal|"{} or Execution node {} is null -> ignore"
argument_list|,
name|job
argument_list|,
name|execution
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|processEvent
argument_list|(
name|job
argument_list|,
name|execution
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected Exception while processing "
operator|+
literal|"ContentItem %s with EnhancementJobManager: %s"
argument_list|,
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|EventJobManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//this ensures that an runtime exception does not
name|job
operator|.
name|setFailed
argument_list|(
name|execution
argument_list|,
literal|null
argument_list|,
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|//(2) trigger the next actions
name|log
operator|.
name|trace
argument_list|(
literal|"++ w: {}"
argument_list|,
literal|"check for next Executions"
argument_list|)
expr_stmt|;
name|job
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|">> w: {}"
argument_list|,
literal|"check for next Executions"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|job
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|finish
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|job
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|executeNextNodes
argument_list|(
name|job
argument_list|)
operator|&&
name|job
operator|.
name|getRunning
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected state in the Execution of ContentItem {}:"
operator|+
literal|" Job is not finished AND no executions are running AND"
operator|+
literal|" no further execution could be started! -> finishing"
operator|+
literal|" this job :("
argument_list|)
expr_stmt|;
name|finish
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|//else execution started of other jobs are running
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|running
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|NonLiteral
name|runningNode
range|:
name|job
operator|.
name|getRunning
argument_list|()
control|)
block|{
name|running
operator|.
name|add
argument_list|(
name|getEngine
argument_list|(
name|job
operator|.
name|getExecutionPlan
argument_list|()
argument_list|,
name|job
operator|.
name|getExecutionNode
argument_list|(
name|runningNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Job {} failed, but {} still running!"
argument_list|,
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|running
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"<< w: {}"
argument_list|,
literal|"check for next Executions"
argument_list|)
expr_stmt|;
name|job
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @param job      * @param execution      */
specifier|private
name|void
name|processEvent
parameter_list|(
name|EnhancementJob
name|job
parameter_list|,
name|NonLiteral
name|execution
parameter_list|)
block|{
name|String
name|engineName
init|=
name|getEngine
argument_list|(
name|job
operator|.
name|getExecutionPlan
argument_list|()
argument_list|,
name|job
operator|.
name|getExecutionNode
argument_list|(
name|execution
argument_list|)
argument_list|)
decl_stmt|;
comment|//(1) execute the parsed ExecutionNode
name|EnhancementEngine
name|engine
init|=
name|engineManager
operator|.
name|getEngine
argument_list|(
name|engineName
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|!=
literal|null
condition|)
block|{
comment|//execute the engine
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
name|int
name|engineState
decl_stmt|;
try|try
block|{
name|engineState
operator|=
name|engine
operator|.
name|canEnhance
argument_list|(
name|job
operator|.
name|getContentItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to check if engine '"
operator|+
name|engineName
operator|+
literal|"'(type: "
operator|+
name|engine
operator|.
name|getClass
argument_list|()
operator|+
literal|") can enhance ContentItem '"
operator|+
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|engineState
operator|=
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
expr_stmt|;
block|}
if|if
condition|(
name|engineState
operator|==
name|EnhancementEngine
operator|.
name|ENHANCE_SYNCHRONOUS
condition|)
block|{
comment|//ensure that this engine exclusively access the content item
name|log
operator|.
name|trace
argument_list|(
literal|"++ w: {}: {}"
argument_list|,
literal|"start sync execution"
argument_list|,
name|engine
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|">> w: {}: {}"
argument_list|,
literal|"start sync execution"
argument_list|,
name|engine
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|job
operator|.
name|getContentItem
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCompleted
argument_list|(
name|execution
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|job
operator|.
name|setFailed
argument_list|(
name|execution
argument_list|,
name|engine
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|job
operator|.
name|setFailed
argument_list|(
name|execution
argument_list|,
name|engine
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"<< w: {}: {}"
argument_list|,
literal|"finished sync execution"
argument_list|,
name|engine
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|engineState
operator|==
name|EnhancementEngine
operator|.
name|ENHANCE_ASYNC
condition|)
block|{
try|try
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"++ n: start async execution of Engine {}"
argument_list|,
name|engine
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|job
operator|.
name|getContentItem
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"++ n: finished async execution of Engine {}"
argument_list|,
name|engine
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCompleted
argument_list|(
name|execution
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|job
operator|.
name|setFailed
argument_list|(
name|execution
argument_list|,
name|engine
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|job
operator|.
name|setFailed
argument_list|(
name|execution
argument_list|,
name|engine
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//CANNOT_ENHANCE
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setFailed
argument_list|(
name|execution
argument_list|,
name|engine
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//can not enhance is not an error
comment|//it just says this engine can not enhance this content item
name|job
operator|.
name|setCompleted
argument_list|(
name|execution
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//engine with that name is not available
name|job
operator|.
name|setFailed
argument_list|(
name|execution
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a finished job from {@link #processingJobs} and notifies      * all waiting components      * @param job the finished job      */
specifier|private
name|void
name|finish
parameter_list|(
name|EnhancementJob
name|job
parameter_list|)
block|{
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|EnhancementJobObserver
name|observer
decl_stmt|;
try|try
block|{
name|observer
operator|=
name|processingJobs
operator|.
name|remove
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|processingLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|observer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logJobInfo
argument_list|(
name|log
argument_list|,
name|job
argument_list|,
literal|"Finished EnhancementJob:"
argument_list|,
name|log
operator|.
name|isTraceEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"++ n: finished processing ContentItem {} with Chain {}"
argument_list|,
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|job
operator|.
name|getChainName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//release the semaphore to send signal to the EventJobManager waiting
comment|//for the results
name|observer
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"EnhancementJob for ContentItem {} is not "
operator|+
literal|"registered with {}. Will not send notification!"
argument_list|,
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * triggers the execution of the next nodes or if       * {@link EnhancementJob#isFinished()} notifies the one who registered       * the {@link EnhancementJob} with this component.      * @param job the enhancement job to process      * @return if an Execution event was sent      */
specifier|protected
name|boolean
name|executeNextNodes
parameter_list|(
name|EnhancementJob
name|job
parameter_list|)
block|{
comment|//getExecutable returns an snapshot so we do not need to lock
name|boolean
name|startedExecution
init|=
literal|false
decl_stmt|;
for|for
control|(
name|NonLiteral
name|executable
range|:
name|job
operator|.
name|getExecutable
argument_list|()
control|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"PREPARE execution of Engine {}"
argument_list|,
name|getEngine
argument_list|(
name|job
operator|.
name|getExecutionPlan
argument_list|()
argument_list|,
name|job
operator|.
name|getExecutionNode
argument_list|(
name|executable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_JOB_MANAGER
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_EXECUTION
argument_list|,
name|executable
argument_list|)
expr_stmt|;
name|job
operator|.
name|setRunning
argument_list|(
name|executable
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"SHEDULE execution of Engine {}"
argument_list|,
name|getEngine
argument_list|(
name|job
operator|.
name|getExecutionPlan
argument_list|()
argument_list|,
name|job
operator|.
name|getExecutionNode
argument_list|(
name|executable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|eventAdmin
operator|.
name|postEvent
argument_list|(
operator|new
name|Event
argument_list|(
name|TOPIC_JOB_MANAGER
argument_list|,
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|startedExecution
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|startedExecution
return|;
block|}
comment|/**      * Helper method that logs the execution time for the Chain and all the      * Enhancement Engines on DEBUG level      * @param logger The logger used for logging      * @param job the job to log. This expects that       *<code>{@link EnhancementJob#isFinished()} == true</code>      */
specifier|protected
specifier|static
name|void
name|logExecutionTimes
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|EnhancementJob
name|job
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|ExecutionMetadata
name|em
init|=
name|ExecutionMetadata
operator|.
name|parseFrom
argument_list|(
name|job
operator|.
name|getExecutionMetadata
argument_list|()
argument_list|,
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|ChainExecution
name|ce
init|=
name|em
operator|.
name|getChainExecution
argument_list|()
decl_stmt|;
name|long
name|cd
init|=
name|ce
operator|.
name|getDuration
argument_list|()
decl_stmt|;
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"> processed ContentItem "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" with Chain '"
argument_list|)
operator|.
name|append
argument_list|(
name|ce
operator|.
name|getChainName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' in "
argument_list|)
operator|.
name|append
argument_list|(
name|ce
operator|.
name|getDuration
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"ms | "
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Execution
argument_list|>
name|ees
init|=
operator|new
name|ArrayList
argument_list|<
name|Execution
argument_list|>
argument_list|(
name|em
operator|.
name|getEngineExecutions
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
comment|//sort by start date (execution order)
name|Collections
operator|.
name|sort
argument_list|(
name|ees
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Execution
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Execution
name|e1
parameter_list|,
name|Execution
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getStarted
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStarted
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"chain:["
argument_list|)
expr_stmt|;
name|long
name|eds
init|=
literal|0
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Execution
name|ee
range|:
name|ees
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|long
name|ed
init|=
name|ee
operator|.
name|getDuration
argument_list|()
decl_stmt|;
name|eds
operator|=
name|eds
operator|+
name|ed
expr_stmt|;
name|int
name|edp
init|=
name|Math
operator|.
name|round
argument_list|(
name|ed
operator|*
literal|100
operator|/
operator|(
name|float
operator|)
name|cd
argument_list|)
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
name|ee
operator|.
name|getExecutionNode
argument_list|()
operator|.
name|getEngineName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|ed
argument_list|)
operator|.
name|append
argument_list|(
literal|"ms ("
argument_list|)
operator|.
name|append
argument_list|(
name|edp
argument_list|)
operator|.
name|append
argument_list|(
literal|"%)"
argument_list|)
expr_stmt|;
block|}
name|float
name|cf
init|=
name|eds
operator|/
name|cd
decl_stmt|;
name|int
name|cfp
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|cf
operator|-
literal|1
operator|)
operator|*
literal|100
argument_list|)
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"], concurrency: "
argument_list|)
operator|.
name|append
argument_list|(
name|cf
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|cfp
argument_list|)
operator|.
name|append
argument_list|(
literal|"%)"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception while logging ExecutionTimes for Chain: '"
operator|+
name|job
operator|.
name|getChainName
argument_list|()
operator|+
literal|" and ContentItem "
operator|+
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|+
literal|" to Logger "
operator|+
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Logs basic infos about the Job as INFO and detailed infos as DEBUG      * @param job      */
specifier|protected
specifier|static
name|void
name|logJobInfo
parameter_list|(
name|Logger
name|log
parameter_list|,
name|EnhancementJob
name|job
parameter_list|,
name|String
name|header
parameter_list|,
name|boolean
name|logExecutions
parameter_list|)
block|{
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"   finished:     {}"
argument_list|,
name|job
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"   state:        {}"
argument_list|,
name|job
operator|.
name|isFailed
argument_list|()
condition|?
literal|"failed"
else|:
literal|"processing"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"   chain:        {}"
argument_list|,
name|job
operator|.
name|getChainName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"   content-item: {}"
argument_list|,
name|job
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logExecutions
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  executions:"
argument_list|)
expr_stmt|;
for|for
control|(
name|NonLiteral
name|completedExec
range|:
name|job
operator|.
name|getCompleted
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    - {} completed"
argument_list|,
name|getEngine
argument_list|(
name|job
operator|.
name|getExecutionMetadata
argument_list|()
argument_list|,
name|job
operator|.
name|getExecutionNode
argument_list|(
name|completedExec
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NonLiteral
name|runningExec
range|:
name|job
operator|.
name|getRunning
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    - {} running"
argument_list|,
name|getEngine
argument_list|(
name|job
operator|.
name|getExecutionMetadata
argument_list|()
argument_list|,
name|job
operator|.
name|getExecutionNode
argument_list|(
name|runningExec
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NonLiteral
name|executeable
range|:
name|job
operator|.
name|getExecutable
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    - {} executeable"
argument_list|,
name|getEngine
argument_list|(
name|job
operator|.
name|getExecutionMetadata
argument_list|()
argument_list|,
name|job
operator|.
name|getExecutionNode
argument_list|(
name|executeable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|job
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Error Message: {}"
argument_list|,
name|job
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|job
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reported Exception:"
argument_list|,
name|job
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
class|class
name|EnhancementJobObserver
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MIN_WAIT_TIME
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
name|EnhancementJob
name|enhancementJob
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|semaphore
decl_stmt|;
specifier|private
name|EnhancementJobObserver
parameter_list|(
name|EnhancementJob
name|job
parameter_list|)
block|{
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EnhancementJob MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|enhancementJob
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|semaphore
operator|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|acquire
parameter_list|()
block|{
try|try
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Interrupted while acquireing Semaphore for EnhancementJob "
operator|+
name|enhancementJob
operator|+
literal|"!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|release
parameter_list|()
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasCompleted
parameter_list|()
block|{
name|enhancementJob
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|enhancementJob
operator|.
name|isFinished
argument_list|()
return|;
block|}
finally|finally
block|{
name|enhancementJob
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|waitForCompletion
parameter_list|(
name|int
name|maxEnhancementJobWaitTime
parameter_list|)
block|{
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|semaphore
operator|.
name|availablePermits
argument_list|()
operator|<
literal|1
condition|)
block|{
comment|// The only permit is taken by the EnhancementJobHander
try|try
block|{
name|finished
operator|=
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|MIN_WAIT_TIME
argument_list|,
name|maxEnhancementJobWaitTime
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//interupted
name|finished
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|hasCompleted
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected {} permit(s) (expected = 0) available for "
operator|+
literal|"Semaphore of  EnhancementJob of ContentItem {}. Please "
operator|+
literal|"report this on dev@stanbol.apache.org and/or the Apache "
operator|+
literal|"Stanbol Issue Tracker."
argument_list|,
name|semaphore
operator|.
name|availablePermits
argument_list|()
argument_list|,
name|enhancementJob
operator|.
name|getContentItem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|finished
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|//already completed
name|finished
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|finished
return|;
block|}
block|}
comment|/**      * Currently only used to debug the number of currently registered      * Enhancements Jobs (if there are some)      * @author Rupert Westenthaler      */
specifier|private
class|class
name|EnhancementJobObserverDaemon
implements|implements
name|Runnable
block|{
comment|/**          * The logger of the Observer. Can be used to configure Loglevel specificly          *           */
specifier|private
name|Logger
name|observerLog
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnhancementJobObserverDaemon
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|observerLog
operator|.
name|debug
argument_list|(
literal|" ... init EnhancementJobObserver"
argument_list|)
expr_stmt|;
while|while
condition|(
name|processingJobs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
name|Collection
argument_list|<
name|EnhancementJob
argument_list|>
name|jobs
decl_stmt|;
name|Lock
name|readLock
init|=
name|processingLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|processingJobs
operator|!=
literal|null
condition|)
block|{
name|jobs
operator|=
operator|new
name|ArrayList
argument_list|<
name|EnhancementJob
argument_list|>
argument_list|(
name|processingJobs
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jobs
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|jobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|observerLog
operator|.
name|debug
argument_list|(
literal|" -- {} active Enhancement Jobs"
argument_list|,
name|jobs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|observerLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|EnhancementJob
name|job
range|:
name|jobs
control|)
block|{
name|Lock
name|jobLock
init|=
name|job
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|jobLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|logJobInfo
argument_list|(
name|observerLog
argument_list|,
name|job
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jobLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" -- No active Enhancement Jobs"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

