begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|jobmanager
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
operator|.
name|EXECUTION_ORDER_COMPARATOR
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Naive EnhancementJobManager implementation that keeps its request queue in  * memory.  *  * @scr.component immediate="true"  * @scr.service  * @scr.reference name="EnhancementEngine"  *                interface="org.apache.stanbol.enhancer.servicesapi.EnhancementEngine"  *                cardinality="0..n" policy="dynamic"  * @scr.property name="service.ranking"   *               value="-1000"  *               type="Integer"  */
end_comment

begin_class
specifier|public
class|class
name|WeightedJobManager
implements|implements
name|EnhancementJobManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WeightedJobManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// handle thread safety efficiently when traversals (e.g. when calling
comment|// #enhanceContent) are expected to be much more frequent than mutable
comment|// operations (binding or unbinding engines).
comment|//NITE CopyOnWriteArrayList can no longer be used, becuase,
comment|//     Iterators over CopyOnWriteArrayList do not support add/remove ...
comment|//     Therefore this implementation can not be used for Collections.sort
comment|//     Therefore a new ArrayList is generated each time an add/reomve
comment|//     operation is performed
specifier|private
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|sortedEngineList
init|=
operator|new
name|ArrayList
argument_list|<
name|EnhancementEngine
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|enhanceContent
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"enhanceContent({}), {} engines available"
argument_list|,
name|ci
argument_list|,
name|sortedEngineList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|EnhancementEngine
argument_list|>
name|engines
decl_stmt|;
comment|//changes in the sortedEngineList do creates new Lists. Therefore we need
comment|//only sync the creation of the Iterator. Calls to the iterator will
comment|//not trigger ConcurrentModificationExceptions
comment|//however the remove Method will not have any affect if the list was
comment|//changed.
synchronized|synchronized
init|(
name|sortedEngineList
init|)
block|{
name|engines
operator|=
name|sortedEngineList
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|engines
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EnhancementEngine
name|engine
init|=
name|engines
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|startEngine
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] cannot be enhanced by engine [{}], skipping"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO should handle sync/async enhancing. All sync for now.
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"ContentItem [{}] enhanced by engine [{}] in {}ms"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|engine
block|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startEngine
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"ContentItem [{}] enhanced in {}ms"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enhanceContent
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Chain
name|chain
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|chain
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"This EnhancementJobManager implementation does not yet"
operator|+
literal|"support Enhancement Chains"
argument_list|)
expr_stmt|;
block|}
comment|//This implementation don't take "chain" in account.
name|enhanceContent
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|bindEnhancementEngine
parameter_list|(
name|EnhancementEngine
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|sortedEngineList
init|)
block|{
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|EnhancementEngine
argument_list|>
argument_list|(
name|sortedEngineList
argument_list|)
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|newList
argument_list|,
name|EXECUTION_ORDER_COMPARATOR
argument_list|)
expr_stmt|;
name|sortedEngineList
operator|=
name|newList
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"EnhancementEngine {} added to our list: {}"
argument_list|,
name|e
argument_list|,
name|sortedEngineList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unbindEnhancementEngine
parameter_list|(
name|EnhancementEngine
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|sortedEngineList
init|)
block|{
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|EnhancementEngine
argument_list|>
argument_list|(
name|sortedEngineList
argument_list|)
decl_stmt|;
name|newList
operator|.
name|remove
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sortedEngineList
operator|=
name|newList
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"EnhancementEngine {} removed from our list: {}"
argument_list|,
name|e
argument_list|,
name|sortedEngineList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|EnhancementEngine
argument_list|>
name|getActiveEngines
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|sortedEngineList
argument_list|)
return|;
block|}
block|}
end_class

end_unit

