begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|transformation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|iterator
operator|.
name|ExtendedIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_comment
comment|/**  * It is a JUnit test class.<br>  * It tests the methods of the class {@link JenaToClerezzaConverter}.  *   * @author andrea.nuzzolese  *  */
end_comment

begin_class
specifier|public
class|class
name|JenaToClerezzaConverterTest
block|{
specifier|private
specifier|static
name|Model
name|model
decl_stmt|;
specifier|private
specifier|static
name|MGraph
name|mGraph
decl_stmt|;
specifier|private
specifier|static
name|String
name|ns
init|=
literal|"http://incubator.apache.org/stanbol/owl#"
decl_stmt|;
specifier|private
specifier|static
name|String
name|foaf
init|=
literal|"http://xmlns.com/foaf/0.1/"
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
block|{
comment|/* 		 * Set-up the Jena model for the test. 		 * Simply add the triples: 		 * 	AndreaNuzzolese isA Person 		 * 	EnricoDaga isA Person 		 *  AndreaNuzzolese knows EnricoDaga 		 */
name|model
operator|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
expr_stmt|;
name|Resource
name|foafPersonInJena
init|=
name|model
operator|.
name|createResource
argument_list|(
name|foaf
operator|+
literal|"Person"
argument_list|)
decl_stmt|;
name|Property
name|knowsInJena
init|=
name|model
operator|.
name|createProperty
argument_list|(
name|foaf
operator|+
literal|"knows"
argument_list|)
decl_stmt|;
name|Resource
name|andreaNuzzoleseInJena
init|=
name|model
operator|.
name|createResource
argument_list|(
name|ns
operator|+
literal|"AndreaNuzzolese"
argument_list|,
name|foafPersonInJena
argument_list|)
decl_stmt|;
name|Resource
name|enricoDagaInJena
init|=
name|model
operator|.
name|createResource
argument_list|(
name|ns
operator|+
literal|"EnricoDaga"
argument_list|,
name|foafPersonInJena
argument_list|)
decl_stmt|;
name|andreaNuzzoleseInJena
operator|.
name|addProperty
argument_list|(
name|knowsInJena
argument_list|,
name|enricoDagaInJena
argument_list|)
expr_stmt|;
comment|/* 		 * Set-up the Clerezza model for the test. 		 * As before simply add the triples: 		 * 	AndreaNuzzolese isA Person 		 * 	EnricoDaga isA Person 		 *  AndreaNuzzolese knows EnricoDaga 		 */
name|mGraph
operator|=
operator|new
name|SimpleMGraph
argument_list|()
expr_stmt|;
name|UriRef
name|knowsInClerezza
init|=
operator|new
name|UriRef
argument_list|(
name|ns
operator|+
literal|"knows"
argument_list|)
decl_stmt|;
name|UriRef
name|rdfType
init|=
operator|new
name|UriRef
argument_list|(
name|RDF
operator|.
name|getURI
argument_list|()
operator|+
literal|"type"
argument_list|)
decl_stmt|;
name|UriRef
name|foafPersonInClerezza
init|=
operator|new
name|UriRef
argument_list|(
name|foaf
operator|+
literal|"Person"
argument_list|)
decl_stmt|;
name|NonLiteral
name|andreaNuzzoleseInClerezza
init|=
operator|new
name|UriRef
argument_list|(
name|ns
operator|+
literal|"AndreaNuzzolese"
argument_list|)
decl_stmt|;
name|NonLiteral
name|enricoDagaInClerezza
init|=
operator|new
name|UriRef
argument_list|(
name|ns
operator|+
literal|"EnricoDaga"
argument_list|)
decl_stmt|;
name|Triple
name|triple
init|=
operator|new
name|TripleImpl
argument_list|(
name|andreaNuzzoleseInClerezza
argument_list|,
name|rdfType
argument_list|,
name|foafPersonInClerezza
argument_list|)
decl_stmt|;
name|mGraph
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
name|triple
operator|=
operator|new
name|TripleImpl
argument_list|(
name|enricoDagaInClerezza
argument_list|,
name|rdfType
argument_list|,
name|foafPersonInClerezza
argument_list|)
expr_stmt|;
name|mGraph
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
name|triple
operator|=
operator|new
name|TripleImpl
argument_list|(
name|andreaNuzzoleseInClerezza
argument_list|,
name|knowsInClerezza
argument_list|,
name|enricoDagaInClerezza
argument_list|)
expr_stmt|;
name|mGraph
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMGraphToJenaGraph
parameter_list|()
block|{
comment|/* 		 * Convert the MGraph to a Jena Graph. 		 */
name|Graph
name|jGraph
init|=
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaGraph
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
comment|/* 		 * Print all the triples contained in the Jena Graph. 		 */
name|ExtendedIterator
argument_list|<
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Triple
argument_list|>
name|tripleIt
init|=
name|jGraph
operator|.
name|find
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|tripleIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Triple
name|triple
init|=
name|tripleIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|triple
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMGraphToJenaModel
parameter_list|()
block|{
comment|/* 		 * Convert the MGraph to a Jena Model. 		 */
name|Model
name|model
init|=
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaModel
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
comment|/* 		 * Print all the triples contained in the Jena Model. 		 */
name|StmtIterator
name|stmtIt
init|=
name|model
operator|.
name|listStatements
argument_list|()
decl_stmt|;
while|while
condition|(
name|stmtIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|statement
init|=
name|stmtIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModelToMGraph
parameter_list|()
block|{
comment|/* 		 * Convert the Jena Model to a Clerezza MGraph. 		 */
name|MGraph
name|mGraph
init|=
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaMGraph
argument_list|(
name|model
argument_list|)
decl_stmt|;
comment|/* 		 * Print all the triples contained in the Clerezza MGraph. 		 */
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|tripleIt
init|=
name|mGraph
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tripleIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|tripleIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|triple
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModelToClerezzaTriples
parameter_list|()
block|{
comment|/* 		 * Convert the Jena Model into a collection of Clerezza triples. 		 */
name|Collection
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaTriples
argument_list|(
name|model
argument_list|)
decl_stmt|;
comment|/* 		 * Print the collection of Clerezza triples. 		 */
for|for
control|(
name|Triple
name|triple
range|:
name|triples
control|)
block|{
name|log
operator|.
name|info
argument_list|(
name|triple
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

