begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|uimaremote
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|caslight
operator|.
name|FeatureStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLReaderFactory
import|;
end_import

begin_comment
comment|/**  * This class is an HTTP client for processing an UIMA Simple Servlet Result  *  * @author Mihály Héder  */
end_comment

begin_class
specifier|public
class|class
name|UIMAServletClient
block|{
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Queries the UIMA Simple Servlet and returns the FeatureSet list.      * @param servletURI The uri of the servlet      * @param sourceName The source name of this processor      * @param types The TypeConfigMap for the generated FeatureSets      * @param input The Sofa String      * @return The generated FeatureSet list      */
specifier|public
name|List
argument_list|<
name|FeatureStructure
argument_list|>
name|getFSList
parameter_list|(
name|String
name|servletURI
parameter_list|,
name|String
name|sourceName
parameter_list|,
name|String
name|input
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"input (sofaString) is null!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Construct data
name|String
name|data
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"text"
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|input
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|data
operator|+=
literal|"&"
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"mode"
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"xml"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// Send data
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|servletURI
argument_list|)
decl_stmt|;
name|URLConnection
name|conn
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OutputStreamWriter
name|wr
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|wr
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|wr
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Get the response
name|BufferedReader
name|rd
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|XMLReader
name|xr
init|=
name|XMLReaderFactory
operator|.
name|createXMLReader
argument_list|()
decl_stmt|;
name|SaxUIMAServletResult2Offsets
name|handler
init|=
operator|new
name|SaxUIMAServletResult2Offsets
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setSourceName
argument_list|(
name|sourceName
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setErrorHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|rd
argument_list|)
argument_list|)
expr_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
name|rd
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FeatureStructure
argument_list|>
name|fsList
init|=
name|handler
operator|.
name|getFsList
argument_list|()
decl_stmt|;
for|for
control|(
name|FeatureStructure
name|fs
range|:
name|fsList
control|)
block|{
name|fs
operator|.
name|setCoveredText
argument_list|(
name|fs
operator|.
name|getSofaChunk
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fsList
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error in UIMAClient"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error in UIMAClient"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

