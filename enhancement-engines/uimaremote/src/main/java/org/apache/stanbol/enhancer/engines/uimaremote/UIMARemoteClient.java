begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|uimaremote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|caslight
operator|.
name|FeatureStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|caslight
operator|.
name|FeatureStructureListHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|uimaremote
operator|.
name|tools
operator|.
name|UIMASimpleServletClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|NoSuchPartException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides a remote UIMA Client Enhancement Engine that communicates  * with UIMA SimpleServlets.  *  * @author Mihaly Heder  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"UIMA Remote Client Enhancement Engine"
argument_list|,
name|description
operator|=
literal|"Connects to one or more UIMA Simpleservlets and retreives annotations"
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"uimaremote"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|UIMARemoteClient
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|cardinality
operator|=
literal|1000
argument_list|,
name|value
operator|=
literal|"sourcename;http://example.com/uimaend"
argument_list|,
name|label
operator|=
literal|"UIMA source name + endpoint"
argument_list|,
name|description
operator|=
literal|"Format:<sourceName>;<URI>. Example: sourcename;http://example.com/uimaend ."
operator|+
literal|"The sourcename will be used for referring internally to the UIMA endpoint"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|UIMA_ENDPOINTS
init|=
literal|"stanbol.engine.uimaremote.endpoint"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"uima.apache.org"
argument_list|,
name|label
operator|=
literal|"Content Part URI reference"
argument_list|,
name|description
operator|=
literal|"The URI Reference of the UIMA content part to be created. This content part will "
operator|+
literal|"contain Annotations from all the resources above."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|UIMA_CONTENTPART_URIREF
init|=
literal|"stanbol.engine.uimaremote.contentpart.uriref"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|cardinality
operator|=
literal|1000
argument_list|,
name|value
operator|=
literal|"text/plain"
argument_list|,
name|label
operator|=
literal|"Supported Mime Types"
argument_list|,
name|description
operator|=
literal|"Mime Types supported by this client. This should be aligned to the capabilities of the "
operator|+
literal|"UIMA Endpoints."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|UIMA_SUPPORTED_MIMETYPES
init|=
literal|"stanbol.engine.uimaremote.contentpart.mimetypes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ServiceProperties
operator|.
name|ORDERING_PRE_PROCESSING
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_MIMETYPES
decl_stmt|;
specifier|private
name|List
argument_list|<
name|UIMASimpleServletClient
argument_list|>
name|usscList
decl_stmt|;
specifier|private
name|String
name|uimaUri
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|get
argument_list|(
name|UIMA_SUPPORTED_MIMETYPES
argument_list|)
operator|instanceof
name|String
index|[]
condition|)
block|{
name|SUPPORTED_MIMETYPES
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_SUPPORTED_MIMETYPES
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Got String: '"
operator|+
name|props
operator|.
name|get
argument_list|(
name|UIMA_SUPPORTED_MIMETYPES
argument_list|)
operator|+
literal|"' instead of String[] from Felix for param:"
operator|+
name|UIMA_SUPPORTED_MIMETYPES
argument_list|)
expr_stmt|;
name|SUPPORTED_MIMETYPES
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_SUPPORTED_MIMETYPES
argument_list|)
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|endpointsA
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|get
argument_list|(
name|UIMA_ENDPOINTS
argument_list|)
operator|instanceof
name|String
index|[]
condition|)
block|{
name|endpointsA
operator|=
operator|(
name|String
index|[]
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_ENDPOINTS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Got String: '"
operator|+
name|props
operator|.
name|get
argument_list|(
name|UIMA_ENDPOINTS
argument_list|)
operator|+
literal|"' instead of String[] from Felix for param:"
operator|+
name|UIMA_ENDPOINTS
argument_list|)
expr_stmt|;
name|endpointsA
operator|=
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_ENDPOINTS
argument_list|)
block|}
expr_stmt|;
block|}
name|usscList
operator|=
operator|new
name|ArrayList
argument_list|<
name|UIMASimpleServletClient
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|endpoint
range|:
name|endpointsA
control|)
block|{
name|String
index|[]
name|parts
init|=
name|endpoint
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|UIMASimpleServletClient
name|ussc
init|=
operator|new
name|UIMASimpleServletClient
argument_list|()
decl_stmt|;
name|ussc
operator|.
name|setSourceName
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ussc
operator|.
name|setUri
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|usscList
operator|.
name|add
argument_list|(
name|ussc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Enpoint '"
operator|+
name|endpoint
operator|+
literal|"' cannot be configured. Proper format:<sourcename>;<uri>"
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|uimaUri
operator|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_CONTENTPART_URIREF
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|usscList
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|ENHANCE_ASYNC
return|;
block|}
return|return
name|CANNOT_ENHANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPart
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No ContentPart with an supported Mimetype '"
operator|+
name|SUPPORTED_MIMETYPES
operator|+
literal|"' found for ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|": This is also checked in the canEnhance method! -> This "
operator|+
literal|"indicated an Bug in the implementation of the "
operator|+
literal|"EnhancementJobManager!"
argument_list|)
throw|;
block|}
name|String
name|text
decl_stmt|;
try|try
block|{
name|text
operator|=
name|ContentItemHelper
operator|.
name|getText
argument_list|(
name|contentPart
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|UIMASimpleServletClient
name|ussc
range|:
name|usscList
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Accessing uima source:"
operator|+
name|ussc
operator|.
name|getSourceName
argument_list|()
operator|+
literal|" endpoint:"
operator|+
name|ussc
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FeatureStructure
argument_list|>
name|featureSetList
init|=
name|ussc
operator|.
name|process
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|UriRef
name|uimaUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|uimaUri
argument_list|)
decl_stmt|;
name|FeatureStructureListHolder
name|holder
decl_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|holder
operator|=
name|ci
operator|.
name|getPart
argument_list|(
name|uimaUriRef
argument_list|,
name|FeatureStructureListHolder
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchPartException
name|e
parameter_list|)
block|{
name|holder
operator|=
operator|new
name|FeatureStructureListHolder
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Adding FeatureSet List Holder content part with uri:"
operator|+
name|uimaUri
argument_list|)
expr_stmt|;
name|ci
operator|.
name|addPart
argument_list|(
name|uimaUriRef
argument_list|,
name|holder
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|uimaUri
operator|+
literal|" content part added."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|holder
operator|.
name|addFeatureStructureList
argument_list|(
name|ussc
operator|.
name|getSourceName
argument_list|()
argument_list|,
name|featureSetList
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|defaultOrder
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

