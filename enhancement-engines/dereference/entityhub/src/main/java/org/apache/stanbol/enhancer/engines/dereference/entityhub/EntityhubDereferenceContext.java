begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|entityhub
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LDPATH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|EntityDereferenceEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|EntityhubLDPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_class
specifier|public
class|class
name|EntityhubDereferenceContext
extends|extends
name|DereferenceContext
block|{
specifier|private
name|FieldMapper
name|fieldMapper
decl_stmt|;
specifier|private
name|Program
argument_list|<
name|Object
argument_list|>
name|ldpathProgram
decl_stmt|;
specifier|protected
name|EntityhubDereferenceContext
parameter_list|(
name|EntityDereferenceEngine
name|engine
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProps
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|super
argument_list|(
name|engine
argument_list|,
name|enhancementProps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initialise
parameter_list|()
throws|throws
name|DereferenceConfigurationException
block|{
name|initFieldMappings
argument_list|(
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|initLdPath
argument_list|(
name|getLdPathProgram
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initFieldMappings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|TrackingDereferencerBase
argument_list|<
name|?
argument_list|>
name|dereferencer
init|=
name|getEntityhubDereferencer
argument_list|()
decl_stmt|;
name|FieldMapper
name|fieldMapper
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
operator|!
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"parse FieldMappings from EnhancementProperties"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldMapping
argument_list|>
name|mappings
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldMapping
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configuredMapping
range|:
name|fields
control|)
block|{
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|configuredMapping
argument_list|,
name|dereferencer
operator|.
name|getNsPrefixService
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   - add FieldMapping {}"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuredMapping
operator|!=
literal|null
operator|&&
operator|!
name|configuredMapping
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"   - unable to parse FieldMapping '{}'"
argument_list|,
name|configuredMapping
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> apply {} valid mappings"
argument_list|,
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fieldMapper
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldMapping
name|mapping
range|:
name|mappings
control|)
block|{
name|fieldMapper
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//no valid mapping parsed
name|log
operator|.
name|debug
argument_list|(
literal|"> no valid mapping parsed ... will dereference all fields"
argument_list|)
expr_stmt|;
name|fieldMapper
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dereferencer
operator|.
name|getFieldMapper
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fieldMapper
operator|=
name|dereferencer
operator|.
name|getFieldMapper
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fieldMapper
operator|=
literal|null
expr_stmt|;
block|}
comment|//TODO: uncomment this to merge context with engine mappings. Not sure
comment|//      if this is desirable
comment|//      if(fieldMapper != null){
comment|//            if(dereferencer.getFieldMapper() != null){
comment|//                //add mappings of the engine configuration to the context mappings
comment|//                for(FieldMapping mapping : dereferencer.getFieldMapper().getMappings()){
comment|//                    fieldMapper.addMapping(mapping);
comment|//                }
comment|//            }
comment|//        }
comment|//if a fieldMapper is present and languages are set we will add a language
comment|//filter to the fieldMapper. If the fieldmapper is null languages are
comment|//filtered separately.
name|Collection
argument_list|<
name|String
argument_list|>
name|langs
init|=
name|getLanguages
argument_list|()
decl_stmt|;
if|if
condition|(
name|langs
operator|!=
literal|null
operator|&&
operator|!
name|langs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|fieldMapper
operator|==
literal|null
condition|)
block|{
comment|//create a fieldMapper for filtering languages
name|fieldMapper
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fieldMapper
operator|.
name|addMapping
argument_list|(
operator|new
name|FieldMapping
argument_list|(
operator|new
name|TextConstraint
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
name|langs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|langs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldMapper
operator|=
name|fieldMapper
expr_stmt|;
comment|//set the field
block|}
specifier|protected
name|void
name|initLdPath
parameter_list|(
name|String
name|program
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|TrackingDereferencerBase
argument_list|<
name|?
argument_list|>
name|dereferencer
init|=
name|getEntityhubDereferencer
argument_list|()
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|dereferencer
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|Program
argument_list|<
name|Object
argument_list|>
name|ldpathProgram
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|program
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|parseBackend
init|=
operator|new
name|ParseBackend
argument_list|<
name|Object
argument_list|>
argument_list|(
name|valueFactory
argument_list|)
decl_stmt|;
name|EntityhubLDPath
name|parseLdPath
init|=
operator|new
name|EntityhubLDPath
argument_list|(
name|parseBackend
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
try|try
block|{
name|ldpathProgram
operator|=
name|parseLdPath
operator|.
name|parseProgram
argument_list|(
operator|new
name|StringReader
argument_list|(
name|program
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to parse Context LDPath pogram: \n {}"
argument_list|,
name|program
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DereferenceConfigurationException
argument_list|(
literal|"Unable to parse context LDPath program !"
argument_list|,
name|e
argument_list|,
name|dereferencer
operator|.
name|getClass
argument_list|()
argument_list|,
name|DEREFERENCE_ENTITIES_LDPATH
argument_list|)
throw|;
block|}
comment|//finally validate if all mappings of the program do use a URI as key
comment|//also store used fieldNames as we need them later
name|Set
argument_list|<
name|String
argument_list|>
name|contextFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|ldpath
operator|.
name|model
operator|.
name|fields
operator|.
name|FieldMapping
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|mapping
range|:
name|ldpathProgram
operator|.
name|getFields
argument_list|()
control|)
block|{
try|try
block|{
operator|new
name|URI
argument_list|(
name|mapping
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|contextFields
operator|.
name|add
argument_list|(
name|mapping
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DereferenceConfigurationException
argument_list|(
literal|"Parsed LDPath MUST use valid URIs as field names (invalid field name: '"
operator|+
name|mapping
operator|.
name|getFieldName
argument_list|()
operator|+
literal|"' | selector: '"
operator|+
name|mapping
operator|.
name|getSelector
argument_list|()
operator|.
name|getPathExpression
argument_list|(
name|parseBackend
argument_list|)
operator|+
literal|"')!"
argument_list|,
name|dereferencer
operator|.
name|getClass
argument_list|()
argument_list|,
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LDPATH
argument_list|)
throw|;
block|}
block|}
comment|//append the mappings configured for the engine
if|if
condition|(
name|dereferencer
operator|.
name|getLdPathProgram
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|ldpath
operator|.
name|model
operator|.
name|fields
operator|.
name|FieldMapping
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|mapping
range|:
name|dereferencer
operator|.
name|getLdPathProgram
argument_list|()
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|contextFields
operator|.
name|contains
argument_list|(
name|mapping
operator|.
name|getFieldName
argument_list|()
argument_list|)
condition|)
block|{
name|ldpathProgram
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
comment|//else ignore mappings for fields specified in the context
block|}
block|}
block|}
else|else
block|{
comment|//no context specific - use the one of the config
name|ldpathProgram
operator|=
name|dereferencer
operator|.
name|getLdPathProgram
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ldpathProgram
operator|!=
literal|null
operator|&&
operator|!
name|ldpathProgram
operator|.
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|ldpathProgram
operator|=
name|ldpathProgram
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|ldpathProgram
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the Entityhub Dereferencer base      * @return      */
specifier|protected
name|TrackingDereferencerBase
argument_list|<
name|?
argument_list|>
name|getEntityhubDereferencer
parameter_list|()
block|{
return|return
operator|(
name|TrackingDereferencerBase
argument_list|<
name|?
argument_list|>
operator|)
name|engine
operator|.
name|getDereferencer
argument_list|()
return|;
block|}
comment|/**      * Getter for the FieldMapper parsed for the {@link #getFields()} parsed      * in the context (or the config if no fields where present in the context)      * @return the field mapper to be used for dereferencing entities or      *<code>null</code> if no field mappings are present      */
specifier|public
name|FieldMapper
name|getFieldMapper
parameter_list|()
block|{
return|return
name|fieldMapper
return|;
block|}
comment|/**      * Getter for the LDPath Program parsed from the {@link #getLdPathProgram()}      * parsed in the context and the program set in the configuration. Fields      * present in the context will override (replace) those that are also      * present in the program set for the engine configuration.       * @return the parsed LDPath {@link Program} or<code>null</code> if none      */
specifier|public
name|Program
argument_list|<
name|Object
argument_list|>
name|getProgram
parameter_list|()
block|{
return|return
name|ldpathProgram
return|;
block|}
block|}
end_class

end_unit

