begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|entityhub
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|entityhub
operator|.
name|ExecutorServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_comment
comment|/**  * Utility that wraps a {@link ServiceTracker} to lookup the shared thread  * pool for dereferencing  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|SharedExecutorServiceProvider
implements|implements
name|ExecutorServiceProvider
block|{
specifier|private
name|ServiceTracker
name|tracker
decl_stmt|;
specifier|public
name|SharedExecutorServiceProvider
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|createFilter
argument_list|(
name|SharedDereferenceThreadPool
operator|.
name|SHARED_THREAD_POOL_FILTER
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create filter for the "
operator|+
name|SharedDereferenceThreadPool
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
name|ExecutorService
name|executorService
init|=
operator|(
name|ExecutorService
operator|)
name|tracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|executorService
operator|!=
literal|null
operator|&&
operator|!
name|executorService
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
return|return
name|executorService
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

