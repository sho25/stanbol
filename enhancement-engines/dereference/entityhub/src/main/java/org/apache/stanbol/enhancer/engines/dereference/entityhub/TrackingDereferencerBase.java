begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|entityhub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|EntityDereferencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|EntityhubLDPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|AbstractBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_comment
comment|/**  * Abstract super class for EntityDereferencer that need to track the OSGI service  * used to lookup Entities. Used by the {@link EntityhubDereferencer} and the   * {@link SiteDereferencer} implementation  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TrackingDereferencerBase
parameter_list|<
name|T
parameter_list|>
implements|implements
name|EntityDereferencer
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ServiceTracker
name|searchServiceTracker
decl_stmt|;
specifier|protected
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|protected
specifier|final
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|dereferencedFields
decl_stmt|;
specifier|private
name|FieldMapper
name|fieldMapper
decl_stmt|;
specifier|private
name|NamespacePrefixService
name|nsPrefixService
decl_stmt|;
specifier|private
name|Program
argument_list|<
name|Object
argument_list|>
name|ldpathProgram
decl_stmt|;
comment|/**      * Caches the {@link RDFBackend} for the last instance returned by      * {@link #getService()}.      */
specifier|private
name|Map
argument_list|<
name|T
argument_list|,
name|RDFBackend
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rdfBackendCache
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|T
argument_list|,
name|RDFBackend
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|serviceClass
decl_stmt|;
comment|/**      * Creates a new instance for the parsed parameter      * @param context the BundleContexed used to create the {@link ServiceTracker}      * listening for the SearchService      * @param serviceClass      * @param filterEntries      */
specifier|protected
name|TrackingDereferencerBase
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|serviceClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterEntries
parameter_list|,
name|ServiceTrackerCustomizer
name|customizer
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|serviceClass
operator|=
name|serviceClass
expr_stmt|;
comment|//the fieldMapper allows to configure users fields that should be dereferenced
if|if
condition|(
name|filterEntries
operator|==
literal|null
operator|||
name|filterEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|searchServiceTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|,
name|customizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|filterString
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(&(objectclass=%s)"
argument_list|,
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterEntry
range|:
name|filterEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|filterEntry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filterEntry
operator|.
name|getKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|filterEntry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filterEntry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
name|filterEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|filterEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal filterEntry "
operator|+
name|filterEntry
operator|+
literal|". Both key and value MUST NOT be NULL nor emtpty!"
argument_list|)
throw|;
block|}
block|}
name|filterString
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|Filter
name|filter
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|context
operator|.
name|createFilter
argument_list|(
name|filterString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to build Filter for '%s' (class=%s,filter=%s)"
argument_list|,
name|filterString
argument_list|,
name|serviceClass
argument_list|,
name|filterEntries
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|searchServiceTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|filter
argument_list|,
name|customizer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Setter for the {@link NamespacePrefixService}      * @param nsPrefixService      */
specifier|public
name|void
name|setNsPrefixService
parameter_list|(
name|NamespacePrefixService
name|nsPrefixService
parameter_list|)
block|{
name|this
operator|.
name|nsPrefixService
operator|=
name|nsPrefixService
expr_stmt|;
block|}
comment|/**      * Getter for the {@link NamespacePrefixService}      * @return      */
specifier|public
name|NamespacePrefixService
name|getNsPrefixService
parameter_list|()
block|{
return|return
name|nsPrefixService
return|;
block|}
comment|/**      * Setter for the dereferenced fields      * @param dereferencedFields the set containing the fields that need to be      * dereferenced. If<code>null</code> or an empty set all fields will be      * dereferenced.      */
specifier|public
name|void
name|setDereferencedFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dereferencedFields
parameter_list|)
block|{
if|if
condition|(
name|dereferencedFields
operator|!=
literal|null
operator|&&
operator|!
name|dereferencedFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldMapping
argument_list|>
name|mappings
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldMapping
argument_list|>
argument_list|(
name|dereferencedFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> parse configured field mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|configuredMapping
range|:
name|dereferencedFields
control|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|" - parse configure mapping '{}'"
argument_list|,
name|configuredMapping
argument_list|)
expr_stmt|;
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|configuredMapping
argument_list|,
name|nsPrefixService
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   - add FieldMapping {}"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuredMapping
operator|!=
literal|null
operator|&&
operator|!
name|configuredMapping
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"   - unable to parse FieldMapping '{}'"
argument_list|,
name|configuredMapping
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> apply {} valid mappings"
argument_list|,
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fieldMapper
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldMapping
name|mapping
range|:
name|mappings
control|)
block|{
name|fieldMapper
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//no valid mapping parsed
name|log
operator|.
name|debug
argument_list|(
literal|"> no valid mapping parsed ... will dereference all fields"
argument_list|)
expr_stmt|;
name|fieldMapper
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|fieldMapper
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Setter for the LDPath program used for dereferencing Entities      * @param ldpathProgramStr the LDPath program as String      * @throws ConfigurationException if parsing the LDPath program fails      */
specifier|public
name|void
name|setLdPath
parameter_list|(
name|String
name|ldpathProgramStr
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|ldpathProgramStr
operator|==
literal|null
operator|||
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|ldpathProgramStr
argument_list|)
condition|)
block|{
name|ldpathProgram
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|//validate the parsed LDPath program
comment|//when this method is called the real RDFBackend will not be available.
comment|//however we would like to parse/validate the parsed LDPath program
comment|//So we will create a pseudo RDFBackend sufficient to be used with the
comment|//parser
specifier|final
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|parseBackend
init|=
operator|new
name|AbstractBackend
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|EntityhubException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not expected to be called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|ValueFactory
name|getValueFactory
parameter_list|()
block|{
return|return
name|valueFactory
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Representation
name|getRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|EntityhubException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not expected to be called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|FieldQuery
name|createQuery
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not expected to be called"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
comment|//NOTE: calling execute(..) an this parseLdPath or even the
comment|//ldpathProgram will result in UnsupportedOperationException
comment|//but parsing is OK
name|EntityhubLDPath
name|parseLdPath
init|=
operator|new
name|EntityhubLDPath
argument_list|(
name|parseBackend
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
try|try
block|{
name|ldpathProgram
operator|=
name|parseLdPath
operator|.
name|parseProgram
argument_list|(
operator|new
name|StringReader
argument_list|(
name|ldpathProgramStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to parse LDPath pogram: \n {}"
argument_list|,
name|ldpathProgramStr
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LDPATH
argument_list|,
literal|"Unable to parse configured LDPath program "
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//finally validate if all mappings of the programm do use a URI as key
for|for
control|(
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|fields
operator|.
name|FieldMapping
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|mapping
range|:
name|ldpathProgram
operator|.
name|getFields
argument_list|()
control|)
block|{
try|try
block|{
operator|new
name|URI
argument_list|(
name|mapping
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LDPATH
argument_list|,
literal|"Parsed LDPath MUST use valid URIs as field names (invalid field name: '"
operator|+
name|mapping
operator|.
name|getFieldName
argument_list|()
operator|+
literal|"' | selector: '"
operator|+
name|mapping
operator|.
name|getSelector
argument_list|()
operator|.
name|getPathExpression
argument_list|(
name|parseBackend
argument_list|)
operator|+
literal|"')!"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Getter for the set of dereferenced fields      * @return the dereferenced fields or an empty set if all fields are      * dereferenced.      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDereferencedFields
parameter_list|()
block|{
return|return
name|dereferencedFields
return|;
block|}
comment|/**      * Starts the tracking by calling {@link ServiceTracker#open()}      */
specifier|public
name|void
name|open
parameter_list|()
block|{
name|searchServiceTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
comment|/**      * Getter for the Service used to search for Entities. If the service is      * currently not available, than this method will return<code>null</code>      * @return The service of<code>null</code> if not available      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|//type is ensured by OSGI
specifier|protected
name|T
name|getService
parameter_list|()
block|{
if|if
condition|(
name|searchServiceTracker
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This TrackingEntitySearcher is already closed!"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|(
name|T
operator|)
name|searchServiceTracker
operator|.
name|getService
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|dereference
parameter_list|(
name|UriRef
name|uri
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Lock
name|writeLock
parameter_list|,
name|DereferenceContext
name|derefContext
parameter_list|)
throws|throws
name|DereferenceException
block|{
name|T
name|service
init|=
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DereferenceException
argument_list|(
name|uri
argument_list|,
name|serviceClass
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"service is currently not available"
argument_list|)
throw|;
block|}
name|Representation
name|rep
decl_stmt|;
try|try
block|{
name|rep
operator|=
name|getRepresentation
argument_list|(
name|service
argument_list|,
name|uri
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|derefContext
operator|.
name|isOfflineMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DereferenceException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//we need the languages as strings
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|langs
init|=
name|derefContext
operator|.
name|getLanguages
argument_list|()
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldMapper
operator|==
literal|null
operator|&&
name|ldpathProgram
operator|==
literal|null
operator|&&
name|langs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|copyAll
argument_list|(
name|uri
argument_list|,
name|rep
argument_list|,
name|graph
argument_list|,
name|writeLock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we need to apply some filters while dereferencing
if|if
condition|(
name|fieldMapper
operator|!=
literal|null
operator|||
operator|!
name|langs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//this considers speficied fields and included languages
name|copyMapped
argument_list|(
name|uri
argument_list|,
name|rep
argument_list|,
name|langs
argument_list|,
name|graph
argument_list|,
name|writeLock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ldpathProgram
operator|!=
literal|null
condition|)
block|{
comment|//this executes LDPath statements
name|copyLdPath
argument_list|(
name|uri
argument_list|,
name|getRdfBackend
argument_list|(
name|service
argument_list|)
argument_list|,
name|langs
argument_list|,
name|graph
argument_list|,
name|writeLock
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Executes the {@link #ldpathProgram} using the parsed URI as context and      * writes the the results to the parsed Graph      * @param uri the context      * @param rdfBackend the RdfBackend the LDPath program is executed on      * @param langs the set of languages to dereference      * @param graph the graph to store the results      * @param writeLock the write lock for the graph      * @throws DereferenceException on any {@link EntityhubException} while      * executing the LDPath program      */
specifier|private
name|void
name|copyLdPath
parameter_list|(
name|UriRef
name|uri
parameter_list|,
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|rdfBackend
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|langs
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Lock
name|writeLock
parameter_list|)
throws|throws
name|DereferenceException
block|{
comment|//A RdfReference needs to be used as context
name|RdfReference
name|context
init|=
name|valueFactory
operator|.
name|createReference
argument_list|(
name|uri
argument_list|)
decl_stmt|;
comment|//create the representation that stores results in an intermediate
comment|//graph (we do not want partial results on an error
name|MGraph
name|ldPathResults
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|RdfRepresentation
name|result
init|=
name|valueFactory
operator|.
name|createRdfRepresentation
argument_list|(
name|uri
argument_list|,
name|ldPathResults
argument_list|)
decl_stmt|;
comment|//execute the LDPath Program and write results to the RDF Graph
try|try
block|{
for|for
control|(
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|fields
operator|.
name|FieldMapping
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|mapping
range|:
name|ldpathProgram
operator|.
name|getFields
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|values
init|=
name|mapping
operator|.
name|getValues
argument_list|(
name|rdfBackend
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|fieldName
init|=
name|mapping
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
if|if
condition|(
name|langs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//filter for languages
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|(
operator|!
operator|(
name|value
operator|instanceof
name|Text
operator|)
operator|)
operator|||
name|langs
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|//else text with filtered language ... do not add
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DereferenceException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"dereferenced via LDPath {}"
argument_list|,
name|ModelUtils
operator|.
name|getRepresentationInfo
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ldPathResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//copy the results
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|graph
operator|.
name|addAll
argument_list|(
name|ldPathResults
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Getter for the {@link RDFBackend} for the parsed service. This tries to      * get the backend from {@link #rdfBackendCache}. If it is not yet created      * {@link #createRdfBackend(Object)} is called.      * @param service The Service to get the {@link RDFBackend} for.      * @return the {@link RDFBackend}.      */
specifier|protected
specifier|final
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|getRdfBackend
parameter_list|(
name|T
name|service
parameter_list|)
block|{
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|rdfBackend
init|=
name|rdfBackendCache
operator|.
name|get
argument_list|(
name|service
argument_list|)
decl_stmt|;
if|if
condition|(
name|rdfBackend
operator|==
literal|null
condition|)
block|{
name|rdfBackend
operator|=
name|createRdfBackend
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|rdfBackendCache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//cache only a single service
name|rdfBackendCache
operator|.
name|put
argument_list|(
name|service
argument_list|,
name|rdfBackend
argument_list|)
expr_stmt|;
block|}
return|return
name|rdfBackend
return|;
block|}
comment|/**      * Applies the field mappings to the representation and stores the results      * in the graph      * @param uri the uri of the entity to dereference      * @param rep the data for the entity as in the entityhub      * @param langs the set of languages to dereference      * @param graph the graph to store the mapping results      * @param writeLock the write lock for the graph      */
specifier|private
name|void
name|copyMapped
parameter_list|(
name|UriRef
name|uri
parameter_list|,
name|Representation
name|rep
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|langs
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Lock
name|writeLock
parameter_list|)
block|{
comment|//init the fieldMapper
name|FieldMapper
name|fieldMapper
decl_stmt|;
if|if
condition|(
operator|!
name|langs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//if we need to filter for specific languages
comment|//we need to modify the field and add a global filter for the
comment|//languages. NOTE that the field might be null. In that case we
comment|//need just filter literals by language
comment|//TODO: maybe cache fieldMappers for sets of languages
name|fieldMapper
operator|=
name|this
operator|.
name|fieldMapper
operator|!=
literal|null
condition|?
name|this
operator|.
name|fieldMapper
operator|.
name|clone
argument_list|()
else|:
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|fieldMapper
operator|.
name|addMapping
argument_list|(
operator|new
name|FieldMapping
argument_list|(
operator|new
name|TextConstraint
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
name|langs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|graph
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//just use the fieldMapper as parsed in the config
name|fieldMapper
operator|=
name|this
operator|.
name|fieldMapper
expr_stmt|;
block|}
comment|//execute the field mappings
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|RdfRepresentation
name|clerezzaRep
init|=
name|valueFactory
operator|.
name|createRdfRepresentation
argument_list|(
name|uri
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|fieldMapper
operator|.
name|applyMappings
argument_list|(
name|rep
argument_list|,
name|clerezzaRep
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"dereferenced via Mappings {}"
argument_list|,
name|ModelUtils
operator|.
name|getRepresentationInfo
argument_list|(
name|clerezzaRep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Copies all data form the representation to the graph. This is used      * if no dereference rules are defined      * @param uri the uri of the entity to copy      * @param rep the {@link Representation} with the data of the entity      * @param graph the graph to copy the data      * @param writeLock the write lock for the graph      */
specifier|private
name|void
name|copyAll
parameter_list|(
name|UriRef
name|uri
parameter_list|,
name|Representation
name|rep
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Lock
name|writeLock
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"dereferenced all of {}"
argument_list|,
name|ModelUtils
operator|.
name|getRepresentationInfo
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rep
operator|instanceof
name|RdfRepresentation
condition|)
block|{
name|graph
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|RdfRepresentation
operator|)
name|rep
operator|)
operator|.
name|getRdfGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RdfRepresentation
name|clerezzaRep
init|=
name|valueFactory
operator|.
name|createRdfRepresentation
argument_list|(
name|uri
argument_list|,
name|graph
argument_list|)
decl_stmt|;
comment|//convert all values for all fields
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|rep
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
init|;
name|fieldValues
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|clerezzaRep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|fieldValues
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * provides the Representation for the parsed id      * @param id the id      * @param offlineMode off line mode state      * @return the Representation or<code>null</code> if not found      * @throws DereferenceException       */
specifier|protected
specifier|abstract
name|Representation
name|getRepresentation
parameter_list|(
name|T
name|service
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|offlineMode
parameter_list|)
throws|throws
name|EntityhubException
function_decl|;
comment|/**      * Creates an RDFBackend for the parsed service      * @param service      * @return      */
specifier|protected
specifier|abstract
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|createRdfBackend
parameter_list|(
name|T
name|service
parameter_list|)
function_decl|;
comment|/**      * Closes the {@link ServiceTracker} used to track the service.      */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|searchServiceTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|searchServiceTracker
operator|=
literal|null
expr_stmt|;
name|bundleContext
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

