begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|entityhub
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_FIELDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LDPATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|SERVICE_RANKING
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceEngineConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|EntityDereferenceEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|entityhub
operator|.
name|shared
operator|.
name|SharedDereferenceThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|entityhub
operator|.
name|shared
operator|.
name|SharedExecutorServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * The EntityhubLinkingEngine in NOT an {@link EnhancementEngine} but only an  * OSGI {@link Component} that allows to configure instances of the  * {@link EntityLinkingEngine} using an {@link SiteDereferencer} or  * {@link EntityhubDereferencer} to link entities.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|// the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROPERTY_NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubDereferenceEngine
operator|.
name|SITE_ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DereferenceConstants
operator|.
name|FALLBACK_MODE
argument_list|,
name|boolValue
operator|=
name|DereferenceConstants
operator|.
name|DEFAULT_FALLBACK_MODE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DereferenceConstants
operator|.
name|URI_PREFIX
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DereferenceConstants
operator|.
name|URI_PATTERN
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DereferenceConstants
operator|.
name|FILTER_CONTENT_LANGUAGES
argument_list|,
name|boolValue
operator|=
name|DereferenceConstants
operator|.
name|DEFAULT_FILTER_CONTENT_LANGUAGES
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DEREFERENCE_ENTITIES_FIELDS
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|value
operator|=
block|{
literal|"rdfs:comment"
block|,
literal|"geo:lat"
block|,
literal|"geo:long"
block|,
literal|"foaf:depiction"
block|,
literal|"dbp-ont:thumbnail"
block|}
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DEREFERENCE_ENTITIES_LDPATH
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubDereferenceEngine
operator|.
name|SHARED_THREAD_POOL_STATE
argument_list|,
name|boolValue
operator|=
name|EntityhubDereferenceEngine
operator|.
name|DEFAULT_SHARED_THREAD_POOL_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubDereferenceEngine
operator|.
name|THREAD_POOL_SIZE
argument_list|,
name|intValue
operator|=
name|EntityhubDereferenceEngine
operator|.
name|DEFAULT_THREAD_POOL_SIZE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|EntityhubDereferenceEngine
implements|implements
name|ServiceTrackerCustomizer
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityhubDereferenceEngine
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|)
specifier|protected
name|NamespacePrefixService
name|prefixService
decl_stmt|;
comment|/**      * The id of the Entityhub Site (Referenced or Managed Site) used for matching.<p>      * To match against the Entityhub use "entityhub" as value.      */
specifier|public
specifier|static
specifier|final
name|String
name|SITE_ID
init|=
literal|"enhancer.engines.dereference.entityhub.siteId"
decl_stmt|;
comment|/**      * If a Entityhub dereferencer should use the shared thread pool      */
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_THREAD_POOL_STATE
init|=
literal|"enhancer.engines.dereference.entityhub.threads.shared"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SHARED_THREAD_POOL_STATE
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_POOL_SIZE
init|=
literal|"enhancer.engines.dereference.entityhub.threads.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_THREAD_POOL_SIZE
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|threadPoolSize
init|=
name|DEFAULT_THREAD_POOL_SIZE
decl_stmt|;
comment|/**      * The engine initialised based on the configuration of this component      */
specifier|protected
name|EntityDereferenceEngine
name|entityDereferenceEngine
decl_stmt|;
specifier|protected
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|engineMetadata
decl_stmt|;
comment|/**      * The service registration for the {@link #entityDereferenceEngine}      */
specifier|protected
name|ServiceRegistration
name|engineRegistration
decl_stmt|;
comment|/**      * The EntitySearcher used for the {@link #entityDereferenceEngine}      */
specifier|private
name|TrackingDereferencerBase
argument_list|<
name|?
argument_list|>
name|entityDereferencer
decl_stmt|;
name|int
name|trackedServiceCount
init|=
literal|0
decl_stmt|;
comment|/**      * The name of the reference site ('local' or 'entityhub') if the      * Entityhub is used for enhancing      */
specifier|protected
name|String
name|siteName
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
comment|/**      * Default constructor as used by OSGI. This expects that       * {@link #activate(ComponentContext)} is called before usage      */
specifier|public
name|EntityhubDereferenceEngine
parameter_list|()
block|{     }
annotation|@
name|Activate
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|bundleContext
operator|=
name|ctx
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> activate {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
comment|//get the metadata later set to the enhancement engine
name|DereferenceEngineConfig
name|engineConfig
init|=
operator|new
name|DereferenceEngineConfig
argument_list|(
name|properties
argument_list|,
name|prefixService
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" - engineName: {}"
argument_list|,
name|engineConfig
operator|.
name|getEngineName
argument_list|()
argument_list|)
expr_stmt|;
comment|//parse the Entityhub Site used for dereferencing
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|SITE_ID
argument_list|)
decl_stmt|;
comment|//init the EntitySource
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|siteName
operator|=
literal|"*"
expr_stmt|;
comment|//all referenced sites
block|}
else|else
block|{
name|siteName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|siteName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|siteName
operator|=
literal|"*"
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - siteName: {}"
argument_list|,
name|siteName
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|sharedPoolState
decl_stmt|;
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|SHARED_THREAD_POOL_STATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|sharedPoolState
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|sharedPoolState
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sharedPoolState
operator|=
name|DEFAULT_SHARED_THREAD_POOL_STATE
expr_stmt|;
block|}
specifier|final
name|ExecutorServiceProvider
name|esProvider
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" - shared thread pool state: {}"
argument_list|,
name|sharedPoolState
argument_list|)
expr_stmt|;
if|if
condition|(
name|sharedPoolState
condition|)
block|{
name|esProvider
operator|=
operator|new
name|SharedExecutorServiceProvider
argument_list|(
name|ctx
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we need to create our own ExecutorService
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|THREAD_POOL_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|this
operator|.
name|threadPoolSize
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|threadPoolSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|THREAD_POOL_SIZE
argument_list|,
literal|"Value '"
operator|+
name|value
operator|+
literal|"'(type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") can not be parsed "
operator|+
literal|"as Integer"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|threadPoolSize
operator|=
name|DEFAULT_THREAD_POOL_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|threadPoolSize
operator|>
literal|0
condition|)
block|{
name|String
name|namePattern
init|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|engineConfig
operator|.
name|getEngineName
argument_list|()
operator|+
literal|"-thread-%s"
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
name|namePattern
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" - create Threadpool(namePattern='{}' | size='{}')"
argument_list|,
name|namePattern
argument_list|,
name|threadPoolSize
argument_list|)
expr_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadPoolSize
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" - no thread pool configured (poolSize: {})"
argument_list|,
name|threadPoolSize
argument_list|)
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
name|esProvider
operator|=
operator|new
name|StaticExecutorServiceProvider
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
comment|//init the tracking entity searcher
name|trackedServiceCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|Entityhub
operator|.
name|ENTITYHUB_IDS
operator|.
name|contains
argument_list|(
name|siteName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  ... init Entityhub dereferencer"
argument_list|)
expr_stmt|;
name|entityDereferencer
operator|=
operator|new
name|EntityhubDereferencer
argument_list|(
name|bundleContext
argument_list|,
name|this
argument_list|,
name|esProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|siteName
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  ... init dereferencer for all referenced sites"
argument_list|)
expr_stmt|;
name|entityDereferencer
operator|=
operator|new
name|SitesDereferencer
argument_list|(
name|bundleContext
argument_list|,
name|this
argument_list|,
name|esProvider
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... init dereferencer for referenced site {}"
argument_list|,
name|siteName
argument_list|)
expr_stmt|;
name|entityDereferencer
operator|=
operator|new
name|SiteDereferencer
argument_list|(
name|bundleContext
argument_list|,
name|siteName
argument_list|,
name|this
argument_list|,
name|esProvider
argument_list|)
expr_stmt|;
block|}
comment|//set the namespace prefix service to the dereferencer
name|entityDereferencer
operator|.
name|setNsPrefixService
argument_list|(
name|prefixService
argument_list|)
expr_stmt|;
comment|//now parse dereference field config
name|entityDereferencer
operator|.
name|setDereferencedFields
argument_list|(
name|engineConfig
operator|.
name|getDereferenceFields
argument_list|()
argument_list|)
expr_stmt|;
name|entityDereferencer
operator|.
name|setLdPath
argument_list|(
name|engineConfig
operator|.
name|getLdPathProgram
argument_list|()
argument_list|)
expr_stmt|;
name|entityDereferenceEngine
operator|=
operator|new
name|EntityDereferenceEngine
argument_list|(
name|entityDereferencer
argument_list|,
name|engineConfig
argument_list|)
expr_stmt|;
comment|//NOTE: registration of this instance as OSGI service is done as soon as the
comment|//      entityhub service backing the entityDereferencer is available.
comment|//finally start tracking
name|entityDereferencer
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
comment|/**      * Deactivates this components.       */
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
comment|//* unregister service
name|ServiceRegistration
name|reg
init|=
name|engineRegistration
decl_stmt|;
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|engineRegistration
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
comment|//* reset engine
name|entityDereferenceEngine
operator|=
literal|null
expr_stmt|;
name|engineMetadata
operator|=
literal|null
expr_stmt|;
comment|//close the tracking EntitySearcher
name|entityDereferencer
operator|.
name|close
argument_list|()
expr_stmt|;
name|entityDereferencer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|BundleContext
name|bc
init|=
name|this
operator|.
name|bundleContext
decl_stmt|;
if|if
condition|(
name|bc
operator|!=
literal|null
condition|)
block|{
name|Object
name|service
init|=
name|bc
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trackedServiceCount
operator|==
literal|0
condition|)
block|{
comment|//register the service
name|engineRegistration
operator|=
name|bc
operator|.
name|registerService
argument_list|(
operator|new
name|String
index|[]
block|{
name|EnhancementEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ServiceProperties
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
name|entityDereferenceEngine
argument_list|,
name|entityDereferenceEngine
operator|.
name|getConfig
argument_list|()
operator|.
name|getDict
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|trackedServiceCount
operator|++
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|BundleContext
name|bc
init|=
name|this
operator|.
name|bundleContext
decl_stmt|;
if|if
condition|(
name|bc
operator|!=
literal|null
condition|)
block|{
name|trackedServiceCount
operator|--
expr_stmt|;
if|if
condition|(
name|trackedServiceCount
operator|==
literal|0
operator|&&
name|engineRegistration
operator|!=
literal|null
condition|)
block|{
name|engineRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|bc
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

