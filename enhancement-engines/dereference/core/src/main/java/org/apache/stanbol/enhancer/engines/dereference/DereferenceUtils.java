begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_FIELDS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|DereferenceUtils
block|{
comment|/**      * Parsed the {@link DereferenceConstants#DEREFERENCE_ENTITIES_FIELDS}      * config from the parsed Dictionary regardless if it is defined as       *<code>String[]</code>,<code>Collection&lt;String&gt;</code> or      *<code>String</code> (single value).<p>      * This returns the fields as parsed by the configuration.<p>      *<b>NOTE:</b> This does not check/convert<code>{prefix}:{localname}</code>      * configurations to URIs. The receiver of the list is responsible for      * that       * @param conf the configuration as parsed to the OSGI component      * @return the {@link List} with the unprocessed dereference fields       * @throws ConfigurationException if the value is not any of the supported      * types      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseDereferencedFieldsConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|DEREFERENCE_ENTITIES_FIELDS
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|fields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|field
operator|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|fields
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DEREFERENCE_ENTITIES_FIELDS
argument_list|,
literal|"Dereference Entities Fields MUST BE parsed as String[], Collection<String> or "
operator|+
literal|"String (single value). The actual value '"
operator|+
name|value
operator|+
literal|"'(type: '"
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|"') is NOT supported"
argument_list|)
throw|;
block|}
else|else
block|{
comment|//value == null
name|fields
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
end_class

begin_comment
comment|/**      * Parses the LdPath program from the value of the       * {@link DereferenceConstants#DEREFERENCE_ENTITIES_LDPATH} property.<p>      * This supports<code>String</code> (the program as a single String),       *<code>String[]</code> and<code>Collection&lt;String&gt;</code> (one      * statement per line).<p>      *<b>NOTE:</b> This does not parse the LDPath program as this can only be      * done by the LdPath repository used by the dereferencer.      * @param conf the configuration as parsed to the OSGI component      * @return the unparsed LDPath program as String       * @throws ConfigurationException if the value is not any of the supported      * types      */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|parseLdPathConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LDPATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|StringUtils
operator|.
name|isBlank
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|value
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
for|for
control|(
name|Object
name|line
operator|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|line
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|line
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_elseif
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
for|for
control|(
name|String
name|line
range|:
operator|(
name|String
index|[]
operator|)
name|value
control|)
block|{
if|if
condition|(
name|line
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|line
argument_list|)
condition|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_elseif

begin_else
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DEREFERENCE_ENTITIES_FIELDS
argument_list|,
literal|"Dereference LDPath statements MUST BE parsed as String, String[] or "
operator|+
literal|"Collection<String>. The actual value '"
operator|+
name|value
operator|+
literal|"'(type: '"
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|"') is NOT supported"
argument_list|)
throw|;
block|}
end_else

begin_comment
comment|//we we have not found non blank lines return null!
end_comment

begin_return
return|return
operator|!
name|first
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
end_return

unit|}      }
end_unit

