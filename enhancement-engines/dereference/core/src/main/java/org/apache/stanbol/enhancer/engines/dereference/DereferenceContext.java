begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_class
specifier|public
class|class
name|DereferenceContext
block|{
comment|/**      * The {@link OfflineMode} status      */
specifier|protected
specifier|final
name|boolean
name|offlineMode
decl_stmt|;
comment|/**       * Read-only set with languages that need to be dereferenced.      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|languages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Create a new DereferenceContext.      * @param offlineMode the {@link OfflineMode} state      */
specifier|protected
name|DereferenceContext
parameter_list|(
name|boolean
name|offlineMode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|offlineMode
expr_stmt|;
block|}
comment|/**      * If the {@link OfflineMode} is active      * @return the offline mode status      */
specifier|public
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
return|;
block|}
comment|/**      * Setter for the languages of literals that should be dereferenced      * @param languages the ContentLanguages      */
specifier|protected
name|void
name|setLanguages
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|languages
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the languages that should be dereferenced. If       * empty all languages should be included.      * @return the languages for literals that should be dereferenced.      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLanguages
parameter_list|()
block|{
return|return
name|languages
return|;
block|}
block|}
end_class

end_unit

