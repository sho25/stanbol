begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LANGUAGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
operator|.
name|DereferenceConstants
operator|.
name|NO_LANGUAGE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
operator|.
name|GetField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespaceMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DereferenceContext
block|{
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|INTERNAL_CONTENT_LANGUAGES
init|=
literal|"internal.dereference.contentlanguages"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|INTERNAL_ACCEPT_LANGUAGES
init|=
literal|"internal.dereference.acceptlanguages"
decl_stmt|;
specifier|protected
specifier|final
name|EntityDereferenceEngine
name|engine
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|enhancementProps
decl_stmt|;
comment|/**      * The {@link OfflineMode} status      */
specifier|private
name|boolean
name|offlineMode
decl_stmt|;
comment|/**       * Read-only set with literal languages defined in the context.      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|contextLanguages
decl_stmt|;
comment|/**      * Read-only set with literal languages to be dereferenced. This is the      * union over {@link #contextLanguages} and {@link #getConfig()}.      * {@link DereferenceEngineConfig#getLanaguages() getLanaguages()}      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
specifier|private
name|String
name|program
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|IRI
argument_list|>
name|entityReferences
decl_stmt|;
comment|/**      * Create a new DereferenceContext.      * @param offlineMode the {@link OfflineMode} state      * @param ep The enhancement properties      * @throws DereferenceConfigurationException if the parsed enhancement      * propertied contain an invalid configuration      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|DereferenceContext
parameter_list|(
name|EntityDereferenceEngine
name|engine
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ep
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
name|this
operator|.
name|enhancementProps
operator|=
name|ep
expr_stmt|;
name|parseLanguages
argument_list|(
name|ep
operator|==
literal|null
condition|?
literal|null
else|:
name|ep
operator|.
name|get
argument_list|(
name|DEREFERENCE_ENTITIES_LANGUAGES
argument_list|)
argument_list|,
name|ep
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ep
operator|.
name|get
argument_list|(
name|INTERNAL_CONTENT_LANGUAGES
argument_list|)
argument_list|,
name|ep
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ep
operator|.
name|get
argument_list|(
name|INTERNAL_ACCEPT_LANGUAGES
argument_list|)
argument_list|)
expr_stmt|;
name|parseFields
argument_list|(
name|ep
operator|==
literal|null
condition|?
literal|null
else|:
name|ep
operator|.
name|get
argument_list|(
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_FIELDS
argument_list|)
argument_list|)
expr_stmt|;
name|parseLDPath
argument_list|(
name|ep
operator|==
literal|null
condition|?
literal|null
else|:
name|ep
operator|.
name|get
argument_list|(
name|DereferenceConstants
operator|.
name|DEREFERENCE_ENTITIES_LDPATH
argument_list|)
argument_list|)
expr_stmt|;
name|parseEntityReferences
argument_list|(
name|ep
operator|==
literal|null
condition|?
literal|null
else|:
name|ep
operator|.
name|get
argument_list|(
name|DereferenceConstants
operator|.
name|ENTITY_REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
comment|//call the initialisation callback
name|initialise
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|parseEntityReferences
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|entityRefProps
decl_stmt|;
try|try
block|{
name|entityRefProps
operator|=
name|EnhancementEngineHelper
operator|.
name|parseConfigValues
argument_list|(
name|value
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DereferenceConfigurationException
argument_list|(
name|e
argument_list|,
name|engine
operator|.
name|getDereferencer
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|DereferenceConstants
operator|.
name|ENTITY_REFERENCES
argument_list|)
throw|;
block|}
comment|//start with the references present in the config
name|this
operator|.
name|entityReferences
operator|=
operator|new
name|HashSet
argument_list|<
name|IRI
argument_list|>
argument_list|(
name|getConfig
argument_list|()
operator|.
name|getEntityReferences
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entityRefProps
operator|!=
literal|null
operator|&&
operator|!
name|entityRefProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NamespacePrefixService
name|nps
init|=
name|engine
operator|.
name|getConfig
argument_list|()
operator|.
name|getNsPrefixService
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|entityRefProps
control|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|prop
argument_list|)
condition|)
block|{
try|try
block|{
name|entityReferences
operator|.
name|add
argument_list|(
operator|new
name|IRI
argument_list|(
name|NamespaceMappingUtils
operator|.
name|getConfiguredUri
argument_list|(
name|nps
argument_list|,
name|prop
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DereferenceConfigurationException
argument_list|(
name|e
argument_list|,
name|engine
operator|.
name|getDereferencer
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|DereferenceConstants
operator|.
name|ENTITY_REFERENCES
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Parses the {@link DereferenceConstants#DEREFERENCE_ENTITIES_LANGUAGES}      * from the parsed value, merges content- and accept-languages and finally       * calls {@link #initLiteralLanguages(Set)} with the resulting set      * @param value the value of the       * {@link DereferenceConstants#DEREFERENCE_ENTITIES_LANGUAGES} key      * @param the content languages or<code>null</code> if       * {@link DereferenceConstants#FILTER_CONTENT_LANGUAGES} is deactivated      * @param the accept languages or<code>null</code> if      * {@link DereferenceConstants#FILTER_ACCEPT_LANGUAGES} is deactivated      * @throws DereferenceConfigurationException if the parsed value is not a      * valid configuration      */
specifier|private
name|void
name|parseLanguages
parameter_list|(
name|Object
name|value
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|contentLanguages
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|acceptLanguages
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|languages
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|languages
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|lang
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
name|addLanguage
argument_list|(
name|languages
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
for|for
control|(
name|Object
name|lang
operator|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|lang
operator|instanceof
name|String
condition|)
block|{
name|addLanguage
argument_list|(
name|languages
argument_list|,
operator|(
name|String
operator|)
name|lang
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|languages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languages
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentLanguages
operator|!=
literal|null
operator|&&
operator|!
name|contentLanguages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|languages
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|languages
operator|.
name|addAll
argument_list|(
name|contentLanguages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acceptLanguages
operator|!=
literal|null
operator|&&
operator|!
name|acceptLanguages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|languages
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|languages
operator|.
name|addAll
argument_list|(
name|acceptLanguages
argument_list|)
expr_stmt|;
block|}
comment|//set the contextLanguages field
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|contextLanguages
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|contextLanguages
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|languages
argument_list|)
expr_stmt|;
block|}
comment|//merge the languages with those of the config and set the languages field
name|Set
argument_list|<
name|String
argument_list|>
name|merged
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|configLangs
init|=
name|getConfig
argument_list|()
operator|.
name|getLanaguages
argument_list|()
decl_stmt|;
if|if
condition|(
name|languages
operator|==
literal|null
operator|&&
name|configLangs
operator|==
literal|null
condition|)
block|{
name|merged
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configLangs
operator|==
literal|null
condition|)
block|{
name|merged
operator|=
name|languages
expr_stmt|;
block|}
else|else
block|{
name|merged
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|configLangs
argument_list|)
expr_stmt|;
if|if
condition|(
name|languages
operator|!=
literal|null
condition|)
block|{
name|merged
operator|.
name|addAll
argument_list|(
name|languages
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|languages
operator|=
name|merged
expr_stmt|;
block|}
end_class

begin_comment
comment|/**      * Parsed the language from the language string and adds it to the languages      * set. This will convert languages to lower case and also converts empty      * values as well as the {@link DereferenceConstants#NO_LANGUAGE_KEY} to       *<code>null</code> (indicating labels without any language)       * @param languages      * @param lang      */
end_comment

begin_function
specifier|private
name|void
name|addLanguage
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|lang
argument_list|)
operator|||
name|NO_LANGUAGE_KEY
operator|.
name|equalsIgnoreCase
argument_list|(
name|lang
argument_list|)
condition|)
block|{
name|languages
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|languages
operator|.
name|add
argument_list|(
name|lang
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Parsed the {@link DereferenceConstants#DEREFERENCE_ENTITIES_FIELDS}      * from the parsed value and calls {@link #initDereferencedFields(List)} with       * the parsed value      * @param value the value      * @throws DereferenceConfigurationException if the parsed value is not a      * valid configuration      */
end_comment

begin_function
specifier|private
name|void
name|parseFields
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
condition|)
block|{
name|fields
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|field
operator|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
name|field
operator|instanceof
name|String
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
operator|(
name|String
operator|)
name|field
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
comment|// else ignore
block|}
block|}
end_function

begin_else
else|else
block|{
name|fields
operator|=
literal|null
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**      * Parsed the {@link DereferenceConstants#DEREFERENCE_ENTITIES_LDPATH}      * from the parsed value and calls {@link #initLdPathProgram(String)} with       * the parsed value      * @param value the value      * @throws DereferenceConfigurationException if the parsed value is not a      * valid configuration      */
end_comment

begin_function
unit|private
name|void
name|parseLDPath
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|DereferenceConfigurationException
block|{
name|String
name|program
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
condition|)
block|{
name|program
operator|=
operator|(
name|String
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|field
operator|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
name|field
operator|instanceof
name|String
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
operator|(
name|String
operator|)
name|field
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|// else ignore
block|}
name|program
operator|=
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
end_function

begin_else
else|else
block|{
name|program
operator|=
literal|null
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**      * Allows to set the offline mode state      */
end_comment

begin_function
unit|protected
specifier|final
name|void
name|setOfflineMode
parameter_list|(
name|boolean
name|state
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|state
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * If the {@link OfflineMode} is active. If active Dereferencers are not      * allowed access remote resources for dereferencing Entities.      * @return the offline mode status      */
end_comment

begin_function
specifier|public
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
return|;
block|}
end_function

begin_comment
comment|/**      * Context specific DerefernecedField configuration      * @return the context specific DereferencedField configuration or      *<code>null</code> if none      */
end_comment

begin_function
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
end_function

begin_comment
comment|/**      * Initialisation callback for the DereferenceContext. This is called by      * the constructor after the {@link #enhancementProps} are set and      * {@link #getLanguages()}, {@link #getFields()} and       * {@link #getLdPathProgram()} are initialised.<p>      * The default implementation is empty.      */
end_comment

begin_function
specifier|protected
name|void
name|initialise
parameter_list|()
block|{              }
end_function

begin_comment
comment|/**      * Context specific LDPath program      * @return the context specific LDPath program or<code>null</code> if none      */
end_comment

begin_function
specifier|public
specifier|final
name|String
name|getLdPathProgram
parameter_list|()
block|{
return|return
name|program
return|;
block|}
end_function

begin_comment
comment|/**      * The property URIs that may refer to Entities that need to be dereferenced.      * This is the union view over properties parsed as EnhancementProperties      * with properties configured with the engine      * @return the entity reference properties      * @see DereferenceEngineConfig#getEntityReferences()      */
end_comment

begin_function
specifier|public
name|HashSet
argument_list|<
name|IRI
argument_list|>
name|getEntityReferences
parameter_list|()
block|{
return|return
name|entityReferences
return|;
block|}
end_function

begin_comment
comment|/**      * Getter for the languages that should be dereferenced. If       * empty all languages should be included. This is the union over      * Languages enabled in the context and       * {@link #getConfig()}.{@link DereferenceEngineConfig#getLanaguages()      * getLanaguages()}      * @return the languages for literals that should be dereferenced.      */
end_comment

begin_function
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|getLanguages
parameter_list|()
block|{
return|return
name|languages
return|;
block|}
end_function

begin_comment
comment|/**      * Set of languages enabled via the context. This does not include languages      * enabled in the {@link DereferenceEngineConfig}      * @return the set of languages enabled via the context.       */
end_comment

begin_function
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|getContextLanguages
parameter_list|()
block|{
return|return
name|contextLanguages
return|;
block|}
end_function

begin_comment
comment|/**      * Getter for the Enhancement Properties for this Context.      * @return the Enhancement Properties      */
end_comment

begin_function
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getEnhancementProps
parameter_list|()
block|{
return|return
name|enhancementProps
return|;
block|}
end_function

begin_comment
comment|/**      * Getter for the Dereference Engine Configuration      * @return the dereference configuration      */
end_comment

begin_function
specifier|public
specifier|final
name|DereferenceEngineConfig
name|getConfig
parameter_list|()
block|{
return|return
name|engine
operator|.
name|getConfig
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * The EntityDereferencer this context is built for      * @return the entity dereferencer      */
end_comment

begin_function
specifier|public
specifier|final
name|EntityDereferencer
name|getDereferencer
parameter_list|()
block|{
return|return
name|engine
operator|.
name|getDereferencer
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

