begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
package|;
end_package

begin_comment
comment|/**  * Exception thrown if the parsed dereference configuration is not valid.  * Messages should indicate the {@link DereferenceContext} field as well as  * the Dereferencer implementation  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|DereferenceConfigurationException
extends|extends
name|IllegalArgumentException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1431844013656980310L
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|EntityDereferencer
argument_list|>
name|dereferencer
decl_stmt|;
specifier|private
specifier|final
name|String
name|property
decl_stmt|;
specifier|public
name|DereferenceConfigurationException
parameter_list|(
name|String
name|reason
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|EntityDereferencer
argument_list|>
name|dereferencer
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|this
argument_list|(
name|reason
argument_list|,
literal|null
argument_list|,
name|dereferencer
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DereferenceConfigurationException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|EntityDereferencer
argument_list|>
name|dereferencer
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|cause
argument_list|,
name|dereferencer
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DereferenceConfigurationException
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|EntityDereferencer
argument_list|>
name|dereferencer
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"IllegalConfiguration for "
argument_list|)
operator|.
name|append
argument_list|(
name|dereferencer
operator|==
literal|null
condition|?
literal|"Dereferencer<unkown>"
else|:
name|dereferencer
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" and property '"
argument_list|)
operator|.
name|append
argument_list|(
name|property
operator|==
literal|null
condition|?
literal|"<unknwon>"
else|:
name|property
argument_list|)
operator|.
name|append
argument_list|(
literal|"': "
argument_list|)
operator|.
name|append
argument_list|(
name|reason
operator|!=
literal|null
condition|?
name|reason
else|:
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|dereferencer
operator|=
name|dereferencer
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|EntityDereferencer
argument_list|>
name|getDereferencer
parameter_list|()
block|{
return|return
name|dereferencer
return|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
block|}
end_class

end_unit

