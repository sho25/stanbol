begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dereference
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
operator|.
name|SKOS_CONCEPT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDFS_LABEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO: convert this to an integration test!  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|DereferenceEngineTest
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DereferenceEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//TODO: test implementations of EntityDereferencer
specifier|static
name|EntityDereferencer
name|asyncDereferencer
init|=
operator|new
name|TestDereferencer
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
name|EntityDereferencer
name|syncDereferencer
init|=
operator|new
name|TestDereferencer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|/**      * The metadata used by this test      */
specifier|private
specifier|static
name|TripleCollection
name|testData
decl_stmt|;
specifier|private
specifier|static
name|TripleCollection
name|testMetadata
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|NAME
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|TYPE
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|REDIRECT
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"seeAlso"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ContentItemFactory
name|ciFactory
init|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|SKOS_NOTATION
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"notation"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Language
name|LANG_EN
init|=
operator|new
name|Language
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Language
name|LANG_DE
init|=
operator|new
name|Language
argument_list|(
literal|"de"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ENTITIES
init|=
literal|1000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|PERCENTAGE_LINKED
init|=
literal|0.3f
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|PERCENTAGE_PRESENT
init|=
literal|0.9f
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
block|{
name|testData
operator|=
operator|new
name|IndexedMGraph
argument_list|()
expr_stmt|;
name|long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test seed "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|int
name|numEntities
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ENTITIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|<=
name|PERCENTAGE_PRESENT
condition|)
block|{
comment|//do not create all entities
name|UriRef
name|uri
init|=
operator|new
name|UriRef
argument_list|(
literal|"urn:test:entity"
operator|+
name|i
argument_list|)
decl_stmt|;
name|testData
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|uri
argument_list|,
name|RDF_TYPE
argument_list|,
name|SKOS_CONCEPT
argument_list|)
argument_list|)
expr_stmt|;
name|testData
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|uri
argument_list|,
name|RDFS_LABEL
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"entity "
operator|+
name|i
argument_list|,
name|LANG_EN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|testData
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|uri
argument_list|,
name|RDFS_LABEL
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"Entity "
operator|+
name|i
argument_list|,
name|LANG_DE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|testData
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|uri
argument_list|,
name|SKOS_NOTATION
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numEntities
operator|++
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|" ... created {} Entities"
argument_list|,
name|numEntities
argument_list|)
expr_stmt|;
name|testMetadata
operator|=
operator|new
name|IndexedMGraph
argument_list|()
expr_stmt|;
name|int
name|numLinks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ENTITIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|<
name|PERCENTAGE_LINKED
condition|)
block|{
name|UriRef
name|enhancementUri
init|=
operator|new
name|UriRef
argument_list|(
literal|"urn:test:enhancement"
operator|+
name|i
argument_list|)
decl_stmt|;
name|UriRef
name|entityUri
init|=
operator|new
name|UriRef
argument_list|(
literal|"urn:test:entity"
operator|+
name|i
argument_list|)
decl_stmt|;
comment|//we do not need any other triple for testing in the contentItem
name|testMetadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|enhancementUri
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
name|entityUri
argument_list|)
argument_list|)
expr_stmt|;
name|numLinks
operator|++
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|" ... created {} Entity references "
argument_list|,
name|numLinks
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ContentItem
name|getContentItem
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|UriRef
argument_list|(
name|id
argument_list|)
argument_list|,
operator|new
name|StringSource
argument_list|(
literal|"Not used"
argument_list|)
argument_list|)
decl_stmt|;
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|addAll
argument_list|(
name|testMetadata
argument_list|)
expr_stmt|;
return|return
name|ci
return|;
block|}
comment|/**      * Test {@link OfflineMode} functionality      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testOfflineMode
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentItem
name|ci
init|=
name|getContentItem
argument_list|(
literal|"urn:test:testOfflineMode"
argument_list|)
decl_stmt|;
name|EntityDereferencer
name|onlineDereferencer
init|=
operator|new
name|TestDereferencer
argument_list|(
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|supportsOfflineMode
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|EntityDereferenceEngine
name|engine
init|=
operator|new
name|EntityDereferenceEngine
argument_list|(
literal|"online"
argument_list|,
name|onlineDereferencer
argument_list|)
decl_stmt|;
comment|//engine in online mode
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
argument_list|,
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
comment|//set engine in offline mode
name|engine
operator|.
name|setOfflineMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
argument_list|,
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncDereferencing
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentItem
name|ci
init|=
name|getContentItem
argument_list|(
literal|"urn:test:testSyncDereferencing"
argument_list|)
decl_stmt|;
name|EntityDereferenceEngine
name|engine
init|=
operator|new
name|EntityDereferenceEngine
argument_list|(
literal|"sync"
argument_list|,
name|syncDereferencer
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
argument_list|,
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|validateDereferencedEntities
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncDereferencing
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentItem
name|ci
init|=
name|getContentItem
argument_list|(
literal|"urn:test:testSyncDereferencing"
argument_list|)
decl_stmt|;
name|EntityDereferenceEngine
name|engine
init|=
operator|new
name|EntityDereferenceEngine
argument_list|(
literal|"sync"
argument_list|,
name|asyncDereferencer
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
argument_list|,
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|validateDereferencedEntities
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDereferencedEntities
parameter_list|(
name|TripleCollection
name|metadata
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|referenced
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MGraph
name|expected
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
while|while
condition|(
name|referenced
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|entity
init|=
operator|(
name|UriRef
operator|)
name|referenced
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entityTriples
init|=
name|testData
operator|.
name|filter
argument_list|(
name|entity
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|entityTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|entityTriples
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|MGraph
name|notExpected
init|=
operator|new
name|IndexedMGraph
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|notExpected
operator|.
name|removeAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metadata
operator|.
name|containsAll
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Collections
operator|.
name|disjoint
argument_list|(
name|metadata
argument_list|,
name|notExpected
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestDereferencer
implements|implements
name|EntityDereferencer
block|{
specifier|private
specifier|final
name|ExecutorService
name|executorService
decl_stmt|;
specifier|public
name|TestDereferencer
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsOfflineMode
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecutorService
name|getExecutor
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dereference
parameter_list|(
name|UriRef
name|entity
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|boolean
name|offlineMode
parameter_list|,
name|Lock
name|writeLock
parameter_list|)
throws|throws
name|DereferenceException
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entityTriples
init|=
name|testData
operator|.
name|filter
argument_list|(
name|entity
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
do|do
block|{
name|graph
operator|.
name|add
argument_list|(
name|entityTriples
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|entityTriples
operator|.
name|hasNext
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

