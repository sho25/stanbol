begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Container data transfer object to fetch partial results over a query results one batch at a time.  *   * @param<T>  *            the type of the items to batch over.  */
end_comment

begin_class
specifier|public
class|class
name|Batch
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * Boolean marker set by the backend to tell the caller that it can expect new items by issuing the same      * query by passing the companion offset marker.      */
specifier|public
specifier|final
name|boolean
name|hasMore
decl_stmt|;
comment|/**      * Marker value that the caller can pass to the dataset to fetch the next batch and perform efficient      * server side batching.      *       * This value should refer to an indexed field with unique values such as a primary key or a random uuid      * (good for shuffling the example in arbitrary order). The samples return in the batches should be sorted      * according to this field so that the server can perform efficient range queries that are guaranteed to      * return no duplicate results across batches.      */
specifier|public
specifier|final
name|Object
name|nextOffset
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|items
decl_stmt|;
specifier|public
name|Batch
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|items
parameter_list|,
name|boolean
name|hasMore
parameter_list|,
name|Object
name|nextOffset
parameter_list|)
block|{
name|this
operator|.
name|items
operator|=
name|items
expr_stmt|;
name|this
operator|.
name|hasMore
operator|=
name|hasMore
expr_stmt|;
name|this
operator|.
name|nextOffset
operator|=
name|nextOffset
expr_stmt|;
block|}
comment|/**      * Helper method to return a first empty batch to bootstrap an iteration loop.      */
specifier|public
specifier|static
parameter_list|<
name|T2
parameter_list|>
name|Batch
argument_list|<
name|T2
argument_list|>
name|emtpyBatch
parameter_list|(
name|Class
argument_list|<
name|T2
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|Batch
argument_list|<
name|T2
argument_list|>
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|T2
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

