begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|web
operator|.
name|topic
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ClassifierException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|TopicClassifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
operator|.
name|TrainingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
operator|.
name|TrainingSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_comment
comment|/**  * RESTful interface for classification models: register concept hierarchies,  * introspect model state and trigger training if a training set is provided.  *  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Object
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/topic/model"
argument_list|)
specifier|public
specifier|final
class|class
name|TopicModelResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|bundleContext
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Path
argument_list|(
literal|"{classifier}"
argument_list|)
specifier|public
name|ClassifierResource
name|getClassifier
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"classifier"
argument_list|)
name|String
name|classifierName
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|this
operator|.
name|uriInfo
operator|=
name|uriInfo
expr_stmt|;
name|ServiceReference
index|[]
name|references
init|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|TopicClassifier
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|classifierName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|==
literal|null
operator|||
name|references
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
return|return
operator|new
name|ClassifierResource
argument_list|(
operator|(
name|TopicClassifier
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|references
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
class|class
name|ClassifierResource
extends|extends
name|ResultData
block|{
specifier|final
name|TopicClassifier
name|classifier
decl_stmt|;
specifier|public
name|ClassifierResource
parameter_list|(
name|TopicClassifier
name|classifier
parameter_list|)
block|{
name|this
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
block|}
specifier|public
name|TopicClassifier
name|getClassifier
parameter_list|()
block|{
return|return
name|classifier
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|// TODO: make it possible to fetch concept descriptions (with broader and narrower links) using the GET
comment|// verb
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"concept"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|addConcept
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|concept
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"primary_topic"
argument_list|)
name|String
name|primaryTopicUri
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"broader"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|broaderConcepts
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|classifier
operator|.
name|addConcept
argument_list|(
name|concept
argument_list|,
name|primaryTopicUri
argument_list|,
name|broaderConcepts
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"concept"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|remoteConcept
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|concept
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|ClassifierException
block|{
if|if
condition|(
name|concept
operator|!=
literal|null
operator|&&
operator|!
name|concept
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|classifier
operator|.
name|removeConcept
argument_list|(
name|concept
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classifier
operator|.
name|removeAllConcepts
argument_list|()
expr_stmt|;
block|}
comment|// TODO: count the number of deleted entries and return is a text entity
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"performance"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightOnPerformance
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
comment|// TODO: make it possible to fetch performance reports and evaluation running state using the GET verb
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"performance"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|updatePerformance
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"incremental"
argument_list|)
name|Boolean
name|incremental
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|TrainingSetException
throws|,
name|ClassifierException
block|{
if|if
condition|(
name|incremental
operator|==
literal|null
condition|)
block|{
name|incremental
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
name|int
name|updated
init|=
name|classifier
operator|.
name|updatePerformanceEstimates
argument_list|(
name|incremental
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully updated the performance estimates of %d concept(s).\n"
argument_list|,
name|updated
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|// TODO: make it possible to fetch training set statistics and training state using the GET verb
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"trainer"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|updateModel
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"incremental"
argument_list|)
name|Boolean
name|incremental
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|TrainingSetException
throws|,
name|ClassifierException
block|{
if|if
condition|(
name|incremental
operator|==
literal|null
condition|)
block|{
name|incremental
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
name|int
name|updated
init|=
name|classifier
operator|.
name|updateModel
argument_list|(
name|incremental
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully updated the statistical model(s) of %d concept(s).\n"
argument_list|,
name|updated
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|// TODO: make it possible browse the training set content on the GET verb using a subresource
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"trainingset"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|registerExample
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"example_id"
argument_list|)
name|String
name|exampleId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"concept"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|concepts
parameter_list|,
name|String
name|textContent
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|TrainingSetException
throws|,
name|ClassifierException
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
operator|!
name|classifier
operator|.
name|isUpdatable
argument_list|()
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Classifier %s is not updateble.\n"
argument_list|,
name|classifier
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TrainingSet
name|trainingSet
init|=
name|classifier
operator|.
name|getTrainingSet
argument_list|()
decl_stmt|;
name|exampleId
operator|=
name|trainingSet
operator|.
name|registerExample
argument_list|(
name|exampleId
argument_list|,
name|textContent
argument_list|,
name|concepts
argument_list|)
expr_stmt|;
comment|// TODO: make example GETable resources and return a 201 to it instead of a simple message.
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully added or updated example '%s' in training set '%s'.\n"
argument_list|,
name|exampleId
argument_list|,
name|trainingSet
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|// TODO make the following a DELETE method on the example sub-resources them-selves once we have a GET for
comment|// them
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"trainingset"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|removeExample
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"example_id"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|exampleIds
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|TrainingSetException
throws|,
name|ClassifierException
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
operator|!
name|classifier
operator|.
name|isUpdatable
argument_list|()
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Classifier %s is not updateble.\n"
argument_list|,
name|classifier
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TrainingSet
name|trainingSet
init|=
name|classifier
operator|.
name|getTrainingSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|exampleIds
operator|!=
literal|null
operator|&&
operator|!
name|exampleIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|exampleId
range|:
name|exampleIds
control|)
block|{
name|trainingSet
operator|.
name|registerExample
argument_list|(
name|exampleId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// implement a way to cleanup a complete training set? or is it too dangerous and we should
comment|// return an error instead?
block|}
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully deleted examples in training set '%s'.\n"
argument_list|,
name|trainingSet
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**          * Simple RDF / SKOS importer that loads the complete model in memory          * for easy parsing and then does graph introspection to find the          * concepts to load into the model.          *          * If a scalable implementation is required, one should probably use a          * transient triple store and pass it the raw RDF stream instead of          * using the naive GraphReader JAX-RS provider.          */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|importConceptsFromRDF
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"concept_class"
argument_list|)
name|String
name|conceptClassUri
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"broader_property"
argument_list|)
name|String
name|broaderPropertyUri
parameter_list|,
name|Graph
name|graph
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|ClassifierException
block|{
name|UriRef
name|conceptClass
init|=
name|OntologicalClasses
operator|.
name|SKOS_CONCEPT
decl_stmt|;
name|UriRef
name|broaderProperty
init|=
name|Properties
operator|.
name|SKOS_BROADER
decl_stmt|;
if|if
condition|(
name|conceptClassUri
operator|!=
literal|null
operator|&&
operator|!
name|conceptClassUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conceptClass
operator|=
operator|new
name|UriRef
argument_list|(
name|conceptClassUri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|broaderPropertyUri
operator|!=
literal|null
operator|&&
operator|!
name|broaderPropertyUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|broaderProperty
operator|=
operator|new
name|UriRef
argument_list|(
name|broaderPropertyUri
argument_list|)
expr_stmt|;
block|}
name|int
name|imported
init|=
name|classifier
operator|.
name|importConceptsFromGraph
argument_list|(
name|graph
argument_list|,
name|conceptClass
argument_list|,
name|broaderProperty
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|imported
operator|==
literal|0
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not find any instances of '%s' in payload.\n"
argument_list|,
name|conceptClass
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Imported %d instance of '%s'.\n"
argument_list|,
name|imported
argument_list|,
name|conceptClass
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

