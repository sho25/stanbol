begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|training
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|ClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|ConfiguredSolrCoreTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|UTCTimeStamper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|api
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|api
operator|.
name|training
operator|.
name|Example
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|api
operator|.
name|training
operator|.
name|TrainingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
operator|.
name|api
operator|.
name|training
operator|.
name|TrainingSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@code TrainingSet} interface that uses a Solr Core as backend to store and retrieve  * the text examples used to train a classifier.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SolrTrainingSet
operator|.
name|TRAINING_SET_NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SolrTrainingSet
operator|.
name|SOLR_CORE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SolrTrainingSet
operator|.
name|SOLR_CORE_CONFIG
argument_list|,
name|value
operator|=
name|SolrTrainingSet
operator|.
name|DEFAULT_SOLR_CORE_CONFIG
argument_list|)
comment|//        @Property(name = SolrTrainingSet.EXAMPLE_ID_FIELD, value = SolrTrainingSet.DEFAULT_EXAMPLE_ID_FIELD),
comment|//        @Property(name = SolrTrainingSet.EXAMPLE_TEXT_FIELD, value = SolrTrainingSet.DEFAULT_EXAMPLE_TEXT_FIELD),
comment|//        @Property(name = SolrTrainingSet.TOPICS_URI_FIELD, value = SolrTrainingSet.DEFAULT_TOPICS_URI_FIELD),
comment|//        @Property(name = SolrTrainingSet.MODIFICATION_DATE_FIELD, value = SolrTrainingSet.DEFAULT_MODIFICATION_DATE_FIELD)
block|}
argument_list|)
specifier|public
class|class
name|SolrTrainingSet
extends|extends
name|ConfiguredSolrCoreTracker
implements|implements
name|TrainingSet
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TRAINING_SET_NAME
init|=
literal|"org.apache.stanbol.enhancer.topic.trainingset.id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_CORE
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.solrCore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_CORE_CONFIG
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.solrCoreConfig"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SOLR_CORE_CONFIG
init|=
literal|"default-topic-trainingset.solrindex.zip"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOPICS_URI_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.topicsUriField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TOPICS_URI_FIELD
init|=
literal|"topics"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXAMPLE_ID_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.exampleIdField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_EXAMPLE_ID_FIELD
init|=
literal|"id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXAMPLE_TEXT_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.exampleTextField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_EXAMPLE_TEXT_FIELD
init|=
literal|"text"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODIFICATION_DATE_FIELD
init|=
literal|"org.apache.stanbol.enhancer.engine.topic.modificiationDateField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MODIFICATION_DATE_FIELD
init|=
literal|"modification_dt"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrTrainingSet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|trainingSetId
decl_stmt|;
specifier|protected
name|String
name|exampleIdField
decl_stmt|;
specifier|protected
name|String
name|exampleTextField
decl_stmt|;
specifier|protected
name|String
name|topicUrisField
decl_stmt|;
specifier|protected
name|String
name|modificationDateField
decl_stmt|;
comment|// TODO: make me configurable using an OSGi property
specifier|protected
name|int
name|batchSize
init|=
literal|100
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|bind
operator|=
literal|"bindManagedSolrServer"
argument_list|,
name|unbind
operator|=
literal|"unbindManagedSolrServer"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|)
specifier|protected
name|ManagedSolrServer
name|managedSolrServer
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|trainingSetId
return|;
block|}
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|InvalidSyntaxException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|configure
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|indexTracker
operator|!=
literal|null
condition|)
block|{
name|indexTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|trainingSetId
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|TRAINING_SET_NAME
argument_list|)
expr_stmt|;
name|exampleIdField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|EXAMPLE_ID_FIELD
argument_list|,
name|DEFAULT_EXAMPLE_ID_FIELD
argument_list|)
expr_stmt|;
name|exampleTextField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|EXAMPLE_TEXT_FIELD
argument_list|,
name|DEFAULT_EXAMPLE_TEXT_FIELD
argument_list|)
expr_stmt|;
name|topicUrisField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|TOPICS_URI_FIELD
argument_list|,
name|DEFAULT_TOPICS_URI_FIELD
argument_list|)
expr_stmt|;
name|modificationDateField
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|MODIFICATION_DATE_FIELD
argument_list|,
name|DEFAULT_MODIFICATION_DATE_FIELD
argument_list|)
expr_stmt|;
name|configureSolrCore
argument_list|(
name|config
argument_list|,
name|SOLR_CORE
argument_list|,
name|trainingSetId
argument_list|,
name|SOLR_CORE_CONFIG
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ConfiguredSolrCoreTracker
name|fromParameters
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|ConfiguredSolrCoreTracker
name|engine
init|=
operator|new
name|SolrTrainingSet
argument_list|()
decl_stmt|;
name|engine
operator|.
name|configure
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUpdatable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|registerExample
parameter_list|(
name|String
name|exampleId
parameter_list|,
name|String
name|text
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|)
throws|throws
name|TrainingSetException
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
comment|// special case: example removal
if|if
condition|(
name|exampleId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"exampleId and text should not be null simultaneously"
argument_list|)
throw|;
block|}
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|solrServer
operator|.
name|deleteByQuery
argument_list|(
name|exampleIdField
operator|+
literal|":"
operator|+
name|exampleId
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|exampleId
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error deleting example with id '%s' on Solr Core '%s'"
argument_list|,
name|exampleId
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|TrainingSetException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|exampleId
operator|==
literal|null
operator|||
name|exampleId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exampleId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|exampleIdField
argument_list|,
name|exampleId
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|exampleTextField
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|topics
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|topicUrisField
argument_list|,
name|topics
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|addField
argument_list|(
name|modificationDateField
argument_list|,
name|UTCTimeStamper
operator|.
name|nowUtcDate
argument_list|()
argument_list|)
expr_stmt|;
name|SolrServer
name|server
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
try|try
block|{
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Could not register example '%s' with topics: ['%s']"
argument_list|,
name|exampleId
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|topics
argument_list|,
literal|"', '"
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|TrainingSetException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|exampleId
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChangedSince
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|,
name|Date
name|referenceDate
parameter_list|)
throws|throws
name|TrainingSetException
block|{
name|String
name|utcIsoDate
init|=
name|UTCTimeStamper
operator|.
name|utcIsoString
argument_list|(
name|referenceDate
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|modificationDateField
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|utcIsoDate
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" TO *]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|topics
operator|!=
literal|null
operator|&&
name|topics
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" AND ("
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|topic
range|:
name|topics
control|)
block|{
comment|// use a nested query to avoid string escaping issues with special solr chars
name|parts
operator|.
name|add
argument_list|(
name|topicUrisField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|topic
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|parts
argument_list|,
literal|" OR "
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
name|exampleIdField
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
return|return
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching topics for examples modified after '%s' on Solr Core '%s'."
argument_list|,
name|utcIsoDate
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|TrainingSetException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Batch
argument_list|<
name|Example
argument_list|>
name|getPositiveExamples
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|,
name|Object
name|offset
parameter_list|)
throws|throws
name|TrainingSetException
block|{
return|return
name|getExamples
argument_list|(
name|topics
argument_list|,
name|offset
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Batch
argument_list|<
name|Example
argument_list|>
name|getNegativeExamples
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|,
name|Object
name|offset
parameter_list|)
throws|throws
name|TrainingSetException
block|{
return|return
name|getExamples
argument_list|(
name|topics
argument_list|,
name|offset
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|Batch
argument_list|<
name|Example
argument_list|>
name|getExamples
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|,
name|Object
name|offset
parameter_list|,
name|boolean
name|positive
parameter_list|)
throws|throws
name|TrainingSetException
block|{
name|List
argument_list|<
name|Example
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|Example
argument_list|>
argument_list|()
decl_stmt|;
name|SolrServer
name|solrServer
init|=
name|getActiveSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|q
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|topics
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|q
operator|+=
literal|"*:*"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|positive
condition|)
block|{
for|for
control|(
name|String
name|topic
range|:
name|topics
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|topicUrisField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|topic
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|"("
expr_stmt|;
block|}
name|q
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|parts
argument_list|,
literal|" OR "
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|")"
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|topic
range|:
name|topics
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|topicUrisField
operator|+
literal|":"
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|topic
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|q
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|parts
argument_list|,
literal|" AND "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|q
operator|+=
literal|" AND "
operator|+
name|exampleIdField
operator|+
literal|":["
operator|+
name|offset
operator|.
name|toString
argument_list|()
operator|+
literal|" TO *]"
expr_stmt|;
block|}
name|query
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|query
operator|.
name|addSortField
argument_list|(
name|exampleIdField
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"rows"
argument_list|,
name|batchSize
operator|+
literal|1
argument_list|)
expr_stmt|;
name|String
name|nextExampleId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QueryResponse
name|response
init|=
name|solrServer
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrDocument
name|result
range|:
name|response
operator|.
name|getResults
argument_list|()
control|)
block|{
if|if
condition|(
name|count
operator|==
name|batchSize
condition|)
block|{
name|nextExampleId
operator|=
name|result
operator|.
name|getFirstValue
argument_list|(
name|exampleIdField
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|count
operator|++
expr_stmt|;
name|String
name|exampleId
init|=
name|result
operator|.
name|getFirstValue
argument_list|(
name|exampleIdField
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|labelValues
init|=
name|result
operator|.
name|getFieldValues
argument_list|(
name|topicUrisField
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|textValues
init|=
name|result
operator|.
name|getFieldValues
argument_list|(
name|exampleTextField
argument_list|)
decl_stmt|;
if|if
condition|(
name|textValues
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|items
operator|.
name|add
argument_list|(
operator|new
name|Example
argument_list|(
name|exampleId
argument_list|,
name|labelValues
argument_list|,
name|textValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error while fetching positive examples for topics ['%s'] on Solr Core '%s'."
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|topics
argument_list|,
literal|"', '"
argument_list|)
argument_list|,
name|solrCoreId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|TrainingSetException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Batch
argument_list|<
name|Example
argument_list|>
argument_list|(
name|items
argument_list|,
name|nextExampleId
operator|!=
literal|null
argument_list|,
name|nextExampleId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBatchSize
parameter_list|(
name|int
name|batchSize
parameter_list|)
block|{
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|optimize
parameter_list|()
throws|throws
name|TrainingSetException
block|{
try|try
block|{
name|getActiveSolrServer
argument_list|()
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TrainingSetException
argument_list|(
literal|"Error optimizing training dataset "
operator|+
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

