begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|topic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|RegisteredSolrServerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|IndexMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedIndexState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|topic
operator|.
name|TopicClassificationEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Helper class to factorize some common code for Solr Core tracking OSGi component  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ConfiguredSolrCoreTracker
block|{
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|ManagedSolrServer
name|managedSolrServer
decl_stmt|;
specifier|protected
name|String
name|solrCoreId
decl_stmt|;
specifier|protected
name|RegisteredSolrServerTracker
name|indexTracker
decl_stmt|;
comment|// instance of classifierSolrServer to use if not using the OSGi service tracker (e.g. for tests)
specifier|protected
name|SolrServer
name|solrServer
decl_stmt|;
specifier|protected
name|ComponentContext
name|context
decl_stmt|;
specifier|protected
name|String
name|solrCoreConfig
decl_stmt|;
comment|//protected String indexArchiveName;
specifier|abstract
specifier|public
name|void
name|configure
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
function_decl|;
specifier|protected
name|String
name|getRequiredStringParam
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|String
name|paramName
parameter_list|)
throws|throws
name|ConfigurationException
block|{
return|return
name|getRequiredStringParam
argument_list|(
name|parameters
argument_list|,
name|paramName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getRequiredStringParam
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|String
name|paramName
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|paramValue
init|=
name|config
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|paramName
argument_list|,
name|paramName
operator|+
literal|" is a required parameter."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
return|return
name|paramValue
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getStringListParan
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|String
name|paramName
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|paramValue
init|=
name|config
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValue
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|paramValue
operator|instanceof
name|String
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|paramValue
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|",\\s*"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|paramValue
operator|instanceof
name|String
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|paramValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|paramValue
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|paramValue
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|paramName
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected parameter type for '%s': %s"
argument_list|,
name|paramName
argument_list|,
name|paramValue
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return the manually bound classifierSolrServer instance or the one tracked by the OSGi service      *         tracker.      */
specifier|public
name|SolrServer
name|getActiveSolrServer
parameter_list|()
block|{
name|SolrServer
name|result
decl_stmt|;
if|if
condition|(
name|solrServer
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|solrServer
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|indexTracker
operator|.
name|getService
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|//try to wait for the server (mainly because the evaluation
comment|//server is created on demand and will need some time to be
comment|//initialised).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|&&
name|result
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|result
operator|=
operator|(
name|SolrServer
operator|)
name|indexTracker
operator|.
name|waitForService
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|solrCoreId
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No Solr Core registered with id: "
operator|+
name|solrCoreId
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No Solr Core registered"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|configureSolrCore
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|String
name|solrCoreProperty
parameter_list|,
name|String
name|defaultCoreId
parameter_list|,
name|String
name|solrCoreConfigProperty
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|solrCoreInfo
init|=
name|config
operator|.
name|get
argument_list|(
name|solrCoreProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrCoreInfo
operator|instanceof
name|SolrServer
condition|)
block|{
comment|// Bind a fixed Solr server client instead of doing dynamic OSGi lookup using the service tracker.
comment|// This can be useful both for unit-testing .
name|solrServer
operator|=
operator|(
name|SolrServer
operator|)
name|config
operator|.
name|get
argument_list|(
name|solrCoreProperty
argument_list|)
expr_stmt|;
name|solrCoreConfig
operator|=
name|TopicClassificationEngine
operator|.
name|DEFAULT_SOLR_CORE_CONFIG
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|solrCoreProperty
argument_list|,
name|solrCoreProperty
operator|+
literal|" should be a SolrServer instance for using"
operator|+
literal|" the engine without any OSGi context. Got: "
operator|+
name|solrCoreId
argument_list|)
throw|;
block|}
if|if
condition|(
name|solrCoreInfo
operator|!=
literal|null
operator|&&
operator|!
name|solrCoreInfo
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|solrCoreId
operator|=
name|solrCoreInfo
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|solrCoreId
operator|=
name|defaultCoreId
expr_stmt|;
block|}
name|solrCoreConfig
operator|=
name|getRequiredStringParam
argument_list|(
name|config
argument_list|,
name|solrCoreConfigProperty
argument_list|,
name|this
operator|.
name|solrCoreId
operator|+
literal|".solrindex.zip"
argument_list|)
expr_stmt|;
try|try
block|{
name|IndexReference
name|indexReference
init|=
name|IndexReference
operator|.
name|parse
argument_list|(
name|solrCoreId
argument_list|)
decl_stmt|;
comment|//String configName = getRequiredStringParam(config, SOLR_CONFIG, defaultValue)
name|indexReference
operator|=
name|checkInitSolrIndex
argument_list|(
name|indexReference
argument_list|,
name|solrCoreConfig
argument_list|)
expr_stmt|;
comment|// track the solr core OSGi updates
name|indexTracker
operator|=
operator|new
name|RegisteredSolrServerTracker
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|indexReference
argument_list|)
expr_stmt|;
name|indexTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|solrCoreProperty
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Checks if the SolrIndex is available and if not it tries to initialise it      * @param indexReference the SolrCore reference      * @param solrCoreConfig the name of the SolrIndex configuration ({name}.solrindex.zip)      * @return      * @throws IOException      * @throws ConfigurationException      * @throws SAXException      */
specifier|protected
name|IndexReference
name|checkInitSolrIndex
parameter_list|(
name|IndexReference
name|indexReference
parameter_list|,
name|String
name|solrCoreConfig
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
throws|,
name|SAXException
block|{
comment|// if the solr core is managed, check that the index is properly activated
if|if
condition|(
name|managedSolrServer
operator|!=
literal|null
operator|&&
name|indexReference
operator|.
name|checkServer
argument_list|(
name|managedSolrServer
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|&&
name|context
operator|!=
literal|null
operator|&&
name|solrCoreConfig
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"> check/init index {} on ManagedSolrServer {}"
argument_list|,
name|indexReference
argument_list|,
name|managedSolrServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|indexName
init|=
name|indexReference
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|IndexMetadata
name|indexMetadata
decl_stmt|;
name|ManagedIndexState
name|indexState
init|=
name|managedSolrServer
operator|.
name|getIndexState
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexState
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|solrCoreConfig
operator|.
name|indexOf
argument_list|(
literal|".solrindex."
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|//if the suffix is missing
name|solrCoreConfig
operator|=
name|solrCoreConfig
operator|+
literal|".solrindex.zip"
expr_stmt|;
comment|//append it
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Create SolrCore {} (config: {}) on ManagedSolrServer {} ..."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|indexName
block|,
name|solrCoreConfig
block|,
name|managedSolrServer
operator|.
name|getServerName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|indexMetadata
operator|=
name|managedSolrServer
operator|.
name|createSolrIndex
argument_list|(
name|indexName
argument_list|,
name|solrCoreConfig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexMetadata
operator|!=
literal|null
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"  ... created {}"
argument_list|,
name|indexMetadata
operator|.
name|getIndexReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexMetadata
operator|=
name|managedSolrServer
operator|.
name|getIndexMetadata
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexState
operator|!=
name|ManagedIndexState
operator|.
name|ACTIVE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  ... activate {}"
argument_list|,
name|indexMetadata
operator|.
name|getIndexReference
argument_list|()
argument_list|)
expr_stmt|;
name|managedSolrServer
operator|.
name|activateIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  ... index {} already active"
argument_list|,
name|indexMetadata
operator|.
name|getIndexReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//            IndexMetadata indexMetadata = managedSolrServer.getIndexMetadata(indexName);
comment|//            if (indexMetadata == null) {
comment|//                // TODO: debug the DataFileProvider init race conditions instead
comment|//                // indexMetadata = managedSolrServer.createSolrIndex(indexName, indexArchiveName, null);
comment|//                dfp.getInputStream(context.getBundleContext().getBundle().getSymbolicName(),
comment|//                    indexArchiveName + ".solrindex.zip", null);
comment|//                URL archiveUrl = context.getBundleContext().getBundle()
comment|//                        .getEntry("/data-files/" + indexArchiveName + ".solrindex.zip");
comment|//                if (archiveUrl == null) {
comment|//                    throw new ConfigurationException(solrCoreId, "Could not find index archive for "
comment|//                                                                 + indexArchiveName);
comment|//                }
comment|//                ZipArchiveInputStream zis = new ZipArchiveInputStream(archiveUrl.openStream());
comment|//                indexMetadata = managedSolrServer.updateIndex(indexName, zis, indexArchiveName);
comment|//            }
comment|//            if (!indexMetadata.isActive()) {
comment|//                managedSolrServer.activateIndex(indexName);
comment|//            }
name|indexReference
operator|=
name|indexMetadata
operator|.
name|getIndexReference
argument_list|()
expr_stmt|;
block|}
return|return
name|indexReference
return|;
block|}
specifier|protected
name|void
name|bindManagedSolrServer
parameter_list|(
name|ManagedSolrServer
name|managedSolrServer
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|this
operator|.
name|managedSolrServer
operator|=
name|managedSolrServer
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindManagedSolrServer
parameter_list|(
name|ManagedSolrServer
name|managedSolrServer
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|managedSolrServer
operator|==
name|managedSolrServer
operator|||
name|solrCoreId
operator|!=
literal|null
condition|)
block|{
name|IndexReference
name|indexReference
init|=
name|IndexReference
operator|.
name|parse
argument_list|(
name|solrCoreId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexReference
operator|.
name|checkServer
argument_list|(
name|managedSolrServer
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|indexName
init|=
name|indexReference
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|IndexMetadata
name|indexMetadata
init|=
name|managedSolrServer
operator|.
name|getIndexMetadata
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetadata
operator|!=
literal|null
operator|&&
name|indexMetadata
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|managedSolrServer
operator|.
name|deactivateIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|managedSolrServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

