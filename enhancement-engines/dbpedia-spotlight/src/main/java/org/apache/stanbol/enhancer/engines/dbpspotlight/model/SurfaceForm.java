begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dbpspotlight
operator|.
name|model
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|dbpspotlight
operator|.
name|utils
operator|.
name|XMLParser
operator|.
name|getElementsByTagName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|//import org.apache.clerezza.rdf.core.Resource;
end_comment

begin_comment
comment|/**  * Stores the surface forms given by DBPedia Spotlight Candidates.  *   * @author<a href="mailto:iavor.jelev@babelmonkeys.com">Iavor Jelev</a>  */
end_comment

begin_class
specifier|public
class|class
name|SurfaceForm
block|{
specifier|public
name|String
name|name
decl_stmt|;
specifier|public
name|String
name|type
decl_stmt|;
specifier|public
name|Integer
name|offset
decl_stmt|;
specifier|public
name|List
argument_list|<
name|CandidateResource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<
name|CandidateResource
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[name=%s, offset=%i, type=%s]"
argument_list|,
name|name
argument_list|,
name|offset
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/** 	 * Parses all {@link SurfaceForm} data from the parsed XML document 	 *  	 * @param xmlDoc 	 *            The XML Document containing the surface forms 	 * @return a Collection<DBPSLSurfaceForm> with all annotations 	 */
specifier|public
specifier|static
name|Collection
argument_list|<
name|SurfaceForm
argument_list|>
name|parseSurfaceForm
parameter_list|(
name|Document
name|xmlDoc
parameter_list|)
block|{
name|NodeList
name|nList
init|=
name|getElementsByTagName
argument_list|(
name|xmlDoc
argument_list|,
literal|"surfaceForm"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|SurfaceForm
argument_list|>
name|dbpslAnnos
init|=
operator|new
name|HashSet
argument_list|<
name|SurfaceForm
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|temp
init|=
literal|0
init|;
name|temp
operator|<
name|nList
operator|.
name|getLength
argument_list|()
condition|;
name|temp
operator|++
control|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|nList
operator|.
name|item
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|SurfaceForm
name|dbpslann
init|=
name|parseSerfaceForm
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|dbpslAnnos
operator|.
name|add
argument_list|(
name|dbpslann
argument_list|)
expr_stmt|;
block|}
return|return
name|dbpslAnnos
return|;
block|}
specifier|protected
specifier|static
name|SurfaceForm
name|parseSerfaceForm
parameter_list|(
name|Element
name|node
parameter_list|)
block|{
name|SurfaceForm
name|dbpslann
init|=
operator|new
name|SurfaceForm
argument_list|()
decl_stmt|;
name|dbpslann
operator|.
name|name
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|dbpslann
operator|.
name|offset
operator|=
operator|(
operator|new
name|Integer
argument_list|(
name|node
operator|.
name|getAttribute
argument_list|(
literal|"offset"
argument_list|)
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|dbpslann
operator|.
name|type
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
return|return
name|dbpslann
return|;
block|}
block|}
end_class

end_unit

