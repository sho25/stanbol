begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|BlankNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|BlankNodeOrIRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|simple
operator|.
name|SimpleGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ResourceMapping
extends|extends
name|Mapping
block|{
specifier|private
specifier|static
specifier|final
name|Mapping
index|[]
name|EMPTY
init|=
operator|new
name|Mapping
index|[]
block|{}
decl_stmt|;
name|Collection
argument_list|<
name|Mapping
argument_list|>
name|required
decl_stmt|;
name|Collection
argument_list|<
name|Mapping
argument_list|>
name|optional
decl_stmt|;
name|Collection
argument_list|<
name|Mapping
argument_list|>
name|additional
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mappedTikaProperties
decl_stmt|;
specifier|public
name|ResourceMapping
parameter_list|(
name|String
name|ontProperty
parameter_list|,
name|Mapping
modifier|...
name|required
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|IRI
argument_list|(
name|ontProperty
argument_list|)
argument_list|,
name|required
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResourceMapping
parameter_list|(
name|String
name|ontProperty
parameter_list|,
name|Mapping
index|[]
name|required
parameter_list|,
name|Mapping
index|[]
name|optional
parameter_list|,
name|Mapping
index|[]
name|additional
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|IRI
argument_list|(
name|ontProperty
argument_list|)
argument_list|,
name|required
argument_list|,
name|optional
argument_list|,
name|additional
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResourceMapping
parameter_list|(
name|IRI
name|ontProperty
parameter_list|,
name|Mapping
modifier|...
name|requried
parameter_list|)
block|{
name|this
argument_list|(
name|ontProperty
argument_list|,
name|requried
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResourceMapping
parameter_list|(
name|IRI
name|ontProperty
parameter_list|,
name|Mapping
index|[]
name|required
parameter_list|,
name|Mapping
index|[]
name|optional
parameter_list|,
name|Mapping
index|[]
name|additional
parameter_list|)
block|{
name|super
argument_list|(
name|ontProperty
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|required
operator|=
name|required
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|required
expr_stmt|;
name|optional
operator|=
name|optional
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|optional
expr_stmt|;
name|additional
operator|=
name|additional
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|additional
expr_stmt|;
if|if
condition|(
name|required
operator|.
name|length
operator|<
literal|1
operator|&&
name|optional
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Neighter optional nor required subMappings where parsed!"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|mapped
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|required
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|required
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|required
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tha parsed Array of required sub mappings MUST NOT contain a NULL element"
operator|+
literal|"(parsed: "
operator|+
name|this
operator|.
name|required
operator|+
literal|")"
argument_list|)
throw|;
block|}
for|for
control|(
name|Mapping
name|m
range|:
name|this
operator|.
name|required
control|)
block|{
name|mapped
operator|.
name|addAll
argument_list|(
name|m
operator|.
name|getMappedTikaProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|optional
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|optional
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|optional
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tha parsed Array of optional sub mappings MUST NOT contain a NULL element"
operator|+
literal|"(parsed: "
operator|+
name|this
operator|.
name|optional
operator|+
literal|")"
argument_list|)
throw|;
block|}
for|for
control|(
name|Mapping
name|m
range|:
name|this
operator|.
name|optional
control|)
block|{
name|mapped
operator|.
name|addAll
argument_list|(
name|m
operator|.
name|getMappedTikaProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mapped
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|mappedTikaProperties
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|mapped
argument_list|)
expr_stmt|;
comment|//additional mappings
if|if
condition|(
name|additional
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|additional
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|additional
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|additional
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|additional
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tha parsed Array of additional sub mappings MUST NOT contain a NULL element"
operator|+
literal|"(parsed: "
operator|+
name|this
operator|.
name|additional
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|//NOTE: additional mappings are not added to the mappedTikaProperties
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Graph
name|graph
parameter_list|,
name|BlankNodeOrIRI
name|subject
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|BlankNodeOrIRI
name|s
init|=
operator|new
name|BlankNode
argument_list|()
decl_stmt|;
name|mappingLogger
operator|.
name|log
argument_list|(
name|subject
argument_list|,
name|ontProperty
argument_list|,
literal|null
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|required
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Graph
name|g
init|=
operator|new
name|SimpleGraph
argument_list|()
decl_stmt|;
for|for
control|(
name|Mapping
name|m
range|:
name|required
control|)
block|{
if|if
condition|(
operator|!
name|m
operator|.
name|apply
argument_list|(
name|g
argument_list|,
name|s
argument_list|,
name|metadata
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|graph
operator|.
name|addAll
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Mapping
name|m
range|:
name|optional
control|)
block|{
if|if
condition|(
name|m
operator|.
name|apply
argument_list|(
name|graph
argument_list|,
name|s
argument_list|,
name|metadata
argument_list|)
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|added
condition|)
block|{
for|for
control|(
name|Mapping
name|m
range|:
name|additional
control|)
block|{
name|m
operator|.
name|apply
argument_list|(
name|graph
argument_list|,
name|s
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|ontProperty
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMappedTikaProperties
parameter_list|()
block|{
return|return
name|mappedTikaProperties
return|;
block|}
block|}
end_class

end_unit

