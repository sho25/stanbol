begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToTextContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Small extensions to the default {@link ToTextContentHandler}. This allows  * to<ul>  *<li>skip ignoreable whitespaces  *<li>skip linebreaks within literals  *</ul>  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|PlainTextHandler
extends|extends
name|ToTextContentHandler
block|{
specifier|private
specifier|static
name|char
index|[]
name|SPACE
init|=
operator|new
name|char
index|[]
block|{
literal|' '
block|}
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipWhitespaces
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipLinebreakes
decl_stmt|;
name|boolean
name|addedText
init|=
literal|false
decl_stmt|;
specifier|public
name|PlainTextHandler
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|boolean
name|skipIgnoreableWhitespaces
parameter_list|,
name|boolean
name|skipLinebreaksWithinLiterals
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipWhitespaces
operator|=
name|skipIgnoreableWhitespaces
expr_stmt|;
name|this
operator|.
name|skipLinebreakes
operator|=
name|skipLinebreaksWithinLiterals
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
name|skipWhitespaces
operator|&&
name|addedText
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|addedText
operator|=
literal|false
expr_stmt|;
block|}
comment|//else ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|skipLinebreakes
condition|)
block|{
name|int
name|end
init|=
name|start
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
name|start
init|;
name|pos
operator|<
name|end
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|ch
index|[
name|pos
index|]
operator|==
literal|'\n'
condition|)
block|{
if|if
condition|(
name|pos
operator|>
name|start
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|pos
operator|-
name|start
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|SPACE
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
name|length
operator|=
name|length
operator|-
name|start
expr_stmt|;
block|}
comment|//ignore line breaks
block|}
block|}
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|addedText
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
comment|//        if(skipLinebreakes& addedText){
comment|//            characters(LINEBREAK, 0, 1);
comment|//            addedText = false;
comment|//        }
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

