begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|tika
operator|.
name|TikaEngine
operator|.
name|XHTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
operator|.
name|CANNOT_ENHANCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
operator|.
name|OCTET_STREAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|XSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TikaEngineTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TikaEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ContentItemFactory
name|ciFactory
init|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|TikaEngine
name|engine
decl_stmt|;
specifier|private
specifier|static
name|MockComponentContext
name|context
decl_stmt|;
specifier|private
specifier|static
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * Required to make this test independent of the timeZone of the local host.      */
specifier|private
specifier|static
name|SimpleDateFormat
name|dateDefaultTimezone
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|,
operator|new
name|DateFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
block|{
name|context
operator|=
operator|new
name|MockComponentContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|properties
operator|.
name|put
argument_list|(
name|TikaEngine
operator|.
name|PROPERTY_NAME
argument_list|,
literal|"tika"
argument_list|)
expr_stmt|;
comment|//to test unmapped properties
name|context
operator|.
name|properties
operator|.
name|put
argument_list|(
name|TikaEngine
operator|.
name|UNMAPPED_PROPERTIES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|bindServices
parameter_list|()
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
name|engine
operator|=
operator|new
name|TikaEngine
argument_list|(
name|ciFactory
argument_list|)
expr_stmt|;
name|engine
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHtml
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testHtml<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.html"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>The Apache Stanbol Enhancer</title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPdf
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testPdf<<<"
argument_list|)
expr_stmt|;
comment|//PDF created by Apple Pages
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.pdf"
argument_list|,
literal|"application/pdf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities "
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<div class=\"page\">"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
comment|//PDF created by OpenOffice
name|ci
operator|=
name|createContentItem
argument_list|(
literal|"test2.pdf"
argument_list|,
literal|"application/pdf"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
comment|//validate plain text results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|plainTextBlob
operator|=
name|contentPart
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|xhtmlBlob
operator|=
name|contentPart
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<div class=\"page\">"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMsWord
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testMsWord<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.doc"
argument_list|,
literal|"application/msword"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRtf
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testRtf<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.rtf"
argument_list|,
literal|"application/rtf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOdt
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testOdt<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.odt"
argument_list|,
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<title>"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEMail
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testEMail<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.email.txt"
argument_list|,
literal|"message/rfc822"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"Julien Nioche commented on TIKA-461:"
argument_list|,
literal|"I'll have a look at mime4j and try to use it in Tika"
argument_list|,
literal|"> RFC822 messages not parsed"
argument_list|,
literal|"Key: TIKA-461"
argument_list|,
literal|"URL: https://issues.apache.org/jira/browse/TIKA-461"
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<title>\\[jira\\] Commented: \\(TIKA-461\\) RFC822 messages not parsed</title>"
argument_list|,
literal|"<body><p>"
argument_list|,
literal|"Julien Nioche commented on TIKA-461:"
argument_list|,
literal|"I'll have a look at mime4j and try to use it in Tika"
argument_list|,
literal|"&gt; RFC822 messages not parsed"
argument_list|,
literal|"Key: TIKA-461"
argument_list|,
literal|"URL: https://issues.apache.org/jira/browse/TIKA-461"
argument_list|)
expr_stmt|;
comment|//no check the extracted metadata!
comment|//DC
comment|//STANBOL-757: dc:date no longer added by Tika 1.2 (dc:created is still present)
comment|//verifyValue(ci, new UriRef(NamespaceEnum.dc+"date"), XSD.dateTime,"2010-09-06T09:25:34Z");
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"format"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"message/rfc822"
argument_list|)
expr_stmt|;
comment|//STANBOL-757: dc:subject no longer added by Tika1.2 (dc:title is used instead)
comment|//verifyValue(ci, new UriRef(NamespaceEnum.dc+"subject"), null,"[jira] Commented: (TIKA-461) RFC822 messages not parsed");
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"title"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"[jira] Commented: (TIKA-461) RFC822 messages not parsed"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"creator"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Julien Nioche (JIRA)<jira@apache.org>"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"created"
argument_list|)
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
literal|"2010-09-06T09:25:34Z"
argument_list|)
expr_stmt|;
comment|//Media Ontology
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"creationDate"
argument_list|)
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
literal|"2010-09-06T09:25:34Z"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasFormat"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"message/rfc822"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasCreator"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Julien Nioche (JIRA)<jira@apache.org>"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasContributor"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Julien Nioche (JIRA)<jira@apache.org>"
argument_list|)
expr_stmt|;
comment|//STANBOL-757: This was present with Tika 1.1 because its mapping from dc:subject
comment|//        verifyValue(ci, new UriRef(NamespaceEnum.media+"hasKeyword"),null,"[jira] Commented: (TIKA-461) RFC822 messages not parsed");
comment|//Nepomuk Message
name|String
name|message
init|=
literal|"http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#"
decl_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|message
operator|+
literal|"from"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Julien Nioche (JIRA)<jira@apache.org>"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|message
operator|+
literal|"to"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"dev@tika.apache.org"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMp3
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testMp3<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"testMP3id3v24.mp3"
argument_list|,
literal|"audio/mpeg"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"Test Title"
argument_list|,
literal|"Test Artist"
argument_list|,
literal|"Test Album"
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
comment|//Test AudioTrack metadata
name|NonLiteral
name|audioTrack
init|=
name|verifyNonLiteral
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasTrack"
argument_list|)
argument_list|)
decl_stmt|;
comment|//types
name|verifyValues
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"MediaFragment"
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"Track"
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"AudioTrack"
argument_list|)
argument_list|)
expr_stmt|;
comment|//properties
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasFormat"
argument_list|)
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
literal|"Stereo"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"samplingRate"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"44100"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasCompression"
argument_list|)
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
literal|"MP3"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests mappings for the Mp4 metadata extraction capabilities added to      * Tika 1.1 (STANBOL-627)      * @throws EngineException      * @throws IOException      * @throws ParseException      */
annotation|@
name|Test
specifier|public
name|void
name|testMp4
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testMp4<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"testMP4.m4a"
argument_list|,
literal|"audio/mp4"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"Test Title"
argument_list|,
literal|"Test Artist"
argument_list|,
literal|"Test Album"
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
comment|//Test AudioTrack metadata
name|NonLiteral
name|audioTrack
init|=
name|verifyNonLiteral
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasTrack"
argument_list|)
argument_list|)
decl_stmt|;
comment|//types
name|verifyValues
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"MediaFragment"
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"Track"
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"AudioTrack"
argument_list|)
argument_list|)
expr_stmt|;
comment|//properties
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasFormat"
argument_list|)
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
literal|"Stereo"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"samplingRate"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"44100"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|audioTrack
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasCompression"
argument_list|)
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
literal|"M4A"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGEOMetadata
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testGEOMetadata<<<"
argument_list|)
expr_stmt|;
comment|//first validate Media Resource Ontology
name|UriRef
name|hasLocation
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasLocation"
argument_list|)
decl_stmt|;
name|UriRef
name|locationLatitude
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"locationLatitude"
argument_list|)
decl_stmt|;
name|UriRef
name|locationLongitude
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"locationLongitude"
argument_list|)
decl_stmt|;
comment|//UriRef locationAltitude = new UriRef(NamespaceEnum.media+"locationAltitude");
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"testJPEG_GEO.jpg"
argument_list|,
name|OCTET_STREAM
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//"video/x-ms-asf");
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|hasLocation
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|NonLiteral
argument_list|)
expr_stmt|;
name|NonLiteral
name|location
init|=
name|verifyNonLiteral
argument_list|(
name|ci
argument_list|,
name|hasLocation
argument_list|)
decl_stmt|;
comment|//lat
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|location
argument_list|,
name|locationLatitude
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"12.54321"
argument_list|)
expr_stmt|;
comment|//long
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|location
argument_list|,
name|locationLongitude
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"-54.1234"
argument_list|)
expr_stmt|;
comment|//second the GEO ont
name|UriRef
name|lat
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|+
literal|"lat"
argument_list|)
decl_stmt|;
name|UriRef
name|lon
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|+
literal|"long"
argument_list|)
decl_stmt|;
comment|//lat
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|lat
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"12.54321"
argument_list|)
expr_stmt|;
comment|//long
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|lon
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"-54.1234"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadata
parameter_list|()
throws|throws
name|EngineException
throws|,
name|ParseException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testMetadata<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"testMP3id3v24.mp3"
argument_list|,
literal|"audio/mpeg"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"creator"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Test Artist"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"title"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Test Album"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"format"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"audio/mpeg"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasFormat"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"audio/mpeg"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"mainOriginalTitle"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Test Album"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasContributor"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Test Artist"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"releaseDate"
argument_list|)
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
literal|"2008"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasGenre"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Rock"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasCreator"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Test Artist"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExifMetadata
parameter_list|()
throws|throws
name|EngineException
throws|,
name|ParseException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testExifMetadata<<<"
argument_list|)
expr_stmt|;
name|String
name|exif
init|=
literal|"http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#"
decl_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"testJPEG_EXIF.jpg"
argument_list|,
literal|"image/jpeg"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"make"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Canon"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"software"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Adobe Photoshop CS3 Macintosh"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"dateTimeOriginal"
argument_list|)
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
literal|"2009-08-11T09:09:45"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"relatedImageWidth"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"fNumber"
argument_list|)
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"5.6"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"model"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Canon EOS 40D"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"isoSpeedRatings"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"400"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"xResolution"
argument_list|)
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"240.0"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"flash"
argument_list|)
argument_list|,
name|XSD
operator|.
name|boolean_
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"exposureTime"
argument_list|)
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"6.25E-4"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"yResolution"
argument_list|)
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"240.0"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"resolutionUnit"
argument_list|)
argument_list|,
name|XSD
operator|.
name|string
argument_list|,
literal|"Inch"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"focalLength"
argument_list|)
argument_list|,
name|XSD
operator|.
name|double_
argument_list|,
literal|"194.0"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"relatedImageLength"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"68"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|exif
operator|+
literal|"bitsPerSample"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
comment|//also Media Ontology mappings for Exif
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"frameHeight"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"68"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"frameWidth"
argument_list|)
argument_list|,
name|XSD
operator|.
name|int_
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasFormat"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"image/jpeg"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"creationDate"
argument_list|)
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
literal|"2009-08-11T09:09:45"
argument_list|)
expr_stmt|;
name|verifyValues
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|media
operator|+
literal|"hasKeyword"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"serbor"
argument_list|,
literal|"moscow-birds"
argument_list|,
literal|"canon-55-250"
argument_list|)
expr_stmt|;
comment|//and finally the mapped DC properties
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"format"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"image/jpeg"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"created"
argument_list|)
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
literal|"2009-08-11T09:09:45"
argument_list|)
expr_stmt|;
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"modified"
argument_list|)
argument_list|,
name|XSD
operator|.
name|dateTime
argument_list|,
literal|"2009-10-02T23:02:49"
argument_list|)
expr_stmt|;
name|verifyValues
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dc
operator|+
literal|"subject"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"serbor"
argument_list|,
literal|"moscow-birds"
argument_list|,
literal|"canon-55-250"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests unmapped properties as added by<a href="https://issues.apache.org/jira/browse/STANBOL-947">      * STANBOL-947</a>      * @throws EngineException      * @throws IOException      * @throws ParseException       */
annotation|@
name|Test
specifier|public
name|void
name|testUnmappedProperties
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testUnmappedProperties<<<"
argument_list|)
expr_stmt|;
comment|//reuses the image with EXIF metadata
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"testMP4.m4a"
argument_list|,
literal|"audio/mp4"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
comment|//test that the "xmpDM:logComment" is present
name|verifyValue
argument_list|(
name|ci
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"urn:tika.apache.org:tika:xmpDM:logComment"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Test Comments"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentTypeDetection
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testContentTypeDetection<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.pdf"
argument_list|,
name|OCTET_STREAM
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|)
expr_stmt|;
comment|//validate XHTML results
name|contentPart
operator|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|xhtmlBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xhtmlBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|xhtmlBlob
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|,
literal|"<head>"
argument_list|,
literal|"<meta name="
argument_list|,
literal|"<div class=\"page\">"
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|,
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that text is not processed      */
annotation|@
name|Test
specifier|public
name|void
name|testText
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testText<<<"
argument_list|)
expr_stmt|;
name|String
name|text
init|=
literal|"The Stanbol enhancer can detect famous cities such as "
operator|+
literal|"Paris and people such as Bob Marley."
decl_stmt|;
name|ContentItem
name|ci
init|=
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|StringSource
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ContentItemHelper
operator|.
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsupported
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testUnsupported<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.pages"
argument_list|,
literal|"application/x-iwork-pages-sffpages"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
comment|//it MUST NOT give an error but also not add a content part
name|assertNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
comment|//only the original content
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ContentItemHelper
operator|.
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXhtml
parameter_list|()
throws|throws
name|EngineException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|">>> testXhtml<<<"
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|createContentItem
argument_list|(
literal|"test.xhtml"
argument_list|,
name|XHTML
operator|.
name|toString
argument_list|()
operator|+
literal|"; charset=UTF-8"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
operator|==
name|CANNOT_ENHANCE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentPart
argument_list|)
expr_stmt|;
name|Blob
name|plainTextBlob
init|=
name|contentPart
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plainTextBlob
argument_list|)
expr_stmt|;
name|assertContentRegexp
argument_list|(
name|plainTextBlob
argument_list|,
literal|"The Apache Stanbol Enhancer"
argument_list|,
literal|"The Stanbol enhancer can detect famous cities"
argument_list|)
expr_stmt|;
comment|//only the original and the plain text
comment|// this asserts that no xhtml is parsed from the parsed xhtml content
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ContentItemHelper
operator|.
name|getContentParts
argument_list|(
name|ci
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ContentItem
name|createContentItem
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|TikaEngineTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|in
argument_list|,
name|contentType
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Tests if the parsed regex pattern are contained in any line of the parsed      * test      * @throws IOException       */
specifier|public
name|void
name|assertContentRegexp
parameter_list|(
name|Blob
name|blob
parameter_list|,
name|String
modifier|...
name|regexp
parameter_list|)
throws|throws
name|IOException
block|{
name|Charset
name|charset
decl_stmt|;
if|if
condition|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
condition|)
block|{
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
expr_stmt|;
block|}
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|nextPattern
label|:
for|for
control|(
name|String
name|expr
range|:
name|regexp
control|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
operator|+
name|expr
operator|+
literal|".*"
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|blob
operator|.
name|getStream
argument_list|()
argument_list|,
name|charset
argument_list|)
expr_stmt|;
specifier|final
name|LineIterator
name|it
init|=
operator|new
name|LineIterator
argument_list|(
name|reader
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|String
name|line
init|=
name|it
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue
name|nextPattern
continue|;
block|}
block|}
name|fail
argument_list|(
name|this
operator|+
literal|": no match for regexp '"
operator|+
name|expr
operator|+
literal|"', content=\n"
operator|+
name|IOUtils
operator|.
name|toString
argument_list|(
name|blob
operator|.
name|getStream
argument_list|()
argument_list|,
name|charset
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|unbindServices
parameter_list|()
block|{
comment|/*nothing to do */
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdownServices
parameter_list|()
block|{
name|engine
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|engine
operator|=
literal|null
expr_stmt|;
block|}
comment|/*      * Internal helper methods       */
specifier|private
name|NonLiteral
name|verifyNonLiteral
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|UriRef
name|property
parameter_list|)
block|{
return|return
name|verifyNonLiteral
argument_list|(
name|ci
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|property
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NonLiteral
name|verifyNonLiteral
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|UriRef
name|subject
parameter_list|,
name|UriRef
name|property
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|property
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|NonLiteral
argument_list|)
expr_stmt|;
return|return
operator|(
name|NonLiteral
operator|)
name|r
return|;
block|}
specifier|private
specifier|static
name|UriRef
name|verifyValue
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|UriRef
name|property
parameter_list|,
name|UriRef
name|value
parameter_list|)
block|{
return|return
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|UriRef
name|verifyValue
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|UriRef
name|property
parameter_list|,
name|UriRef
name|value
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|property
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|UriRef
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
operator|(
name|UriRef
operator|)
name|r
return|;
block|}
specifier|private
specifier|static
name|Literal
name|verifyValue
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|UriRef
name|property
parameter_list|,
name|UriRef
name|dataType
parameter_list|,
name|String
name|lexValue
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|verifyValue
argument_list|(
name|ci
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|property
argument_list|,
name|dataType
argument_list|,
name|lexValue
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Literal
name|verifyValue
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|UriRef
name|property
parameter_list|,
name|UriRef
name|dataType
parameter_list|,
name|String
name|lexValue
parameter_list|)
throws|throws
name|ParseException
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|property
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataType
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|PlainLiteral
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|TypedLiteral
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataType
argument_list|,
operator|(
operator|(
name|TypedLiteral
operator|)
name|r
operator|)
operator|.
name|getDataType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//if we check dates and the lexical value is not UTC than we need to
comment|//consider the time zone of the host running this test
if|if
condition|(
name|XSD
operator|.
name|dateTime
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|&&
name|lexValue
operator|.
name|charAt
argument_list|(
name|lexValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'Z'
condition|)
block|{
name|Date
name|expectedDate
init|=
name|dateDefaultTimezone
operator|.
name|parse
argument_list|(
name|lexValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedDate
argument_list|,
name|lf
operator|.
name|createObject
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|(
operator|(
name|TypedLiteral
operator|)
name|r
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|lexValue
argument_list|,
operator|(
operator|(
name|Literal
operator|)
name|r
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Literal
operator|)
name|r
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|Literal
argument_list|>
name|verifyValues
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|UriRef
name|property
parameter_list|,
name|UriRef
name|dataType
parameter_list|,
name|String
modifier|...
name|lexValues
parameter_list|)
block|{
return|return
name|verifyValues
argument_list|(
name|ci
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|property
argument_list|,
name|dataType
argument_list|,
name|lexValues
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|Literal
argument_list|>
name|verifyValues
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|UriRef
name|property
parameter_list|,
name|UriRef
name|dataType
parameter_list|,
name|String
modifier|...
name|lexValues
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|property
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lexValues
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Literal
argument_list|>
name|found
init|=
operator|new
name|HashSet
argument_list|<
name|Literal
argument_list|>
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataType
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|PlainLiteral
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|TypedLiteral
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataType
argument_list|,
operator|(
operator|(
name|TypedLiteral
operator|)
name|r
operator|)
operator|.
name|getDataType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expected
operator|.
name|remove
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|r
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|.
name|add
argument_list|(
operator|(
name|Literal
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|verifyValues
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|UriRef
name|property
parameter_list|,
name|NonLiteral
modifier|...
name|references
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|property
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|NonLiteral
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|references
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|found
init|=
operator|new
name|HashSet
argument_list|<
name|NonLiteral
argument_list|>
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|NonLiteral
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|remove
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|.
name|add
argument_list|(
operator|(
name|NonLiteral
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
block|}
end_class

end_unit

