begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
operator|.
name|PhraseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
operator|.
name|PhraseBuilder
operator|.
name|ChunkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link ChunkFactory} interface used by the   * {@link PhraseBuilder} to create chunks  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ChunkFactoryImpl
implements|implements
name|ChunkFactory
block|{
specifier|private
specifier|final
name|AnalysedText
name|at
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|lock
decl_stmt|;
specifier|public
name|ChunkFactoryImpl
parameter_list|(
name|AnalysedText
name|at
parameter_list|,
name|ReadWriteLock
name|lock
parameter_list|)
block|{
name|this
operator|.
name|at
operator|=
name|at
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Chunk
name|createChunk
parameter_list|(
name|Token
name|start
parameter_list|,
name|Token
name|end
parameter_list|)
block|{
if|if
condition|(
name|start
operator|==
literal|null
operator|||
name|end
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parst start Token '"
operator|+
name|start
operator|+
literal|"' and end Token '"
operator|+
name|end
operator|+
literal|"' MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|at
operator|.
name|addChunk
argument_list|(
name|start
operator|.
name|getStart
argument_list|()
argument_list|,
name|end
operator|.
name|getEnd
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

