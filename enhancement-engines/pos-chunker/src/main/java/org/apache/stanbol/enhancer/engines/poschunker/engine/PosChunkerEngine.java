begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2012 Sebastian Schaffert  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
operator|.
name|engine
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|POS_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|PHRASE_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getAnalysedText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getLanguage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|isLangaugeConfigured
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
operator|.
name|PhraseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
operator|.
name|PhraseBuilder
operator|.
name|ChunkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
operator|.
name|PhraseTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpProcessingRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|SpanTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|phrase
operator|.
name|PhraseTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A noun phrase detector (chunker) for English and German language base on OpenNLP. Uses the following chunker  * models for OpenNLP:  *<ul>  *<li>English: http://opennlp.sourceforge.net/models-1.5/en-chunker.bin</li>  *<li>German: http://gromgull.net/blog/2010/01/noun-phrase-chunking-for-the-awful-german-language/</li>  *</ul>  * The noun phrase detector requires a {@link org.apache.stanbol.enhancer.engines.opennlp.pos.model.POSContentPart} to  * be present in the content item and will extend each {@link org.apache.stanbol.enhancer.engines.opennlp.pos.model.POSSentence}  * with an array of chunks.  *   * @author Sebastian Schaffert  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
comment|//allow multiple instances to be configured
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|OPTIONAL
argument_list|)
comment|//create the default instance with the default config
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"pos-chunker"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PosChunkerEngine
operator|.
name|CONFIG_LANGUAGES
argument_list|,
name|value
operator|=
block|{
literal|"*"
block|}
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PosChunkerEngine
operator|.
name|MIN_POS_SCORE
argument_list|,
name|doubleValue
operator|=
name|PosChunkerEngine
operator|.
name|DEFAULT_MIN_POS_SCORE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PosChunkerEngine
operator|.
name|NOUN_PHRASE_STATE
argument_list|,
name|boolValue
operator|=
name|PosChunkerEngine
operator|.
name|DEFAULT_NOUN_PHRASE_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PosChunkerEngine
operator|.
name|VERB_PHRASE_STATE
argument_list|,
name|boolValue
operator|=
name|PosChunkerEngine
operator|.
name|DEFAULT_VERB_PHRASE_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
operator|-
literal|100
argument_list|)
comment|//give the default instance a ranking< 0
block|}
argument_list|)
specifier|public
class|class
name|PosChunkerEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|ServiceProperties
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SERVICE_PROPERTIES
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
name|ServiceProperties
operator|.
name|ORDERING_NLP_CHUNK
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|NlpServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_NLP_ROLE
argument_list|,
name|NlpProcessingRole
operator|.
name|Chunking
argument_list|)
expr_stmt|;
name|SERVICE_PROPERTIES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
comment|/**      * Language configuration. Takes a list of ISO language codes of supported languages. Currently supported      * are the languages given as default value.      */
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_LANGUAGES
init|=
literal|"enhancer.engine.poschunker.languages"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_POS_SCORE
init|=
literal|"enhancer.engine.poschunker.minPosScore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_MIN_POS_SCORE
init|=
literal|0.5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NOUN_PHRASE_STATE
init|=
literal|"enhancer.engine.poschunker.nounPhrase"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NOUN_PHRASE_STATE
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VERB_PHRASE_STATE
init|=
literal|"enhancer.engine.poschunker.verbPhrase"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_VERB_PHRASE_STATE
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PhraseTypeDefinition
name|NOUN_PHRASE_TYPE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PhraseTypeDefinition
name|VERB_PHRASE_TYPE
decl_stmt|;
comment|//TODO: maybe move this to PhraseTypeDefinition
static|static
block|{
name|PhraseTypeDefinition
name|nounPD
init|=
operator|new
name|PhraseTypeDefinition
argument_list|(
name|LexicalCategory
operator|.
name|Noun
argument_list|)
decl_stmt|;
comment|//start types noun (automatically included) pronoun or determiners, adjectives
name|nounPD
operator|.
name|addStartType
argument_list|(
name|LexicalCategory
operator|.
name|PronounOrDeterminer
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
expr_stmt|;
comment|//continuation types are nouns, adpositions , pronouns, determiner, adjectives and punctations
comment|//optionally one could also allow Adverbs, PronounOrDeterminer
name|nounPD
operator|.
name|addContinuationType
argument_list|(
name|LexicalCategory
operator|.
name|Adjective
argument_list|,
name|LexicalCategory
operator|.
name|Adposition
argument_list|,
name|LexicalCategory
operator|.
name|Punctuation
argument_list|)
expr_stmt|;
comment|//LexicalCategory.PronounOrDeterminer, LexicalCategory.Adverb, );
comment|//end types are the same as start terms
name|nounPD
operator|.
name|addEndType
argument_list|(
name|LexicalCategory
operator|.
name|PronounOrDeterminer
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
expr_stmt|;
comment|//and required types do include a Noun (what is actually included by default)
name|NOUN_PHRASE_TYPE
operator|=
name|nounPD
expr_stmt|;
name|PhraseTypeDefinition
name|verbPD
init|=
operator|new
name|PhraseTypeDefinition
argument_list|(
name|LexicalCategory
operator|.
name|Verb
argument_list|)
decl_stmt|;
name|verbPD
operator|.
name|addStartType
argument_list|(
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
expr_stmt|;
name|verbPD
operator|.
name|addContinuationType
argument_list|(
name|LexicalCategory
operator|.
name|Adverb
argument_list|,
name|LexicalCategory
operator|.
name|Punctuation
argument_list|)
expr_stmt|;
name|verbPD
operator|.
name|addEndType
argument_list|(
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
expr_stmt|;
comment|//and required types do include a Verbs (what is actually included by default)
name|VERB_PHRASE_TYPE
operator|=
name|verbPD
expr_stmt|;
block|}
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PosChunkerEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LanguageConfiguration
name|languageConfiguration
init|=
operator|new
name|LanguageConfiguration
argument_list|(
name|CONFIG_LANGUAGES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
decl_stmt|;
specifier|private
name|double
name|minPosScore
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PhraseTypeDefinition
argument_list|>
name|phraseTypeDefinitions
decl_stmt|;
comment|/**      * Indicate if this engine can enhance supplied ContentItem, and if it      * suggests enhancing it synchronously or asynchronously. The      * {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager} can force sync/async mode if desired, it is      * just a suggestion from the engine.      *<p/>      * Returns CANNOT_ENHANCE if the content item does not have a POSContentPart, the language of the content is not      * available or no chunker for the language is available.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the introspecting process of the content item      *          fails      */
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|phraseTypeDefinitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
comment|//Nothing to do
block|}
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
if|if
condition|(
operator|!
name|isLangaugeConfigured
argument_list|(
name|this
argument_list|,
name|languageConfiguration
argument_list|,
name|language
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
if|if
condition|(
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
comment|// default enhancement is synchronous enhancement
return|return
name|ENHANCE_ASYNC
return|;
block|}
comment|/**      * Compute enhancements for supplied ContentItem. The results of the process      * are expected to be stored in the metadata of the content item.      *<p/>      * The client (usually an {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager}) should take care of      * persistent storage of the enhanced {@link org.apache.stanbol.enhancer.servicesapi.ContentItem}.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the underlying process failed to work as      *          expected      */
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|AnalysedText
name|at
init|=
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|isLangaugeConfigured
argument_list|(
name|this
argument_list|,
name|languageConfiguration
argument_list|,
name|language
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//init the PhraseBuilder
name|ChunkFactory
name|chunkFactory
init|=
operator|new
name|ChunkFactoryImpl
argument_list|(
name|at
argument_list|,
name|ci
operator|.
name|getLock
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PhraseBuilder
argument_list|>
name|phraseBuilders
init|=
operator|new
name|ArrayList
argument_list|<
name|PhraseBuilder
argument_list|>
argument_list|(
name|phraseTypeDefinitions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PhraseTypeDefinition
name|ptd
range|:
name|phraseTypeDefinitions
control|)
block|{
name|phraseBuilders
operator|.
name|add
argument_list|(
operator|new
name|PhraseBuilder
argument_list|(
name|ptd
argument_list|,
name|chunkFactory
argument_list|,
name|minPosScore
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|?
extends|extends
name|Section
argument_list|>
name|sentences
init|=
name|at
operator|.
name|getSentences
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sentences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//no sentences ... iterate over the whole text
name|sentences
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|at
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|sentences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// (1) get Tokens and POS information for the sentence
name|Section
name|sentence
init|=
name|sentences
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|PhraseBuilder
name|pb
range|:
name|phraseBuilders
control|)
block|{
name|pb
operator|.
name|nextSection
argument_list|(
name|sentence
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|sentence
operator|.
name|getTokens
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Token
name|token
init|=
name|tokens
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|PhraseBuilder
name|pb
range|:
name|phraseBuilders
control|)
block|{
name|pb
operator|.
name|nextToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//signal the end of the document
for|for
control|(
name|PhraseBuilder
name|pb
range|:
name|phraseBuilders
control|)
block|{
name|pb
operator|.
name|nextSection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logChunks
argument_list|(
name|at
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|SERVICE_PROPERTIES
return|;
block|}
specifier|private
name|void
name|logChunks
parameter_list|(
name|AnalysedText
name|at
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Span
argument_list|>
name|it
init|=
name|at
operator|.
name|getEnclosed
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SpanTypeEnum
operator|.
name|Sentence
argument_list|,
name|SpanTypeEnum
operator|.
name|Chunk
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Span
name|span
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|span
operator|.
name|getType
argument_list|()
operator|==
name|SpanTypeEnum
operator|.
name|Chunk
condition|)
block|{
name|Value
argument_list|<
name|PhraseTag
argument_list|>
name|phraseAnno
init|=
name|span
operator|.
name|getAnnotation
argument_list|(
name|PHRASE_ANNOTATION
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"> {} Phrase: {} {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|phraseAnno
operator|!=
literal|null
condition|?
name|phraseAnno
operator|.
name|value
argument_list|()
operator|.
name|getTag
argument_list|()
else|:
literal|"unknown"
block|,
name|span
block|,
name|span
operator|.
name|getSpan
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"  Tokens: "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|(
operator|(
name|Chunk
operator|)
name|span
operator|)
operator|.
name|getTokens
argument_list|()
init|;
name|tokens
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Token
name|token
init|=
name|tokens
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"    {}. {}{}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|i
block|,
name|token
operator|.
name|getSpan
argument_list|()
block|,
name|token
operator|.
name|getAnnotations
argument_list|(
name|NlpAnnotations
operator|.
name|POS_ANNOTATION
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"--- {}"
argument_list|,
name|span
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Activate and read the properties. Configures and initialises a ChunkerHelper for each language configured in      * CONFIG_LANGUAGES.      *      * @param ce the {@link org.osgi.service.component.ComponentContext}      */
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activating POS tagging engine"
argument_list|)
expr_stmt|;
name|super
operator|.
name|activate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|//read the min chunk score
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|MIN_POS_SCORE
argument_list|)
decl_stmt|;
name|Double
name|minPosScore
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|minPosScore
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|minPosScore
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_POS_SCORE
argument_list|,
literal|"The configured minumum chunk score MUST BE a floating point"
operator|+
literal|"number in the range> 0< 1."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|minPosScore
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|minPosScore
operator|!=
literal|null
operator|&&
operator|(
name|minPosScore
operator|.
name|doubleValue
argument_list|()
operator|>=
literal|1d
operator|||
name|minPosScore
operator|.
name|doubleValue
argument_list|()
operator|<
literal|0d
operator|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_POS_SCORE
argument_list|,
literal|"The configured minumum chunk score '"
operator|+
name|minPosScore
operator|+
literal|"' MUST BE a "
operator|+
literal|"floating point number in the range> 0< 1."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|minPosScore
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|minPosScore
operator|=
name|DEFAULT_MIN_POS_SCORE
expr_stmt|;
comment|//set to default
block|}
else|else
block|{
name|this
operator|.
name|minPosScore
operator|=
name|minPosScore
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"> set minimum POS score to {} (Engine: {})"
argument_list|,
name|this
operator|.
name|minPosScore
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//read the language configuration
name|languageConfiguration
operator|.
name|setConfiguration
argument_list|(
name|properties
argument_list|)
expr_stmt|;
comment|//configure the PhraseType definitions
name|phraseTypeDefinitions
operator|=
operator|new
name|ArrayList
argument_list|<
name|PhraseTypeDefinition
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|NOUN_PHRASE_STATE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|value
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|value
operator|==
literal|null
operator|&&
name|DEFAULT_NOUN_PHRASE_STATE
operator|)
condition|)
block|{
name|phraseTypeDefinitions
operator|.
name|add
argument_list|(
name|NOUN_PHRASE_TYPE
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|VERB_PHRASE_STATE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|value
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|value
operator|==
literal|null
operator|&&
name|DEFAULT_VERB_PHRASE_STATE
operator|)
condition|)
block|{
name|phraseTypeDefinitions
operator|.
name|add
argument_list|(
name|VERB_PHRASE_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|languageConfiguration
operator|.
name|setDefault
argument_list|()
expr_stmt|;
name|this
operator|.
name|minPosScore
operator|=
operator|-
literal|1
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

