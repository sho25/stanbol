begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|poschunker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_comment
comment|/**  * Definition of a phrase type<p>  *   * Phrases are defined by a set of POS tags that can<ul>  *<li> required Tokens - typically noun for noun phrases, verbs for verb phrases.  *<li> start types - types that can start a new phrase  *<li> prefix types - types that can continue a phrase not yet containing a  * required token  *<li> continuation types - types that can continue a phrase already containing  * a required token  *<li> end types - types that can end a phrase. Used to remove tailing tokens  * from a phrase (typically punctations).  *</ul>  *   *<b>TODO:</b> Add support for {@link Pos} and String tags in addition to  * {@link LexicalCategory}.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|PhraseTypeDefinition
block|{
specifier|protected
specifier|final
name|LexicalCategory
name|phraseType
decl_stmt|;
specifier|private
specifier|final
name|TokenTypeDefinition
name|startTypeDefinition
decl_stmt|;
specifier|private
specifier|final
name|TokenTypeDefinition
name|prefixTypeDefinition
decl_stmt|;
specifier|private
specifier|final
name|TokenTypeDefinition
name|continuationTypeDefinition
decl_stmt|;
specifier|private
specifier|final
name|TokenTypeDefinition
name|requiredTypeDefinition
decl_stmt|;
specifier|private
specifier|final
name|TokenTypeDefinition
name|endTypeDefinition
decl_stmt|;
specifier|public
name|PhraseTypeDefinition
parameter_list|(
name|LexicalCategory
name|phraseType
parameter_list|)
block|{
if|if
condition|(
name|phraseType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed PhraseType MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|phraseType
operator|=
name|phraseType
expr_stmt|;
name|startTypeDefinition
operator|=
operator|new
name|TokenTypeDefinition
argument_list|(
name|phraseType
argument_list|)
expr_stmt|;
name|prefixTypeDefinition
operator|=
operator|new
name|TokenTypeDefinition
argument_list|(
name|phraseType
argument_list|)
expr_stmt|;
name|continuationTypeDefinition
operator|=
operator|new
name|TokenTypeDefinition
argument_list|(
name|phraseType
argument_list|)
expr_stmt|;
name|requiredTypeDefinition
operator|=
operator|new
name|TokenTypeDefinition
argument_list|(
name|phraseType
argument_list|)
expr_stmt|;
name|endTypeDefinition
operator|=
operator|new
name|TokenTypeDefinition
argument_list|(
name|phraseType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the type of this phrase definition      * @return      */
specifier|public
name|LexicalCategory
name|getPhraseType
parameter_list|()
block|{
return|return
name|phraseType
return|;
block|}
comment|/**      * Getter for the read only set with the start types.      * @return the read only set with {@link LexicalCategory LexicalCategories}      * that can start a phrase of that type      */
specifier|public
name|TokenTypeDefinition
name|getStartType
parameter_list|()
block|{
return|return
name|startTypeDefinition
return|;
block|}
comment|/**      * Getter for the read only set with the prefix types      * @return the read only set with {@link LexicalCategory LexicalCategories}      * that can continue a phrase that does not yet include a token classified      * with a {@link #getRequiredType() required type}. A typical Example are      * {@link LexicalCategory#Adjective} in Noun Phrases that need to be      * considered in prefixes (e.g. "A nice weekend") but excluded after the      * first noun (e.g. "the trip last week").       */
specifier|public
name|TokenTypeDefinition
name|getPrefixType
parameter_list|()
block|{
return|return
name|prefixTypeDefinition
return|;
block|}
comment|/**      * Getter for the read only set with the continuation types      * @return the read only set with {@link LexicalCategory LexicalCategories}      * that can continue a phrase that does already include a token classified      * with a {@link #getRequiredType() required type}. A typical Example are      * {@link LexicalCategory#Adjective} in Noun Phrases that need to be      * considered in prefixes (e.g. "A nice weekend") but excluded after the      * first noun (e.g. "the trip last week").       */
specifier|public
name|TokenTypeDefinition
name|getContinuationType
parameter_list|()
block|{
return|return
name|continuationTypeDefinition
return|;
block|}
comment|/**      * Getter for the read only set with the required types      * @return the read only set with {@link LexicalCategory LexicalCategories}      * that MUST occur within a phrase of that type      */
specifier|public
name|TokenTypeDefinition
name|getRequiredType
parameter_list|()
block|{
return|return
name|requiredTypeDefinition
return|;
block|}
comment|/**      * Getter for the read only set with the end types.      * @return the read only set with {@link LexicalCategory LexicalCategories}      * that can end a phrase of that type      */
specifier|public
name|TokenTypeDefinition
name|getEndType
parameter_list|()
block|{
return|return
name|endTypeDefinition
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|phraseType
operator|.
name|name
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|TokenTypeDefinition
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|LexicalCategory
argument_list|>
name|categories
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|LexicalCategory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Pos
argument_list|>
name|posTags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Pos
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Pos
argument_list|>
name|excludedPosTags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Pos
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Used by the constructor of the {@link PhraseTypeDefinition} class          * @param lc          */
specifier|private
name|TokenTypeDefinition
parameter_list|(
name|LexicalCategory
name|lc
parameter_list|)
block|{
name|this
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|lc
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TokenTypeDefinition
parameter_list|(
name|Set
argument_list|<
name|LexicalCategory
argument_list|>
name|categories
parameter_list|,
name|Set
argument_list|<
name|Pos
argument_list|>
name|posTags
parameter_list|,
name|String
modifier|...
name|tags
parameter_list|)
block|{
if|if
condition|(
name|categories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LexicalCategory
name|lc
range|:
name|categories
control|)
block|{
if|if
condition|(
name|lc
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|categories
operator|.
name|add
argument_list|(
name|lc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|posTags
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Pos
name|pos
range|:
name|posTags
control|)
block|{
if|if
condition|(
name|pos
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|posTags
operator|.
name|add
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tags
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|tags
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          * Read-/writeable set of {@link LexicalCategory LexicalCategories}          * @return the set of lexical categories          */
specifier|public
name|Set
argument_list|<
name|LexicalCategory
argument_list|>
name|getCategories
parameter_list|()
block|{
return|return
name|categories
return|;
block|}
comment|/**          * Adds the parsed {@link LexicalCategory LexicalCategories}          * @param categories the LexicalCategories          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|addCategories
parameter_list|(
name|LexicalCategory
modifier|...
name|categories
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|this
operator|.
name|categories
argument_list|,
name|categories
argument_list|)
return|;
block|}
comment|/**          * Removes the parsed {@link LexicalCategory LexicalCategories}          * @param categories the LexicalCategories          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|removeCategories
parameter_list|(
name|LexicalCategory
modifier|...
name|categories
parameter_list|)
block|{
return|return
name|remove
argument_list|(
name|this
operator|.
name|categories
argument_list|,
name|categories
argument_list|)
return|;
block|}
comment|/**          * Read-/writeable set of {@link Pos} tags          * @return the set of POS tags          */
specifier|public
name|Set
argument_list|<
name|Pos
argument_list|>
name|getPosTags
parameter_list|()
block|{
return|return
name|posTags
return|;
block|}
comment|/**          * Adds the parsed {@link Pos} tags          * @param pos the {@link Pos} tags          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|addPosTags
parameter_list|(
name|Pos
modifier|...
name|pos
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|this
operator|.
name|posTags
argument_list|,
name|pos
argument_list|)
return|;
block|}
comment|/**          * Removes the parsed {@link Pos} tags          * @param pos the {@link Pos} tags          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|removePosTags
parameter_list|(
name|Pos
modifier|...
name|pos
parameter_list|)
block|{
return|return
name|remove
argument_list|(
name|this
operator|.
name|posTags
argument_list|,
name|pos
argument_list|)
return|;
block|}
comment|/**          * Read-/writeable set of excluded {@link Pos} tags. This allows to          * include a {@link LexicalCategory} but to exclude some specific           * {@link Pos} member of this category.          * @return the set of excluded POS tags          */
specifier|public
name|Set
argument_list|<
name|Pos
argument_list|>
name|getExcludedPosTags
parameter_list|()
block|{
return|return
name|excludedPosTags
return|;
block|}
comment|/**          * Adds the parsed {@link Pos} tags to the set of excluded {@link Pos} tags          * @param pos the {@link Pos} tags          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|addExcludedPosTags
parameter_list|(
name|Pos
modifier|...
name|pos
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|this
operator|.
name|excludedPosTags
argument_list|,
name|pos
argument_list|)
return|;
block|}
comment|/**          * Removes the parsed {@link Pos} tags to the set of excluded {@link Pos} tags          * @param pos the {@link Pos} tags          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|removeExcludedPosTags
parameter_list|(
name|Pos
modifier|...
name|pos
parameter_list|)
block|{
return|return
name|remove
argument_list|(
name|this
operator|.
name|excludedPosTags
argument_list|,
name|pos
argument_list|)
return|;
block|}
comment|/**          * Read-/writeable set of string tags (as provided by the POS tagger)          * @return the set of String tags          */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTags
parameter_list|()
block|{
return|return
name|tags
return|;
block|}
comment|/**          * Adds the parsed tags          * @param tag the tags          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|addTags
parameter_list|(
name|String
modifier|...
name|tag
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|this
operator|.
name|tags
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**          * Removes the parsed tags          * @param tag the tags          * @return if the {@link TokenTypeDefinition} was updated by this operation          */
specifier|public
name|boolean
name|removeTags
parameter_list|(
name|String
modifier|...
name|tag
parameter_list|)
block|{
return|return
name|remove
argument_list|(
name|this
operator|.
name|tags
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**          * Checks if a posTag matches against this TokenTypeDefinition          * @param posTag the posTag to check          * @return<code>true</code> in case of a match. Otherwise<code>false</code>          * @throws NullPointerException if the parsed posTag is<code>null</code>          */
specifier|public
name|boolean
name|matches
parameter_list|(
name|PosTag
name|posTag
parameter_list|)
block|{
comment|//check against incldues categories, posTags and tags
name|boolean
name|matches
init|=
operator|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|posTag
operator|.
name|getCategories
argument_list|()
argument_list|,
name|categories
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|posTag
operator|.
name|getPosHierarchy
argument_list|()
argument_list|,
name|posTags
argument_list|)
operator|)
operator|||
name|tags
operator|.
name|contains
argument_list|(
name|posTag
operator|.
name|getTag
argument_list|()
argument_list|)
decl_stmt|;
comment|//if there is a match we need still to check for excluded POS tags
return|return
name|matches
condition|?
name|Collections
operator|.
name|disjoint
argument_list|(
name|posTag
operator|.
name|getPosHierarchy
argument_list|()
argument_list|,
name|excludedPosTags
argument_list|)
else|:
literal|false
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|add
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|set
parameter_list|,
name|T
modifier|...
name|types
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|T
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|set
operator|.
name|add
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|remove
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|set
parameter_list|,
name|T
modifier|...
name|types
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|T
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|set
operator|.
name|remove
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|categories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Cat: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|LexicalCategory
name|lc
range|:
name|categories
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|lc
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|posTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Pos: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Pos
name|pos
range|:
name|posTags
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|pos
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Tags: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|excludedPosTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Excluded: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Pos
name|pos
range|:
name|excludedPosTags
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|pos
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

