begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|PROCESSED_LANGUAGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|PROCESS_ONLY_PROPER_NOUNS_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_CREATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_LANGUAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|standalone
operator|.
name|StandaloneEmbeddedSolrServerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|LanguageProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|RedirectProcessingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|CorpusCreationTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|CorpusInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|FieldEncodingEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|FstLinkingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|IndexConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|cache
operator|.
name|FastLRUCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|cache
operator|.
name|SolrEntityCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|json
operator|.
name|AnalyzedTextParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FstLinkingEngineTest
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FstLinkingEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The SolrYard used for {@link #testSetup()} to check if {@link #REQUIRED_ENTITIES}      * are present in the data.<p>      * NOTE that the {@link FstLinkingEngine} DOES NOT require a SolrYard, but directly      * operates on the #core      */
specifier|protected
specifier|static
name|SolrYard
name|yard
decl_stmt|;
specifier|protected
specifier|static
name|SolrCore
name|core
decl_stmt|;
specifier|private
specifier|static
name|IndexConfiguration
name|fstConfig
decl_stmt|;
comment|/**      * The SolrDirectoryManager also tested within this unit test      */
specifier|public
specifier|static
specifier|final
name|String
name|TEST_YARD_ID
init|=
literal|"dbpedia"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_SOLR_CORE_NAME
init|=
literal|"dbpedia"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_SOLR_CORE_CONFIGURATION
init|=
literal|"dbpedia_26k.solrindex.bz2"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_INDEX_REL_PATH
init|=
name|File
operator|.
name|separatorChar
operator|+
literal|"target"
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|ManagedSolrServer
operator|.
name|DEFAULT_SOLR_DATA_DIR
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TEXT_FILE
init|=
literal|"merkel.txt"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TEXT_NLP_FILE
init|=
literal|"merkel_nlp.json"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Literal
name|EN_LANGUAGE
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DBPEDIA
init|=
literal|"http://dbpedia.org/resource/"
decl_stmt|;
comment|/**      * List used in {@link #testSetup()} to validate that all expected entities      * are contained in the SolrYard initialised based on the       * {@link #TEST_SOLR_CORE_CONFIGURATION}.      */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|REQUIRED_ENTITIES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|DBPEDIA
operator|+
literal|"Christian_Democratic_Union_(Germany)"
argument_list|,
name|DBPEDIA
operator|+
literal|"Angela_Merkel"
argument_list|,
name|DBPEDIA
operator|+
literal|"Germany"
argument_list|,
name|DBPEDIA
operator|+
literal|"Social_Democratic_Party_of_Germany"
argument_list|,
name|DBPEDIA
operator|+
literal|"Greece"
argument_list|)
decl_stmt|;
specifier|private
name|ContentItemFactory
name|cif
init|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|AnalysedTextFactory
name|atf
init|=
name|AnalysedTextFactory
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
specifier|private
name|ContentItem
name|ci
decl_stmt|;
specifier|private
name|String
name|content
decl_stmt|;
comment|/**      * Used with the {@link EnhancementStructureHelper} to validate Enhancement       * results      */
specifier|private
specifier|static
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
name|EXPECTED_ENHANCEMENT_VALUES
decl_stmt|;
static|static
block|{
name|EXPECTED_ENHANCEMENT_VALUES
operator|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
argument_list|()
expr_stmt|;
name|EXPECTED_ENHANCEMENT_VALUES
operator|.
name|put
argument_list|(
name|DC_CREATOR
argument_list|,
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|FstLinkingEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//adding null as expected for confidence makes it a required property
name|EXPECTED_ENHANCEMENT_VALUES
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get the working directory
comment|// use property substitution to test this feature!
name|String
name|prefix
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|==
literal|null
condition|?
literal|"."
else|:
literal|"${basedir}"
decl_stmt|;
name|String
name|solrServerDir
init|=
name|prefix
operator|+
name|TEST_INDEX_REL_PATH
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test Solr Server Directory: {}"
argument_list|,
name|solrServerDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ManagedSolrServer
operator|.
name|MANAGED_SOLR_DIR_PROPERTY
argument_list|,
name|solrServerDir
argument_list|)
expr_stmt|;
name|SolrYardConfig
name|config
init|=
operator|new
name|SolrYardConfig
argument_list|(
name|TEST_YARD_ID
argument_list|,
name|TEST_SOLR_CORE_NAME
argument_list|)
decl_stmt|;
name|config
operator|.
name|setAllowInitialisation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|setIndexConfigurationName
argument_list|(
name|TEST_SOLR_CORE_CONFIGURATION
argument_list|)
expr_stmt|;
comment|//the dbpedia default data
name|config
operator|.
name|setAllowInitialisation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//init from datafile provider
name|config
operator|.
name|setName
argument_list|(
literal|"DBpedia.org default data"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDescription
argument_list|(
literal|"Data used for FstLinkingEngie tests"
argument_list|)
expr_stmt|;
comment|// create the Yard used for the tests
name|IndexReference
name|solrIndexRef
init|=
name|IndexReference
operator|.
name|parse
argument_list|(
name|config
operator|.
name|getSolrServerLocation
argument_list|()
argument_list|)
decl_stmt|;
name|SolrServer
name|server
init|=
name|StandaloneEmbeddedSolrServerProvider
operator|.
name|getInstance
argument_list|()
operator|.
name|getSolrServer
argument_list|(
name|solrIndexRef
argument_list|,
name|config
operator|.
name|getIndexConfigurationName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to initialise SolrServer for testing"
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|core
operator|=
operator|(
operator|(
name|EmbeddedSolrServer
operator|)
name|server
operator|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCore
argument_list|(
name|solrIndexRef
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to get SolrCore '"
operator|+
name|config
operator|.
name|getIndexConfigurationName
argument_list|()
operator|+
literal|"' from SolrServer "
operator|+
name|server
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|yard
operator|=
operator|new
name|SolrYard
argument_list|(
name|server
argument_list|,
name|config
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//setup the index configuration
name|LanguageConfiguration
name|langConf
init|=
operator|new
name|LanguageConfiguration
argument_list|(
literal|"not.used"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"en;field=rdfs:label;generate=true"
block|}
argument_list|)
decl_stmt|;
name|fstConfig
operator|=
operator|new
name|IndexConfiguration
argument_list|(
name|langConf
argument_list|,
name|core
argument_list|,
name|FieldEncodingEnum
operator|.
name|SolrYard
argument_list|)
expr_stmt|;
name|fstConfig
operator|.
name|setExecutorService
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fstConfig
operator|.
name|setTypeField
argument_list|(
literal|"rdf:type"
argument_list|)
expr_stmt|;
name|fstConfig
operator|.
name|setRankingField
argument_list|(
literal|"entityhub:entityRank"
argument_list|)
expr_stmt|;
comment|//fstConfig.setEntityCacheManager(new FastLRUCacheManager(2048));
comment|//activate the FST config
name|fstConfig
operator|.
name|activate
argument_list|()
expr_stmt|;
comment|//activate this configuration
comment|//now create the FST modles and wait until finished
name|List
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|creationTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CorpusInfo
name|corpus
range|:
name|fstConfig
operator|.
name|getCorpora
argument_list|()
control|)
block|{
comment|//check if the fst does not exist and the fstInfo allows creation
if|if
condition|(
operator|!
name|corpus
operator|.
name|isFstFile
argument_list|()
operator|&&
name|corpus
operator|.
name|allowCreation
condition|)
block|{
comment|//create a task on the FST corpus creation service
name|creationTasks
operator|.
name|add
argument_list|(
name|fstConfig
operator|.
name|getExecutorService
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|CorpusCreationTask
argument_list|(
name|fstConfig
argument_list|,
name|corpus
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|creationTasks
control|)
block|{
comment|//wait for completion
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|//validate that the index contains the expected entities
name|validateTestIndex
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|validateTestIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"check availability of {} entities"
argument_list|,
name|REQUIRED_ENTITIES
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|context
range|:
name|REQUIRED_ENTITIES
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> check Entity {}"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Representation
name|rep
init|=
name|yard
operator|.
name|getRepresentation
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rep
operator|.
name|getId
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Data for Entity {}: \n {}"
argument_list|,
name|rep
operator|.
name|getId
argument_list|()
argument_list|,
name|ModelUtils
operator|.
name|getRepresentationInfo
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"   ... all Entities present"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|yard
operator|!=
literal|null
condition|)
block|{
name|yard
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|yard
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Initialises the {@link #ci} and {@link #content} fields for tests.      * It creates a ContentItem containing a '<code>plain/text</code>'       * {@link Blob} for the {@value #TEST_TEXT_FILE} and an {@link AnalysedText}      * filled with the NLP analysis results stored in       * {@link #TEST_TEXT_NLP_FILE}      * @return the {@link ContentItem} as used for the tests      * @throws IOException on any IO releated error while reading the test files      */
annotation|@
name|Before
specifier|public
name|void
name|setupTest
parameter_list|()
throws|throws
name|IOException
block|{
comment|//create a contentItem for the plain text used for testing
name|InputStream
name|is
init|=
name|FstLinkingEngineTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|TEST_TEXT_FILE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to load '"
operator|+
name|TEST_TEXT_FILE
operator|+
literal|"' via classpath"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|cif
operator|.
name|createContentItem
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|,
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|AnalysedText
name|at
init|=
name|atf
operator|.
name|createAnalysedText
argument_list|(
name|ci
argument_list|,
name|ci
operator|.
name|getBlob
argument_list|()
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//parse the prepared NLP results and add it to the ContentItem
name|is
operator|=
name|FstLinkingEngineTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|TEST_TEXT_NLP_FILE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to load '"
operator|+
name|TEST_TEXT_NLP_FILE
operator|+
literal|"' via classpath"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|AnalyzedTextParser
operator|.
name|getDefaultInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|at
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//set the language of the contentItem
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|DC_LANGUAGE
argument_list|,
name|EN_LANGUAGE
argument_list|)
argument_list|)
expr_stmt|;
comment|//set the contentItem and also the content
name|this
operator|.
name|ci
operator|=
name|ci
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|at
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanupTest
parameter_list|()
block|{
name|ci
operator|=
literal|null
expr_stmt|;
name|content
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFstLinkingWithProperNouns
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dict
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|dict
operator|.
name|put
argument_list|(
name|PROCESSED_LANGUAGES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en;lmmtip;uc=LINK;prob=0.75;pprob=0.75"
argument_list|)
argument_list|)
expr_stmt|;
name|dict
operator|.
name|put
argument_list|(
name|PROCESS_ONLY_PROPER_NOUNS_STATE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TextProcessingConfig
name|tpc
init|=
name|TextProcessingConfig
operator|.
name|createInstance
argument_list|(
name|dict
argument_list|)
decl_stmt|;
name|EntityLinkerConfig
name|elc
init|=
operator|new
name|EntityLinkerConfig
argument_list|()
decl_stmt|;
name|elc
operator|.
name|setMinFoundTokens
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//this is assumed by this test
name|elc
operator|.
name|setRedirectProcessingMode
argument_list|(
name|RedirectProcessingMode
operator|.
name|FOLLOW
argument_list|)
expr_stmt|;
name|FstLinkingEngine
name|engine
init|=
operator|new
name|FstLinkingEngine
argument_list|(
literal|"proper-noun-linking"
argument_list|,
name|fstConfig
argument_list|,
name|tpc
argument_list|,
name|elc
argument_list|)
decl_stmt|;
name|processConentItem
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|validateEnhancements
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFstLinkingWithNouns
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dict
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|dict
operator|.
name|put
argument_list|(
name|PROCESSED_LANGUAGES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en;lmmtip;uc=LINK;prob=0.75;pprob=0.75"
argument_list|)
argument_list|)
expr_stmt|;
name|dict
operator|.
name|put
argument_list|(
name|PROCESS_ONLY_PROPER_NOUNS_STATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TextProcessingConfig
name|tpc
init|=
name|TextProcessingConfig
operator|.
name|createInstance
argument_list|(
name|dict
argument_list|)
decl_stmt|;
name|EntityLinkerConfig
name|elc
init|=
operator|new
name|EntityLinkerConfig
argument_list|()
decl_stmt|;
name|elc
operator|.
name|setMinFoundTokens
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//this is assumed by this test
name|elc
operator|.
name|setRedirectProcessingMode
argument_list|(
name|RedirectProcessingMode
operator|.
name|FOLLOW
argument_list|)
expr_stmt|;
name|FstLinkingEngine
name|engine
init|=
operator|new
name|FstLinkingEngine
argument_list|(
literal|"proper-noun-linking"
argument_list|,
name|fstConfig
argument_list|,
name|tpc
argument_list|,
name|elc
argument_list|)
decl_stmt|;
name|processConentItem
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|validateEnhancements
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param expected      */
specifier|private
name|int
index|[]
name|validateEnhancements
parameter_list|()
block|{
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
argument_list|(
name|EXPECTED_ENHANCEMENT_VALUES
argument_list|)
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|ENHANCER_EXTRACTED_FROM
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|int
index|[]
name|num
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|num
index|[
literal|0
index|]
operator|=
name|EnhancementStructureHelper
operator|.
name|validateAllTextAnnotations
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|content
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... validated {} fise:TextAnnotation"
argument_list|,
name|num
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|num
index|[
literal|1
index|]
operator|=
name|EnhancementStructureHelper
operator|.
name|validateAllEntityAnnotations
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... validated {} fise:EntityAnnotation"
argument_list|,
name|num
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|num
return|;
block|}
comment|/**      * Processes the {@link #ci} with the parsed engine.      * @param engine      * @return returns {@link #ci} as convenience      * @throws EngineException      */
specifier|private
name|ContentItem
name|processConentItem
parameter_list|(
name|FstLinkingEngine
name|engine
parameter_list|)
throws|throws
name|EngineException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The FST Linking engine is expected to enhance the "
operator|+
literal|"test ContentItem EnhancementEngine.ENHANCE_ASYNC"
argument_list|,
name|EnhancementEngine
operator|.
name|ENHANCE_ASYNC
argument_list|,
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
return|return
name|ci
return|;
block|}
block|}
end_class

end_unit

