begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Enumeration that describes supported Solr Field encodings for multiple  * languages. In Solr this might be represented by multiple explicitly  * defined fields, or by a dynamic field configuration. With the Lucene FST   * based entity linking engine this is used to allow the configuration  * of a single field (e.g. rdfs:label) and an algorithm based generation  * of field names for specific languages (e.g. "rdfs:label@en",   * "rdfs:label@de", "rdfs:label@de-AT", ...).  *<p>  * This enumeration also defines some utility methods for encoding and decoding  * of fields  *   * @author Rupert Westenthaler  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|FieldEncodingEnum
block|{
comment|/**      * No encoding is used. This will require to explicitly set a field for      * all processed languages.      */
name|None
block|,
comment|/**      * The encoding as used by the SolrYard implementation of the Entityhub      */
name|SolrYard
block|,
comment|/**      * '<code>{lang}-{field-name}</code>' encoding      */
name|MinusPrefix
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|'-'
argument_list|)
block|,
comment|/**      * '<code>{lang}_{field-name}</code>' encoding      */
name|UnderscorePrefix
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|'_'
argument_list|)
block|,
comment|/**      * '<code>{field-name}-{lang}</code>' encoding      */
name|MinusSuffix
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|'-'
argument_list|)
block|,
comment|/**      * '<code>{field-name}_{lang}</code>' encoding      */
name|UnderscoreSuffix
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|'_'
argument_list|)
block|,
comment|/**      * '<code>{lang}@{field-name}</code>' encoding      */
name|AtPrefix
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|'@'
argument_list|)
block|,
comment|/**      * '<code>{field-name}@{lang}</code>' encoding      */
name|AtSuffix
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|'@'
argument_list|)
block|;
specifier|private
name|boolean
name|prefix
decl_stmt|;
specifier|private
name|boolean
name|suffix
decl_stmt|;
specifier|private
name|char
name|sep
decl_stmt|;
specifier|private
name|FieldEncodingEnum
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FieldEncodingEnum
parameter_list|(
name|boolean
name|prefix
parameter_list|,
name|boolean
name|suffix
parameter_list|,
name|char
name|sep
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
name|this
operator|.
name|sep
operator|=
name|sep
expr_stmt|;
block|}
comment|/**      * Encodes a Solr index field holding {@link Double} values.      * @param field the field (as configured by the user)      * @param encoding the Encoding      * @return Encodes the field if {@link FieldEncodingEnum#SolrYard}. Otherwise      * it returns the parsed field value.      */
specifier|public
specifier|static
name|String
name|encodeDouble
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldEncodingEnum
name|encoding
parameter_list|)
block|{
if|if
condition|(
name|encoding
operator|==
name|SolrYard
condition|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"dou"
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|field
return|;
block|}
block|}
comment|/**      * Encodes a Solr index field holding {@link Float} values.      * @param field the field (as configured by the user)      * @param encoding the Encoding      * @return Encodes the field if {@link FieldEncodingEnum#SolrYard}. Otherwise      * it returns the parsed field value.      */
specifier|public
specifier|static
name|String
name|encodeFloat
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldEncodingEnum
name|encoding
parameter_list|)
block|{
if|if
condition|(
name|encoding
operator|==
name|SolrYard
condition|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"flo"
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|field
return|;
block|}
block|}
comment|/**      * Encodes a Solr index field holding URIs.      * @param field the field (as configured by the user)      * @param encoding the Encoding      * @return Encodes the field if {@link FieldEncodingEnum#SolrYard}. Otherwise      * it returns the parsed field value.      */
specifier|public
specifier|static
name|String
name|encodeUri
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldEncodingEnum
name|encoding
parameter_list|)
block|{
if|if
condition|(
name|encoding
operator|==
name|SolrYard
condition|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"ref"
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|field
return|;
block|}
block|}
comment|/**      * encodes the parsed field and language based on the encoding defined      * by this enum instance      * @param field the field      * @param language the language      * @return the encoded field      */
specifier|public
specifier|static
name|String
name|encodeLanguage
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldEncodingEnum
name|encoding
parameter_list|,
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
name|encoding
operator|==
name|None
condition|)
block|{
return|return
name|field
return|;
block|}
if|if
condition|(
name|encoding
operator|==
name|SolrYard
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|StringBuilder
name|encoded
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|.
name|prefix
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|encoded
operator|.
name|append
argument_list|(
name|language
argument_list|)
operator|.
name|append
argument_list|(
name|encoding
operator|.
name|sep
argument_list|)
expr_stmt|;
block|}
name|encoded
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|.
name|suffix
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|encoded
operator|.
name|append
argument_list|(
name|encoding
operator|.
name|sep
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
return|return
name|encoded
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|parseLanguage
parameter_list|(
name|String
name|value
parameter_list|,
name|FieldEncodingEnum
name|encoding
parameter_list|,
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|encoding
operator|==
name|None
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|encoding
operator|==
name|SolrYard
condition|)
block|{
name|int
name|atIndex
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
name|int
name|slashIndex
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
comment|//expect @{lang}/{field}/
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
name|field
argument_list|,
name|slashIndex
argument_list|)
operator|!=
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|-
name|field
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|//no match
block|}
if|if
condition|(
name|atIndex
operator|==
literal|0
operator|&&
name|slashIndex
operator|>
literal|0
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|slashIndex
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|//no match
block|}
block|}
if|if
condition|(
name|encoding
operator|.
name|prefix
condition|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|endsWith
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|//no match
block|}
comment|//just subtract the field and the sep from the value
return|return
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
name|field
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
if|if
condition|(
name|encoding
operator|.
name|suffix
condition|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|startsWith
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|//no match
block|}
comment|//just cut the field and the sep from the value
return|return
name|value
operator|.
name|substring
argument_list|(
name|field
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_enum

end_unit

