begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|CacheRegenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|FastLRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link EntityCacheManager} based on the Solr  * {@link FastLRUCache} implementation  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|FastLRUCacheManager
implements|implements
name|EntityCacheManager
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|RefCounted
argument_list|<
name|EntityCache
argument_list|>
name|current
decl_stmt|;
specifier|private
specifier|final
name|CacheRegenerator
name|regenerator
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
decl_stmt|;
comment|/**      * Creates a cache manager instance with the parsed maximum size and no       * support for autowarming      * @param size the maximum size or values<= 0 to use the default size      */
specifier|public
name|FastLRUCacheManager
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
argument_list|(
name|size
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a cache manager instance with the parsed maximum size and support      * for autowarming.      * @param size the maximum size      * @param autowarmCount the number of documents added to the new cache based      * on entries in an old version      * @param regenerator the regenerator instance used for autowarming      */
specifier|public
name|FastLRUCacheManager
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|autowarmCount
parameter_list|,
name|CacheRegenerator
name|regenerator
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> create {} (size: {}| autowarmCount: {}| regenerator: {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
block|,
name|size
block|,
name|autowarmCount
block|,
name|regenerator
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Tagging Document Cache"
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regenerator
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"autowarmCount"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|autowarmCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|config
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|regenerator
operator|=
name|regenerator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RefCounted
argument_list|<
name|EntityCache
argument_list|>
name|getCache
parameter_list|(
name|Object
name|version
parameter_list|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
operator|||
operator|!
name|current
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> invalidate EntityCache for version {}"
argument_list|,
name|current
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|//remove the reference to the old instance. This will allow to
comment|//destroy the old cache as soon as it is no longer used
name|current
operator|.
name|decref
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"  ... {} remaining users for invalidated Cache"
argument_list|,
name|current
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
comment|//create a new cache
name|log
operator|.
name|debug
argument_list|(
literal|"> create EntityCache for version {}"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|SolrCache
argument_list|<
name|Integer
argument_list|,
name|Document
argument_list|>
name|cache
init|=
operator|new
name|FastLRUCache
argument_list|<
name|Integer
argument_list|,
name|Document
argument_list|>
argument_list|()
decl_stmt|;
name|cache
operator|.
name|init
argument_list|(
name|config
argument_list|,
literal|null
argument_list|,
name|regenerator
argument_list|)
expr_stmt|;
name|current
operator|=
operator|new
name|RefCountedImpl
argument_list|(
operator|new
name|SolrEntityCache
argument_list|(
name|version
argument_list|,
name|cache
argument_list|)
argument_list|)
expr_stmt|;
comment|//add a reference to the new cache by this class. This will be removed
comment|//as soon as the instance is outdated
name|current
operator|.
name|incref
argument_list|()
expr_stmt|;
block|}
name|current
operator|.
name|incref
argument_list|()
expr_stmt|;
comment|//this increase is for the holder of the returned instance
name|log
operator|.
name|debug
argument_list|(
literal|"> increase RefCount for EntityCache for version {} to {}"
argument_list|,
name|version
argument_list|,
name|current
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|decref
argument_list|()
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[finalize] EntityCache Manager was not closed. This can "
operator|+
literal|"cause Memory Leaks as Cached Entities will be kept in "
operator|+
literal|"Memory until finalization!"
argument_list|)
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@link RefCounted} implementation that closes the {@link SolrEntityCache}      * when {@link #close()} is called by the supoer implementation.      *       * @author Rupert Westenthaler      *      */
specifier|protected
class|class
name|RefCountedImpl
extends|extends
name|RefCounted
argument_list|<
name|EntityCache
argument_list|>
block|{
specifier|public
name|RefCountedImpl
parameter_list|(
name|SolrEntityCache
name|resource
parameter_list|)
block|{
name|super
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decref
parameter_list|()
block|{
name|super
operator|.
name|decref
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> decrease RefCount for EntityCache for version {} to {}"
argument_list|,
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|current
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * closes the {@link SolrEntityCache}          */
specifier|protected
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> close EntityCache for version {}"
argument_list|,
name|current
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SolrEntityCache
operator|)
name|get
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

