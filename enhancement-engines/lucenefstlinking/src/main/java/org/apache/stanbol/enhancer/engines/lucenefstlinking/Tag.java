begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_comment
comment|/**  * minimal helper class to represent a Tag.<p>  * TODO: This will need to collect additional values from the suggested  * SolrDocuments:<ul>  *<li> the type information - {@link EntityLinkerConfig#TYPE_FIELD} values  *<li>  *<li>  *<li>  *</ul>  * @author Rupert Westenthaler  *  */
end_comment

begin_class
class|class
name|Tag
block|{
comment|/**      * the start index within the {@link AnalysedText}      */
specifier|final
name|int
index|[]
name|span
decl_stmt|;
comment|/**      * Matching documents      */
specifier|private
name|Set
argument_list|<
name|Match
argument_list|>
name|ids
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Match
argument_list|>
name|suggestions
decl_stmt|;
specifier|private
name|String
name|anchor
decl_stmt|;
name|Tag
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|span
operator|=
operator|new
name|int
index|[]
block|{
name|start
block|,
name|end
block|}
expr_stmt|;
block|}
name|Tag
parameter_list|(
name|int
index|[]
name|span
parameter_list|)
block|{
name|this
operator|.
name|span
operator|=
name|span
expr_stmt|;
block|}
specifier|public
name|void
name|addIds
parameter_list|(
name|Set
argument_list|<
name|Match
argument_list|>
name|ids
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|ids
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|ids
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Set
argument_list|<
name|Match
argument_list|>
name|getMatches
parameter_list|()
block|{
return|return
name|ids
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_SET
else|:
name|ids
return|;
block|}
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|span
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|int
name|getEnd
parameter_list|()
block|{
return|return
name|span
index|[
literal|1
index|]
return|;
block|}
comment|/**      * Setter for the Anchor text       * @param anchor      */
specifier|public
name|void
name|setAnchor
parameter_list|(
name|String
name|anchor
parameter_list|)
block|{
name|this
operator|.
name|anchor
operator|=
name|anchor
expr_stmt|;
block|}
comment|/**      * Getter for the Anchor text      * @return the fise:selected-text value      */
specifier|public
name|String
name|getAnchor
parameter_list|()
block|{
return|return
name|anchor
return|;
block|}
specifier|public
name|void
name|setSuggestions
parameter_list|(
name|List
argument_list|<
name|Match
argument_list|>
name|suggestions
parameter_list|)
block|{
name|this
operator|.
name|suggestions
operator|=
name|suggestions
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Match
argument_list|>
name|getSuggestions
parameter_list|()
block|{
return|return
name|suggestions
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|span
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Tag
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|span
argument_list|,
operator|(
operator|(
name|Tag
operator|)
name|o
operator|)
operator|.
name|span
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"Tag"
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|span
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
specifier|final
name|Comparator
argument_list|<
name|int
index|[]
argument_list|>
name|SPAN_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
index|[]
name|a
parameter_list|,
name|int
index|[]
name|b
parameter_list|)
block|{
name|int
name|c
init|=
name|a
index|[
literal|0
index|]
operator|<
name|b
index|[
literal|0
index|]
condition|?
operator|-
literal|1
else|:
name|a
index|[
literal|0
index|]
operator|>
name|b
index|[
literal|0
index|]
condition|?
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|a
index|[
literal|1
index|]
operator|>
name|b
index|[
literal|1
index|]
condition|?
operator|-
literal|1
else|:
name|a
index|[
literal|1
index|]
operator|<
name|b
index|[
literal|1
index|]
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Returns the score of the best {@link #getSuggestions() suggestion}      * @return      */
specifier|public
name|double
name|getScore
parameter_list|()
block|{
return|return
name|suggestions
operator|==
literal|null
operator|||
name|suggestions
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
return|;
block|}
block|}
end_class

end_unit

