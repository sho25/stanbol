begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|WildcardFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|cache
operator|.
name|EntityCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensextant
operator|.
name|solrtexttagger
operator|.
name|TaggerFstCorpus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Holds the configuration of the index used by the FST linking engine.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|IndexConfiguration
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SolrCore
name|index
decl_stmt|;
comment|/**      * The type field      */
specifier|private
name|String
name|typeField
decl_stmt|;
comment|/**      * The redirect field      */
specifier|private
name|String
name|redirectField
decl_stmt|;
comment|/**      * The entityRanking field      */
specifier|private
name|String
name|rankingField
decl_stmt|;
comment|/**      * FST corpus configuration      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CorpusInfo
argument_list|>
name|corpusInfos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CorpusInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * {@link ExecutorService} used to create {@link TaggerFstCorpus} instances      * at runtime.      */
specifier|protected
name|ExecutorService
name|executorService
decl_stmt|;
comment|/**      * The encoding used by SolrFields (e.g. to define label fields for different      * languages).      */
specifier|private
specifier|final
name|FieldEncodingEnum
name|fieldEncoding
decl_stmt|;
comment|/**      * The instance used to retrieve/create the cache for Lucene {@link Document}s      * of Entities.      */
specifier|private
name|EntityCacheManager
name|entityCacheManager
decl_stmt|;
comment|/**      * The FST corpus used for linking regardless of the language of the      * document      */
specifier|private
name|CorpusInfo
name|defaultFstCorpus
decl_stmt|;
specifier|private
specifier|final
name|LanguageConfiguration
name|fstConfig
decl_stmt|;
specifier|private
name|boolean
name|active
init|=
literal|false
decl_stmt|;
specifier|private
name|File
name|fstDirectory
decl_stmt|;
comment|/**      * Property used to configure the FieldName encoding of the SolrIndex. This      * is mainly needed for label fields of different languages (e.g. by using       * the iso language code as prefix/suffix of Solr fields. However this also      * adds support for SolrIndexes encoded as specified by the Stanbol      * Entityhub SolrYard implementation. See {@link FieldEncodingEnum} for       * supported values      */
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ENCODING
init|=
literal|"enhancer.engines.linking.solrfst.fieldEncoding"
decl_stmt|;
comment|/**      * The name of the Solr field storing rankings for entities. Entities with a      * higher value are considered as better (more popular).      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_RANKING_FIELD
init|=
literal|"enhancer.engines.linking.solrfst.rankingField"
decl_stmt|;
comment|/**      * The name of the Solr field holding the entity type information      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_TYPE_FIELD
init|=
literal|"enhancer.engines.linking.solrfst.typeField"
decl_stmt|;
comment|/**      * Language configuration defining the language, solr field and the name of the      * FST file. The FST file is looked up using the {@link DataFileProvider}.      */
specifier|public
specifier|static
specifier|final
name|String
name|FST_CONFIG
init|=
literal|"enhancer.engines.linking.solrfst.fstconfig"
decl_stmt|;
comment|/**      * The folder used to store the FST files. The {@link DEFAULT_FST_FOLDER default} is       * '<code>${solr-data-dir}/fst</code>' - this is '<code>./fst</code>' relative to the      * {@link SolrCore#getDataDir()} of the current SolrCore.      */
specifier|public
specifier|static
specifier|final
name|String
name|FST_FOLDER
init|=
literal|"enhancer.engines.linking.solrfst.fstfolder"
decl_stmt|;
comment|/**      * The default of the FST folder is '<code>${solr-data-dir}/fst</code>' -       * this is '<code>./fst</code>' relative to the {@link SolrCore#getDataDir()}       * of the current SolrCore.      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FST_FOLDER
init|=
literal|"${solr-data-dir}/fst"
decl_stmt|;
comment|/**      * By default runtime generation for the FST is deactivated. Use the      * {@link PARAM_RUNTIME_GENERATION} to enable it.      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RUNTIME_GENERATION
init|=
literal|false
decl_stmt|;
comment|/**      * Parameter that specifies if FST files are allowed to be generated at runtime.      * Enabling this will require (1) write access to the SolrCore directory and      * (2) a lot of Memory and CPU usage during the generation.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_RUNTIME_GENERATION
init|=
literal|"generate"
decl_stmt|;
comment|/**      * Parameter used by the {@link IndexConfiguration#FST_CONFIG} to configure the solrField with      * the stored labels. If not defined this defaults to the configured      * {@link PARAM_FIELD}.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_STORE_FIELD
init|=
literal|"stored"
decl_stmt|;
comment|/**      * Parameter used by the {@link IndexConfiguration#FST_CONFIG} to configure the Solr Field       * with the indexed labels used to buld the FST corpus.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_FIELD
init|=
literal|"field"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD
init|=
literal|"rdfs:label"
decl_stmt|;
comment|/**      * Parameter used by the {@link IndexConfiguration#FST_CONFIG} to configure the name of the fst      * file for a language      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_FST
init|=
literal|"fst"
decl_stmt|;
specifier|public
name|IndexConfiguration
parameter_list|(
name|LanguageConfiguration
name|fstConfig
parameter_list|,
name|SolrCore
name|index
parameter_list|,
name|FieldEncodingEnum
name|fieldEncoding
parameter_list|)
block|{
if|if
condition|(
name|fstConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed FST configuration MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|fstConfig
operator|=
name|fstConfig
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
operator|||
name|index
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed SolrCore MUST NOT be NULL nore closed!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
if|if
condition|(
name|fieldEncoding
operator|==
literal|null
condition|)
block|{
name|fieldEncoding
operator|=
name|FieldEncodingEnum
operator|.
name|None
expr_stmt|;
block|}
name|this
operator|.
name|fieldEncoding
operator|=
name|fieldEncoding
expr_stmt|;
block|}
specifier|public
name|CorpusInfo
name|setDefaultCorpus
parameter_list|(
name|CorpusInfo
name|corpus
parameter_list|)
block|{
name|CorpusInfo
name|oldDefault
init|=
name|defaultFstCorpus
decl_stmt|;
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|defaultFstCorpus
operator|=
name|corpus
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|defaultFstCorpus
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|oldDefault
return|;
block|}
specifier|protected
name|CorpusInfo
name|addCorpus
parameter_list|(
name|CorpusInfo
name|corpus
parameter_list|)
block|{
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
return|return
name|corpusInfos
operator|.
name|put
argument_list|(
name|corpus
operator|.
name|language
argument_list|,
name|corpus
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|CorpusInfo
name|removeCorpus
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|corpusInfos
operator|.
name|remove
argument_list|(
name|language
argument_list|)
return|;
block|}
comment|/**      * @return the fieldEncoding      */
specifier|public
specifier|final
name|FieldEncodingEnum
name|getFieldEncoding
parameter_list|()
block|{
return|return
name|fieldEncoding
return|;
block|}
comment|/**      * @return the typeField      */
specifier|public
specifier|final
name|String
name|getEncodedTypeField
parameter_list|()
block|{
return|return
name|typeField
return|;
block|}
comment|/**      * Sets AND encodes the parsed value (based on the specified       * {@link #getFieldEncoding() FieldEncoding})      * @param typeField the typeField to set      */
specifier|public
specifier|final
name|void
name|setTypeField
parameter_list|(
name|String
name|typeField
parameter_list|)
block|{
name|this
operator|.
name|typeField
operator|=
name|typeField
operator|==
literal|null
condition|?
literal|null
else|:
name|FieldEncodingEnum
operator|.
name|encodeUri
argument_list|(
name|typeField
argument_list|,
name|fieldEncoding
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the redirectField      */
specifier|public
specifier|final
name|String
name|getEncodedRedirectField
parameter_list|()
block|{
return|return
name|redirectField
return|;
block|}
comment|/**      * Sets AND encodes the parsed value (based on the specified       * {@link #getFieldEncoding() FieldEncoding})      * @param redirectField the redirectField to set      */
specifier|public
specifier|final
name|void
name|setRedirectField
parameter_list|(
name|String
name|redirectField
parameter_list|)
block|{
name|this
operator|.
name|redirectField
operator|=
name|redirectField
operator|==
literal|null
condition|?
literal|null
else|:
name|FieldEncodingEnum
operator|.
name|encodeUri
argument_list|(
name|redirectField
argument_list|,
name|fieldEncoding
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the rankingField      */
specifier|public
specifier|final
name|String
name|getEncodedRankingField
parameter_list|()
block|{
return|return
name|rankingField
return|;
block|}
comment|/**      * Sets AND encodes the parsed value (based on the specified       * {@link #getFieldEncoding() FieldEncoding})      * @param rankingField the rankingField to set      */
specifier|public
specifier|final
name|void
name|setRankingField
parameter_list|(
name|String
name|rankingField
parameter_list|)
block|{
name|this
operator|.
name|rankingField
operator|=
name|rankingField
operator|==
literal|null
condition|?
literal|null
else|:
name|FieldEncodingEnum
operator|.
name|encodeFloat
argument_list|(
name|rankingField
argument_list|,
name|fieldEncoding
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorpusInfo
name|getCorpus
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|corpusInfos
operator|.
name|get
argument_list|(
name|language
argument_list|)
return|;
block|}
comment|/**      * Getter for the languages of all configured FST corpora      * @return the languages of all configured FST corpora      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getCorpusLanguages
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|corpusInfos
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Read-only collection of all {@link CorpusInfo}s defined for this      * configuration.      * @return      */
specifier|public
name|Collection
argument_list|<
name|CorpusInfo
argument_list|>
name|getCorpora
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|corpusInfos
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CorpusInfo
name|getDefaultCorpus
parameter_list|()
block|{
return|return
name|defaultFstCorpus
return|;
block|}
specifier|public
name|void
name|setExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
comment|/**      * The FST configuration      * @return      */
specifier|public
name|LanguageConfiguration
name|getFstConfig
parameter_list|()
block|{
return|return
name|fstConfig
return|;
block|}
specifier|public
name|SolrCore
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|void
name|setEntityCacheManager
parameter_list|(
name|EntityCacheManager
name|entityCacheManager
parameter_list|)
block|{
name|this
operator|.
name|entityCacheManager
operator|=
name|entityCacheManager
expr_stmt|;
block|}
specifier|public
name|EntityCacheManager
name|getEntityCacheManager
parameter_list|()
block|{
return|return
name|entityCacheManager
return|;
block|}
specifier|public
name|File
name|getFstDirectory
parameter_list|()
block|{
return|return
name|fstDirectory
return|;
block|}
specifier|public
name|void
name|setFstDirectory
parameter_list|(
name|File
name|fstDirectory
parameter_list|)
block|{
name|this
operator|.
name|fstDirectory
operator|=
name|fstDirectory
expr_stmt|;
block|}
comment|/**      * Deactivates this {@link IndexConfiguration}      */
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|active
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * If this {@link IndexConfiguration} is still active      * @return<code>true</code> if still active. Otherwise<code>false</code>      */
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
comment|/**      * Activated this indexing configuration by inspecting the {@link SolrCore}      * based on the provided configuration       * @return      */
specifier|public
name|boolean
name|activate
parameter_list|()
block|{
name|active
operator|=
literal|true
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
init|=
name|index
operator|.
name|getSearcher
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|processFstConfig
argument_list|(
name|searcherRef
operator|.
name|get
argument_list|()
operator|.
name|getAtomicReader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|//in case of any excpetion
throw|throw
name|e
throw|;
comment|//re-throw
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to activate IndexConfiguration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
comment|//decrease the count on the searcher
block|}
block|}
comment|/**      * This method combines the {@link #fstConfig} with the data present in the      * {@link SolrCore}.      * @param indexReader The {@link AtomicReader} has access to the actual      * fields present in the {@link SolrCore}. It is used to compare field      * configurations in the {@link #fstConfig} with fields present in the solr      * index.      * @return if any FST configuration was successfully processed      */
specifier|private
name|boolean
name|processFstConfig
parameter_list|(
name|AtomicReader
name|indexReader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No SolrCore set for this configuration"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fstDirectory
operator|==
literal|null
condition|)
block|{
name|fstDirectory
operator|=
operator|new
name|File
argument_list|(
name|index
operator|.
name|getDataDir
argument_list|()
argument_list|,
literal|"fst"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"> process FST config for {} (FST dir: {})"
argument_list|,
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|fstDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//init the fstDirectory
if|if
condition|(
name|fstDirectory
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Default FST directory exists and "
operator|+
literal|"is a File. Use #setFstDirectory() to set different one"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fstDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|fstDirectory
argument_list|)
expr_stmt|;
block|}
name|IndexSchema
name|schema
init|=
name|index
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|boolean
name|foundCorpus
init|=
literal|false
decl_stmt|;
comment|//(0) get basic parameters of the default configuration
name|log
operator|.
name|info
argument_list|(
literal|" - default config"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultParams
init|=
name|fstConfig
operator|.
name|getDefaultParameters
argument_list|()
decl_stmt|;
name|String
name|fstName
init|=
name|defaultParams
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_FST
argument_list|)
decl_stmt|;
name|String
name|indexField
init|=
name|defaultParams
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexField
operator|==
literal|null
condition|)
block|{
comment|//apply the defaults if null
name|indexField
operator|=
name|IndexConfiguration
operator|.
name|DEFAULT_FIELD
expr_stmt|;
block|}
name|String
name|storeField
init|=
name|defaultParams
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_STORE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeField
operator|==
literal|null
condition|)
block|{
comment|//apply the defaults if null
name|storeField
operator|=
name|indexField
expr_stmt|;
block|}
if|if
condition|(
name|fstName
operator|==
literal|null
condition|)
block|{
comment|//use default
name|fstName
operator|=
name|getDefaultFstFileName
argument_list|(
name|indexField
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|allowCreation
decl_stmt|;
name|String
name|allowCreationString
init|=
name|defaultParams
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_RUNTIME_GENERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowCreationString
operator|==
literal|null
condition|)
block|{
name|allowCreation
operator|=
name|IndexConfiguration
operator|.
name|DEFAULT_RUNTIME_GENERATION
expr_stmt|;
block|}
else|else
block|{
name|allowCreation
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|allowCreationString
argument_list|)
expr_stmt|;
block|}
comment|//This are all fields actually present in the index (distinguished with
comment|//those defined in the schema). This also includes actual instances of
comment|//dynamic field definition in the schema.
name|FieldInfos
name|fieldInfos
init|=
name|indexReader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
comment|//we need this twice
comment|//(1) in case the fstConfig uses a wildcard we need to search for
comment|//    languages present in the SolrIndex. For that we use the indexReader
comment|//    to get the FieldInfos and match them against FST files in the FST
comment|//    directory and FieldType definitions in the schema of the SolrCore
comment|//NOTE: this needs only do be done if wildcards are enabled in the fstConfig
if|if
condition|(
name|fstConfig
operator|.
name|useWildcard
argument_list|()
condition|)
block|{
comment|//(1.a) search for present FST files in the FST directory
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|presentFstFiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|WildcardFileFilter
name|fstFilter
init|=
operator|new
name|WildcardFileFilter
argument_list|(
name|fstName
operator|+
literal|".*.fst"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|File
argument_list|>
name|fstFiles
init|=
name|FileUtils
operator|.
name|iterateFiles
argument_list|(
name|fstDirectory
argument_list|,
name|fstFilter
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|fstFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|fstFile
init|=
name|fstFiles
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fstFileName
init|=
name|fstFile
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//files are named such as "{name}.{lang}.fst"
name|String
name|language
init|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|FilenameUtils
operator|.
name|getBaseName
argument_list|(
name|fstFileName
argument_list|)
argument_list|)
decl_stmt|;
name|presentFstFiles
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|fstFile
argument_list|)
expr_stmt|;
block|}
comment|//(1.b) iterate over the fields in the Solr index and search for
comment|//      matches against the configured indexField name
name|String
name|fieldWildcard
init|=
name|FieldEncodingEnum
operator|.
name|encodeLanguage
argument_list|(
name|indexField
argument_list|,
name|fieldEncoding
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|fieldInfos
control|)
block|{
comment|//try to match the field names against the wildcard
if|if
condition|(
name|FilenameUtils
operator|.
name|wildcardMatch
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|fieldWildcard
argument_list|)
condition|)
block|{
comment|//for matches parse the language from the field name
name|String
name|language
init|=
name|FieldEncodingEnum
operator|.
name|parseLanguage
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|fieldEncoding
argument_list|,
name|indexField
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
comment|//successfully parsed language
comment|//is current language is enabled?
name|fstConfig
operator|.
name|isLanguage
argument_list|(
name|language
argument_list|)
operator|&&
comment|//is there no explicit configuration for this language?
operator|!
name|fstConfig
operator|.
name|getExplicitlyIncluded
argument_list|()
operator|.
name|contains
argument_list|(
name|language
argument_list|)
condition|)
block|{
comment|//generate the FST file name
name|StringBuilder
name|fstFileName
init|=
operator|new
name|StringBuilder
argument_list|(
name|fstName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fstFileName
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
name|fstFileName
operator|.
name|append
argument_list|(
literal|".fst"
argument_list|)
expr_stmt|;
name|File
name|fstFile
init|=
operator|new
name|File
argument_list|(
name|fstDirectory
argument_list|,
name|fstFileName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//get the FieldType of the field from the Solr schema
name|FieldType
name|fieldType
init|=
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
comment|//if the fieldType is present
if|if
condition|(
name|allowCreation
operator|||
name|fstFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|//and FST is present or can be created
comment|//we need also to check if the stored field with
comment|//the labels is present
comment|//get the stored Field and check if it is present!
name|String
name|storeFieldName
decl_stmt|;
if|if
condition|(
name|storeField
operator|==
literal|null
condition|)
block|{
comment|//storeField == indexField
name|storeFieldName
operator|=
name|fieldInfo
operator|.
name|name
expr_stmt|;
block|}
else|else
block|{
comment|// check that the storeField is present in the index
name|storeFieldName
operator|=
name|FieldEncodingEnum
operator|.
name|encodeLanguage
argument_list|(
name|storeField
argument_list|,
name|fieldEncoding
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|FieldInfo
name|storedFieldInfos
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|storeFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedFieldInfos
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} because Stored Field {} "
operator|+
literal|"for IndexField {} does not exist! "
argument_list|,
operator|new
name|Object
index|[]
block|{
name|language
block|,
name|storeFieldName
block|,
name|fieldInfo
operator|.
name|name
block|}
argument_list|)
expr_stmt|;
name|storeFieldName
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|storeFieldName
operator|!=
literal|null
condition|)
block|{
comment|// == valid configuration
name|CorpusInfo
name|fstInfo
init|=
operator|new
name|CorpusInfo
argument_list|(
name|language
argument_list|,
name|fieldInfo
operator|.
name|name
argument_list|,
name|storeFieldName
argument_list|,
name|fieldType
operator|.
name|getAnalyzer
argument_list|()
argument_list|,
name|fstFile
argument_list|,
name|allowCreation
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... init {} "
argument_list|,
name|fstInfo
argument_list|)
expr_stmt|;
name|addCorpus
argument_list|(
name|fstInfo
argument_list|)
expr_stmt|;
name|foundCorpus
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} (field: {}) because "
operator|+
literal|"FST file '{}' does not exist and runtime creation "
operator|+
literal|"is deactivated!"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|language
block|,
name|fieldInfo
operator|.
name|name
block|,
name|fstFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} becuase unknown fieldtype "
operator|+
literal|"for SolrFied {}"
argument_list|,
name|language
argument_list|,
name|fieldInfo
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else the field matched the wildcard, but has not passed the
comment|//encoding test.
block|}
comment|//Solr field does not match the field definition in the config
block|}
comment|// end iterate over all fields in the SolrIndex
block|}
comment|//else Wildcard not enabled in the fstConfig
comment|//(2) process explicit configuration for configured languages
for|for
control|(
name|String
name|language
range|:
name|fstConfig
operator|.
name|getExplicitlyIncluded
argument_list|()
control|)
block|{
comment|//(2.a) get the language specific config (with fallback to default)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
name|fstConfig
operator|.
name|getLanguageParams
argument_list|(
name|language
argument_list|)
decl_stmt|;
name|String
name|langIndexField
init|=
name|config
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_FIELD
argument_list|)
decl_stmt|;
name|String
name|langStoreField
init|=
name|config
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_STORE_FIELD
argument_list|)
decl_stmt|;
name|String
name|langFstFileName
init|=
name|config
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_FST
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|langAllowCreation
decl_stmt|;
specifier|final
name|String
name|langAllowCreationString
init|=
name|config
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|PARAM_RUNTIME_GENERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|langIndexField
operator|!=
literal|null
condition|)
block|{
comment|//also consider explicit field names as default for the fst name
if|if
condition|(
name|langFstFileName
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|fileName
init|=
operator|new
name|StringBuilder
argument_list|(
name|getDefaultFstFileName
argument_list|(
name|langIndexField
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
name|fileName
operator|.
name|append
argument_list|(
literal|".fst"
argument_list|)
expr_stmt|;
name|langFstFileName
operator|=
name|fileName
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|langIndexField
operator|=
name|indexField
expr_stmt|;
block|}
if|if
condition|(
name|langStoreField
operator|==
literal|null
condition|)
block|{
comment|//fallbacks
if|if
condition|(
name|storeField
operator|!=
literal|null
condition|)
block|{
comment|//first to default store field
name|langStoreField
operator|=
name|storeField
expr_stmt|;
block|}
else|else
block|{
comment|//else to the lang index field
name|langStoreField
operator|=
name|langIndexField
expr_stmt|;
block|}
block|}
if|if
condition|(
name|langFstFileName
operator|==
literal|null
condition|)
block|{
comment|//no fstFileName config
comment|// ... use the default
name|langFstFileName
operator|=
operator|new
name|StringBuilder
argument_list|(
name|fstName
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
operator|.
name|append
argument_list|(
literal|".fst"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|langAllowCreationString
operator|!=
literal|null
condition|)
block|{
name|langAllowCreation
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|langAllowCreationString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|langAllowCreation
operator|=
name|allowCreation
expr_stmt|;
block|}
comment|//(2.b) check if the Solr field is present
name|String
name|encodedLangIndexField
init|=
name|FieldEncodingEnum
operator|.
name|encodeLanguage
argument_list|(
name|langIndexField
argument_list|,
name|fieldEncoding
argument_list|,
name|language
argument_list|)
decl_stmt|;
name|String
name|encodedLangStoreField
init|=
name|FieldEncodingEnum
operator|.
name|encodeLanguage
argument_list|(
name|langStoreField
argument_list|,
name|fieldEncoding
argument_list|,
name|language
argument_list|)
decl_stmt|;
name|FieldInfo
name|langIndexFieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|encodedLangIndexField
argument_list|)
decl_stmt|;
if|if
condition|(
name|langIndexFieldInfo
operator|!=
literal|null
condition|)
block|{
name|FieldInfo
name|langStoreFieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|encodedLangStoreField
argument_list|)
decl_stmt|;
if|if
condition|(
name|langStoreFieldInfo
operator|!=
literal|null
condition|)
block|{
name|FieldType
name|fieldType
init|=
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
name|langIndexFieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
comment|//(2.c) check the FST file
name|File
name|langFstFile
init|=
operator|new
name|File
argument_list|(
name|fstDirectory
argument_list|,
name|langFstFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|langFstFile
operator|.
name|isFile
argument_list|()
operator|||
name|langAllowCreation
condition|)
block|{
name|CorpusInfo
name|langFstInfo
init|=
operator|new
name|CorpusInfo
argument_list|(
name|language
argument_list|,
name|encodedLangIndexField
argument_list|,
name|encodedLangStoreField
argument_list|,
name|fieldType
operator|.
name|getAnalyzer
argument_list|()
argument_list|,
name|langFstFile
argument_list|,
name|langAllowCreation
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"   ... add {} for explicitly configured language"
argument_list|,
name|langFstInfo
argument_list|)
expr_stmt|;
name|addCorpus
argument_list|(
name|langFstInfo
argument_list|)
expr_stmt|;
name|foundCorpus
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} (field: {}) because "
operator|+
literal|"FST file '{}' does not exist and runtime creation "
operator|+
literal|"is deactivated!"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|language
block|,
name|langIndexFieldInfo
operator|.
name|name
block|,
name|langFstFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} becuase unknown fieldtype "
operator|+
literal|"for SolrFied {}"
argument_list|,
name|language
argument_list|,
name|langIndexFieldInfo
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} because configured stored Field {} "
operator|+
literal|"for IndexField {} does not exist! "
argument_list|,
operator|new
name|Object
index|[]
block|{
name|language
block|,
name|langStoreField
block|,
name|langIndexFieldInfo
operator|.
name|name
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} because configured field {} (encoded: {}) "
operator|+
literal|"is not present in the SolrIndex!"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|language
block|,
name|langIndexField
block|,
name|encodedLangIndexField
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|foundCorpus
return|;
block|}
comment|/**      * Getter for the default FST file name based on the configured field      * name. This method returns the '<code>{name}</code>' part of the      * '<code>{name}.{lang}.fst</code>' name.      * @param fstFieldName the field name.      * @return the '<code>{name}</code>' part of the'<code>{name}.{lang}.fst</code>' name      */
specifier|private
name|String
name|getDefaultFstFileName
parameter_list|(
specifier|final
name|String
name|fstFieldName
parameter_list|)
block|{
name|String
name|fstName
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isAlphanumeric
argument_list|(
name|fstFieldName
argument_list|)
condition|)
block|{
name|StringBuilder
name|escaped
init|=
operator|new
name|StringBuilder
argument_list|(
name|fstFieldName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fstFieldName
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|codepoint
init|=
name|fstFieldName
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|codepoint
argument_list|)
condition|)
block|{
name|escaped
operator|.
name|appendCodePoint
argument_list|(
name|codepoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|escaped
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
block|}
name|fstName
operator|=
name|escaped
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fstName
operator|=
name|fstFieldName
expr_stmt|;
block|}
return|return
name|fstName
return|;
block|}
block|}
end_class

end_unit

