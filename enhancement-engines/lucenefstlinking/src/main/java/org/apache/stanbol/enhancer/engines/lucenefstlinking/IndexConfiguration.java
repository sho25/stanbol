begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|cache
operator|.
name|EntityCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensextant
operator|.
name|solrtexttagger
operator|.
name|TaggerFstCorpus
import|;
end_import

begin_comment
comment|/**  * Holds the configuration of the index used by the FST linking engine.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|IndexConfiguration
block|{
specifier|private
specifier|final
name|SolrCore
name|index
decl_stmt|;
comment|/**      * The type field      */
specifier|private
name|String
name|typeField
decl_stmt|;
comment|/**      * The redirect field      */
specifier|private
name|String
name|redirectField
decl_stmt|;
comment|/**      * The entityRanking field      */
specifier|private
name|String
name|rankingField
decl_stmt|;
comment|/**      * FST corpus configuration      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CorpusInfo
argument_list|>
name|corpusInfos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CorpusInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * {@link ExecutorService} used to create {@link TaggerFstCorpus} instances      * at runtime.      */
specifier|protected
name|ExecutorService
name|executorService
decl_stmt|;
comment|/**      * The encoding used by SolrFields (e.g. to define label fields for different      * languages).      */
specifier|private
name|FieldEncodingEnum
name|fieldEncoding
decl_stmt|;
comment|/**      * The instance used to retrieve/create the cache for Lucene {@link Document}s      * of Entities.      */
specifier|private
name|EntityCacheManager
name|entityCacheManager
decl_stmt|;
comment|/**      * The FST corpus used for linking regardless of the language of the      * document      */
specifier|private
name|CorpusInfo
name|defaultFstCorpus
decl_stmt|;
specifier|private
specifier|final
name|LanguageConfiguration
name|fstConfig
decl_stmt|;
specifier|public
name|IndexConfiguration
parameter_list|(
name|LanguageConfiguration
name|fstConfig
parameter_list|,
name|SolrCore
name|index
parameter_list|)
block|{
if|if
condition|(
name|fstConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed FST configuration MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|==
literal|null
operator|||
name|index
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed SolrCore MUST NOT be NULL nore closed!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|fstConfig
operator|=
name|fstConfig
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|CorpusInfo
name|setDefaultCorpus
parameter_list|(
name|CorpusInfo
name|corpus
parameter_list|)
block|{
name|CorpusInfo
name|oldDefault
init|=
name|defaultFstCorpus
decl_stmt|;
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|defaultFstCorpus
operator|=
name|corpus
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|defaultFstCorpus
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|oldDefault
return|;
block|}
specifier|public
name|CorpusInfo
name|addCorpus
parameter_list|(
name|CorpusInfo
name|corpus
parameter_list|)
block|{
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
return|return
name|corpusInfos
operator|.
name|put
argument_list|(
name|corpus
operator|.
name|language
argument_list|,
name|corpus
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|CorpusInfo
name|removeCorpus
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|corpusInfos
operator|.
name|remove
argument_list|(
name|language
argument_list|)
return|;
block|}
comment|/**      * @return the fieldEncoding      */
specifier|public
specifier|final
name|FieldEncodingEnum
name|getFieldEncoding
parameter_list|()
block|{
return|return
name|fieldEncoding
return|;
block|}
comment|/**      * @param fieldEncoding the fieldEncoding to set      */
specifier|public
specifier|final
name|void
name|setFieldEncoding
parameter_list|(
name|FieldEncodingEnum
name|fieldEncoding
parameter_list|)
block|{
name|this
operator|.
name|fieldEncoding
operator|=
name|fieldEncoding
expr_stmt|;
block|}
comment|/**      * @return the typeField      */
specifier|public
specifier|final
name|String
name|getTypeField
parameter_list|()
block|{
return|return
name|typeField
return|;
block|}
comment|/**      * @param typeField the typeField to set      */
specifier|public
specifier|final
name|void
name|setTypeField
parameter_list|(
name|String
name|typeField
parameter_list|)
block|{
name|this
operator|.
name|typeField
operator|=
name|typeField
expr_stmt|;
block|}
comment|/**      * @return the redirectField      */
specifier|public
specifier|final
name|String
name|getRedirectField
parameter_list|()
block|{
return|return
name|redirectField
return|;
block|}
comment|/**      * @param redirectField the redirectField to set      */
specifier|public
specifier|final
name|void
name|setRedirectField
parameter_list|(
name|String
name|redirectField
parameter_list|)
block|{
name|this
operator|.
name|redirectField
operator|=
name|redirectField
expr_stmt|;
block|}
comment|/**      * @return the rankingField      */
specifier|public
specifier|final
name|String
name|getRankingField
parameter_list|()
block|{
return|return
name|rankingField
return|;
block|}
comment|/**      * @param rankingField the rankingField to set      */
specifier|public
specifier|final
name|void
name|setRankingField
parameter_list|(
name|String
name|rankingField
parameter_list|)
block|{
name|this
operator|.
name|rankingField
operator|=
name|rankingField
expr_stmt|;
block|}
specifier|public
name|CorpusInfo
name|getCorpus
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|corpusInfos
operator|.
name|get
argument_list|(
name|language
argument_list|)
return|;
block|}
comment|/**      * Getter for the languages of all configured FST corpora      * @return the languages of all configured FST corpora      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getCorpusLanguages
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|corpusInfos
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Read-only collection of all {@link CorpusInfo}s defined for this      * configuration.      * @return      */
specifier|public
name|Collection
argument_list|<
name|CorpusInfo
argument_list|>
name|getCorpora
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|corpusInfos
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CorpusInfo
name|getDefaultCorpus
parameter_list|()
block|{
return|return
name|defaultFstCorpus
return|;
block|}
specifier|public
name|void
name|setExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
comment|/**      * The FST configuration      * @return      */
specifier|public
name|LanguageConfiguration
name|getFstConfig
parameter_list|()
block|{
return|return
name|fstConfig
return|;
block|}
specifier|public
name|SolrCore
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|void
name|setEntityCacheManager
parameter_list|(
name|EntityCacheManager
name|entityCacheManager
parameter_list|)
block|{
name|this
operator|.
name|entityCacheManager
operator|=
name|entityCacheManager
expr_stmt|;
block|}
specifier|public
name|EntityCacheManager
name|getEntityCacheManager
parameter_list|()
block|{
return|return
name|entityCacheManager
return|;
block|}
block|}
end_class

end_unit

