begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensextant
operator|.
name|solrtexttagger
operator|.
name|TaggerFstCorpus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Holds the information required for Lucene FST based tagging in a specific  * language by using a given field.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|CorpusInfo
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CorpusInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The language      */
specifier|public
specifier|final
name|String
name|language
decl_stmt|;
comment|/**      * The Corpus FST      */
specifier|protected
specifier|final
name|File
name|fst
decl_stmt|;
comment|/**      * used to detect fst file changes      */
specifier|private
name|Date
name|fstDate
decl_stmt|;
comment|/**      * The Solr field used for FST indexing (already encoded)      */
specifier|public
specifier|final
name|String
name|indexedField
decl_stmt|;
comment|/**      * The Solr stored field holding the labels indexed in the FST corpus       */
specifier|public
specifier|final
name|String
name|storedField
decl_stmt|;
comment|/**      * TODO: partial matches are currently deactivated      */
specifier|public
specifier|final
name|boolean
name|partialMatches
init|=
literal|false
decl_stmt|;
comment|/**      * if the FST corpus can be created on the fly      */
specifier|public
specifier|final
name|boolean
name|allowCreation
decl_stmt|;
comment|/**      * The Solr {@link Analyzer} used for the field      */
specifier|public
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
specifier|public
specifier|final
name|Analyzer
name|taggingAnalyzer
decl_stmt|;
specifier|protected
specifier|final
name|ReadWriteLock
name|corpusLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|protected
name|Reference
argument_list|<
name|TaggerFstCorpus
argument_list|>
name|taggerCorpusRef
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|TaggerFstCorpus
argument_list|>
name|enqueuedCorpus
decl_stmt|;
comment|/**      * Allows to store an error message encountered while loading/creating the      * FST corpus.      */
specifier|private
name|String
name|errorMessage
decl_stmt|;
comment|/**      * Indicated an Error during loading the {@link #fst} file      */
specifier|private
name|boolean
name|fstFileError
init|=
literal|false
decl_stmt|;
comment|/**      * Indicates an Error during the runtime creation      */
specifier|private
name|boolean
name|creationError
init|=
literal|false
decl_stmt|;
comment|/**       * @param language      * @param indexField      * @param analyzer      * @param fst      * @param allowCreation      */
specifier|protected
name|CorpusInfo
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|indexField
parameter_list|,
name|String
name|storeField
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|File
name|fst
parameter_list|,
name|boolean
name|allowCreation
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
name|this
operator|.
name|indexedField
operator|=
name|indexField
expr_stmt|;
name|this
operator|.
name|storedField
operator|=
name|storeField
expr_stmt|;
name|this
operator|.
name|fst
operator|=
name|fst
expr_stmt|;
name|this
operator|.
name|allowCreation
operator|=
name|allowCreation
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|fieldType
operator|.
name|getAnalyzer
argument_list|()
expr_stmt|;
name|this
operator|.
name|taggingAnalyzer
operator|=
name|fieldType
operator|.
name|getQueryAnalyzer
argument_list|()
expr_stmt|;
name|this
operator|.
name|fstDate
operator|=
name|fst
operator|.
name|isFile
argument_list|()
condition|?
operator|new
name|Date
argument_list|(
name|fst
operator|.
name|lastModified
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Allows to set an error occurring during the creation of       * @param message      */
specifier|protected
name|void
name|setError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|errorMessage
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|creationError
operator|=
literal|true
expr_stmt|;
name|setCorpus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFstFile
parameter_list|()
block|{
return|return
name|fst
operator|!=
literal|null
operator|&&
name|fst
operator|.
name|isFile
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isFstFileError
parameter_list|()
block|{
return|return
name|fstFileError
return|;
block|}
specifier|public
name|boolean
name|isFstCreationError
parameter_list|()
block|{
return|return
name|creationError
return|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|errorMessage
return|;
block|}
comment|/**      * Allows to explicitly set the corpus after runtime creation has finished.      * The corpus will be linked by using a {@link WeakReference} to allow the      * GC to free the memory it consumes. If this happens the corpus will be      * loaded from the {@link #fst} file.      * @param enqueued the version of the corpus      * @param corpus the corpus      */
specifier|protected
specifier|final
name|void
name|setCorpus
parameter_list|(
specifier|final
name|TaggerFstCorpus
name|corpus
parameter_list|)
block|{
name|corpusLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|enqueuedCorpus
operator|=
literal|null
expr_stmt|;
comment|//clear the future ref
if|if
condition|(
name|taggerCorpusRef
operator|!=
literal|null
condition|)
block|{
name|taggerCorpusRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|taggerCorpusRef
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
comment|//reset any error
name|this
operator|.
name|errorMessage
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|creationError
operator|=
literal|false
expr_stmt|;
comment|//we set the corpus as a weak reference. This allows the
comment|//GC to free the corpus earlier.
comment|//This is done, because here the corpus was just built and not
comment|//yet requested. So we want those to be GCed earlier.
name|taggerCorpusRef
operator|=
operator|new
name|WeakReference
argument_list|<
name|TaggerFstCorpus
argument_list|>
argument_list|(
name|corpus
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|corpusLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|//Store the newly built FST corpus to disc. A read level lock is sufficient
comment|//for this.
comment|//NOTE: the WeakReference to the corpus can only be GC'ed after we
comment|//      have written the corpus to disc, as we still have a reference
comment|//      to corpus!
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|corpusLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//STANBOL-1177: save FST models in AccessController.doPrivileged(..)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fst
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|fst
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to delete existing FST file for {}"
argument_list|,
name|fst
argument_list|)
expr_stmt|;
block|}
block|}
name|corpus
operator|.
name|save
argument_list|(
name|fst
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//not used
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|corpusLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pae
parameter_list|)
block|{
name|Exception
name|e
init|=
name|pae
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
comment|//IO Exception while loading the file
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to store FST corpus to "
operator|+
name|fst
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//if we can not save the FST corpus we replace the WeakReference
comment|//with a SoftReference to avoid frequent rebuilding of the corpus
name|corpusLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|taggerCorpusRef
operator|instanceof
name|WeakReference
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|taggerCorpusRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|taggerCorpusRef
operator|=
operator|new
name|SoftReference
argument_list|<
name|TaggerFstCorpus
argument_list|>
argument_list|(
name|corpus
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|corpusLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Runtime exception
throw|throw
name|RuntimeException
operator|.
name|class
operator|.
name|cast
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|TaggerFstCorpus
name|getCorpus
parameter_list|()
block|{
name|TaggerFstCorpus
name|corpus
decl_stmt|;
name|corpusLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|corpus
operator|=
name|taggerCorpusRef
operator|==
literal|null
condition|?
literal|null
else|:
name|taggerCorpusRef
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
comment|//on first usage replace a WeakReference with a SoftReference
if|if
condition|(
name|taggerCorpusRef
operator|instanceof
name|WeakReference
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ... convert Weak to Soft Reference for Corpus {}"
argument_list|,
name|fst
argument_list|)
expr_stmt|;
name|taggerCorpusRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|taggerCorpusRef
operator|=
operator|new
name|SoftReference
argument_list|<
name|TaggerFstCorpus
argument_list|>
argument_list|(
name|corpus
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|taggerCorpusRef
operator|!=
literal|null
condition|)
block|{
name|taggerCorpusRef
operator|=
literal|null
expr_stmt|;
comment|//reset to null as the reference was taken
block|}
block|}
finally|finally
block|{
name|corpusLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|corpus
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... load FST corpus {}"
argument_list|,
name|fst
argument_list|)
expr_stmt|;
name|corpusLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//STANBOL-1177: load FST models in AccessController.doPrivileged(..)
name|corpus
operator|=
name|taggerCorpusRef
operator|==
literal|null
condition|?
literal|null
else|:
name|taggerCorpusRef
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|corpus
operator|==
literal|null
condition|)
block|{
comment|//corpus not loaded while waiting for the write lock
name|corpus
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|TaggerFstCorpus
argument_list|>
argument_list|()
block|{
specifier|public
name|TaggerFstCorpus
name|run
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fst
operator|.
name|exists
argument_list|()
operator|&&
comment|//if the file exists AND the file was not yet failing to load
comment|//OR the file is newer as the last version failing to load
operator|(
operator|!
name|fstFileError
operator|||
name|FileUtils
operator|.
name|isFileNewer
argument_list|(
name|fst
argument_list|,
name|fstDate
argument_list|)
operator|)
condition|)
block|{
name|TaggerFstCorpus
name|corpus
init|=
name|TaggerFstCorpus
operator|.
name|load
argument_list|(
name|fst
argument_list|)
decl_stmt|;
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
comment|//I need to set fstDate here, because I can not
comment|//access lastModified() outside doPrivileged
name|fstDate
operator|=
operator|new
name|Date
argument_list|(
name|fst
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... loaded FST (date: {})"
argument_list|,
name|SimpleDateFormat
operator|.
name|getDateTimeInstance
argument_list|()
operator|.
name|format
argument_list|(
name|fstDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... no corpus loaded from {}"
argument_list|,
name|fst
argument_list|)
expr_stmt|;
block|}
return|return
name|corpus
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... unable to load FST from {} (exists: {}, fileError {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fst
block|,
name|fst
operator|.
name|exists
argument_list|()
block|,
name|fstFileError
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
name|fstFileError
operator|=
literal|false
expr_stmt|;
name|taggerCorpusRef
operator|=
operator|new
name|SoftReference
argument_list|<
name|TaggerFstCorpus
argument_list|>
argument_list|(
name|corpus
argument_list|)
expr_stmt|;
block|}
comment|//else not loaded from file
block|}
comment|//else corpus was loaded while waiting for the write lock
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pae
parameter_list|)
block|{
name|Exception
name|e
init|=
name|pae
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
comment|//IO Exception while loading the file
name|this
operator|.
name|errorMessage
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Unable to load FST corpus from "
operator|+
literal|"FST file: '"
argument_list|)
operator|.
name|append
argument_list|(
name|fst
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' (Message: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")!"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fstFileError
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|//Runtime exception
throw|throw
name|RuntimeException
operator|.
name|class
operator|.
name|cast
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|corpusLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|corpus
return|;
block|}
comment|/**      * Called after the curpus was enqueued for rebuilding      */
specifier|protected
name|void
name|enqueued
parameter_list|(
name|Future
argument_list|<
name|TaggerFstCorpus
argument_list|>
name|enqueued
parameter_list|)
block|{
name|this
operator|.
name|enqueuedCorpus
operator|=
name|enqueued
expr_stmt|;
block|}
comment|/**      * Allows to get the {@link Future} of a ongoing {@link CorpusCreationTask}.      * @return returns a {@link Future} that allows to wait for a corpus that is      * currently be built.       */
specifier|public
name|Future
argument_list|<
name|TaggerFstCorpus
argument_list|>
name|getEnqueued
parameter_list|()
block|{
return|return
name|enqueuedCorpus
return|;
block|}
comment|/**      * Returns if the FST corpus described by this FST info is queued for      * generation. NOTE: that {@link #getCorpus()} might still return a       * {@link TaggerCorpus}, but in this case it will be based on an outdated      * version of the index.      * @return<code>true</code> if the FST corpus is enqueued for (re)generation.      */
specifier|public
name|boolean
name|isEnqueued
parameter_list|()
block|{
return|return
name|taggerCorpusRef
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"FST Info[language: "
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexedField
operator|.
name|equals
argument_list|(
name|storedField
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | field: "
argument_list|)
operator|.
name|append
argument_list|(
name|indexedField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | fields(index:"
argument_list|)
operator|.
name|append
argument_list|(
name|indexedField
argument_list|)
operator|.
name|append
argument_list|(
literal|", stored:"
argument_list|)
operator|.
name|append
argument_list|(
name|storedField
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" | file: "
argument_list|)
operator|.
name|append
argument_list|(
name|fst
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"(exists: "
argument_list|)
operator|.
name|append
argument_list|(
name|fst
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|append
argument_list|(
literal|" | runtime creation: "
argument_list|)
operator|.
name|append
argument_list|(
name|allowCreation
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|indexedField
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|CorpusInfo
operator|&&
operator|(
operator|(
name|CorpusInfo
operator|)
name|obj
operator|)
operator|.
name|indexedField
operator|.
name|equals
argument_list|(
name|indexedField
argument_list|)
operator|&&
operator|(
operator|(
name|CorpusInfo
operator|)
name|obj
operator|)
operator|.
name|storedField
operator|.
name|equals
argument_list|(
name|storedField
argument_list|)
operator|&&
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|language
argument_list|,
name|language
argument_list|)
return|;
block|}
block|}
end_class

end_unit

