begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|CASE_SENSITIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_CASE_SENSITIVE_MATCHING_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_MATCHING_LANGUAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_SUGGESTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|ENTITY_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|SUGGESTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|TYPE_MAPPINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|DEFAULT_PROCESS_ONLY_PROPER_NOUNS_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|PROCESSED_LANGUAGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|PROCESS_ONLY_PROPER_NOUNS_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|SERVICE_RANKING
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|WildcardFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|text
operator|.
name|StrLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|text
operator|.
name|StrSubstitutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|RegisteredSolrServerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|cache
operator|.
name|EntityCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
operator|.
name|cache
operator|.
name|FastLRUCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * This is the OSGI component for the {@link FstLinkingEngine}. It is used to  * manage the service configuration, tracks dependencies and handles the   * OSGI life cycle.    * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|// the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROPERTY_NAME
argument_list|)
block|,
comment|//the name of the engine
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|FstLinkingEngineComponent
operator|.
name|SOLR_CORE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|"None"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.solrYard"
argument_list|,
name|name
operator|=
literal|"SolrYard"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.minusPrefix"
argument_list|,
name|name
operator|=
literal|"MinusPrefix"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.underscorePrefix"
argument_list|,
name|name
operator|=
literal|"UnderscorePrefix"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.minusSuffix"
argument_list|,
name|name
operator|=
literal|"MinusSuffix"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.underscoreSuffix"
argument_list|,
name|name
operator|=
literal|"UnderscoreSuffix"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.atPrefix"
argument_list|,
name|name
operator|=
literal|"AtPrefix"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
operator|+
literal|".option.atSuffix"
argument_list|,
name|name
operator|=
literal|"AtSuffix"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"SolrYard"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|IndexConfiguration
operator|.
name|FST_CONFIG
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|IndexConfiguration
operator|.
name|FST_FOLDER
argument_list|,
name|value
operator|=
name|IndexConfiguration
operator|.
name|DEFAULT_FST_FOLDER
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|IndexConfiguration
operator|.
name|SOLR_TYPE_FIELD
argument_list|,
name|value
operator|=
literal|"rdf:type"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|IndexConfiguration
operator|.
name|SOLR_RANKING_FIELD
argument_list|,
name|value
operator|=
literal|"entityhub:entityRank"
argument_list|)
block|,
comment|//  @Property(name=REDIRECT_FIELD,value="rdfs:seeAlso"),
comment|//  @Property(name=REDIRECT_MODE,options={
comment|//      @PropertyOption(
comment|//          value='%'+REDIRECT_MODE+".option.ignore",
comment|//          name="IGNORE"),
comment|//      @PropertyOption(
comment|//          value='%'+REDIRECT_MODE+".option.addValues",
comment|//          name="ADD_VALUES"),
comment|//      @PropertyOption(
comment|//              value='%'+REDIRECT_MODE+".option.follow",
comment|//              name="FOLLOW")
comment|//      },value="IGNORE"),
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|FstLinkingEngineComponent
operator|.
name|FST_THREAD_POOL_SIZE
argument_list|,
name|intValue
operator|=
name|FstLinkingEngineComponent
operator|.
name|DEFAULT_FST_THREAD_POOL_SIZE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|FstLinkingEngineComponent
operator|.
name|ENTITY_CACHE_SIZE
argument_list|,
name|intValue
operator|=
name|FstLinkingEngineComponent
operator|.
name|DEFAULT_ENTITY_CACHE_SIZE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SUGGESTIONS
argument_list|,
name|intValue
operator|=
name|DEFAULT_SUGGESTIONS
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|CASE_SENSITIVE
argument_list|,
name|boolValue
operator|=
name|DEFAULT_CASE_SENSITIVE_MATCHING_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROCESS_ONLY_PROPER_NOUNS_STATE
argument_list|,
name|boolValue
operator|=
name|DEFAULT_PROCESS_ONLY_PROPER_NOUNS_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROCESSED_LANGUAGES
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|value
operator|=
block|{
literal|"*;lmmtip;uc=LINK;prob=0.75;pprob=0.75"
block|,
comment|// link multiple matchable tokens in chunks; link upper case words
literal|"de;uc=MATCH"
block|,
comment|//in German all Nouns are upper case
literal|"es;lc=Noun"
block|,
comment|//the OpenNLP POS tagger for Spanish does not support ProperNouns
literal|"nl;lc=Noun"
block|}
argument_list|)
block|,
comment|//same for Dutch
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DEFAULT_MATCHING_LANGUAGE
argument_list|,
name|value
operator|=
literal|""
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ENTITY_TYPES
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TYPE_MAPPINGS
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|value
operator|=
block|{
literal|"dbp-ont:Organisation; dbp-ont:Newspaper; schema:Organization> dbp-ont:Organisation"
block|,
literal|"dbp-ont:Person; foaf:Person; schema:Person> dbp-ont:Person"
block|,
literal|"dbp-ont:Place; schema:Place; geonames:Feature> dbp-ont:Place"
block|,
literal|"dbp-ont:Work; schema:CreativeWork> dbp-ont:Work"
block|,
literal|"dbp-ont:Event; schema:Event> dbp-ont:Event"
block|,
literal|"schema:Product> schema:Product"
block|,
literal|"skos:Concept> skos:Concept"
block|}
argument_list|)
block|,
comment|//    @Property(name=DEREFERENCE_ENTITIES, boolValue=DEFAULT_DEREFERENCE_ENTITIES_STATE),
comment|//    @Property(name=DEREFERENCE_ENTITIES_FIELDS,cardinality=Integer.MAX_VALUE,
comment|//        value={"rdfs:comment","geo:lat","geo:long","foaf:depiction","dbp-ont:thumbnail"}),
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|FstLinkingEngineComponent
block|{
comment|/**      * The {@link SolrCore} is required to access the document ids for the Entities      * as well as the analyzer chains of the fields used for the linking      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_CORE
init|=
literal|"enhancer.engines.linking.lucenefst.solrcore"
decl_stmt|;
comment|/**      * The size of the thread pool used to create FST models (default=1). Creating      * such models does need a lot of memory. Expect values up to 10times of the      * build model. So while this task can easily performed concurrently users need      * to be aware that the process will occupy a lot of heap space (typically several      * GBytes). If heap space is not an issue it is best to configure the value      * based on the CPU cores available on the local host.<p>      * This configuration has only an effect if runtime generation of FST modles      * is enabled (either by default or for some FST by explicitly setting the       * '<code>{@link IndexConfiguration#PARAM_RUNTIME_GENERATION generate}=true</code>' parameter       * for some languages in the {@link IndexConfiguration#FST_CONFIG}.      */
specifier|public
specifier|static
specifier|final
name|String
name|FST_THREAD_POOL_SIZE
init|=
literal|"enhancer.engines.linking.lucenefst.fstThreadPoolSize"
decl_stmt|;
comment|/**      * The default number of threads used to create FST models (default=1)      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FST_THREAD_POOL_SIZE
init|=
literal|1
decl_stmt|;
comment|/**      * Parameter used to configure the size of the Cache used to for Entity information.      * While the FST linking is fully performed in memory this engine needs still to      * load tagging relevant fields (labels, types, redirectes and entity ranking)      * for matched entities from the disc. The EntityCache is a LRU cache for such      * information.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENTITY_CACHE_SIZE
init|=
literal|"enhancer.engines.linking.lucenefst.entityCacheSize"
decl_stmt|;
comment|/**      * The default size of the Entity Cache is set to 65k entities.      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ENTITY_CACHE_SIZE
init|=
literal|65536
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FstLinkingEngineComponent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * the name for the EnhancementEngine registered by this component      */
specifier|private
name|String
name|engineName
decl_stmt|;
comment|/**      * used to resolve '{prefix}:{local-name}' used within the engines configuration      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|)
specifier|protected
name|NamespacePrefixService
name|prefixService
decl_stmt|;
comment|/**      * Holds the FST configuration parsed to the engine      */
specifier|private
name|LanguageConfiguration
name|fstConfig
decl_stmt|;
comment|/**      * The configured fstFolder. NOTE that the actual folder is determined in the      * {@link #updateEngineRegistration(ServiceReference, SolrServer)} based on      * the SolrCore.      */
specifier|private
name|String
name|fstFolder
decl_stmt|;
comment|/**      * Holds the {@link TextProcessingConfig} parsed from the configuration of      * this engine.<p>      * NOTE: that by far not all configurations are supported. See documentation      * for details      */
specifier|private
name|TextProcessingConfig
name|textProcessingConfig
decl_stmt|;
comment|/**      * Holds the {@link EntityLinkerConfig} parsed from the configuration of      * this engine.<p>      * NOTE: that by far not all configurations are supported. See documentation      * for details      */
specifier|private
name|EntityLinkerConfig
name|entityLinkerConfig
decl_stmt|;
comment|//SolrCore related fields
comment|/**      * The reference to the configured SolrIndex parsed from the {@link #SOLR_CORE}      * configuration      * @see #SOLR_CORE      */
specifier|private
name|IndexReference
name|indexReference
decl_stmt|;
comment|/**      * The OSGI {@link ServiceTracker} used to track the configured Solr core      */
specifier|private
name|RegisteredSolrServerTracker
name|solrServerTracker
decl_stmt|;
comment|/**      * The ServiceReference of the {@link SolrCore} registered as OSGI service      * and tracked by the {@link #solrServerTracker}. This is used to      * check if the SolrCore has changed on OSGI service events      */
specifier|private
name|ServiceReference
name|solrServerReference
decl_stmt|;
comment|/**      * The {@link SolrCore} used for FST linking. This is set based on OSGI      * events provided by the {@link #solrServerTracker}      */
specifier|private
name|SolrCore
name|solrCore
decl_stmt|;
comment|/**      * Holds the OSGI service registration for the {@link FstLinkingEngine}      */
specifier|private
name|ServiceRegistration
name|engineRegistration
decl_stmt|;
comment|/**      * Holds the metadata registered with the {@link #engineRegistration}      */
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|engineMetadata
decl_stmt|;
comment|/**      * The bundle context for this component. Also used to track dependencies      * and register the {@link #engineRegistration}      */
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
comment|/**      * Thread pool used for the runtime creation of FST modles.      * @see #FST_THREAD_POOL_SIZE      * @see #DEFAULT_FST_THREAD_POOL_SIZE      */
specifier|private
name|ExecutorService
name|fstCreatorService
decl_stmt|;
comment|/**      * The field name in the configured Solr index holding type information for      * Entities.      */
specifier|private
name|String
name|solrTypeField
decl_stmt|;
comment|/**      * The field name in the configured Solr index holding ranking information for      * Entities. values are expected to be floating point numbers.      */
specifier|private
name|String
name|solrRankingField
decl_stmt|;
comment|/**      * The fieldEncoding used by the configured SolrIndex for field names.      * @see FieldEncodingEnum      */
specifier|private
name|FieldEncodingEnum
name|fieldEncoding
decl_stmt|;
comment|/**      * Cache used for Lucene {@link Document}s recently loaded from the index.      * The size can be configured by using the {@link #ENTITY_CACHE_SIZE}      * configuration parameter.      * @see #ENTITY_CACHE_SIZE      * @see #DEFAULT_ENTITY_CACHE_SIZE      */
specifier|private
name|EntityCacheManager
name|documentCacheFactory
decl_stmt|;
specifier|private
name|IndexConfiguration
name|indexConfig
decl_stmt|;
specifier|private
name|Boolean
name|skipAltTokensConfig
decl_stmt|;
comment|/**      * Default constructor as used by OSGI. This expects that       * {@link #activate(ComponentContext)} is called before usage      */
specifier|public
name|FstLinkingEngineComponent
parameter_list|()
block|{     }
annotation|@
name|Activate
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activate {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundleContext
operator|=
name|ctx
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|//(0) The name for the Enhancement Engine and the basic metadata
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_NAME
argument_list|,
literal|"The EnhancementEngine name MUST BE configured!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|engineName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|engineMetadata
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|engineMetadata
operator|.
name|put
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|this
operator|.
name|engineName
argument_list|)
expr_stmt|;
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
expr_stmt|;
name|engineMetadata
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|value
operator|==
literal|null
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
name|value
argument_list|)
expr_stmt|;
comment|//(1) parse the TextProcessing configuration
comment|//TODO: decide if we should use the TextProcessingConfig for this engine
name|textProcessingConfig
operator|=
name|TextProcessingConfig
operator|.
name|createInstance
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|entityLinkerConfig
operator|=
name|EntityLinkerConfig
operator|.
name|createInstance
argument_list|(
name|properties
argument_list|,
name|prefixService
argument_list|)
expr_stmt|;
comment|//(2) parse the configured IndexReference
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|SOLR_CORE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SOLR_CORE
argument_list|,
literal|"Missing required configuration of the SolrCore"
argument_list|)
throw|;
block|}
else|else
block|{
name|indexReference
operator|=
name|IndexReference
operator|.
name|parse
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
argument_list|,
literal|"Missing required configuration of the Solr Field Encoding"
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
name|fieldEncoding
operator|=
name|FieldEncodingEnum
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|IndexConfiguration
operator|.
name|FIELD_ENCODING
argument_list|,
literal|"The configured "
operator|+
literal|"FieldEncoding MUST BE a member of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|FieldEncodingEnum
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|SKIP_ALT_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|skipAltTokensConfig
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|skipAltTokensConfig
operator|=
operator|new
name|Boolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// else no config -> will use the default
comment|//(4) init the FST configuration
comment|//We can create the default configuration only here, as it depends on the
comment|//name of the solrIndex
name|String
name|defaultConfig
init|=
literal|"*;"
operator|+
name|IndexConfiguration
operator|.
name|PARAM_FST
operator|+
literal|"="
operator|+
name|indexReference
operator|.
name|getIndex
argument_list|()
operator|+
literal|";"
operator|+
name|IndexConfiguration
operator|.
name|PARAM_FIELD
operator|+
literal|"="
operator|+
name|IndexConfiguration
operator|.
name|DEFAULT_FIELD
decl_stmt|;
name|fstConfig
operator|=
operator|new
name|LanguageConfiguration
argument_list|(
name|IndexConfiguration
operator|.
name|FST_CONFIG
argument_list|,
operator|new
name|String
index|[]
block|{
name|defaultConfig
block|}
argument_list|)
expr_stmt|;
comment|//now set the actual configuration parsed to the engine
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|FST_CONFIG
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|fstConfig
operator|.
name|setConfiguration
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|//else keep the default
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|FST_FOLDER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|this
operator|.
name|fstFolder
operator|=
operator|(
operator|(
name|String
operator|)
name|value
operator|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fstFolder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|fstFolder
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fstFolder
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|IndexConfiguration
operator|.
name|FST_FOLDER
argument_list|,
literal|"Values MUST BE of type String"
operator|+
literal|"(found: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")!"
argument_list|)
throw|;
block|}
comment|//(5) Create the ThreadPool used for the runtime creation of FST models
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|FST_THREAD_POOL_SIZE
argument_list|)
expr_stmt|;
name|int
name|tpSize
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|tpSize
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|tpSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|FST_THREAD_POOL_SIZE
argument_list|,
literal|"Unable to parse the integer FST thread pool size from the "
operator|+
literal|"configured "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|tpSize
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|tpSize
operator|<=
literal|0
condition|)
block|{
comment|//if configured value<= 0 we use the default
name|tpSize
operator|=
name|DEFAULT_FST_THREAD_POOL_SIZE
expr_stmt|;
block|}
comment|//build a ThreadFactoryBuilder for low priority daemon threads that
comment|//do use a meaningful name
name|ThreadFactoryBuilder
name|tfBuilder
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
decl_stmt|;
name|tfBuilder
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//should be stopped if the VM closes
name|tfBuilder
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
comment|//low priority
name|tfBuilder
operator|.
name|setNameFormat
argument_list|(
name|engineName
operator|+
literal|"-FstRuntimeCreation-thread-%d"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fstCreatorService
operator|!=
literal|null
operator|&&
operator|!
name|fstCreatorService
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
comment|//NOTE: We can not call terminateNow, because to interrupt threads
comment|//      here would also close FileChannels used by the SolrCore
comment|//      and produce java.nio.channels.ClosedByInterruptException
comment|//      exceptions followed by java.nio.channels.ClosedChannelException
comment|//      on following calls to affected files of the SolrIndex.
comment|//Because of that we just log a warning and let uncompleted tasks
comment|//complete!
name|log
operator|.
name|warn
argument_list|(
literal|"some items in a previouse FST Runtime Creation Threadpool have "
operator|+
literal|"still not finished!"
argument_list|)
expr_stmt|;
block|}
name|fstCreatorService
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|tpSize
argument_list|,
name|tfBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//(6) Parse the EntityCache config
name|int
name|ecSize
decl_stmt|;
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|ENTITY_CACHE_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|ecSize
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ecSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ENTITY_CACHE_SIZE
argument_list|,
literal|"Unable to parse the integer EntityCacheSize from the "
operator|+
literal|"configured "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ecSize
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|ecSize
operator|<
literal|0
condition|)
block|{
name|documentCacheFactory
operator|=
operator|new
name|FastLRUCacheManager
argument_list|(
name|DEFAULT_ENTITY_CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ecSize
operator|==
literal|0
condition|)
block|{
name|documentCacheFactory
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|documentCacheFactory
operator|=
operator|new
name|FastLRUCacheManager
argument_list|(
name|ecSize
argument_list|)
expr_stmt|;
block|}
comment|//(7) parse the Entity type field
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|SOLR_TYPE_FIELD
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|solrTypeField
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|solrTypeField
operator|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|//(8) parse the Entity Ranking field
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|IndexConfiguration
operator|.
name|SOLR_RANKING_FIELD
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|solrRankingField
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|solrRankingField
operator|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|//(9) start tracking the SolrCore
try|try
block|{
name|solrServerTracker
operator|=
operator|new
name|RegisteredSolrServerTracker
argument_list|(
name|bundleContext
argument_list|,
name|indexReference
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... SolrCore for {} was removed!"
argument_list|,
name|indexReference
argument_list|)
expr_stmt|;
name|updateEngineRegistration
argument_list|(
name|solrServerTracker
operator|.
name|getServiceReference
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... SolrCore for {} was updated!"
argument_list|,
name|indexReference
argument_list|)
expr_stmt|;
name|updateEngineRegistration
argument_list|(
name|solrServerTracker
operator|.
name|getServiceReference
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|modifiedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SolrServer
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|SolrServer
name|server
init|=
name|super
operator|.
name|addingService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrCore
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Multiple SolrServer for IndexLocation {} available!"
argument_list|,
name|indexReference
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... SolrCore for {} becomes available!"
argument_list|,
name|indexReference
argument_list|)
expr_stmt|;
name|updateEngineRegistration
argument_list|(
name|reference
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
block|}
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SOLR_CORE
argument_list|,
literal|"parsed SolrCore name '"
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|"' is invalid (expected: '[{server-name}:]{indexname}'"
argument_list|)
throw|;
block|}
name|solrServerTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will be called on each<ul>      *<li>update to the Component configuration (activate, deactivate)      *<li>updates on the SolrCore      *</ul>      * on any detected change it will update the registered EnhancementEngine.<p>      * This also initialises the FST configuration.      * @param reference the ServiceRefernece for the SolrServer or<code>null</code>      * in case the service is no longer available.      * @param server the SolrServer (or<code>null</code>      */
specifier|protected
name|void
name|updateEngineRegistration
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|SolrServer
name|server
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... updateEngineRegistration for {}: {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|engineName
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
operator|&&
name|server
operator|==
literal|null
condition|)
block|{
name|server
operator|=
name|solrServerTracker
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|==
literal|null
operator|&&
name|this
operator|.
name|indexReference
operator|==
literal|null
condition|)
block|{
return|return;
comment|//nothing to do
block|}
name|BundleContext
name|bundleContext
init|=
name|this
operator|.
name|bundleContext
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|//init one after the other in case of multiple calls
name|SolrCore
name|core
decl_stmt|;
name|IndexConfiguration
name|indexConfig
decl_stmt|;
comment|// the indexConfig build by this call
try|try
block|{
comment|//try to init - finally unregisterEngine
if|if
condition|(
name|bundleContext
operator|==
literal|null
condition|)
block|{
comment|//already deactivated
return|return;
comment|//NOTE: unregistering is done in finally block
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reference
operator|.
name|equals
argument_list|(
name|this
operator|.
name|solrServerReference
argument_list|)
condition|)
block|{
comment|//use the current core
name|core
operator|=
name|solrCore
expr_stmt|;
block|}
else|else
block|{
comment|//get the SolrCore from the EmbeddedSolrServer
name|core
operator|=
name|getSolrCore
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//SolrCore not available
name|core
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
comment|//no SolrCore
name|log
operator|.
name|info
argument_list|(
literal|"   - SolrCore {} present"
argument_list|,
name|this
operator|.
name|solrCore
operator|==
literal|null
condition|?
literal|"not yet"
else|:
literal|"no longer"
argument_list|)
expr_stmt|;
return|return;
comment|//NOTE: unregistering is done in finally block
block|}
comment|//else - we do have a SolrCore
comment|//File fstDir = new File(dataDir,"fst");
comment|//now collect the FST configuration
name|indexConfig
operator|=
operator|new
name|IndexConfiguration
argument_list|(
name|fstConfig
argument_list|,
name|core
argument_list|,
name|fieldEncoding
argument_list|)
expr_stmt|;
name|indexConfig
operator|.
name|setTypeField
argument_list|(
name|solrTypeField
argument_list|)
expr_stmt|;
name|indexConfig
operator|.
name|setRankingField
argument_list|(
name|solrRankingField
argument_list|)
expr_stmt|;
comment|//set fields parsed in the activate method
name|indexConfig
operator|.
name|setExecutorService
argument_list|(
name|fstCreatorService
argument_list|)
expr_stmt|;
name|indexConfig
operator|.
name|setRedirectField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//TODO add support
comment|//NOTE: the FST cofnig is processed even if the SolrCore has not changed
comment|//      because their might be config changes and/or new FST files in the
comment|//      FST directory of the SolrCore.
name|indexConfig
operator|.
name|setFstDirectory
argument_list|(
name|getFstDirectory
argument_list|(
name|core
argument_list|,
name|fstFolder
argument_list|)
argument_list|)
expr_stmt|;
comment|//set the DocumentCacheFactory
name|indexConfig
operator|.
name|setEntityCacheManager
argument_list|(
name|documentCacheFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipAltTokensConfig
operator|!=
literal|null
condition|)
block|{
name|indexConfig
operator|.
name|setSkipAltTokens
argument_list|(
name|skipAltTokensConfig
argument_list|)
expr_stmt|;
block|}
comment|//create a new searcher for creating FSTs
if|if
condition|(
operator|!
name|indexConfig
operator|.
name|activate
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Processing of the FST configuration was not successfull "
operator|+
literal|"for any language. See WARN level loggings for more details!"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"  ... FstLinkingEnigne wiht name {} will be registered but"
operator|+
literal|"be inactive as there seam to be no data for linking available"
operator|+
literal|"in the SolrCore {} (dir: {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engineName
block|,
name|core
operator|.
name|getName
argument_list|()
block|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//some FST corpora initialised
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
comment|//log the initialised languages
name|Set
argument_list|<
name|String
argument_list|>
name|langSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|indexConfig
operator|.
name|getCorpusLanguages
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|langSet
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
condition|)
block|{
comment|//replace the null for the default language
name|langSet
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//with an empty string
block|}
name|String
index|[]
name|langArray
init|=
name|langSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|langSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|langArray
argument_list|,
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... initialised FST corpora for languages {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|langArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|//in any case (even an Exception) ensure that the current
comment|//engine registration is unregistered and the currently used
comment|//SolrCore is unregistered!
name|unregisterEngine
argument_list|()
expr_stmt|;
block|}
comment|//check if we need to create some FST files
for|for
control|(
name|CorpusInfo
name|fstInfo
range|:
name|indexConfig
operator|.
name|getCorpora
argument_list|()
control|)
block|{
comment|//check if the fst does not exist and the fstInfo allows creation
if|if
condition|(
operator|!
name|fstInfo
operator|.
name|fst
operator|.
name|exists
argument_list|()
operator|&&
name|fstInfo
operator|.
name|allowCreation
condition|)
block|{
comment|//create a task on the FST corpus creation service
name|fstCreatorService
operator|.
name|execute
argument_list|(
operator|new
name|CorpusCreationTask
argument_list|(
name|indexConfig
argument_list|,
name|fstInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//set the default linking corpora
name|String
name|defaultLanguage
init|=
name|entityLinkerConfig
operator|.
name|getDefaultLanguage
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultLanguage
operator|==
literal|null
condition|)
block|{
name|defaultLanguage
operator|=
literal|""
expr_stmt|;
comment|//FST uses an empty string for the default
block|}
name|CorpusInfo
name|defaultCoprous
init|=
name|indexConfig
operator|.
name|getCorpus
argument_list|(
name|defaultLanguage
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultCoprous
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... set '{}' as default FST Corpus: {}"
argument_list|,
name|defaultCoprous
operator|.
name|language
argument_list|,
name|defaultCoprous
argument_list|)
expr_stmt|;
name|indexConfig
operator|.
name|setDefaultCorpus
argument_list|(
name|defaultCoprous
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  ... no corpus for default language {} available"
argument_list|,
name|defaultCoprous
argument_list|)
expr_stmt|;
block|}
comment|//set the index configuration to the field;
name|this
operator|.
name|indexConfig
operator|=
name|indexConfig
expr_stmt|;
name|FstLinkingEngine
name|engine
init|=
operator|new
name|FstLinkingEngine
argument_list|(
name|engineName
argument_list|,
name|indexConfig
argument_list|,
name|textProcessingConfig
argument_list|,
name|entityLinkerConfig
argument_list|)
decl_stmt|;
name|String
index|[]
name|services
init|=
operator|new
name|String
index|[]
block|{
name|EnhancementEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ServiceProperties
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... register {}: {}"
argument_list|,
name|engine
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|engineName
argument_list|)
expr_stmt|;
name|this
operator|.
name|engineRegistration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|services
argument_list|,
name|engine
argument_list|,
name|engineMetadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrServerReference
operator|=
name|reference
expr_stmt|;
name|this
operator|.
name|solrCore
operator|=
name|core
expr_stmt|;
block|}
block|}
comment|/**      * Resolves the directory to store the FST models based on the configured      * {@link IndexConfiguration#FST_FOLDER}. Also considering the name of the SolrServer and      * SolrCore      * @param core      * @param fstFolderConfig      * @return      */
specifier|private
name|File
name|getFstDirectory
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|fstFolderConfig
parameter_list|)
block|{
name|StrSubstitutor
name|substitutor
init|=
operator|new
name|StrSubstitutor
argument_list|(
operator|new
name|SolrCoreStrLookup
argument_list|(
name|indexReference
argument_list|,
name|core
argument_list|,
name|bundleContext
argument_list|)
argument_list|)
decl_stmt|;
name|substitutor
operator|.
name|setEnableSubstitutionInVariables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|folderStr
init|=
name|substitutor
operator|.
name|replace
argument_list|(
name|fstFolderConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|folderStr
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|folderStr
operator|=
name|substitutor
operator|.
name|replace
argument_list|(
name|folderStr
argument_list|)
expr_stmt|;
block|}
comment|//convert separators to the current OS
name|folderStr
operator|=
name|FilenameUtils
operator|.
name|separatorsToSystem
argument_list|(
name|folderStr
argument_list|)
expr_stmt|;
name|File
name|fstDir
init|=
operator|new
name|File
argument_list|(
name|folderStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fstDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|//create the FST directory
try|try
block|{
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|fstDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|unregisterEngine
argument_list|()
expr_stmt|;
comment|//unregister current engine and clean up
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create Directory for"
operator|+
literal|"storing the FST files at location '"
operator|+
name|fstDir
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
return|return
name|fstDir
return|;
block|}
comment|/**      * unregisters the Engines service registration, closes the SolrCore and      * rests the fields. If no engine is registered this does nothing!      */
specifier|private
name|void
name|unregisterEngine
parameter_list|()
block|{
comment|//use local copies for method calls to avoid concurrency issues
name|ServiceRegistration
name|engineRegistration
init|=
name|this
operator|.
name|engineRegistration
decl_stmt|;
if|if
condition|(
name|engineRegistration
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... unregister Lucene FSTLinkingEngine {}"
argument_list|,
name|engineName
argument_list|)
expr_stmt|;
name|engineRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|this
operator|.
name|engineRegistration
operator|=
literal|null
expr_stmt|;
comment|//reset the field
block|}
name|solrServerReference
operator|=
literal|null
expr_stmt|;
name|SolrCore
name|solrServer
init|=
name|this
operator|.
name|solrCore
decl_stmt|;
if|if
condition|(
name|solrServer
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//decrease the reference count!!
name|this
operator|.
name|solrCore
operator|=
literal|null
expr_stmt|;
comment|//rest the field
block|}
comment|//deactivate the index configuration if present
if|if
condition|(
name|indexConfig
operator|!=
literal|null
condition|)
block|{
name|indexConfig
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|indexConfig
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Internal helper to get th SolrCore from the tracked SolrServer. This      * assumes that tracked SolrServers are of type {@link EmbeddedSolrServer}.      * @param server the SolrServer      * @return the SolrCore or<code>null</code> if<code>null</code> is parsed      * as server.      * @throws IllegalStateException if the parsed {@link SolrServer} is not an      * {@link EmbeddedSolrServer} or it does not contain the configured SolrCore       */
specifier|private
name|SolrCore
name|getSolrCore
parameter_list|(
name|SolrServer
name|server
parameter_list|)
block|{
name|SolrCore
name|core
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|server
operator|instanceof
name|EmbeddedSolrServer
condition|)
block|{
name|core
operator|=
operator|(
operator|(
name|EmbeddedSolrServer
operator|)
name|server
operator|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCore
argument_list|(
name|indexReference
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Solr CoreContainer for IndexRef '"
operator|+
name|indexReference
operator|+
literal|"'is missing the expected SolrCore '"
operator|+
name|indexReference
operator|.
name|getIndex
argument_list|()
operator|+
literal|"' (present: "
operator|+
operator|(
operator|(
name|EmbeddedSolrServer
operator|)
name|server
operator|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCoreNames
argument_list|()
operator|+
literal|")!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|core
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to use '"
operator|+
name|server
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"' (indexRef: "
operator|+
name|indexReference
operator|+
literal|") because it is not an EmbeddedSolrServer!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|core
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
comment|/**      * Deactivates this components.       */
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... deactivate {}: {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|engineName
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrServerTracker
operator|!=
literal|null
condition|)
block|{
comment|//closing the tracker will also cause registered engines to be
comment|//unregistered as service (see #updateEngineRegistration())
name|solrServerTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|solrServerTracker
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|fstCreatorService
operator|!=
literal|null
condition|)
block|{
comment|//we MUST NOT call shutdownNow(), because this would close
comment|//low level Solr FileChannels.
name|fstCreatorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//do not set NULL, as we want to warn users an re-activation if old
comment|//threads are still running.
block|}
name|indexReference
operator|=
literal|null
expr_stmt|;
name|engineMetadata
operator|=
literal|null
expr_stmt|;
name|textProcessingConfig
operator|=
literal|null
expr_stmt|;
name|entityLinkerConfig
operator|=
literal|null
expr_stmt|;
name|bundleContext
operator|=
literal|null
expr_stmt|;
name|skipAltTokensConfig
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * {@link StrSubstitutor} {@link StrLookup} implementation used for      * determining the directory for storing FST files based on the configured      * {@link IndexConfiguration#FST_FOLDER} configuration.      * @author Rupert Westenthaler      *      */
specifier|private
specifier|static
class|class
name|SolrCoreStrLookup
extends|extends
name|StrLookup
block|{
specifier|private
specifier|final
name|BundleContext
name|bc
decl_stmt|;
specifier|private
specifier|final
name|SolrCore
name|core
decl_stmt|;
specifier|private
specifier|final
name|IndexReference
name|indexRef
decl_stmt|;
specifier|public
name|SolrCoreStrLookup
parameter_list|(
name|IndexReference
name|indexRef
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|BundleContext
name|bc
parameter_list|)
block|{
name|this
operator|.
name|indexRef
operator|=
name|indexRef
expr_stmt|;
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|bc
operator|=
name|bc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|lookup
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
literal|"solr-data-dir"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|core
operator|.
name|getDataDir
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"solr-index-dir"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|core
operator|.
name|getIndexDir
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"solr-server-name"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|indexRef
operator|.
name|getServer
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"solr-core-name"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|core
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|bc
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

