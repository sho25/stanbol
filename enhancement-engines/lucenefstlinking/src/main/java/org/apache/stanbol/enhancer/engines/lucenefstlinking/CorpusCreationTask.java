begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|lucenefstlinking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensextant
operator|.
name|solrtexttagger
operator|.
name|TaggerFstCorpus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Runtime creation of FST corpora is done as {@link Callable}. This allows  * users to decide by the configuration of the {@link ExecutorService} to  * control how Corpora are build (e.g. how many can be built at a time.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|CorpusCreationTask
implements|implements
name|Callable
argument_list|<
name|TaggerFstCorpus
argument_list|>
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CorpusCreationTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CorpusInfo
name|fstInfo
decl_stmt|;
specifier|private
specifier|final
name|IndexConfiguration
name|indexConfig
decl_stmt|;
specifier|public
name|CorpusCreationTask
parameter_list|(
name|IndexConfiguration
name|indexConfig
parameter_list|,
name|CorpusInfo
name|fstInfo
parameter_list|)
block|{
if|if
condition|(
name|indexConfig
operator|==
literal|null
operator|||
name|fstInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pared parameters MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexConfig
operator|=
name|indexConfig
expr_stmt|;
name|this
operator|.
name|fstInfo
operator|=
name|fstInfo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TaggerFstCorpus
name|call
parameter_list|()
block|{
if|if
condition|(
operator|!
name|indexConfig
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Index Configuration already deactivated"
decl_stmt|;
name|fstInfo
operator|.
name|setError
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|SolrCore
name|core
init|=
name|indexConfig
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|core
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to build "
operator|+
name|fstInfo
operator|+
literal|" becuase SolrCore "
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" is closed!"
decl_stmt|;
name|fstInfo
operator|.
name|setError
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
specifier|final
name|TaggerFstCorpus
name|corpus
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
init|=
name|core
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
comment|//STANBOL-1177: create FST models in AccessController.doPrivileged(..)
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|searcherRef
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//we do get the AtomicReader, because TaggerFstCorpus will need it
comment|//anyways. This prevents to create another SlowCompositeReaderWrapper.
specifier|final
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getAtomicReader
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... build FST corpus for {}"
argument_list|,
name|fstInfo
argument_list|)
expr_stmt|;
name|corpus
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|TaggerFstCorpus
argument_list|>
argument_list|()
block|{
specifier|public
name|TaggerFstCorpus
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TaggerFstCorpus
argument_list|(
name|reader
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|null
argument_list|,
name|fstInfo
operator|.
name|indexedField
argument_list|,
name|fstInfo
operator|.
name|storedField
argument_list|,
name|fstInfo
operator|.
name|analyzer
argument_list|,
name|fstInfo
operator|.
name|partialMatches
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexConfig
operator|.
name|isActive
argument_list|()
condition|)
block|{
comment|//set the created corpus to the FST Info
name|fstInfo
operator|.
name|setCorpus
argument_list|(
name|corpus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//index configuration no longer active ... ignore the built FST
name|log
operator|.
name|warn
argument_list|(
literal|"Index Config for "
operator|+
name|fstInfo
operator|+
literal|"was deactivated while building FST. "
operator|+
literal|"Built FST will be ignored."
argument_list|)
expr_stmt|;
block|}
return|return
name|corpus
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pae
parameter_list|)
block|{
name|Exception
name|e
init|=
name|pae
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
comment|//IO Exception while loading the file
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read Information to build "
operator|+
name|fstInfo
operator|+
literal|" from SolrIndex '"
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
comment|//Runtime exception
throw|throw
name|RuntimeException
operator|.
name|class
operator|.
name|cast
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
comment|//ensure that we dereference the searcher
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"Task: building "
argument_list|)
operator|.
name|append
argument_list|(
name|fstInfo
argument_list|)
operator|.
name|append
argument_list|(
literal|" for SolrCore "
argument_list|)
operator|.
name|append
argument_list|(
name|indexConfig
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

