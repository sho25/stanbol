begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|sentiment
operator|.
name|summarize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * This class is used to allow adding negations to sentiments even if the  * sentiment was already assigned to an SentimentInfo. In addition this class  * stores the token for the sentiment AND the tokens causing the negations. No  * support for multiple negations - meaning that the sentiment value is inverted  * if 1..* negations are present.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|Sentiment
block|{
specifier|private
name|Token
name|token
decl_stmt|;
specifier|private
name|double
name|value
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|negated
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|nouns
decl_stmt|;
specifier|public
name|Sentiment
parameter_list|(
name|Token
name|token
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|negate
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
if|if
condition|(
name|negated
operator|==
literal|null
condition|)
block|{
comment|//most of the time a singeltonList will do
name|negated
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|negated
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|negated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|negated
operator|=
name|l
expr_stmt|;
block|}
block|}
specifier|public
name|double
name|getValue
parameter_list|()
block|{
return|return
name|negated
operator|==
literal|null
condition|?
name|value
else|:
name|value
operator|*
operator|-
literal|1
return|;
block|}
specifier|public
name|Token
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|getNegates
parameter_list|()
block|{
return|return
name|negated
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|negated
return|;
block|}
specifier|public
name|void
name|noun
parameter_list|(
name|Token
name|noun
parameter_list|)
block|{
if|if
condition|(
name|nouns
operator|==
literal|null
condition|)
block|{
name|nouns
operator|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|nouns
operator|.
name|add
argument_list|(
name|noun
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|getNouns
parameter_list|()
block|{
return|return
name|nouns
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|nouns
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"Sentiment "
argument_list|)
operator|.
name|append
argument_list|(
name|token
operator|.
name|getSpan
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
operator|.
name|append
argument_list|(
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" | negations: "
argument_list|)
operator|.
name|append
argument_list|(
name|getNegates
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" | nouns: "
argument_list|)
operator|.
name|append
argument_list|(
name|getNouns
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|token
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|Sentiment
operator|&&
name|token
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Sentiment
operator|)
name|obj
operator|)
operator|.
name|token
argument_list|)
operator|&&
name|value
operator|==
operator|(
operator|(
name|Sentiment
operator|)
name|obj
operator|)
operator|.
name|value
operator|&&
operator|(
operator|(
name|negated
operator|==
literal|null
operator|&&
operator|(
operator|(
name|Sentiment
operator|)
name|obj
operator|)
operator|.
name|negated
operator|==
literal|null
operator|)
operator|||
operator|(
name|negated
operator|!=
literal|null
operator|&&
operator|!
name|negated
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|(
name|Sentiment
operator|)
name|obj
operator|)
operator|.
name|negated
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|Sentiment
operator|)
name|obj
operator|)
operator|.
name|negated
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

