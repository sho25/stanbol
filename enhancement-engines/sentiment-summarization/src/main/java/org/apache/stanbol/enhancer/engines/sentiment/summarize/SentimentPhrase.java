begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|sentiment
operator|.
name|summarize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * Used to collect {@link Sentiment}s that refer the same   * {@link Sentiment#getAboutness()}  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|SentimentPhrase
block|{
specifier|private
name|Set
argument_list|<
name|Token
argument_list|>
name|nouns
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|end
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Sentiment
argument_list|>
name|sentiments
init|=
operator|new
name|ArrayList
argument_list|<
name|Sentiment
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|/**      * lazzy initialised on the first call of       */
specifier|private
name|Double
index|[]
name|__sentiment
decl_stmt|;
comment|/**      * Creates a single Noun sentiment Phrase      * @param noun the noun      * @param index the index of the word relative to the sentence      */
specifier|public
name|SentimentPhrase
parameter_list|(
name|Sentiment
name|sentiment
parameter_list|)
block|{
name|addSentiment
argument_list|(
name|sentiment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSentiment
parameter_list|(
name|Sentiment
name|sentiment
parameter_list|)
block|{
name|sentiments
operator|.
name|add
argument_list|(
name|sentiment
argument_list|)
expr_stmt|;
name|nouns
operator|.
name|addAll
argument_list|(
name|sentiment
operator|.
name|getAboutness
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|>
name|sentiment
operator|.
name|getStart
argument_list|()
condition|)
block|{
name|start
operator|=
name|sentiment
operator|.
name|getStart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|<
name|sentiment
operator|.
name|getEnd
argument_list|()
condition|)
block|{
name|end
operator|=
name|sentiment
operator|.
name|getEnd
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the positive sentiment value      * @return the sentiment of<code>0.0</code> if no positive sentiment is present      */
specifier|public
name|Double
name|getPositiveSentiment
parameter_list|()
block|{
if|if
condition|(
name|__sentiment
operator|==
literal|null
condition|)
block|{
name|summarizeSentimentValues
argument_list|()
expr_stmt|;
block|}
return|return
name|__sentiment
index|[
literal|1
index|]
return|;
block|}
comment|/**      * Getter for the negative sentiment value      * @return the sentiment of<code>0.0</code> if no negative sentiment is present      */
specifier|public
name|Double
name|getNegativeSentiment
parameter_list|()
block|{
if|if
condition|(
name|__sentiment
operator|==
literal|null
condition|)
block|{
name|summarizeSentimentValues
argument_list|()
expr_stmt|;
block|}
return|return
name|__sentiment
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Getter for the average Sentiment value       * @return      */
specifier|public
name|Double
name|getSentiment
parameter_list|()
block|{
if|if
condition|(
name|__sentiment
operator|==
literal|null
condition|)
block|{
name|summarizeSentimentValues
argument_list|()
expr_stmt|;
block|}
return|return
name|__sentiment
index|[
literal|2
index|]
return|;
block|}
specifier|public
name|Sentence
name|getSentence
parameter_list|()
block|{
return|return
name|sentiments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSentence
argument_list|()
return|;
block|}
specifier|private
name|void
name|summarizeSentimentValues
parameter_list|()
block|{
name|double
name|positive
init|=
literal|0
decl_stmt|;
name|double
name|negative
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Sentiment
name|sentiment
range|:
name|sentiments
control|)
block|{
name|double
name|value
init|=
name|sentiment
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|negative
operator|==
literal|0
condition|)
block|{
name|negative
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|negative
operator|=
name|tnorm
argument_list|(
name|negative
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|positive
operator|==
literal|0
condition|)
block|{
name|positive
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|positive
operator|=
name|tnorm
argument_list|(
name|positive
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|__sentiment
operator|=
operator|new
name|Double
index|[]
block|{
name|negative
operator|>
literal|0
condition|?
name|Double
operator|.
name|valueOf
argument_list|(
name|negative
operator|*
operator|-
literal|1
argument_list|)
else|:
literal|null
block|,
name|positive
operator|>
literal|0
condition|?
name|Double
operator|.
name|valueOf
argument_list|(
name|positive
argument_list|)
else|:
literal|null
block|,
name|Double
operator|.
name|valueOf
argument_list|(
name|positive
operator|-
name|negative
argument_list|)
block|}
expr_stmt|;
block|}
comment|/**      * Combines two sentiment values of the same phrase      * @param a      * @param b      * @return      */
specifier|private
name|double
name|tnorm
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
name|b
operator|)
operator|-
operator|(
name|a
operator|*
name|b
operator|)
return|;
comment|//return (a+b)/(1+(a*b));
block|}
comment|/**      * Start (char) index of this phrase      * @return      */
specifier|public
name|int
name|getStartIndex
parameter_list|()
block|{
return|return
name|start
return|;
block|}
comment|/**      * End (char) index of this phrase      * @return      */
specifier|public
name|int
name|getEndIndex
parameter_list|()
block|{
return|return
name|end
return|;
block|}
comment|/**      * The {@link Sentiment}s contained in this Phrase      */
specifier|public
name|List
argument_list|<
name|Sentiment
argument_list|>
name|getSentiments
parameter_list|()
block|{
return|return
name|sentiments
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"SentimentPhrase["
argument_list|)
operator|.
name|append
argument_list|(
name|start
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|end
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|append
argument_list|(
literal|" positive: "
argument_list|)
operator|.
name|append
argument_list|(
name|sentiments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"| negative: "
argument_list|)
operator|.
name|append
argument_list|(
name|sentiments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

