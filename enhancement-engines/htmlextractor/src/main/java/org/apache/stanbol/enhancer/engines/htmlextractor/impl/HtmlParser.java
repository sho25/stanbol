begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|Jsoup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_comment
comment|/**  * HtmlParser.java  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|HtmlParser
block|{
comment|/**      * This contains the logger.      */
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HtmlParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|baseURI
init|=
literal|""
decl_stmt|;
specifier|public
name|HtmlParser
parameter_list|()
block|{     }
comment|/**      * @return the baseURI      */
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
name|baseURI
return|;
block|}
comment|/**      * @param baseURI the baseURI to set      */
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|String
name|baseURI
parameter_list|)
block|{
name|this
operator|.
name|baseURI
operator|=
name|baseURI
expr_stmt|;
block|}
specifier|public
name|Document
name|getDOM
parameter_list|(
name|String
name|html
parameter_list|)
block|{
if|if
condition|(
name|html
operator|!=
literal|null
condition|)
block|{
return|return
name|getDOM
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|html
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Document
name|getDOM
parameter_list|(
name|InputStream
name|html
parameter_list|,
name|String
name|charset
parameter_list|)
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|DOMBuilder
operator|.
name|jsoup2DOM
argument_list|(
name|Jsoup
operator|.
name|parse
argument_list|(
name|html
argument_list|,
name|charset
argument_list|,
name|baseURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|argv
init|=
literal|0
decl_stmt|;
name|String
name|encoding
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|argv
operator|<
name|args
operator|.
name|length
operator|&&
name|args
index|[
name|argv
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
name|argv
index|]
operator|.
name|equals
argument_list|(
literal|"-enc"
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|args
index|[
operator|++
name|argv
index|]
expr_stmt|;
block|}
operator|++
name|argv
expr_stmt|;
block|}
name|HtmlParser
name|parser
init|=
operator|new
name|HtmlParser
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|argv
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|//        parser.setBaseURI(new File(args[i]).toURI().toString());
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|getDOM
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|DOMUtils
operator|.
name|writeXml
argument_list|(
name|doc
argument_list|,
literal|"UTF-8"
argument_list|,
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

