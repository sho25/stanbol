begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|CharsetDetector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|CharsetMatch
import|;
end_import

begin_comment
comment|/**  * EncodingDetector.java  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CharsetRecognizer
block|{
comment|/**      * Restrict instantiation      */
specifier|private
name|CharsetRecognizer
parameter_list|()
block|{}
comment|/**      * This contains the logger.      */
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CharsetRecognizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|checkPattern
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|pattern
parameter_list|,
name|int
name|group
parameter_list|)
block|{
name|Pattern
name|pat
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|pat
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
name|group
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|checkFormat
parameter_list|(
name|String
name|format
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|bytes
decl_stmt|;
name|String
name|decl
decl_stmt|;
name|in
operator|.
name|mark
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
name|int
name|read
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
name|defaultValue
operator|=
literal|"UTF-8"
expr_stmt|;
name|bytes
operator|=
operator|new
name|byte
index|[
literal|80
index|]
expr_stmt|;
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decl
operator|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|read
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
name|result
operator|=
name|checkPattern
argument_list|(
name|decl
argument_list|,
literal|"encoding=\"(\\w[-\\w]+)\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"html"
argument_list|)
condition|)
block|{
name|bytes
operator|=
operator|new
name|byte
index|[
literal|2048
index|]
expr_stmt|;
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decl
operator|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|read
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
name|result
operator|=
name|checkPattern
argument_list|(
name|decl
argument_list|,
literal|"<meta .*?content=\".*charset=(\\w[-\\w]+).*?/>"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|format
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" encoding: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|String
name|detect
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|detect
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|detect
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the input stream must support marks
if|if
condition|(
operator|!
name|in
operator|.
name|markSupported
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mark not supported by input stream"
argument_list|)
throw|;
block|}
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|checkFormat
argument_list|(
name|format
argument_list|,
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
comment|// in case of HTML or XML check whether there is a charset
comment|// specification; might be too fragile
name|CharsetDetector
name|detector
init|=
operator|new
name|CharsetDetector
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|detector
operator|.
name|setDeclaredEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
name|detector
operator|.
name|setText
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|CharsetMatch
name|found
init|=
name|detector
operator|.
name|detect
argument_list|()
decl_stmt|;
name|result
operator|=
name|found
operator|.
name|getName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encoding: "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|format
init|=
literal|null
decl_stmt|;
name|String
name|encoding
init|=
literal|null
decl_stmt|;
name|int
name|argv
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|argv
operator|<
name|args
operator|.
name|length
operator|&&
name|args
index|[
name|argv
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|String
name|option
init|=
name|args
index|[
name|argv
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
name|format
operator|=
name|args
index|[
operator|++
name|argv
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"e"
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|args
index|[
operator|++
name|argv
index|]
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"illegal option: "
operator|+
name|option
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
operator|++
name|argv
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|argv
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|BufferedInputStream
name|fstream
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|found
init|=
name|CharsetRecognizer
operator|.
name|detect
argument_list|(
name|fstream
argument_list|,
name|format
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Encoding: "
operator|+
name|found
operator|+
literal|": "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|/*                  * check whether the stream is reset correctly byte[] bytes =                  * new byte[50]; int read = fstream.read(bytes);                  * System.out.println(new String(bytes));                  */
name|fstream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

