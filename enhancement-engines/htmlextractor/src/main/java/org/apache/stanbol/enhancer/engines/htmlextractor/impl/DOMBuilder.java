begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|htmlextractor
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DOMBuilder
block|{
comment|/**    * Restrict instantiation    */
specifier|private
name|DOMBuilder
parameter_list|()
block|{}
comment|/**    * Returns a W3C DOM that exposes the same content as the supplied Jsoup document into a W3C DOM.    * @param jsoupDocument The Jsoup document to convert.    * @return A W3C Document.    */
specifier|public
specifier|static
name|Document
name|jsoup2DOM
parameter_list|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Document
name|jsoupDocument
parameter_list|)
block|{
name|Document
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|/* Obtain the document builder for the configured XML parser. */
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
comment|/* Create a document to contain the content. */
name|document
operator|=
name|docBuilder
operator|.
name|newDocument
argument_list|()
expr_stmt|;
name|createDOM
argument_list|(
name|jsoupDocument
argument_list|,
name|document
argument_list|,
name|document
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|pce
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|pce
argument_list|)
throw|;
block|}
return|return
name|document
return|;
block|}
comment|/**    * The internal helper that copies content from the specified Jsoup<tt>Node</tt> into a W3C {@link Node}.    * @param node The Jsoup node containing the content to copy to the specified W3C {@link Node}.    * @param out The W3C {@link Node} that receives the DOM content.    */
specifier|private
specifier|static
name|void
name|createDOM
parameter_list|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Node
name|node
parameter_list|,
name|Node
name|out
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Document
condition|)
block|{
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Document
name|d
init|=
operator|(
operator|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Document
operator|)
name|node
operator|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Node
name|n
range|:
name|d
operator|.
name|childNodes
argument_list|()
control|)
block|{
name|createDOM
argument_list|(
name|n
argument_list|,
name|out
argument_list|,
name|doc
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Element
condition|)
block|{
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Element
name|e
init|=
operator|(
operator|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Element
operator|)
name|node
operator|)
decl_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
name|_e
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|e
operator|.
name|tagName
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|appendChild
argument_list|(
name|_e
argument_list|)
expr_stmt|;
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Attributes
name|atts
init|=
name|e
operator|.
name|attributes
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Attribute
name|a
range|:
name|atts
control|)
block|{
name|String
name|attName
init|=
name|a
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//omit xhtml namespace
if|if
condition|(
name|attName
operator|.
name|equals
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|attPrefix
init|=
name|getNSPrefix
argument_list|(
name|attName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attPrefix
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attPrefix
operator|.
name|equals
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
block|{
name|ns
operator|.
name|put
argument_list|(
name|getLocalName
argument_list|(
name|attName
argument_list|)
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|attPrefix
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
name|String
name|namespace
init|=
name|ns
operator|.
name|get
argument_list|(
name|attPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
comment|//fix attribute names looking like qnames
name|attName
operator|=
name|attName
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|_e
operator|.
name|setAttribute
argument_list|(
name|attName
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|Node
name|n
range|:
name|e
operator|.
name|childNodes
argument_list|()
control|)
block|{
name|createDOM
argument_list|(
name|n
argument_list|,
name|_e
argument_list|,
name|doc
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|TextNode
condition|)
block|{
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|TextNode
name|t
init|=
operator|(
operator|(
name|org
operator|.
name|jsoup
operator|.
name|nodes
operator|.
name|TextNode
operator|)
name|node
operator|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|out
operator|instanceof
name|Document
operator|)
condition|)
block|{
name|out
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// some hacks for handling namespace in jsoup2DOM conversion
specifier|private
specifier|static
name|String
name|getNSPrefix
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|getLocalName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

