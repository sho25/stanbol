begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|Case
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|CaseTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|Definitness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|Gender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|GenderTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|NumberFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|NumberTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|Person
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|Tense
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|TenseTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|VerbMood
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|VerbMoodTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link TagSet}s for known CELI (linguagrid.org) POS and morphological features models.  *<p>  *   * @author Rupert Westenthaler  * @author Alessio Bosca  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CeliTagSetRegistry
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CeliTagSetRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|CeliTagSetRegistry
name|instance
init|=
operator|new
name|CeliTagSetRegistry
argument_list|()
decl_stmt|;
specifier|private
name|CeliTagSetRegistry
parameter_list|()
block|{}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|>
name|posMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PosTag
argument_list|>
argument_list|>
name|unmappedPosTagsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PosTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|GenderTag
argument_list|>
argument_list|>
name|genderMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|GenderTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GenderTag
argument_list|>
argument_list|>
name|unmappedGenderTagsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GenderTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|NumberTag
argument_list|>
argument_list|>
name|numberMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|NumberTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NumberTag
argument_list|>
argument_list|>
name|unmappedNumberTagsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NumberTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Person
argument_list|>
argument_list|>
name|personMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Person
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|CaseTag
argument_list|>
argument_list|>
name|caseMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|CaseTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CaseTag
argument_list|>
argument_list|>
name|unmappedCaseTagsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CaseTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definitness
argument_list|>
argument_list|>
name|definitenessMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definitness
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|VerbMoodTag
argument_list|>
argument_list|>
name|verbFormMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|VerbMoodTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|VerbMoodTag
argument_list|>
argument_list|>
name|unmappedVerbMoodTagsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|VerbMoodTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|TenseTag
argument_list|>
argument_list|>
name|tenseMappingsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|TenseTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TenseTag
argument_list|>
argument_list|>
name|unmappedTenseTagsByLanguage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TenseTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|CeliTagSetRegistry
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addPosTagset
parameter_list|(
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|posMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link PosTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link PosTag}      */
specifier|public
name|PosTag
name|getPosTag
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
return|return
name|getTag
argument_list|(
name|posMappingsByLanguage
argument_list|,
name|unmappedPosTagsByLanguage
argument_list|,
name|PosTag
operator|.
name|class
argument_list|,
name|language
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addGenderTagset
parameter_list|(
name|TagSet
argument_list|<
name|GenderTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|genderMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link GenderTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link GenderTag}      */
specifier|public
name|GenderTag
name|getGenderTag
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
return|return
name|getTag
argument_list|(
name|genderMappingsByLanguage
argument_list|,
name|unmappedGenderTagsByLanguage
argument_list|,
name|GenderTag
operator|.
name|class
argument_list|,
name|language
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addNumberTagset
parameter_list|(
name|TagSet
argument_list|<
name|NumberTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|numberMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link NumberTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link NumberTag}      */
specifier|public
name|NumberTag
name|getNumber
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
return|return
name|getTag
argument_list|(
name|numberMappingsByLanguage
argument_list|,
name|unmappedNumberTagsByLanguage
argument_list|,
name|NumberTag
operator|.
name|class
argument_list|,
name|language
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addPersonMappings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Person
argument_list|>
name|model
parameter_list|,
name|String
modifier|...
name|langs
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|langs
control|)
block|{
if|if
condition|(
name|personMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link PersonTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link PersonTag}      */
specifier|public
name|Person
name|getPerson
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Person
argument_list|>
name|langMappings
init|=
name|personMappingsByLanguage
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
return|return
name|langMappings
operator|==
literal|null
condition|?
literal|null
else|:
name|langMappings
operator|.
name|get
argument_list|(
name|tag
argument_list|)
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addCaseTagset
parameter_list|(
name|TagSet
argument_list|<
name|CaseTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|caseMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link CaseTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link PersonTag}      */
specifier|public
name|CaseTag
name|getCaseTag
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
return|return
name|getTag
argument_list|(
name|caseMappingsByLanguage
argument_list|,
name|unmappedCaseTagsByLanguage
argument_list|,
name|CaseTag
operator|.
name|class
argument_list|,
name|language
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addDefinitnessTagset
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Definitness
argument_list|>
name|model
parameter_list|,
name|String
modifier|...
name|langs
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|langs
control|)
block|{
if|if
condition|(
name|definitenessMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link DefinitnessTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link DefinitnessTag}      */
specifier|public
name|Definitness
name|getDefinitnessTag
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Definitness
argument_list|>
name|langMappings
init|=
name|definitenessMappingsByLanguage
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
return|return
name|langMappings
operator|==
literal|null
condition|?
literal|null
else|:
name|langMappings
operator|.
name|get
argument_list|(
name|tag
argument_list|)
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addVerbFormTagset
parameter_list|(
name|TagSet
argument_list|<
name|VerbMoodTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|verbFormMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link VerbMoodTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link VerbMoodTag}      */
specifier|public
name|VerbMoodTag
name|getVerbMoodTag
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
return|return
name|getTag
argument_list|(
name|verbFormMappingsByLanguage
argument_list|,
name|unmappedVerbMoodTagsByLanguage
argument_list|,
name|VerbMoodTag
operator|.
name|class
argument_list|,
name|language
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**      * Setter for the mappings of {@link TagSet} by language.      *       * @param mappings      *            expressed with a {@link TagSet}      */
specifier|private
name|void
name|addTenseTagset
parameter_list|(
name|TagSet
argument_list|<
name|TenseTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|tenseMappingsByLanguage
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple Models for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for a {@link TenseTag} based on the Registry configuration      *       * @param language      *            the language      * @param tag      *            the {@link String} tag as returned by CELI      * @return the {@link TenseTag}      */
specifier|public
name|TenseTag
name|getTenseTag
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
return|return
name|getTag
argument_list|(
name|tenseMappingsByLanguage
argument_list|,
name|unmappedTenseTagsByLanguage
argument_list|,
name|TenseTag
operator|.
name|class
argument_list|,
name|language
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/**      * Utility that uses generics and reflection to      *<ul>      *<li>lookup mapped {@link Tag}s      *<li>lookup already created unmapped {@link Tag}s      *<li>create unmapped {@link Tag}s for {@link String} tags that are encountered the first time      *</ul>      *       * @param tagSets      *            the {@link TagSet} with the mapped Tags. The key represents the language      * @param unmapped      *            unmapped {@link Tag}s. The key of the outer map is the language. The key of the inner map is      *            the {@link String} tag.      * @param clazz      *            the {@link Class} of the {@link Tag}. Used to create an instance via reflection.      * @param language      *            the language      * @param tag      *            the string tag      * @return the Tag      */
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Tag
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|getTag
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|T
argument_list|>
argument_list|>
name|tagSets
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|unmapped
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|language
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|T
name|t
init|=
literal|null
decl_stmt|;
name|TagSet
argument_list|<
name|T
argument_list|>
name|tagSet
init|=
name|tagSets
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagSet
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|tagSet
operator|.
name|getTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
comment|// warn about missing mappings for Tags to Olia!
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|u
init|=
name|unmapped
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|u
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
expr_stmt|;
name|unmapped
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
name|t
operator|=
name|u
operator|.
name|get
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|t
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with String tag '"
operator|+
name|tag
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with String tag '"
operator|+
name|tag
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with String tag '"
operator|+
name|tag
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with String tag '"
operator|+
name|tag
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with String tag '"
operator|+
name|tag
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with String tag '"
operator|+
name|tag
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"added unrecognized {} '{}' for Language {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|clazz
operator|.
name|getSimpleName
argument_list|()
block|,
name|tag
block|,
name|language
block|}
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|t
return|;
block|}
comment|/*****************************************************************      * POS TAGSETS MAPPINGS TO OLIA ONTOLOGY *      ****************************************************************/
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PosTag
argument_list|>
name|TAGSET
init|=
operator|new
name|TagSet
argument_list|<
name|PosTag
argument_list|>
argument_list|(
literal|"CELI POS tags"
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|,
literal|"sv"
argument_list|)
decl_stmt|;
static|static
block|{
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"NOUN"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"ADJ"
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"ADV"
argument_list|,
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PD"
argument_list|,
name|LexicalCategory
operator|.
name|PronounOrDeterminer
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"CONJ"
argument_list|,
name|LexicalCategory
operator|.
name|Conjuction
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PREP"
argument_list|,
name|LexicalCategory
operator|.
name|Adposition
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"VERB"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"INTERJ"
argument_list|,
name|LexicalCategory
operator|.
name|Interjection
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"NUM"
argument_list|,
name|Pos
operator|.
name|Numeral
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"SYMBOL"
argument_list|,
name|LexicalCategory
operator|.
name|Residual
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PART"
argument_list|,
name|LexicalCategory
operator|.
name|Unique
argument_list|)
argument_list|)
expr_stmt|;
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"PN"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
comment|//ProperNoun));
name|TAGSET
operator|.
name|addTag
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"CLI"
argument_list|,
name|LexicalCategory
operator|.
name|Unique
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addPosTagset
argument_list|(
name|TAGSET
argument_list|)
expr_stmt|;
block|}
comment|/*****************************************************************      * MORPHOLOGICAL FEATURES TAGSETS MAPPINGS TO OLIA ONTOLOGY: GENDER, NUMBER, PERSON, CASE, DEFINITENESS,      * VERB_FORM, TENSE      ****************************************************************/
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|GenderTag
argument_list|>
name|GENDER
init|=
operator|new
name|TagSet
argument_list|<
name|GenderTag
argument_list|>
argument_list|(
literal|"CELI GENDER tags"
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|,
literal|"sv"
argument_list|)
decl_stmt|;
static|static
block|{
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"F"
argument_list|,
name|Gender
operator|.
name|Feminine
argument_list|)
argument_list|)
expr_stmt|;
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"FEM"
argument_list|,
name|Gender
operator|.
name|Feminine
argument_list|)
argument_list|)
expr_stmt|;
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"M"
argument_list|,
name|Gender
operator|.
name|Masculine
argument_list|)
argument_list|)
expr_stmt|;
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"MAS"
argument_list|,
name|Gender
operator|.
name|Masculine
argument_list|)
argument_list|)
expr_stmt|;
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"MASC"
argument_list|,
name|Gender
operator|.
name|Masculine
argument_list|)
argument_list|)
expr_stmt|;
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"NE"
argument_list|,
name|Gender
operator|.
name|Neuter
argument_list|)
argument_list|)
expr_stmt|;
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"NEU"
argument_list|,
name|Gender
operator|.
name|Neuter
argument_list|)
argument_list|)
expr_stmt|;
name|GENDER
operator|.
name|addTag
argument_list|(
operator|new
name|GenderTag
argument_list|(
literal|"UTR"
argument_list|,
name|Gender
operator|.
name|Common
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addGenderTagset
argument_list|(
name|GENDER
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|NumberTag
argument_list|>
name|NUMBER
init|=
operator|new
name|TagSet
argument_list|<
name|NumberTag
argument_list|>
argument_list|(
literal|"CELI NUMBER tags"
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|,
literal|"sv"
argument_list|)
decl_stmt|;
static|static
block|{
name|NUMBER
operator|.
name|addTag
argument_list|(
operator|new
name|NumberTag
argument_list|(
literal|"SGL"
argument_list|,
name|NumberFeature
operator|.
name|Singular
argument_list|)
argument_list|)
expr_stmt|;
name|NUMBER
operator|.
name|addTag
argument_list|(
operator|new
name|NumberTag
argument_list|(
literal|"SIN"
argument_list|,
name|NumberFeature
operator|.
name|Singular
argument_list|)
argument_list|)
expr_stmt|;
name|NUMBER
operator|.
name|addTag
argument_list|(
operator|new
name|NumberTag
argument_list|(
literal|"SING"
argument_list|,
name|NumberFeature
operator|.
name|Singular
argument_list|)
argument_list|)
expr_stmt|;
name|NUMBER
operator|.
name|addTag
argument_list|(
operator|new
name|NumberTag
argument_list|(
literal|"PLU"
argument_list|,
name|NumberFeature
operator|.
name|Plural
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addNumberTagset
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
block|}
comment|//add the person models
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Person
argument_list|>
name|model
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Person
argument_list|>
argument_list|()
decl_stmt|;
name|model
operator|.
name|put
argument_list|(
literal|"FIRST"
argument_list|,
name|Person
operator|.
name|First
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
literal|"SECOND"
argument_list|,
name|Person
operator|.
name|Second
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
literal|"THIRD"
argument_list|,
name|Person
operator|.
name|Third
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addPersonMappings
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|model
argument_list|)
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|CaseTag
argument_list|>
name|CASE
init|=
operator|new
name|TagSet
argument_list|<
name|CaseTag
argument_list|>
argument_list|(
literal|"CELI CASE tags"
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|,
literal|"sv"
argument_list|)
decl_stmt|;
static|static
block|{
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"NOMORPH"
argument_list|,
name|Case
operator|.
name|Uninflected
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"NOM"
argument_list|,
name|Case
operator|.
name|Nominative
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"GEN"
argument_list|,
name|Case
operator|.
name|Genitive
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"GEN2"
argument_list|,
name|Case
operator|.
name|Genitive
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"ACC"
argument_list|,
name|Case
operator|.
name|Accusative
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"ACCAN"
argument_list|,
name|Case
operator|.
name|Accusative
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"ACCNAN"
argument_list|,
name|Case
operator|.
name|Accusative
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"ACC2"
argument_list|,
name|Case
operator|.
name|Accusative
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"DAT"
argument_list|,
name|Case
operator|.
name|Dative
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"DAT22"
argument_list|,
name|Case
operator|.
name|Dative
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"INS"
argument_list|,
name|Case
operator|.
name|Instrumental
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"INS2"
argument_list|,
name|Case
operator|.
name|Instrumental
argument_list|)
argument_list|)
expr_stmt|;
name|CASE
operator|.
name|addTag
argument_list|(
operator|new
name|CaseTag
argument_list|(
literal|"LOC"
argument_list|,
name|Case
operator|.
name|Locative
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addCaseTagset
argument_list|(
name|CASE
argument_list|)
expr_stmt|;
block|}
comment|//definitness models
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Definitness
argument_list|>
name|model
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Definitness
argument_list|>
argument_list|()
decl_stmt|;
name|model
operator|.
name|put
argument_list|(
literal|"DEF"
argument_list|,
name|Definitness
operator|.
name|Definite
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
literal|"INDEF"
argument_list|,
name|Definitness
operator|.
name|Indefinite
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
literal|"IND"
argument_list|,
name|Definitness
operator|.
name|Indefinite
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addDefinitnessTagset
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|model
argument_list|)
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|,
literal|"sv"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|VerbMoodTag
argument_list|>
name|VERB_FORM
init|=
operator|new
name|TagSet
argument_list|<
name|VerbMoodTag
argument_list|>
argument_list|(
literal|"CELI VERB FORM tags"
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|,
literal|"sv"
argument_list|)
decl_stmt|;
static|static
block|{
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"GERUND"
argument_list|,
name|VerbMood
operator|.
name|Gerund
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"GEROUNDPRS"
argument_list|,
name|VerbMood
operator|.
name|Gerund
argument_list|)
argument_list|)
expr_stmt|;
comment|//
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"IMPERATIVE"
argument_list|,
name|VerbMood
operator|.
name|ImperativeVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"IMP"
argument_list|,
name|VerbMood
operator|.
name|ImperativeVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"INDIC"
argument_list|,
name|VerbMood
operator|.
name|IndicativeVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"IND"
argument_list|,
name|VerbMood
operator|.
name|IndicativeVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"CONGIUNT"
argument_list|,
name|VerbMood
operator|.
name|SubjunctiveVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"SUBJ"
argument_list|,
name|VerbMood
operator|.
name|SubjunctiveVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"SUB"
argument_list|,
name|VerbMood
operator|.
name|SubjunctiveVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"INFIN"
argument_list|,
name|VerbMood
operator|.
name|Infinitive
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"INF"
argument_list|,
name|VerbMood
operator|.
name|Infinitive
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PASTPART"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PASPART"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PCPRF"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PRESPART"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PRSPART"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PCPRS"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PART"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"PTC"
argument_list|,
name|VerbMood
operator|.
name|Participle
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"CONDIZ"
argument_list|,
name|VerbMood
operator|.
name|ConditionalVerb
argument_list|)
argument_list|)
expr_stmt|;
name|VERB_FORM
operator|.
name|addTag
argument_list|(
operator|new
name|VerbMoodTag
argument_list|(
literal|"SUP"
argument_list|,
name|VerbMood
operator|.
name|Supine
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addVerbFormTagset
argument_list|(
name|VERB_FORM
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|TenseTag
argument_list|>
name|TENSE
init|=
operator|new
name|TagSet
argument_list|<
name|TenseTag
argument_list|>
argument_list|(
literal|"CELI TENSE tags"
argument_list|,
literal|"da"
argument_list|,
literal|"de"
argument_list|,
literal|"it"
argument_list|,
literal|"ro"
argument_list|,
literal|"ru"
argument_list|,
literal|"sv"
argument_list|)
decl_stmt|;
static|static
block|{
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PRS"
argument_list|,
name|Tense
operator|.
name|Present
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PRES"
argument_list|,
name|Tense
operator|.
name|Present
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"IMPER"
argument_list|,
name|Tense
operator|.
name|Imperfect
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PER"
argument_list|,
name|Tense
operator|.
name|Perfect
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PASSREM"
argument_list|,
name|Tense
operator|.
name|RemotePast
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PSTPER"
argument_list|,
name|Tense
operator|.
name|PastPerfect
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PST"
argument_list|,
name|Tense
operator|.
name|Past
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"FUT"
argument_list|,
name|Tense
operator|.
name|Future
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PCPRF"
argument_list|,
name|Tense
operator|.
name|Past
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PCPRS"
argument_list|,
name|Tense
operator|.
name|Present
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PRT"
argument_list|,
name|Tense
operator|.
name|Past
argument_list|)
argument_list|)
expr_stmt|;
name|TENSE
operator|.
name|addTag
argument_list|(
operator|new
name|TenseTag
argument_list|(
literal|"PRSFUT"
argument_list|,
name|Tense
operator|.
name|Present
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|addTenseTagset
argument_list|(
name|TENSE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

