begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|sentimentanalysis
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|SentimentExpression
block|{
specifier|private
name|String
name|sentimentType
init|=
literal|null
decl_stmt|,
name|snippetStr
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|startSnippet
init|=
literal|null
decl_stmt|,
name|endSnippet
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|arguments
init|=
literal|null
decl_stmt|;
specifier|public
name|SentimentExpression
parameter_list|()
block|{}
specifier|public
name|SentimentExpression
parameter_list|(
name|String
name|sentimentType
parameter_list|,
name|String
name|snippetStr
parameter_list|,
name|Integer
name|startSnippet
parameter_list|,
name|Integer
name|endSnippet
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|arguments
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|sentimentType
operator|=
name|sentimentType
expr_stmt|;
name|this
operator|.
name|snippetStr
operator|=
name|snippetStr
expr_stmt|;
name|this
operator|.
name|startSnippet
operator|=
name|startSnippet
expr_stmt|;
name|this
operator|.
name|endSnippet
operator|=
name|endSnippet
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|Integer
name|getEndSnippet
parameter_list|()
block|{
return|return
name|endSnippet
return|;
block|}
specifier|public
name|double
name|getSentimentPolarityAsDoubleValue
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|sentimentType
operator|.
name|equalsIgnoreCase
argument_list|(
name|SentimentAnalysisServiceClientHttp
operator|.
name|positive
argument_list|)
condition|)
return|return
literal|1.0
return|;
elseif|else
if|if
condition|(
name|this
operator|.
name|sentimentType
operator|.
name|equalsIgnoreCase
argument_list|(
name|SentimentAnalysisServiceClientHttp
operator|.
name|negative
argument_list|)
condition|)
return|return
operator|-
literal|1.0
return|;
else|else
return|return
literal|0.0
return|;
block|}
specifier|public
name|String
name|getSentimentType
parameter_list|()
block|{
return|return
name|sentimentType
return|;
block|}
specifier|public
name|String
name|getSnippetStr
parameter_list|()
block|{
return|return
name|snippetStr
return|;
block|}
specifier|public
name|Integer
name|getStartSnippet
parameter_list|()
block|{
return|return
name|startSnippet
return|;
block|}
specifier|public
name|void
name|setArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
block|}
specifier|public
name|void
name|setEndSnippet
parameter_list|(
name|Integer
name|endSnippet
parameter_list|)
block|{
name|this
operator|.
name|endSnippet
operator|=
name|endSnippet
expr_stmt|;
block|}
specifier|public
name|void
name|setSentimentType
parameter_list|(
name|String
name|sentimentType
parameter_list|)
block|{
name|this
operator|.
name|sentimentType
operator|=
name|sentimentType
expr_stmt|;
block|}
specifier|public
name|void
name|setSnippetStr
parameter_list|(
name|String
name|snippetStr
parameter_list|)
block|{
name|this
operator|.
name|snippetStr
operator|=
name|snippetStr
expr_stmt|;
block|}
specifier|public
name|void
name|setStartSnippet
parameter_list|(
name|Integer
name|startSnippet
parameter_list|)
block|{
name|this
operator|.
name|startSnippet
operator|=
name|startSnippet
expr_stmt|;
block|}
block|}
end_class

end_unit

