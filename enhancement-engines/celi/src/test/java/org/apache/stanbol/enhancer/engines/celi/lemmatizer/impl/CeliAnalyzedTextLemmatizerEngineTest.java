begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|lemmatizer
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|lemmatizer
operator|.
name|impl
operator|.
name|CeliLemmatizerEnhancementEngine
operator|.
name|SERVICE_URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|POS_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_LANGUAGE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|CeliConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|testutils
operator|.
name|MockComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|MorphoFeatures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|RemoteServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CeliAnalyzedTextLemmatizerEngineTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CeliAnalyzedTextLemmatizerEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ContentItemFactory
name|ciFactory
init|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AnalysedTextFactory
name|atFactory
init|=
name|AnalysedTextFactory
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
comment|/*      * Data for the GERMAN test      */
specifier|public
specifier|static
specifier|final
name|String
name|de_verb
init|=
literal|"verbrachten"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|de_adjective
init|=
literal|"kaiserlichen"
decl_stmt|;
comment|//"sensationellen"; //"sch√∂nen";
specifier|public
specifier|static
specifier|final
name|String
name|de_noun
init|=
literal|"Urlaub"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|de_text
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Wir %s einen %s %s in der Schweiz"
argument_list|,
name|de_verb
argument_list|,
name|de_adjective
argument_list|,
name|de_noun
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|de_verbStart
init|=
name|de_text
operator|.
name|indexOf
argument_list|(
name|de_verb
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|de_verbProb
init|=
literal|0.98765d
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|de_adjectiveStart
init|=
name|de_text
operator|.
name|indexOf
argument_list|(
name|de_adjective
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|de_adjectiveProb
init|=
literal|0.87654d
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|de_nounStart
init|=
name|de_text
operator|.
name|indexOf
argument_list|(
name|de_noun
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|de_nounProb
init|=
literal|0.998877d
decl_stmt|;
specifier|public
specifier|static
name|CeliAnalyzedTextLemmatizerEngine
name|engine
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initEngine
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
literal|"celiLemmatizer"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CeliConstants
operator|.
name|CELI_TEST_ACCOUNT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SERVICE_URL
argument_list|,
literal|"http://linguagrid.org/LSGrid/ws/morpho-analyser"
argument_list|)
expr_stmt|;
name|MockComponentContext
name|context
init|=
operator|new
name|MockComponentContext
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|engine
operator|=
operator|new
name|CeliAnalyzedTextLemmatizerEngine
argument_list|()
expr_stmt|;
name|engine
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|deactivate
parameter_list|()
block|{
name|engine
operator|.
name|deactivate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngineDe
parameter_list|()
throws|throws
name|IOException
throws|,
name|EngineException
block|{
name|ContentItem
name|ci
init|=
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|StringSource
argument_list|(
name|de_text
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|AnalysedText
name|at
init|=
name|atFactory
operator|.
name|createAnalysedText
argument_list|(
name|ci
argument_list|,
name|ci
operator|.
name|getBlob
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|DC_LANGUAGE
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"de"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"de"
argument_list|,
name|EnhancementEngineHelper
operator|.
name|getLanguage
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add some Tokens with POS annotations to test the usage of
comment|//existing POS annotations by the lemmatizer
name|Token
name|verbrachten
init|=
name|at
operator|.
name|addToken
argument_list|(
name|de_verbStart
argument_list|,
name|de_verbStart
operator|+
name|de_verb
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|verbrachten
operator|.
name|addAnnotation
argument_list|(
name|POS_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"V"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|,
name|de_verbProb
argument_list|)
argument_list|)
expr_stmt|;
name|Token
name|schonen
init|=
name|at
operator|.
name|addToken
argument_list|(
name|de_adjectiveStart
argument_list|,
name|de_adjectiveStart
operator|+
name|de_adjective
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|schonen
operator|.
name|addAnnotation
argument_list|(
name|POS_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"ADJ"
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
argument_list|,
name|de_adjectiveProb
argument_list|)
argument_list|)
expr_stmt|;
name|Token
name|urlaub
init|=
name|at
operator|.
name|addToken
argument_list|(
name|de_nounStart
argument_list|,
name|de_nounStart
operator|+
name|de_noun
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|urlaub
operator|.
name|addAnnotation
argument_list|(
name|POS_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
operator|new
name|PosTag
argument_list|(
literal|"NC"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|,
name|de_nounProb
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Can not enhance Test ContentItem"
argument_list|,
name|EnhancementEngine
operator|.
name|ENHANCE_ASYNC
argument_list|,
name|engine
operator|.
name|canEnhance
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
comment|//compute the enhancements
try|try
block|{
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
name|RemoteServiceHelper
operator|.
name|checkServiceUnavailable
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
comment|//deactivate test
block|}
comment|//now validate the enhancements
name|boolean
name|foundVerb
init|=
literal|false
decl_stmt|;
name|boolean
name|foundAdjective
init|=
literal|false
decl_stmt|;
name|boolean
name|foundNoun
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|at
operator|.
name|getTokens
argument_list|()
init|;
name|tokens
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Token
name|token
init|=
name|tokens
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Value
argument_list|<
name|MorphoFeatures
argument_list|>
argument_list|>
name|mfs
init|=
name|token
operator|.
name|getAnnotations
argument_list|(
name|NlpAnnotations
operator|.
name|MORPHO_ANNOTATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|de_verb
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getSpan
argument_list|()
argument_list|)
condition|)
block|{
name|foundVerb
operator|=
operator|!
name|mfs
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|validateMorphFeatureProbability
argument_list|(
name|mfs
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|,
name|de_verbProb
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|de_adjective
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getSpan
argument_list|()
argument_list|)
condition|)
block|{
name|foundAdjective
operator|=
operator|!
name|mfs
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|validateMorphFeatureProbability
argument_list|(
name|mfs
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|,
name|de_adjectiveProb
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|de_noun
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getSpan
argument_list|()
argument_list|)
condition|)
block|{
name|foundNoun
operator|=
operator|!
name|mfs
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|validateMorphFeatureProbability
argument_list|(
name|mfs
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|,
name|de_nounProb
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Value
argument_list|<
name|MorphoFeatures
argument_list|>
name|mf
range|:
name|mfs
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  - {}"
argument_list|,
name|mf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|mf
operator|.
name|value
argument_list|()
operator|.
name|getLemma
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No MorphoFeatures found for '"
operator|+
name|de_verb
operator|+
literal|"'!"
argument_list|,
name|foundVerb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No MorphoFeatures found for '"
operator|+
name|de_adjective
operator|+
literal|"'!"
argument_list|,
name|foundAdjective
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No MorphoFeatures found for '"
operator|+
name|de_noun
operator|+
literal|"'!"
argument_list|,
name|foundNoun
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateMorphFeatureProbability
parameter_list|(
name|List
argument_list|<
name|Value
argument_list|<
name|MorphoFeatures
argument_list|>
argument_list|>
name|mfs
parameter_list|,
name|LexicalCategory
name|lc
parameter_list|,
name|double
name|prob
parameter_list|)
block|{
for|for
control|(
name|Value
argument_list|<
name|MorphoFeatures
argument_list|>
name|mf
range|:
name|mfs
control|)
block|{
for|for
control|(
name|PosTag
name|pos
range|:
name|mf
operator|.
name|value
argument_list|()
operator|.
name|getPosList
argument_list|()
control|)
block|{
if|if
condition|(
name|pos
operator|.
name|hasCategory
argument_list|(
name|lc
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|prob
argument_list|,
name|mf
operator|.
name|probability
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

