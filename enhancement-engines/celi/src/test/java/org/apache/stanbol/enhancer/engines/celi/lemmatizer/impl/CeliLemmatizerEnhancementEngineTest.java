begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|lemmatizer
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|lemmatizer
operator|.
name|impl
operator|.
name|CeliLemmatizerEnhancementEngine
operator|.
name|MORPHOLOGICAL_ANALYSIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|lemmatizer
operator|.
name|impl
operator|.
name|CeliLemmatizerEnhancementEngine
operator|.
name|SERVICE_URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|lemmatizer
operator|.
name|impl
operator|.
name|CeliLemmatizerEnhancementEngine
operator|.
name|hasLemmaForm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_LANGUAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
operator|.
name|validateAllEntityAnnotations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
operator|.
name|validateEnhancement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
operator|.
name|validateTextAnnotation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|CeliConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|CeliMorphoFeatures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|testutils
operator|.
name|MockComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|celi
operator|.
name|testutils
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|Gender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|NumberFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|RemoteServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CeliLemmatizerEnhancementEngineTest
block|{
specifier|static
specifier|final
name|String
name|OLIA_NAMESPACE
init|=
literal|"http://purl.org/olia/olia.owl#"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ContentItemFactory
name|ciFactory
init|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CeliLemmatizerEnhancementEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"Torino è la principale città del Piemonte."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TERM
init|=
literal|"casa"
decl_stmt|;
specifier|private
name|CeliLemmatizerEnhancementEngine
name|initEngine
parameter_list|(
name|boolean
name|completeMorphoAnalysis
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
literal|"celiLemmatizer"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CeliConstants
operator|.
name|CELI_TEST_ACCOUNT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SERVICE_URL
argument_list|,
literal|"http://linguagrid.org/LSGrid/ws/morpho-analyser"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CeliConstants
operator|.
name|CELI_CONNECTION_TIMEOUT
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|MORPHOLOGICAL_ANALYSIS
argument_list|,
name|completeMorphoAnalysis
argument_list|)
expr_stmt|;
name|MockComponentContext
name|context
init|=
operator|new
name|MockComponentContext
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|CeliLemmatizerEnhancementEngine
name|morphoAnalysisEngine
init|=
operator|new
name|CeliLemmatizerEnhancementEngine
argument_list|()
decl_stmt|;
name|morphoAnalysisEngine
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|morphoAnalysisEngine
return|;
block|}
specifier|private
specifier|static
name|void
name|shutdownEngine
parameter_list|(
name|CeliLemmatizerEnhancementEngine
name|morphoAnalysisEngine
parameter_list|)
block|{
name|morphoAnalysisEngine
operator|.
name|deactivate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ContentItem
name|wrapAsContentItem
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ciFactory
operator|.
name|createContentItem
argument_list|(
operator|new
name|StringSource
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngine
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentItem
name|ci
init|=
name|wrapAsContentItem
argument_list|(
name|TEXT
argument_list|)
decl_stmt|;
comment|//add a simple triple to statically define the language of the test
comment|//content
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|DC_LANGUAGE
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"it"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//unit test should not depend on each other (if possible)
comment|//CeliLanguageIdentifierEnhancementEngineTest.addEnanchements(ci);
name|CeliLemmatizerEnhancementEngine
name|morphoAnalysisEngine
init|=
name|initEngine
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|morphoAnalysisEngine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
name|RemoteServiceHelper
operator|.
name|checkServiceUnavailable
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestUtils
operator|.
name|logEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
comment|//validate enhancement
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
name|expectedValues
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|expectedValues
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|DC_CREATOR
argument_list|,
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|morphoAnalysisEngine
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|lemmaTextAnnotationIterator
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"A TextAnnotation is expected by this Test"
argument_list|,
name|lemmaTextAnnotationIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|NonLiteral
name|lemmaTextAnnotation
init|=
name|lemmaTextAnnotationIterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"TextAnnoations MUST BE UriRefs!"
argument_list|,
name|lemmaTextAnnotation
operator|instanceof
name|UriRef
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Only a single TextAnnotation is expected by this Test"
argument_list|,
name|lemmaTextAnnotationIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|//validate the enhancement metadata
name|validateEnhancement
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
operator|(
name|UriRef
operator|)
name|lemmaTextAnnotation
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
comment|//validate the lemma form TextAnnotation
name|int
name|lemmaForms
init|=
name|validateLemmaFormProperty
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|lemmaTextAnnotation
argument_list|,
literal|"it"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Only a single LemmaForm property is expected if '"
operator|+
name|MORPHOLOGICAL_ANALYSIS
operator|+
literal|"=false'"
argument_list|,
name|lemmaForms
operator|==
literal|1
argument_list|)
expr_stmt|;
name|shutdownEngine
argument_list|(
name|morphoAnalysisEngine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteMorphoAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentItem
name|ci
init|=
name|wrapAsContentItem
argument_list|(
name|TERM
argument_list|)
decl_stmt|;
comment|//add a simple triple to statically define the language of the test
comment|//content
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
argument_list|,
name|DC_LANGUAGE
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"it"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CeliLemmatizerEnhancementEngine
name|morphoAnalysisEngine
init|=
name|initEngine
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|morphoAnalysisEngine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
name|RemoteServiceHelper
operator|.
name|checkServiceUnavailable
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestUtils
operator|.
name|logEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
comment|//validate enhancements
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
name|expectedValues
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|expectedValues
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|DC_CREATOR
argument_list|,
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|morphoAnalysisEngine
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|textAnnotationIterator
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
decl_stmt|;
comment|// test if a textAnnotation is present
comment|//assertTrue(textAnnotationIterator.hasNext());
comment|//  -> this might be used to test that there are no TextAnnotations
name|int
name|textAnnotationCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|textAnnotationIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|textAnnotation
init|=
operator|(
name|UriRef
operator|)
name|textAnnotationIterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|// test if selected Text is added
name|validateTextAnnotation
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|textAnnotation
argument_list|,
name|TERM
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|textAnnotationCount
operator|++
expr_stmt|;
comment|//perform additional tests for "hasMorphologicalFeature" and "hasLemmaForm"
name|validateMorphoFeatureProperty
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|textAnnotation
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"{} TextAnnotations found and validated ..."
argument_list|,
name|textAnnotationCount
argument_list|)
expr_stmt|;
name|int
name|entityAnnoNum
init|=
name|validateAllEntityAnnotations
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|expectedValues
argument_list|)
decl_stmt|;
comment|//no EntityAnnotations expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No EntityAnnotations expected by this test"
argument_list|,
literal|0
argument_list|,
name|entityAnnoNum
argument_list|)
expr_stmt|;
name|shutdownEngine
argument_list|(
name|morphoAnalysisEngine
argument_list|)
expr_stmt|;
block|}
comment|/**      * [1..*] values of an {@link PlainLiteral} in the same language as the      * analyzed text      * @param enhancements The graph with the enhancements      * @param textAnnotation the TextAnnotation to check      * @param lang the language of the analyzed text      * @return The number of lemma forms found      */
specifier|private
name|int
name|validateLemmaFormProperty
parameter_list|(
name|TripleCollection
name|enhancements
parameter_list|,
name|NonLiteral
name|textAnnotation
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|lemmaFormsIterator
init|=
name|enhancements
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|hasLemmaForm
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No lemma form value found for TextAnnotation "
operator|+
name|textAnnotation
operator|+
literal|"!"
argument_list|,
name|lemmaFormsIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lemmaFormCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|lemmaFormsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|lemmaFormCount
operator|++
expr_stmt|;
name|Resource
name|lemmaForms
init|=
name|lemmaFormsIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Lemma Forms value are expected of type PlainLiteral"
argument_list|,
name|lemmaForms
operator|instanceof
name|PlainLiteral
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Lemma forms MUST NOT be empty"
argument_list|,
operator|(
operator|(
name|PlainLiteral
operator|)
name|lemmaForms
operator|)
operator|.
name|getLexicalForm
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Language of the Lemma Form literal MUST BE not null"
argument_list|,
operator|(
operator|(
name|PlainLiteral
operator|)
name|lemmaForms
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Language of the Lemma Form literal MUST BE the same as for the parsed text"
argument_list|,
name|lang
argument_list|,
operator|(
operator|(
name|PlainLiteral
operator|)
name|lemmaForms
operator|)
operator|.
name|getLanguage
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|lemmaFormCount
return|;
block|}
comment|/**      * [1..*] values of an {@link TypedLiteral} in the form {key=value}      * @param enhancements The graph with the enhancements      * @param textAnnotation the TextAnnotation to check      */
specifier|private
name|void
name|validateMorphoFeatureProperty
parameter_list|(
name|TripleCollection
name|enhancements
parameter_list|,
name|NonLiteral
name|textAnnotation
parameter_list|)
block|{
comment|//This taste checks for known morpho features of a given input (constant TERM)
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|morphoFeatureIterator
init|=
name|enhancements
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|RDF_TYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No POS Morpho Feature value found for TextAnnotation "
operator|+
name|textAnnotation
operator|+
literal|"!"
argument_list|,
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|morphoFeature
init|=
name|morphoFeatureIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Morpho Feature value are expected of typed literal"
argument_list|,
name|morphoFeature
operator|instanceof
name|UriRef
argument_list|)
expr_stmt|;
name|String
name|feature
init|=
operator|(
operator|(
name|UriRef
operator|)
name|morphoFeature
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Morpho Feature MUST NOT be empty"
argument_list|,
name|feature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|startsWith
argument_list|(
name|OLIA_NAMESPACE
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|feature
operator|.
name|substring
argument_list|(
name|OLIA_NAMESPACE
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|LexicalCategory
name|cat
init|=
name|LexicalCategory
operator|.
name|valueOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Part of Speech of "
operator|+
name|TERM
operator|+
literal|" should be "
operator|+
name|LexicalCategory
operator|.
name|Noun
argument_list|,
operator|(
name|cat
operator|==
name|LexicalCategory
operator|.
name|Noun
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|morphoFeatureIterator
operator|=
name|enhancements
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|CeliMorphoFeatures
operator|.
name|HAS_GENDER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No Gender Morpho Feature value found for TextAnnotation "
operator|+
name|textAnnotation
operator|+
literal|"!"
argument_list|,
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|morphoFeature
init|=
name|morphoFeatureIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Morpho Feature value are expected of typed literal"
argument_list|,
name|morphoFeature
operator|instanceof
name|UriRef
argument_list|)
expr_stmt|;
name|String
name|feature
init|=
operator|(
operator|(
name|UriRef
operator|)
name|morphoFeature
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Morpho Feature MUST NOT be empty"
argument_list|,
name|feature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|startsWith
argument_list|(
name|OLIA_NAMESPACE
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|feature
operator|.
name|substring
argument_list|(
name|OLIA_NAMESPACE
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Gender
name|cat
init|=
name|Gender
operator|.
name|valueOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Gender of "
operator|+
name|TERM
operator|+
literal|" should be "
operator|+
name|Gender
operator|.
name|Feminine
argument_list|,
operator|(
name|cat
operator|==
name|Gender
operator|.
name|Feminine
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|morphoFeatureIterator
operator|=
name|enhancements
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|CeliMorphoFeatures
operator|.
name|HAS_NUMBER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No Number Morpho Feature value found for TextAnnotation "
operator|+
name|textAnnotation
operator|+
literal|"!"
argument_list|,
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|morphoFeature
init|=
name|morphoFeatureIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Morpho Feature value are expected of typed literal"
argument_list|,
name|morphoFeature
operator|instanceof
name|UriRef
argument_list|)
expr_stmt|;
name|String
name|feature
init|=
operator|(
operator|(
name|UriRef
operator|)
name|morphoFeature
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Morpho Feature MUST NOT be empty"
argument_list|,
name|feature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|startsWith
argument_list|(
name|OLIA_NAMESPACE
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|feature
operator|.
name|substring
argument_list|(
name|OLIA_NAMESPACE
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|NumberFeature
name|cat
init|=
name|NumberFeature
operator|.
name|valueOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Number of "
operator|+
name|TERM
operator|+
literal|" should be "
operator|+
name|Gender
operator|.
name|Feminine
argument_list|,
operator|(
name|cat
operator|==
name|NumberFeature
operator|.
name|Singular
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|morphoFeatureIterator
operator|=
name|enhancements
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|CeliLemmatizerEnhancementEngine
operator|.
name|hasLemmaForm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No Number Morpho Feature value found for TextAnnotation "
operator|+
name|textAnnotation
operator|+
literal|"!"
argument_list|,
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|morphoFeatureIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|morphoFeature
init|=
name|morphoFeatureIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Lemma Forms value are expected of type PlainLiteral"
argument_list|,
name|morphoFeature
operator|instanceof
name|PlainLiteral
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Lemma forms MUST NOT be empty"
argument_list|,
operator|(
operator|(
name|PlainLiteral
operator|)
name|morphoFeature
operator|)
operator|.
name|getLexicalForm
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|feature
init|=
operator|(
operator|(
name|PlainLiteral
operator|)
name|morphoFeature
operator|)
operator|.
name|getLexicalForm
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Lemma of "
operator|+
name|TERM
operator|+
literal|" should be "
operator|+
name|TERM
argument_list|,
operator|(
name|feature
operator|.
name|equals
argument_list|(
name|TERM
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

