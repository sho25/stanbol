begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|kuromoji
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|RDFTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|DataFileResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|ner
operator|.
name|NerTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|test
operator|.
name|helper
operator|.
name|EnhancementStructureHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|TestKuromojiNlpEngine
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FAKE_BUNDLE_SYMBOLIC_NAME
init|=
literal|"FAKE_BUNDLE_SYMBOLIC_NAME"
decl_stmt|;
specifier|private
specifier|static
name|DataFileProvider
name|dataFileProvider
decl_stmt|;
specifier|private
specifier|static
name|ContentItemFactory
name|contentItemFactory
decl_stmt|;
specifier|private
specifier|static
name|IRI
name|id
init|=
operator|new
name|IRI
argument_list|(
literal|"http://www.example.org/contentItem1"
argument_list|)
decl_stmt|;
comment|/**      * Test text taken from the<a href ="http://ja.wikipedia.org/wiki/%E3%83%AD%E3%83%B3%E3%83%89%E3%83%B3">      * Japanese wikipedia side for London</a>.      */
specifier|private
specifier|static
name|String
name|text
init|=
literal|"ロンドンはイングランドおよびイギリスの首都であり、イギリスや欧州"
operator|+
literal|"連合域内で最大の都市圏を形成している。ロンドンはテムズ川河畔に位置し、2,000年前のローマ帝国"
operator|+
literal|"によるロンディニウム創建が都市の起源である。ロンディニウム当時の街の中心部は、現在のシティ・"
operator|+
literal|"オブ・ロンドン（シティ）に当たる地域にあった。シティの市街壁内の面積は約1平方マイルあり、"
operator|+
literal|"中世以来その範囲はほぼ変わっていない。少なくとも19世紀以降、「ロンドン」の名称はシティの市"
operator|+
literal|"街壁を越えて開発が進んだシティ周辺地域をも含めて用いられている。 ロンドンは市街地の大部分は"
operator|+
literal|"コナベーションにより形成されている。ロンドンを管轄するリージョンであるグレーター・ロンドンでは"
operator|+
literal|"、選挙で選出された大ロンドン市長とロンドン議会により統治が行われている。"
decl_stmt|;
specifier|private
name|KuromojiNlpEngine
name|engine
decl_stmt|;
specifier|private
name|ContentItem
name|contentItem
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initDataFileProvicer
parameter_list|()
block|{
name|dataFileProvider
operator|=
operator|new
name|ClasspathDataFileProvider
argument_list|(
name|FAKE_BUNDLE_SYMBOLIC_NAME
argument_list|)
expr_stmt|;
name|contentItemFactory
operator|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|engine
operator|=
operator|new
name|KuromojiNlpEngine
argument_list|()
expr_stmt|;
comment|//we need to set some fields that would otherwise be injected by the container
name|engine
operator|.
name|parentResourceLoader
operator|=
operator|new
name|DataFileResourceLoader
argument_list|(
name|dataFileProvider
argument_list|)
expr_stmt|;
name|engine
operator|.
name|analysedTextFactory
operator|=
name|AnalysedTextFactory
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
literal|"gosen-nlp"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|activate
argument_list|(
operator|new
name|MockComponentContext
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|contentItem
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|id
argument_list|,
operator|new
name|StringSource
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|//add an annotation that this is Japanese
name|contentItem
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|id
argument_list|,
name|Properties
operator|.
name|DC_LANGUAGE
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"ja"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngine
parameter_list|()
throws|throws
name|EngineException
block|{
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnhancementEngine
operator|.
name|ENHANCE_ASYNC
argument_list|,
name|engine
operator|.
name|canEnhance
argument_list|(
name|contentItem
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|contentItem
argument_list|)
expr_stmt|;
comment|//assert the results
name|Map
argument_list|<
name|IRI
argument_list|,
name|RDFTerm
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|RDFTerm
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|DC_CREATOR
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|engine
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
name|contentItem
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|EnhancementStructureHelper
operator|.
name|validateAllTextAnnotations
argument_list|(
name|contentItem
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|text
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|AnalysedText
name|at
init|=
name|AnalysedTextUtils
operator|.
name|getAnalysedText
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Sentence
argument_list|>
name|sentences
init|=
name|AnalysedTextUtils
operator|.
name|asList
argument_list|(
name|at
operator|.
name|getSentences
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sentences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|sentences
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: values in the following arrays are based on the first run of the
comment|// engine. So this is only to detect changes in results. It can not validate
comment|// that the tokenization and NER detections are correct - sorry I do not
comment|// speak Japanese ...
name|int
index|[]
name|expectedChunks
init|=
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|3
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|4
block|}
decl_stmt|;
name|int
index|[]
name|expectedTokens
init|=
operator|new
name|int
index|[]
block|{
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|24
block|,
literal|33
block|,
literal|17
block|,
literal|32
block|}
decl_stmt|;
name|int
name|sentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Sentence
name|sent
range|:
name|sentences
control|)
block|{
name|List
argument_list|<
name|Chunk
argument_list|>
name|sentenceNer
init|=
name|AnalysedTextUtils
operator|.
name|asList
argument_list|(
name|sent
operator|.
name|getChunks
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedChunks
index|[
name|sentIndex
index|]
argument_list|,
name|sentenceNer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Chunk
name|chunk
range|:
name|sentenceNer
control|)
block|{
name|Value
argument_list|<
name|NerTag
argument_list|>
name|nerValue
init|=
name|chunk
operator|.
name|getAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|NER_ANNOTATION
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nerValue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nerValue
operator|.
name|value
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|AnalysedTextUtils
operator|.
name|asList
argument_list|(
name|sent
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedTokens
index|[
name|sentIndex
index|]
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
name|Value
argument_list|<
name|PosTag
argument_list|>
name|posValue
init|=
name|token
operator|.
name|getAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|POS_ANNOTATION
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|posValue
argument_list|)
expr_stmt|;
block|}
name|sentIndex
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanUpServices
parameter_list|()
block|{
if|if
condition|(
name|engine
operator|!=
literal|null
condition|)
block|{
name|engine
operator|.
name|deactivate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|engine
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

