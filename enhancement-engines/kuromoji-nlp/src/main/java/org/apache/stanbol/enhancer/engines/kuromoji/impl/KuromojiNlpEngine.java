begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2012 Sebastian Schaffert  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|kuromoji
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|kuromoji
operator|.
name|Constants
operator|.
name|NER_TAG_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|kuromoji
operator|.
name|Constants
operator|.
name|POS_TAG_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|MORPHO_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|POS_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getLanguage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|initAnalysedText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CharSequenceReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|JapaneseBaseFormFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|JapaneseKatakanaStemFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|JapanesePartOfSpeechStopFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|JapaneseTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|tokenattributes
operator|.
name|BaseFormAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|tokenattributes
operator|.
name|InflectionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|tokenattributes
operator|.
name|PartOfSpeechAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoaderAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|core
operator|.
name|impl
operator|.
name|OsgiInstallerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|StanbolResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpProcessingRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|morpho
operator|.
name|MorphoFeatures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|ner
operator|.
name|NerTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Sentence detection and word tokenizer for Chinese based on the Solr/Lucene  * smartcn analysers.  *   * @author Rupert Westenthaler  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|OPTIONAL
argument_list|)
comment|//create a default instance with the default configuration
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"kuromoji-nlp"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
comment|//give the default instance a ranking< 0
block|}
argument_list|)
specifier|public
class|class
name|KuromojiNlpEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|IOException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|ServiceProperties
block|{
specifier|private
specifier|static
specifier|final
name|Version
name|LUCENE_VERSION
init|=
name|Version
operator|.
name|LUCENE_44
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKENIZER_MODE
init|=
literal|"search"
decl_stmt|;
comment|//normal, extended
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SERVICE_PROPERTIES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|TOKENIZER_FACTORY_CONFIG
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|BASE_FORM_FILTER_CONFIG
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|POS_FILTER_CONFIG
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|STEMM_FILTER_CONFIG
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
name|ServiceProperties
operator|.
name|ORDERING_NLP_TOKENIZING
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|NlpServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_NLP_ROLE
argument_list|,
name|NlpProcessingRole
operator|.
name|Tokenizing
argument_list|)
expr_stmt|;
name|SERVICE_PROPERTIES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|TOKENIZER_FACTORY_CONFIG
operator|.
name|put
argument_list|(
literal|"luceneMatchVersion"
argument_list|,
name|LUCENE_VERSION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TOKENIZER_FACTORY_CONFIG
operator|.
name|put
argument_list|(
literal|"mode"
argument_list|,
name|TOKENIZER_MODE
argument_list|)
expr_stmt|;
comment|//we want to have tokens for punctations
name|TOKENIZER_FACTORY_CONFIG
operator|.
name|put
argument_list|(
literal|"discardPunctuation"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|BASE_FORM_FILTER_CONFIG
operator|.
name|put
argument_list|(
literal|"luceneMatchVersion"
argument_list|,
name|LUCENE_VERSION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|POS_FILTER_CONFIG
operator|.
name|put
argument_list|(
literal|"luceneMatchVersion"
argument_list|,
name|LUCENE_VERSION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|POS_FILTER_CONFIG
operator|.
name|put
argument_list|(
literal|"tags"
argument_list|,
literal|"nostoptags.txt"
argument_list|)
expr_stmt|;
name|POS_FILTER_CONFIG
operator|.
name|put
argument_list|(
literal|"enablePositionIncrements"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|STEMM_FILTER_CONFIG
operator|.
name|put
argument_list|(
literal|"luceneMatchVersion"
argument_list|,
name|LUCENE_VERSION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|STEMM_FILTER_CONFIG
operator|.
name|put
argument_list|(
literal|"minimumLength"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KuromojiNlpEngine
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|)
specifier|protected
name|ResourceLoader
name|parentResourceLoader
decl_stmt|;
specifier|protected
name|ResourceLoader
name|resourceLoader
decl_stmt|;
comment|//private MappingCharFilterFactory charFilterFactory;
specifier|private
name|TokenizerFactory
name|tokenizerFactory
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TokenFilterFactory
argument_list|>
name|filterFactories
init|=
operator|new
name|ArrayList
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|AnalysedTextFactory
name|analysedTextFactory
decl_stmt|;
specifier|protected
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**       * holds {@link PosTag}s that are not contained in the       * {@link org.apache.stanbol.enhancer.engines.kuromoji.Constants#POS_TAG_SET}      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PosTag
argument_list|>
name|adhocTags
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PosTag
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Indicate if this engine can enhance supplied ContentItem, and if it      * suggests enhancing it synchronously or asynchronously. The      * {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager} can force sync/async mode if desired, it is      * just a suggestion from the engine.      *<p/>      * Returns ENHANCE_ASYNC in case there is a text/plain content part and a tagger for the language identified for      * the content item, CANNOT_ENHANCE otherwise.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the introspecting process of the content item      *          fails      */
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// check if content is present
name|Map
operator|.
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|entry
init|=
name|NlpEngineHelper
operator|.
name|getPlainText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"ja"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
operator|||
operator|(
name|language
operator|!=
literal|null
operator|&&
name|language
operator|.
name|startsWith
argument_list|(
literal|"ja-"
argument_list|)
operator|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"> can enhance ContentItem {} with language {}"
argument_list|,
name|ci
argument_list|,
name|language
argument_list|)
expr_stmt|;
return|return
name|ENHANCE_ASYNC
return|;
block|}
else|else
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
block|}
comment|/**      * Compute enhancements for supplied ContentItem. The results of the process      * are expected to be stored in the metadata of the content item.      *<p/>      * The client (usually an {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager}) should take care of      * persistent storage of the enhanced {@link org.apache.stanbol.enhancer.servicesapi.ContentItem}.      *<p/>      * This method creates a new POSContentPart using {@link org.apache.stanbol.enhancer.engines.pos.api.POSTaggerHelper#createContentPart} from a text/plain part and      * stores it as a new part in the content item. The metadata is not changed.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the underlying process failed to work as      *          expected      */
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
specifier|final
name|AnalysedText
name|at
init|=
name|initAnalysedText
argument_list|(
name|this
argument_list|,
name|analysedTextFactory
argument_list|,
name|ci
argument_list|)
decl_stmt|;
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
literal|"ja"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
operator|||
operator|(
name|language
operator|!=
literal|null
operator|&&
name|language
operator|.
name|startsWith
argument_list|(
literal|"ja-"
argument_list|)
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The detected language is NOT 'ja'! "
operator|+
literal|"As this is also checked within the #canEnhance(..) method this "
operator|+
literal|"indicates an Bug in the used EnhancementJobManager implementation. "
operator|+
literal|"Please report this on the dev@apache.stanbol.org or create an "
operator|+
literal|"JIRA issue about this."
argument_list|)
throw|;
block|}
comment|//start with the Tokenizer
name|TokenStream
name|tokenStream
init|=
name|tokenizerFactory
operator|.
name|create
argument_list|(
operator|new
name|CharSequenceReader
argument_list|(
name|at
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//build the analyzing chain by adding all TokenFilters
for|for
control|(
name|TokenFilterFactory
name|filterFactory
range|:
name|filterFactories
control|)
block|{
name|tokenStream
operator|=
name|filterFactory
operator|.
name|create
argument_list|(
name|tokenStream
argument_list|)
expr_stmt|;
block|}
comment|//Try to extract sentences based on POS tags ...
name|int
name|sentStartOffset
init|=
operator|-
literal|1
decl_stmt|;
comment|//NER data
name|List
argument_list|<
name|NerData
argument_list|>
name|nerList
init|=
operator|new
name|ArrayList
argument_list|<
name|NerData
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|nerSentIndex
init|=
literal|0
decl_stmt|;
comment|//the next index where the NerData.context need to be set
name|NerData
name|ner
init|=
literal|null
decl_stmt|;
name|OffsetAttribute
name|offset
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//required with Solr 4
while|while
condition|(
name|tokenStream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|offset
operator|=
name|tokenStream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|at
operator|.
name|addToken
argument_list|(
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|,
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|)
decl_stmt|;
comment|//Get the POS attribute and init the PosTag
name|PartOfSpeechAttribute
name|posAttr
init|=
name|tokenStream
operator|.
name|addAttribute
argument_list|(
name|PartOfSpeechAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PosTag
name|posTag
init|=
name|POS_TAG_SET
operator|.
name|getTag
argument_list|(
name|posAttr
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|posTag
operator|==
literal|null
condition|)
block|{
name|posTag
operator|=
name|adhocTags
operator|.
name|get
argument_list|(
name|posAttr
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|posTag
operator|==
literal|null
condition|)
block|{
name|posTag
operator|=
operator|new
name|PosTag
argument_list|(
name|posAttr
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|adhocTags
operator|.
name|put
argument_list|(
name|posAttr
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|,
name|posTag
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|" ... missing PosTag mapping for {}"
argument_list|,
name|posAttr
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Sentence detection by POS tag
if|if
condition|(
name|sentStartOffset
operator|<
literal|0
condition|)
block|{
comment|//the last token was a sentence ending
name|sentStartOffset
operator|=
name|offset
operator|.
name|startOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|posTag
operator|.
name|hasPos
argument_list|(
name|Pos
operator|.
name|Point
argument_list|)
condition|)
block|{
name|Sentence
name|sent
init|=
name|at
operator|.
name|addSentence
argument_list|(
name|sentStartOffset
argument_list|,
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|)
decl_stmt|;
comment|//add the sentence as context to the NerData instances
while|while
condition|(
name|nerSentIndex
operator|<
name|nerList
operator|.
name|size
argument_list|()
condition|)
block|{
name|nerList
operator|.
name|get
argument_list|(
name|nerSentIndex
argument_list|)
operator|.
name|context
operator|=
name|sent
operator|.
name|getSpan
argument_list|()
expr_stmt|;
name|nerSentIndex
operator|++
expr_stmt|;
block|}
name|sentStartOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|//POS
name|token
operator|.
name|addAnnotation
argument_list|(
name|POS_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
name|posTag
argument_list|)
argument_list|)
expr_stmt|;
comment|//NER
name|NerTag
name|nerTag
init|=
name|NER_TAG_SET
operator|.
name|getTag
argument_list|(
name|posAttr
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ner
operator|!=
literal|null
operator|&&
operator|(
name|nerTag
operator|==
literal|null
operator|||
operator|!
name|ner
operator|.
name|tag
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|nerTag
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|//write NER annotation
name|Chunk
name|chunk
init|=
name|at
operator|.
name|addChunk
argument_list|(
name|ner
operator|.
name|start
argument_list|,
name|ner
operator|.
name|end
argument_list|)
decl_stmt|;
name|chunk
operator|.
name|addAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|NER_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
name|ner
operator|.
name|tag
argument_list|)
argument_list|)
expr_stmt|;
comment|//NOTE that the fise:TextAnnotation are written later based on the nerList
comment|//clean up
name|ner
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|nerTag
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ner
operator|==
literal|null
condition|)
block|{
name|ner
operator|=
operator|new
name|NerData
argument_list|(
name|nerTag
argument_list|,
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|nerList
operator|.
name|add
argument_list|(
name|ner
argument_list|)
expr_stmt|;
block|}
name|ner
operator|.
name|end
operator|=
name|offset
operator|.
name|endOffset
argument_list|()
expr_stmt|;
block|}
name|BaseFormAttribute
name|baseFormAttr
init|=
name|tokenStream
operator|.
name|addAttribute
argument_list|(
name|BaseFormAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|MorphoFeatures
name|morpho
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseFormAttr
operator|!=
literal|null
operator|&&
name|baseFormAttr
operator|.
name|getBaseForm
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|morpho
operator|=
operator|new
name|MorphoFeatures
argument_list|(
name|baseFormAttr
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|morpho
operator|.
name|addPos
argument_list|(
name|posTag
argument_list|)
expr_stmt|;
comment|//and add the posTag
block|}
name|InflectionAttribute
name|inflectionAttr
init|=
name|tokenStream
operator|.
name|addAttribute
argument_list|(
name|InflectionAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|inflectionAttr
operator|.
name|getInflectionForm
argument_list|()
expr_stmt|;
name|inflectionAttr
operator|.
name|getInflectionType
argument_list|()
expr_stmt|;
if|if
condition|(
name|morpho
operator|!=
literal|null
condition|)
block|{
comment|//if present add the morpho
name|token
operator|.
name|addAnnotation
argument_list|(
name|MORPHO_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
name|morpho
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//we still need to write the last sentence
name|Sentence
name|lastSent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
operator|&&
name|sentStartOffset
operator|>=
literal|0
operator|&&
name|offset
operator|.
name|endOffset
argument_list|()
operator|>
name|sentStartOffset
condition|)
block|{
name|lastSent
operator|=
name|at
operator|.
name|addSentence
argument_list|(
name|sentStartOffset
argument_list|,
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//and set the context off remaining named entities
while|while
condition|(
name|nerSentIndex
operator|<
name|nerList
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastSent
operator|!=
literal|null
condition|)
block|{
name|nerList
operator|.
name|get
argument_list|(
name|nerSentIndex
argument_list|)
operator|.
name|context
operator|=
name|lastSent
operator|.
name|getSpan
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//no sentence detected
name|nerList
operator|.
name|get
argument_list|(
name|nerSentIndex
argument_list|)
operator|.
name|context
operator|=
name|at
operator|.
name|getSpan
argument_list|()
expr_stmt|;
block|}
name|nerSentIndex
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|"Exception while reading from "
operator|+
literal|"AnalyzedText contentpart"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|tokenStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
comment|//finally write the NER annotations to the metadata of the ContentItem
specifier|final
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Language
name|lang
init|=
operator|new
name|Language
argument_list|(
literal|"ja"
argument_list|)
decl_stmt|;
for|for
control|(
name|NerData
name|nerData
range|:
name|nerList
control|)
block|{
name|UriRef
name|ta
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|at
operator|.
name|getSpan
argument_list|()
operator|.
name|substring
argument_list|(
name|nerData
operator|.
name|start
argument_list|,
name|nerData
operator|.
name|end
argument_list|)
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|DC_TYPE
argument_list|,
name|nerData
operator|.
name|tag
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_START
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|nerData
operator|.
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_END
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|nerData
operator|.
name|end
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|nerData
operator|.
name|context
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|SERVICE_PROPERTIES
return|;
block|}
comment|/**      * Activate and read the properties. Configures and initialises a POSTagger for each language configured in      * CONFIG_LANGUAGES.      *      * @param ce the {@link org.osgi.service.component.ComponentContext}      */
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activating smartcn tokenizing engine"
argument_list|)
expr_stmt|;
name|super
operator|.
name|activate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
comment|//init the Solr ResourceLoader used for initialising the components
comment|//first a ResourceLoader for this classloader, 2nd one using the commons.solr.core classloader
comment|//and third the parentResourceLoader (if present).
name|resourceLoader
operator|=
operator|new
name|StanbolResourceLoader
argument_list|(
name|KuromojiNlpEngine
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|StanbolResourceLoader
argument_list|(
name|parentResourceLoader
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactory
operator|=
operator|new
name|JapaneseTokenizerFactory
argument_list|(
name|TOKENIZER_FACTORY_CONFIG
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ResourceLoaderAware
operator|)
name|tokenizerFactory
operator|)
operator|.
name|inform
argument_list|(
name|resourceLoader
argument_list|)
expr_stmt|;
comment|//base form filter
name|TokenFilterFactory
name|baseFormFilterFactory
init|=
operator|new
name|JapaneseBaseFormFilterFactory
argument_list|(
name|BASE_FORM_FILTER_CONFIG
argument_list|)
decl_stmt|;
name|filterFactories
operator|.
name|add
argument_list|(
name|baseFormFilterFactory
argument_list|)
expr_stmt|;
comment|//POS filter
name|TokenFilterFactory
name|posFilterFactory
init|=
operator|new
name|JapanesePartOfSpeechStopFilterFactory
argument_list|(
name|POS_FILTER_CONFIG
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ResourceLoaderAware
operator|)
name|posFilterFactory
operator|)
operator|.
name|inform
argument_list|(
name|resourceLoader
argument_list|)
expr_stmt|;
name|filterFactories
operator|.
name|add
argument_list|(
name|posFilterFactory
argument_list|)
expr_stmt|;
comment|//Stemming
name|TokenFilterFactory
name|stemmFilterFactory
init|=
operator|new
name|JapaneseKatakanaStemFilterFactory
argument_list|(
name|STEMM_FILTER_CONFIG
argument_list|)
decl_stmt|;
name|filterFactories
operator|.
name|add
argument_list|(
name|stemmFilterFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|tokenizerFactory
operator|=
literal|null
expr_stmt|;
name|filterFactories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filterFactories
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is an internal helper class that avoids to execute sentences      * using the {@link SentenceTokenizer} twice.      * @author Rupert Westenthaler      *      */
specifier|protected
specifier|final
class|class
name|AnalyzedTextSentenceTokenizer
extends|extends
name|Tokenizer
block|{
specifier|private
specifier|final
name|AnalysedText
name|at
decl_stmt|;
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TypeAttribute
name|typeAtt
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Sentence
argument_list|>
name|sentences
decl_stmt|;
specifier|private
name|Sentence
name|sentence
init|=
literal|null
decl_stmt|;
specifier|protected
name|AnalyzedTextSentenceTokenizer
parameter_list|(
name|AnalysedText
name|at
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|StringReader
argument_list|(
name|at
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|at
operator|=
name|at
expr_stmt|;
name|sentences
operator|=
name|at
operator|.
name|getSentences
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sentences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sentence
operator|=
name|sentences
operator|.
name|next
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
name|sentence
operator|.
name|getSpan
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|sentence
operator|.
name|getStart
argument_list|()
argument_list|,
name|sentence
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
name|typeAtt
operator|.
name|setType
argument_list|(
literal|"sentence"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
comment|// set final offset
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|at
operator|.
name|getEnd
argument_list|()
argument_list|,
name|at
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sentences
operator|=
name|at
operator|.
name|getSentences
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|typeAtt
operator|.
name|setType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

