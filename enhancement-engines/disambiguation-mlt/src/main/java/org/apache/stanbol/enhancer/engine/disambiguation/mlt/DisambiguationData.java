begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|disambiguation
operator|.
name|mlt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_comment
comment|/**  * Collects all data needed for Disambiguation  *   * @author Rupert Westenthaler  * @author Kritarth  *   */
end_comment

begin_class
specifier|public
class|class
name|DisambiguationData
block|{
comment|/**      * used by #c      */
specifier|private
name|DisambiguationData
parameter_list|()
block|{}
comment|/**      * Stores the URIs of fise:EntityAnnnotation as key and the fise:TextAnnotation they link to as value.      *<p>      * This is needed during writing the disambiguation results to the EnhancementStructure to know if one      * needs to clone an fise:EntityAnnotation or not.      */
specifier|public
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Set
argument_list|<
name|UriRef
argument_list|>
argument_list|>
name|suggestionMap
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Set
argument_list|<
name|UriRef
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Holds the center position of the fise:TextAnnotation fise:selected-text as key and the SavedEntity      * (representing the extracted data for the fise:TextAnnotation) as value.      *<p>      * Intended to do fast index based lookup for other TextAnnotations when building contexts for      * disambiguations.      */
specifier|public
name|NavigableMap
argument_list|<
name|Integer
argument_list|,
name|SavedEntity
argument_list|>
name|directoryTextAnotation
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|SavedEntity
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Collection with the 'fise:selected-text' of all 'fise:TextAnnotations' Also those that are NOT included      * in {@link #textAnnotations} (e.g. because they are missing some required data)      */
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|allSelectedTexts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * List of all fise:textAnnotations that can be used for disambiguation. the key is the URI and the value      * is the {@link SavedEntity} with the extracted information.      */
specifier|public
name|Map
argument_list|<
name|UriRef
argument_list|,
name|SavedEntity
argument_list|>
name|textAnnotations
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|SavedEntity
argument_list|>
argument_list|()
decl_stmt|;
comment|// List to contain old confidence values that are to removed
comment|// List<Triple> loseConfidence = new ArrayList<Triple>();
comment|// List to contain new confidence values to be added to metadata
comment|// List<Triple> gainConfidence = new ArrayList<Triple>();
comment|/*      * We create a data structure that stores the mapping of text annotation to List of Uri of all possible      * amiguations of the Text. Also it fills the list loseconfidence with confidence values of all the      * ambiguations for all entities (which will be removed eventually)      */
specifier|public
specifier|static
name|DisambiguationData
name|createFromContentItem
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
name|MGraph
name|graph
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|DisambiguationData
name|data
init|=
operator|new
name|DisambiguationData
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|uri
init|=
operator|(
name|UriRef
operator|)
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|// TODO: rwesten: do we really want to ignore fise:TextAnnotations that link to
comment|// to an other one (typically two TextAnnotations that select the exact same text)
comment|// if (graph.filter(uri, new UriRef(NamespaceEnum.dc + "relation"), null).hasNext()) {
comment|// continue;
comment|// }
name|SavedEntity
name|savedEntity
init|=
name|SavedEntity
operator|.
name|createFromTextAnnotation
argument_list|(
name|graph
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|savedEntity
operator|!=
literal|null
condition|)
block|{
comment|// data.allEntities.add(savedEntity.getContext());
name|data
operator|.
name|directoryTextAnotation
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|savedEntity
operator|.
name|getStart
argument_list|()
operator|+
name|savedEntity
operator|.
name|getEnd
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
argument_list|,
name|savedEntity
argument_list|)
expr_stmt|;
comment|// add information to the #suggestionMap
for|for
control|(
name|Suggestion
name|s
range|:
name|savedEntity
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|UriRef
argument_list|>
name|textAnnotations
init|=
name|data
operator|.
name|suggestionMap
operator|.
name|get
argument_list|(
name|s
operator|.
name|getEntityAnnotation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textAnnotations
operator|==
literal|null
condition|)
block|{
name|textAnnotations
operator|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
expr_stmt|;
name|data
operator|.
name|suggestionMap
operator|.
name|put
argument_list|(
name|s
operator|.
name|getEntityAnnotation
argument_list|()
argument_list|,
name|textAnnotations
argument_list|)
expr_stmt|;
block|}
name|textAnnotations
operator|.
name|add
argument_list|(
name|savedEntity
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NOTE (rwesten):
comment|// changed the layout here. Now savedEntity contains the list
comment|// of suggestions
name|data
operator|.
name|textAnnotations
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|savedEntity
argument_list|)
expr_stmt|;
name|data
operator|.
name|allSelectedTexts
operator|.
name|add
argument_list|(
name|savedEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// some information are also needed for other TextAnnotations
comment|// like the selectedText of TextAnnotations (regardless if they
comment|// have suggestions or not
name|String
name|selectedText
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|uri
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedText
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|allSelectedTexts
operator|.
name|add
argument_list|(
name|selectedText
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

