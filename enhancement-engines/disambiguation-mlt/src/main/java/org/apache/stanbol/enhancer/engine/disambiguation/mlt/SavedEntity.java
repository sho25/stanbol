begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|disambiguation
operator|.
name|mlt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ORIGIN
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|BlankNodeOrIRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SavedEntity
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SavedEntity
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The {@link LiteralFactory} used to create typed RDF literals      */
specifier|private
specifier|final
specifier|static
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|IRI
name|type
decl_stmt|;
specifier|private
name|IRI
name|uri
decl_stmt|;
specifier|private
name|String
name|context
decl_stmt|;
specifier|private
name|Integer
name|start
decl_stmt|;
specifier|private
name|Integer
name|end
decl_stmt|;
comment|/**      * Map with the suggestion. The key is the URI of the fise:EntityAnnotation and the value is the Triple      * with the confidence value      */
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|IRI
argument_list|,
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The name of the Entityhub {@link Site} managing the suggestions of this fise:TextAnnotation      */
specifier|private
name|String
name|site
decl_stmt|;
comment|/**      * private constructor only used by {@link #createFromTextAnnotation(Graph, BlankNodeOrIRI)}      */
specifier|private
name|SavedEntity
parameter_list|()
block|{}
comment|/**      * creates a SavedEntity instance for the parsed fise:TextAnnotation      *       * @param graph      *            the graph with the information      * @param textAnnotation      *            the fise:TextAnnotation      * @return the {@link SavedEntity} or<code>null</code> if the parsed text annotation is missing required      *         information.      */
specifier|public
specifier|static
name|SavedEntity
name|createFromTextAnnotation
parameter_list|(
name|Graph
name|graph
parameter_list|,
name|IRI
name|textAnnotation
parameter_list|)
block|{
name|SavedEntity
name|entity
init|=
operator|new
name|SavedEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|uri
operator|=
name|textAnnotation
expr_stmt|;
name|entity
operator|.
name|name
operator|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to create SavedEntity for TextAnnotation {} "
operator|+
literal|"because property {} is not present"
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// NOTE rwesten: I think one should not change the selected text
comment|// remove punctuation form the search string
comment|// entity.name = cleanupKeywords(name);
if|if
condition|(
name|entity
operator|.
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to process TextAnnotation {} because its selects "
operator|+
literal|"an empty Stirng !"
argument_list|,
name|textAnnotation
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|entity
operator|.
name|type
operator|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|DC_TYPE
argument_list|)
expr_stmt|;
comment|// NOTE rwesten: TextAnnotations without dc:type should be still OK
comment|// if (type == null) {
comment|// log.warn("Unable to process TextAnnotation {} because property {}"
comment|// + " is not present!",textAnnotation, DC_TYPE);
comment|// return null;
comment|// }
name|entity
operator|.
name|context
operator|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|)
expr_stmt|;
name|Integer
name|start
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_START
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|literalFactory
argument_list|)
decl_stmt|;
name|Integer
name|end
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|graph
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_END
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|literalFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
operator|||
name|end
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to process TextAnnotation {} because the start and/or the end "
operator|+
literal|"position is not defined (selectedText: {}, start: {}, end: {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|textAnnotation
block|,
name|entity
operator|.
name|name
block|,
name|start
block|,
name|end
block|}
argument_list|)
expr_stmt|;
block|}
name|entity
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|entity
operator|.
name|end
operator|=
name|end
expr_stmt|;
comment|// parse the suggestions
comment|// all the entityhubSites that manage a suggested Entity
comment|// (hopefully only a single one)
name|Set
argument_list|<
name|String
argument_list|>
name|entityhubSites
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Suggestion
argument_list|>
name|suggestionList
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|suggestions
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|DC_RELATION
argument_list|,
name|textAnnotation
argument_list|)
decl_stmt|;
comment|// NOTE: this iterator will also include dc:relation between fise:TextAnnotation's
comment|// but in those cases NULL will be returned as suggestion
while|while
condition|(
name|suggestions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IRI
name|entityAnnotation
init|=
operator|(
name|IRI
operator|)
name|suggestions
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|Suggestion
name|suggestion
init|=
name|Suggestion
operator|.
name|createFromEntityAnnotation
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestion
operator|!=
literal|null
condition|)
block|{
name|suggestionList
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|getSite
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|entityhubSites
operator|.
name|add
argument_list|(
name|suggestion
operator|.
name|getSite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|suggestionList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"TextAnnotation {} (selectedText: {}, start: {}) has no"
operator|+
literal|"suggestions."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|entity
operator|.
name|uri
block|,
name|entity
operator|.
name|name
block|,
name|entity
operator|.
name|start
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// nothing to disambiguate
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|suggestionList
argument_list|)
expr_stmt|;
comment|// sort them based on confidence
comment|// the LinkedHashMap will keep the order (based on the original
comment|// confidence)
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|suggestionList
control|)
block|{
name|entity
operator|.
name|suggestions
operator|.
name|put
argument_list|(
name|suggestion
operator|.
name|getEntityUri
argument_list|()
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entityhubSites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"TextAnnotation {} (selectedText: {}, start: {}) has "
operator|+
literal|"suggestions do not have 'entityhub:site' information. "
operator|+
literal|"Can not disambiguate because origin is unknown."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|entity
operator|.
name|uri
block|,
name|entity
operator|.
name|name
block|,
name|entity
operator|.
name|start
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// Ignore TextAnnotatiosn with suggestions of unknown origin.
block|}
elseif|else
if|if
condition|(
name|entityhubSites
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"TextAnnotation {} (selectedText: {}, start: {}) has "
operator|+
literal|"suggestions originating from multiple Entityhub Sites {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|entity
operator|.
name|uri
block|,
name|entity
operator|.
name|name
block|,
name|entity
operator|.
name|start
block|,
name|entityhubSites
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// TODO: Ignore those for now
block|}
else|else
block|{
name|entity
operator|.
name|site
operator|=
name|entityhubSites
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|entity
return|;
block|}
comment|/**      * Removes punctuation form a parsed string      */
specifier|private
specifier|static
name|String
name|cleanupKeywords
parameter_list|(
name|String
name|keywords
parameter_list|)
block|{
return|return
name|keywords
operator|.
name|replaceAll
argument_list|(
literal|"\\p{P}"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**      * Getter for the name      *       * @return the name      */
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Getter for the type      *       * @return the type      */
specifier|public
specifier|final
name|IRI
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uri
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|SavedEntity
operator|&&
name|uri
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SavedEntity
operator|)
name|o
operator|)
operator|.
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"SavedEntity %s (name=%s | type=%s)"
argument_list|,
name|uri
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|public
name|IRI
name|getUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
return|;
block|}
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|this
operator|.
name|start
return|;
block|}
specifier|public
name|int
name|getEnd
parameter_list|()
block|{
return|return
name|this
operator|.
name|end
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Suggestion
argument_list|>
name|getSuggestions
parameter_list|()
block|{
return|return
name|suggestions
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|Suggestion
name|getSuggestion
parameter_list|(
name|IRI
name|uri
parameter_list|)
block|{
return|return
name|suggestions
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * The name of the Entityhub {@link Site} managing the suggestions      *       * @return      */
specifier|public
name|String
name|getSite
parameter_list|()
block|{
return|return
name|site
return|;
block|}
block|}
end_class

end_unit

