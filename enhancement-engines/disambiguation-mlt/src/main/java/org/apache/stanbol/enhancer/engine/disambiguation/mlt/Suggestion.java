begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engine
operator|.
name|disambiguation
operator|.
name|mlt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ORIGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A suggestion of an {@link Entity} for a fise:TextAnnotation processed by the NamedEntityTaggingEngine  */
end_comment

begin_class
specifier|public
class|class
name|Suggestion
implements|implements
name|Comparable
argument_list|<
name|Suggestion
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Suggestion
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IRI
name|ENTITYHUB_SITE
init|=
operator|new
name|IRI
argument_list|(
name|RdfResourceEnum
operator|.
name|site
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|IRI
name|entityAnnotation
decl_stmt|;
specifier|private
name|IRI
name|entityUri
decl_stmt|;
specifier|private
name|Double
name|originalConfidnece
decl_stmt|;
specifier|private
name|Entity
name|entity
decl_stmt|;
specifier|private
name|Double
name|normalizedDisambiguationScore
decl_stmt|;
specifier|private
name|Double
name|disambiguatedConfidence
decl_stmt|;
specifier|private
name|String
name|site
decl_stmt|;
specifier|private
name|Suggestion
parameter_list|(
name|IRI
name|entityAnnotation
parameter_list|)
block|{
name|this
operator|.
name|entityAnnotation
operator|=
name|entityAnnotation
expr_stmt|;
block|}
specifier|public
name|Suggestion
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
name|this
operator|.
name|entityUri
operator|=
operator|new
name|IRI
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|site
operator|=
name|entity
operator|.
name|getSite
argument_list|()
expr_stmt|;
block|}
comment|/**      * Allows to create Suggestions from existing fise:TextAnnotation contained in the metadata of the      * processed {@link ContentItem}      *       * @param graph      * @param entityAnnotation      * @return      */
specifier|public
specifier|static
name|Suggestion
name|createFromEntityAnnotation
parameter_list|(
name|Graph
name|graph
parameter_list|,
name|IRI
name|entityAnnotation
parameter_list|)
block|{
name|Suggestion
name|suggestion
init|=
operator|new
name|Suggestion
argument_list|(
name|entityAnnotation
argument_list|)
decl_stmt|;
name|suggestion
operator|.
name|entityUri
operator|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|entityUri
operator|==
literal|null
condition|)
block|{
comment|// most likely not a fise:EntityAnnotation
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to create Suggestion for EntityAnnotation {} "
operator|+
literal|"because property {} is not present"
argument_list|,
name|entityAnnotation
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|suggestion
operator|.
name|originalConfidnece
operator|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|originalConfidnece
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"EntityAnnotation {} does not define a value for "
operator|+
literal|"property {}. Will use '0' as fallback"
argument_list|,
name|entityAnnotation
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|originalConfidnece
operator|=
literal|0.0
expr_stmt|;
block|}
name|suggestion
operator|.
name|site
operator|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|,
name|ENTITYHUB_SITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|site
operator|==
literal|null
condition|)
block|{
comment|//STANBOL-1411: fall back to fise:orign
name|suggestion
operator|.
name|site
operator|=
name|getOrigin
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: site might be NULL
return|return
name|suggestion
return|;
block|}
comment|/**      * The URI of the fise:EntityAnnotation representing this suggestion in the      * {@link ContentItem#getMetadata() metadata} of the processed {@link ContentItem}. This will be      *<code>null</code> if this Suggestion was created as part of the Disambiguation process and was not      * present in the metadata of the content item before the disambiguation.      *       * @return the URI of the fise:EntityAnnotation or<code>null</code> if not present.      */
specifier|public
name|IRI
name|getEntityAnnotation
parameter_list|()
block|{
return|return
name|entityAnnotation
return|;
block|}
comment|/**      * Allows to set the URI of the fise:EntityAnnotation. This is required if the original enhancement      * structure shared one fise:EntityAnnotation instance for two fise:TextAnnotations (e.g. because both      * TextAnnotations had the exact same value for fise:selected-text). After disambiguation it is necessary      * to 'clone' fise:EntityAnnotations like that to give them different fise:confidence values. Because of      * that it is supported to set the new URI of the cloned fise:EntityAnnotation.      *       * @param uri      *            the uri of the cloned fise:EntityAnnotation      */
specifier|public
name|void
name|setEntityAnnotation
parameter_list|(
name|IRI
name|uri
parameter_list|)
block|{
name|this
operator|.
name|entityAnnotation
operator|=
name|uri
expr_stmt|;
block|}
comment|/**      * The URI of the Entity (MUST NOT be<code>null</code>)      *       * @return the URI      */
specifier|public
name|IRI
name|getEntityUri
parameter_list|()
block|{
return|return
name|entityUri
return|;
block|}
comment|/**      * The original confidence of the fise:EntityAnnotation or<code>null</code> if not available.      *       * @return      */
specifier|public
name|Double
name|getOriginalConfidnece
parameter_list|()
block|{
return|return
name|originalConfidnece
return|;
block|}
comment|/**      * The {@link Entity} or<code>null</code> if not available. For Suggestions that are created based on      * fise:EntityAnnotations the Entity is not available. Entities might be loaded as part of the      * Disambiguation process.      *       * @return the {@link Entity} or<code>null</code> if not available      */
specifier|public
name|Entity
name|getEntity
parameter_list|()
block|{
return|return
name|entity
return|;
block|}
comment|/**      * The score of the disambiguation. This is just the score of the disambiguation that is not yet combined      * with the {@link #getOriginalConfidnece()} to become the {@link #getDisambiguatedConfidence()}      *       * @return the disambiguation score      */
specifier|public
name|Double
name|getNormalizedDisambiguationScore
parameter_list|()
block|{
return|return
name|normalizedDisambiguationScore
return|;
block|}
comment|/**      * The confidence after disambiguation. Will be<code>null</code> at the beginning      *       * @return the disambiguated confidence or<code>null</code> if not yet disambiguated      */
specifier|public
name|Double
name|getDisambiguatedConfidence
parameter_list|()
block|{
return|return
name|disambiguatedConfidence
return|;
block|}
comment|/**      * The name of the Entityhub {@link Site} the suggested Entity is managed.      * Both<code>entityhub:site</code> and<code>fise:orign</code> are       * considered as sites (see STANBOL-1411).      *       * @return the name of the Entityhub {@link Site}      */
specifier|public
name|String
name|getSite
parameter_list|()
block|{
return|return
name|site
return|;
block|}
comment|/**      * Setter for the normalized [0..1] score of the disambiguation      *       * @param normalizedDisambiguationScore      */
specifier|public
name|void
name|setNormalizedDisambiguationScore
parameter_list|(
name|Double
name|normalizedDisambiguationScore
parameter_list|)
block|{
name|this
operator|.
name|normalizedDisambiguationScore
operator|=
name|normalizedDisambiguationScore
expr_stmt|;
block|}
comment|/**      * Setter for the confidence after disambiguation      *       * @param disambiguatedConfidence      */
specifier|public
name|void
name|setDisambiguatedConfidence
parameter_list|(
name|Double
name|disambiguatedConfidence
parameter_list|)
block|{
name|this
operator|.
name|disambiguatedConfidence
operator|=
name|disambiguatedConfidence
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|entityUri
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|Suggestion
operator|&&
operator|(
operator|(
name|Suggestion
operator|)
name|obj
operator|)
operator|.
name|entityUri
operator|.
name|equals
argument_list|(
name|entityUri
argument_list|)
return|;
block|}
comment|/**      * Compares based on the {@link #getDisambiguatedConfidence()} (if present) and falls back to the      * {@link #getOriginalConfidnece()}. If the original confidence value is not present or both Suggestions      * do have the same confidence the natural order of the Entities URI is used. This also ensures      *<code>(x.compareTo(y)==0) == (x.equals(y))</code> and allows to use this class with {@link SortedMap}      * and {@link SortedSet} implementations.      *<p>      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Suggestion
name|other
parameter_list|)
block|{
name|int
name|result
decl_stmt|;
if|if
condition|(
name|disambiguatedConfidence
operator|!=
literal|null
operator|&&
name|other
operator|.
name|disambiguatedConfidence
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|other
operator|.
name|disambiguatedConfidence
operator|.
name|compareTo
argument_list|(
name|disambiguatedConfidence
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|originalConfidnece
operator|!=
literal|null
operator|&&
name|originalConfidnece
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|other
operator|.
name|originalConfidnece
operator|.
name|compareTo
argument_list|(
name|originalConfidnece
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
comment|// ensure (x.compareTo(y)==0) == (x.equals(y))
return|return
name|result
operator|==
literal|0
condition|?
name|entityUri
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|entityUri
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
else|:
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|getOrigin
parameter_list|(
name|Graph
name|graph
parameter_list|,
name|IRI
name|entityAnnotation
parameter_list|)
block|{
name|IRI
name|uOrigin
init|=
name|EnhancementEngineHelper
operator|.
name|getReference
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|,
name|ENHANCER_ORIGIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|uOrigin
operator|!=
literal|null
condition|)
block|{
return|return
name|uOrigin
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
else|else
block|{
name|String
name|sOrigin
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|,
name|ENHANCER_ORIGIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|sOrigin
operator|!=
literal|null
condition|)
block|{
return|return
name|sOrigin
return|;
block|}
else|else
block|{
name|Literal
name|lOrigin
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|graph
argument_list|,
name|entityAnnotation
argument_list|,
name|ENHANCER_ORIGIN
argument_list|,
name|Literal
operator|.
name|class
argument_list|,
name|lf
argument_list|)
decl_stmt|;
if|if
condition|(
name|lOrigin
operator|!=
literal|null
condition|)
block|{
return|return
name|lOrigin
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

