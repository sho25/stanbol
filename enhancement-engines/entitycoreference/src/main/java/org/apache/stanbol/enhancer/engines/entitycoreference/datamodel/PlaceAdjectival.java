begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_comment
comment|/**  * Represents a place adjectival inside a {@link Span}.  *   * @author Cristian Petroaca  *   */
end_comment

begin_class
specifier|public
class|class
name|PlaceAdjectival
block|{
comment|/**      * The start index in the {@link Span}.      */
specifier|private
name|int
name|startIdx
decl_stmt|;
comment|/**      * The end index in the {@link Span}.      */
specifier|private
name|int
name|endIdx
decl_stmt|;
comment|/**      * The {@link UriRef} in the {@link SiteManager} or {@link Entityhub} that this place adjectival points      * to.      */
specifier|private
name|UriRef
name|placeUri
decl_stmt|;
specifier|public
name|PlaceAdjectival
parameter_list|(
name|int
name|startIdx
parameter_list|,
name|int
name|endIdx
parameter_list|,
name|UriRef
name|placeUri
parameter_list|)
block|{
name|this
operator|.
name|startIdx
operator|=
name|startIdx
expr_stmt|;
name|this
operator|.
name|endIdx
operator|=
name|endIdx
expr_stmt|;
name|this
operator|.
name|placeUri
operator|=
name|placeUri
expr_stmt|;
block|}
specifier|public
name|UriRef
name|getPlaceUri
parameter_list|()
block|{
return|return
name|placeUri
return|;
block|}
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|this
operator|.
name|startIdx
return|;
block|}
specifier|public
name|int
name|getEnd
parameter_list|()
block|{
return|return
name|this
operator|.
name|endIdx
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|startIdx
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|endIdx
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|placeUri
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|PlaceAdjectival
name|other
init|=
operator|(
name|PlaceAdjectival
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|startIdx
operator|==
name|other
operator|.
name|startIdx
operator|&&
name|this
operator|.
name|endIdx
operator|==
name|other
operator|.
name|endIdx
operator|&&
name|this
operator|.
name|placeUri
operator|.
name|equals
argument_list|(
name|other
operator|.
name|placeUri
argument_list|)
return|;
block|}
block|}
end_class

end_unit

