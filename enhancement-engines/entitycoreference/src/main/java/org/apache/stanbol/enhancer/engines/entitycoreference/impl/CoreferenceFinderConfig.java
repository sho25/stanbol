begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
operator|.
name|NounPhrase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_comment
comment|/**  * Contains configuration parameters for the {@link CoreferenceFinder}.  *   * @author Cristian Petroaca  *   */
end_comment

begin_class
specifier|public
class|class
name|CoreferenceFinderConfig
block|{
comment|/**      * The maximum distance (in sentence numbers) between a NER and a {@link NounPhrase} for which we look for      * a coreference.      */
specifier|private
name|int
name|maxDistance
decl_stmt|;
comment|/**      * The Uris for spatial properties for the NER to be inspected when doing the coref spatial match.      */
specifier|private
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|spatialAttributes
decl_stmt|;
comment|/**      * The Uris for org membership properties for the NER to be inspected when doing the coref match.      */
specifier|private
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|orgMembershipAttributes
decl_stmt|;
comment|/**      * Entity classes which will not be used for coreference because they are too general.      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|entityClassesToExclude
decl_stmt|;
specifier|public
name|CoreferenceFinderConfig
parameter_list|(
name|int
name|maxDistance
parameter_list|,
name|String
name|spatialAttrForPerson
parameter_list|,
name|String
name|spatialAttrForOrg
parameter_list|,
name|String
name|spatialAttrForPlace
parameter_list|,
name|String
name|orgAttrForPerson
parameter_list|,
name|String
name|entityClassesToExclude
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|this
operator|.
name|maxDistance
operator|=
name|maxDistance
expr_stmt|;
name|this
operator|.
name|spatialAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|orgMembershipAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|spatialAttrForPerson
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attribute
range|:
name|spatialAttrForPerson
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|spatialAttributes
operator|.
name|put
argument_list|(
name|OntologicalClasses
operator|.
name|DBPEDIA_PERSON
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spatialAttrForOrg
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attribute
range|:
name|spatialAttrForOrg
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|spatialAttributes
operator|.
name|put
argument_list|(
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spatialAttrForPlace
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attribute
range|:
name|spatialAttrForPlace
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|spatialAttributes
operator|.
name|put
argument_list|(
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orgAttrForPerson
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attribute
range|:
name|orgAttrForPerson
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|orgMembershipAttributes
operator|.
name|put
argument_list|(
name|OntologicalClasses
operator|.
name|DBPEDIA_PERSON
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityClassesToExclude
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|entityClassesToExclude
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|clazz
range|:
name|entityClassesToExclude
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|this
operator|.
name|entityClassesToExclude
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Gets the max distance parameter.      *       * @return      */
specifier|public
name|int
name|getMaxDistance
parameter_list|()
block|{
return|return
name|maxDistance
return|;
block|}
comment|/**      * Gets the URIs for the spatial properties for a given Entity Type.      *       * @param uri      *            of the Entity type for which we want to get the ontology.      * @return      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSpatialAttributes
parameter_list|(
name|UriRef
name|uri
parameter_list|)
block|{
return|return
name|this
operator|.
name|spatialAttributes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Gets the URIs for the org membership properties for a given Entity Type.      *       * @param uri      *            of the Entity type for which we want to get the ontology.      * @return      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getOrgMembershipAttributes
parameter_list|(
name|UriRef
name|uri
parameter_list|)
block|{
return|return
name|this
operator|.
name|orgMembershipAttributes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Checks whether we should exclude the given class based on our config.      *       * @param clazz      * @return      */
specifier|public
name|boolean
name|shouldExcludeClass
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
name|this
operator|.
name|entityClassesToExclude
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

