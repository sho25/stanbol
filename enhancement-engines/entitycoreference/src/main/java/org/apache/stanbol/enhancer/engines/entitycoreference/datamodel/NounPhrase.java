begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_comment
comment|/**  * Encapsulates span and sentence information about a noun phrase.  *   * @author Cristian Petroaca  *   */
end_comment

begin_class
specifier|public
class|class
name|NounPhrase
block|{
comment|/**      * The {@link Span} which represents this noun phrase.      */
specifier|private
name|Span
name|chunk
decl_stmt|;
comment|/*      * TODO - should use Set instead?      */
comment|/**      * The {@link Span}s - tokens - which make up this noun phrase.      */
specifier|private
name|List
argument_list|<
name|Span
argument_list|>
name|tokens
decl_stmt|;
comment|/**      * The {@link Span}s contained in this noun phrase which represent Ners.      */
specifier|private
name|List
argument_list|<
name|Span
argument_list|>
name|nerChunks
decl_stmt|;
comment|/**      * The sentence index in which this noun phrase is found.      */
specifier|private
name|int
name|sentenceNo
decl_stmt|;
specifier|public
name|NounPhrase
parameter_list|(
name|Span
name|chunk
parameter_list|,
name|int
name|sentenceNo
parameter_list|)
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Chunk cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|chunk
operator|=
name|chunk
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
operator|new
name|ArrayList
argument_list|<
name|Span
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nerChunks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Span
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|sentenceNo
operator|=
name|sentenceNo
expr_stmt|;
block|}
comment|/**      * Gets the chunk representing this noun phrase.      *       * @return      */
specifier|public
name|Span
name|getChunk
parameter_list|()
block|{
return|return
name|chunk
return|;
block|}
comment|/**      * Adds a new token which is found in this noun phrase.      *       * @param token      */
specifier|public
name|void
name|addToken
parameter_list|(
name|Span
name|token
parameter_list|)
block|{
comment|/*          * TODO - validate token boundaries within this noun phrase.          */
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the list of tokens which make up this noun phrase.      *       * @return      */
specifier|public
name|List
argument_list|<
name|Span
argument_list|>
name|getTokens
parameter_list|()
block|{
return|return
name|tokens
return|;
block|}
comment|/**      * Adds a new NER chunk which is found within this noun phrase.      *       * @param chunk      */
specifier|public
name|void
name|addNerChunk
parameter_list|(
name|Span
name|chunk
parameter_list|)
block|{
comment|/*          * TODO - validate NER boundaries within this noun phrase.          */
name|nerChunks
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the list of NERs within this noun phrase.      *       * @return      */
specifier|public
name|List
argument_list|<
name|Span
argument_list|>
name|getNerChunks
parameter_list|()
block|{
return|return
name|nerChunks
return|;
block|}
comment|/**      * Determines whether this noun phrase's {@link Span} contains the given {@link Span}.      *       * @param span      * @return      */
specifier|public
name|boolean
name|containsSpan
parameter_list|(
name|Span
name|span
parameter_list|)
block|{
return|return
operator|(
name|span
operator|.
name|getStart
argument_list|()
operator|>=
name|chunk
operator|.
name|getStart
argument_list|()
operator|&&
name|span
operator|.
name|getEnd
argument_list|()
operator|<=
name|chunk
operator|.
name|getEnd
argument_list|()
operator|)
return|;
block|}
comment|/**      * Determines whether this noun phrase has NERs.      *       * @return      */
specifier|public
name|boolean
name|hasNers
parameter_list|()
block|{
return|return
name|nerChunks
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Returns the sentence index in which this noun phrase is found.      *       * @return      */
specifier|public
name|int
name|getSentenceNo
parameter_list|()
block|{
return|return
name|this
operator|.
name|sentenceNo
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|chunk
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|tokens
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|nerChunks
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|NounPhrase
name|other
init|=
operator|(
name|NounPhrase
operator|)
name|obj
decl_stmt|;
return|return
name|chunk
operator|.
name|equals
argument_list|(
name|other
operator|.
name|chunk
argument_list|)
operator|&&
name|tokens
operator|.
name|equals
argument_list|(
name|other
operator|.
name|tokens
argument_list|)
operator|&&
name|nerChunks
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nerChunks
argument_list|)
operator|&&
name|sentenceNo
operator|==
name|other
operator|.
name|sentenceNo
return|;
block|}
block|}
end_class

end_unit

