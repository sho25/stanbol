begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|COREF_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDFS_LABEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
operator|.
name|NounPhrase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
operator|.
name|PlaceAdjectival
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|coref
operator|.
name|CorefFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ReferenceConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_comment
comment|/**  * Uses the list of NERs and the list of {@link NounPhrase}s found in the analyzed text to find possible  * co-references.  *   * @author Cristian Petroaca  *   */
end_comment

begin_class
specifier|public
class|class
name|CoreferenceFinder
block|{
comment|/**      * The configured {@link SiteManager} for {@link Entity} storage.      */
specifier|private
name|SiteManager
name|siteManager
decl_stmt|;
comment|/**      * The default {@link Entity} storage.      */
specifier|private
name|Entityhub
name|entityHub
decl_stmt|;
comment|/**      * The name of the configured site for the {@link SiteManager}.      */
specifier|private
name|String
name|referencedSiteID
decl_stmt|;
comment|/**      * In memory cache storing {@link Entity} types which are often used.      */
specifier|private
name|InMemoryEntityTypeIndex
name|entityTypeIndex
decl_stmt|;
comment|/**      * Class holding configuration params.      */
specifier|private
name|CoreferenceFinderConfig
name|config
decl_stmt|;
comment|/**      * Holds vocabulary.dictionary info such as the list of place adjectivals by language.      */
specifier|private
name|Dictionaries
name|dictionaries
decl_stmt|;
specifier|public
name|CoreferenceFinder
parameter_list|(
name|String
index|[]
name|languages
parameter_list|,
name|SiteManager
name|siteManager
parameter_list|,
name|Entityhub
name|entityHub
parameter_list|,
name|String
name|referencedSiteID
parameter_list|,
name|int
name|maxDistance
parameter_list|,
name|String
name|entityUriBase
parameter_list|,
name|String
name|spatialAttrForPerson
parameter_list|,
name|String
name|spatialAttrForOrg
parameter_list|,
name|String
name|spatialAttrForPlace
parameter_list|,
name|String
name|orgAttributesForPerson
parameter_list|,
name|String
name|entityClassesToExclude
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|this
operator|.
name|siteManager
operator|=
name|siteManager
expr_stmt|;
name|this
operator|.
name|entityHub
operator|=
name|entityHub
expr_stmt|;
name|this
operator|.
name|referencedSiteID
operator|=
name|referencedSiteID
expr_stmt|;
name|this
operator|.
name|entityTypeIndex
operator|=
operator|new
name|InMemoryEntityTypeIndex
argument_list|()
expr_stmt|;
name|this
operator|.
name|config
operator|=
operator|new
name|CoreferenceFinderConfig
argument_list|(
name|maxDistance
argument_list|,
name|spatialAttrForPerson
argument_list|,
name|spatialAttrForOrg
argument_list|,
name|spatialAttrForPlace
argument_list|,
name|orgAttributesForPerson
argument_list|,
name|entityClassesToExclude
argument_list|)
expr_stmt|;
name|this
operator|.
name|dictionaries
operator|=
operator|new
name|Dictionaries
argument_list|(
name|languages
argument_list|,
name|entityUriBase
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs the actual coreference resolution by iterating through all the NERs and all the      * {@link NounPhrase}s which are after the given Ner in the text. If any coreferences are found they are      * written as {@link NlpAnnotation}s in the NER and noun phrase {@link Span}s.      *       * @param ners      * @param nounPhrases      * @param language      * @throws EngineException      */
specifier|public
name|void
name|extractCorefs
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|ners
parameter_list|,
name|List
argument_list|<
name|NounPhrase
argument_list|>
name|nounPhrases
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|EngineException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|entry
range|:
name|ners
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|nerSentenceNo
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Span
argument_list|>
name|nerSpans
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|maxDistance
init|=
name|this
operator|.
name|config
operator|.
name|getMaxDistance
argument_list|()
decl_stmt|;
for|for
control|(
name|Span
name|ner
range|:
name|nerSpans
control|)
block|{
name|Entity
name|entity
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|typeLabels
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Span
argument_list|>
name|corefs
init|=
operator|new
name|HashSet
argument_list|<
name|Span
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NounPhrase
name|nounPhrase
range|:
name|nounPhrases
control|)
block|{
name|int
name|nounPhraseSentenceNo
init|=
name|nounPhrase
operator|.
name|getSentenceNo
argument_list|()
decl_stmt|;
if|if
condition|(
name|nounPhrase
operator|.
name|getChunk
argument_list|()
operator|.
name|getStart
argument_list|()
operator|>
name|ner
operator|.
name|getStart
argument_list|()
operator|&&
operator|(
name|maxDistance
operator|!=
name|Constants
operator|.
name|MAX_DISTANCE_NO_CONSTRAINT
operator|&&
name|nounPhraseSentenceNo
operator|>
name|nerSentenceNo
operator|&&
name|nounPhraseSentenceNo
operator|-
name|nerSentenceNo
operator|<=
name|maxDistance
operator|)
condition|)
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|entity
operator|=
name|lookupEntity
argument_list|(
name|ner
argument_list|,
name|language
argument_list|)
expr_stmt|;
comment|/*                              * If the entity is still null there's nothing to do but go to the next ner.                              */
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|typeLabels
operator|==
literal|null
condition|)
block|{
name|typeLabels
operator|=
name|buildEntityTypeLabels
argument_list|(
name|entity
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isCoreferent
argument_list|(
name|typeLabels
argument_list|,
name|entity
argument_list|,
name|ner
argument_list|,
name|nounPhrase
argument_list|,
name|language
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Span
argument_list|>
name|coreferencedNer
init|=
operator|new
name|HashSet
argument_list|<
name|Span
argument_list|>
argument_list|()
decl_stmt|;
name|coreferencedNer
operator|.
name|add
argument_list|(
name|ner
argument_list|)
expr_stmt|;
name|Span
name|chunk
init|=
name|nounPhrase
operator|.
name|getChunk
argument_list|()
decl_stmt|;
name|chunk
operator|.
name|addAnnotation
argument_list|(
name|COREF_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
operator|new
name|CorefFeature
argument_list|(
literal|false
argument_list|,
name|coreferencedNer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|corefs
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|corefs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ner
operator|.
name|addAnnotation
argument_list|(
name|COREF_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
operator|new
name|CorefFeature
argument_list|(
literal|true
argument_list|,
name|corefs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Gets an Entity from the configured {@link Site} based on the NER text and type.      *       * @param ner      * @param language      * @return      * @throws EngineException      */
specifier|private
name|Entity
name|lookupEntity
parameter_list|(
name|Span
name|ner
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|EngineException
block|{
name|Site
name|site
init|=
name|getReferencedSite
argument_list|()
decl_stmt|;
name|FieldQueryFactory
name|queryFactory
init|=
name|site
operator|==
literal|null
condition|?
name|entityHub
operator|.
name|getQueryFactory
argument_list|()
else|:
name|site
operator|.
name|getQueryFactory
argument_list|()
decl_stmt|;
name|FieldQuery
name|query
init|=
name|queryFactory
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|Constraint
name|labelConstraint
decl_stmt|;
name|String
name|namedEntityLabel
init|=
name|ner
operator|.
name|getSpan
argument_list|()
decl_stmt|;
name|labelConstraint
operator|=
operator|new
name|TextConstraint
argument_list|(
name|namedEntityLabel
argument_list|,
literal|false
argument_list|,
name|language
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|.
name|setConstraint
argument_list|(
name|RDFS_LABEL
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|labelConstraint
argument_list|)
expr_stmt|;
name|query
operator|.
name|setConstraint
argument_list|(
name|RDF_TYPE
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|ner
operator|.
name|getAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|NER_ANNOTATION
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|Entity
argument_list|>
name|results
init|=
name|site
operator|==
literal|null
condition|?
comment|// if site is NULL
name|entityHub
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
else|:
comment|// use the Entityhub
name|site
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// else the referenced site
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// We set the limit to 1 so if it found anything it should contain just 1 entry
return|return
name|results
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
comment|/**      * Performs the coreference matching rules: 1. Match the entity type. 2. If the {@link NounPhrase}      * contains any NERs match the NER to any spatial/org membership/functional Entity properties from the      * {@link Site}. 3. If {@link NounPhrase} contains any place adjectivals perform spatial co-reference      * based on the entity spatial properties.      *       * @param typeLabels      *            - a list of types (classes) that the given entity has.      * @param entity      *            - the entity for which we want to do the coref.      * @param ner      *            - the ner in the text for which we want to do the coref.      * @param nounPhrase      *            - the {@link NounPhrase} which we want to test for coref.      * @param language      *            - the language of the text.      * @return      * @throws EngineException      */
specifier|private
name|boolean
name|isCoreferent
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|typeLabels
parameter_list|,
name|Entity
name|entity
parameter_list|,
name|Span
name|ner
parameter_list|,
name|NounPhrase
name|nounPhrase
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|EngineException
block|{
comment|/*          * 1. Try to match the entity class to the noun phrase.          */
name|String
name|matchedClass
init|=
literal|null
decl_stmt|;
name|String
name|nounPhraseText
init|=
name|nounPhrase
operator|.
name|getChunk
argument_list|()
operator|.
name|getSpan
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|int
name|classStart
init|=
literal|0
decl_stmt|;
name|int
name|classEnd
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|typeLabels
control|)
block|{
if|if
condition|(
name|nounPhraseText
operator|.
name|matches
argument_list|(
literal|".*\\b"
operator|+
name|label
operator|+
literal|"\\b.*"
argument_list|)
operator|&&
operator|(
name|matchedClass
operator|==
literal|null
operator|||
name|label
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
operator|.
name|length
operator|>
name|matchedClass
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
operator|.
name|length
operator|)
condition|)
block|{
name|matchedClass
operator|=
name|label
expr_stmt|;
name|classStart
operator|=
name|nounPhrase
operator|.
name|getChunk
argument_list|()
operator|.
name|getStart
argument_list|()
operator|+
name|nounPhraseText
operator|.
name|indexOf
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|classEnd
operator|=
name|classStart
operator|+
name|label
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matchedClass
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|/*          * 2. See if there are any NERs in the noun phrase to further identify the coref. Any NERs found          * should be separate words from the class matches from point 1.          */
comment|/*          * TODO - devise a coref confidence scheme?          */
if|if
condition|(
name|nounPhrase
operator|.
name|hasNers
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Span
argument_list|>
name|npNers
init|=
name|nounPhrase
operator|.
name|getNerChunks
argument_list|()
decl_stmt|;
name|UriRef
name|nerType
init|=
name|ner
operator|.
name|getAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|NER_ANNOTATION
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|Span
name|npNer
range|:
name|npNers
control|)
block|{
comment|/*                  * Don't go any further if for some reason it turns out that the ner text is the same as the                  * entity class text.                  */
if|if
condition|(
operator|(
name|npNer
operator|.
name|getStart
argument_list|()
operator|>=
name|classStart
operator|&&
name|npNer
operator|.
name|getStart
argument_list|()
operator|<=
name|classEnd
operator|)
operator|||
operator|(
name|npNer
operator|.
name|getEnd
argument_list|()
operator|>=
name|classStart
operator|&&
name|npNer
operator|.
name|getEnd
argument_list|()
operator|<=
name|classEnd
operator|)
condition|)
continue|continue;
name|Entity
name|npEntity
init|=
name|lookupEntity
argument_list|(
name|npNer
argument_list|,
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|npEntity
operator|!=
literal|null
condition|)
block|{
name|UriRef
name|npNerType
init|=
name|npNer
operator|.
name|getAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|NER_ANNOTATION
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rulesOntologyAttr
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
operator|.
name|equals
argument_list|(
name|npNerType
argument_list|)
condition|)
block|{
name|rulesOntologyAttr
operator|=
name|this
operator|.
name|config
operator|.
name|getSpatialAttributes
argument_list|(
name|nerType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
operator|.
name|equals
argument_list|(
name|npNerType
argument_list|)
condition|)
block|{
name|rulesOntologyAttr
operator|=
name|this
operator|.
name|config
operator|.
name|getOrgMembershipAttributes
argument_list|(
name|nerType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueExistsInEntityAttributes
argument_list|(
name|rulesOntologyAttr
argument_list|,
name|entity
argument_list|,
name|npEntity
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
comment|/*          * 3. Detect any place adjectivals in noun phrases and use them for spatial coreference. Any place          * adjectivals found should be separate words from the class matches from point 1.          */
name|PlaceAdjectival
name|placeAdjectival
init|=
name|this
operator|.
name|dictionaries
operator|.
name|findPlaceAdjectival
argument_list|(
name|language
argument_list|,
name|nounPhrase
argument_list|)
decl_stmt|;
if|if
condition|(
name|placeAdjectival
operator|!=
literal|null
operator|&&
operator|(
name|placeAdjectival
operator|.
name|getEnd
argument_list|()
operator|<
name|classStart
operator|||
name|placeAdjectival
operator|.
name|getStart
argument_list|()
operator|>
name|classEnd
operator|)
condition|)
block|{
comment|/*              * We use the same spatial rules ontology attributes as before.              */
name|Set
argument_list|<
name|String
argument_list|>
name|rulesOntologyAttr
init|=
name|this
operator|.
name|config
operator|.
name|getSpatialAttributes
argument_list|(
name|ner
operator|.
name|getAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|NER_ANNOTATION
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueExistsInEntityAttributes
argument_list|(
name|rulesOntologyAttr
argument_list|,
name|entity
argument_list|,
name|placeAdjectival
operator|.
name|getPlaceUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/*          * If there was no additional info to do the coref and if the entity class matched and has more than 1          * word then we consider this a good enough coreference.          */
if|if
condition|(
name|matchedClass
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
operator|.
name|length
operator|>
literal|1
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**      * Builds a Set of Entity Type labels given the Entity type uris.      *       * @param entity      * @param language      * @return      * @throws EngineException      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|buildEntityTypeLabels
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|EngineException
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|typeUris
init|=
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|get
argument_list|(
name|RDF_TYPE
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allTypeLabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|typeUris
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|typeUri
init|=
name|typeUris
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|config
operator|.
name|shouldExcludeClass
argument_list|(
name|typeUri
argument_list|)
condition|)
continue|continue;
comment|// First try the in memory index
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|this
operator|.
name|entityTypeIndex
operator|.
name|lookupEntityType
argument_list|(
operator|new
name|UriRef
argument_list|(
name|typeUri
argument_list|)
argument_list|,
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|labels
operator|==
literal|null
condition|)
block|{
name|Site
name|site
init|=
name|getReferencedSite
argument_list|()
decl_stmt|;
name|Entity
name|entityType
init|=
operator|(
name|site
operator|==
literal|null
operator|)
condition|?
name|this
operator|.
name|entityHub
operator|.
name|getEntity
argument_list|(
name|typeUri
argument_list|)
else|:
name|site
operator|.
name|getEntity
argument_list|(
name|typeUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityType
operator|!=
literal|null
condition|)
block|{
name|labels
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|labelIterator
init|=
name|entityType
operator|.
name|getRepresentation
argument_list|()
operator|.
name|get
argument_list|(
name|RDFS_LABEL
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|language
argument_list|)
decl_stmt|;
while|while
condition|(
name|labelIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|labels
operator|.
name|add
argument_list|(
name|labelIterator
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|entityTypeIndex
operator|.
name|addEntityType
argument_list|(
operator|new
name|UriRef
argument_list|(
name|typeUri
argument_list|)
argument_list|,
name|language
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
name|allTypeLabels
operator|.
name|addAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
block|}
return|return
name|allTypeLabels
return|;
block|}
comment|/**      * Checks whether any of the attributes in rulesOntologyAttr from the given Entity contain the given      * value.      *       * @param rulesOntologyAttr      * @param entity      * @param value      * @return      */
specifier|private
name|boolean
name|valueExistsInEntityAttributes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|rulesOntologyAttr
parameter_list|,
name|Entity
name|entity
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|String
name|attribute
range|:
name|rulesOntologyAttr
control|)
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|entityAttributes
init|=
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
while|while
condition|(
name|entityAttributes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|entityAttribute
init|=
name|entityAttributes
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityAttribute
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Retrieves the configured {@link Site} which holds the NER properties.      *       * @return      * @throws EngineException      */
specifier|private
name|Site
name|getReferencedSite
parameter_list|()
throws|throws
name|EngineException
block|{
name|Site
name|site
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|referencedSiteID
operator|!=
literal|null
condition|)
block|{
comment|// lookup the referenced site
name|site
operator|=
name|siteManager
operator|.
name|getSite
argument_list|(
name|referencedSiteID
argument_list|)
expr_stmt|;
comment|// ensure that it is present
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to enhance because Referenced Site %s is currently not active!"
argument_list|,
name|referencedSiteID
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
return|return
name|site
return|;
block|}
block|}
end_class

end_unit

