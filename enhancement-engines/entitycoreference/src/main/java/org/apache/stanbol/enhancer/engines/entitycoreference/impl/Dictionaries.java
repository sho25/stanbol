begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
operator|.
name|NounPhrase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
operator|.
name|PlaceAdjectival
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_comment
comment|/**  * Contains information about several terms and properties of words we use in the {@link CoreferenceFinder}.  *   * @author Cristian Petroaca  *   */
end_comment

begin_class
class|class
name|Dictionaries
block|{
comment|/**      * Contains the list of place adjectivals in the form: language -> adjectival -> IRI -> adjectival ->      * IRI There are Places that have multiple adjectivals so in this map there are adjectivals that point      * to the same IRI but that ensures a fast lookup.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|IRI
argument_list|>
argument_list|>
name|placeAdjectivalsMap
decl_stmt|;
specifier|public
name|Dictionaries
parameter_list|(
name|String
index|[]
name|languages
parameter_list|,
name|String
name|entityUriBase
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|placeAdjectivalsMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|language
range|:
name|languages
control|)
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IRI
argument_list|>
name|languagePlaceAdjMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|InputStream
name|langIn
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|langIn
operator|=
name|Dictionaries
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|Constants
operator|.
name|PLACE_ADJECTIVALS_FOLDER
operator|+
literal|"/"
operator|+
name|language
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|langIn
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|splittedLine
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|String
name|place
init|=
name|splittedLine
index|[
literal|0
index|]
decl_stmt|;
name|String
name|adjectivals
init|=
name|splittedLine
index|[
literal|1
index|]
decl_stmt|;
name|IRI
name|ref
init|=
operator|new
name|IRI
argument_list|(
name|entityUriBase
operator|+
name|place
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|adjectivalsArray
init|=
name|adjectivals
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|adjectival
range|:
name|adjectivalsArray
control|)
block|{
name|languagePlaceAdjMap
operator|.
name|put
argument_list|(
name|adjectival
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
name|placeAdjectivalsMap
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|languagePlaceAdjMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|""
argument_list|,
literal|"Could not read "
operator|+
name|Constants
operator|.
name|PLACE_ADJECTIVALS_FOLDER
operator|+
literal|"/"
operator|+
name|language
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|langIn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|langIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
block|}
comment|/**      * Checks whether a {@link NounPhrase} contains a place adjectival and returns it.      *       * @param language      * @param nounPhrase      * @return the {@link PlaceAdjectival} if the {@link NounPhrase} contains one or null if not.      */
specifier|public
name|PlaceAdjectival
name|findPlaceAdjectival
parameter_list|(
name|String
name|language
parameter_list|,
name|NounPhrase
name|nounPhrase
parameter_list|)
block|{
name|List
argument_list|<
name|Span
argument_list|>
name|tokens
init|=
name|nounPhrase
operator|.
name|getTokens
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IRI
argument_list|>
name|langPlaceAdjectivalsMap
init|=
name|placeAdjectivalsMap
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
comment|/*          * Go through all 1-grams and 2-grams and see if we have a match in the place adjectivals map. 2-grams          * should be good enough since there are no 3-gram places at least from what I saw.          */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Span
name|currentToken
init|=
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|currentTokenString
init|=
name|currentToken
operator|.
name|getSpan
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// First the current 1-gram
if|if
condition|(
name|langPlaceAdjectivalsMap
operator|.
name|containsKey
argument_list|(
name|currentTokenString
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlaceAdjectival
argument_list|(
name|currentToken
operator|.
name|getStart
argument_list|()
argument_list|,
name|currentToken
operator|.
name|getEnd
argument_list|()
argument_list|,
name|langPlaceAdjectivalsMap
operator|.
name|get
argument_list|(
name|currentTokenString
argument_list|)
argument_list|)
return|;
block|}
comment|// Then use the 2-gram with the token before it
name|StringBuilder
name|concatTokens
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|concatTokensString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|Span
name|previousToken
init|=
name|tokens
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|previousTokenString
init|=
name|previousToken
operator|.
name|getSpan
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|concatTokens
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|concatTokens
operator|.
name|append
argument_list|(
name|previousTokenString
argument_list|)
expr_stmt|;
name|concatTokens
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|concatTokens
operator|.
name|append
argument_list|(
name|currentTokenString
argument_list|)
expr_stmt|;
name|concatTokensString
operator|=
name|concatTokens
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|langPlaceAdjectivalsMap
operator|.
name|containsKey
argument_list|(
name|concatTokensString
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlaceAdjectival
argument_list|(
name|previousToken
operator|.
name|getStart
argument_list|()
argument_list|,
name|currentToken
operator|.
name|getEnd
argument_list|()
argument_list|,
name|langPlaceAdjectivalsMap
operator|.
name|get
argument_list|(
name|concatTokensString
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// Now use the 2-gram with the token after it
if|if
condition|(
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|Span
name|nextToken
init|=
name|tokens
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|nextTokenString
init|=
name|nextToken
operator|.
name|getSpan
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|concatTokens
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|concatTokens
operator|.
name|append
argument_list|(
name|currentTokenString
argument_list|)
expr_stmt|;
name|concatTokens
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|concatTokens
operator|.
name|append
argument_list|(
name|nextTokenString
argument_list|)
expr_stmt|;
name|concatTokensString
operator|=
name|concatTokens
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|langPlaceAdjectivalsMap
operator|.
name|containsKey
argument_list|(
name|concatTokens
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlaceAdjectival
argument_list|(
name|currentToken
operator|.
name|getStart
argument_list|()
argument_list|,
name|nextToken
operator|.
name|getEnd
argument_list|()
argument_list|,
name|langPlaceAdjectivalsMap
operator|.
name|get
argument_list|(
name|concatTokensString
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

