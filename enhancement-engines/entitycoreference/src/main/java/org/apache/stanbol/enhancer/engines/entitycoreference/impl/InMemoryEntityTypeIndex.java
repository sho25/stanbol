begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_comment
comment|/**  * Memory cache for storing often used Entity Type (Class) information.  *   * @author Cristian Petroaca  *   */
end_comment

begin_class
specifier|public
class|class
name|InMemoryEntityTypeIndex
block|{
comment|/**      * The index having as key the Uri of the class and the value the set of labels ordered by language.      */
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|index
decl_stmt|;
specifier|public
name|InMemoryEntityTypeIndex
parameter_list|()
block|{
name|index
operator|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Searches for a given class URI for the given language.      *       * @param uri      * @param language      * @return      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|lookupEntityType
parameter_list|(
name|IRI
name|uri
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|langMap
init|=
name|index
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|langMap
operator|!=
literal|null
condition|)
block|{
return|return
name|langMap
operator|.
name|get
argument_list|(
name|language
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Adds a new class URI's labels for the given language.      *       * @param uri      * @param language      * @param labels      */
specifier|public
name|void
name|addEntityType
parameter_list|(
name|IRI
name|uri
parameter_list|,
name|String
name|language
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|langMap
init|=
name|index
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|langMap
operator|==
literal|null
condition|)
block|{
name|langMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|langMap
argument_list|)
expr_stmt|;
block|}
name|langMap
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

