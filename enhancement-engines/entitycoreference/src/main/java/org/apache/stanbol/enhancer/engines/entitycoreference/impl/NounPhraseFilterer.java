begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycoreference
operator|.
name|datamodel
operator|.
name|NounPhrase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_comment
comment|/**  * Filters out bad {@link NounPhrase}s based on pos information.  *   * @author Cristian Petroaca  *   */
end_comment

begin_comment
comment|/*  * TODO - create a NounPhraseFilterer interface with multiple implementations to separate languages with  * appositional definite article from the others.  */
end_comment

begin_class
specifier|public
class|class
name|NounPhraseFilterer
block|{
specifier|private
specifier|final
specifier|static
name|String
name|WITHIN_TEXT_DET_PROP
init|=
literal|"within.text.referencing.determiners"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|short
name|MIN_POS_NUMBER
init|=
literal|2
decl_stmt|;
comment|/**      * Set of determiners based on language which make a {@link NounPhrase} valid for being a coref mention.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|withinTextRefDeterminers
decl_stmt|;
specifier|public
name|NounPhraseFilterer
parameter_list|(
name|String
index|[]
name|languages
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|withinTextRefDeterminers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|language
range|:
name|languages
control|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|propertiesFile
init|=
name|Constants
operator|.
name|POS_CONFIG_FOLDER
operator|+
literal|"/"
operator|+
name|language
operator|+
literal|".properties"
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|NounPhraseFilterer
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|propertiesFile
argument_list|)
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|""
argument_list|,
literal|"Could not read "
operator|+
name|propertiesFile
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
block|}
block|}
name|String
name|determinersProperty
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|WITHIN_TEXT_DET_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|determinersProperty
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|WITHIN_TEXT_DET_PROP
argument_list|,
literal|"Missing property in "
operator|+
name|propertiesFile
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|langDeterminerSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|determiner
range|:
name|determinersProperty
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|langDeterminerSet
operator|.
name|add
argument_list|(
name|determiner
argument_list|)
expr_stmt|;
block|}
name|withinTextRefDeterminers
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|langDeterminerSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Filters out noun phrases which do not contain a determiner from the given config and do not a token      * count bigger than 2 - TODO : should this be configurable to be able to also include 1 word noun      * phrases?      *       * @param nounPhrases      * @param language      */
specifier|public
name|void
name|filter
parameter_list|(
name|List
argument_list|<
name|NounPhrase
argument_list|>
name|nounPhrases
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|langDeterminerSet
init|=
name|withinTextRefDeterminers
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|NounPhrase
argument_list|>
name|it
init|=
name|nounPhrases
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NounPhrase
name|nounPhrase
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|hasGoodDeterminer
init|=
literal|false
decl_stmt|;
name|short
name|nounNo
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Span
name|token
range|:
name|nounPhrase
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|Value
argument_list|<
name|PosTag
argument_list|>
name|pos
init|=
name|token
operator|.
name|getAnnotation
argument_list|(
name|NlpAnnotations
operator|.
name|POS_ANNOTATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|null
condition|)
block|{
name|PosTag
name|posTag
init|=
name|pos
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|posTag
operator|.
name|hasCategory
argument_list|(
name|LexicalCategory
operator|.
name|Noun
argument_list|)
operator|||
name|posTag
operator|.
name|hasCategory
argument_list|(
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
condition|)
block|{
name|nounNo
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasGoodDeterminer
operator|&&
name|posTag
operator|.
name|hasPos
argument_list|(
name|Pos
operator|.
name|Determiner
argument_list|)
operator|&&
name|langDeterminerSet
operator|.
name|contains
argument_list|(
name|token
operator|.
name|getSpan
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|hasGoodDeterminer
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasGoodDeterminer
operator|||
name|nounNo
operator|<
name|MIN_POS_NUMBER
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|supportsLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|withinTextRefDeterminers
operator|.
name|containsKey
argument_list|(
name|language
argument_list|)
return|;
block|}
block|}
end_class

end_unit

