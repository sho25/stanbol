begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|labeltokenizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|LabelTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Simple Tokenizer that behaves equals as the  * OpenNLP<code>opennlp.tools.tokenize.SimpleTokenizer</code>  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
operator|-
literal|1000
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|LabelTokenizer
operator|.
name|SUPPORTED_LANUAGES
argument_list|,
name|value
operator|=
literal|"*"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|SimpleLabelTokenizer
implements|implements
name|LabelTokenizer
block|{
specifier|private
enum|enum
name|CT
block|{
name|WHITESPACE
block|,
name|LETTER
block|,
name|NUMBER
block|,
name|OTHER
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|pc
init|=
literal|0
decl_stmt|;
name|CT
name|state
init|=
name|CT
operator|.
name|WHITESPACE
decl_stmt|;
name|CT
name|charType
init|=
name|CT
operator|.
name|WHITESPACE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|label
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|label
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|charType
operator|=
name|getType
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|CT
operator|.
name|WHITESPACE
condition|)
block|{
if|if
condition|(
name|charType
operator|!=
name|CT
operator|.
name|WHITESPACE
condition|)
block|{
name|start
operator|=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|charType
operator|!=
name|state
operator|||
name|charType
operator|==
name|CT
operator|.
name|OTHER
operator|&&
name|c
operator|!=
name|pc
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|label
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
expr_stmt|;
block|}
block|}
name|state
operator|=
name|charType
expr_stmt|;
name|pc
operator|=
name|c
expr_stmt|;
block|}
if|if
condition|(
name|charType
operator|!=
name|CT
operator|.
name|WHITESPACE
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|label
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|label
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|CT
name|getType
parameter_list|(
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|CT
operator|.
name|LETTER
return|;
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|CT
operator|.
name|NUMBER
return|;
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
operator|||
name|Character
operator|.
name|getType
argument_list|(
name|c
argument_list|)
operator|==
name|Character
operator|.
name|SPACE_SEPARATOR
condition|)
block|{
return|return
name|CT
operator|.
name|WHITESPACE
return|;
block|}
else|else
block|{
return|return
name|CT
operator|.
name|OTHER
return|;
block|}
block|}
block|}
end_class

end_unit

