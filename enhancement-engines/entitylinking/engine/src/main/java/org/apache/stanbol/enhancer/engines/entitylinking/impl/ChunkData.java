begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|PHRASE_ANNOTATION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|LanguageProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|phrase
operator|.
name|PhraseTag
import|;
end_import

begin_comment
comment|/**   * Represents a Chunk (group of tokens) used as context for EntityLinking.  * Typically a single {@link ChunkData#chunk} is used, but in case of  * overlapping and {@link ChunkData#isProcessable processable} chunks  * multiple {@link Chunk}s might be merged to a single {@link ChunkData}  * instance. In such cases {@link ChunkData#chunk} represents the  * first and {@link ChunkData#merged} the last of the merged chunks.<p>  * {@link ChunkData#startToken} and {@link ChunkData#endToken} represent  * the covered [start,end) {@link Token} indices relative to the current  * sections (typically a {@link Sentence}). {@link ChunkData#getStartChar()}  * and {@link ChunkData#getEndChar()} are the absolute [start,end) character  * indices within the {@link AnalysedText#getSpan()}  */
end_comment

begin_class
specifier|public
class|class
name|ChunkData
block|{
specifier|protected
specifier|final
specifier|static
name|boolean
name|DEFAULT_PROCESSABLE_STATE
init|=
literal|true
decl_stmt|;
comment|/** if the Chunk is processable */
specifier|public
specifier|final
name|boolean
name|isProcessable
decl_stmt|;
comment|/** the Chunk */
specifier|public
specifier|final
name|Chunk
name|chunk
decl_stmt|;
comment|/**       * In case multiple overlapping and processable {@link Chunk}s the      * section selected by the chunks are merged. While {@link #chunk}      * holds the original chunk (the first) this variable holds the      * last merged one. Enclosed chunks (in case more than two are      * merged) are not available via this class, but can be retrieved      * by iterating over the {@link AnalysedText} content part.      */
name|Chunk
name|merged
decl_stmt|;
comment|/** the start token index relative to the current section (sentence) */
name|int
name|startToken
decl_stmt|;
comment|/** the end token index relative to the current section (sentence) */
name|int
name|endToken
decl_stmt|;
comment|/**      * The number of matchable Tokens enclosed by this Chunk      */
name|int
name|matchableCount
decl_stmt|;
comment|/**      * The start position of the first matchable {@link Token} within this      * chunk      */
name|int
name|matchableStart
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The start char offset of the first matchable {@link Token} within this chunk      */
name|int
name|matchableStartCharIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The end position of the last matchable {@link Token} within this chunk      */
name|int
name|matchableEnd
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The end char offset of the last matchable {@link Token} within this chunk      */
name|int
name|matchableEndCharIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * constructs and initializes the meta data for the parsed {@link Chunk}      * @param chunk      */
specifier|public
name|ChunkData
parameter_list|(
name|LanguageProcessingConfig
name|tpc
parameter_list|,
name|Chunk
name|chunk
parameter_list|)
block|{
name|this
operator|.
name|chunk
operator|=
name|chunk
expr_stmt|;
name|Boolean
name|process
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Value
argument_list|<
name|PhraseTag
argument_list|>
name|phraseAnnotation
range|:
name|chunk
operator|.
name|getAnnotations
argument_list|(
name|PHRASE_ANNOTATION
argument_list|)
control|)
block|{
if|if
condition|(
name|tpc
operator|.
name|getProcessedPhraseCategories
argument_list|()
operator|.
name|contains
argument_list|(
name|phraseAnnotation
operator|.
name|value
argument_list|()
operator|.
name|getCategory
argument_list|()
argument_list|)
operator|||
name|tpc
operator|.
name|getProcessedPhraseTags
argument_list|()
operator|.
name|contains
argument_list|(
name|phraseAnnotation
operator|.
name|value
argument_list|()
operator|.
name|getTag
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|phraseAnnotation
operator|.
name|probability
argument_list|()
operator|==
name|Value
operator|.
name|UNKNOWN_PROBABILITY
operator|||
name|phraseAnnotation
operator|.
name|probability
argument_list|()
operator|>=
name|tpc
operator|.
name|getMinPhraseAnnotationProbability
argument_list|()
condition|)
block|{
name|process
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// else probability to low for inclusion
block|}
elseif|else
if|if
condition|(
name|phraseAnnotation
operator|.
name|probability
argument_list|()
operator|==
name|Value
operator|.
name|UNKNOWN_PROBABILITY
operator|||
name|phraseAnnotation
operator|.
name|probability
argument_list|()
operator|>=
name|tpc
operator|.
name|getMinExcludePhraseAnnotationProbability
argument_list|()
condition|)
block|{
name|process
operator|=
literal|false
expr_stmt|;
break|break;
block|}
comment|// else probability to low for exclusion
block|}
name|isProcessable
operator|=
name|process
operator|==
literal|null
condition|?
name|DEFAULT_PROCESSABLE_STATE
else|:
name|process
expr_stmt|;
block|}
comment|/**      * Getter for the start character position      * @return the start character position of the selected text span.      */
specifier|public
name|int
name|getStartChar
parameter_list|()
block|{
return|return
name|chunk
operator|.
name|getStart
argument_list|()
return|;
block|}
comment|/**      * Getter for the end character position of the text selected by      * possible multiple {@link #merged} chunks.      * @return the end character position considering possible {@link #merged}      * chunks.      */
specifier|public
name|int
name|getEndChar
parameter_list|()
block|{
return|return
name|merged
operator|==
literal|null
condition|?
name|chunk
operator|.
name|getEnd
argument_list|()
else|:
name|merged
operator|.
name|getEnd
argument_list|()
return|;
block|}
comment|/**      * If this chunk is processable      * @return the state      */
specifier|public
name|boolean
name|isProcessable
parameter_list|()
block|{
return|return
name|isProcessable
return|;
block|}
comment|/**      * Getter for the number of matchable tokens contained in this chunk      * @return The number of matchable tokens contained in this chunk      */
specifier|public
name|int
name|getMatchableCount
parameter_list|()
block|{
return|return
name|matchableCount
return|;
block|}
specifier|public
name|int
name|getStartTokenIndex
parameter_list|()
block|{
return|return
name|startToken
return|;
block|}
specifier|public
name|int
name|getEndTokenIndex
parameter_list|()
block|{
return|return
name|endToken
return|;
block|}
comment|/**      * The index of the first matchable Token within the {@link Chunk} or      *<code>-1</code> if none      * @return      */
specifier|public
name|int
name|getMatchableStart
parameter_list|()
block|{
return|return
name|matchableStart
return|;
block|}
comment|/**      * The index of the last matchable Token within the {@link Chunk} or      *<code>-1</code> if none      * @return      */
specifier|public
name|int
name|getMatchableEnd
parameter_list|()
block|{
return|return
name|matchableEnd
return|;
block|}
comment|/**      * The char index of the start character of the first matchable {@link Token}      * within the {@link Chunk} or<code>-1</code> if none.      * @return      */
specifier|public
name|int
name|getMatchableStartChar
parameter_list|()
block|{
return|return
name|matchableStartCharIndex
return|;
block|}
comment|/**      * the char indes of the end character of the last matchable {@link Token}      * within the {@link Chunk} or<code>-1</code> if none      * @return      */
specifier|public
name|int
name|getMatchableEndChar
parameter_list|()
block|{
return|return
name|matchableEndCharIndex
return|;
block|}
block|}
end_class

end_unit

