begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|PredicateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|FilterIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|TransformIterator
import|;
end_import

begin_comment
comment|/**  * An Entity as returned by the {@link EntitySearcher} interface.  * {@link EntitySearcher} implementations that do support rankings for  * entities SHOULD override the {@link #getEntityRanking()} method.  */
end_comment

begin_class
specifier|public
class|class
name|Entity
implements|implements
name|Comparable
argument_list|<
name|Entity
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Transformer
name|TRIPLE2OBJECT
init|=
operator|new
name|Transformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Triple
operator|)
name|input
operator|)
operator|.
name|getObject
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Predicate
name|PLAIN_LITERALS
init|=
name|PredicateUtils
operator|.
name|instanceofPredicate
argument_list|(
name|PlainLiteral
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Predicate
name|TYPED_LITERALS
init|=
name|PredicateUtils
operator|.
name|instanceofPredicate
argument_list|(
name|TypedLiteral
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Predicate
name|REFERENCES
init|=
name|PredicateUtils
operator|.
name|instanceofPredicate
argument_list|(
name|UriRef
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The URI of the Entity      */
specifier|protected
specifier|final
name|UriRef
name|uri
decl_stmt|;
comment|/**      * The data of the Entity. The graph is expected to contain all information      * of the entity by containing {@link Triple}s that use the {@link #uri} as      * {@link Triple#getSubject() subject}      */
specifier|protected
specifier|final
name|MGraph
name|data
decl_stmt|;
comment|/**      * Constructs a new Entity      * @param uri      * @param data      */
specifier|public
name|Entity
parameter_list|(
name|UriRef
name|uri
parameter_list|,
name|MGraph
name|data
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
specifier|final
name|UriRef
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
specifier|final
name|String
name|getId
parameter_list|()
block|{
return|return
name|uri
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|MGraph
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterator
argument_list|<
name|PlainLiteral
argument_list|>
name|getText
parameter_list|(
name|UriRef
name|field
parameter_list|)
block|{
return|return
operator|new
name|FilterIterator
argument_list|(
operator|new
name|TransformIterator
argument_list|(
name|data
operator|.
name|filter
argument_list|(
name|uri
argument_list|,
name|field
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TRIPLE2OBJECT
argument_list|)
argument_list|,
name|PLAIN_LITERALS
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|getReferences
parameter_list|(
name|UriRef
name|field
parameter_list|)
block|{
return|return
operator|new
name|FilterIterator
argument_list|(
operator|new
name|TransformIterator
argument_list|(
name|data
operator|.
name|filter
argument_list|(
name|uri
argument_list|,
name|field
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TRIPLE2OBJECT
argument_list|)
argument_list|,
name|REFERENCES
argument_list|)
return|;
block|}
comment|/**      * The ranking for the entity in the range [0..1] or<code>null</code>       * if not support.<p>      * This default implementation will returns<code>null</code>      * @return returns<code>null</code> as this default implementation      * does not support entity rankings      */
specifier|public
name|Float
name|getEntityRanking
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Uses the hascode of the {@link #getUri() URI}      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uri
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Checks if the two Entities do have the same {@link #getUri() URI}      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|Entity
operator|&&
operator|(
operator|(
name|Entity
operator|)
name|other
operator|)
operator|.
name|uri
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Entity[uri: "
argument_list|)
operator|.
name|append
argument_list|(
name|uri
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|entityRanking
init|=
name|getEntityRanking
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityRanking
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | ranking: "
argument_list|)
operator|.
name|append
argument_list|(
name|entityRanking
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Compares Entities based on their {@link #getUri()}      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Entity
name|other
parameter_list|)
block|{
return|return
name|uri
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|uri
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

