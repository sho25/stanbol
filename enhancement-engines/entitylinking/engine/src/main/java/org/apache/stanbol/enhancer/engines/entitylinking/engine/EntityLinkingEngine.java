begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|engine
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getAnalysedText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getLanguage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_CONTRIBUTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|EntitySearcherException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|LabelTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|LanguageProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|EntityLinker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|LinkedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|LinkedEntity
operator|.
name|Occurrence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Engine that consumes NLP processing results from the {@link AnalysedText}  * content part of processed {@link ContentItem}s and links them with  * Entities as provided by the configured {@link EntitySearcher} instance.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|EntityLinkingEngine
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityLinkingEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This is used to check the content type of parsed {@link ContentItem}s for      * plain text      */
specifier|protected
specifier|static
specifier|final
name|String
name|TEXT_PLAIN_MIMETYPE
init|=
literal|"text/plain"
decl_stmt|;
comment|/**      * Contains the only supported mime type {@link #TEXT_PLAIN_MIMETYPE}      */
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_MIMETYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|TEXT_PLAIN_MIMETYPE
argument_list|)
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine.      * This Engine creates TextAnnotations that should not be processed by other Engines.      * Therefore it uses a lower rank than {@link ServiceProperties#ORDERING_DEFAULT}      * to ensure that other engines do not get confused      */
specifier|public
specifier|static
specifier|final
name|Integer
name|DEFAULT_ORDER
init|=
name|ServiceProperties
operator|.
name|ORDERING_DEFAULT
operator|-
literal|10
decl_stmt|;
comment|/**      * The name of this engine      */
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
comment|/**      * The entitySearcher used for linking      */
specifier|protected
specifier|final
name|EntitySearcher
name|entitySearcher
decl_stmt|;
comment|/**      * configuration for entity linking      */
specifier|protected
specifier|final
name|EntityLinkerConfig
name|linkerConfig
decl_stmt|;
comment|/**      * The label tokenizer      */
specifier|protected
name|LabelTokenizer
name|labelTokenizer
decl_stmt|;
comment|/**      * The text processing configuration      */
specifier|protected
specifier|final
name|TextProcessingConfig
name|textProcessingConfig
decl_stmt|;
comment|/**      * The literalFactory used to create typed literals      */
specifier|private
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For this engine that means it is necessary to check if the used {@link ReferencedSite} can operate      * offline or not.      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      */
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      *       * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
comment|/**      * Internal Constructor used by {@link #createInstance(EntitySearcher, LanguageProcessingConfig, EntityLinkerConfig)}      * @param entitySearcher The component used to lookup Entities      * @param textProcessingConfig The configuration on how to use the {@link AnalysedText} content part of      * processed {@link ContentItem}s      * @param linkingConfig the configuration for the EntityLinker      */
specifier|public
name|EntityLinkingEngine
parameter_list|(
name|String
name|name
parameter_list|,
name|EntitySearcher
name|entitySearcher
parameter_list|,
name|TextProcessingConfig
name|textProcessingConfig
parameter_list|,
name|EntityLinkerConfig
name|linkingConfig
parameter_list|,
name|LabelTokenizer
name|labelTokenizer
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EnhancementEngine name MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|linkerConfig
operator|=
name|linkingConfig
operator|!=
literal|null
condition|?
name|linkingConfig
else|:
operator|new
name|EntityLinkerConfig
argument_list|()
expr_stmt|;
name|this
operator|.
name|textProcessingConfig
operator|=
name|textProcessingConfig
expr_stmt|;
name|this
operator|.
name|entitySearcher
operator|=
name|entitySearcher
expr_stmt|;
name|this
operator|.
name|labelTokenizer
operator|=
name|labelTokenizer
expr_stmt|;
block|}
comment|/**      * Getter for the {@link LabelTokenizer} used by this Engine      * @return the labelTokenizer      */
specifier|public
specifier|final
name|LabelTokenizer
name|getLabelTokenizer
parameter_list|()
block|{
return|return
name|labelTokenizer
return|;
block|}
comment|/**      * Setter for the {@link LabelTokenizer} used by this Engine      * @param labelTokenizer the labelTokenizer to set      */
specifier|public
specifier|final
name|void
name|setLabelTokenizer
parameter_list|(
name|LabelTokenizer
name|labelTokenizer
parameter_list|)
block|{
name|this
operator|.
name|labelTokenizer
operator|=
name|labelTokenizer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|DEFAULT_ORDER
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"canEnhancer {}"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOfflineMode
argument_list|()
operator|&&
operator|!
name|entitySearcher
operator|.
name|supportsOfflineMode
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"{} '{}' is inactive because EntitySearcher does not support Offline mode!"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|CANNOT_ENHANCE
return|;
block|}
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
operator|||
name|textProcessingConfig
operator|.
name|getConfiguration
argument_list|(
name|language
argument_list|)
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Engine {} ignores ContentItem {} becuase language {} is not condigured."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getName
argument_list|()
block|,
name|ci
operator|.
name|getUri
argument_list|()
block|,
name|language
block|}
argument_list|)
expr_stmt|;
return|return
name|CANNOT_ENHANCE
return|;
block|}
comment|//we need a detected language, the AnalyzedText contentPart with
comment|//Tokens.
name|AnalysedText
name|at
init|=
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|at
operator|!=
literal|null
operator|&&
name|at
operator|.
name|getTokens
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|?
name|ENHANCE_ASYNC
else|:
name|CANNOT_ENHANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|log
operator|.
name|trace
argument_list|(
literal|" enhance ci {}"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOfflineMode
argument_list|()
operator|&&
operator|!
name|entitySearcher
operator|.
name|supportsOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|"Offline mode is not supported by the used EntitySearcher!"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|AnalysedText
name|at
init|=
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> AnalysedText {}"
argument_list|,
name|at
argument_list|)
expr_stmt|;
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"computeEnhancements for ContentItem {} language {} text={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|language
block|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|at
operator|.
name|getSpan
argument_list|()
argument_list|,
literal|100
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"> Language {}"
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|LanguageProcessingConfig
name|languageConfig
init|=
name|textProcessingConfig
operator|.
name|getConfiguration
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|languageConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The language '"
operator|+
name|language
operator|+
literal|"' is not configured "
operator|+
literal|"to be processed by this Engine. As this is already checked within the "
operator|+
literal|"canEnhance(..) method this may indicate an bug in the used "
operator|+
literal|"EnhanceemntJobManager implementation!"
argument_list|)
throw|;
block|}
name|EntityLinker
name|entityLinker
init|=
operator|new
name|EntityLinker
argument_list|(
name|at
argument_list|,
name|language
argument_list|,
name|languageConfig
argument_list|,
name|entitySearcher
argument_list|,
name|linkerConfig
argument_list|,
name|labelTokenizer
argument_list|)
decl_stmt|;
comment|//process
try|try
block|{
name|entityLinker
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntitySearcherException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to link Entities with "
operator|+
name|entityLinker
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|"Unable to link Entities with "
operator|+
name|entityLinker
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//write results (requires a write lock)
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|writeEnhancements
argument_list|(
name|ci
argument_list|,
name|entityLinker
operator|.
name|getLinkedEntities
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Writes the Enhancements for the {@link LinkedEntity LinkedEntities}      * extracted from the parsed ContentItem      * @param ci      * @param linkedEntities      * @param language      */
specifier|private
name|void
name|writeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Collection
argument_list|<
name|LinkedEntity
argument_list|>
name|linkedEntities
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|Language
name|languageObject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languageObject
operator|=
operator|new
name|Language
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|UriRef
argument_list|>
name|dereferencedEntitis
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|LinkedEntity
name|linkedEntity
range|:
name|linkedEntities
control|)
block|{
name|Collection
argument_list|<
name|UriRef
argument_list|>
name|textAnnotations
init|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|(
name|linkedEntity
operator|.
name|getOccurrences
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//first create the TextAnnotations for the Occurrences
for|for
control|(
name|Occurrence
name|occurrence
range|:
name|linkedEntity
operator|.
name|getOccurrences
argument_list|()
control|)
block|{
name|Literal
name|startLiteral
init|=
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|getStart
argument_list|()
argument_list|)
decl_stmt|;
name|Literal
name|endLiteral
init|=
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
comment|//search for existing text annotation
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|ENHANCER_START
argument_list|,
name|startLiteral
argument_list|)
decl_stmt|;
name|UriRef
name|textAnnotation
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|filter
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ENHANCER_END
argument_list|,
name|endLiteral
argument_list|)
operator|.
name|hasNext
argument_list|()
operator|&&
name|metadata
operator|.
name|filter
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|textAnnotation
operator|=
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getSubject
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|textAnnotation
operator|==
literal|null
condition|)
block|{
comment|//not found ... create a new one
name|textAnnotation
operator|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_START
argument_list|,
name|startLiteral
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_END
argument_list|,
name|endLiteral
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occurrence
operator|.
name|getContext
argument_list|()
argument_list|,
name|languageObject
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occurrence
operator|.
name|getSelectedText
argument_list|()
argument_list|,
name|languageObject
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|linkedEntity
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//if existing add this engine as contributor
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_CONTRIBUTOR
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add dc:types (even to existing)
for|for
control|(
name|UriRef
name|dcType
range|:
name|linkedEntity
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|DC_TYPE
argument_list|,
name|dcType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|textAnnotations
operator|.
name|add
argument_list|(
name|textAnnotation
argument_list|)
expr_stmt|;
block|}
comment|//now the EntityAnnotations for the Suggestions
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|linkedEntity
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
name|UriRef
name|entityAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createEntityEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|//should we use the label used for the match, or search the
comment|//representation for the best label ... currently its the matched one
name|PlainLiteral
name|label
init|=
name|suggestion
operator|.
name|getBestLabel
argument_list|(
name|linkerConfig
operator|.
name|getNameField
argument_list|()
argument_list|,
name|language
argument_list|)
decl_stmt|;
name|Entity
name|entity
init|=
name|suggestion
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_ENTITY_LABEL
argument_list|,
name|label
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|ENHANCER_ENTITY_REFERENCE
argument_list|,
name|entity
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|suggestionTypes
init|=
name|entity
operator|.
name|getReferences
argument_list|(
name|linkerConfig
operator|.
name|getTypeField
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|suggestionTypes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_ENTITY_TYPE
argument_list|,
name|suggestionTypes
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|suggestion
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|UriRef
name|textAnnotation
range|:
name|textAnnotations
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|DC_RELATION
argument_list|,
name|textAnnotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add origin information of the EntiySearcher
for|for
control|(
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Collection
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|originInfo
range|:
name|entitySearcher
operator|.
name|getOriginInformation
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Resource
name|value
range|:
name|originInfo
operator|.
name|getValue
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|entityAnnotation
argument_list|,
name|originInfo
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//in case dereferencing of Entities is enabled we need also to
comment|//add the RDF data for entities
if|if
condition|(
name|linkerConfig
operator|.
name|isDereferenceEntitiesEnabled
argument_list|()
operator|&&
name|dereferencedEntitis
operator|.
name|add
argument_list|(
name|entity
operator|.
name|getUri
argument_list|()
argument_list|)
condition|)
block|{
comment|//not yet dereferenced
comment|//add all outgoing triples for this entity
comment|//NOTE: do not add all triples as there might be other data in the graph
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|entity
operator|.
name|getData
argument_list|()
operator|.
name|filter
argument_list|(
name|entity
operator|.
name|getUri
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|triples
operator|.
name|hasNext
argument_list|()
condition|;
name|metadata
operator|.
name|add
argument_list|(
name|triples
operator|.
name|next
argument_list|()
argument_list|)
control|)
empty_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

