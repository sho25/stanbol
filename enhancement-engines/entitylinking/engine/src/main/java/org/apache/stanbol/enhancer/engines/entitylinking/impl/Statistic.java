begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|Statistic
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|closedCount
init|=
literal|0
decl_stmt|;
name|boolean
name|started
init|=
literal|false
decl_stmt|;
name|long
name|start
decl_stmt|;
name|long
name|duration
decl_stmt|;
name|long
name|max
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|final
name|int
name|numPrint
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
decl_stmt|;
specifier|public
name|Statistic
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Statistic
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|numPrint
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|numPrint
operator|=
name|numPrint
expr_stmt|;
if|if
condition|(
name|numPrint
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|log
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|double
name|getDuration
parameter_list|()
block|{
return|return
name|this
operator|.
name|duration
operator|/
literal|1000000.0
return|;
block|}
specifier|public
name|void
name|begin
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|count
operator|--
expr_stmt|;
name|started
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|complete
parameter_list|()
block|{
if|if
condition|(
name|started
condition|)
block|{
name|long
name|end
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|closedCount
operator|++
expr_stmt|;
name|long
name|dif
init|=
operator|(
name|end
operator|-
name|start
operator|)
decl_stmt|;
name|duration
operator|=
name|duration
operator|+
name|dif
expr_stmt|;
if|if
condition|(
name|dif
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|dif
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dif
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|dif
expr_stmt|;
block|}
name|started
operator|=
literal|false
expr_stmt|;
block|}
comment|//else close without start ... ignore
if|if
condition|(
name|log
operator|!=
literal|null
operator|&&
name|numPrint
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|%
name|numPrint
operator|==
literal|0
condition|)
block|{
name|printStatistics
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getStatistics
parameter_list|()
block|{
name|int
name|count
init|=
name|this
operator|.
name|count
decl_stmt|;
name|int
name|closedCount
init|=
name|this
operator|.
name|closedCount
decl_stmt|;
name|double
name|duration
init|=
name|this
operator|.
name|duration
operator|/
literal|1000000.0
decl_stmt|;
name|double
name|max
init|=
name|this
operator|.
name|max
operator|/
literal|1000000.0
decl_stmt|;
name|double
name|min
init|=
name|this
operator|.
name|min
operator|/
literal|1000000.0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|duration
argument_list|)
operator|.
name|append
argument_list|(
literal|"ms ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"count: "
argument_list|)
operator|.
name|append
argument_list|(
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"time: "
argument_list|)
operator|.
name|append
argument_list|(
name|duration
operator|/
operator|(
name|double
operator|)
name|closedCount
argument_list|)
operator|.
name|append
argument_list|(
literal|"ms (max:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|max
argument_list|)
operator|.
name|append
argument_list|(
literal|", min:"
argument_list|)
operator|.
name|append
argument_list|(
name|min
argument_list|)
operator|.
name|append
argument_list|(
literal|")]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|printStatistics
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  - {}"
argument_list|,
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

