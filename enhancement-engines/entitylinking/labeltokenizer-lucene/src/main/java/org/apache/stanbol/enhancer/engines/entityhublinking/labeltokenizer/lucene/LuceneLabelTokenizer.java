begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entityhublinking
operator|.
name|labeltokenizer
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|LabelTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Service
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|LuceneLabelTokenizer
operator|.
name|PROPERTY_TOKENIZER_FACTORY
argument_list|,
name|value
operator|=
literal|"{full-qualified-class-name}"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|LabelTokenizer
operator|.
name|SUPPORTED_LANUAGES
argument_list|,
name|value
operator|=
literal|"{lang1},{lang2},!{lang3},{*}"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|LuceneLabelTokenizer
implements|implements
name|LabelTokenizer
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneLabelTokenizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EMPTY
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TOKENIZER_FACTORY
init|=
literal|"enhancer.engine.linking.labeltokenizer.lucene.tokenizerFactory"
decl_stmt|;
specifier|private
name|TokenizerFactory
name|tokenizerFactory
decl_stmt|;
specifier|private
name|LanguageConfiguration
name|langConf
init|=
operator|new
name|LanguageConfiguration
argument_list|(
name|SUPPORTED_LANUAGES
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
comment|//init the Solr TokenizerFactory
name|Object
name|value
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_TOKENIZER_FACTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_TOKENIZER_FACTORY
argument_list|,
literal|"The class name of the Lucene Tokemizer MUST BE configured"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|tokenizerFactoryClass
decl_stmt|;
try|try
block|{
name|tokenizerFactoryClass
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_TOKENIZER_FACTORY
argument_list|,
literal|"Unable to load the "
operator|+
literal|"class for the parsed name '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
name|Object
name|factoryObject
decl_stmt|;
try|try
block|{
name|factoryObject
operator|=
name|tokenizerFactoryClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_TOKENIZER_FACTORY
argument_list|,
literal|"Unable to instantiate the "
operator|+
literal|"class '"
operator|+
name|tokenizerFactoryClass
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_TOKENIZER_FACTORY
argument_list|,
literal|"Unable to instantiate the "
operator|+
literal|"class '"
operator|+
name|tokenizerFactoryClass
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|factoryObject
operator|instanceof
name|TokenizerFactory
condition|)
block|{
name|tokenizerFactory
operator|=
operator|(
name|TokenizerFactory
operator|)
name|factoryObject
expr_stmt|;
name|tokenizerFactory
operator|.
name|init
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"luceneMatchVersion"
argument_list|,
name|Version
operator|.
name|LUCENE_36
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_TOKENIZER_FACTORY
argument_list|,
literal|"The parsed class '"
operator|+
name|tokenizerFactoryClass
operator|+
literal|"' is not assignable to "
operator|+
name|TokenizerFactory
operator|.
name|class
argument_list|)
throw|;
block|}
comment|//init the language configuration
name|value
operator|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|LabelTokenizer
operator|.
name|SUPPORTED_LANUAGES
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|LabelTokenizer
operator|.
name|SUPPORTED_LANUAGES
argument_list|,
literal|"The language "
operator|+
literal|"configuration MUST BE present!"
argument_list|)
throw|;
block|}
name|langConf
operator|.
name|setConfiguration
argument_list|(
name|ctx
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|tokenizerFactory
operator|=
literal|null
expr_stmt|;
name|langConf
operator|.
name|setDefault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed label MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|language
operator|==
literal|null
operator|&&
name|langConf
operator|.
name|useWildcard
argument_list|()
operator|)
operator|||
name|langConf
operator|.
name|isLanguage
argument_list|(
name|language
argument_list|)
condition|)
block|{
if|if
condition|(
name|label
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|Tokenizer
name|tokenizer
init|=
name|tokenizerFactory
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|tokenizer
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|OffsetAttribute
name|offset
init|=
name|tokenizer
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|label
operator|.
name|substring
argument_list|(
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|,
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException while reading from a StringReader :("
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Language {} not configured to be supported"
argument_list|,
name|language
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

