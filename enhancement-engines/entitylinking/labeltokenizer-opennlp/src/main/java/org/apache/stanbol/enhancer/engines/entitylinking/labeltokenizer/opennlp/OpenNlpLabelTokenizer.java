begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|labeltokenizer
operator|.
name|opennlp
package|;
end_package

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|TokenizerME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|TokenizerModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|LabelTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of a LabelTokenizer based on OpenNLP that  * allows to configure custom Tokenizer models for specific  * languages.<p>  *<b>NOTE:</b> This component requires the optional dependency  * to<code>o.a.stanbol.commons.opennlp</code> as it dependes  * on the the {@link OpenNLP} service to retrieve {@link Tokenizer}   * and load {@link TokenizerModel}s.<p>  * This component registers itself with a service ranking of<code>-100</code>  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
operator|-
literal|100
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|LabelTokenizer
operator|.
name|SUPPORTED_LANUAGES
argument_list|,
name|value
operator|=
literal|"*"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|OpenNlpLabelTokenizer
implements|implements
name|LabelTokenizer
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenNlpLabelTokenizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_MODEL
init|=
literal|"model"
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|OpenNLP
name|openNlp
decl_stmt|;
specifier|public
name|OpenNlpLabelTokenizer
parameter_list|()
block|{}
specifier|public
name|OpenNlpLabelTokenizer
parameter_list|(
name|OpenNLP
name|openNLP
parameter_list|)
block|{
name|this
operator|.
name|openNlp
operator|=
name|openNLP
expr_stmt|;
block|}
specifier|private
name|LanguageConfiguration
name|languageConfig
init|=
operator|new
name|LanguageConfiguration
argument_list|(
name|LabelTokenizer
operator|.
name|SUPPORTED_LANUAGES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|languageConfig
operator|.
name|setConfiguration
argument_list|(
name|ctx
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|languageConfig
operator|.
name|setDefault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Label MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|languageConfig
operator|.
name|isLanguage
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|String
name|modelName
init|=
name|languageConfig
operator|.
name|getParameter
argument_list|(
name|language
argument_list|,
name|PARAM_MODEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|TokenizerModel
name|model
init|=
name|openNlp
operator|.
name|getModel
argument_list|(
name|TokenizerModel
operator|.
name|class
argument_list|,
name|modelName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenizerME
argument_list|(
name|model
argument_list|)
operator|.
name|tokenize
argument_list|(
name|label
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to load configured TokenizerModel '"
operator|+
name|modelName
operator|+
literal|"' for language '"
operator|+
name|language
operator|+
literal|"! Fallback to default Tokenizers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//fallback to the defaults
return|return
name|openNlp
operator|.
name|getTokenizer
argument_list|(
name|language
argument_list|)
operator|.
name|tokenize
argument_list|(
name|label
argument_list|)
return|;
block|}
else|else
block|{
comment|//language not configured
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

