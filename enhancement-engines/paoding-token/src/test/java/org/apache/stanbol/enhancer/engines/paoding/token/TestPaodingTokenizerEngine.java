begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|paoding
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|extras
operator|.
name|paoding
operator|.
name|Activator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|contentitem
operator|.
name|inmemory
operator|.
name|InMemoryContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|TestPaodingTokenizerEngine
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FAKE_BUNDLE_SYMBOLIC_NAME
init|=
literal|"FAKE_BUNDLE_SYMBOLIC_NAME"
decl_stmt|;
specifier|private
specifier|static
name|ContentItemFactory
name|contentItemFactory
decl_stmt|;
specifier|private
specifier|static
name|UriRef
name|id
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://www.example.org/contentItem1"
argument_list|)
decl_stmt|;
comment|/**      * Test text taken from the<a href ="http://zh.wikipedia.org/wiki/Barack_Obama">      * Chinese wikipedia side for Barack Obama</a>.      */
specifier|private
specifier|static
name|String
name|text
init|=
literal|"巴拉克·侯赛因·奥巴马二世，美国民主黨籍政治家，第44任美国总统，"
operator|+
literal|"為第一位非裔美国总统，同時擁有黑（盧歐族）白（英德爱混血）血统，於2008年初次當選美國總統，"
operator|+
literal|"並於2012年成功連任，。\n 奥巴马1961年出生於美国夏威夷州檀香山，童年和青少年時期分别在印尼和"
operator|+
literal|"夏威夷度过。1991年，奥巴马以优等生荣誉从哈佛法学院毕业。1996年，当选伊利诺州参议员。2000年，"
operator|+
literal|"競選美国众议院席位失败，后一直从事州参议员工作，且於2002年获得连任。2004年，"
operator|+
literal|"在美国民主党全国代表大会上发表主题演讲，因此成为全美知名的政界人物。同年11月，"
operator|+
literal|"以70%的选票当选代表伊利诺州的美国联邦参议员，是美國歷史上第五位有非裔血统的联邦参议员。"
decl_stmt|;
specifier|private
name|PaodingTokenizerEngine
name|engine
decl_stmt|;
specifier|private
name|ContentItem
name|contentItem
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_PAODING_DIC_PATH
init|=
name|File
operator|.
name|separatorChar
operator|+
literal|"target"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"paoding-dict"
decl_stmt|;
specifier|private
specifier|static
name|File
name|paodingDict
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initDataFileProvicer
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|==
literal|null
condition|?
literal|"."
else|:
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
name|paodingDict
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|TEST_PAODING_DIC_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paodingDict
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Activator
operator|.
name|initPaodingDictionary
argument_list|(
name|paodingDict
argument_list|,
name|TestPaodingTokenizerEngine
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|Activator
operator|.
name|DICT_ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Activator
operator|.
name|initPaodingDictHomeProperty
argument_list|(
name|paodingDict
argument_list|)
expr_stmt|;
name|contentItemFactory
operator|=
name|InMemoryContentItemFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|engine
operator|=
operator|new
name|PaodingTokenizerEngine
argument_list|()
expr_stmt|;
name|engine
operator|.
name|analysedTextFactory
operator|=
name|AnalysedTextFactory
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
literal|"paoding-token"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|activate
argument_list|(
operator|new
name|MockComponentContext
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|contentItem
operator|=
name|contentItemFactory
operator|.
name|createContentItem
argument_list|(
name|id
argument_list|,
operator|new
name|StringSource
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|//add an annotation that this is Japanese
name|contentItem
operator|.
name|getMetadata
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|id
argument_list|,
name|Properties
operator|.
name|DC_LANGUAGE
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"zh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngine
parameter_list|()
throws|throws
name|EngineException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EnhancementEngine
operator|.
name|ENHANCE_ASYNC
argument_list|,
name|engine
operator|.
name|canEnhance
argument_list|(
name|contentItem
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|computeEnhancements
argument_list|(
name|contentItem
argument_list|)
expr_stmt|;
comment|//assert the results
name|AnalysedText
name|at
init|=
name|AnalysedTextUtils
operator|.
name|getAnalysedText
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|at
operator|.
name|getTokens
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|//assert that tokens are present
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanUpServices
parameter_list|()
block|{
if|if
condition|(
name|engine
operator|!=
literal|null
condition|)
block|{
name|engine
operator|.
name|deactivate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|engine
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

