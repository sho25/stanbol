begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|restful
operator|.
name|langident
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_LANGUAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|DCTERMS_LINGUISTIC_SYSTEM
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequestInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpResponseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|params
operator|.
name|ClientPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|BasicScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|BasicHttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreConnectionPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreProtocolPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An enhancement engine that uses a RESTful service for NLP processing of  * the pain text content part of processed {@link ContentItem}s.<p>  * The RESTful API of the remote service is standardised by   *<a href="https://issues.apache.org/jira/browse/STANBOL-894">STANBOL-894</a><p>  *   * @author Rupert Westenthaler  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"changeme"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|RestfulLangidentEngine
operator|.
name|ANALYSIS_SERVICE_URL
argument_list|,
name|value
operator|=
literal|"http://changeme"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|RestfulLangidentEngine
operator|.
name|ANALYSIS_SERVICE_USER
argument_list|,
name|value
operator|=
literal|""
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|RestfulLangidentEngine
operator|.
name|ANALYSIS_SERVICE_PWD
argument_list|,
name|value
operator|=
literal|""
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|RestfulLangidentEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|IOException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|ServiceProperties
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|/**      * The URI for the remote analyses service      */
specifier|public
specifier|static
specifier|final
name|String
name|ANALYSIS_SERVICE_URL
init|=
literal|"enhancer.engine.restful.langident.service"
decl_stmt|;
comment|/**      * The User for the remote analyses service      */
specifier|public
specifier|static
specifier|final
name|String
name|ANALYSIS_SERVICE_USER
init|=
literal|"enhancer.engine.restful.langident.service.user"
decl_stmt|;
comment|/**      * The User for the remote analyses service      */
specifier|public
specifier|static
specifier|final
name|String
name|ANALYSIS_SERVICE_PWD
init|=
literal|"enhancer.engine.restful.langident.service.pwd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SERVICE_PROPERTIES
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|//by default register as Tokenizing engine
name|props
operator|.
name|put
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
name|ServiceProperties
operator|.
name|ORDERING_NLP_LANGAUGE_DETECTION
argument_list|)
expr_stmt|;
comment|//        props.put(NlpServiceProperties.ENHANCEMENT_ENGINE_NLP_ROLE,
comment|//            NlpProcessingRole.Tokenizing);
name|SERVICE_PROPERTIES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RestfulLangidentEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|URI
name|serviceUrl
decl_stmt|;
specifier|private
specifier|final
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|//JSON Parser
specifier|private
specifier|final
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|(
name|jsonFactory
argument_list|)
decl_stmt|;
comment|//HTTP client
specifier|protected
name|DefaultHttpClient
name|httpClient
decl_stmt|;
specifier|private
name|BasicHttpParams
name|httpParams
decl_stmt|;
specifier|private
name|PoolingClientConnectionManager
name|connectionManager
decl_stmt|;
comment|/**      * Indicate if this engine can enhance supplied ContentItem, and if it      * suggests enhancing it synchronously or asynchronously. The      * {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager} can       * force sync/async mode if desired, it is just a suggestion from the engine.      *<p/>      * Returns ENHANCE_ASYNC in case there is a text/plain content part and a tagger       * for the language identified for the content item, CANNOT_ENHANCE otherwise.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the introspecting process of the content item      *          fails      */
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// check if content is present
name|Map
operator|.
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|entry
init|=
name|getPlainText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"> can enhance ContentItem {} by processing blob {}"
argument_list|,
name|ci
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ENHANCE_ASYNC
return|;
block|}
comment|/**      * Compute enhancements for supplied ContentItem. The results of the process      * are expected to be stored in the metadata of the content item.      *<p/>      * The client (usually an {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager}) should take care of      * persistent storage of the enhanced {@link org.apache.stanbol.enhancer.servicesapi.ContentItem}.      *<p/>      * This method creates a new POSContentPart using {@link org.apache.stanbol.enhancer.engines.pos.api.POSTaggerHelper#createContentPart} from a text/plain part and      * stores it as a new part in the content item. The metadata is not changed.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the underlying process failed to work as      *          expected      */
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|//get the plain text Blob
name|Map
operator|.
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|textBlob
init|=
name|getPlainText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
name|textBlob
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//send the text to the server
name|HttpPost
name|request
init|=
operator|new
name|HttpPost
argument_list|(
name|serviceUrl
argument_list|)
decl_stmt|;
name|request
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
name|blob
operator|.
name|getStream
argument_list|()
argument_list|,
name|blob
operator|.
name|getContentLength
argument_list|()
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|blob
operator|.
name|getMimeType
argument_list|()
argument_list|,
name|blob
operator|.
name|getParameter
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//execute the request
name|List
argument_list|<
name|LangSuggestion
argument_list|>
name|detected
decl_stmt|;
try|try
block|{
name|detected
operator|=
name|httpClient
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|LangIdentResponseHandler
argument_list|(
name|ci
argument_list|,
name|objectMapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClientProtocolException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|"Exception while executing Request "
operator|+
literal|"on RESTful Language Identification Service at "
operator|+
name|serviceUrl
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|"Exception while executing Request "
operator|+
literal|"on RESTful Language Identification Service at "
operator|+
name|serviceUrl
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Detected Languages for ContentItem {} and Blob {}"
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//write TextAnnotations for the detected languages
for|for
control|(
name|LangSuggestion
name|suggestion
range|:
name|detected
control|)
block|{
comment|// add a hypothesis
name|log
operator|.
name|debug
argument_list|(
literal|"> {}@{}"
argument_list|,
name|suggestion
operator|.
name|getLanguage
argument_list|()
argument_list|,
name|suggestion
operator|.
name|hasProbability
argument_list|()
condition|?
name|suggestion
operator|.
name|getProbability
argument_list|()
else|:
literal|"-,--"
argument_list|)
expr_stmt|;
name|UriRef
name|textEnhancement
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textEnhancement
argument_list|,
name|DC_LANGUAGE
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|suggestion
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textEnhancement
argument_list|,
name|DC_TYPE
argument_list|,
name|DCTERMS_LINGUISTIC_SYSTEM
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|hasProbability
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textEnhancement
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|suggestion
operator|.
name|getProbability
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|LangIdentResponseHandler
implements|implements
name|ResponseHandler
argument_list|<
name|List
argument_list|<
name|LangSuggestion
argument_list|>
argument_list|>
block|{
specifier|protected
specifier|final
name|ContentItem
name|ci
decl_stmt|;
specifier|protected
specifier|final
name|JsonFactory
name|jsonFactory
decl_stmt|;
specifier|protected
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
specifier|protected
name|LangIdentResponseHandler
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|this
operator|.
name|ci
operator|=
name|ci
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|objectMapper
expr_stmt|;
name|this
operator|.
name|jsonFactory
operator|=
name|objectMapper
operator|.
name|getJsonFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|LangSuggestion
argument_list|>
name|handleResponse
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
throws|throws
name|ClientProtocolException
throws|,
name|IOException
block|{
name|StatusLine
name|statusLine
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|>=
literal|300
condition|)
block|{
name|EntityUtils
operator|.
name|consume
argument_list|(
name|entity
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HttpResponseException
argument_list|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
comment|//parse the results
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|entity
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|Charset
name|charset
init|=
name|entity
operator|.
name|getContentEncoding
argument_list|()
operator|!=
literal|null
condition|?
name|Charset
operator|.
name|forName
argument_list|(
name|entity
operator|.
name|getContentEncoding
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
else|:
name|UTF8
decl_stmt|;
comment|//parse the received data and add it to the AnalysedText of the
comment|//contentItem
name|JsonNode
name|root
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|jsonFactory
operator|.
name|createJsonParser
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|charset
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|LangSuggestion
argument_list|>
name|detected
init|=
operator|new
name|ArrayList
argument_list|<
name|LangSuggestion
argument_list|>
argument_list|(
operator|(
operator|(
name|ArrayNode
operator|)
name|root
operator|)
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|ArrayNode
operator|)
name|root
operator|)
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|lang
decl_stmt|;
name|double
name|prob
decl_stmt|;
name|JsonNode
name|entry
init|=
operator|(
operator|(
name|ArrayNode
operator|)
name|root
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isObject
argument_list|()
condition|)
block|{
name|JsonNode
name|field
init|=
name|entry
operator|.
name|path
argument_list|(
literal|"lang"
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isTextual
argument_list|()
condition|)
block|{
name|lang
operator|=
name|field
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to prsed LanguageIdent Service response! "
operator|+
literal|"The field 'lang' MUST BE presnet and have a textual value! "
operator|+
literal|"(entry: "
operator|+
name|entry
operator|+
literal|", received: "
operator|+
name|root
operator|+
literal|")!"
argument_list|)
throw|;
block|}
name|field
operator|=
name|entry
operator|.
name|path
argument_list|(
literal|"prob"
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isNumber
argument_list|()
condition|)
block|{
name|prob
operator|=
name|field
operator|.
name|asDouble
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|prob
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|detected
operator|.
name|add
argument_list|(
operator|new
name|LangSuggestion
argument_list|(
name|lang
argument_list|,
name|prob
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to prsed LanguageIdent Service response! "
operator|+
literal|"All members of the root Json Array MUST BE Json Objects "
operator|+
literal|"(received: "
operator|+
name|root
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
return|return
name|detected
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to prsed LanguageIdent Service response! "
operator|+
literal|" Root Element MUST BE an Json Array (received: "
operator|+
name|root
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|//ensure that the stream is closed
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|SERVICE_PROPERTIES
return|;
block|}
comment|/**      * Activate and read the properties. Configures and initialises a POSTagger for each language configured in      * CONFIG_LANGUAGES.      *      * @param ce the {@link org.osgi.service.component.ComponentContext}      */
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|IOException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"activate {} '{}'"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|ANALYSIS_SERVICE_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ANALYSIS_SERVICE_URL
argument_list|,
literal|"The RESTful Language Identification Service URL is missing in the provided configuration!"
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
name|serviceUrl
operator|=
operator|new
name|URI
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... service: {}"
argument_list|,
name|serviceUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ANALYSIS_SERVICE_URL
argument_list|,
literal|"The parsed RESTful Language Identification Service URL '"
operator|+
name|value
operator|+
literal|"'is not a valid URL!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|usr
decl_stmt|;
name|String
name|pwd
decl_stmt|;
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|ANALYSIS_SERVICE_USER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|usr
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|ANALYSIS_SERVICE_PWD
argument_list|)
expr_stmt|;
name|pwd
operator|=
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// no user set
name|usr
operator|=
literal|null
expr_stmt|;
name|pwd
operator|=
literal|null
expr_stmt|;
block|}
comment|//init the http client
name|httpParams
operator|=
operator|new
name|BasicHttpParams
argument_list|()
expr_stmt|;
name|httpParams
operator|.
name|setParameter
argument_list|(
name|CoreProtocolPNames
operator|.
name|USER_AGENT
argument_list|,
literal|"Apache Stanbol RESTful Language Identification Engine"
argument_list|)
expr_stmt|;
name|httpParams
operator|.
name|setBooleanParameter
argument_list|(
name|ClientPNames
operator|.
name|HANDLE_REDIRECTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|httpParams
operator|.
name|setIntParameter
argument_list|(
name|ClientPNames
operator|.
name|MAX_REDIRECTS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|httpParams
operator|.
name|setBooleanParameter
argument_list|(
name|CoreConnectionPNames
operator|.
name|SO_KEEPALIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connectionManager
operator|=
operator|new
name|PoolingClientConnectionManager
argument_list|()
expr_stmt|;
name|connectionManager
operator|.
name|setMaxTotal
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|connectionManager
operator|.
name|setDefaultMaxPerRoute
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|httpClient
operator|=
operator|new
name|DefaultHttpClient
argument_list|(
name|connectionManager
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
if|if
condition|(
name|usr
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  ... setting user to {}"
argument_list|,
name|usr
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|getCredentialsProvider
argument_list|()
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|usr
argument_list|,
name|pwd
argument_list|)
argument_list|)
expr_stmt|;
comment|// And add request interceptor to have preemptive authentication
name|httpClient
operator|.
name|addRequestInterceptor
argument_list|(
operator|new
name|PreemptiveAuthInterceptor
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
comment|//shutdown the Http Client
name|httpClient
operator|=
literal|null
expr_stmt|;
name|httpParams
operator|=
literal|null
expr_stmt|;
name|connectionManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|connectionManager
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the language of the content      * @param ci the ContentItem      * @param exception<code>false</code> id used in {@link #canEnhance(ContentItem)}      * and<code>true</code> when called from {@link #computeEnhancements(ContentItem)}      * @return the AnalysedText or<code>null</code> if not found.      * @throws IllegalStateException if exception is<code>true</code> and the      * language could not be retrieved from the parsed {@link ContentItem}.      */
specifier|public
specifier|static
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|getPlainText
parameter_list|(
name|EnhancementEngine
name|engine
parameter_list|,
name|ContentItem
name|ci
parameter_list|,
name|boolean
name|exception
parameter_list|)
block|{
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|textBlob
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|textBlob
operator|!=
literal|null
condition|)
block|{
return|return
name|textBlob
return|;
block|}
if|if
condition|(
name|exception
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to retrieve 'text/plain' ContentPart for ContentItem "
operator|+
name|ci
operator|+
literal|". As this is also checked in canEnhancer this may indicate an Bug in the "
operator|+
literal|"used EnhancementJobManager!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The Enhancement Engine '{} (impl: {})' CAN NOT enhance "
operator|+
literal|"ContentItem {} because no 'text/plain' ContentPart is "
operator|+
literal|"present in this ContentItem. Users that need to enhance "
operator|+
literal|"non-plain-text Content need to add an EnhancementEngine "
operator|+
literal|"that supports the conversion of '{}' files to plain text "
operator|+
literal|"to the current EnhancementChain!"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engine
operator|.
name|getName
argument_list|()
block|,
name|engine
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
block|,
name|ci
block|,
name|ci
operator|.
name|getMimeType
argument_list|()
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * HttpRequestInterceptor for preemptive authentication, based on httpclient      * 4.0 example      */
specifier|private
specifier|static
class|class
name|PreemptiveAuthInterceptor
implements|implements
name|HttpRequestInterceptor
block|{
specifier|public
name|void
name|process
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|AuthState
name|authState
init|=
operator|(
name|AuthState
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|ClientContext
operator|.
name|TARGET_AUTH_STATE
argument_list|)
decl_stmt|;
name|CredentialsProvider
name|credsProvider
init|=
operator|(
name|CredentialsProvider
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|ClientContext
operator|.
name|CREDS_PROVIDER
argument_list|)
decl_stmt|;
name|HttpHost
name|targetHost
init|=
operator|(
name|HttpHost
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|ExecutionContext
operator|.
name|HTTP_TARGET_HOST
argument_list|)
decl_stmt|;
comment|// If not auth scheme has been initialized yet
if|if
condition|(
name|authState
operator|.
name|getAuthScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|AuthScope
name|authScope
init|=
operator|new
name|AuthScope
argument_list|(
name|targetHost
operator|.
name|getHostName
argument_list|()
argument_list|,
name|targetHost
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// Obtain credentials matching the target host
name|Credentials
name|creds
init|=
name|credsProvider
operator|.
name|getCredentials
argument_list|(
name|authScope
argument_list|)
decl_stmt|;
comment|// If found, generate BasicScheme preemptively
if|if
condition|(
name|creds
operator|!=
literal|null
condition|)
block|{
name|authState
operator|.
name|update
argument_list|(
operator|new
name|BasicScheme
argument_list|()
argument_list|,
name|creds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

