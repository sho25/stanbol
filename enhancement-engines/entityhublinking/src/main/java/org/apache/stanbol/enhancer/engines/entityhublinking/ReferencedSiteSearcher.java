begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entityhublinking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|RDFTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ReferencedSiteSearcher
extends|extends
name|TrackingEntitySearcher
argument_list|<
name|Site
argument_list|>
implements|implements
name|EntitySearcher
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReferencedSiteSearcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|siteId
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|limit
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|Collection
argument_list|<
name|RDFTerm
argument_list|>
argument_list|>
name|originInfo
decl_stmt|;
name|Statistic
name|queryStats
init|=
operator|new
name|Statistic
argument_list|(
literal|"query"
argument_list|,
literal|100
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|Statistic
name|resultStats
init|=
operator|new
name|Statistic
argument_list|(
literal|"result"
argument_list|,
literal|1000
argument_list|,
name|log
argument_list|)
decl_stmt|;
specifier|public
name|ReferencedSiteSearcher
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|String
name|siteId
parameter_list|,
name|Integer
name|limit
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|siteId
argument_list|,
name|limit
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReferencedSiteSearcher
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|String
name|siteId
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|ServiceTrackerCustomizer
name|customizer
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|Site
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|SiteConfiguration
operator|.
name|ID
argument_list|,
name|siteId
argument_list|)
argument_list|,
name|customizer
argument_list|)
expr_stmt|;
name|this
operator|.
name|siteId
operator|=
name|siteId
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
operator|!=
literal|null
operator|&&
name|limit
operator|>
literal|0
condition|?
name|limit
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|originInfo
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
operator|new
name|IRI
argument_list|(
name|RdfResourceEnum
operator|.
name|site
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
operator|(
name|Collection
argument_list|<
name|RDFTerm
argument_list|>
operator|)
name|Collections
operator|.
name|singleton
argument_list|(
operator|(
name|RDFTerm
operator|)
operator|new
name|PlainLiteralImpl
argument_list|(
name|siteId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Entity
name|get
parameter_list|(
name|IRI
name|id
parameter_list|,
name|Set
argument_list|<
name|IRI
argument_list|>
name|fields
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
name|entity
decl_stmt|;
name|Site
name|site
init|=
name|getSearchService
argument_list|()
decl_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ReferencedSite "
operator|+
name|siteId
operator|+
literal|" is currently not available"
argument_list|)
throw|;
block|}
try|try
block|{
name|entity
operator|=
name|site
operator|.
name|getEntity
argument_list|(
name|id
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Exception while getting "
operator|+
name|id
operator|+
literal|" from the ReferencedSite "
operator|+
name|site
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|languageSet
decl_stmt|;
if|if
condition|(
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|languageSet
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|languages
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|languageSet
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|languages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|languageSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languages
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EntityhubEntity
argument_list|(
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|,
name|fields
argument_list|,
name|languageSet
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|?
extends|extends
name|Entity
argument_list|>
name|lookup
parameter_list|(
name|IRI
name|field
parameter_list|,
name|Set
argument_list|<
name|IRI
argument_list|>
name|includeFields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|search
parameter_list|,
name|String
index|[]
name|languages
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|Integer
name|offset
parameter_list|)
throws|throws
name|IllegalStateException
block|{
comment|//build the query and than return the result
name|Site
name|site
init|=
name|getSearchService
argument_list|()
decl_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ReferencedSite "
operator|+
name|siteId
operator|+
literal|" is currently not available"
argument_list|)
throw|;
block|}
name|queryStats
operator|.
name|begin
argument_list|()
expr_stmt|;
name|FieldQuery
name|query
init|=
name|EntitySearcherUtils
operator|.
name|createFieldQuery
argument_list|(
name|site
operator|.
name|getQueryFactory
argument_list|()
argument_list|,
name|field
argument_list|,
name|includeFields
argument_list|,
name|search
argument_list|,
name|languages
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|limit
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|limit
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setLimit
argument_list|(
name|this
operator|.
name|limit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|null
operator|&&
name|offset
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|setOffset
argument_list|(
name|offset
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|site
operator|.
name|find
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Exception while searchign for "
operator|+
name|search
operator|+
literal|'@'
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|languages
argument_list|)
operator|+
literal|"in the ReferencedSite "
operator|+
name|site
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|queryStats
operator|.
name|complete
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|languagesSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languages
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Entity
argument_list|>
name|entities
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Representation
name|result
range|:
name|results
control|)
block|{
name|resultStats
operator|.
name|begin
argument_list|()
expr_stmt|;
name|entities
operator|.
name|add
argument_list|(
operator|new
name|EntityhubEntity
argument_list|(
name|result
argument_list|,
literal|null
argument_list|,
name|languagesSet
argument_list|)
argument_list|)
expr_stmt|;
name|resultStats
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
return|return
name|entities
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsOfflineMode
parameter_list|()
block|{
name|Site
name|site
init|=
name|getSearchService
argument_list|()
decl_stmt|;
comment|//Do not throw an exception here if the site is not available. Just return false
return|return
name|site
operator|==
literal|null
condition|?
literal|false
else|:
name|site
operator|.
name|supportsLocalMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|IRI
argument_list|,
name|Collection
argument_list|<
name|RDFTerm
argument_list|>
argument_list|>
name|getOriginInformation
parameter_list|()
block|{
return|return
name|originInfo
return|;
block|}
block|}
end_class

end_unit

