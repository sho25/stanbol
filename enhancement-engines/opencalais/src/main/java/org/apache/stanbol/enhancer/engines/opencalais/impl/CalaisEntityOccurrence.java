begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opencalais
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * Stores the values extracted from the Calais entity data.  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  */
end_comment

begin_class
specifier|public
class|class
name|CalaisEntityOccurrence
block|{
specifier|public
name|Resource
name|id
decl_stmt|;
specifier|public
name|Resource
name|type
decl_stmt|;
specifier|public
name|String
name|name
decl_stmt|;
specifier|public
name|Integer
name|offset
decl_stmt|;
specifier|public
name|Integer
name|length
decl_stmt|;
specifier|public
name|String
name|exact
decl_stmt|;
specifier|public
name|String
name|context
decl_stmt|;
specifier|public
name|Double
name|relevance
init|=
operator|-
literal|1.0
decl_stmt|;
specifier|public
name|CalaisEntityOccurrence
parameter_list|()
block|{     }
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|tName
init|=
name|type
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|tName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|tName
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[id=%s, name=%s, exact=%s, type=%s, offset=%d, length=%d, context=\"%s\"]"
argument_list|,
name|id
argument_list|,
name|name
argument_list|,
name|exact
argument_list|,
name|type
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

