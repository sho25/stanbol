begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|textannotationnewmodel
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
operator|.
name|getBlob
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_HEAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_SUFFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_TAIL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|BlankNodeOrIRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|OPTIONAL
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"text-annotation-new-model"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|TextAnnotationsNewModelEngine
operator|.
name|PROPERTY_PREFIX_SUFFIX_SIZE
argument_list|,
name|intValue
operator|=
name|TextAnnotationsNewModelEngine
operator|.
name|DEFAULT_PREFIX_SUFFIX_SIZE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|TextAnnotationsNewModelEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextAnnotationsNewModelEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_PREFIX_SUFFIX_SIZE
init|=
literal|"enhancer.engines.textannotationnewmodel.prefixSuffixSize"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PREFIX_SUFFIX_SIZE
init|=
name|EnhancementEngineHelper
operator|.
name|DEFAULT_PREFIX_SUFFIX_LENGTH
decl_stmt|;
comment|// the order in which this engine is executed.
specifier|public
specifier|static
specifier|final
name|Integer
name|ENGINE_ORDER
init|=
name|ServiceProperties
operator|.
name|ORDERING_POST_PROCESSING
operator|-
literal|20
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|supportedMimeTypes
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
decl_stmt|;
specifier|private
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|int
name|prefixSuffixSize
decl_stmt|;
comment|/**      * Get the service properties (basically the engine order).      */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|ENGINE_ORDER
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * States whether can enhance the provided ContentItem.      */
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|contentItem
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|getBlob
argument_list|(
name|contentItem
argument_list|,
name|supportedMimeTypes
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|ENHANCE_ASYNC
return|;
block|}
else|else
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
block|}
comment|/**      * Computes the enhancements on the provided ContentItem.      */
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|contentItem
parameter_list|)
throws|throws
name|EngineException
block|{
name|Entry
argument_list|<
name|IRI
argument_list|,
name|Blob
argument_list|>
name|textBlob
init|=
name|getBlob
argument_list|(
name|contentItem
argument_list|,
name|supportedMimeTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|textBlob
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|language
init|=
name|EnhancementEngineHelper
operator|.
name|getLanguage
argument_list|(
name|contentItem
argument_list|)
decl_stmt|;
name|Language
name|lang
init|=
name|language
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Language
argument_list|(
name|language
argument_list|)
decl_stmt|;
name|String
name|text
decl_stmt|;
try|try
block|{
name|text
operator|=
name|ContentItemHelper
operator|.
name|getText
argument_list|(
name|textBlob
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|contentItem
argument_list|,
literal|"Unable to read Plain Text Blob"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Triple
argument_list|>
name|addedTriples
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Graph
name|metadata
init|=
name|contentItem
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
comment|//extract all the necessary information within a read lock
name|contentItem
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BlankNodeOrIRI
name|ta
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|boolean
name|hasPrefix
init|=
name|metadata
operator|.
name|filter
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_PREFIX
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|boolean
name|hasSuffix
init|=
name|metadata
operator|.
name|filter
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_SUFFIX
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|boolean
name|hasSelected
init|=
name|metadata
operator|.
name|filter
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasPrefix
operator|&&
name|hasSuffix
operator|&&
name|hasSelected
condition|)
block|{
continue|continue;
comment|//this TextAnnotation already uses the new model
block|}
name|Integer
name|start
decl_stmt|;
if|if
condition|(
operator|!
name|hasPrefix
condition|)
block|{
name|start
operator|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|metadata
argument_list|,
name|ta
argument_list|,
name|ENHANCER_START
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"unable to add fise:selection-prefix to TextAnnotation {} "
operator|+
literal|"because fise:start is not present"
argument_list|,
name|ta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"fise:start {} of TextAnnotation {}< 0! "
operator|+
literal|"Will not transform this TextAnnotation"
argument_list|,
name|start
argument_list|,
name|ta
argument_list|)
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|start
operator|=
literal|null
expr_stmt|;
block|}
name|Integer
name|end
decl_stmt|;
if|if
condition|(
operator|!
name|hasSuffix
condition|)
block|{
name|end
operator|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|metadata
argument_list|,
name|ta
argument_list|,
name|ENHANCER_END
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"unable to add fise:selection-suffix to TextAnnotation {} "
operator|+
literal|"because fise:end is not present"
argument_list|,
name|ta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|end
operator|>
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"fise:end {} of TextAnnotation {}> as the content length {}! "
operator|+
literal|"Will not transform this TextAnnotation"
argument_list|,
name|end
argument_list|,
name|ta
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|end
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|start
operator|!=
literal|null
operator|&&
name|end
operator|<
name|start
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"fise:end {}< fise:start {} of TextAnnotation {}! "
operator|+
literal|"Will not transform this TextAnnotation"
argument_list|,
name|end
argument_list|,
name|start
argument_list|,
name|ta
argument_list|)
expr_stmt|;
name|end
operator|=
literal|null
expr_stmt|;
name|start
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|end
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasPrefix
operator|&&
name|start
operator|!=
literal|null
condition|)
block|{
name|addedTriples
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_PREFIX
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|start
operator|-
name|prefixSuffixSize
argument_list|)
argument_list|,
name|start
argument_list|)
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasSuffix
operator|&&
name|end
operator|!=
literal|null
condition|)
block|{
name|addedTriples
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_SUFFIX
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|end
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|,
name|end
operator|+
name|prefixSuffixSize
argument_list|)
argument_list|)
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasSelected
operator|&&
name|start
operator|!=
literal|null
operator|&&
name|end
operator|!=
literal|null
condition|)
block|{
comment|//This adds missing fise:selected or fise:head/fise:tail if the selected text is to long
name|int
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|3
operator|*
name|prefixSuffixSize
condition|)
block|{
comment|//add prefix/suffix
name|addedTriples
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_HEAD
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|prefixSuffixSize
argument_list|)
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addedTriples
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_TAIL
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|end
operator|-
name|prefixSuffixSize
argument_list|,
name|end
argument_list|)
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//add missing fise:selected
name|String
name|selection
init|=
name|text
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|addedTriples
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|selection
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//check if we should also add an selection context
if|if
condition|(
operator|!
name|metadata
operator|.
name|filter
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addedTriples
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|EnhancementEngineHelper
operator|.
name|getSelectionContext
argument_list|(
name|text
argument_list|,
name|selection
argument_list|,
name|start
argument_list|)
argument_list|,
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|contentItem
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|//finally write the prefix/suffix triples within a write lock
if|if
condition|(
operator|!
name|addedTriples
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contentItem
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|metadata
operator|.
name|addAll
argument_list|(
name|addedTriples
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|contentItem
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|RuntimeException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_PREFIX_SUFFIX_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|prefixSuffixSize
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|prefixSuffixSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_PREFIX_SUFFIX_SIZE
argument_list|,
literal|"The value MUST be an Integer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|prefixSuffixSize
operator|=
name|DEFAULT_PREFIX_SUFFIX_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|prefixSuffixSize
operator|<
name|EnhancementEngineHelper
operator|.
name|MIN_PREFIX_SUFFIX_SIZE
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_PREFIX_SUFFIX_SIZE
argument_list|,
literal|"The prefixSuffixSize MUST BE>= "
operator|+
name|EnhancementEngineHelper
operator|.
name|MIN_PREFIX_SUFFIX_SIZE
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|prefixSuffixSize
operator|=
literal|0
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

