begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|keywordextraction
operator|.
name|linking
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_comment
comment|/**  * Abstract super class for EntitySearchers that need to track the OSGI service  * used to lookup Entities. Used by the {@link EntityhubSearcher} and the   * {@link ReferencedSiteSearcher} implementation  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TrackingEntitySearcher
parameter_list|<
name|T
parameter_list|>
implements|implements
name|EntitySearcher
block|{
specifier|private
name|ServiceTracker
name|searchServiceTracker
decl_stmt|;
comment|/**      * Creates a new instance for the parsed parameter      * @param context the BundleContexed used to create the {@link ServiceTracker}      * listening for the SearchService      * @param serviceClass      * @param filterEntries      */
specifier|protected
name|TrackingEntitySearcher
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|serviceClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterEntries
parameter_list|)
block|{
if|if
condition|(
name|filterEntries
operator|==
literal|null
operator|||
name|filterEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|searchServiceTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|filterString
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(&(objectclass=%s)"
argument_list|,
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterEntry
range|:
name|filterEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|filterEntry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filterEntry
operator|.
name|getKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|filterEntry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filterEntry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
name|filterEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|filterEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal filterEntry "
operator|+
name|filterEntry
operator|+
literal|". Both key and value MUST NOT be NULL nor emtpty!"
argument_list|)
throw|;
block|}
block|}
name|filterString
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|Filter
name|filter
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|context
operator|.
name|createFilter
argument_list|(
name|filterString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to build Filter for '%s' (class=%s,filter=%s)"
argument_list|,
name|filterString
argument_list|,
name|serviceClass
argument_list|,
name|filterEntries
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|searchServiceTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|searchServiceTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
comment|/**      * Getter for the Service used to search for Entities. If the service is      * currently not available, than this method will return<code>null</code>      * @return The service of<code>null</code> if not available      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|//type is ensured by OSGI
specifier|protected
name|T
name|getSearchService
parameter_list|()
block|{
if|if
condition|(
name|searchServiceTracker
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This TrackingEntitySearcher is already closed!"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|(
name|T
operator|)
name|searchServiceTracker
operator|.
name|getService
argument_list|()
return|;
block|}
block|}
comment|/**      * Closes the {@link ServiceTracker} used to track the service.      */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|searchServiceTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|searchServiceTracker
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

