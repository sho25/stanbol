begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|uimatotriples
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|caslight
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|caslight
operator|.
name|FeatureStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|caslight
operator|.
name|FeatureStructureListHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|uimatotriples
operator|.
name|tools
operator|.
name|FeatureFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|uimatotriples
operator|.
name|tools
operator|.
name|FeatureStructureFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|NoSuchPartException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_comment
comment|/**  * @author Mihaly Heder  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"UIMA To RDF triples Enhancement Engine"
argument_list|,
name|description
operator|=
literal|"Filters and converts UIMA Feature Structures to RDF Triples"
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"uimatotriples"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|UIMAToTriples
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ServiceProperties
operator|.
name|ORDERING_POST_PROCESSING
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|cardinality
operator|=
literal|1000
argument_list|,
name|label
operator|=
literal|"UIMA source names"
argument_list|,
name|description
operator|=
literal|"The name of the uima sources as defined in the UIMA Client Enhancement Engine"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|UIMA_SOURCENAMES
init|=
literal|"stanbol.engine.uimatotriples.sourcenames"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"uima.apache.org"
argument_list|,
name|label
operator|=
literal|"Content Part URI reference"
argument_list|,
name|description
operator|=
literal|"The URI Reference of the UIMA content part, as defined in the UIMA Client"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|UIMA_CONTENTPART_URIREF
init|=
literal|"stanbol.engine.uimatotriples.contentpart.uriref"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|cardinality
operator|=
literal|1000
argument_list|,
name|label
operator|=
literal|"UIMA annotations to process"
argument_list|,
name|description
operator|=
literal|"The UIMA type names enumerated here will be converted to triples. "
operator|+
literal|"You can filter by features, e.g TokenAnnotation;posTag=v.* will give you only "
operator|+
literal|"those TokenAnnotations which have a posTag and its value matches the "
operator|+
literal|"regexp 'v.*'. No other features will be converted. If you want to convert additional features, "
operator|+
literal|"enumerate them: TokenAnnotation;posTag=v.*;lemma this will also convert the lemma feature of "
operator|+
literal|"the filtered TokenAnnotations  "
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|UIMA_TYPENAMES
init|=
literal|"stanbol.engine.uimatotriples.typenames"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|cardinality
operator|=
literal|1000
argument_list|,
name|label
operator|=
literal|"UIMA type/feature name to RDF name mappings"
argument_list|,
name|description
operator|=
literal|"Syntax: oldName;newname . You can provide here a mapping according to which names should be translated to RDF."
operator|+
literal|"E.g. you might want to an UIMA posTag feature to appear as sso:posTag. You can give mappings for type"
operator|+
literal|"names as well as for feature names here."
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|UIMA_MAPPINGS
init|=
literal|"stanbol.engine.uimatotriples.mappings"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_MIMETYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"text/plain"
argument_list|,
literal|"text/html"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|String
name|uimaUri
decl_stmt|;
specifier|private
name|String
index|[]
name|sourceNames
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
decl_stmt|;
specifier|private
name|FeatureStructureFilter
name|tnfs
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|this
operator|.
name|sourceNames
operator|=
operator|(
name|String
index|[]
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_SOURCENAMES
argument_list|)
expr_stmt|;
name|this
operator|.
name|tnfs
operator|=
operator|new
name|FeatureStructureFilter
argument_list|()
expr_stmt|;
name|String
index|[]
name|typeNameStrings
init|=
operator|(
name|String
index|[]
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_TYPENAMES
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNameStrings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|typ
range|:
name|typeNameStrings
control|)
block|{
name|String
index|[]
name|mainparts
init|=
name|typ
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FeatureFilter
name|tnf
init|=
operator|new
name|FeatureFilter
argument_list|()
decl_stmt|;
name|tnf
operator|.
name|setTypeName
argument_list|(
name|mainparts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainparts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|tnfs
operator|.
name|addFeatureFilter
argument_list|(
name|tnf
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
index|[]
name|subParts
init|=
name|mainparts
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|subP
range|:
name|subParts
control|)
block|{
name|String
index|[]
name|subsubP
init|=
name|subP
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|subsubP
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|tnf
operator|.
name|addFeatureFilter
argument_list|(
name|subsubP
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|tnf
operator|.
name|addFeatureFilter
argument_list|(
name|subsubP
index|[
literal|0
index|]
argument_list|,
name|subsubP
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|tnfs
operator|.
name|addFeatureFilter
argument_list|(
name|tnf
argument_list|)
expr_stmt|;
block|}
block|}
name|mappings
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|mappingStings
init|=
operator|(
name|String
index|[]
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingStings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|map
range|:
name|mappingStings
control|)
block|{
name|String
index|[]
name|mainparts
init|=
name|map
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainparts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|mainparts
index|[
literal|0
index|]
argument_list|,
name|mainparts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Mapping string '"
argument_list|)
operator|.
name|append
argument_list|(
name|map
argument_list|)
operator|.
name|append
argument_list|(
literal|"' does not contain ';'. Skipping this mapping."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|uimaUri
operator|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|UIMA_CONTENTPART_URIREF
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|ENHANCE_SYNCHRONOUS
return|;
block|}
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|FeatureStructureListHolder
name|holder
decl_stmt|;
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|IRI
name|uimaIRI
init|=
operator|new
name|IRI
argument_list|(
name|uimaUri
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Trying to load holder for ref:"
argument_list|)
operator|.
name|append
argument_list|(
name|uimaUri
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|holder
operator|=
name|ci
operator|.
name|getPart
argument_list|(
name|uimaIRI
argument_list|,
name|FeatureStructureListHolder
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|source
range|:
name|sourceNames
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Processing UIMA source:"
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FeatureStructure
argument_list|>
name|sourceList
init|=
name|holder
operator|.
name|getFeatureStructureList
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceList
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"UIMA source:"
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
operator|.
name|append
argument_list|(
literal|" contains "
argument_list|)
operator|.
name|append
argument_list|(
name|sourceList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" annotations."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Source list is null:"
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|FeatureStructure
name|fs
range|:
name|sourceList
control|)
block|{
name|String
name|typeName
init|=
name|fs
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Checking "
argument_list|)
operator|.
name|append
argument_list|(
name|typeName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tnfs
operator|.
name|checkFeatureStructureAllowed
argument_list|(
name|typeName
argument_list|,
name|fs
operator|.
name|getFeatures
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Adding "
argument_list|)
operator|.
name|append
argument_list|(
name|typeName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|IRI
name|textAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|Graph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|String
name|uriRefStr
init|=
name|uimaUri
operator|+
literal|":"
operator|+
name|typeName
decl_stmt|;
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|uriRefStr
operator|=
name|mappings
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_TYPE
argument_list|,
operator|new
name|IRI
argument_list|(
name|uriRefStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|getFeature
argument_list|(
literal|"begin"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_START
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|fs
operator|.
name|getFeature
argument_list|(
literal|"begin"
argument_list|)
operator|.
name|getValueAsInteger
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|getFeature
argument_list|(
literal|"end"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_END
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|fs
operator|.
name|getFeature
argument_list|(
literal|"end"
argument_list|)
operator|.
name|getValueAsInteger
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|getCoveredText
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fs
operator|.
name|getCoveredText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|fs
operator|.
name|getCoveredText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Feature
name|f
range|:
name|fs
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"begin"
argument_list|)
operator|&&
operator|!
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"end"
argument_list|)
operator|&&
name|tnfs
operator|.
name|checkFeatureToConvert
argument_list|(
name|typeName
argument_list|,
name|f
argument_list|)
condition|)
block|{
name|String
name|predRefStr
init|=
name|uimaUri
operator|+
literal|":"
operator|+
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|predRefStr
operator|=
name|mappings
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IRI
name|predicate
init|=
operator|new
name|IRI
argument_list|(
name|predRefStr
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|predicate
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|f
operator|.
name|getValueAsString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchPartException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"No UIMA results found with ref:"
argument_list|)
operator|.
name|append
argument_list|(
name|uimaUri
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|defaultOrder
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

