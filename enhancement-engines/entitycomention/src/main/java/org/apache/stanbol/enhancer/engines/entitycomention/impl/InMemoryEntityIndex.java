begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycomention
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|LabelTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * EntitySearch implementation that does hold Entity information of mentioned  * Entities in memory.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|InMemoryEntityIndex
implements|implements
name|EntitySearcher
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryEntityIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|LabelTokenizer
name|tokenizer
decl_stmt|;
comment|//Holds Entity data
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Entity
argument_list|>
argument_list|>
name|index
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Entity
argument_list|>
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Entity
argument_list|>
name|entities
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|indexLanguages
decl_stmt|;
specifier|protected
name|String
name|language
decl_stmt|;
specifier|protected
name|UriRef
name|nameField
decl_stmt|;
specifier|public
name|InMemoryEntityIndex
parameter_list|(
name|LabelTokenizer
name|tokenizer
parameter_list|,
name|UriRef
name|nameField
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
name|this
operator|.
name|indexLanguages
operator|=
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|length
operator|<
literal|1
condition|?
name|Collections
operator|.
name|singleton
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
else|:
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languages
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|language
operator|=
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|length
operator|<
literal|1
condition|?
literal|null
else|:
name|languages
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|tokenizer
operator|=
name|tokenizer
expr_stmt|;
name|this
operator|.
name|nameField
operator|=
name|nameField
expr_stmt|;
block|}
specifier|public
name|void
name|addEntity
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> register {}"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
name|entities
operator|.
name|put
argument_list|(
name|entity
operator|.
name|getUri
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|PlainLiteral
argument_list|>
name|labels
init|=
name|entity
operator|.
name|getText
argument_list|(
name|nameField
argument_list|)
decl_stmt|;
while|while
condition|(
name|labels
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PlainLiteral
name|label
init|=
name|labels
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|lang
init|=
name|label
operator|.
name|getLanguage
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|label
operator|.
name|getLanguage
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexLanguages
operator|.
name|contains
argument_list|(
name|lang
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|token
range|:
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|label
operator|.
name|getLexicalForm
argument_list|()
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|token
operator|=
name|token
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Entity
argument_list|>
name|values
init|=
name|index
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else ignore labels in other languages
block|}
block|}
annotation|@
name|Override
specifier|public
name|Entity
name|get
parameter_list|(
name|UriRef
name|id
parameter_list|,
name|Set
argument_list|<
name|UriRef
argument_list|>
name|includeFields
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
throws|throws
name|IllegalStateException
block|{
return|return
name|entities
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|?
extends|extends
name|Entity
argument_list|>
name|lookup
parameter_list|(
name|UriRef
name|field
parameter_list|,
name|Set
argument_list|<
name|UriRef
argument_list|>
name|includeFields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|search
parameter_list|,
name|String
index|[]
name|languages
parameter_list|,
name|Integer
name|numResults
parameter_list|,
name|Integer
name|offset
parameter_list|)
throws|throws
name|IllegalStateException
block|{
comment|//this assumes that
assert|assert
name|nameField
operator|.
name|equals
argument_list|(
name|field
argument_list|)
assert|;
comment|//the nameField is the field
assert|assert
name|Arrays
operator|.
name|asList
argument_list|(
name|languages
argument_list|)
operator|.
name|contains
argument_list|(
name|language
argument_list|)
assert|;
comment|//the parsed languages include the language
comment|//NOTES:
comment|// We can ignore the following parameters
comment|// * includeFields: as we will return the Entities as added to the index
comment|//The Syntax requires to
comment|//  * AND over the tokenized elements of the search List
comment|//  * OR over the elements in the search
comment|//  * Elements that do match more search elements need to be ranked first
name|Map
argument_list|<
name|Entity
argument_list|,
name|int
index|[]
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|Entity
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|qe
range|:
name|search
control|)
block|{
name|Set
argument_list|<
name|Entity
argument_list|>
name|qeResult
init|=
name|join
argument_list|(
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|qe
argument_list|,
name|language
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Entity
name|e
range|:
name|qeResult
control|)
block|{
name|int
index|[]
name|count
init|=
name|results
operator|.
name|get
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|count
index|[
literal|0
index|]
operator|=
name|count
index|[
literal|0
index|]
operator|+
name|qe
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|put
argument_list|(
name|e
argument_list|,
operator|new
name|int
index|[]
block|{
name|qe
operator|.
name|length
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|//TODO how to create generic arrays
name|Entry
argument_list|<
name|Entity
argument_list|,
name|int
index|[]
argument_list|>
index|[]
name|resultArray
init|=
name|results
operator|.
name|entrySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|int
name|index
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
operator|&&
name|offset
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|index
operator|=
name|offset
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>=
name|resultArray
operator|.
name|length
condition|)
block|{
comment|//no more results
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|//final ranking
name|Arrays
operator|.
name|sort
argument_list|(
name|resultArray
argument_list|,
name|RESULT_SCORE_COMPARATOR
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|numResults
operator|+
literal|3
argument_list|,
operator|(
name|resultArray
operator|.
name|length
operator|-
name|index
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|lastScore
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|//start at the parsed offset
for|for
control|(
init|;
name|index
operator|<
name|resultArray
operator|.
name|length
operator|&&
operator|!
name|done
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|index
operator|<
name|numResults
condition|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|resultArray
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|(
name|numResults
operator|-
literal|1
operator|)
condition|)
block|{
comment|//memorize the score of the last included
name|lastScore
operator|=
name|resultArray
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastScore
operator|==
name|resultArray
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
condition|)
block|{
comment|//include additional results with the same score
name|resultList
operator|.
name|add
argument_list|(
name|resultArray
index|[
name|index
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//cut of
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|resultList
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|COLLECTION_SIZE_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c1
parameter_list|,
name|Collection
argument_list|<
name|?
argument_list|>
name|c2
parameter_list|)
block|{
return|return
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|?
literal|0
else|:
name|c1
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|c2
operator|==
literal|null
condition|?
literal|1
else|:
comment|//null values last
name|c2
operator|.
name|size
argument_list|()
operator|-
name|c1
operator|.
name|size
argument_list|()
return|;
comment|//lowest size first
block|}
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|Entity
argument_list|,
name|int
index|[]
argument_list|>
argument_list|>
name|RESULT_SCORE_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|Entity
argument_list|,
name|int
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|Entity
argument_list|,
name|int
index|[]
argument_list|>
name|e1
parameter_list|,
name|Entry
argument_list|<
name|Entity
argument_list|,
name|int
index|[]
argument_list|>
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|==
literal|null
operator|&&
name|e2
operator|==
literal|null
condition|?
literal|0
else|:
name|e1
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|e2
operator|==
literal|null
condition|?
literal|1
else|:
comment|//null values last
name|e1
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
operator|-
name|e2
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
return|;
comment|//highest score first!
block|}
block|}
decl_stmt|;
comment|/**      * Searches for Elements that do contain all the parsed Query Tokens      * @param queryTokens the query tokens. MUST NOT be NULL, empty or contain      * any NULL or empty string as element      * @return matching entities or an empty Set if none.      */
specifier|private
name|Set
argument_list|<
name|Entity
argument_list|>
name|join
parameter_list|(
name|String
modifier|...
name|queryTokens
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|//TODO: how to create a generic typed array
name|Collection
argument_list|<
name|Entity
argument_list|>
index|[]
name|tokenResults
init|=
operator|new
name|Collection
index|[
name|queryTokens
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryTokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Collection
argument_list|<
name|Entity
argument_list|>
name|tokenResult
init|=
name|index
operator|.
name|get
argument_list|(
name|queryTokens
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenResult
operator|==
literal|null
operator|||
name|tokenResult
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|tokenResults
index|[
name|i
index|]
operator|=
name|tokenResult
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entity
argument_list|>
name|join
init|=
operator|new
name|HashSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|tokenResults
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenResults
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|join
return|;
block|}
comment|//else we need to join the single results
comment|//we want to join the shortest results first
name|Arrays
operator|.
name|sort
argument_list|(
name|tokenResults
argument_list|,
name|COLLECTION_SIZE_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tokenResults
operator|.
name|length
operator|&&
operator|!
name|join
operator|.
name|isEmpty
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|Entity
argument_list|>
name|old
init|=
name|join
decl_stmt|;
name|join
operator|=
operator|new
name|HashSet
argument_list|<
name|Entity
argument_list|>
argument_list|()
expr_stmt|;
comment|//new set to add all elements
for|for
control|(
name|Iterator
argument_list|<
name|Entity
argument_list|>
name|it
init|=
name|tokenResults
index|[
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|old
operator|.
name|isEmpty
argument_list|()
condition|;
control|)
block|{
name|Entity
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|remove
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|join
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|join
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsOfflineMode
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Collection
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|getOriginInformation
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
end_class

end_unit

