begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycomention
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|CASE_SENSITIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_CASE_SENSITIVE_MATCHING_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_DEREFERENCE_ENTITIES_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_MATCHING_LANGUAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_MIN_TOKEN_SCORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEFAULT_SUGGESTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEREFERENCE_ENTITIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|DEREFERENCE_ENTITIES_FIELDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|MIN_TOKEN_SCORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|NAME_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|REDIRECT_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|REDIRECT_MODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|SUGGESTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|TYPE_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|TYPE_MAPPINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|DEFAULT_MIN_SEARCH_TOKEN_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|DEFAULT_PROCESS_ONLY_PROPER_NOUNS_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|MIN_SEARCH_TOKEN_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|PROCESSED_LANGUAGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
operator|.
name|PROCESS_ONLY_PROPER_NOUNS_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getAnalysedText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getLanguage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
operator|.
name|getReferences
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_CONTRIBUTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_RELATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_ENTITY_REFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|SERVICE_RANKING
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycomention
operator|.
name|impl
operator|.
name|ContentItemMentionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycomention
operator|.
name|impl
operator|.
name|InMemoryEntityIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|EntitySearcherException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|LabelTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|EntityLinkerConfig
operator|.
name|RedirectProcessingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|LanguageProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|config
operator|.
name|TextProcessingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|EntityLinker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|LinkedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|LinkedEntity
operator|.
name|Occurrence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Entity Co-Mentiaon Engine builds a local knowledge base already extracted  *<code>fise:TextAnnotation</code>s and suggested   *<code>fise:EntityAnnotation</code>s. This information are then used to perform  * an entity linking process. By doing so this engine will be able to detect  * Co-Mentions of Entities within the processed document.<p>  *   *   *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|// the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROPERTY_NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|CASE_SENSITIVE
argument_list|,
name|boolValue
operator|=
name|DEFAULT_CASE_SENSITIVE_MATCHING_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROCESS_ONLY_PROPER_NOUNS_STATE
argument_list|,
name|boolValue
operator|=
name|DEFAULT_PROCESS_ONLY_PROPER_NOUNS_STATE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROCESSED_LANGUAGES
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|value
operator|=
block|{
literal|"*;lmmtip;uc=LINK;prop=0.75;pprob=0.75"
block|,
comment|// link multiple matchable tokens in chunks; link upper case words
literal|"de;uc=MATCH"
block|,
comment|//in German all Nouns are upper case
literal|"es;lc=Noun"
block|,
comment|//the OpenNLP POS tagger for Spanish does not support ProperNouns
literal|"nl;lc=Noun"
block|}
argument_list|)
block|,
comment|//same for Dutch
comment|//@Property(name=DEFAULT_MATCHING_LANGUAGE,value=""), //will only be used when adding alt label support
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|EnhancementEngine
operator|.
name|class
argument_list|)
specifier|public
class|class
name|EntityCoMentionEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|ServiceProperties
block|{
comment|/**      * first of the post processing engines (note STANBOL-1218)      */
specifier|private
specifier|static
specifier|final
name|Integer
name|ENGINE_ORDERING
init|=
name|ServiceProperties
operator|.
name|ORDERING_POST_PROCESSING
operator|+
literal|80
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SERVICE_PROPERTIES
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
operator|(
name|Object
operator|)
name|ENGINE_ORDERING
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityCoMentionEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|NamespacePrefixService
name|prefixService
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|LabelTokenizer
name|labelTokenizer
decl_stmt|;
comment|//    private BundleContext bundleContext;
comment|/**      * EntityLinking configuration used for Co-Mention extractions      */
specifier|private
name|EntityLinkerConfig
name|linkerConfig
decl_stmt|;
comment|/**      * TextProcessingConfig used for Co-Mention extraction      */
specifier|private
name|TextProcessingConfig
name|textProcessingConfig
decl_stmt|;
comment|/**      * Default constructor as used by OSGI. This expects that       * {@link #activate(ComponentContext)} is called before usage      */
specifier|public
name|EntityCoMentionEngine
parameter_list|()
block|{     }
annotation|@
name|Activate
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"activate {}[name:{}]"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|//        bundleContext = ctx.getBundleContext();
comment|//extract TextProcessing and EnityLinking config from the provided properties
name|textProcessingConfig
operator|=
name|TextProcessingConfig
operator|.
name|createInstance
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|linkerConfig
operator|=
name|EntityLinkerConfig
operator|.
name|createInstance
argument_list|(
name|properties
argument_list|,
name|prefixService
argument_list|)
expr_stmt|;
comment|//some of the confiugration is predefined
name|linkerConfig
operator|.
name|setNameField
argument_list|(
name|CoMentionConstants
operator|.
name|CO_MENTION_LABEL_FIELD
argument_list|)
expr_stmt|;
name|linkerConfig
operator|.
name|setTypeField
argument_list|(
name|CoMentionConstants
operator|.
name|CO_MENTION_TYPE_FIELD
argument_list|)
expr_stmt|;
name|linkerConfig
operator|.
name|setMaxSuggestions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|//there should not be more as 5 suggestions
name|linkerConfig
operator|.
name|setMinFoundTokens
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//a single token is enough
name|linkerConfig
operator|.
name|setMinLabelScore
argument_list|(
literal|0.24
argument_list|)
expr_stmt|;
comment|//1/4 of the tokens
name|linkerConfig
operator|.
name|setMinMatchScore
argument_list|(
comment|//labelScore * token match factor
name|linkerConfig
operator|.
name|getMinLabelScore
argument_list|()
operator|*
name|linkerConfig
operator|.
name|getMinTokenMatchFactor
argument_list|()
argument_list|)
expr_stmt|;
name|linkerConfig
operator|.
name|setRedirectProcessingMode
argument_list|(
name|RedirectProcessingMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
comment|//remove all type mappings
name|linkerConfig
operator|.
name|setDefaultDcType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|mappedUris
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|(
name|linkerConfig
operator|.
name|getTypeMappings
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|UriRef
name|mappedUri
range|:
name|mappedUris
control|)
block|{
name|linkerConfig
operator|.
name|setTypeMapping
argument_list|(
name|mappedUri
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//get the metadata later set to the enhancement engine
block|}
comment|/**      * Deactivates this components.       */
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"deactivate {}[name:{}]"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|textProcessingConfig
operator|=
literal|null
expr_stmt|;
name|linkerConfig
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
operator|||
name|textProcessingConfig
operator|.
name|getConfiguration
argument_list|(
name|language
argument_list|)
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Engine {} ignores ContentItem {} becuase language {} is not condigured."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getName
argument_list|()
block|,
name|ci
operator|.
name|getUri
argument_list|()
block|,
name|language
block|}
argument_list|)
expr_stmt|;
return|return
name|CANNOT_ENHANCE
return|;
block|}
comment|//we need a detected language, the AnalyzedText contentPart with Tokens.
name|AnalysedText
name|at
init|=
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|at
operator|!=
literal|null
operator|&&
name|at
operator|.
name|getTokens
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|?
name|ENHANCE_ASYNC
else|:
name|CANNOT_ENHANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|AnalysedText
name|at
init|=
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LanguageProcessingConfig
name|languageConfig
init|=
name|textProcessingConfig
operator|.
name|getConfiguration
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|languageConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The language '"
operator|+
name|language
operator|+
literal|"' is not configured "
operator|+
literal|"to be processed by this Engine. As this is already checked within the "
operator|+
literal|"canEnhance(..) method this may indicate an bug in the used "
operator|+
literal|"EnhanceemntJobManager implementation!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"compute co-mentions for ContentItem {} language {}  text={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|language
block|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|at
operator|.
name|getSpan
argument_list|()
argument_list|,
literal|100
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
comment|//create the in-memory database for the mentioned Entities
name|ContentItemMentionBuilder
name|entityMentionIndex
init|=
operator|new
name|ContentItemMentionBuilder
argument_list|(
name|ci
argument_list|,
name|labelTokenizer
argument_list|,
name|language
argument_list|,
name|linkerConfig
operator|.
name|getDefaultLanguage
argument_list|()
argument_list|)
decl_stmt|;
name|EntityLinker
name|entityLinker
init|=
operator|new
name|EntityLinker
argument_list|(
name|at
argument_list|,
name|language
argument_list|,
name|languageConfig
argument_list|,
name|entityMentionIndex
argument_list|,
name|linkerConfig
argument_list|,
name|labelTokenizer
argument_list|,
name|entityMentionIndex
argument_list|)
decl_stmt|;
comment|//process
try|try
block|{
name|entityLinker
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntitySearcherException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to link Entities with "
operator|+
name|entityLinker
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|"Unable to link Entities with "
operator|+
name|entityLinker
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//TODO: write results
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|writeComentions
argument_list|(
name|ci
argument_list|,
name|entityLinker
operator|.
name|getLinkedEntities
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeComentions
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|Collection
argument_list|<
name|LinkedEntity
argument_list|>
name|comentions
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|Language
name|languageObject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languageObject
operator|=
operator|new
name|Language
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Write Co-Mentions:"
argument_list|)
expr_stmt|;
for|for
control|(
name|LinkedEntity
name|comention
range|:
name|comentions
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> {}"
argument_list|,
name|comention
argument_list|)
expr_stmt|;
comment|//URIs of TextAnnotations for the initial mention of this co-mention
name|Collection
argument_list|<
name|UriRef
argument_list|>
name|initialMentions
init|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|(
name|comention
operator|.
name|getOccurrences
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|comention
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
name|Entity
name|entity
init|=
name|suggestion
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getData
argument_list|()
operator|.
name|filter
argument_list|(
name|entity
operator|.
name|getUri
argument_list|()
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//this is a textAnnotation
name|initialMentions
operator|.
name|add
argument_list|(
name|entity
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//else TODO support also Entities!!
block|}
comment|//first create the TextAnnotations for the co-mention
for|for
control|(
name|Occurrence
name|occurrence
range|:
name|comention
operator|.
name|getOccurrences
argument_list|()
control|)
block|{
name|Literal
name|startLiteral
init|=
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|getStart
argument_list|()
argument_list|)
decl_stmt|;
name|Literal
name|endLiteral
init|=
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
comment|//search for existing text annotation
name|boolean
name|ignore
init|=
literal|false
decl_stmt|;
comment|//search for textAnnotations with the same end
name|UriRef
name|textAnnotation
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|ENHANCER_START
argument_list|,
name|startLiteral
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|end
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|metadata
argument_list|,
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ENHANCER_END
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|literalFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|!=
literal|null
operator|&&
name|metadata
operator|.
name|filter
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|textAnnotation
operator|=
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getSubject
argument_list|()
expr_stmt|;
if|if
condition|(
name|end
operator|>
name|occurrence
operator|.
name|getEnd
argument_list|()
condition|)
block|{
comment|// there is an other TextAnnotation selecting a bigger Span
comment|//so we should ignore this Occurrence
name|ignore
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|it
operator|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|ENHANCER_END
argument_list|,
name|endLiteral
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|start
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|metadata
argument_list|,
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ENHANCER_START
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|literalFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
operator|&&
name|metadata
operator|.
name|filter
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|textAnnotation
operator|=
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getSubject
argument_list|()
expr_stmt|;
if|if
condition|(
name|start
operator|<
name|occurrence
operator|.
name|getStart
argument_list|()
condition|)
block|{
comment|// there is an other TextAnnotation selecting a bigger Span
comment|//so we should ignore this Occurrence
name|ignore
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ignore
condition|)
block|{
comment|//collect confidence values of co-mentions
name|Double
name|maxConfidence
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|textAnnotation
operator|==
literal|null
condition|)
block|{
comment|//not found ... create a new TextAnnotation for the co-mention
name|textAnnotation
operator|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_START
argument_list|,
name|startLiteral
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_END
argument_list|,
name|endLiteral
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occurrence
operator|.
name|getContext
argument_list|()
argument_list|,
name|languageObject
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occurrence
operator|.
name|getSelectedText
argument_list|()
argument_list|,
name|languageObject
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//if existing add this engine as contributor
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_CONTRIBUTOR
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//consider the confidence value of the existing TextAnnotation
name|maxConfidence
operator|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|metadata
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|literalFactory
argument_list|)
expr_stmt|;
block|}
comment|//now process initial mention(s) for the co-mention
name|Set
argument_list|<
name|UriRef
argument_list|>
name|dcTypes
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UriRef
name|initialMention
range|:
name|initialMentions
control|)
block|{
comment|//get the dc:type(s) of the initial mentions
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|dcTypesIt
init|=
name|getReferences
argument_list|(
name|metadata
argument_list|,
name|initialMention
argument_list|,
name|DC_TYPE
argument_list|)
decl_stmt|;
while|while
condition|(
name|dcTypesIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dcTypes
operator|.
name|add
argument_list|(
name|dcTypesIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//check confidence of the initial one
name|Double
name|confidnece
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|metadata
argument_list|,
name|initialMention
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|literalFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|confidnece
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxConfidence
operator|==
literal|null
condition|)
block|{
name|maxConfidence
operator|=
name|confidnece
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxConfidence
operator|.
name|compareTo
argument_list|(
name|confidnece
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|maxConfidence
operator|=
name|confidnece
expr_stmt|;
block|}
block|}
comment|//add the suggestions of the initial mention to this one
name|Set
argument_list|<
name|Resource
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|suggestions
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|DC_RELATION
argument_list|,
name|initialMention
argument_list|)
init|;
name|suggestions
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|suggestions
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Resource
name|suggestion
range|:
name|values
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|(
name|NonLiteral
operator|)
name|suggestion
argument_list|,
name|DC_RELATION
argument_list|,
name|textAnnotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//finally link the co-mentation with the initial one
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_RELATION
argument_list|,
name|initialMention
argument_list|)
argument_list|)
expr_stmt|;
comment|//metadata.add(new TripleImpl(initialMention, DC_RELATION, textAnnotation));
block|}
comment|//finally add the collected dc:types of initial mentions to the textAnnotation
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|existingDcTypesIt
init|=
name|getReferences
argument_list|(
name|metadata
argument_list|,
name|textAnnotation
argument_list|,
name|DC_TYPE
argument_list|)
decl_stmt|;
while|while
condition|(
name|existingDcTypesIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//do not add existing
name|dcTypes
operator|.
name|remove
argument_list|(
name|existingDcTypesIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|UriRef
name|dcType
range|:
name|dcTypes
control|)
block|{
comment|//add missing
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_TYPE
argument_list|,
name|dcType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO: support also Entities
if|if
condition|(
name|maxConfidence
operator|!=
literal|null
condition|)
block|{
comment|//set the confidence value (if known)
name|EnhancementEngineHelper
operator|.
name|set
argument_list|(
name|metadata
argument_list|,
name|textAnnotation
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|maxConfidence
argument_list|,
name|literalFactory
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else ignore this occurence
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|SERVICE_PROPERTIES
return|;
block|}
block|}
end_class

end_unit

