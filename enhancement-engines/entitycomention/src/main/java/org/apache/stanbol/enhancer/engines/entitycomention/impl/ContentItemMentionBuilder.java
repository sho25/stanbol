begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycomention
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|RDF_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitycomention
operator|.
name|CoMentionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|LabelTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|entitylinking
operator|.
name|impl
operator|.
name|LinkingStateAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ContentItemMentionBuilder
extends|extends
name|InMemoryEntityIndex
implements|implements
name|LinkingStateAware
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContentItemMentionBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|ContentItem
name|ci
decl_stmt|;
comment|/**      * The last index notified via {@link #startToken(Token)}      */
specifier|private
name|Integer
name|lastIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|EntityMention
argument_list|>
argument_list|>
name|mentionIndex
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|EntityMention
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ContentItemMentionBuilder
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|LabelTokenizer
name|labelTokenizer
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
name|super
argument_list|(
name|labelTokenizer
argument_list|,
name|CoMentionConstants
operator|.
name|CO_MENTION_LABEL_FIELD
argument_list|,
name|languages
argument_list|)
expr_stmt|;
name|this
operator|.
name|ci
operator|=
name|ci
expr_stmt|;
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|initContext
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initContext
parameter_list|()
block|{
name|MGraph
name|m
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|m
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|ENHANCER_TEXTANNOTATION
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|UriRef
name|ta
init|=
operator|(
name|UriRef
operator|)
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|selectedText
init|=
name|EnhancementEngineHelper
operator|.
name|getString
argument_list|(
name|m
argument_list|,
name|ta
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedText
operator|!=
literal|null
condition|)
block|{
comment|//NOTE: Typically it is not possible to find co-mentions for Entities with a
comment|//      single Token, so can ignore those.
comment|//      The only exception would be to use proper-nouns for initial linking and
comment|//      Nouns for the co-mention resolution. In such cases this might result
comment|//      in additional extractions.
name|String
index|[]
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|selectedText
argument_list|,
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|//TODO make configurable
name|Double
name|confidence
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|m
argument_list|,
name|ta
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|lf
argument_list|)
decl_stmt|;
if|if
condition|(
name|confidence
operator|==
literal|null
operator|||
name|confidence
operator|>
literal|0.85
condition|)
block|{
comment|//TODO make configurable
name|Integer
name|start
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|m
argument_list|,
name|ta
argument_list|,
name|ENHANCER_START
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|lf
argument_list|)
decl_stmt|;
name|Integer
name|end
init|=
name|EnhancementEngineHelper
operator|.
name|get
argument_list|(
name|m
argument_list|,
name|ta
argument_list|,
name|ENHANCER_END
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|lf
argument_list|)
decl_stmt|;
name|registerMention
argument_list|(
operator|new
name|EntityMention
argument_list|(
name|ta
argument_list|,
name|m
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
name|DC_TYPE
argument_list|,
name|start
operator|!=
literal|null
operator|&&
name|end
operator|!=
literal|null
condition|?
operator|new
name|Integer
index|[]
block|{
name|start
block|,
name|end
block|}
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else confidence to low
block|}
comment|//else ignore Tokens with a single token
block|}
comment|// else no selected text
block|}
block|}
specifier|private
name|void
name|registerMention
parameter_list|(
name|EntityMention
name|entityMention
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> register {} "
argument_list|,
name|entityMention
argument_list|)
expr_stmt|;
if|if
condition|(
name|entityMention
operator|.
name|getStart
argument_list|()
operator|==
literal|null
operator|||
name|entityMention
operator|.
name|getStart
argument_list|()
operator|<
literal|0
condition|)
block|{
name|addEntity
argument_list|(
name|entityMention
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|EntityMention
argument_list|>
name|mentions
init|=
name|mentionIndex
operator|.
name|get
argument_list|(
name|entityMention
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mentions
operator|==
literal|null
condition|)
block|{
name|mentions
operator|=
operator|new
name|ArrayList
argument_list|<
name|EntityMention
argument_list|>
argument_list|()
expr_stmt|;
name|mentionIndex
operator|.
name|put
argument_list|(
name|entityMention
operator|.
name|getEnd
argument_list|()
argument_list|,
name|mentions
argument_list|)
expr_stmt|;
block|}
name|mentions
operator|.
name|add
argument_list|(
name|entityMention
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Everytime the entityLinker starts to process a token we need to check      * if we need to add additional contextual information from the {@link ContentItem}      * to the {@link InMemoryEntityIndex}      */
annotation|@
name|Override
specifier|public
name|void
name|startToken
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> start token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
specifier|final
name|Integer
name|actIndex
init|=
name|token
operator|.
name|getStart
argument_list|()
decl_stmt|;
if|if
condition|(
name|actIndex
operator|>
name|lastIndex
condition|)
block|{
for|for
control|(
name|Collection
argument_list|<
name|EntityMention
argument_list|>
name|mentions
range|:
name|mentionIndex
operator|.
name|subMap
argument_list|(
name|lastIndex
argument_list|,
name|actIndex
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|EntityMention
name|mention
range|:
name|mentions
control|)
block|{
name|addEntity
argument_list|(
name|mention
argument_list|)
expr_stmt|;
block|}
block|}
name|lastIndex
operator|=
name|actIndex
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastIndex
operator|>
name|actIndex
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Token {} has earlier start index as the last one {}!"
argument_list|,
name|token
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
comment|// else the same index ... ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|startSection
parameter_list|(
name|Section
name|sentence
parameter_list|)
block|{
comment|/* not used */
block|}
annotation|@
name|Override
specifier|public
name|void
name|endSection
parameter_list|(
name|Section
name|sentence
parameter_list|)
block|{
comment|/* not used */
block|}
annotation|@
name|Override
specifier|public
name|void
name|endToken
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
comment|/* not used */
block|}
block|}
end_class

end_unit

