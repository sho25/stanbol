begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_NLP_ROLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|TokenNameFinderModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpProcessingRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Apache Stanbol Enhancer Named Entity Recognition enhancement engine based on opennlp's Maximum Entropy  * models. In contrast to the {@link NamedEntityExtractionEnhancementEngine} this  * engine is intended to be used for custom build models.   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|label
operator|=
literal|"%stanbol.CustomNERModelEnhancementEngine.name"
argument_list|,
name|description
operator|=
literal|"%stanbol.CustomNERModelEnhancementEngine.description"
argument_list|)
annotation|@
name|Service
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"changeme"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|CustomNERModelEnhancementEngine
operator|.
name|NAME_FINDER_MODELS
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|value
operator|=
block|{
literal|"openNlp-namefinder-model-name.bin"
block|}
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|CustomNERModelEnhancementEngine
operator|.
name|NAMED_ENTITY_TYPE_MAPPINGS
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|value
operator|=
block|{
literal|"person> http://dbpedia.org/ontology/Person"
block|,
literal|"organization> http://dbpedia.org/ontology/Organisation"
block|,
literal|"location> http://dbpedia.org/ontology/Place"
block|}
argument_list|)
block|,
comment|//set the ranking of the default config to a negative value (ConfigurationPolicy.OPTIONAL)
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
operator|-
literal|100
argument_list|)
block|}
argument_list|)
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"openNLP"
argument_list|,
name|referenceInterface
operator|=
name|OpenNLP
operator|.
name|class
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|STATIC
argument_list|)
specifier|public
class|class
name|CustomNERModelEnhancementEngine
extends|extends
name|NEREngineCore
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CustomNERModelEnhancementEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Do hold the named entity type to dc:type value mappings as used for      * created fise:TextAnnotations. If a named entity type is not mapped than      * created fise:TextAnnotations will not have any dc:type values      */
specifier|public
specifier|static
specifier|final
name|String
name|NAMED_ENTITY_TYPE_MAPPINGS
init|=
literal|"stanbol.engines.opennlp-ner.typeMappings"
decl_stmt|;
comment|/**      * Allows to define the list of custom NER models      */
specifier|public
specifier|static
specifier|final
name|String
name|NAME_FINDER_MODELS
init|=
literal|"stanbol.engines.opennlp-ner.nameFinderModels"
decl_stmt|;
comment|/**      * The default value for the Execution of this Engine. Currently set to      * {@link ServiceProperties#ORDERING_CONTENT_EXTRACTION}      */
specifier|public
specifier|static
specifier|final
name|Integer
name|defaultOrder
init|=
name|ORDERING_CONTENT_EXTRACTION
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SERVICE_PROPERTIES
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sp
operator|.
name|put
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
name|defaultOrder
argument_list|)
expr_stmt|;
name|sp
operator|.
name|put
argument_list|(
name|ENHANCEMENT_ENGINE_NLP_ROLE
argument_list|,
name|NlpProcessingRole
operator|.
name|NamedEntityRecognition
argument_list|)
expr_stmt|;
name|SERVICE_PROPERTIES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Bind method of {@link NEREngineCore#openNLP}      * @param openNlp      */
specifier|protected
name|void
name|bindOpenNLP
parameter_list|(
name|OpenNLP
name|openNlp
parameter_list|)
block|{
name|this
operator|.
name|openNLP
operator|=
name|openNlp
expr_stmt|;
block|}
comment|/**      * Unbind method of {@link NEREngineCore#openNLP}      * @param openNLP      */
specifier|protected
name|void
name|unbindOpenNLP
parameter_list|(
name|OpenNLP
name|openNLP
parameter_list|)
block|{
name|this
operator|.
name|openNLP
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Reference
specifier|private
name|DataFileTracker
name|dataFileTracker
decl_stmt|;
specifier|private
name|DataFileListener
name|modelFileListener
decl_stmt|;
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|NEREngineConfig
argument_list|()
expr_stmt|;
name|config
operator|.
name|getDefaultModelTypes
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//this engine does not use default models
name|Object
name|value
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|NAMED_ENTITY_TYPE_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
comment|//support array
name|value
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
comment|//single value
name|value
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
comment|//and collection
name|log
operator|.
name|info
argument_list|(
literal|"Init Named Entity Type Mappings"
argument_list|)
expr_stmt|;
name|configs
label|:
for|for
control|(
name|Object
name|o
operator|:
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|usage
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"useage: "
argument_list|)
decl_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"'{namedEntityType}> {dc-type-uri}'"
argument_list|)
expr_stmt|;
name|String
index|[]
name|config
init|=
name|o
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|">"
argument_list|)
decl_stmt|;
name|String
name|namedEntityType
init|=
name|config
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|namedEntityType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid Type Mapping Config '{}': Missing namedEntityType ({}) -> ignore this config"
argument_list|,
name|o
argument_list|,
name|usage
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
if|if
condition|(
name|config
operator|.
name|length
operator|<
literal|2
operator|||
name|config
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid Type Mapping Config '{}': Missing dc:type URI '{}' ({}) -> ignore this config"
argument_list|,
name|o
argument_list|,
name|usage
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
name|String
name|dcTypeUri
init|=
name|config
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration after 2nd '>' gets ignored. Will use mapping '{}> {}' from config {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|namedEntityType
block|,
name|dcTypeUri
block|,
name|o
block|}
argument_list|)
expr_stmt|;
block|}
comment|//TODO support short names (ns:localName)
try|try
block|{
comment|//validate
operator|new
name|URI
argument_list|(
name|dcTypeUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid URI '{}' in Type Mapping Config '{}' -> ignore this config"
argument_list|,
name|dcTypeUri
argument_list|,
name|o
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
name|this
operator|.
name|config
operator|.
name|setMappedType
argument_list|(
name|namedEntityType
argument_list|,
operator|new
name|IRI
argument_list|(
name|dcTypeUri
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  add mapping {}> {}"
argument_list|,
name|namedEntityType
argument_list|,
name|dcTypeUri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No Type mappings configured"
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|NAME_FINDER_MODELS
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nameFinderModelNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|nameFinderModelNames
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|nameFinderModelNames
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//remove null
name|nameFinderModelNames
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//remove empty
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
for|for
control|(
name|Object
name|o
operator|:
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
control|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|nameFinderModelNames
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nameFinderModelNames
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//remove empty
block|}
end_class

begin_elseif
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//if a single String is parsed we support ',' as seperator
name|String
index|[]
name|languageArray
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|nameFinderModelNames
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languageArray
argument_list|)
argument_list|)
expr_stmt|;
name|nameFinderModelNames
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//remove null
name|nameFinderModelNames
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//remove empty
block|}
end_elseif

begin_else
else|else
block|{
comment|//no configuration
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|NAME_FINDER_MODELS
argument_list|,
literal|"Configurations for the "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" MUST HAVE at least a single custom "
operator|+
literal|"OpenNLP NameFinder model configured! Supported are comma separated "
operator|+
literal|"Strings, Arrays and Collections. Values are the file names of the "
operator|+
literal|"Modles. Models are Loaded via the Apache Stanbol DataFileProvider "
operator|+
literal|"Infrastructure (usually user wants to copy modles in the 'datafile' "
operator|+
literal|"directory under the {stanbol.home} directory - {working.dir}/stanbol"
operator|+
literal|"/datafiles)."
argument_list|)
throw|;
block|}
end_else

begin_comment
comment|//register the configured models with the DataFileTracker
end_comment

begin_expr_stmt
name|modelFileListener
operator|=
operator|new
name|NamedModelFileListener
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|modelProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|modelProperties
operator|.
name|put
argument_list|(
literal|"Description"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Statistical NameFinder (NER) model for OpenNLP as configured "
operator|+
literal|"for the %s (name: %s)"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|modelProperties
operator|.
name|put
argument_list|(
literal|"Model Type"
argument_list|,
name|TokenNameFinderModel
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|log
operator|.
name|info
argument_list|(
literal|" - register DataFileTracker for {}"
argument_list|,
name|nameFinderModelNames
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|String
name|modelName
range|:
name|nameFinderModelNames
control|)
block|{
name|dataFileTracker
operator|.
name|add
argument_list|(
name|modelFileListener
argument_list|,
name|modelName
argument_list|,
name|modelProperties
argument_list|)
expr_stmt|;
block|}
end_for

begin_function
unit|}      protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|dataFileTracker
operator|.
name|removeAll
argument_list|(
name|modelFileListener
argument_list|)
expr_stmt|;
comment|//remove all tracked files
name|config
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|SERVICE_PROPERTIES
return|;
block|}
end_function

begin_class
specifier|private
class|class
name|NamedModelFileListener
implements|implements
name|DataFileListener
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|registeredModels
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|available
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
name|TokenNameFinderModel
name|model
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - NER model {} is now available ..."
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|model
operator|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|TokenNameFinderModel
operator|.
name|class
argument_list|,
name|resourceName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//register the new model to the configuration
name|String
name|modelLang
init|=
name|model
operator|.
name|getLanguage
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - registered custom NameFinderModel from resource: {} for language: {} to {} (name:{})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|resourceName
block|,
name|model
operator|.
name|getLanguage
argument_list|()
block|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
block|,
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|String
name|currentLang
init|=
name|registeredModels
operator|.
name|remove
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentLang
operator|!=
literal|null
operator|&&
operator|!
name|modelLang
operator|.
name|equals
argument_list|(
name|currentLang
argument_list|)
condition|)
block|{
name|config
operator|.
name|removeCustomNameFinderModel
argument_list|(
name|currentLang
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|addCustomNameFinderModel
argument_list|(
name|modelLang
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|registeredModels
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|modelLang
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while loading custom TokenNameFinderModel model from resource "
operator|+
name|resourceName
operator|+
literal|". This model will NOT be available for the "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (name:"
operator|+
name|getName
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while loading custom TokenNameFinderModel model from resource "
operator|+
name|resourceName
operator|+
literal|". This model will NOT be available for the "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (name:"
operator|+
name|getName
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
comment|//keep tracking
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|unavailable
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|String
name|language
init|=
name|registeredModels
operator|.
name|remove
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"unregister custom NameFinderModel for resource: {} for language: {} to {} (name:{})"
operator|+
literal|"because the resource is no longer available via the DataFileProvider infrastructure."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|resource
block|,
name|language
block|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
block|,
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|config
operator|.
name|removeCustomNameFinderModel
argument_list|(
name|language
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
comment|//keep tracking
block|}
block|}
end_class

unit|}
end_unit

