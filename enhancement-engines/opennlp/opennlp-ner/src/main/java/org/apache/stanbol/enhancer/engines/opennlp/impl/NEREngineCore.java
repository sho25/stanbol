begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|NER_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_RELATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|DC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_CONFIDENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_SELECTION_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
operator|.
name|ENHANCER_START
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|NameFinderME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|TokenNameFinderModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentdetect
operator|.
name|SentenceDetectorME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentdetect
operator|.
name|SentenceModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedTextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Sentence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|ner
operator|.
name|NerTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Core of the NER EnhancementEngine(s), separated from the OSGi service to make   * it easier to test this.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|NEREngineCore
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|IOException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|TEXT_PLAIN_MIMETYPE
init|=
literal|"text/plain"
decl_stmt|;
comment|/**      * Contains the only supported mimetype {@link #TEXT_PLAIN_MIMETYPE}      */
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_MIMETYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|TEXT_PLAIN_MIMETYPE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|OpenNLP
name|openNLP
decl_stmt|;
specifier|protected
name|NEREngineConfig
name|config
decl_stmt|;
comment|/** Comments about our models */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|DATA_FILE_COMMENTS
decl_stmt|;
static|static
block|{
name|DATA_FILE_COMMENTS
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|DATA_FILE_COMMENTS
operator|.
name|put
argument_list|(
literal|"Default data files"
argument_list|,
literal|"provided by the org.apache.stanbol.defaultdata bundle"
argument_list|)
expr_stmt|;
block|}
comment|/**      * If used sub classes MUST ensure that {@link #openNLP} and {@link #config}      * are set before calling {@link #canEnhance(ContentItem)} or      * {@link #computeEnhancements(ContentItem)}      */
specifier|protected
name|NEREngineCore
parameter_list|()
block|{}
name|NEREngineCore
parameter_list|(
name|OpenNLP
name|openNLP
parameter_list|,
name|NEREngineConfig
name|config
parameter_list|)
throws|throws
name|InvalidFormatException
throws|,
name|IOException
block|{
if|if
condition|(
name|openNLP
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed OpenNLP instance MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed NER engine configuration MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|openNLP
operator|=
name|openNLP
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
name|NEREngineCore
parameter_list|(
name|DataFileProvider
name|dfp
parameter_list|,
name|NEREngineConfig
name|config
parameter_list|)
throws|throws
name|InvalidFormatException
throws|,
name|IOException
block|{
name|this
argument_list|(
operator|new
name|OpenNLP
argument_list|(
name|dfp
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|//first check the langauge before processing the content (text)
name|String
name|language
init|=
name|extractLanguage
argument_list|(
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to extract Language for "
operator|+
literal|"ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|": This is also checked in the canEnhance "
operator|+
literal|"method! -> This indicated an Bug in the implementation of the "
operator|+
literal|"EnhancementJobManager!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isNerModel
argument_list|(
name|language
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"For the language '"
operator|+
name|language
operator|+
literal|"' of ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|" no NER model is configured: This is also checked in the canEnhance "
operator|+
literal|"method! -> This indicated an Bug in the implementation of the "
operator|+
literal|"EnhancementJobManager!"
argument_list|)
throw|;
block|}
specifier|final
name|AnalysedText
name|at
init|=
name|AnalysedTextUtils
operator|.
name|getAnalysedText
argument_list|(
name|ci
argument_list|)
decl_stmt|;
comment|//validate data in the AnalysedText
specifier|final
name|String
name|text
decl_stmt|;
if|if
condition|(
name|at
operator|!=
literal|null
operator|&&
name|at
operator|.
name|getTokens
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//if the AnalysedText is present and tokens are present
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"computeEnhancements from AnalysedText ContentPart of ContentItem {}: text={}"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|at
operator|.
name|getSpan
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|text
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|//no AnalysedText with tokens ...
comment|//fallback to processing the plain text is still supported
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|contentPart
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPart
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No ContentPart with Mimetype '"
operator|+
name|TEXT_PLAIN_MIMETYPE
operator|+
literal|"' found for ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|": This is also checked in the canEnhance method! -> This "
operator|+
literal|"indicated an Bug in the implementation of the "
operator|+
literal|"EnhancementJobManager!"
argument_list|)
throw|;
block|}
try|try
block|{
name|text
operator|=
name|ContentItemHelper
operator|.
name|getText
argument_list|(
name|contentPart
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// TODO: make the length of the data a field of the ContentItem
comment|// interface to be able to filter out empty items in the canEnhance
comment|// method
name|log
operator|.
name|warn
argument_list|(
literal|"ContentPart {} of ContentItem {} does not contain any text"
operator|+
literal|"to extract knowledge from in ContentItem {}"
argument_list|,
name|contentPart
operator|.
name|getKey
argument_list|()
argument_list|,
name|ci
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"computeEnhancements from ContentPart {} of ContentItem {}: text={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|contentPart
operator|.
name|getKey
argument_list|()
block|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
block|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|text
argument_list|,
literal|100
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|config
operator|.
name|isProcessedLangage
argument_list|(
name|language
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|defaultModelType
range|:
name|config
operator|.
name|getDefaultModelTypes
argument_list|()
control|)
block|{
name|TokenNameFinderModel
name|nameFinderModel
init|=
name|openNLP
operator|.
name|getNameModel
argument_list|(
name|defaultModelType
argument_list|,
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameFinderModel
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No NER Model for {} and language {} available!"
argument_list|,
name|defaultModelType
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|findNamedEntities
argument_list|(
name|ci
argument_list|,
name|at
argument_list|,
name|text
argument_list|,
name|language
argument_list|,
name|nameFinderModel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//else do not use default models for languages other than the processed one
comment|//process for additional models
for|for
control|(
name|String
name|additionalModel
range|:
name|config
operator|.
name|getSpecificNerModles
argument_list|(
name|language
argument_list|)
control|)
block|{
name|TokenNameFinderModel
name|nameFinderModel
decl_stmt|;
try|try
block|{
name|nameFinderModel
operator|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|TokenNameFinderModel
operator|.
name|class
argument_list|,
name|additionalModel
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|findNamedEntities
argument_list|(
name|ci
argument_list|,
name|at
argument_list|,
name|text
argument_list|,
name|language
argument_list|,
name|nameFinderModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to load TokenNameFinderModel model for language '"
operator|+
name|language
operator|+
literal|"' (model: "
operator|+
name|additionalModel
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while creating ChunkerModel for language '"
operator|+
name|language
operator|+
literal|"' (model: "
operator|+
name|additionalModel
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|findNamedEntities
parameter_list|(
specifier|final
name|ContentItem
name|ci
parameter_list|,
specifier|final
name|AnalysedText
name|at
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|lang
parameter_list|,
specifier|final
name|TokenNameFinderModel
name|nameFinderModel
parameter_list|)
block|{
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed ContentItem MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|at
operator|==
literal|null
operator|&&
name|text
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL was parsed as AnalysedText AND Text for content item "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|". One of the two MUST BE present! -> call ignored"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Language
name|language
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
operator|!
name|lang
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|language
operator|=
operator|new
name|Language
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|language
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"findNamedEntities model={},  language={}, text="
argument_list|,
operator|new
name|Object
index|[]
block|{
name|nameFinderModel
block|,
name|language
block|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|at
operator|!=
literal|null
condition|?
name|at
operator|.
name|getSpan
argument_list|()
else|:
name|text
argument_list|,
literal|100
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|MGraph
name|g
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|entityNames
decl_stmt|;
if|if
condition|(
name|at
operator|!=
literal|null
condition|)
block|{
name|entityNames
operator|=
name|extractNameOccurrences
argument_list|(
name|nameFinderModel
argument_list|,
name|at
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entityNames
operator|=
name|extractNameOccurrences
argument_list|(
name|nameFinderModel
argument_list|,
name|text
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
comment|//lock the ContentItem while writing the RDF data for found Named Entities
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|UriRef
argument_list|>
name|previousAnnotations
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|nameInContext
range|:
name|entityNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|nameInContext
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NameOccurrence
argument_list|>
name|occurrences
init|=
name|nameInContext
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|UriRef
name|firstOccurrenceAnnotation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|NameOccurrence
name|occurrence
range|:
name|occurrences
control|)
block|{
name|UriRef
name|textAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|name
argument_list|,
name|language
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_SELECTION_CONTEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|occurrence
operator|.
name|context
argument_list|,
name|language
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|occurrence
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_TYPE
argument_list|,
name|occurrence
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_CONFIDENCE
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|confidence
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|occurrence
operator|.
name|start
operator|!=
literal|null
operator|&&
name|occurrence
operator|.
name|end
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_START
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|ENHANCER_END
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|occurrence
operator|.
name|end
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add the subsumption relationship among occurrences of the same
comment|// name
if|if
condition|(
name|firstOccurrenceAnnotation
operator|==
literal|null
condition|)
block|{
comment|// check already extracted annotations to find a first most
comment|// specific occurrence
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UriRef
argument_list|>
name|entry
range|:
name|previousAnnotations
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// we have found a most specific previous
comment|// occurrence, use it as subsumption target
name|firstOccurrenceAnnotation
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_RELATION
argument_list|,
name|firstOccurrenceAnnotation
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|firstOccurrenceAnnotation
operator|==
literal|null
condition|)
block|{
comment|// no most specific previous occurrence, I am the first,
comment|// most specific occurrence to be later used as a target
name|firstOccurrenceAnnotation
operator|=
name|textAnnotation
expr_stmt|;
name|previousAnnotations
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|textAnnotation
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// I am referring to a most specific first occurrence of the
comment|// same name
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DC_RELATION
argument_list|,
name|firstOccurrenceAnnotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|extractPersonNames
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|extractPersonNames
argument_list|(
name|text
argument_list|,
literal|"en"
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|extractPersonNames
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
return|return
name|extractNames
argument_list|(
name|getNameModel
argument_list|(
literal|"person"
argument_list|,
name|lang
argument_list|)
argument_list|,
name|text
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|extractLocationNames
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|extractLocationNames
argument_list|(
name|text
argument_list|,
literal|"en"
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|extractLocationNames
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
return|return
name|extractNames
argument_list|(
name|getNameModel
argument_list|(
literal|"location"
argument_list|,
name|lang
argument_list|)
argument_list|,
name|text
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|extractOrganizationNames
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|extractOrganizationNames
argument_list|(
name|text
argument_list|,
literal|"en"
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|extractOrganizationNames
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
return|return
name|extractNames
argument_list|(
name|getNameModel
argument_list|(
literal|"organization"
argument_list|,
name|lang
argument_list|)
argument_list|,
name|text
argument_list|)
return|;
block|}
comment|/**      * extracts the PersonName occurrences for English language texts      * @param text      * @return      * @deprecated use {@link #extractLocationNameOccurrences(String,String)} instead      */
annotation|@
name|Deprecated
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractPersonNameOccurrences
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|this
operator|.
name|extractPersonNameOccurrences
argument_list|(
name|text
argument_list|,
literal|"en"
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractPersonNameOccurrences
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
return|return
name|extractNameOccurrences
argument_list|(
name|getNameModel
argument_list|(
literal|"person"
argument_list|,
name|lang
argument_list|)
argument_list|,
name|text
argument_list|,
name|lang
argument_list|)
return|;
block|}
comment|/**      * extracts the LocationName occurrences for English language texts      * @param text      * @return      * @deprecated use {@link #extractLocationNameOccurrences(String,String)} instead      */
annotation|@
name|Deprecated
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractLocationNameOccurrences
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|extractLocationNameOccurrences
argument_list|(
name|text
argument_list|,
literal|"en"
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractLocationNameOccurrences
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
return|return
name|extractNameOccurrences
argument_list|(
name|getNameModel
argument_list|(
literal|"location"
argument_list|,
name|lang
argument_list|)
argument_list|,
name|text
argument_list|,
name|lang
argument_list|)
return|;
block|}
comment|/**      * extracts the OrganizationName occurrences for English language texts      * @param text      * @return      * @deprecated use {@link #extractOrganizationNamesOccurrences(String,String)} instead      */
annotation|@
name|Deprecated
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractOrganizationNameOccurrences
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|extractOrganizationNameOccurrences
argument_list|(
name|text
argument_list|,
literal|"en"
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractOrganizationNameOccurrences
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
return|return
name|extractNameOccurrences
argument_list|(
name|getNameModel
argument_list|(
literal|"organization"
argument_list|,
name|lang
argument_list|)
argument_list|,
name|text
argument_list|,
name|lang
argument_list|)
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|extractNames
parameter_list|(
name|TokenNameFinderModel
name|nameFinderModel
parameter_list|,
name|String
name|text
parameter_list|)
block|{
return|return
name|extractNameOccurrences
argument_list|(
name|nameFinderModel
argument_list|,
name|text
argument_list|,
name|nameFinderModel
operator|.
name|getLanguage
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Gets/builds a TokenNameFinderModel by using {@link #openNLP} and throws      * {@link IllegalStateException}s in case the model could not be built or      * the data for the model where not found.      * @param the type of the named finder model      * @param language the language for the model      * @return the model or an {@link IllegalStateException} if not available      */
specifier|private
name|TokenNameFinderModel
name|getNameModel
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|language
parameter_list|)
block|{
try|try
block|{
name|TokenNameFinderModel
name|model
init|=
name|openNLP
operator|.
name|getNameModel
argument_list|(
name|type
argument_list|,
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
return|return
name|model
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to built Model for extracting %s from '%s' language "
operator|+
literal|"texts because the model data could not be loaded."
argument_list|,
name|type
argument_list|,
name|language
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to built Model for extracting %s from '%s' language texts."
argument_list|,
name|type
argument_list|,
name|language
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to built Model for extracting %s from '%s' language texts."
argument_list|,
name|type
argument_list|,
name|language
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Loads the {@link SentenceModel} for the parsed language or      * English as fallback if one for the language is not available      * @param language      * @return      */
specifier|private
name|SentenceModel
name|getSentenceModel
parameter_list|(
name|String
name|language
parameter_list|)
block|{
try|try
block|{
name|SentenceModel
name|model
init|=
name|openNLP
operator|.
name|getSentenceModel
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
return|return
name|model
return|;
block|}
else|else
block|{
comment|//fallback to english
name|log
operator|.
name|info
argument_list|(
literal|"No sentence detection modle for {}. fallback to English"
argument_list|)
expr_stmt|;
name|model
operator|=
name|openNLP
operator|.
name|getSentenceModel
argument_list|(
literal|"en"
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to built Model for extracting sentences neither for '%s' "
operator|+
literal|"nor the fallback language 'en'."
argument_list|,
name|language
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|model
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to built Model for extracting sentences from '%s' language texts."
argument_list|,
name|language
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to built Model for extracting sentences from '%s' language texts."
argument_list|,
name|language
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * THis method extracts NamedEntity occurrences by using existing {@link Token}s and       * {@link Sentence}s in the parsed {@link AnalysedText}.      * @param nameFinderModel the model used to find NamedEntities      * @param at the Analysed Text      * @param language the language of the text      * @return the found named Entity Occurrences      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractNameOccurrences
parameter_list|(
name|TokenNameFinderModel
name|nameFinderModel
parameter_list|,
name|AnalysedText
name|at
parameter_list|,
name|String
name|language
parameter_list|)
block|{
comment|// version with explicit sentence endings to reflect heading / paragraph
comment|// structure of an HTML or PDF document converted to text
name|NameFinderME
name|finder
init|=
operator|new
name|NameFinderME
argument_list|(
name|nameFinderModel
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|nameOccurrences
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sentences
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
comment|//Holds the tokens of the previouse (pos 0) current (pos 1) and next (pos 2) sentence
name|AnalysedTextUtils
operator|.
name|appandToList
argument_list|(
name|at
operator|.
name|getSentences
argument_list|()
argument_list|,
name|sentences
argument_list|)
expr_stmt|;
if|if
condition|(
name|sentences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//no sentence annotations
name|sentences
operator|.
name|add
argument_list|(
name|at
argument_list|)
expr_stmt|;
comment|//process as a single section
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sentences
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sentence
init|=
name|sentences
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSpan
argument_list|()
decl_stmt|;
comment|// build a context by concatenating three sentences to be used for
comment|// similarity ranking / disambiguation + contextual snippet in the
comment|// extraction structure
name|List
argument_list|<
name|String
argument_list|>
name|contextElements
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|contextElements
operator|.
name|add
argument_list|(
name|sentence
argument_list|)
expr_stmt|;
comment|//three sentences as context
name|String
name|context
init|=
name|at
operator|.
name|getSpan
argument_list|()
operator|.
name|substring
argument_list|(
name|sentences
operator|.
name|get
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|getStart
argument_list|()
argument_list|,
name|sentences
operator|.
name|get
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|sentences
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
comment|// get the tokens, words of the current sentence
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Token
argument_list|>
name|it
init|=
name|sentences
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTokens
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Token
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|words
operator|.
name|add
argument_list|(
name|t
operator|.
name|getSpan
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Span
index|[]
name|nameSpans
init|=
name|finder
operator|.
name|find
argument_list|(
name|words
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|words
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|double
index|[]
name|probs
init|=
name|finder
operator|.
name|probs
argument_list|()
decl_stmt|;
comment|//int lastStartPosition = 0;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nameSpans
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|name
init|=
name|at
operator|.
name|getSpan
argument_list|()
operator|.
name|substring
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|nameSpans
index|[
name|j
index|]
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|getStart
argument_list|()
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
name|nameSpans
index|[
name|j
index|]
operator|.
name|getEnd
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|confidence
init|=
literal|1.0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|nameSpans
index|[
name|j
index|]
operator|.
name|getStart
argument_list|()
init|;
name|k
operator|<
name|nameSpans
index|[
name|j
index|]
operator|.
name|getEnd
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|confidence
operator|*=
name|probs
index|[
name|k
index|]
expr_stmt|;
block|}
name|int
name|start
init|=
name|tokens
operator|.
name|get
argument_list|(
name|nameSpans
index|[
name|j
index|]
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
name|NerTag
name|nerTag
init|=
name|config
operator|.
name|getNerTag
argument_list|(
name|nameSpans
index|[
name|j
index|]
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|//create the occurrence for writing fise:TextAnnotations
name|NameOccurrence
name|occurrence
init|=
operator|new
name|NameOccurrence
argument_list|(
name|name
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|nerTag
operator|.
name|getType
argument_list|()
argument_list|,
name|context
argument_list|,
name|confidence
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NameOccurrence
argument_list|>
name|occurrences
init|=
name|nameOccurrences
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|occurrences
operator|==
literal|null
condition|)
block|{
name|occurrences
operator|=
operator|new
name|ArrayList
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|occurrences
operator|.
name|add
argument_list|(
name|occurrence
argument_list|)
expr_stmt|;
name|nameOccurrences
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
comment|//add also the NerAnnotation to the AnalysedText
name|Chunk
name|chunk
init|=
name|at
operator|.
name|addChunk
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
comment|//TODO: build AnnotationModel based on the configured Mappings
name|chunk
operator|.
name|addAnnotation
argument_list|(
name|NER_ANNOTATION
argument_list|,
name|Value
operator|.
name|value
argument_list|(
name|nerTag
argument_list|,
name|confidence
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|finder
operator|.
name|clearAdaptiveData
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} name occurrences found: {}"
argument_list|,
name|nameOccurrences
operator|.
name|size
argument_list|()
argument_list|,
name|nameOccurrences
argument_list|)
expr_stmt|;
return|return
name|nameOccurrences
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|extractNameOccurrences
parameter_list|(
name|TokenNameFinderModel
name|nameFinderModel
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|language
parameter_list|)
block|{
comment|// version with explicit sentence endings to reflect heading / paragraph
comment|// structure of an HTML or PDF document converted to text
name|String
name|textWithDots
init|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"\\n\\n"
argument_list|,
literal|".\n"
argument_list|)
decl_stmt|;
name|text
operator|=
name|removeNonUtf8CompliantCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|SentenceDetectorME
name|sentenceDetector
init|=
operator|new
name|SentenceDetectorME
argument_list|(
name|getSentenceModel
argument_list|(
literal|"en"
argument_list|)
argument_list|)
decl_stmt|;
name|Span
index|[]
name|sentenceSpans
init|=
name|sentenceDetector
operator|.
name|sentPosDetect
argument_list|(
name|textWithDots
argument_list|)
decl_stmt|;
name|NameFinderME
name|finder
init|=
operator|new
name|NameFinderME
argument_list|(
name|nameFinderModel
argument_list|)
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|openNLP
operator|.
name|getTokenizer
argument_list|(
name|language
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
name|nameOccurrences
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sentenceSpans
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sentence
init|=
name|sentenceSpans
index|[
name|i
index|]
operator|.
name|getCoveredText
argument_list|(
name|text
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// build a context by concatenating three sentences to be used for
comment|// similarity ranking / disambiguation + contextual snippet in the
comment|// extraction structure
name|List
argument_list|<
name|String
argument_list|>
name|contextElements
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|CharSequence
name|previousSentence
init|=
name|sentenceSpans
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCoveredText
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|contextElements
operator|.
name|add
argument_list|(
name|previousSentence
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|contextElements
operator|.
name|add
argument_list|(
name|sentence
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|sentenceSpans
operator|.
name|length
condition|)
block|{
name|CharSequence
name|nextSentence
init|=
name|sentenceSpans
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|getCoveredText
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|contextElements
operator|.
name|add
argument_list|(
name|nextSentence
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|context
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|contextElements
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
comment|// extract the names in the current sentence and
comment|// keep them store them with the current context
name|Span
index|[]
name|tokenSpans
init|=
name|tokenizer
operator|.
name|tokenizePos
argument_list|(
name|sentence
argument_list|)
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|Span
operator|.
name|spansToStrings
argument_list|(
name|tokenSpans
argument_list|,
name|sentence
argument_list|)
decl_stmt|;
name|Span
index|[]
name|nameSpans
init|=
name|finder
operator|.
name|find
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|double
index|[]
name|probs
init|=
name|finder
operator|.
name|probs
argument_list|()
decl_stmt|;
comment|//int lastStartPosition = 0;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nameSpans
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|name
init|=
name|sentence
operator|.
name|substring
argument_list|(
name|tokenSpans
index|[
name|nameSpans
index|[
name|j
index|]
operator|.
name|getStart
argument_list|()
index|]
operator|.
name|getStart
argument_list|()
argument_list|,
name|tokenSpans
index|[
name|nameSpans
index|[
name|j
index|]
operator|.
name|getEnd
argument_list|()
operator|-
literal|1
index|]
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|confidence
init|=
literal|1.0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|nameSpans
index|[
name|j
index|]
operator|.
name|getStart
argument_list|()
init|;
name|k
operator|<
name|nameSpans
index|[
name|j
index|]
operator|.
name|getEnd
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|confidence
operator|*=
name|probs
index|[
name|k
index|]
expr_stmt|;
block|}
name|int
name|start
init|=
name|tokenSpans
index|[
name|nameSpans
index|[
name|j
index|]
operator|.
name|getStart
argument_list|()
index|]
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|int
name|absoluteStart
init|=
name|sentenceSpans
index|[
name|i
index|]
operator|.
name|getStart
argument_list|()
operator|+
name|start
decl_stmt|;
name|int
name|absoluteEnd
init|=
name|absoluteStart
operator|+
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
name|NerTag
name|nerTag
init|=
name|config
operator|.
name|getNerTag
argument_list|(
name|nameSpans
index|[
name|j
index|]
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|NameOccurrence
name|occurrence
init|=
operator|new
name|NameOccurrence
argument_list|(
name|name
argument_list|,
name|absoluteStart
argument_list|,
name|absoluteEnd
argument_list|,
name|nerTag
operator|.
name|getType
argument_list|()
argument_list|,
name|context
argument_list|,
name|confidence
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NameOccurrence
argument_list|>
name|occurrences
init|=
name|nameOccurrences
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|occurrences
operator|==
literal|null
condition|)
block|{
name|occurrences
operator|=
operator|new
name|ArrayList
argument_list|<
name|NameOccurrence
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|occurrences
operator|.
name|add
argument_list|(
name|occurrence
argument_list|)
expr_stmt|;
name|nameOccurrences
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
block|}
block|}
name|finder
operator|.
name|clearAdaptiveData
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} name occurrences found: {}"
argument_list|,
name|nameOccurrences
operator|.
name|size
argument_list|()
argument_list|,
name|nameOccurrences
argument_list|)
expr_stmt|;
return|return
name|nameOccurrences
return|;
block|}
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
if|if
condition|(
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|SUPPORTED_MIMETYPES
argument_list|)
operator|!=
literal|null
operator|&&
name|isNerModel
argument_list|(
name|extractLanguage
argument_list|(
name|ci
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ENHANCE_ASYNC
return|;
block|}
else|else
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
block|}
comment|/**      * Remove non UTF-8 compliant characters (typically control characters) so has to avoid polluting the      * annotation graph with snippets that are not serializable as XML.      */
specifier|protected
specifier|static
name|String
name|removeNonUtf8CompliantCharacters
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|text
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
literal|null
decl_stmt|;
comment|//initialised on the first replacement
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ch
init|=
name|text
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// remove any characters outside the valid UTF-8 range as well as all control characters
comment|// except tabs and new lines
comment|//NOTE: rewesten (2012-11-21) replaced the original check with the one
comment|// found at http://blog.mark-mclaren.info/2007/02/invalid-xml-characters-when-valid-utf8_5873.html
if|if
condition|(
operator|!
operator|(
operator|(
name|ch
operator|==
literal|0x9
operator|)
operator|||
operator|(
name|ch
operator|==
literal|0xA
operator|)
operator|||
operator|(
name|ch
operator|==
literal|0xD
operator|)
operator|||
operator|(
operator|(
name|ch
operator|>=
literal|0x20
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|0xD7FF
operator|)
operator|)
operator|||
operator|(
operator|(
name|ch
operator|>=
literal|0xE000
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|0xFFFD
operator|)
operator|)
operator|||
operator|(
operator|(
name|ch
operator|>=
literal|0x10000
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|0x10FFFF
operator|)
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|==
literal|null
condition|?
name|text
else|:
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Extracts the language of the parsed ContentItem by using      * {@link EnhancementEngineHelper#getLanguage(ContentItem)} and       * {@link #defaultLang} as default      * @param ci the content item      * @return the language      */
specifier|private
name|String
name|extractLanguage
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
name|String
name|lang
init|=
name|EnhancementEngineHelper
operator|.
name|getLanguage
argument_list|(
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
block|{
return|return
name|lang
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unable to extract language for ContentItem %s!"
argument_list|,
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... return '{}' as default"
argument_list|,
name|config
operator|.
name|getDefaultLanguage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|config
operator|.
name|getDefaultLanguage
argument_list|()
return|;
block|}
block|}
comment|/**      * This Method checks if this configuration does have a NER model for the      * parsed language. This checks if the pased language       * {@link #isProcessedLangage(String)} and any {@link #getDefaultModelTypes()}      * is present OR if any {@link #getSpecificNerModles(String)} is configured for the      * parsed language.      * @param lang The language to check      * @return if there is any NER model configured for the parsed language      */
specifier|public
name|boolean
name|isNerModel
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
operator|(
name|config
operator|.
name|isProcessedLangage
argument_list|(
name|lang
argument_list|)
operator|&&
operator|!
name|config
operator|.
name|getDefaultModelTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|!
name|config
operator|.
name|getSpecificNerModles
argument_list|(
name|lang
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

