begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2012 Sebastian Schaffert  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|chunker
operator|.
name|services
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|POS_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpAnnotations
operator|.
name|PHRASE_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getAnalysedText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|getLanguage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|NlpEngineHelper
operator|.
name|isLangaugeConfigured
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|ChunkerME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|ChunkerModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|chunker
operator|.
name|model
operator|.
name|PhraseTagSetRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpProcessingRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|NlpServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|Span
operator|.
name|SpanTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|phrase
operator|.
name|PhraseTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|PosTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|utils
operator|.
name|LanguageConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A noun phrase detector (chunker) for English and German language base on OpenNLP. Uses the following chunker  * models for OpenNLP:  *<ul>  *<li>English: http://opennlp.sourceforge.net/models-1.5/en-chunker.bin</li>  *<li>German: http://gromgull.net/blog/2010/01/noun-phrase-chunking-for-the-awful-german-language/</li>  *</ul>  * The noun phrase detector requires a {@link org.apache.stanbol.enhancer.engines.opennlp.pos.model.POSContentPart} to  * be present in the content item and will extend each {@link org.apache.stanbol.enhancer.engines.opennlp.pos.model.POSSentence}  * with an array of chunks.  *   * @author Sebastian Schaffert  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
comment|//allow multiple instances to be configured
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|OPTIONAL
argument_list|)
comment|//create the default instance with the default config
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"opennlp-chunker"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OpenNlpChunkingEngine
operator|.
name|CONFIG_LANGUAGES
argument_list|,
name|value
operator|=
block|{
literal|"de;model=OpenNLP_1.5.1-German-Chunker-TigerCorps07.zip"
block|,
literal|"*"
block|}
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OpenNlpChunkingEngine
operator|.
name|MIN_CHUNK_SCORE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
operator|-
literal|100
argument_list|)
comment|//give the default instance a ranking< 0
block|}
argument_list|)
specifier|public
class|class
name|OpenNlpChunkingEngine
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|ServiceProperties
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|SERVICE_PROPERTIES
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
name|ServiceProperties
operator|.
name|ORDERING_NLP_CHUNK
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|NlpServiceProperties
operator|.
name|ENHANCEMENT_ENGINE_NLP_ROLE
argument_list|,
name|NlpProcessingRole
operator|.
name|Chunking
argument_list|)
expr_stmt|;
name|SERVICE_PROPERTIES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
comment|/**      * Language configuration. Takes a list of ISO language codes of supported languages. Currently supported      * are the languages given as default value.      */
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_LANGUAGES
init|=
literal|"org.apache.stanbol.enhancer.chunker.languages"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_CHUNK_SCORE
init|=
literal|"org.apache.stanbol.enhancer.chunker.minScore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODEL_PARAM_NAME
init|=
literal|"model"
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenNlpChunkingEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LanguageConfiguration
name|languageConfiguration
init|=
operator|new
name|LanguageConfiguration
argument_list|(
name|CONFIG_LANGUAGES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"de;"
operator|+
name|MODEL_PARAM_NAME
operator|+
literal|"=OpenNLP_1.5.1-German-Chunker-TigerCorps07.zip"
block|,
literal|"*"
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OpenNLP
name|openNLP
decl_stmt|;
comment|/**      * The registry used to lookup predefined {@link TagSet}s      */
specifier|private
name|PhraseTagSetRegistry
name|tagSetRegistry
init|=
name|PhraseTagSetRegistry
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|Double
name|minChunkScore
decl_stmt|;
comment|/**      * Holds as key the languages and as values the ad-hoc (unmapped) phrase tags      * for that languages.<p>      * NOTE: Not synchronised as concurrent execution caused multiple adds will      * only create some additional {@link PhraseTag} instances and not actual      * problems.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PhraseTag
argument_list|>
argument_list|>
name|languageAdhocTags
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PhraseTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Indicate if this engine can enhance supplied ContentItem, and if it      * suggests enhancing it synchronously or asynchronously. The      * {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager} can force sync/async mode if desired, it is      * just a suggestion from the engine.      *<p/>      * Returns CANNOT_ENHANCE if the content item does not have a POSContentPart, the language of the content is not      * available or no chunker for the language is available.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the introspecting process of the content item      *          fails      */
annotation|@
name|Override
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
if|if
condition|(
operator|!
name|isLangaugeConfigured
argument_list|(
name|this
argument_list|,
name|languageConfiguration
argument_list|,
name|language
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
if|if
condition|(
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
comment|// default enhancement is synchronous enhancement
return|return
name|ENHANCE_ASYNC
return|;
block|}
comment|/**      * Compute enhancements for supplied ContentItem. The results of the process      * are expected to be stored in the metadata of the content item.      *<p/>      * The client (usually an {@link org.apache.stanbol.enhancer.servicesapi.EnhancementJobManager}) should take care of      * persistent storage of the enhanced {@link org.apache.stanbol.enhancer.servicesapi.ContentItem}.      *      * @throws org.apache.stanbol.enhancer.servicesapi.EngineException      *          if the underlying process failed to work as      *          expected      */
annotation|@
name|Override
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
name|AnalysedText
name|at
init|=
name|getAnalysedText
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|language
init|=
name|getLanguage
argument_list|(
name|this
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|isLangaugeConfigured
argument_list|(
name|this
argument_list|,
name|languageConfiguration
argument_list|,
name|language
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChunkerME
name|chunker
init|=
name|initChunker
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunker
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//init the Phrase TagSet
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
name|tagSet
init|=
name|tagSetRegistry
operator|.
name|getTagSet
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagSet
operator|==
literal|null
condition|)
block|{          }
if|if
condition|(
name|tagSet
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No Phrase TagSet registered for Language '{}'. Will build an "
operator|+
literal|"adhoc set based on encountered Tags!"
argument_list|,
name|language
argument_list|)
expr_stmt|;
comment|//for now only created to avoid checks for tagSet == null
comment|//TODO: in future we might want to automatically create posModels based
comment|//on tagged texts. However this makes no sense as long we can not
comment|//persist TagSets.
name|tagSet
operator|=
operator|new
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
argument_list|(
literal|"dummy"
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
comment|//holds PosTags created for POS tags that where not part of the posModel
comment|//(will hold all PosTags in case tagSet is NULL
name|Map
argument_list|<
name|String
argument_list|,
name|PhraseTag
argument_list|>
name|adhocTags
init|=
name|languageAdhocTags
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|adhocTags
operator|==
literal|null
condition|)
block|{
name|adhocTags
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PhraseTag
argument_list|>
argument_list|()
expr_stmt|;
name|languageAdhocTags
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|adhocTags
argument_list|)
expr_stmt|;
block|}
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|Section
argument_list|>
name|sentences
init|=
name|at
operator|.
name|getSentences
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sentences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//no sentences ... iterate over the whole text
name|sentences
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|at
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tokenTextList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|posList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|tokenList
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
literal|64
argument_list|)
decl_stmt|;
comment|//process each sentence seperatly
while|while
condition|(
name|sentences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// (1) get Tokens and POS information for the sentence
name|Section
name|sentence
init|=
name|sentences
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|sentence
operator|.
name|getTokens
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Token
name|token
init|=
name|tokens
operator|.
name|next
argument_list|()
decl_stmt|;
name|tokenList
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|tokenTextList
operator|.
name|add
argument_list|(
name|token
operator|.
name|getSpan
argument_list|()
argument_list|)
expr_stmt|;
name|Value
argument_list|<
name|PosTag
argument_list|>
name|posValue
init|=
name|token
operator|.
name|getAnnotation
argument_list|(
name|POS_ANNOTATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|posValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
literal|"Missing POS value for Token '"
operator|+
name|token
operator|.
name|getSpan
argument_list|()
operator|+
literal|"' of ContentItem "
operator|+
name|ci
operator|.
name|getUri
argument_list|()
operator|+
literal|"(Sentence: '"
operator|+
name|sentence
operator|.
name|getSpan
argument_list|()
operator|+
literal|"'). This may "
operator|+
literal|"indicate that a POS tagging Engine is missing in "
operator|+
literal|"the EnhancementChain or that the used POS tagging "
operator|+
literal|"does not provide POS tags for each token!"
argument_list|)
throw|;
block|}
else|else
block|{
name|posList
operator|.
name|add
argument_list|(
name|posValue
operator|.
name|value
argument_list|()
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|tokenStrings
init|=
name|tokenTextList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokenTextList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|tokenPos
init|=
name|posList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokenTextList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Tokens: {}"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|tokenStrings
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tokenTextList
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//free memory
name|posList
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//free memory
comment|// (2) Chunk the sentence
name|String
index|[]
name|chunkTags
init|=
name|chunker
operator|.
name|chunk
argument_list|(
name|tokenStrings
argument_list|,
name|tokenPos
argument_list|)
decl_stmt|;
name|double
index|[]
name|chunkProb
init|=
name|chunker
operator|.
name|probs
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Chunks: {}"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|chunkTags
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tokenStrings
operator|=
literal|null
expr_stmt|;
comment|//free memory
name|tokenPos
operator|=
literal|null
expr_stmt|;
comment|//free memory
comment|// (3) Process the results and write the Annotations
name|double
name|chunkProps
init|=
literal|0
decl_stmt|;
name|int
name|chunkTokenCount
init|=
literal|0
decl_stmt|;
name|PhraseTag
name|tag
init|=
literal|null
decl_stmt|;
name|int
name|i
decl_stmt|;
comment|/*                  * This assumes:                  *  - 'B-{tag}' ... for start of a new chunk                  *  - '???' ... anything other for continuing the current chunk                  *  - 'O' ... no chunk (ends current chunk)                  */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|tokenList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|start
init|=
name|chunkTags
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'B'
decl_stmt|;
name|boolean
name|end
init|=
name|tag
operator|!=
literal|null
operator|&&
operator|(
name|start
operator|||
name|chunkTags
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'O'
operator|)
decl_stmt|;
if|if
condition|(
name|end
condition|)
block|{
comment|//add the current phrase
comment|//add at AnalysedText level, because offsets are absolute
comment|//NOTE we are already at the next token when we detect the end
name|Chunk
name|chunk
init|=
name|at
operator|.
name|addChunk
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
name|i
operator|-
name|chunkTokenCount
argument_list|)
operator|.
name|getStart
argument_list|()
argument_list|,
name|tokenList
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
name|chunk
operator|.
name|addAnnotation
argument_list|(
name|PHRASE_ANNOTATION
argument_list|,
operator|new
name|Value
argument_list|<
name|PhraseTag
argument_list|>
argument_list|(
name|tag
argument_list|,
name|chunkProps
operator|/
operator|(
name|double
operator|)
name|chunkTokenCount
argument_list|)
argument_list|)
expr_stmt|;
comment|//reset the state
name|tag
operator|=
literal|null
expr_stmt|;
name|chunkTokenCount
operator|=
literal|0
expr_stmt|;
name|chunkProps
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|start
condition|)
block|{
comment|//create the new tag
name|tag
operator|=
name|getPhraseTag
argument_list|(
name|tagSet
argument_list|,
name|adhocTags
argument_list|,
name|chunkTags
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|language
argument_list|)
expr_stmt|;
comment|//skip 'B-'
block|}
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
comment|//count this token for the current chunk
name|chunkProps
operator|=
name|chunkProps
operator|+
name|chunkProb
index|[
name|i
index|]
expr_stmt|;
name|chunkTokenCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|Chunk
name|chunk
init|=
name|at
operator|.
name|addChunk
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
name|i
operator|-
name|chunkTokenCount
argument_list|)
operator|.
name|getStart
argument_list|()
argument_list|,
name|tokenList
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
name|chunk
operator|.
name|addAnnotation
argument_list|(
name|PHRASE_ANNOTATION
argument_list|,
operator|new
name|Value
argument_list|<
name|PhraseTag
argument_list|>
argument_list|(
name|tag
argument_list|,
name|chunkProps
operator|/
operator|(
name|double
operator|)
name|chunkTokenCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// (4) clean up
name|tokenList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logChunks
argument_list|(
name|at
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|SERVICE_PROPERTIES
return|;
block|}
specifier|private
name|void
name|logChunks
parameter_list|(
name|AnalysedText
name|at
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Span
argument_list|>
name|it
init|=
name|at
operator|.
name|getEnclosed
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SpanTypeEnum
operator|.
name|Sentence
argument_list|,
name|SpanTypeEnum
operator|.
name|Chunk
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Span
name|span
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|span
operator|.
name|getType
argument_list|()
operator|==
name|SpanTypeEnum
operator|.
name|Chunk
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"> {} {}"
argument_list|,
name|span
argument_list|,
name|span
operator|.
name|getSpan
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"> {}"
argument_list|,
name|span
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Value
argument_list|<
name|PhraseTag
argument_list|>
name|value
range|:
name|span
operator|.
name|getAnnotations
argument_list|(
name|PHRASE_ANNOTATION
argument_list|)
control|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"   - {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|PhraseTag
name|getPhraseTag
parameter_list|(
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
name|model
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PhraseTag
argument_list|>
name|adhocTags
parameter_list|,
name|String
name|tag
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|PhraseTag
name|phraseTag
init|=
name|model
operator|.
name|getTag
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|phraseTag
operator|!=
literal|null
condition|)
block|{
return|return
name|phraseTag
return|;
block|}
name|phraseTag
operator|=
name|adhocTags
operator|.
name|get
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|phraseTag
operator|!=
literal|null
condition|)
block|{
return|return
name|phraseTag
return|;
block|}
name|phraseTag
operator|=
operator|new
name|PhraseTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|adhocTags
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|phraseTag
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Encountered unknown POS tag '{}' for langauge '{}'"
argument_list|,
name|tag
argument_list|,
name|language
argument_list|)
expr_stmt|;
return|return
name|phraseTag
return|;
block|}
comment|/**      * Activate and read the properties. Configures and initialises a ChunkerHelper for each language configured in      * CONFIG_LANGUAGES.      *      * @param ce the {@link org.osgi.service.component.ComponentContext}      */
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activating POS tagging engine"
argument_list|)
expr_stmt|;
name|super
operator|.
name|activate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|//read the min chunk score
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|MIN_CHUNK_SCORE
argument_list|)
decl_stmt|;
name|Double
name|minScore
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|minScore
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|minScore
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_CHUNK_SCORE
argument_list|,
literal|"The configured minumum chunk score MUST BE a floating point"
operator|+
literal|"number in the range> 0< 1. Values>= 0 will deactivate "
operator|+
literal|"this feature."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|minScore
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|minScore
operator|!=
literal|null
operator|&&
name|minScore
operator|.
name|doubleValue
argument_list|()
operator|>=
literal|1d
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|MIN_CHUNK_SCORE
argument_list|,
literal|"The configured minumum chunk score '"
operator|+
name|minScore
operator|+
literal|"' MUST BE a "
operator|+
literal|"floating point number in the range> 0< 1. Values>= 0 will "
operator|+
literal|"deactivate this feature."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|minScore
operator|==
literal|null
operator|||
name|minScore
operator|.
name|doubleValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|this
operator|.
name|minChunkScore
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"> set minimum chunk score to {} (Engine: {})"
argument_list|,
name|minScore
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|minChunkScore
operator|=
name|minScore
expr_stmt|;
block|}
comment|//read the language configuration
name|languageConfiguration
operator|.
name|setConfiguration
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|languageConfiguration
operator|.
name|setDefault
argument_list|()
expr_stmt|;
name|this
operator|.
name|minChunkScore
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|languageAdhocTags
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ChunkerME
name|initChunker
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|isLangaugeConfigured
argument_list|(
name|this
argument_list|,
name|languageConfiguration
argument_list|,
name|language
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//check if the parsed language is ok
name|String
name|modelName
init|=
name|languageConfiguration
operator|.
name|getParameter
argument_list|(
name|language
argument_list|,
name|MODEL_PARAM_NAME
argument_list|)
decl_stmt|;
name|ChunkerModel
name|model
decl_stmt|;
try|try
block|{
if|if
condition|(
name|modelName
operator|==
literal|null
condition|)
block|{
comment|// the default model
name|model
operator|=
name|openNLP
operator|.
name|getChunkerModel
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|ChunkerModel
operator|.
name|class
argument_list|,
name|modelName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to load Chunker model for language '"
operator|+
name|language
operator|+
literal|"' (model: "
operator|+
operator|(
name|modelName
operator|==
literal|null
condition|?
literal|"default"
else|:
name|modelName
operator|)
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while creating ChunkerModel for language '"
operator|+
name|language
operator|+
literal|"' (model: "
operator|+
operator|(
name|modelName
operator|==
literal|null
condition|?
literal|"default"
else|:
name|modelName
operator|)
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"no Chunker Model for language {}"
argument_list|,
name|language
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|ChunkerME
argument_list|(
name|model
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

