begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|opennlp
operator|.
name|chunker
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|Chunker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|model
operator|.
name|tag
operator|.
name|TagSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|phrase
operator|.
name|PhraseTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|LexicalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|nlp
operator|.
name|pos
operator|.
name|Pos
import|;
end_import

begin_comment
comment|/**  * Registry for {@link PhraseTag} {@link TagSet}s used by OpenNLP  * {@link Chunker}.<p>  * TODO: consider to add a {@link TagSet}Registry feature to the  * org.apache.stanbol.enhancer.nlp module. Maybe even register TagSets to   * the OSGI Environment.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|PhraseTagSetRegistry
block|{
specifier|private
specifier|static
name|PhraseTagSetRegistry
name|instance
init|=
operator|new
name|PhraseTagSetRegistry
argument_list|()
decl_stmt|;
specifier|private
name|PhraseTagSetRegistry
parameter_list|()
block|{}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
argument_list|>
name|models
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|PhraseTagSetRegistry
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
name|model
parameter_list|)
block|{
for|for
control|(
name|String
name|lang
range|:
name|model
operator|.
name|getLanguages
argument_list|()
control|)
block|{
if|if
condition|(
name|models
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|model
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple TagSets for Language '"
operator|+
name|lang
operator|+
literal|"'! This is an error in the static confituration of "
operator|+
literal|"this class. Please report this to the stanbol-dev mailing"
operator|+
literal|"list!"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Getter for the TagSet used by an {@link Chunker} of the parsed Language.      * If no {@link TagSet} is available for an Language this will return       *<code>null</code>      * @param language the language      * @return the AnnotationModel or<code>null</code> if non is defined      */
specifier|public
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
name|getTagSet
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|models
operator|.
name|get
argument_list|(
name|language
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
name|DEFAULT
init|=
operator|new
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
argument_list|(
literal|"OpenNLP Default Chunker TagSet"
argument_list|,
literal|"en"
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
static|static
block|{
name|DEFAULT
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"NP"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"VP"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"PP"
argument_list|,
name|LexicalCategory
operator|.
name|PronounOrDeterminer
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
name|FRENCH
init|=
operator|new
name|TagSet
argument_list|<
name|PhraseTag
argument_list|>
argument_list|(
literal|"French Treebank+ Phrase TagSet"
argument_list|,
literal|"fr"
argument_list|)
decl_stmt|;
static|static
block|{
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"AP"
argument_list|,
name|LexicalCategory
operator|.
name|Adjective
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"AdP"
argument_list|,
name|LexicalCategory
operator|.
name|Adverb
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"COORD"
argument_list|,
name|LexicalCategory
operator|.
name|Conjuction
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"NP"
argument_list|,
name|LexicalCategory
operator|.
name|Noun
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"PP"
argument_list|,
name|LexicalCategory
operator|.
name|PronounOrDeterminer
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"VN"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"VPinf"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"VPpart"
argument_list|,
name|LexicalCategory
operator|.
name|Verb
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"Ssub"
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"Srel"
argument_list|)
argument_list|)
expr_stmt|;
name|FRENCH
operator|.
name|addTag
argument_list|(
operator|new
name|PhraseTag
argument_list|(
literal|"Sint"
argument_list|)
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|FRENCH
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

