begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
operator|.
name|html
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|CleanerProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|CommentToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|ContentToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|DomSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|TagNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  *  Patches for HtmlCleaner-2.1 for namespace handling and correcting XML serialization.  *  The patches are not applicable for HtmlCleaner-2.2 that suffers from losing namespaces altogether.  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  *   */
end_comment

begin_class
specifier|public
class|class
name|DomSerializer2
extends|extends
name|DomSerializer
block|{
specifier|public
name|DomSerializer2
parameter_list|(
name|CleanerProperties
name|props
parameter_list|,
name|boolean
name|escapeXml
parameter_list|)
block|{
name|super
argument_list|(
name|props
argument_list|,
name|escapeXml
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DomSerializer2
parameter_list|(
name|CleanerProperties
name|props
parameter_list|)
block|{
name|this
argument_list|(
name|props
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Document
name|createDOM
parameter_list|(
name|TagNode
name|rootNode
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
name|props
operator|.
name|isNamespacesAware
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|rootElement
init|=
name|document
operator|.
name|createElement
argument_list|(
name|rootNode
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
name|document
operator|.
name|appendChild
argument_list|(
name|rootElement
argument_list|)
expr_stmt|;
name|setAttributes
argument_list|(
name|rootNode
argument_list|,
name|rootElement
argument_list|)
expr_stmt|;
name|createSubnodes
argument_list|(
name|document
argument_list|,
name|rootElement
argument_list|,
name|rootNode
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|document
return|;
block|}
specifier|private
name|void
name|setAttributes
parameter_list|(
name|TagNode
name|node
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|entryIterator
init|=
name|attributes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|attrName
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|attrValue
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|escapeXml
condition|)
block|{
name|attrValue
operator|=
name|escapeXml
argument_list|(
name|attrValue
argument_list|,
name|props
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// avoid xhtml declarations
if|if
condition|(
operator|!
name|attrName
operator|.
name|equals
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
block|{
name|element
operator|.
name|setAttribute
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createSubnodes
parameter_list|(
name|Document
name|document
parameter_list|,
name|Element
name|element
parameter_list|,
name|List
name|tagChildren
parameter_list|)
block|{
if|if
condition|(
name|tagChildren
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|tagChildren
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|item
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|CommentToken
condition|)
block|{
name|CommentToken
name|commentNode
init|=
operator|(
name|CommentToken
operator|)
name|item
decl_stmt|;
name|Comment
name|comment
init|=
name|document
operator|.
name|createComment
argument_list|(
name|commentNode
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|appendChild
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|ContentToken
condition|)
block|{
name|ContentToken
name|contentToken
init|=
operator|(
name|ContentToken
operator|)
name|item
decl_stmt|;
name|String
name|content
init|=
name|contentToken
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|element
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|boolean
name|specialCase
init|=
name|props
operator|.
name|isUseCdataForScriptAndStyle
argument_list|()
operator|&&
operator|(
literal|"script"
operator|.
name|equalsIgnoreCase
argument_list|(
name|nodeName
argument_list|)
operator|||
literal|"style"
operator|.
name|equalsIgnoreCase
argument_list|(
name|nodeName
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|escapeXml
operator|&&
operator|!
name|specialCase
condition|)
block|{
name|content
operator|=
name|escapeXml
argument_list|(
name|content
argument_list|,
name|props
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|element
operator|.
name|appendChild
argument_list|(
name|specialCase
condition|?
name|document
operator|.
name|createCDATASection
argument_list|(
name|content
argument_list|)
else|:
name|document
operator|.
name|createTextNode
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|TagNode
condition|)
block|{
name|TagNode
name|subTagNode
init|=
operator|(
name|TagNode
operator|)
name|item
decl_stmt|;
name|Element
name|subelement
init|=
name|document
operator|.
name|createElement
argument_list|(
name|subTagNode
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
name|setAttributes
argument_list|(
name|subTagNode
argument_list|,
name|subelement
argument_list|)
expr_stmt|;
comment|// recursively create subnodes
name|createSubnodes
argument_list|(
name|document
argument_list|,
name|subelement
argument_list|,
name|subTagNode
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|appendChild
argument_list|(
name|subelement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|List
condition|)
block|{
name|List
name|sublist
init|=
operator|(
name|List
operator|)
name|item
decl_stmt|;
name|createSubnodes
argument_list|(
name|document
argument_list|,
name|element
argument_list|,
name|sublist
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Escapes XML string.    * @param s String to be escaped    * @param props Cleaner properties gover affect escaping behaviour    * @param isDomCreation Tells if escaped content will be part of the DOM    */
specifier|public
specifier|static
name|String
name|escapeXml
parameter_list|(
name|String
name|s
parameter_list|,
name|CleanerProperties
name|props
parameter_list|,
name|boolean
name|isDomCreation
parameter_list|)
block|{
name|boolean
name|advanced
init|=
name|props
operator|.
name|isAdvancedXmlEscape
argument_list|()
decl_stmt|;
name|boolean
name|recognizeUnicodeChars
init|=
name|props
operator|.
name|isRecognizeUnicodeChars
argument_list|()
decl_stmt|;
name|boolean
name|translateSpecialEntities
init|=
name|props
operator|.
name|isTranslateSpecialEntities
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'&'
condition|)
block|{
if|if
condition|(
operator|(
name|advanced
operator|||
name|recognizeUnicodeChars
operator|)
operator|&&
operator|(
name|i
operator|<
name|len
operator|-
literal|1
operator|)
operator|&&
operator|(
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
condition|)
block|{
name|int
name|charIndex
init|=
name|i
operator|+
literal|2
decl_stmt|;
name|String
name|unicode
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|charIndex
operator|<
name|len
operator|&&
operator|(
name|Utils
operator|.
name|isHexadecimalDigit
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|charIndex
argument_list|)
argument_list|)
operator|||
name|s
operator|.
name|charAt
argument_list|(
name|charIndex
argument_list|)
operator|==
literal|'x'
operator|||
name|s
operator|.
name|charAt
argument_list|(
name|charIndex
argument_list|)
operator|==
literal|'X'
operator|)
condition|)
block|{
name|unicode
operator|+=
name|s
operator|.
name|charAt
argument_list|(
name|charIndex
argument_list|)
expr_stmt|;
name|charIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|charIndex
operator|==
name|len
operator|||
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|unicode
argument_list|)
condition|)
block|{
try|try
block|{
name|char
name|unicodeChar
init|=
name|unicode
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"x"
argument_list|)
condition|?
operator|(
name|char
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
name|unicode
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
else|:
operator|(
name|char
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
name|unicode
argument_list|)
decl_stmt|;
comment|//                 if ( "&<>\'\"".indexOf(unicodeChar)< 0 ) {
name|int
name|replaceChunkSize
init|=
operator|(
name|charIndex
operator|<
name|len
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|charIndex
argument_list|)
operator|==
literal|';'
operator|)
condition|?
name|unicode
operator|.
name|length
argument_list|()
operator|+
literal|1
else|:
name|unicode
operator|.
name|length
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|recognizeUnicodeChars
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|unicodeChar
argument_list|)
else|:
literal|"&#"
operator|+
name|unicode
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|i
operator|+=
name|replaceChunkSize
operator|+
literal|1
expr_stmt|;
comment|//                } else {
comment|//                    i = charIndex;
comment|//                    result.append("&#" + unicode + ";");
comment|//                }
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|i
operator|=
name|charIndex
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"&#"
operator|+
name|unicode
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|translateSpecialEntities
condition|)
block|{
comment|// get following sequence of most 10 characters
name|String
name|seq
init|=
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|len
operator|-
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|semiIndex
init|=
name|seq
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semiIndex
operator|>
literal|0
condition|)
block|{
name|String
name|entity
init|=
name|seq
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|semiIndex
argument_list|)
decl_stmt|;
name|Integer
name|code
init|=
name|entities
operator|.
name|get
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|!=
literal|null
condition|)
block|{
name|int
name|entityLen
init|=
name|entity
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|recognizeUnicodeChars
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|code
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|"&#"
operator|+
name|code
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|entityLen
operator|+
literal|1
expr_stmt|;
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|advanced
condition|)
block|{
name|String
name|sub
init|=
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|startsWith
argument_list|(
literal|"&amp;"
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|isDomCreation
condition|?
literal|"&"
else|:
literal|"&amp;"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sub
operator|.
name|startsWith
argument_list|(
literal|"&apos;"
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|isDomCreation
condition|?
literal|"'"
else|:
literal|"&apos;"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|5
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sub
operator|.
name|startsWith
argument_list|(
literal|"&gt;"
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|isDomCreation
condition|?
literal|">"
else|:
literal|"&gt;"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sub
operator|.
name|startsWith
argument_list|(
literal|"&lt;"
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|isDomCreation
condition|?
literal|"<"
else|:
literal|"&lt;"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sub
operator|.
name|startsWith
argument_list|(
literal|"&quot;"
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|isDomCreation
condition|?
literal|"\""
else|:
literal|"&quot;"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|5
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|isDomCreation
condition|?
literal|"&"
else|:
literal|"&amp;"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isDomCreation
condition|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'\''
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"&apos;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'>'
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'<'
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'\"'
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"&quot;"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// copied from SpecialEntities class because map is not visible only package internal
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entities
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|entities
operator|.
name|put
argument_list|(
literal|"nbsp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|160
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"iexcl"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|161
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"curren"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|164
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"cent"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|162
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"pound"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|163
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"yen"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|165
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"brvbar"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|166
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"sect"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|167
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"uml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|168
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"copy"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|169
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ordf"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|170
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"laquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|171
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"not"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|172
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"shy"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|173
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"reg"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|174
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"trade"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8482
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"macr"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|175
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"deg"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|176
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"plusmn"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|177
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"sup2"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|178
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"sup3"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|179
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"acute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|180
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"micro"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|181
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"para"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|182
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"middot"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|183
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"cedil"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|184
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"sup1"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|185
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ordm"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|186
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"raquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|187
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"frac14"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|188
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"frac12"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|189
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"frac34"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|190
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"iquest"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|191
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"times"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|215
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"divide"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|247
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Agrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|192
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Aacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|193
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Acirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|194
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Atilde"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|195
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Auml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|196
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Aring"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|197
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"AElig"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|198
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ccedil"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|199
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Egrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Eacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|201
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ecirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|202
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Euml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|203
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Igrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|204
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Iacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|205
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Icirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|206
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Iuml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|207
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ETH"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|208
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ntilde"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|209
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ograve"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|210
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Oacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|211
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ocirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|212
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Otilde"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|213
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ouml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|214
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Oslash"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|216
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ugrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|217
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Uacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|218
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ucirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|219
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Uuml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|220
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Yacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|221
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"THORN"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|222
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"szlig"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|223
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"agrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|224
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"aacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|225
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"acirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|226
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"atilde"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|227
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"auml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|228
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"aring"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|229
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"aelig"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|230
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ccedil"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|231
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"egrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|232
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"eacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|233
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ecirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|234
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"euml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|235
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"igrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|236
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"iacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|237
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"icirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|238
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"iuml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|239
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"eth"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|240
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ntilde"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|241
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ograve"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|242
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"oacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|243
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ocirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|244
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"otilde"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|245
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ouml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|246
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"oslash"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|248
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ugrave"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|249
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"uacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|250
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ucirc"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|251
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"uuml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|252
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"yacute"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|253
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"thorn"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|254
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"yuml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"OElig"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|338
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"oelig"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|339
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Scaron"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|352
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"scaron"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|353
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Yuml"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|376
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"circ"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|710
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"tilde"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|732
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ensp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8194
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"emsp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8195
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"thinsp"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8201
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"zwnj"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8204
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"zwj"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8205
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"lrm"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8206
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"rlm"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8207
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ndash"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8211
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"mdash"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8212
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"lsquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8216
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"rsquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8217
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"sbquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8218
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ldquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8220
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"rdquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8221
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"bdquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8222
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"dagger"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8224
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Dagger"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8225
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"hellip"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8230
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"permil"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8240
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"lsaquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8249
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"rsaquo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8250
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"euro"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8364
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

