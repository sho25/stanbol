begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|aifbcommons
operator|.
name|collection
operator|.
name|ClosableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|RDF2Go
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|impl
operator|.
name|DiffImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|impl
operator|.
name|URIGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|BlankNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|RDFTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ontoware
operator|.
name|rdf2go
operator|.
name|model
operator|.
name|node
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * RDF2GoUtils.java  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  */
end_comment

begin_class
specifier|public
class|class
name|RDF2GoUtils
block|{
specifier|public
specifier|static
name|void
name|urifyBlankNodes
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|HashMap
argument_list|<
name|BlankNode
argument_list|,
name|URI
argument_list|>
name|nodeMap
init|=
operator|new
name|HashMap
argument_list|<
name|BlankNode
argument_list|,
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|Model
name|add
init|=
name|RDF2Go
operator|.
name|getModelFactory
argument_list|()
operator|.
name|createModel
argument_list|()
decl_stmt|;
name|add
operator|.
name|open
argument_list|()
expr_stmt|;
name|Model
name|remove
init|=
name|RDF2Go
operator|.
name|getModelFactory
argument_list|()
operator|.
name|createModel
argument_list|()
decl_stmt|;
name|remove
operator|.
name|open
argument_list|()
expr_stmt|;
for|for
control|(
name|Statement
name|stmt
range|:
name|model
control|)
block|{
name|RDFTerm
name|subj
init|=
name|stmt
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|URI
name|pred
init|=
name|stmt
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
name|Node
name|obj
init|=
name|stmt
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|subj
operator|instanceof
name|BlankNode
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|URI
name|newSubj
init|=
name|nodeMap
operator|.
name|get
argument_list|(
name|subj
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSubj
operator|==
literal|null
condition|)
block|{
name|newSubj
operator|=
name|URIGenerator
operator|.
name|createNewRandomUniqueURI
argument_list|()
expr_stmt|;
name|nodeMap
operator|.
name|put
argument_list|(
name|subj
operator|.
name|asBlankNode
argument_list|()
argument_list|,
name|newSubj
argument_list|)
expr_stmt|;
block|}
name|subj
operator|=
name|newSubj
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|BlankNode
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|URI
name|newObj
init|=
name|nodeMap
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|newObj
operator|==
literal|null
condition|)
block|{
name|newObj
operator|=
name|URIGenerator
operator|.
name|createNewRandomUniqueURI
argument_list|()
expr_stmt|;
name|nodeMap
operator|.
name|put
argument_list|(
name|obj
operator|.
name|asBlankNode
argument_list|()
argument_list|,
name|newObj
argument_list|)
expr_stmt|;
block|}
name|obj
operator|=
name|newObj
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
name|remove
operator|.
name|addStatement
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|add
operator|.
name|addStatement
argument_list|(
name|subj
argument_list|,
name|pred
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
name|ClosableIterator
argument_list|<
name|Statement
argument_list|>
name|addIt
init|=
name|add
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ClosableIterator
argument_list|<
name|Statement
argument_list|>
name|removeIt
init|=
name|remove
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|model
operator|.
name|update
argument_list|(
operator|new
name|DiffImpl
argument_list|(
name|addIt
argument_list|,
name|removeIt
argument_list|)
argument_list|)
expr_stmt|;
name|addIt
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeIt
operator|.
name|close
argument_list|()
expr_stmt|;
name|add
operator|.
name|close
argument_list|()
expr_stmt|;
name|remove
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

