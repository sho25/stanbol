begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_comment
comment|/**  * A constraint the filters/selects based on the value and/or the parsed  * dataTypes. A valid constraint MUST define a value OR valid data type. A  * valid data type is defined as a String that is NOT NULL and NOT empty.<p>  * If the collection of data types is<code>null</code> components processing  * this constraint are encouraged to deduct the data types based on the type  * of the value.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ValueConstraint
extends|extends
name|Constraint
block|{
specifier|protected
specifier|final
name|Object
name|value
decl_stmt|;
specifier|protected
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|dataTypeUris
decl_stmt|;
specifier|public
name|ValueConstraint
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValueConstraint
parameter_list|(
name|Object
name|value
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|dataTypes
parameter_list|)
block|{
name|super
argument_list|(
name|ConstraintType
operator|.
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
comment|/*          * Implementation NOTE:          *   We need to use a LinkedHashSet here to          *    1) ensure that there are no duplicates and          *    2) ensure ordering of the parsed constraints          *   Both is important: Duplicates might result in necessary calculations          *   and ordering might be important for users that expect that the          *   dataType parsed as first is the first used for processing (e.g.          *   when specifying acceptable data types for a field, one would expect          *   that values that need to be converted are preferable converted to          *   the datatype specified as first)          */
name|this
operator|.
name|dataTypeUris
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|dataType
range|:
name|dataTypes
control|)
block|{
if|if
condition|(
name|dataType
operator|!=
literal|null
operator|&&
operator|!
name|dataType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataTypeUris
operator|.
name|add
argument_list|(
name|dataType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|dataTypeUris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A value constraint MUST define at least a value or a valid - NOT NULL, NOT empty - data type uri!"
argument_list|)
throw|;
block|}
comment|//it's questionable if we should do that at this position, because
comment|//components that process that constraint might have better ways to
comment|//do that and than they can not know if the user parsed a data type or
comment|//this code has calculated it based on the java type of the value!
comment|//        if(dataTypeUris.isEmpty()){ //meaning value != null
comment|//            for(DataTypeEnum dataType : DataTypeEnum.getAllDataTypes(value.getClass())){
comment|//                dataTypeUris.add(dataType.getUri());
comment|//            }
comment|//        }
block|}
comment|/**      * Getter for the value      * @return the value or<code>null</code> if the value is not constraint      */
specifier|public
specifier|final
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Getter for the list of the parsed data types URIs      * @return the list of dataType URIs or an empty list if not defined.      */
specifier|public
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|getDataTypes
parameter_list|()
block|{
return|return
name|dataTypeUris
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"ValueConstraint[value=%s|types:%s]"
argument_list|,
name|value
argument_list|,
name|dataTypeUris
argument_list|)
return|;
block|}
block|}
end_class

end_unit

