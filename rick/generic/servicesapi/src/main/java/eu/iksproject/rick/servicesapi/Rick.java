begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_comment
comment|/**  *<p>The Rick manages all management specific metadata for the<b>R</b>eference  *<b>I</b>nfrastrucutre for<b>C</b>ontent and<b>K</b>nowledge.</p>  *<p>It allows to register/create  *<ul>  *<li>{@link Symbol}: Entities as defined by the local CMS</li>  *<li>{@link EntityMapping}: External Entities that are aligned to {@link Symbol}  *      used by the local CMS</li>  *<li> {@link Sites}: External sites that manage entities. Such sites also define  *      default valued for MappedEntities and Symbols created based on Entities  *      they manage</li>  *</ul>  *  * TODO's<ul>  *<li> Query Interface for Symbols and Entities. Probably a  *       field -> value pattern based query language would be a good start  *       (e.g. label="Par*" type="ns:Location")  *<li> How to deal with content (references, base62 encoded Strings,  *       {@link InputStream}s ...  *<li> Serialising of Representations to different Formats (especially RDF and  *       JSON)  *</ul>  * @author Rupert Westenthaler  *  */
end_comment

begin_interface
specifier|public
interface|interface
name|Rick
block|{
name|String
name|DEFAUTL_RICK_PREFIX
init|=
literal|"urn:eu.iksproject:rick"
decl_stmt|;
comment|/**      * Getter for the Yard storing the data (Symbols, MappedEntities) of the Rick.      * @return The yard instance used to store the data of the Rick - the RickYard      */
name|Yard
name|getRickYard
parameter_list|()
function_decl|;
comment|/**      * Getter for an Symbol for an reference to a {@link Sign}. If parsed      * reference refers a Symbol, than this Symbol is returned. In any other      * case this Method searches if the parsed reference is mapped to a      * Symbol and returns the Symbol instead. To check if the parsed reference      * is a {@link Symbol} simple check if {@link Symbol#getId()} equals to the      * parsed reference.      * @param reference the id of the referenced Sign      * @return the symbol representing the parsed entity or<code>null</code> if      * no symbol for the parsed entity is available      * @throws RickException On any error while performing the operation      */
name|Symbol
name|lookupSymbol
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|RickException
function_decl|;
comment|/**      * Getter for an Symbol for an reference to a {@link Sign}. If parsed      * reference refers a Symbol, than this Symbol is returned. In any other      * case this Method searches if the parsed reference is mapped to a      * Symbol and returns the Symbol instead. To check if the parsed reference      * is a {@link Symbol} simple check if {@link Symbol#getId()} equals to the      * parsed reference.<br>      * If<code>create=true</code> and no {@link EntityMapping} is present for      * the parsed reference, than a new Symbol is created and returned.      *      * @param reference the id of the referenced Sign      * @param create if<code>true</code> the {@link Rick} will try to create a      * {@link Symbol} if necessary      * @return the symbol or<code>null</code> if the parsed reference is not      * known by any referenced sites.      * @throws IllegalArgumentException If the referenced {@link Sign} was found, no      * existing {@link EntityMapping} is present, but it is not possible to      * create an {@link Symbol} for this {@link Sign} (normally because the      * {@link Representation} of the {@link Sign} provides insufficient data).      * @throws RickException On any error while performing the operation      */
name|Symbol
name|lookupSymbol
parameter_list|(
name|String
name|reference
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|RickException
function_decl|;
comment|/**      * Getter for a Symbol by ID. This method does only work with IDs of      * Symbols managed by the Rick. To lookup Symbols by the ID of a Symbol,      * a mappedEntity or an Entity of an referenced site use the      * {@link #lookupSymbol(String, boolean)} method.      * @param symbolId the ID of the Symbol      * @return the Symbol or<code>null</code> if no {@link Symbol} with that      * ID is managed by the Rick.      * @throws IllegalArgumentException if<code>null</code> or an empty String      * is parsed as symbolId      * @throws RickException On any error while performing the operation      */
name|Symbol
name|getSymbol
parameter_list|(
name|String
name|symbolId
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|RickException
function_decl|;
comment|/**      * Creates a Symbol for the parsed reference. If there is already a Symbol      * present for the parsed reference, than this Method throws an      * {@link IllegalStateException}. If no Sign can be found for the parsed      * Reference, than<code>null</code> is returned.      * If the referenced {@link Sign} provides      * insufficient data to create a {@link Symbol}, than an      * {@link IllegalArgumentException} is thrown.      * @param reference the id of the {@link Sign}      * @return the Symbol or<code>null</code> if the no {@link Sign} was found      * for the parsed reference.      * @throws IllegalStateException if there exists already a {@link Symbol} for      * the parsed reference      * @throws IllegalArgumentException  If the referenced {@link Sign} was found, no      * existing {@link EntityMapping} is present, but it is not possible to      * create an {@link Symbol} for this {@link Sign} (normally because the      * {@link Representation} of the {@link Sign} provides insufficient data).      * @throws RickException On any error while performing the operation      */
name|Symbol
name|createSymbol
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IllegalArgumentException
throws|,
name|RickException
function_decl|;
comment|/**      * Getter for a MappedEntity based on the ID      * @param id the id of the mapped entity      * @return the MappedEntity or<code>null</code> if none was found      * @throws RickException On any error while performing the operation      */
name|EntityMapping
name|getMappingById
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RickException
function_decl|;
comment|/**      * Getter for all mappings for a entity      * TODO: check if an Entity can be mapped to more than one Symbol      * @param reference the ID of the referred entity      * @return Iterator over all the Mappings defined for this entity      * @throws RickException On any error while performing the operation      */
name|EntityMapping
name|getMappingByEntity
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|RickException
function_decl|;
comment|/**      * Getter for the {@link FieldQueryFactory} instance of the Rick. Typical      * implementation will return the factory of the RickYard.      * @return the query factory      */
name|FieldQueryFactory
name|getQueryFavtory
parameter_list|()
function_decl|;
comment|/**      * Getter for the FieldMappings configured for this Site      * @return The {@link FieldMapping} present for this Site.      */
name|FieldMapper
name|getFieldMappings
parameter_list|()
function_decl|;
comment|//    /**
comment|//     * Getter for the Configuration for the RICK
comment|//     * @return the configuration of the RICK
comment|//     */
comment|//    RickConfiguration getRickConfiguration();
comment|/**      * Getter for all the mappings of the parsed reference to a {@link Symbol}      * @param symbol the reference to the symbol      * @return the mappings for the parsed Symbol      * @throws RickException On any error while performing the operation      */
name|Collection
argument_list|<
name|EntityMapping
argument_list|>
name|getMappingsBySymbol
parameter_list|(
name|String
name|symbol
parameter_list|)
throws|throws
name|RickException
function_decl|;
comment|/**      * Searches for symbols based on the parsed {@link FieldQuery} and returns      * the references (ids). Note that selected fields of the query are ignored.      * @param query the query      * @return the references of the found symbols      * @throws RickException On any error while performing the operation      */
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findSymbolReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|RickException
function_decl|;
comment|/**      * Searches for symbols based on the parsed {@link FieldQuery} and returns      * representations as defined by the selected fields of the query. Note that      * if the query defines also {@link Constraint}s for selected fields, that      * the returned representation will only contain values selected by such      * constraints.      * @param query the query      * @return the found symbols as representation containing only the selected      * fields and there values.      * @throws RickException On any error while performing the operation      */
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|RickException
function_decl|;
comment|/**      * Searches for Signs based on the parsed {@link FieldQuery} and returns      * the selected Signs including the whole representation. Note that selected      * fields of the query are ignored.      * @param query the query      * @return All Entities selected by the Query.      * @throws RickException On any error while performing the operation      */
name|QueryResultList
argument_list|<
name|Symbol
argument_list|>
name|findSymbols
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|RickException
function_decl|;
block|}
end_interface

end_unit

