begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
package|;
end_package

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|Rick
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteManager
import|;
end_import

begin_comment
comment|/**  *<p>The Yard represents a local cache for {@link Representation}s of the Entities  * and Symbols managed by a referenced site.<p>  *</p>  *<p> Referenced Sites need to provide the configuration if there representations  * should be cached locally. This is done by using one of the defined {@link CacheStrategy}.  *</p>  *<p>The Idea is not to have one big Yard that caches all the representations, but  * to provide the possibility to use different caches. This means, that each  * {@link ReferencedSite} can have its own Yard instance. However  * several Sites might also use the same Yard.</p>  *<p>The {@link YardManager} is an singleton services that manages the different  * Yard instances and provides an central point of access for the {@link Rick}  * and the {@link ReferencedSiteManager}.</p>  *<p> This should also allow for implementing Yards that are based on  *<ul>  *<li> Indexes generated by dumps of the referred Site</li>  *<li> local installations of the software used by the referred site</li>  *<li> and so on ...</li>  *</ul>  *  * TODO: The framework need to provide something like a default Yord  * TODO: The framework need to provide a special Yard for storing {@link Symbol}  * and {@link EntityMapping} information.  *  *<p>Side note: The name yard was chosen because in farming the word "rick"  * was used to describe small bales of Hay or Corn that are stacked in a  * criss-crossed fashion. The word "rick yard" describes a farm-yard containing  * ricks of hay or corn.</p>  * @author Rupert Westenthaler  *  * TODO: Need to decide how Yards are linked to the Site for which they  * cache entities.  *  */
end_comment

begin_interface
specifier|public
interface|interface
name|Yard
block|{
name|String
name|ID
init|=
literal|"eu.iksproject.rick.yard.id"
decl_stmt|;
name|String
name|NAME
init|=
literal|"eu.iksproject.rick.yard.name"
decl_stmt|;
name|String
name|DESCRIPTION
init|=
literal|"eu.iksproject.rick.yard.description"
decl_stmt|;
comment|/**      * Getter for the unique ID of the Yard (within the local rick node)      * @return the id      */
name|String
name|getId
parameter_list|()
function_decl|;
name|String
name|getName
parameter_list|()
function_decl|;
name|String
name|getDescription
parameter_list|()
function_decl|;
comment|/**      * Creates a new representation. The Yard is responsible to assign a valid      * ID.      * @return the created Representation initialised with a valid ID      */
name|Representation
name|create
parameter_list|()
function_decl|;
comment|/**      * Creates a new representation for the given id      * @param id the id for the new representation or<code>null</code> to      * indicate that the Yard should assign an id.      * @return the created Representation      * @throws IllegalArgumentException if the parsed id is not valid or there      * exists already a representation with the parsed id.      */
name|Representation
name|create
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
comment|/**      * Stores the representation in the Yard. if the parsed representation is      * not present in the Yard it will add it to the Yard.      * @param representation the representation      * @throws IllegalArgumentException if<code>null</code> is parsed as argument or      * the representation is not managed (e.g was not created by using this yard).      */
name|void
name|store
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
comment|/**      * Removes the {@link Representation} with the given id      * @param id the id      * @throws IllegalArgumentException if the parsed ID is null or not valid      * formatted      */
name|void
name|remove
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
comment|/**      * checks if a representation with the given id is present in the Yard      * @param id the id. Calls with<code>null</code> are ignored      * @return<code>true</code> if a representation with the id is present in      * the Yard. Otherwise<code>false</code>.      * @throws IllegalArgumentException if the parsed ID is not valid      * formatted      */
name|boolean
name|isRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
function_decl|;
comment|/**      * Getter for the representation based on the id. Calls with      *<code>id = null</code> should return null.      * @param id the id.      * @return The representation with the parsed id or<code>null</code> if      * no representation with this id is present in the Yard      * @throws IllegalArgumentException if the parsed ID is not valid      * formatted      */
name|Representation
name|getRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
function_decl|;
comment|/**      * Updates the store with the new state of the parsed representation      * @param represnetation the representation      * @throws IllegalArgumentException if the parsed representation<code>null</code>      * or not present in the Yard      */
name|void
name|update
parameter_list|(
name|Representation
name|represnetation
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
comment|/*  * TODO: Maybe one would like to add status Information about cached  *       Representations for registered Sites.  */
comment|// enum ProcessingStatus {
comment|//        scheduled,
comment|//        processing,
comment|//        stored
comment|//    };
comment|//    ProcessingStatus getStatus(Site site);
comment|//    ProcessingStatus getStatus(String entityId);
block|}
end_interface

end_unit

