begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Filters elements of the base Iterator base on the generic type of this one  * @author Rupert Westenthaler  *  * @param<T> the type of elements returned by this iterator  */
end_comment

begin_class
specifier|public
class|class
name|TypeSaveIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
decl_stmt|;
specifier|protected
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
specifier|private
name|T
name|next
decl_stmt|;
comment|/** 	 * Constructs an iterator that selects only elements of the parsed iterator  	 * that are assignable to the parse type 	 * @param it the base iterator 	 * @param type the type all elements of this Iterator need to be assignable to. 	 */
specifier|public
name|TypeSaveIterator
parameter_list|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed iterator MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed type MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
comment|//init next ...
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|T
name|next
parameter_list|()
block|{
name|T
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|T
name|prepareNext
parameter_list|()
block|{
name|Object
name|check
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|check
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|check
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|check
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

