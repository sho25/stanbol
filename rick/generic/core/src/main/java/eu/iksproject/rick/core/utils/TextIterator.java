begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TextIterator
implements|implements
name|Iterator
argument_list|<
name|Text
argument_list|>
block|{
specifier|protected
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
decl_stmt|;
specifier|private
name|Text
name|next
decl_stmt|;
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isNullLanguage
decl_stmt|;
specifier|protected
specifier|final
name|ValueFactory
name|valueFactory
decl_stmt|;
comment|/** 	 * Creates an instance that iterates over values and returns {@link Text} 	 * instances that confirm to the active languages. If no languages are parsed 	 * or<code>null</code> is parsed as a language, this Iterator also creates 	 * and returns {@link Text} instances for {@link String} values. 	 * @param valueFactory the factory used to create text instances for String values 	 * @param it the iterator 	 * @param languages The active languages or no values to accept all languages 	 */
specifier|public
name|TextIterator
parameter_list|(
name|ValueFactory
name|valueFactory
parameter_list|,
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed iterator MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|valueFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed ValueFactory MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
if|if
condition|(
name|languages
operator|!=
literal|null
operator|&&
name|languages
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languages
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|isNullLanguage
operator|=
name|this
operator|.
name|languages
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|languages
operator|=
literal|null
expr_stmt|;
name|isNullLanguage
operator|=
literal|true
expr_stmt|;
block|}
comment|//init next ...
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Text
name|next
parameter_list|()
block|{
name|Text
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
specifier|protected
name|Text
name|prepareNext
parameter_list|()
block|{
name|Object
name|check
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|check
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|check
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|check
decl_stmt|;
if|if
condition|(
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|contains
argument_list|(
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|text
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isNullLanguage
operator|&&
name|check
operator|instanceof
name|String
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createText
argument_list|(
operator|(
name|String
operator|)
name|check
argument_list|)
return|;
block|}
comment|//type does not fit -> ignore
block|}
comment|//no more element and still nothing found ... return end of iteration
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

