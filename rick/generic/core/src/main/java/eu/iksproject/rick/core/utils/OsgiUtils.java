begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ConfiguredSite
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntityDereferencer
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_comment
comment|/**  * This class contains some utilities for osgi  * TODO: Check if they are not available in some std. library  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OsgiUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OsgiUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|OsgiUtils
parameter_list|()
block|{
comment|/* do not create instances of utility classes*/
block|}
comment|/**      * Checks if a value is present      * @param propertyName The key for the property      * @return the value      * @throws ConfigurationException if the property is not present      */
specifier|public
specifier|final
specifier|static
name|Object
name|checkProperty
parameter_list|(
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|ConfigurationException
block|{
return|return
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|propertyName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Checks if the value is present. If not it returns the parse defaultValue.      * If the value and the default value is null, it throws an {@link ConfigurationException}      * @param properties the properties to search      * @param propertyName the name of the proeprty      * @param defaultValue the default value or<code>null</code> if none      * @return the value of the property (guaranteed NOT<code>null</code>)      * @throws ConfigurationException In case the property is not present and no default value was parsed      */
specifier|public
specifier|final
specifier|static
name|Object
name|checkProperty
parameter_list|(
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|propertyName
argument_list|,
literal|"No value found for this required property"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**      * Checks if the property is present and the value can be converted to an {@link URI}      * @param propertyName The key for the property      * @return the value      * @throws ConfigurationException if the property is not present or the      * configured value is no valid URI      */
specifier|public
specifier|final
specifier|static
name|URI
name|checkUriProperty
parameter_list|(
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|uri
init|=
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|propertyName
argument_list|,
literal|"Property needs to be a valid URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks if the property is present and the value can be converted to an {@link URL}      * @param propertyName The key for the property      * @return the value      * @throws ConfigurationException if the property is not present or the      * configured value is no valid URL      */
specifier|public
specifier|final
specifier|static
name|URL
name|checkUrlProperty
parameter_list|(
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|uri
init|=
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|propertyName
argument_list|,
literal|"Property value needs to be a valid URL"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks if the value of a property is a member of the parsed Enumeration      * @param<T> the Enumeration      * @param enumeration the class of the enumeration      * @param properties the configuration      * @param propertyName the name of the property to check      * @return the member of the enumeration      * @throws ConfigurationException if the property is missing or the value is      * not a member of the parsed enumeration      */
specifier|public
specifier|final
specifier|static
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|checkEnumProperty
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|enumeration
parameter_list|,
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|value
init|=
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumeration
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|propertyName
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Property value %s is not a member of Enumeration %s!"
argument_list|,
name|value
argument_list|,
name|enumeration
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * search for a {@link ComponentFactory} that has the component.name property      * as configured by {@link ConfiguredSite#DEREFERENCER_TYPE}. Than creates      * an new instance of an {@link EntityDereferencer} and configures it with      * all the properties present for this instance of {@link ReferencedSite} (      * only component.* and service.* properties are ignored).<br>      * The {@link ComponentInstance} and the {@link EntityDereferencer} are      * stored in the according memeber variables.      * @return the ComponentInstance of<code>null</code> if no ComponentFactory      *    was found for the parsed componentService      * @throws ConfigurationException if the {@link ConfiguredSite#DEREFERENCER_TYPE}      * is not present or it's value does not allow to create a {@link EntityDereferencer}      * instance.      */
specifier|public
specifier|static
name|ComponentInstance
name|createComonentInstance
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|componentName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|componentService
parameter_list|)
throws|throws
name|ConfigurationException
block|{
comment|//Object value = checkProperty(DEREFERENCER_TYPE);
specifier|final
name|ServiceReference
index|[]
name|refs
decl_stmt|;
try|try
block|{
name|refs
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getServiceReferences
argument_list|(
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"(component.name="
operator|+
name|componentName
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|property
argument_list|,
literal|"Unable to get ComponentFactory for parsed value "
operator|+
name|componentName
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|refs
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|//log some warning if more than one Service Reference was found by the query!
name|log
operator|.
name|warn
argument_list|(
literal|"Multiple ComponentFactories found for the property "
operator|+
name|property
operator|+
literal|"="
operator|+
name|componentName
operator|+
literal|"! -> First one was used to instantiate the "
operator|+
name|componentService
operator|+
literal|" Service"
argument_list|)
expr_stmt|;
block|}
name|Object
name|dereferencerFactorySerivceObject
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|dereferencerFactorySerivceObject
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// I trust the OSGI framework, that the returned service implements the requested Interface
name|ComponentFactory
name|dereferencerFactory
init|=
operator|(
name|ComponentFactory
operator|)
name|dereferencerFactorySerivceObject
decl_stmt|;
comment|//log.debug("build configuration for "+EntityDereferencer.class.getSimpleName()+" "+componentName.toString());
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|copyConfig
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|ComponentInstance
name|dereferencerComponentInstance
init|=
name|dereferencerFactory
operator|.
name|newInstance
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|dereferencerFactory
operator|=
literal|null
expr_stmt|;
comment|//now
if|if
condition|(
name|dereferencerComponentInstance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create ComponentInstance for Property value "
operator|+
name|componentName
operator|+
literal|"!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|componentService
operator|.
name|isAssignableFrom
argument_list|(
name|dereferencerComponentInstance
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|dereferencerComponentInstance
return|;
block|}
else|else
block|{
name|dereferencerComponentInstance
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|//we can not use it -> so dispose it!
name|dereferencerComponentInstance
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ComponentInstance created for Property value "
operator|+
name|componentName
operator|+
literal|" does not provide the "
operator|+
name|componentService
operator|+
literal|" Service!"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|//we need to unget the ComponentFactory!
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|ungetService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dereferencerFactorySerivceObject
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Copy all properties excluding "{@value Constants#OBJECTCLASS}",      * "component.*" and "service.*" to the returned Dictionary      * @param source the source      * @return the target      */
specifier|public
specifier|static
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copyConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|keys
init|=
name|source
operator|.
name|keys
argument_list|()
init|;
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|keys
operator|.
name|nextElement
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"component."
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"service."
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
condition|)
block|{
comment|//log.debug("> copy key" + key);
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|source
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//log.debug("> ignore key" + key);
block|}
block|}
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

