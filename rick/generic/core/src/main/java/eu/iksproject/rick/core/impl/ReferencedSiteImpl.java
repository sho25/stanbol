begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|MetaTypeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|site
operator|.
name|AbstractEntityDereferencer
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|OsgiUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ConfiguredSite
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntityDereferencer
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|CacheStrategy
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_comment
comment|/**  * This in the Default implementation of the {@link ReferencedSite} interface.  * However this implementation forwards calls to methods defined within the  * {@link EntityDereferencer} and {@link EntitySearcher} to sub components   * (See the detailed description below).<p>  * Each {@link ReferencedSite} with an {@link CacheStrategy} other than  * {@link CacheStrategy#none} needs an associated {@link Cache}.  *<p>   * The Initialisation of the sub-components:  *<ul>  *<li><b>{@link EntityDereferencer}:</b> Implementations of this interface are  *      specific to the used protocol/technology of the referenced site.  *      Because of that calls to methods defined in this interface are forwarded  *      to an site specific instance of the {@link EntityDereferencer} interface  *      as configured by the {@link ConfiguredSite#DEREFERENCER_TYPE} property.<br>  *      During activation the the {@link BundleContext} is used to  *      search for {@link ComponentFactory} with the configuration<code>  *      "component.name= {@link ComponentContext#getProperties()}.get(  *      {@link ConfiguredSite#DEREFERENCER_TYPE})</code>. This factory is used  *      to create an instance of {@link EntityDereferencer}.<br>  *      Note also, that the configuration of this instance that is covered   *      by the {@link ConfiguredSite} interface are parsed to the   *      {@link EntityDereferencer} instance.  *<li><b> {@link EntitySearcher}:</b> Implementations of this interface are  *      also specific to the used protocol/technology of the referenced site.  *      Because of that calls to methods defined in this interface are forwarded  *      to an site specific instance of the {@link EntitySearcher} interface  *      as configured by the {@link ConfiguredSite#SEARCHER_TYPE} property.<br>  *      The initialisation of this instance works similar as described for the  *      {@link EntityDereferencer}. However if the value of the {@link ConfiguredSite#SEARCHER_TYPE}  *      is equals to {@link ConfiguredSite#DEREFERENCER_TYPE} or the   *      {@link ConfiguredSite#SEARCHER_TYPE} is not defined at all, than the  *      Dereferencer Instance is also used as {@link EntitySearcher}. If the   *      according cast does not succeed, an {@link ConfigurationException} for the  *      {@link ConfiguredSite#SEARCHER_TYPE} property is thrown.  *<li><b>{@link Cache}:</b> An instance of a {@link Cache} is used to  *      cache {@link Representation}s loaded form the Site. A cache is a wrapper  *      over a {@link Yard} instance that allows to configure what data are  *      stored for each representation cached form this referenced site. A  *      {@link ServiceTracker} is used for managing the dependency with the cache.  *      So if a cache is no longer available a referenced site can still be used -  *      only the local cache can not be used to retrieve entity representations.  *</ul>  *   * TODO: implement {@link MetaTypeProvider} for this Component!  * The Goal is to dynamically provide the PropertyOptions for  *  - Properties that use Enumerations  *  - available EntityDereferencer Types  *  - available EntitySearcher Types  * @author Rupert Westenthaler  *  */
end_comment

begin_decl_stmt
annotation|@
name|Component
argument_list|(
name|name
operator|=
literal|"eu.iksproject.rick.site.referencedSite"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|//the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|ReferencedSite
operator|.
name|class
argument_list|)
decl|@
name|Properties
argument_list|(
name|value
operator|=
block|{ 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|ID
argument_list|,
name|value
operator|=
literal|"dbPedia"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|NAME
argument_list|,
name|value
operator|=
literal|"DB Pedia"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|DESCRIPTION
argument_list|,
name|value
operator|=
literal|"The OLD Endpoint for Wikipedia"
argument_list|)
block|,
comment|/* 		 * TODO: can't use Integer.MAX_VALUE here, because I get a NumberFormatException 		 * in den maven scr plugin. For now use a big number instead 		 */
block|@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|ENTITY_PREFIX
argument_list|,
name|cardinality
operator|=
literal|10000
argument_list|,
name|value
operator|=
block|{
literal|"http://dbpedia.org/resource/"
block|,
literal|"http://dbpedia.org/ontology/"
block|}
argument_list|)
block|,  		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|ACCESS_URI
argument_list|,
name|value
operator|=
literal|"http://dbpedia.org/sparql/"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|DEREFERENCER_TYPE
argument_list|,
name|options
operator|=
block|{ 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEREFERENCER_TYPE
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|""
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEREFERENCER_TYPE
operator|+
literal|".option.sparql"
argument_list|,
name|name
operator|=
literal|"eu.iksproject.rick.site.SparqlDereferencer"
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEREFERENCER_TYPE
operator|+
literal|".option.coolUri"
argument_list|,
name|name
operator|=
literal|"eu.iksproject.rick.site.CoolUriDereferencer"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"eu.iksproject.rick.site.SparqlDereferencer"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|QUERY_URI
argument_list|,
name|value
operator|=
literal|"http://dbpedia.org/sparql"
argument_list|)
block|,
comment|//the deri server has better performance
block|@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|SEARCHER_TYPE
argument_list|,
name|options
operator|=
block|{ 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|SEARCHER_TYPE
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|""
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|SEARCHER_TYPE
operator|+
literal|".option.sparql"
argument_list|,
name|name
operator|=
literal|"eu.iksproject.rick.site.SparqlSearcher"
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|SEARCHER_TYPE
operator|+
literal|".option.sparql-virtuoso"
argument_list|,
name|name
operator|=
literal|"eu.iksproject.rick.site.VirtuosoSearcher"
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|SEARCHER_TYPE
operator|+
literal|".option.sparql-larq"
argument_list|,
name|name
operator|=
literal|"eu.iksproject.rick.site.LarqSearcher"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"eu.iksproject.rick.site.VirtuosoSearcher"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|DEFAULT_SYMBOL_STATE
argument_list|,
name|options
operator|=
block|{ 				@
name|PropertyOption
argument_list|(
comment|//seems, that name and value are exchanged ...
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.proposed"
argument_list|,
name|name
operator|=
literal|"proposed"
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.active"
argument_list|,
name|name
operator|=
literal|"active"
argument_list|)
comment|//the other states make no sense for new symbols
block|}
argument_list|,
name|value
operator|=
literal|"proposed"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|DEFAULT_MAPEED_ENTITY_STATE
argument_list|,
name|options
operator|=
block|{ 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_MAPEED_ENTITY_STATE
operator|+
literal|".option.proposed"
argument_list|,
name|name
operator|=
literal|"proposed"
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_MAPEED_ENTITY_STATE
operator|+
literal|".option.confirmed"
argument_list|,
name|name
operator|=
literal|"confirmed"
argument_list|)
comment|//the other states make no sense for new symbols
block|}
argument_list|,
name|value
operator|=
literal|"proposed"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|DEFAULT_EXPIRE_DURATION
argument_list|,
name|options
operator|=
block|{ 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.oneMonth"
argument_list|,
name|name
operator|=
literal|""
operator|+
operator|(
literal|1000L
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|30
operator|)
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.halfYear"
argument_list|,
name|name
operator|=
literal|""
operator|+
operator|(
literal|1000L
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|183
operator|)
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.oneYear"
argument_list|,
name|name
operator|=
literal|""
operator|+
operator|(
literal|1000L
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|365
operator|)
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|"0"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"0"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|CACHE_STRATEGY
argument_list|,
name|options
operator|=
block|{ 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|CACHE_STRATEGY
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|"none"
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|CACHE_STRATEGY
operator|+
literal|".option.used"
argument_list|,
name|name
operator|=
literal|"used"
argument_list|)
block|, 				@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ConfiguredSite
operator|.
name|CACHE_STRATEGY
operator|+
literal|".option.all"
argument_list|,
name|name
operator|=
literal|"all"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"none"
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|CACHE_ID
argument_list|)
block|, 		@
name|Property
argument_list|(
name|name
operator|=
name|ConfiguredSite
operator|.
name|SITE_FIELD_MAPPINGS
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|,
comment|//positive number to use an Array
name|value
operator|=
block|{
literal|"dbp-ont:*"
block|,
literal|"dbp-ont:thumbnail | d=xsd:anyURI> foaf:depiction"
block|,
literal|"dbp-prop:latitude | d=xsd:decimal> geo:lat"
block|,
literal|"dbp-prop:longitude | d=xsd:decimal> geo:long"
block|,
literal|"dbp-prop:population | d=xsd:integer"
block|,
literal|"dbp-prop:website | d=xsd:anyURI> foaf:homepage"
block|}
argument_list|)
block|}
argument_list|)
decl|public
name|class
name|ReferencedSiteImpl
decl|implements
name|ReferencedSite
block|{
specifier|static
specifier|final
name|int
name|maxInt
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|protected
specifier|final
name|Logger
name|log
decl_stmt|;
specifier|protected
name|ComponentContext
name|context
decl_stmt|;
specifier|protected
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
decl_stmt|;
specifier|protected
name|FieldMapper
name|fieldMappings
decl_stmt|;
specifier|private
specifier|final
name|Object
name|searcherAndDereferencerLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|Boolean
name|dereferencerEqualsEntitySearcherComponent
decl_stmt|;
specifier|private
name|ComponentFactoryListener
name|dereferencerComponentFactoryListener
decl_stmt|;
specifier|private
name|ComponentFactoryListener
name|searcherComponentFactoryListener
decl_stmt|;
specifier|private
name|String
name|dereferencerComponentName
decl_stmt|;
specifier|private
name|ComponentInstance
name|dereferencerComponentInstance
decl_stmt|;
specifier|protected
name|EntityDereferencer
name|dereferencer
decl_stmt|;
specifier|private
name|String
name|entitySearcherComponentName
decl_stmt|;
specifier|private
name|EntitySearcher
name|entitySearcher
decl_stmt|;
specifier|private
name|ComponentInstance
name|entitySearcherComponentInstace
decl_stmt|;
specifier|private
name|String
name|accessUri
decl_stmt|;
specifier|private
name|String
name|queryUri
decl_stmt|;
specifier|private
name|CacheStrategy
name|cacheStrategy
decl_stmt|;
specifier|private
name|String
name|cacheId
decl_stmt|;
specifier|private
name|ServiceTracker
name|cacheTracker
decl_stmt|;
specifier|public
name|ReferencedSiteImpl
parameter_list|()
block|{
name|this
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReferencedSiteImpl
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ReferencedSiteImpl
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"create instance of "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getAccessUri
parameter_list|()
block|{
return|return
name|accessUri
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|CacheStrategy
name|getCacheStrategy
parameter_list|()
block|{
return|return
name|cacheStrategy
return|;
block|}
comment|/** 	 * This implementation returns the ExpireDuration. 0 as default if no 	 * configuration is present. -1 in case the configuration can not be converted 	 * to a number. 	 */
annotation|@
name|Override
specifier|public
specifier|final
name|long
name|getDefaultExpireDuration
parameter_list|()
block|{
name|Object
name|durationObject
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_EXPIRE_DURATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|durationObject
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|durationObject
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration "
operator|+
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|"="
operator|+
name|durationObject
operator|+
literal|" can not be converted to an Number -> return -1"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|EntityMapping
operator|.
name|MappingState
name|getDefaultMappedEntityState
parameter_list|()
block|{
name|Object
name|stateObject
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_MAPEED_ENTITY_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateObject
operator|==
literal|null
condition|)
block|{
return|return
name|EntityMapping
operator|.
name|DEFAULT_MAPPING_STATE
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|EntityMapping
operator|.
name|MappingState
operator|.
name|valueOf
argument_list|(
name|stateObject
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration "
operator|+
name|DEFAULT_MAPEED_ENTITY_STATE
operator|+
literal|"="
operator|+
name|stateObject
operator|+
literal|" dose not match any entry in the "
operator|+
name|EntityMapping
operator|.
name|MappingState
operator|.
name|class
operator|+
literal|" Enumeration ( one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|EntityMapping
operator|.
name|MappingState
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|") "
operator|+
literal|"-> return the default state "
operator|+
name|EntityMapping
operator|.
name|DEFAULT_MAPPING_STATE
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|EntityMapping
operator|.
name|DEFAULT_MAPPING_STATE
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Symbol
operator|.
name|SymbolState
name|getDefaultSymbolState
parameter_list|()
block|{
name|Object
name|stateObject
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_SYMBOL_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateObject
operator|==
literal|null
condition|)
block|{
return|return
name|Symbol
operator|.
name|DEFAULT_SYMBOL_STATE
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Symbol
operator|.
name|SymbolState
operator|.
name|valueOf
argument_list|(
name|stateObject
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration "
operator|+
name|DEFAULT_SYMBOL_STATE
operator|+
literal|"="
operator|+
name|stateObject
operator|+
literal|" dose not match any entry in the "
operator|+
name|Symbol
operator|.
name|SymbolState
operator|.
name|class
operator|+
literal|" Enumeration ( one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Symbol
operator|.
name|SymbolState
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|") "
operator|+
literal|"-> return the default state "
operator|+
name|Symbol
operator|.
name|DEFAULT_SYMBOL_STATE
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Symbol
operator|.
name|DEFAULT_SYMBOL_STATE
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getDereferencerType
parameter_list|()
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|DEREFERENCER_TYPE
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|""
operator|+
name|properties
operator|.
name|get
argument_list|(
name|DESCRIPTION
argument_list|)
return|;
comment|//use ""+ because value might be null
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getId
parameter_list|()
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|ID
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
name|Object
name|name
init|=
name|properties
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
return|return
name|name
operator|!=
literal|null
condition|?
name|name
operator|.
name|toString
argument_list|()
else|:
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
index|[]
name|getEntityPrefixes
parameter_list|()
block|{
name|Object
name|prefixes
init|=
name|properties
operator|.
name|get
argument_list|(
name|ENTITY_PREFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixes
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{}
return|;
block|}
else|else
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|prefixes
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueryType
parameter_list|()
block|{
name|Object
name|queryType
init|=
name|properties
operator|.
name|get
argument_list|(
name|SEARCHER_TYPE
argument_list|)
decl_stmt|;
return|return
name|queryType
operator|!=
literal|null
condition|?
name|queryType
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueryUri
parameter_list|()
block|{
return|return
name|queryUri
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Sign
argument_list|>
name|findSigns
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
name|List
argument_list|<
name|Sign
argument_list|>
name|results
decl_stmt|;
if|if
condition|(
name|cacheStrategy
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
comment|//TODO: check if query can be executed based on the base configuration of the Cache
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|//When using the Cache, directly get the representations!
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|representations
init|=
name|cache
operator|.
name|findRepresentation
argument_list|(
operator|(
name|query
operator|)
argument_list|)
decl_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Sign
argument_list|>
argument_list|(
name|representations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Representation
name|result
range|:
name|representations
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|ModelUtils
operator|.
name|createSign
argument_list|(
name|result
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Sign
argument_list|>
argument_list|(
name|query
argument_list|,
name|results
argument_list|,
name|Sign
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|entitySearcherComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|cacheId
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|cacheId
argument_list|,
name|queryUri
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|entitySearcherComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s not active and no EntitySeracher configured that could be used as Fallback"
argument_list|,
name|cacheId
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s currently not active will query remote Site %s as fallback"
argument_list|,
name|cacheId
argument_list|,
name|queryUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|entityIds
decl_stmt|;
try|try
block|{
name|entityIds
operator|=
name|entitySearcher
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to execute query on remote site %s with entitySearcher %s!"
argument_list|,
name|queryUri
argument_list|,
name|entitySearcherComponentName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Sign
argument_list|>
name|entities
init|=
operator|new
name|ArrayList
argument_list|<
name|Sign
argument_list|>
argument_list|(
name|entityIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|ReferencedSiteException
name|lastError
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|entityIds
control|)
block|{
name|Sign
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|getSign
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create Entity for ID that was selected by an FieldQuery (id="
operator|+
name|id
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|entities
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReferencedSiteException
name|e
parameter_list|)
block|{
name|lastError
operator|=
name|e
expr_stmt|;
name|errors
operator|++
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Representation for Entity %s. -> %d Error%s for %d Entities in QueryResult (Reason:%s)"
argument_list|,
name|id
argument_list|,
name|errors
argument_list|,
name|errors
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
argument_list|,
name|entityIds
operator|.
name|size
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastError
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to get anly Representations for Entities selected by the parsed Query (Root-Cause is the last Exception trown)"
argument_list|,
name|lastError
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get %d/%d Represetnations for selected Entities."
argument_list|,
name|errors
argument_list|,
name|entityIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Stack trace of the last Exception:"
argument_list|,
name|lastError
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Sign
argument_list|>
argument_list|(
name|query
argument_list|,
name|entities
argument_list|,
name|Sign
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
if|if
condition|(
name|cacheStrategy
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
comment|//TODO: check if query can be executed based on the base configuration of the Cache
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|entitySearcherComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|cacheId
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|cacheId
argument_list|,
name|queryUri
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|entitySearcherComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s not active and no EntitySeracher configured that could be used as Fallback"
argument_list|,
name|cacheId
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s currently not active will query remote Site %s as fallback"
argument_list|,
name|cacheId
argument_list|,
name|queryUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EntitySearcher %s not available for remote site %s!"
argument_list|,
name|entitySearcherComponentName
argument_list|,
name|queryUri
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
return|return
name|entitySearcher
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable execute Query on remote site "
operator|+
name|queryUri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
if|if
condition|(
name|cacheStrategy
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
comment|//TODO: check if query can be executed based on the base configuration of the Cache
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|entitySearcherComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|cacheId
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|cacheId
argument_list|,
name|queryUri
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|entitySearcherComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s not active and no EntitySeracher configured that could be used as Fallback"
argument_list|,
name|cacheId
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s currently not active will query remote Site %s as fallback"
argument_list|,
name|cacheId
argument_list|,
name|queryUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EntitySearcher %s not available for remote site %s!"
argument_list|,
name|entitySearcherComponentName
argument_list|,
name|queryUri
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
return|return
name|entitySearcher
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable execute Query on remote site "
operator|+
name|queryUri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getContent
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
if|if
condition|(
name|dereferencerComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Content for Entity %s because No dereferencer configured for ReferencedSite %s"
argument_list|,
name|id
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|dereferencer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Dereferencer %s for remote site %s is not available"
argument_list|,
name|dereferencerComponentName
argument_list|,
name|accessUri
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
return|return
name|dereferencer
operator|.
name|dereference
argument_list|(
name|id
argument_list|,
name|contentType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load content for Entity %s and mediaType %s from remote site %s by using dereferencer %s"
argument_list|,
name|id
argument_list|,
name|contentType
argument_list|,
name|accessUri
argument_list|,
name|entitySearcherComponentName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sign
name|getSign
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
name|Representation
name|rep
init|=
literal|null
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rep
operator|=
name|cache
operator|.
name|getRepresentation
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|dereferencerComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s form Cache %s"
argument_list|,
name|id
argument_list|,
name|cacheId
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s form Cache %s. Will dereference from remote site %s"
argument_list|,
name|id
argument_list|,
name|cacheId
argument_list|,
name|getAccessUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|dereferencerComponentName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s because configured Cache %s is currently not available"
argument_list|,
name|id
argument_list|,
name|cacheId
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s is currently not available. Will use remote site %s to load Representation %s"
argument_list|,
name|cacheId
argument_list|,
name|dereferencerComponentName
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
comment|// no cache or not found in cache
if|if
condition|(
name|dereferencer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Entity Dereferencer %s for accessing remote site %s is not available"
argument_list|,
name|dereferencerComponentName
argument_list|,
name|accessUri
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
name|rep
operator|=
name|dereferencer
operator|.
name|dereference
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load Representation for entity %s form remote site %s with dereferencer %s"
argument_list|,
name|id
argument_list|,
name|accessUri
argument_list|,
name|dereferencerComponentName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//representation loaded from remote site and cache is available
if|if
condition|(
name|rep
operator|!=
literal|null
operator|&&
name|cache
operator|!=
literal|null
condition|)
block|{
comment|// -> cache the representation
try|try
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// reassigning the Representation here will remove all
comment|// values not stored in the cache.
comment|// TODO: I am not sure if that is a good or bad thing to do.
name|rep
operator|=
name|cache
operator|.
name|store
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  - cached Representation %s in %d ms"
argument_list|,
name|id
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to cache Represetnation %s in Cache %s! Representation not cached!"
argument_list|,
name|id
argument_list|,
name|cacheId
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  - loaded Representation %s from Cache in %d ms"
argument_list|,
name|id
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rep
operator|!=
literal|null
condition|?
name|ModelUtils
operator|.
name|createSign
argument_list|(
name|rep
argument_list|,
name|getId
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|ReferencedSite
operator|&&
operator|(
operator|(
name|ReferencedSite
operator|)
name|obj
operator|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldMapper
name|getFieldMapper
parameter_list|()
block|{
return|return
name|fieldMappings
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCacheId
parameter_list|()
block|{
return|return
name|cacheId
return|;
block|}
comment|/** 	 * In case {@link CacheStrategy#all} this Method returns the 	 * query factory of the Cache. 	 * Otherwise it returns {@link DefaultQueryFactory#getInstance()}. 	 */
annotation|@
name|Override
specifier|public
name|FieldQueryFactory
name|getQueryFactory
parameter_list|()
block|{
name|FieldQueryFactory
name|factory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheStrategy
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|factory
operator|=
name|cache
operator|.
name|getQueryFactory
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
comment|/** 	 * Internally used to get the Cache for this site. If  	 * {@link CacheStrategy#none}, this methods always returns<code>null</code>, 	 * otherwise it returns the Cache for the configured Yard or<code>null</code> 	 * if no such Cache is available. 	 * @return the cache or<code>null</code> if {@link CacheStrategy#none} or 	 * the configured cache instance is not available. 	 */
specifier|protected
name|Cache
name|getCache
parameter_list|()
block|{
return|return
name|cacheStrategy
operator|==
name|CacheStrategy
operator|.
name|none
condition|?
literal|null
else|:
operator|(
name|Cache
operator|)
name|cacheTracker
operator|.
name|getService
argument_list|()
return|;
block|}
comment|/*-------------------------------------------------------------------------- 	 *  OSGI LIFECYCLE and LISTENER METHODS 	 *-------------------------------------------------------------------------- 	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|YardException
throws|,
name|InvalidSyntaxException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ReferencedSiteImpl
operator|.
name|class
operator|+
literal|" activate with properties "
operator|+
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No Component Context and/or Dictionary properties object parsed to the acticate methode"
argument_list|)
throw|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|context
operator|.
name|getProperties
argument_list|()
expr_stmt|;
comment|//check and init all required properties!
name|accessUri
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|ConfiguredSite
operator|.
name|ACCESS_URI
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|//accessURI is the default for the Query URI
name|queryUri
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|ConfiguredSite
operator|.
name|QUERY_URI
argument_list|,
name|accessUri
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|ID
argument_list|)
expr_stmt|;
name|dereferencerComponentName
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|,
name|ConfiguredSite
operator|.
name|DEREFERENCER_TYPE
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|dereferencerComponentName
operator|.
name|isEmpty
argument_list|()
operator|||
name|dereferencerComponentName
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|dereferencerComponentName
operator|=
literal|null
expr_stmt|;
block|}
name|entitySearcherComponentName
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|this
operator|.
name|properties
argument_list|,
name|ConfiguredSite
operator|.
name|SEARCHER_TYPE
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|entitySearcherComponentName
operator|.
name|isEmpty
argument_list|()
operator|||
name|entitySearcherComponentName
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|entitySearcherComponentName
operator|=
literal|null
expr_stmt|;
block|}
comment|//if the accessUri is the same as the queryUri and both the dereferencer and
comment|//the entitySearcher uses the same component, than we need only one component
comment|//for both dependencies.
name|this
operator|.
name|dereferencerEqualsEntitySearcherComponent
operator|=
name|accessUri
operator|.
name|equals
argument_list|(
name|queryUri
argument_list|)
operator|&&
name|dereferencerComponentName
operator|!=
literal|null
operator|&&
name|dereferencerComponentName
operator|.
name|equals
argument_list|(
name|entitySearcherComponentName
argument_list|)
expr_stmt|;
name|cacheStrategy
operator|=
name|OsgiUtils
operator|.
name|checkEnumProperty
argument_list|(
name|CacheStrategy
operator|.
name|class
argument_list|,
name|properties
argument_list|,
name|ConfiguredSite
operator|.
name|CACHE_STRATEGY
argument_list|)
expr_stmt|;
comment|//check if the congfig is valid
if|if
condition|(
name|this
operator|.
name|cacheStrategy
operator|!=
name|CacheStrategy
operator|.
name|none
condition|)
block|{
comment|//check if the cacheId is configured if cacheStrategy != none
name|this
operator|.
name|cacheId
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|this
operator|.
name|properties
argument_list|,
name|ConfiguredSite
operator|.
name|CACHE_ID
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//check that both dereferencer and searcher are configured if cacheStrategy != all
if|if
condition|(
name|cacheStrategy
operator|!=
name|CacheStrategy
operator|.
name|all
operator|&&
operator|(
name|dereferencerComponentName
operator|==
literal|null
operator|||
name|entitySearcherComponentName
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ConfiguredSite
operator|.
name|CACHE_STRATEGY
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"If the EntitySearcher and/or the EntityDereferencer are set to \"none\", than the used CacheStragegy MUST BE \"all\"! (entitySearcher=%s | dereferencer=%s | cacheStrategy=%s"
argument_list|,
name|dereferencerComponentName
operator|==
literal|null
condition|?
literal|"none"
else|:
name|dereferencerComponentName
argument_list|,
name|entitySearcherComponentName
operator|==
literal|null
condition|?
literal|"none"
else|:
name|entitySearcherComponentName
argument_list|,
name|cacheStrategy
argument_list|)
argument_list|)
throw|;
block|}
comment|//parse the field mappings
name|initFieldmappings
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//now init the referenced Services
name|initDereferencerAndEntitySearcher
argument_list|()
expr_stmt|;
comment|// If a cache is configured init the ServiceTracker used to manage the
comment|// Reference to the cache!
if|if
condition|(
name|cacheId
operator|!=
literal|null
condition|)
block|{
name|String
name|cacheFilter
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)(%s=%s))"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|Cache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Cache
operator|.
name|CACHE_YARD
argument_list|,
name|cacheId
argument_list|)
decl_stmt|;
name|cacheTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|createFilter
argument_list|(
name|cacheFilter
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cacheTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * @param context 	 * @throws ConfigurationException 	 * @throws InvalidSyntaxException 	 */
specifier|private
name|void
name|initFieldmappings
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|InvalidSyntaxException
block|{
comment|//create the FieldMappings config
name|fieldMappings
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|configuredMappingsObject
init|=
name|properties
operator|.
name|get
argument_list|(
name|ConfiguredSite
operator|.
name|SITE_FIELD_MAPPINGS
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> Parse FieldMappungs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuredMappingsObject
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuredMappingsObject
operator|instanceof
name|String
index|[]
condition|)
block|{
for|for
control|(
name|String
name|configuredMapping
range|:
operator|(
name|String
index|[]
operator|)
name|configuredMappingsObject
control|)
block|{
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|configuredMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   - add FieldMapping "
operator|+
name|mapping
argument_list|)
expr_stmt|;
name|fieldMappings
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//TODO maybe write an utility method that get values from arrays and collections
name|log
operator|.
name|warn
argument_list|(
literal|"Configured Mappings are not parsed as String[] (type="
operator|+
name|configuredMappingsObject
operator|.
name|getClass
argument_list|()
operator|+
literal|" value="
operator|+
name|configuredMappingsObject
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"<- no FieldMappngs configured"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Initialise the dereferencer and searcher component as soon as the according 	 * {@link ComponentFactory} gets registered.<p> 	 * First this Methods tries to find the according {@link ServiceReference}s 	 * directly. If they are not available (e.g. because the component factories 	 * are not yet started) than it adds a {@link ServiceListener} for the missing 	 * {@link ComponentFactory} that calls the {@link #createDereferencerComponent(ComponentFactory)} 	 * and {@link #createEntitySearcherComponent(ComponentFactory)} as soon as 	 * the factory gets registered. 	 * @throws InvalidSyntaxException if the #entitySearcherComponentName or the 	 * {@link #dereferencerComponentName} somehow cause an invalid formated string 	 * that can not be used to parse a {@link Filter}. 	 */
specifier|private
name|void
name|initDereferencerAndEntitySearcher
parameter_list|()
throws|throws
name|InvalidSyntaxException
block|{
if|if
condition|(
name|entitySearcherComponentName
operator|!=
literal|null
condition|)
block|{
name|String
name|componentNameFilterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
literal|"component.name"
argument_list|,
name|entitySearcherComponentName
argument_list|)
decl_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)%s)"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
name|ServiceReference
index|[]
name|refs
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getServiceReferences
argument_list|(
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|createEntitySearcherComponent
argument_list|(
operator|(
name|ComponentFactory
operator|)
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//service factory not yet available -> add servicelistener
name|this
operator|.
name|searcherComponentFactoryListener
operator|=
operator|new
name|ComponentFactoryListener
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addServiceListener
argument_list|(
name|this
operator|.
name|searcherComponentFactoryListener
argument_list|,
name|filterString
argument_list|)
expr_stmt|;
comment|//NOTE: here the filter MUST include also the objectClass!
block|}
comment|//context.getComponentInstance().dispose();
comment|//throw an exception to avoid an successful activation
block|}
if|if
condition|(
name|dereferencerComponentName
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|dereferencerEqualsEntitySearcherComponent
condition|)
block|{
name|String
name|componentNameFilterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
literal|"component.name"
argument_list|,
name|dereferencerComponentName
argument_list|)
decl_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)%s)"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
name|ServiceReference
index|[]
name|refs
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getServiceReferences
argument_list|(
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|createDereferencerComponent
argument_list|(
operator|(
name|ComponentFactory
operator|)
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//service factory not yet available -> add servicelistener
name|this
operator|.
name|dereferencerComponentFactoryListener
operator|=
operator|new
name|ComponentFactoryListener
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addServiceListener
argument_list|(
name|this
operator|.
name|dereferencerComponentFactoryListener
argument_list|,
name|filterString
argument_list|)
expr_stmt|;
comment|//NOTE: here the filter MUST include also the objectClass!
block|}
block|}
block|}
comment|/** 	 * Creates the entity searcher component used by this {@link ReferencedSite} 	 * (and configured via the {@link ConfiguredSite#SEARCHER_TYPE} property).<p> 	 * If the {@link ConfiguredSite#DEREFERENCER_TYPE} is set to the same vale 	 * and the {@link #accessUri} also equals the {@link #queryUri}, than the 	 * component created for the entity searcher is also used as dereferencer. 	 * @param factory The component factory used to create the  	 * {@link #entitySearcherComponentInstace} 	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|createEntitySearcherComponent
parameter_list|(
name|ComponentFactory
name|factory
parameter_list|)
block|{
comment|//both create*** methods sync on the searcherAndDereferencerLock to avoid
comment|//multiple component instances because of concurrent calls
synchronized|synchronized
init|(
name|this
operator|.
name|searcherAndDereferencerLock
init|)
block|{
if|if
condition|(
name|entitySearcherComponentInstace
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|entitySearcherComponentInstace
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|entitySearcher
operator|=
operator|(
name|EntitySearcher
operator|)
name|entitySearcherComponentInstace
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dereferencerEqualsEntitySearcherComponent
condition|)
block|{
name|this
operator|.
name|dereferencer
operator|=
operator|(
name|EntityDereferencer
operator|)
name|entitySearcher
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Creates the entity dereferencer component used by this {@link ReferencedSite}. 	 * The implementation used as the dereferencer is configured by the 	 * {@link ConfiguredSite#DEREFERENCER_TYPE} property. 	 * @param factory the component factory used to create the {@link #dereferencer} 	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|createDereferencerComponent
parameter_list|(
name|ComponentFactory
name|factory
parameter_list|)
block|{
comment|//both create*** methods sync on searcherAndDereferencerLock to avoid
comment|//multiple component instances because of concurrent calls
synchronized|synchronized
init|(
name|this
operator|.
name|searcherAndDereferencerLock
init|)
block|{
if|if
condition|(
name|dereferencerComponentInstance
operator|==
literal|null
condition|)
block|{
name|dereferencerComponentInstance
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|dereferencer
operator|=
operator|(
name|EntityDereferencer
operator|)
name|dereferencerComponentInstance
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Simple {@link ServiceListener} implementation that is used to get notified 	 * if one of the {@link ComponentFactory component factories} for the 	 * configured implementation of the {@link EntityDereferencer} or  	 * {@link EntitySearcher} interfaces get registered. 	 * @author Rupert Westenthaler 	 * 	 */
specifier|private
class|class
name|ComponentFactoryListener
implements|implements
name|ServiceListener
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|protected
name|ComponentFactoryListener
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
if|if
condition|(
name|bundleContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The BundleContext MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
name|Object
name|eventComponentName
init|=
name|event
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"component.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|REGISTERED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Process ServceEvent for ComponentFactory %s and State REGISTERED"
argument_list|,
name|eventComponentName
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentFactory
name|factory
init|=
operator|(
name|ComponentFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|event
operator|.
name|getServiceReference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dereferencerComponentName
operator|!=
literal|null
operator|&&
name|dereferencerComponentName
operator|.
name|equals
argument_list|(
name|eventComponentName
argument_list|)
condition|)
block|{
name|createDereferencerComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entitySearcherComponentName
operator|!=
literal|null
operator|&&
name|entitySearcherComponentName
operator|.
name|equals
argument_list|(
name|eventComponentName
argument_list|)
condition|)
block|{
name|createEntitySearcherComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Ignore ServceEvent for ComponentFactory %s and state %s"
argument_list|,
name|eventComponentName
argument_list|,
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|MODIFIED
condition|?
literal|"MODIFIED"
else|:
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|UNREGISTERING
condition|?
literal|"UNREGISTERING"
else|:
literal|"MODIFIED_ENDMATCH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|AbstractEntityDereferencer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|dereferencer
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dereferencerComponentInstance
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|dereferencerComponentInstance
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|dereferencerComponentInstance
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|entitySearcher
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|entitySearcherComponentInstace
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|entitySearcherComponentInstace
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|entitySearcherComponentInstace
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|searcherComponentFactoryListener
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeServiceListener
argument_list|(
name|searcherComponentFactoryListener
argument_list|)
expr_stmt|;
name|searcherComponentFactoryListener
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dereferencerComponentFactoryListener
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeServiceListener
argument_list|(
name|dereferencerComponentFactoryListener
argument_list|)
expr_stmt|;
name|dereferencerComponentFactoryListener
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|cacheStrategy
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cacheId
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|cacheTracker
operator|!=
literal|null
condition|)
block|{
name|cacheTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|cacheTracker
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|fieldMappings
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|accessUri
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|queryUri
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|context
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|properties
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_decl_stmt

end_unit

