begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Uses the parsed Adapter to convert values of type T to values of type  * A. If an instance of T can not be converted to A, than such values are  * filtered in the Iteration.  * @author Rupert Westenthaler  *  * @param<T> The type of the incoming elements  * @param<A> The type of the elements returned by this iterator  */
end_comment

begin_class
specifier|public
class|class
name|AdaptingIterator
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|A
argument_list|>
block|{
comment|/** 	 * Adapts values of type T to values of type A. 	 * @author westei 	 * 	 * @param<T> 	 * @param<A> 	 */
specifier|public
specifier|static
interface|interface
name|Adapter
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|>
block|{
comment|/** 		 * Converts the value of type T to a value of type A. If an instance of  		 * T can not be converted to A, than<code>null</code> is returned  		 * @param value the incoming value 		 * @param type the target type 		 * @return the converted value or<code>null</code> if the parsed value 		 * is<code>null</code> or the parsed value can not be converted 		 */
name|A
name|adapt
parameter_list|(
name|T
name|value
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|type
parameter_list|)
function_decl|;
block|}
specifier|protected
specifier|final
name|Adapter
argument_list|<
name|T
argument_list|,
name|A
argument_list|>
name|adapter
decl_stmt|;
specifier|protected
specifier|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
decl_stmt|;
specifier|protected
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|type
decl_stmt|;
specifier|private
name|A
name|next
decl_stmt|;
comment|/** 	 * Constructs an instance based on an iterator of type T, an adapter and the 	 * target type 	 * @param it the base iterator 	 * @param adapter the adapter 	 * @param type the target type 	 */
specifier|public
name|AdaptingIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|,
name|Adapter
argument_list|<
name|T
argument_list|,
name|A
argument_list|>
name|adapter
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed iterator MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed adapter MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed type MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
comment|//init next
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|A
name|next
parameter_list|()
block|{
name|A
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|A
name|prepareNext
parameter_list|()
block|{
name|T
name|check
decl_stmt|;
name|A
name|converted
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|check
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|converted
operator|=
name|adapter
operator|.
name|adapt
argument_list|(
name|check
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|converted
operator|!=
literal|null
condition|)
block|{
return|return
name|converted
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

