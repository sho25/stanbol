begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|EnumIterator
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|<
name|T
parameter_list|>
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnumIterator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
decl_stmt|;
specifier|protected
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
specifier|private
name|T
name|next
decl_stmt|;
specifier|public
name|EnumIterator
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|enumClass
parameter_list|)
block|{
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|enumClass
expr_stmt|;
comment|//init the first value
name|this
operator|.
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
name|T
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|T
name|prepareNext
parameter_list|()
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|currentString
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
name|type
argument_list|,
name|currentString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//ignore
name|log
operator|.
name|debug
argument_list|(
literal|"Value "
operator|+
name|currentString
operator|+
literal|" not part of enumeration "
operator|+
name|type
operator|+
literal|" -> filter value"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

