begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|indexing
operator|.
name|rdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|tdb
operator|.
name|storage
operator|.
name|TdbTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_comment
comment|/**  * This Class indexes Entities based on Information provided in a RDF Graph  *   * Features (currently Brainstorming)<ul>  *<li> Parse also Archive Files (nobody likes to extract such stuff)  *<li> Parse different RDF formats (esay with Clerezza)  *<li> Replace/Append Mode: In replace Mode existing data for an Entity are  *      replaced in the Yard. In the Append Mode first Data for a found Entity  *      are loaded and than new data are added. The Append Mode is important when  *      working with dumps that split up data not by entity but by properties  *<li> Support for the RICK Representation Mapping Infrastructure (currently  *      this means using the {@link FieldMapper}  *<li> Support for filtering Entities based on rdf:type (will be in future   *      version supported by the RICK Representation Mapping Infrastructure)  *<li> any more?  *<li>  *<li>  *<li>  *</ul>  *    * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|RdfIndexer
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RdfIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** 	 * Key used to parse the Yard used for indexing 	 */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_YARD
init|=
literal|"eu.iksproject.rick.indexing.yard"
decl_stmt|;
comment|/** 	 * Key used to parse reference(s) to the RDF files to be indexed!<p> 	 * This supports both single values as well as {@link Iterable}s over several 	 * values. All parsed sources are loaded within one TripleStore and are 	 * indexed at once! Use several {@link RdfIndexer} instances to index them 	 * one after the other. 	 */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_RDF_FILES
init|=
literal|"eu.iksproject.rick.indexing.rdf.rdfFiles"
decl_stmt|;
comment|/** 	 * Key used to configure the fieldMappings used to determine what properties 	 * are indexed for entities 	 */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_FIELD_MAPPINGS
init|=
literal|"eu.iksproject.rick.indexing.rdf.fieldMappings"
decl_stmt|;
comment|/** 	 * Key used to configure the directory to store RDF data needed during the 	 * indexing process. This data might be reused when resuming an indexing 	 * process. 	 */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_INDEXING_DIR
init|=
literal|"eu.iksproject.rick.indexing.rdf.indexingDir"
decl_stmt|;
comment|/** 	 * Key used to configure the name of the model used to store the parsed 	 * RDF data before the indexing process. Parsing this name can be used to 	 * resume indexing based on previously parsed RDF data. 	 */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_MODEL_NAME
init|=
literal|"eu.iksproject.rick.indexing.rdf.modelName"
decl_stmt|;
specifier|private
specifier|final
name|Yard
name|yard
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|vf
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|rdfFiles
decl_stmt|;
specifier|private
specifier|final
name|File
name|indexingDir
decl_stmt|;
specifier|private
specifier|final
name|String
name|modelName
decl_stmt|;
specifier|public
name|RdfIndexer
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|this
operator|.
name|yard
operator|=
operator|(
name|Yard
operator|)
name|config
operator|.
name|get
argument_list|(
name|KEY_YARD
argument_list|)
expr_stmt|;
if|if
condition|(
name|yard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed config MUST CONTAIN a Yard. Use the key "
operator|+
name|KEY_YARD
operator|+
literal|" to parse the YardInstance used to store the geonames.org index!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Using Yard %s (id=%s) to index geonames.org"
argument_list|,
name|yard
operator|.
name|getName
argument_list|()
argument_list|,
name|yard
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|vf
operator|=
name|yard
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|Object
name|rdfFiles
init|=
name|config
operator|.
name|get
argument_list|(
name|KEY_RDF_FILES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rdfFiles
operator|instanceof
name|Iterable
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|this
operator|.
name|rdfFiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|value
operator|:
operator|(
name|Iterable
index|[]
operator|)
name|rdfFiles
control|)
block|{
name|this
operator|.
name|rdfFiles
operator|.
name|add
argument_list|(
name|checkFile
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|rdfFiles
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|checkFile
argument_list|(
name|rdfFiles
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|indexingDir
init|=
name|config
operator|.
name|get
argument_list|(
name|KEY_INDEXING_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexingDir
operator|==
literal|null
condition|)
block|{
name|indexingDir
operator|=
literal|"indexingData"
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_INDEXING_DIR
argument_list|,
name|indexingDir
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|indexingDir
operator|=
name|checkFile
argument_list|(
name|indexingDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|modelName
init|=
name|config
operator|.
name|get
argument_list|(
name|KEY_MODEL_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelName
operator|==
literal|null
condition|)
block|{
name|modelName
operator|=
literal|"indexingModel-"
operator|+
name|ModelUtils
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_MODEL_NAME
argument_list|,
name|modelName
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|modelName
operator|=
name|modelName
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
end_class

begin_function
specifier|private
name|File
name|checkFile
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|checkFile
argument_list|(
name|value
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|File
name|checkFile
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|file
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|create
condition|)
block|{
comment|//create
if|if
condition|(
name|file
condition|)
block|{
try|try
block|{
name|testFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create File "
operator|+
name|testFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|testFile
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create Directory "
operator|+
name|testFile
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|//not found
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"File "
operator|+
name|value
operator|+
literal|" does not exist!"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|file
operator|&&
operator|!
name|testFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"parsed file "
operator|+
name|value
operator|+
literal|"is not a file!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|file
operator|&&
operator|!
name|testFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"parsed file "
operator|+
name|value
operator|+
literal|"is not a directory!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|testFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read File "
operator|+
name|value
operator|+
literal|"!"
argument_list|)
throw|;
block|}
return|return
name|testFile
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|loadRdfFiles
parameter_list|()
block|{
name|TcProvider
name|provider
init|=
operator|new
name|IndexingModelProvider
argument_list|(
name|indexingDir
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|modelFile
range|:
name|rdfFiles
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"loading '%s' into model '%s'..."
argument_list|,
name|modelFile
argument_list|,
name|modelName
argument_list|)
expr_stmt|;
name|InputStream
name|is
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|modelFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|//during init it is checked that files exists and are files and there is read access
comment|//so this can only happen if someone deletes the file inbetween
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|modelFile
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".gz"
argument_list|)
condition|)
block|{
try|try
block|{
name|is
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//during init it is checked that files exists and are files and there is read access
comment|//so this can only happen if someone deletes the file inbetween
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|name
operator|=
name|name
operator|.
name|replaceFirst
argument_list|(
literal|"\\.gz$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".bz2"
argument_list|)
condition|)
block|{
try|try
block|{
name|is
operator|=
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//during init it is checked that files exists and are files and there is read access
comment|//so this can only happen if someone deletes the file inbetween
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|name
operator|=
name|name
operator|.
name|replaceFirst
argument_list|(
literal|"\\.bz2$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|String
name|format
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".nt"
argument_list|)
condition|)
block|{
name|format
operator|=
literal|"N-TRIPLE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".n3"
argument_list|)
condition|)
block|{
name|format
operator|=
literal|"N3"
expr_stmt|;
block|}
comment|// XML is the default format
comment|//            model.read(is, null, format);
comment|//            System.out.println(" done");
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** 	 * Simple wrapper to use {@link TdbTcProvider} without an OSGI Environment 	 * @author Rupert Westenthaler 	 * 	 */
end_comment

begin_class
specifier|protected
specifier|static
specifier|final
class|class
name|IndexingModelProvider
extends|extends
name|TdbTcProvider
block|{
specifier|protected
name|IndexingModelProvider
parameter_list|(
name|File
name|baseDir
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|activate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|deactivate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

