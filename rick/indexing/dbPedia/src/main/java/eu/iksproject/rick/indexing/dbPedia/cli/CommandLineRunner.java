begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|indexing
operator|.
name|dbPedia
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|indexing
operator|.
name|rdf
operator|.
name|RdfIndexer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|indexing
operator|.
name|rdf
operator|.
name|RdfIndexer
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYard
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYardConfig
import|;
end_import

begin_class
specifier|public
class|class
name|CommandLineRunner
block|{
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|defaultFieldMappings
init|=
operator|new
name|String
index|[]
block|{
comment|// --- Define the Languages for all fields ---
comment|//NOTE: the leading space is required for the global filter!
comment|// --- RDF, RDFS and OWL Mappings ---
literal|"rdfs:label"
block|,
comment|//rdf:label
literal|"rdfs:comment"
block|,
comment|//rdf:comment
literal|"rdf:type | d=rick:ref"
block|,
comment|//The types
literal|"owl:sameAs | d=rick:ref"
block|,
comment|//used by LOD to link to URIs used to identify the same Entity
comment|// --- Dublin Core ---
literal|"dc:*"
block|,
comment|//all DC Terms properties
literal|"dc-elements:*"
block|,
comment|//all DC Elements (one could also define the mappings to the DC Terms counterparts here
comment|// --- Spatial Things ---
literal|"geo:lat | d=xsd:double"
block|,
literal|"geo:long | d=xsd:double"
block|,
literal|"geo:alt | d=xsd:int;xsd:float"
block|,
comment|//also allow floating point if one needs to use fractions of meters
comment|// --- Thesaurus (via SKOS) ---
comment|//SKOS can be used to define hierarchical terminologies
literal|"skos:*"
block|,
literal|"skos:broader | d=rick:ref"
block|,
literal|"skos:narrower | d=rick:ref"
block|,
literal|"skos:related | d=rick:ref"
block|,
literal|"skos:member | d=rick:ref"
block|,
literal|"skos:subject | d=rick:ref"
block|,
literal|"skos:inScheme | d=rick:ref"
block|,
literal|"skos:hasTopConcept | d=rick:ref"
block|,
literal|"skos:topConceptOf | d=rick:ref"
block|,
comment|// --- Social Networks (via foaf) ---
literal|"foaf:*"
block|,
comment|//The Friend of a Friend schema often used to describe social relations between people
literal|"foaf:knows | d=rick:ref"
block|,
literal|"foaf:made | d=rick:ref"
block|,
literal|"foaf:maker | d=rick:ref"
block|,
literal|"foaf:member | d=rick:ref"
block|,
literal|"foaf:homepage | d=xsd:anyURI"
block|,
literal|"foaf:depiction | d=xsd:anyURI"
block|,
literal|"foaf:img | d=xsd:anyURI"
block|,
literal|"foaf:logo | d=xsd:anyURI"
block|,
literal|"foaf:page | d=xsd:anyURI"
block|,
comment|//page about the entity
comment|// --- dbPedia specific
literal|"dbp-ont:*"
block|,
literal|"dbp-ont:thumbnail | d=xsd:anyURI> foaf:depiction"
block|,
comment|//		"dbp-prop:latitude | d=xsd:decimal> geo:lat",
comment|//		"dbp-prop:longitude | d=xsd:decimal> geo:long",
literal|"dbp-prop:population | d=xsd:integer"
block|,
literal|"dbp-prop:website | d=xsd:anyURI> foaf:homepage"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldBoosts
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|boosts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|boosts
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
name|boosts
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"title"
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
name|boosts
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|dcElements
operator|+
literal|"title"
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
name|boosts
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|foaf
operator|+
literal|"name"
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
name|boosts
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"prefLabel"
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
name|boosts
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"altLabel"
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|fieldBoosts
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|boosts
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommandLineRunner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|header
decl_stmt|;
static|static
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Description:\nThis Utility creates a full Yard for dbPedia.org by using the SolrYard implementation.\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\nParameter:\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - \"-Xmx\": This implementation does not need much memory. RDF data are loaded into the file based Jena TDB store. Indexing is done in chunks of 1000 (default). In case of OutOfMemory errors you need to increase this value!"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - solrServerUri : The URL of the Solr Server used to index the data. Make sure to use the schema.xml as needed by the SolrYard!\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - dbPediaDumpDir: The relative or absolute path to the Dir with the source RDF files to be used for indexing. You can direcly use the compressed archives. All files in that directory are used to create the index\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\nOptions:\n"
argument_list|)
expr_stmt|;
name|header
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Options
name|options
decl_stmt|;
static|static
block|{
name|options
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"display this help and exit"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"d"
argument_list|,
literal|"debug"
argument_list|,
literal|false
argument_list|,
literal|"show debug stacktrace upon error"
argument_list|)
expr_stmt|;
comment|//options.addOption("yt","yardtype",false, "the type of the yard used as target 'solr' or 'rdf' (default:'solr')");
comment|//options.addOption("i","index",true, "Base URI of the used Solr Server used to index the data");
name|options
operator|.
name|addOption
argument_list|(
literal|"n"
argument_list|,
literal|"name"
argument_list|,
literal|true
argument_list|,
literal|"the id and name used for the Yard (default: 'dbPedia')"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"m"
argument_list|,
literal|"mappings"
argument_list|,
literal|true
argument_list|,
literal|"file with the fieldMappings used for indexing (this will replace the defaults)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"c"
argument_list|,
literal|"chunksize"
argument_list|,
literal|true
argument_list|,
literal|"the number of documents stored in one chunk (default: 1000"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"s"
argument_list|,
literal|"skipRdf"
argument_list|,
literal|false
argument_list|,
literal|"this options allow to skip the loading of the RDF Data (e.g. if alredy loaded to the Triple Store)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"i"
argument_list|,
literal|"incomming"
argument_list|,
literal|true
argument_list|,
literal|"the file with the incomming links for Entities (id tab num, highest num needs to be the first line!)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"ri"
argument_list|,
literal|"requiredIncomming"
argument_list|,
literal|true
argument_list|,
literal|"the minimum number of incomming lins for Entities to be indexed"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"r"
argument_list|,
literal|"resume"
argument_list|,
literal|true
argument_list|,
literal|"resume a previous canceled indexing session (usually used with -s)"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|footer
decl_stmt|;
static|static
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Default Field Mappings:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mapping
range|:
name|defaultFieldMappings
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t%s"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|footer
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|float
name|minRequiredRanking
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|YardException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|args
operator|=
name|line
operator|.
name|getArgs
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|<
literal|2
operator|||
name|line
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"java -Xmx1024M -jar eu.iksproject.indexing.dbPedia-0.1-SNAPSHOT-jar-with-dependencies.jar [options] solrServerUri dbPediaDataDumpDir"
argument_list|,
name|header
argument_list|,
name|options
argument_list|,
name|footer
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|yardName
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|yardName
operator|==
literal|null
condition|)
block|{
name|yardName
operator|=
literal|"dbPedia"
expr_stmt|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|indexingConfig
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|//first the SolrServer used to store the index
name|URL
name|solrServer
init|=
operator|new
name|URL
argument_list|(
name|line
operator|.
name|getArgs
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SolrYardConfig
name|yardConfig
init|=
operator|new
name|SolrYardConfig
argument_list|(
name|yardName
argument_list|,
name|solrServer
argument_list|)
decl_stmt|;
comment|//use the signRank as default for document Boosts
name|yardConfig
operator|.
name|setDocumentBoostFieldName
argument_list|(
name|RdfResourceEnum
operator|.
name|signRank
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
comment|//increase the boost for fields that are usually used as labels
name|yardConfig
operator|.
name|setFieldBoosts
argument_list|(
name|fieldBoosts
argument_list|)
expr_stmt|;
name|SolrYard
name|yard
init|=
operator|new
name|SolrYard
argument_list|(
name|yardConfig
argument_list|)
decl_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_YARD
argument_list|,
name|yard
argument_list|)
expr_stmt|;
comment|//now the other properties
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|line
operator|.
name|getArgs
argument_list|()
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dataDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Parsed Data Directory "
operator|+
name|dataDir
operator|+
literal|" does not Exist on the File System"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dataDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Parsed Data Directory "
operator|+
name|dataDir
operator|+
literal|" exists, but is not a Directory!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dataDir
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to read Data Directory "
operator|+
name|dataDir
operator|+
literal|"!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|File
index|[]
name|files
init|=
name|dataDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_RDF_FILES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_RDF_STORE_DIR
argument_list|,
literal|"dbPedia-rdf-data"
argument_list|)
expr_stmt|;
name|Integer
name|chunkSize
decl_stmt|;
try|try
block|{
name|chunkSize
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"c"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value for option \"chunkSize\" need to be a valid Integer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|chunkSize
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Negative number parsed for option \"chunkSize\". Use '1000' as default."
argument_list|)
expr_stmt|;
name|chunkSize
operator|=
literal|1000
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|line
operator|.
name|hasOption
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_FIELD_MAPPINGS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|defaultFieldMappings
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|fieldMappingFile
init|=
operator|new
name|File
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"m"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappingFile
operator|.
name|exists
argument_list|()
operator|&&
name|fieldMappingFile
operator|.
name|isFile
argument_list|()
operator|&&
name|fieldMappingFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|String
index|[]
name|fieldMappings
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fieldMappingFile
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_FIELD_MAPPINGS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldMappings
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid fieldMapping File (exist: %s | isFile: %s | canRead: %s)"
argument_list|,
name|fieldMappingFile
operator|.
name|exists
argument_list|()
argument_list|,
name|fieldMappingFile
operator|.
name|isFile
argument_list|()
argument_list|,
name|fieldMappingFile
operator|.
name|canRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_SKIP_READ
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_CHUNK_SIZE
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_MODEL_NAME
argument_list|,
literal|"indexingModel-49e176b9-0138-dd4c-2b87-89af85b89a57"
argument_list|)
expr_stmt|;
comment|//entityRank related properties
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"i"
argument_list|)
condition|)
block|{
name|File
name|tsvScoreFile
init|=
operator|new
name|File
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"i"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsvScoreFile
operator|.
name|exists
argument_list|()
operator|&&
name|tsvScoreFile
operator|.
name|isFile
argument_list|()
operator|&&
name|tsvScoreFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|int
name|minIncommings
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|minIncommings
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"ri"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Value of option --minIncomming/-mi MUST BE a valid integer"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entityRankings
init|=
name|clacEntityRanks
argument_list|(
name|tsvScoreFile
argument_list|,
name|minIncommings
argument_list|)
decl_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_ENTITY_RANKINGS
argument_list|,
name|entityRankings
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" ... set min required score to %s (represents %s incomming links"
argument_list|,
name|minRequiredRanking
argument_list|,
name|minIncommings
argument_list|)
argument_list|)
expr_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_REQUIRED_ENTITY_RANKING
argument_list|,
name|minRequiredRanking
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Parsed File with the incommung links is invalid (esists:%s,isFile:%s,canRead:%s)"
argument_list|,
name|tsvScoreFile
operator|.
name|exists
argument_list|()
argument_list|,
name|tsvScoreFile
operator|.
name|isFile
argument_list|()
argument_list|,
name|tsvScoreFile
operator|.
name|canRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"ri"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Option --requiredIncomming/-ri is only supported of Option --incomming/-i is active!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//THis mode uses the id of the entity rnking map as main lookup for
comment|//entities to index. This is faster than the usual mode if less than
comment|//50% of the entities are indexed!
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"r"
argument_list|)
condition|)
block|{
comment|//resume makes only really sense with the RANKING BASED MODE
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_ENTITY_RANKING_BASED_INDEXING_MODE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|//set the RESUME MODE
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_RESUME_MODE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|RdfIndexer
name|indexer
init|=
operator|new
name|RdfIndexer
argument_list|(
name|indexingConfig
argument_list|)
decl_stmt|;
name|indexer
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|clacEntityRanks
parameter_list|(
name|File
name|tsvScoreFile
parameter_list|,
name|int
name|minIncommings
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entityRankings
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tsvScoreFile
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
name|long
name|lineNumber
init|=
literal|0
decl_stmt|;
name|int
name|maxIncommung
init|=
literal|0
decl_stmt|;
name|float
name|maxScore
init|=
literal|0
decl_stmt|;
name|long
name|filtered
init|=
literal|0
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... init Entity Ranks based on "
operator|+
name|tsvScoreFile
argument_list|)
expr_stmt|;
while|while
condition|(
name|lines
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|lines
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"skipping line: '%s'"
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|incomming
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
comment|// take the log to avoid over popular entities to
comment|// dominate the results (attenuate the Zipf law of
comment|// culturally generated distribution)
name|float
name|score
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|log1p
argument_list|(
name|incomming
argument_list|)
decl_stmt|;
if|if
condition|(
name|lineNumber
operator|==
literal|0
operator|&&
name|score
operator|>
literal|0
condition|)
block|{
name|maxIncommung
operator|=
name|incomming
expr_stmt|;
name|maxScore
operator|=
name|score
expr_stmt|;
if|if
condition|(
name|minIncommings
operator|<=
literal|0
condition|)
block|{
name|minRequiredRanking
operator|=
operator|-
literal|1f
expr_stmt|;
comment|//deactivate
block|}
else|else
block|{
name|float
name|min
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|log1p
argument_list|(
name|minIncommings
argument_list|)
decl_stmt|;
name|minRequiredRanking
operator|=
name|min
operator|/
name|maxScore
expr_stmt|;
if|if
condition|(
name|minRequiredRanking
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Parsed minimum required incomming links is bigger than the highest number of incomming links for any entity!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|score
operator|=
name|score
operator|/
name|maxScore
expr_stmt|;
if|if
condition|(
name|score
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Found Entity wiht more incomming links than the entity in the first line"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"current:"
operator|+
name|line
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|score
operator|>=
name|minRequiredRanking
condition|)
block|{
name|entityRankings
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filtered
operator|++
expr_stmt|;
block|}
name|lineNumber
operator|++
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  ... processed %s entities (%s with ranking> required | %s filtered"
argument_list|,
name|lineNumber
argument_list|,
name|lineNumber
operator|-
name|filtered
argument_list|,
name|filtered
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|entityRankings
return|;
block|}
block|}
end_class

end_unit

