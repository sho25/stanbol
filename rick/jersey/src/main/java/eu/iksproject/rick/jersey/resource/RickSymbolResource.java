begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|jersey
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|query
operator|.
name|FieldQueryImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|Rick
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|RickException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
operator|.
name|PatternType
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * RESTful interface for The {@link Rick}. To access referenced sites directly  * see {@link ReferencedSiteRootResource}.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/symbol"
argument_list|)
comment|//@ImplicitProduces(MediaType.TEXT_HTML + ";qs=2")
specifier|public
class|class
name|RickSymbolResource
extends|extends
name|NavigationMixin
block|{
comment|/**      * The default search field for /find queries is the rick-maodel:label      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FIND_FIELD
init|=
name|RdfResourceEnum
operator|.
name|label
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The default result fields for /find queries is the rick-maodel:label and the      * rick-maodel:description.      */
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|DEFAULT_FIND_SELECTED_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|RdfResourceEnum
operator|.
name|label
operator|.
name|getUri
argument_list|()
argument_list|,
name|RdfResourceEnum
operator|.
name|description
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|Rick
name|rick
decl_stmt|;
specifier|protected
name|TcManager
name|tcManager
decl_stmt|;
specifier|protected
name|Serializer
name|serializer
decl_stmt|;
specifier|protected
name|TripleCollection
name|entityCache
decl_stmt|;
comment|// bind the job manager by looking it up from the servlet request context
specifier|public
name|RickSymbolResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|rick
operator|=
operator|(
name|Rick
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|Rick
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tcManager
operator|=
operator|(
name|TcManager
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|TcManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|=
operator|(
name|Serializer
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|}
argument_list|)
specifier|public
name|Response
name|getSymbol
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|symbolId
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"/symbol/lookup Request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> id: "
operator|+
name|symbolId
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept: "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|symbolId
operator|==
literal|null
operator|||
name|symbolId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//TODO: how to parse an error message
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|Symbol
name|symbol
decl_stmt|;
try|try
block|{
name|symbol
operator|=
name|rick
operator|.
name|getSymbol
argument_list|(
name|symbolId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RickException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|symbol
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|NOT_FOUND
argument_list|)
throw|;
block|}
else|else
block|{
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|symbol
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/lookup"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|}
argument_list|)
specifier|public
name|Response
name|lookupSymbol
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|reference
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"create"
argument_list|)
name|boolean
name|create
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"/symbol/lookup Request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> id: "
operator|+
name|reference
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> create   : "
operator|+
name|create
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept: "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
operator|||
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//TODO: how to parse an error message
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|Symbol
name|symbol
decl_stmt|;
try|try
block|{
name|symbol
operator|=
name|rick
operator|.
name|lookupSymbol
argument_list|(
name|reference
argument_list|,
name|create
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RickException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|symbol
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
else|else
block|{
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|symbol
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|}
argument_list|)
specifier|public
name|Response
name|findEntity
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"select"
argument_list|)
name|String
name|select
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"symbol/find Request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> name  : "
operator|+
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> field : "
operator|+
name|field
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> lang  : "
operator|+
name|language
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> select: "
operator|+
name|select
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept: "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: Implement by using EntityQuery as soon as implemented
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"/find Request with invalied name={}!"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|==
literal|null
operator|||
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
name|FieldQuery
name|query
init|=
operator|new
name|FieldQueryImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|field
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|name
argument_list|,
name|PatternType
operator|.
name|wildcard
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|field
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|name
argument_list|,
name|PatternType
operator|.
name|wildcard
argument_list|,
literal|false
argument_list|,
name|language
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|selectedFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|//select also the field used to find entities
if|if
condition|(
name|select
operator|==
literal|null
operator|||
name|select
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|selectedFields
operator|.
name|addAll
argument_list|(
name|DEFAULT_FIND_SELECTED_FIELDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|selected
range|:
name|select
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
block|{
if|if
condition|(
name|selected
operator|!=
literal|null
operator|&&
operator|!
name|selected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|selectedFields
operator|.
name|add
argument_list|(
name|selected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|query
operator|.
name|addSelectedFields
argument_list|(
name|selectedFields
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|rick
operator|.
name|find
argument_list|(
name|query
argument_list|)
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while accessing RickYard "
operator|+
name|rick
operator|.
name|getRickYard
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (id="
operator|+
name|rick
operator|.
name|getRickYard
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/{id}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|}
argument_list|)
specifier|public
name|Response
name|removeSymbol
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

