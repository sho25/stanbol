begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|writers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
specifier|final
class|class
name|SignToJSON
block|{
specifier|private
name|SignToJSON
parameter_list|()
block|{
comment|/* do not create instances of utility classes */
block|}
specifier|static
name|JSONObject
name|toJSON
parameter_list|(
name|Sign
name|sign
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jSign
decl_stmt|;
if|if
condition|(
name|sign
operator|instanceof
name|Symbol
condition|)
block|{
name|jSign
operator|=
name|writeSymbolAsJSON
argument_list|(
operator|(
name|Symbol
operator|)
name|sign
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sign
operator|instanceof
name|EntityMapping
condition|)
block|{
name|jSign
operator|=
name|writeEntityMappingAsJSON
argument_list|(
operator|(
name|EntityMapping
operator|)
name|sign
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jSign
operator|=
name|convertSignToJSON
argument_list|(
name|sign
argument_list|)
expr_stmt|;
block|}
return|return
name|jSign
return|;
block|}
specifier|private
specifier|static
name|JSONObject
name|writeSymbolAsJSON
parameter_list|(
name|Symbol
name|symbol
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jSymbol
init|=
name|convertSignToJSON
argument_list|(
name|symbol
argument_list|)
decl_stmt|;
name|jSymbol
operator|.
name|put
argument_list|(
literal|"label"
argument_list|,
name|symbol
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|descriptions
init|=
name|symbol
operator|.
name|getDescriptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|jSymbol
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|convertFieldValuesToJSON
argument_list|(
name|descriptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|value
init|=
name|ModelUtils
operator|.
name|asCollection
argument_list|(
name|symbol
operator|.
name|getPredecessors
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jSymbol
operator|.
name|put
argument_list|(
literal|"predecessors"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|ModelUtils
operator|.
name|asCollection
argument_list|(
name|symbol
operator|.
name|getSuccessors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jSymbol
operator|.
name|put
argument_list|(
literal|"successors"
argument_list|,
operator|new
name|JSONArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jSymbol
operator|.
name|put
argument_list|(
literal|"stateUri"
argument_list|,
name|symbol
operator|.
name|getState
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|jSymbol
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|symbol
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jSymbol
return|;
block|}
specifier|private
specifier|static
name|JSONObject
name|writeEntityMappingAsJSON
parameter_list|(
name|EntityMapping
name|entityMapping
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jEntityMapping
init|=
name|convertSignToJSON
argument_list|(
name|entityMapping
argument_list|)
decl_stmt|;
name|jEntityMapping
operator|.
name|put
argument_list|(
literal|"symbol"
argument_list|,
name|entityMapping
operator|.
name|getSymbolId
argument_list|()
argument_list|)
expr_stmt|;
name|jEntityMapping
operator|.
name|put
argument_list|(
literal|"entity"
argument_list|,
name|entityMapping
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|jEntityMapping
operator|.
name|put
argument_list|(
literal|"stateUri"
argument_list|,
name|entityMapping
operator|.
name|getState
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|jEntityMapping
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|entityMapping
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jEntityMapping
return|;
block|}
comment|/**      * @param sign      * @return      * @throws JSONException      */
specifier|private
specifier|static
name|JSONObject
name|convertSignToJSON
parameter_list|(
name|Sign
name|sign
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jSign
decl_stmt|;
name|jSign
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
name|jSign
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|sign
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|jSign
operator|.
name|put
argument_list|(
literal|"site"
argument_list|,
name|sign
operator|.
name|getSignSite
argument_list|()
argument_list|)
expr_stmt|;
name|Representation
name|rep
init|=
name|sign
operator|.
name|getRepresentation
argument_list|()
decl_stmt|;
name|jSign
operator|.
name|put
argument_list|(
literal|"representation"
argument_list|,
name|toJSON
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jSign
return|;
block|}
comment|/**      * Converts the {@link Representation} to JSON      *      * @param jSign      * @param rep      * @throws JSONException      */
specifier|static
name|JSONObject
name|toJSON
parameter_list|(
name|Representation
name|rep
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jRep
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jRep
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|rep
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|rep
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|jRep
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|convertFieldValuesToJSON
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jRep
return|;
block|}
comment|/**      * @param values Iterator over all the values to add      * @return The {@link JSONArray} with all the values as {@link JSONObject}      * @throws JSONException      */
specifier|private
specifier|static
name|JSONArray
name|convertFieldValuesToJSON
parameter_list|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONArray
name|jValues
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|jValues
operator|.
name|put
argument_list|(
name|convertFieldValueToJSON
argument_list|(
name|values
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|jValues
return|;
block|}
comment|/**      * The value to write. Special support for  {@link Reference} and {@link Text}.      * The {@link #toString()} Method is used to write the "value" key.      *      * @param value the value      * @return the {@link JSONObject} representing the value      * @throws JSONException      */
specifier|private
specifier|static
name|JSONObject
name|convertFieldValueToJSON
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jValue
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Reference
condition|)
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"reference"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Text
condition|)
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|jValue
operator|.
name|put
argument_list|(
literal|"xml:lang"
argument_list|,
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
comment|//TODO: better name? ^^
block|}
name|jValue
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jValue
return|;
block|}
block|}
end_class

end_unit

