begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|yard
operator|.
name|solr
operator|.
name|defaults
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
operator|.
name|IndexDataType
import|;
end_import

begin_comment
comment|/**  * Holds the default configuration for<ul>  *<li> {@link IndexDataType}s  *<li> Default mapping of {@link IndexDataType}s to Java Objects  *<li> Prefixes/Suffixes used to mark {@link IndexDataType}s in  *      SolrDocument fields  *</ul>  * This Enumeration may be replaced later on by a more flexible way to configure  * such things.  *  * @author Rupert Westenthaler  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|IndexDataTypeEnum
block|{
name|BOOLEAN
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"boolean"
argument_list|,
literal|"bool"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
block|,
comment|//    BYTE("byt",Byte.class),
name|INT
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"integer"
argument_list|,
literal|"int"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
block|,
name|LONG
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"long"
argument_list|,
literal|"lon"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
block|,
name|FLOAT
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"float"
argument_list|,
literal|"flo"
argument_list|,
name|Float
operator|.
name|class
argument_list|)
block|,
name|DOUBLE
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"double"
argument_list|,
literal|"dou"
argument_list|,
name|Double
operator|.
name|class
argument_list|)
block|,
name|REF
argument_list|(
name|RdfResourceEnum
operator|.
name|ReferenceDataType
operator|.
name|getUri
argument_list|()
argument_list|,
literal|"ref"
argument_list|,
name|Reference
operator|.
name|class
argument_list|)
block|,
comment|//    URI(NamespaceEnum.xsd+"anyURI","uri",URI.class), //currently URIs are modelled as REF
comment|//TODO: DATE& DUR to be removed. The plan is to add explicit support for ranged queries over time spans/points!
name|DATE
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"dateTime"
argument_list|,
literal|"cal"
argument_list|,
name|Date
operator|.
name|class
argument_list|)
block|,
name|DUR
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"duration"
argument_list|,
literal|"dur"
argument_list|,
name|Duration
operator|.
name|class
argument_list|)
block|,
name|TXT
argument_list|(
name|RdfResourceEnum
operator|.
name|TextDataType
operator|.
name|getUri
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Text
operator|.
name|class
argument_list|)
block|,
comment|//no type prefix, but typically language prefixes
name|STR
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"string"
argument_list|,
literal|"str"
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
comment|//string values (not used for language)
name|ID
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"id"
argument_list|,
literal|"id"
argument_list|,
name|UUID
operator|.
name|class
argument_list|)
block|,     ;
specifier|private
name|IndexDataType
name|indexType
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|javaType
decl_stmt|;
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|private
name|String
name|suffix
decl_stmt|;
specifier|private
name|IndexDataTypeEnum
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|prefix
argument_list|,
literal|null
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IndexDataTypeEnum
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|indexType
operator|=
operator|new
name|IndexDataType
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
name|this
operator|.
name|javaType
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * The prefix to be used for index fields of that type      * @return the prefix      */
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
comment|/**      * The suffix to be used for index fields of that type      * @return      */
specifier|public
name|String
name|getSuffix
parameter_list|()
block|{
return|return
name|suffix
return|;
block|}
comment|/**      * The index type      * @return the indexType      */
specifier|public
name|IndexDataType
name|getIndexType
parameter_list|()
block|{
return|return
name|indexType
return|;
block|}
comment|/**      * The java type      * @return the java class for the index type      */
specifier|public
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|getJavaType
parameter_list|()
block|{
return|return
name|javaType
return|;
block|}
comment|/*--------------------------------------------------------------------------      * Code that reads the config and inits lookup tables (also checks config)      * --------------------------------------------------------------------------      */
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|javaTypeMap
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|IndexDataType
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|indexTypeMap
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|prefixSuffixMap
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|uriMap
decl_stmt|;
static|static
block|{
comment|/*          * This inits the Mappings and also validates the configuration provided          * by the Enumeration!          */
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|jtm
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|IndexDataTypeEnum
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|IndexDataType
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|itm
init|=
operator|new
name|HashMap
argument_list|<
name|IndexDataType
argument_list|,
name|IndexDataTypeEnum
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|psm
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|IndexDataTypeEnum
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IndexDataTypeEnum
argument_list|>
name|um
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexDataTypeEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexDataTypeEnum
name|dt
range|:
name|IndexDataTypeEnum
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|jtm
operator|.
name|containsKey
argument_list|(
name|dt
operator|.
name|javaType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found multiple IndexTypes %s and %s for Class %s! Wrong Data provided by %s"
argument_list|,
name|dt
operator|.
name|indexType
argument_list|,
name|jtm
operator|.
name|get
argument_list|(
name|dt
operator|.
name|javaType
argument_list|)
operator|.
name|indexType
argument_list|,
name|dt
operator|.
name|javaType
argument_list|,
name|IndexDataTypeEnum
operator|.
name|class
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|jtm
operator|.
name|put
argument_list|(
name|dt
operator|.
name|javaType
argument_list|,
name|dt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|itm
operator|.
name|containsKey
argument_list|(
name|dt
operator|.
name|indexType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found multiple Entries with IndexType %s! Wrong Data provided by %s"
argument_list|,
name|dt
operator|.
name|indexType
argument_list|,
name|IndexDataTypeEnum
operator|.
name|class
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|itm
operator|.
name|put
argument_list|(
name|dt
operator|.
name|indexType
argument_list|,
name|dt
argument_list|)
expr_stmt|;
block|}
comment|//NOTE: Do not use Arrays.asList(..) directly, because it does not
comment|//      implement equals and hashCode!
name|List
argument_list|<
name|String
argument_list|>
name|ps
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ps
operator|.
name|add
argument_list|(
name|dt
operator|.
name|prefix
argument_list|)
expr_stmt|;
name|ps
operator|.
name|add
argument_list|(
name|dt
operator|.
name|suffix
argument_list|)
expr_stmt|;
name|psm
operator|.
name|put
argument_list|(
name|ps
argument_list|,
name|dt
argument_list|)
expr_stmt|;
if|if
condition|(
name|um
operator|.
name|containsKey
argument_list|(
name|dt
operator|.
name|getIndexType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found multiple Entries with the same data type URI %s! Uri used by %s and %s!"
argument_list|,
name|dt
operator|.
name|getIndexType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|dt
operator|.
name|name
argument_list|()
argument_list|,
name|um
operator|.
name|get
argument_list|(
name|dt
operator|.
name|getIndexType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|um
operator|.
name|put
argument_list|(
name|dt
operator|.
name|getIndexType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|dt
argument_list|)
expr_stmt|;
block|}
block|}
name|javaTypeMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|jtm
argument_list|)
expr_stmt|;
name|indexTypeMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|itm
argument_list|)
expr_stmt|;
name|prefixSuffixMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|psm
argument_list|)
expr_stmt|;
name|uriMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|um
argument_list|)
expr_stmt|;
block|}
comment|/**      * Lookup table for the IndexDataTypeEnum based on the java type      * @param type the java type      * @return the IndexDataTypeEnum for the parsed type or<code>null</code> if      * no IndexDataTypeEnum is configured for the parsed type.      */
specifier|public
specifier|static
name|IndexDataTypeEnum
name|forJavaType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|javaTypeMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Lookup table for the IndexDataTypeEnum based on the IndexType.      * @param indexType the indexType      * @return the IndexDataTypeEnum for the parsed IndexTyep or<code>null</code>      * if no IndexDataTypeEnum is configured for the parsed IndexType.      */
specifier|public
specifier|static
name|IndexDataTypeEnum
name|forIndexType
parameter_list|(
name|IndexDataType
name|indexType
parameter_list|)
block|{
return|return
name|indexTypeMap
operator|.
name|get
argument_list|(
name|indexType
argument_list|)
return|;
block|}
comment|/**      * Lookup table for the IndexDataTypeEnum based on the prefix and suffix      * @param prefix the prefix (might be<code>null</code>)      * @param suffix the suffix ( (might be<code>null</code>)      * @return the IndexDataTypeEnum for the parsed prefix and suffix or      *<code>null</code> if no IndexDataTypeEnum is configured for the parsed      * parameter.      */
specifier|public
specifier|static
name|IndexDataTypeEnum
name|forPrefixSuffix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ps
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ps
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|ps
operator|.
name|add
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
return|return
name|prefixSuffixMap
operator|.
name|get
argument_list|(
name|ps
argument_list|)
return|;
block|}
comment|/**      * Lookup table for the IndexDataTypeEnum based on the data type uri      * as stored in the {@link IndexDataType#getName()} property.      * @param uri the uri of the dataType      * @return the IndexDataTypeEnum for the parsed uri or<code>null</code> if      * no IndexDataTypeEnum is configured for the parsed parameter.      */
specifier|public
specifier|static
name|IndexDataTypeEnum
name|forUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|uriMap
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

