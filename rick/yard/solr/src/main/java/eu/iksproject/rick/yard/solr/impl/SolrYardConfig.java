begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|yard
operator|.
name|AbstractYard
operator|.
name|YardConfig
import|;
end_import

begin_comment
comment|/**  * Used for the configuration of a SolrYard. Especially if the SolrYard is  * not running within an OSGI context, than an instance of this class must  * be configured and than parsed to the constructor of {@link SolrYard}.<p>  * When running within an OSGI context, the configuration is provided by the  * OSGI environment. I that case this class is used as a wrapper for easy  * access to the configuration.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SolrYardConfig
extends|extends
name|YardConfig
block|{
comment|/** 	 * Creates a new config with the minimal set of required properties 	 * @param id the ID of the Yard 	 * @param solrServer the base URL of the {@link SolrServer} 	 * @throws IllegalArgumentException if the parsed valued do not fulfil the 	 * requirements. 	 */
specifier|public
name|SolrYardConfig
parameter_list|(
name|String
name|id
parameter_list|,
name|URL
name|solrServer
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setSolrServerUrl
argument_list|(
name|solrServer
argument_list|)
expr_stmt|;
try|try
block|{
name|isValid
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Initialise the Yard configuration based on a parsed configuration. Usually 	 * used on the context of an OSGI environment in the activate method. 	 * @param config the configuration usually parsed within an OSGI activate 	 * method 	 * @throws ConfigurationException if the configuration is incomplete of 	 * some values are not valid 	 * @throws IllegalArgumentException if<code>null</code> is parsed as 	 * configuration 	 */
specifier|protected
name|SolrYardConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|ConfigurationException
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Setter for the base URL of the SolrServer 	 * @param url the base URL of the SolrServer. Required, NOT NULL. 	 */
specifier|public
name|void
name|setSolrServerUrl
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|SolrYard
operator|.
name|SOLR_SERVER_URI
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|remove
argument_list|(
name|SolrYard
operator|.
name|SOLR_SERVER_URI
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Getter for the base URL of the SolrServer 	 * @return the base URL of the configured SolrServer 	 * @throws IllegalStateException Internally a Object is used to store values 	 *   and if the configuration is provided by the OSGI environment the URL 	 *   is configured by using a {@link String}. When it fails to parse a 	 *   {@link URL} object based on the provided string, than the 	 *   {@link MalformedURLException} is wrapped by  	 *   an {@link IllegalStateException}. 	 */
specifier|public
name|URL
name|getSolrServerUrl
parameter_list|()
throws|throws
name|IllegalStateException
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SolrYard
operator|.
name|SOLR_SERVER_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|URL
condition|)
block|{
return|return
operator|(
name|URL
operator|)
name|value
return|;
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse URL from value "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 * Setter for the multi yard index layout state.<p> 	 * The multi layout state. If data of multiple yards are stored in the same 	 * Solr Index, than the YardID MUST be stored within all indexed documents. 	 * In addition the to all queries a fq (filterQuery) must be added that 	 * restricts results to the current yard 	 */
specifier|public
name|void
name|setMultiYardIndexLayout
parameter_list|(
name|Boolean
name|multiYardIndexLayoutState
parameter_list|)
block|{
if|if
condition|(
name|multiYardIndexLayoutState
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|SolrYard
operator|.
name|MULTI_YARD_INDEX_LAYOUT
argument_list|,
name|multiYardIndexLayoutState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|remove
argument_list|(
name|SolrYard
operator|.
name|MULTI_YARD_INDEX_LAYOUT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Getter for the multi yard index layout state.<p> 	 * If data of multiple yards are stored in the same 	 * Solr Index, than the YardID MUST be stored within all indexed documents. 	 * In addition the to all queries a fq (filterQuery) must be added that 	 * restricts results to the current yard.<p> 	 * The default value is<code>false</code> 	 * @return the multi yard index layout state 	 */
specifier|public
name|boolean
name|isMultiYardIndexLayout
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SolrYard
operator|.
name|MULTI_YARD_INDEX_LAYOUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * Getter for the maximum number of boolean clauses allowed for queries 	 * @return The configured number of<code>null</code> if not configured or 	 * the configured value is not an valid Integer. 	 */
specifier|public
name|Integer
name|getMaxBooleanClauses
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SolrYard
operator|.
name|MAX_BOOLEAN_CLAUSES
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setMaxBooleanClauses
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
if|if
condition|(
name|integer
operator|==
literal|null
operator|||
name|integer
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|SolrYard
operator|.
name|MAX_BOOLEAN_CLAUSES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|SolrYard
operator|.
name|MAX_BOOLEAN_CLAUSES
argument_list|,
name|integer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * checks for the {@link SolrYard#SOLR_SERVER_URI} 	 */
annotation|@
name|Override
specifier|protected
name|void
name|validateConfig
parameter_list|()
throws|throws
name|ConfigurationException
block|{
try|try
block|{
name|URL
name|solrServer
init|=
name|getSolrServerUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SolrYard
operator|.
name|SOLR_SERVER_URI
argument_list|,
literal|"The URL of the Solr server MUST NOT be NULL!"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SolrYard
operator|.
name|SOLR_SERVER_URI
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

