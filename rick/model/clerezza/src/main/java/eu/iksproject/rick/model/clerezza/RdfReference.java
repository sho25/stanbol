begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_class
specifier|public
class|class
name|RdfReference
implements|implements
name|Reference
implements|,
name|Cloneable
block|{
specifier|private
specifier|final
name|UriRef
name|uri
decl_stmt|;
specifier|protected
name|RdfReference
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The parsed Reference MUST NOT be NULL!"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Reference MUST NOT be Empty!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|uri
operator|=
operator|new
name|UriRef
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|RdfReference
parameter_list|(
name|UriRef
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The parsed Reference MUST NOT be NULL!"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|uri
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Reference MUST NOT be represent an empty string!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|uri
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
specifier|public
name|UriRef
name|getUriRef
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
operator|new
name|RdfReference
argument_list|(
operator|new
name|UriRef
argument_list|(
name|uri
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uri
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|Reference
operator|&&
name|uri
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Reference
operator|)
name|obj
operator|)
operator|.
name|getReference
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

