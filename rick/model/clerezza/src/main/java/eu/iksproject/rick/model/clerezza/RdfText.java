begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|RdfText
implements|implements
name|Text
implements|,
name|Cloneable
block|{
specifier|private
specifier|final
name|Literal
name|literal
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isPlain
decl_stmt|;
specifier|protected
name|RdfText
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|this
operator|.
name|literal
operator|=
operator|new
name|PlainLiteralImpl
argument_list|(
name|text
argument_list|,
name|lang
operator|!=
literal|null
condition|?
operator|new
name|Language
argument_list|(
name|lang
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|isPlain
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|RdfText
parameter_list|(
name|Literal
name|literal
parameter_list|)
block|{
name|this
operator|.
name|literal
operator|=
name|literal
expr_stmt|;
name|this
operator|.
name|isPlain
operator|=
name|literal
operator|instanceof
name|PlainLiteral
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|isPlain
operator|&&
operator|(
operator|(
name|PlainLiteral
operator|)
name|literal
operator|)
operator|.
name|getLanguage
argument_list|()
operator|!=
literal|null
condition|?
operator|(
operator|(
name|PlainLiteral
operator|)
name|literal
operator|)
operator|.
name|getLanguage
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|literal
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
specifier|public
name|Literal
name|getLiteral
parameter_list|()
block|{
return|return
name|literal
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|Language
name|language
init|=
name|isPlain
condition|?
operator|(
operator|(
name|PlainLiteral
operator|)
name|literal
operator|)
operator|.
name|getLanguage
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|RdfText
argument_list|(
operator|new
name|PlainLiteralImpl
argument_list|(
name|literal
operator|.
name|getLexicalForm
argument_list|()
argument_list|,
name|language
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|literal
operator|.
name|getLexicalForm
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|Text
operator|&&
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|getText
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|getLanguage
argument_list|()
operator|==
literal|null
operator|&&
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|getLanguage
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|getLanguage
argument_list|()
operator|!=
literal|null
operator|&&
name|getLanguage
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|literal
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
block|}
end_class

end_unit

