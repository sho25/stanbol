begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_comment
comment|/**  * Factory for creating instances of the RDF implementation of the Rick model  * based on Clerezza.  * TODO: Check if it makes sense to add a instance cache for {@link RdfReference}  *       instances.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|RdfValueFactory
implements|implements
name|ValueFactory
block|{
specifier|private
specifier|static
name|RdfValueFactory
name|instance
decl_stmt|;
comment|/**      * TODO:Currently implements the singleton pattern. This might change in the      * future if ValueFactoy becomes an own OSGI Service      * @return      */
specifier|public
specifier|static
name|RdfValueFactory
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|RdfValueFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
specifier|private
name|RdfValueFactory
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RdfReference
name|createReference
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed value MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|UriRef
condition|)
block|{
return|return
operator|new
name|RdfReference
argument_list|(
operator|(
name|UriRef
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RdfReference
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RdfText
name|createText
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed value MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Literal
condition|)
block|{
return|return
operator|new
name|RdfText
argument_list|(
operator|(
name|Literal
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createText
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RdfText
name|createText
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|language
parameter_list|)
block|{
return|return
operator|new
name|RdfText
argument_list|(
name|text
argument_list|,
name|language
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RdfRepresentation
name|createRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
return|return
name|createRdfRepresentation
argument_list|(
operator|new
name|UriRef
argument_list|(
name|id
argument_list|)
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * {@link RdfRepresentation} specific create Method based on an existing      * RDF Graph.      *      * @param node The node of the node used for the representation. If this      *     node is not part of the parsed graph, the resulting representation      *     will be empty      * @param graph the graph.      * @return The representation based on the state of the parsed graph      */
specifier|public
name|RdfRepresentation
name|createRdfRepresentation
parameter_list|(
name|UriRef
name|node
parameter_list|,
name|TripleCollection
name|graph
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL!"
argument_list|)
throw|;
block|}
return|return
operator|new
name|RdfRepresentation
argument_list|(
name|node
argument_list|,
name|graph
argument_list|)
return|;
block|}
comment|/**      * Extracts the Graph for {@link RdfRepresentation} or creates a {@link Graph}      * for all other implementations of {@link Representation}.      *      * @param representation the representation      * @return the read only RDF Graph.      */
specifier|public
name|RdfRepresentation
name|toRdfRepresentation
parameter_list|(
name|Representation
name|representation
parameter_list|)
block|{
if|if
condition|(
name|representation
operator|instanceof
name|RdfRepresentation
condition|)
block|{
return|return
operator|(
name|RdfRepresentation
operator|)
name|representation
return|;
block|}
else|else
block|{
comment|//create the Clerezza Represenation
name|RdfRepresentation
name|clerezzaRep
init|=
name|createRepresentation
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Copy all values field by field
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|representation
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
name|representation
operator|.
name|get
argument_list|(
name|field
argument_list|)
init|;
name|fieldValues
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|clerezzaRep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|fieldValues
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clerezzaRep
return|;
block|}
block|}
block|}
end_class

end_unit

