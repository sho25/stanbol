begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|AdaptingIterator
operator|.
name|Adapter
import|;
end_import

begin_comment
comment|/**  * TODO: refactor to use the {@link Adapter} interface  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|NaturalLanguageLiteralIterator
implements|implements
name|Iterator
argument_list|<
name|Literal
argument_list|>
block|{
comment|/** 	 * Unmodifiable set of the active languages  	 */
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|containsNull
decl_stmt|;
specifier|protected
specifier|final
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|it
decl_stmt|;
specifier|protected
name|Literal
name|next
decl_stmt|;
specifier|public
name|NaturalLanguageLiteralIterator
parameter_list|(
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|it
parameter_list|,
name|String
modifier|...
name|lang
parameter_list|)
block|{
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter Iterator<Literal> MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter languages MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|lang
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one language MUST be present"
argument_list|)
throw|;
block|}
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|containsNull
operator|=
name|languages
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//init the first element
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Literal
name|next
parameter_list|()
block|{
name|Literal
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|final
name|Literal
name|prepareNext
parameter_list|()
block|{
name|Literal
name|current
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|PlainLiteral
condition|)
block|{
if|if
condition|(
name|languages
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|PlainLiteral
operator|)
name|current
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|current
return|;
block|}
comment|//else wrong language -> filter
block|}
elseif|else
if|if
condition|(
name|containsNull
condition|)
block|{
comment|/* 				 * if the null language is active, than we can also return 				 * "normal" literals (with no known language) 				 */
return|return
name|current
return|;
block|}
comment|// else no language defined -> filter
block|}
return|return
literal|null
return|;
comment|//no more elements -> return null
block|}
block|}
end_class

end_unit

