begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|AdaptingIterator
operator|.
name|Adapter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfResourceUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * This Adapter does two things:  *<ol>  *<li> It filters {@link Literal}s based on the languages parsed in the  *      constructor. If no languages are parsed, than all languages are accepted  *<li> It converts {@link Literal}s to {@link Text}. Only {@link PlainLiteral}  *      and {@link TypedLiteral} with an xsd data type present in the  *      {@link RdfResourceUtils#STRING_DATATYPES} are converted. All other literals are  *      filtered (meaning that<code>null</code> is returned)  *</ol>  * The difference of this Adapter to the {@link LiteralAdapter} with the generic  * type {@link Text} is that the LiteralAdapter can not be used to filter  * literals based on there language.  *  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|Literal2TextAdapter
parameter_list|<
name|T
extends|extends
name|Literal
parameter_list|>
implements|implements
name|Adapter
argument_list|<
name|T
argument_list|,
name|Text
argument_list|>
block|{
comment|/**      * Unmodifiable set of the active languages      */
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|containsNull
decl_stmt|;
specifier|protected
specifier|final
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * Filters Literals in the parsed Iterator based on the parsed languages and      * convert matching Literals to Text      * @param it the iterator      * @param lang the active languages. If<code>null</code> or empty, all      * languages are active. If<code>null</code> is parsed as an element, that      * also Literals without a language are returned      */
specifier|public
name|Literal2TextAdapter
parameter_list|(
name|String
modifier|...
name|lang
parameter_list|)
block|{
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
name|lang
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lang
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|containsNull
operator|=
name|languages
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|languages
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|containsNull
operator|=
literal|true
expr_stmt|;
block|}
comment|//init the first element
block|}
annotation|@
name|Override
specifier|public
name|Text
name|adapt
parameter_list|(
name|T
name|value
parameter_list|,
name|Class
argument_list|<
name|Text
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|PlainLiteral
condition|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|PlainLiteral
operator|)
name|value
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createText
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|//else wrong language -> filter
block|}
elseif|else
if|if
condition|(
name|containsNull
condition|)
block|{
comment|/*              * if the null language is active, than we can also return              * "normal" literals (with no known language).              * But first we need to check the Datatype!              */
return|return
name|valueFactory
operator|.
name|createText
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|// else no language defined -> filter
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

