begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NoConvertorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|GraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|AdaptingIterator
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|TypeSaveIterator
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
operator|.
name|Literal2TextAdapter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
operator|.
name|LiteralAdapter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
operator|.
name|NaturalLanguageLiteralIterator
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
operator|.
name|ReferenceIterator
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
operator|.
name|Resource2ValueAdapter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
operator|.
name|UriRefAdapter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|utils
operator|.
name|Resource2StringAdapter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|UnsupportedTypeException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_class
specifier|public
class|class
name|RdfRepresentation
implements|implements
name|Representation
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RdfRepresentation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|REPRESENTATION_TYPE_PROPERTY
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|signType
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|GraphNode
name|graphNode
decl_stmt|;
specifier|protected
specifier|final
name|GraphNode
name|getGraphNode
parameter_list|()
block|{
return|return
name|graphNode
return|;
block|}
specifier|protected
name|RdfRepresentation
parameter_list|(
name|UriRef
name|resource
parameter_list|,
name|TripleCollection
name|graph
parameter_list|)
block|{
name|this
operator|.
name|graphNode
operator|=
operator|new
name|GraphNode
argument_list|(
name|resource
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the read only view onto the RDF data of this representation.      *      * @return The RDF graph of this Representation      */
specifier|public
name|TripleCollection
name|getRdfGraph
parameter_list|()
block|{
return|return
name|graphNode
operator|.
name|getGraph
argument_list|()
return|;
block|}
specifier|protected
name|UriRef
name|getRepresentationType
parameter_list|()
block|{
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|it
init|=
name|this
operator|.
name|graphNode
operator|.
name|getUriRefObjects
argument_list|(
name|REPRESENTATION_TYPE_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|hasNext
argument_list|()
condition|?
name|it
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter \"String field\" MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as value in add method for symbol "
operator|+
name|getId
argument_list|()
operator|+
literal|" and field "
operator|+
name|field
operator|+
literal|" -> call ignored"
argument_list|)
expr_stmt|;
return|return;
block|}
name|UriRef
name|fieldUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|//process the parsed value with the Utility Method ->
comment|// this converts Objects as defined in the specification
name|ModelUtils
operator|.
name|checkValues
argument_list|(
name|valueFactory
argument_list|,
name|value
argument_list|,
name|values
argument_list|)
expr_stmt|;
comment|//We still need to implement support for specific types supported by this implementation
for|for
control|(
name|Object
name|current
range|:
name|values
control|)
block|{
if|if
condition|(
name|current
operator|instanceof
name|Resource
condition|)
block|{
comment|//native support for Clerezza types!
name|graphNode
operator|.
name|addProperty
argument_list|(
name|fieldUriRef
argument_list|,
operator|(
name|Resource
operator|)
name|current
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|instanceof
name|RdfReference
condition|)
block|{
comment|//treat RDF Implementations special to avoid creating new instances
name|graphNode
operator|.
name|addProperty
argument_list|(
name|fieldUriRef
argument_list|,
operator|(
operator|(
name|RdfReference
operator|)
name|current
operator|)
operator|.
name|getUriRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|instanceof
name|Reference
condition|)
block|{
name|graphNode
operator|.
name|addProperty
argument_list|(
name|fieldUriRef
argument_list|,
operator|new
name|UriRef
argument_list|(
operator|(
operator|(
name|Reference
operator|)
name|current
operator|)
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addReference
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|Reference
operator|)
name|current
operator|)
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|instanceof
name|RdfText
condition|)
block|{
comment|//treat RDF Implementations special to avoid creating new instances
name|graphNode
operator|.
name|addProperty
argument_list|(
name|fieldUriRef
argument_list|,
operator|(
operator|(
name|RdfText
operator|)
name|current
operator|)
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|instanceof
name|Text
condition|)
block|{
name|addNaturalText
argument_list|(
name|fieldUriRef
argument_list|,
operator|(
operator|(
name|Text
operator|)
name|current
operator|)
operator|.
name|getText
argument_list|()
argument_list|,
operator|(
operator|(
name|Text
operator|)
name|current
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//else add an typed Literal!
name|addTypedLiteral
argument_list|(
name|fieldUriRef
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addTypedLiteral
parameter_list|(
name|UriRef
name|field
parameter_list|,
name|Object
name|literalValue
parameter_list|)
block|{
name|Literal
name|literal
decl_stmt|;
try|try
block|{
name|literal
operator|=
name|RdfResourceUtils
operator|.
name|createLiteral
argument_list|(
name|literalValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoConvertorException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No Converter for value type "
operator|+
name|literalValue
operator|.
name|getClass
argument_list|()
operator|+
literal|" (parsed for field "
operator|+
name|field
operator|+
literal|") use toString() to get String representation"
argument_list|)
expr_stmt|;
name|literal
operator|=
name|RdfResourceUtils
operator|.
name|createLiteral
argument_list|(
name|literalValue
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|graphNode
operator|.
name|addProperty
argument_list|(
name|field
argument_list|,
name|literal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addReference
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter \"String field\" MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as value in add method for symbol "
operator|+
name|getId
argument_list|()
operator|+
literal|" and field "
operator|+
name|field
operator|+
literal|" -> call ignored"
argument_list|)
expr_stmt|;
block|}
name|graphNode
operator|.
name|addProperty
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNaturalText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|text
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter \"String field\" MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as value in add method for symbol "
operator|+
name|getId
argument_list|()
operator|+
literal|" and field "
operator|+
name|field
operator|+
literal|" -> call ignored"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|addNaturalText
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|,
name|text
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addNaturalText
parameter_list|(
name|UriRef
name|field
parameter_list|,
name|String
name|text
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"NULL parsed as languages -> replacing with \"new String []{null}\""
operator|+
literal|" -> assuming a missing explicit cast to (Stirng) in the var arg"
argument_list|)
expr_stmt|;
name|languages
operator|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|language
range|:
name|languages
control|)
block|{
name|graphNode
operator|.
name|addProperty
argument_list|(
name|field
argument_list|,
name|RdfResourceUtils
operator|.
name|createLiteral
argument_list|(
name|text
argument_list|,
name|language
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnsupportedTypeException
block|{
name|UriRef
name|fieldUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|Resource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|//native support for Clerezza types
return|return
operator|new
name|TypeSaveIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getObjects
argument_list|(
name|fieldUriRef
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//support to convert anything to String
return|return
operator|(
name|Iterator
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|AdaptingIterator
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getObjects
argument_list|(
name|fieldUriRef
argument_list|)
argument_list|,
operator|new
name|Resource2StringAdapter
argument_list|<
name|Resource
argument_list|>
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|URI
operator|.
name|class
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|URL
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//support for References
return|return
operator|new
name|AdaptingIterator
argument_list|<
name|UriRef
argument_list|,
name|T
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getUriRefObjects
argument_list|(
name|fieldUriRef
argument_list|)
argument_list|,
operator|new
name|UriRefAdapter
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Reference
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|(
name|Iterator
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|ReferenceIterator
argument_list|(
name|graphNode
operator|.
name|getUriRefObjects
argument_list|(
name|fieldUriRef
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Text
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|(
name|Iterator
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|AdaptingIterator
argument_list|<
name|Literal
argument_list|,
name|Text
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getLiterals
argument_list|(
name|fieldUriRef
argument_list|)
argument_list|,
operator|new
name|Literal2TextAdapter
argument_list|<
name|Literal
argument_list|>
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|)
return|;
block|}
else|else
block|{
comment|//support for Literals -> Type conversions
return|return
operator|new
name|AdaptingIterator
argument_list|<
name|Literal
argument_list|,
name|T
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getLiterals
argument_list|(
name|fieldUriRef
argument_list|)
argument_list|,
operator|new
name|LiteralAdapter
argument_list|<
name|Literal
argument_list|,
name|T
argument_list|>
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|getReferences
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|it
init|=
name|graphNode
operator|.
name|getUriRefObjects
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReferenceIterator
argument_list|(
name|it
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Text
argument_list|>
name|getText
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
operator|new
name|AdaptingIterator
argument_list|<
name|Literal
argument_list|,
name|Text
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getLiterals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Literal2TextAdapter
argument_list|<
name|Literal
argument_list|>
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|get
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
operator|new
name|AdaptingIterator
argument_list|<
name|Resource
argument_list|,
name|Object
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getObjects
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Resource2ValueAdapter
argument_list|<
name|Resource
argument_list|>
argument_list|()
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Text
argument_list|>
name|get
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"NULL parsed as languages -> replacing with \"new String []{null}\""
operator|+
literal|" -> assuming a missing explicit cast to (String) in the var arg"
argument_list|)
expr_stmt|;
name|languages
operator|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
expr_stmt|;
block|}
return|return
operator|new
name|AdaptingIterator
argument_list|<
name|Literal
argument_list|,
name|Text
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getLiterals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Literal2TextAdapter
argument_list|<
name|Literal
argument_list|>
argument_list|(
name|languages
argument_list|)
argument_list|,
name|Text
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
block|{
return|return
operator|new
name|AdaptingIterator
argument_list|<
name|UriRef
argument_list|,
name|String
argument_list|>
argument_list|(
name|graphNode
operator|.
name|getProperties
argument_list|()
argument_list|,
operator|new
name|Resource2StringAdapter
argument_list|<
name|UriRef
argument_list|>
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getFirst
parameter_list|(
name|String
name|field
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnsupportedTypeException
block|{
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
init|=
name|get
argument_list|(
name|field
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getFirst
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Reference
name|getFirstReference
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|it
init|=
name|getReferences
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|hasNext
argument_list|()
condition|?
name|it
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|getFirst
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"NULL parsed as languages -> replacing with \"new String []{null}\""
operator|+
literal|" -> assuming a missing explicit cast to (String) in the var arg"
argument_list|)
expr_stmt|;
name|languages
operator|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|get
argument_list|(
name|field
argument_list|,
name|languages
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
operator|(
operator|(
name|UriRef
operator|)
name|graphNode
operator|.
name|getNode
argument_list|()
operator|)
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter \"String field\" MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as value in remove method for symbol "
operator|+
name|getId
argument_list|()
operator|+
literal|" and field "
operator|+
name|field
operator|+
literal|" -> call ignored"
argument_list|)
expr_stmt|;
block|}
name|UriRef
name|fieldUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Resource
condition|)
block|{
comment|//native support for Clerezza types!
name|graphNode
operator|.
name|deleteProperty
argument_list|(
name|fieldUriRef
argument_list|,
operator|(
name|Resource
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|URI
operator|||
name|value
operator|instanceof
name|URL
condition|)
block|{
name|removeReference
argument_list|(
name|field
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|removeNaturalText
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeNaturalText
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|removeTypedLiteral
argument_list|(
name|fieldUriRef
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeReference
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter \"String field\" MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as value in remove method for symbol "
operator|+
name|getId
argument_list|()
operator|+
literal|" and field "
operator|+
name|field
operator|+
literal|" -> call ignored"
argument_list|)
expr_stmt|;
block|}
name|graphNode
operator|.
name|deleteProperty
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeTypedLiteral
parameter_list|(
name|UriRef
name|field
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|Literal
name|literal
decl_stmt|;
try|try
block|{
name|literal
operator|=
name|RdfResourceUtils
operator|.
name|createLiteral
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoConvertorException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No Converter for value type "
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|+
literal|" (parsed for field "
operator|+
name|field
operator|+
literal|") use toString() Method to get String representation"
argument_list|)
expr_stmt|;
name|literal
operator|=
name|RdfResourceUtils
operator|.
name|createLiteral
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|graphNode
operator|.
name|deleteProperty
argument_list|(
name|field
argument_list|,
name|literal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNaturalText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter \"String field\" MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as value in remove method for symbol "
operator|+
name|getId
argument_list|()
operator|+
literal|" and field "
operator|+
name|field
operator|+
literal|" -> call ignored"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"NULL parsed as languages -> replacing with \"new String []{null}\""
operator|+
literal|" -> assuming a missing explicit cast to (Stirng) in the var arg"
argument_list|)
expr_stmt|;
name|languages
operator|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
expr_stmt|;
block|}
name|UriRef
name|fieldUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|language
range|:
name|languages
control|)
block|{
name|graphNode
operator|.
name|deleteProperty
argument_list|(
name|fieldUriRef
argument_list|,
name|RdfResourceUtils
operator|.
name|createLiteral
argument_list|(
name|value
argument_list|,
name|language
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAll
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|graphNode
operator|.
name|deleteProperties
argument_list|(
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAllNaturalText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter \"String field\" MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|languages
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"NULL parsed as languages -> replacing with \"new String []{null}\""
operator|+
literal|" -> assuming a missing explicit cast to (Stirng) in the var arg"
argument_list|)
expr_stmt|;
name|languages
operator|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
expr_stmt|;
block|}
name|UriRef
name|fieldUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Literal
argument_list|>
name|literals
init|=
operator|new
name|ArrayList
argument_list|<
name|Literal
argument_list|>
argument_list|()
decl_stmt|;
comment|//get all the affected Literals
for|for
control|(
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|it
init|=
operator|new
name|NaturalLanguageLiteralIterator
argument_list|(
name|graphNode
operator|.
name|getLiterals
argument_list|(
name|fieldUriRef
argument_list|)
argument_list|,
name|languages
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|literals
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
control|)
empty_stmt|;
comment|//delete the found literals
for|for
control|(
name|Literal
name|literal
range|:
name|literals
control|)
block|{
name|graphNode
operator|.
name|deleteProperty
argument_list|(
name|fieldUriRef
argument_list|,
name|literal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|removeAll
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReference
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
name|removeAll
argument_list|(
name|reference
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|addReference
argument_list|(
name|field
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNaturalText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|text
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
name|removeAllNaturalText
argument_list|(
name|field
argument_list|,
name|languages
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|text
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

