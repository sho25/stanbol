begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|core
operator|.
name|utils
operator|.
name|AdaptingIterator
operator|.
name|Adapter
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|rick
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_comment
comment|/**  * TODO: Change implementation to {@link Adapter}!  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ReferenceIterator
implements|implements
name|Iterator
argument_list|<
name|Reference
argument_list|>
block|{
specifier|private
specifier|final
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|it
decl_stmt|;
specifier|public
name|ReferenceIterator
parameter_list|(
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parent Iterator<UriRef> MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Reference
name|next
parameter_list|()
block|{
name|UriRef
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|next
operator|!=
literal|null
condition|?
name|valueFactory
operator|.
name|createReference
argument_list|(
name|next
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

