begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|factstore
operator|.
name|web
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|BundleContextMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|ServletContextMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|factstore
operator|.
name|FactStoreMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|factstore
operator|.
name|UriInfoMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|factstore
operator|.
name|api
operator|.
name|FactStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|factstore
operator|.
name|web
operator|.
name|resource
operator|.
name|FactsResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_class
specifier|public
class|class
name|FactsResourceTest
block|{
specifier|private
name|ServletContextMock
name|servletContext
decl_stmt|;
specifier|private
name|UriInfoMock
name|uriInfoMock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|initMocks
parameter_list|()
block|{
name|this
operator|.
name|servletContext
operator|=
operator|new
name|ServletContextMock
argument_list|()
expr_stmt|;
name|this
operator|.
name|servletContext
operator|.
name|putAttribute
argument_list|(
name|BaseStanbolResource
operator|.
name|ROOT_URL
argument_list|,
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|BundleContextMock
name|bc
init|=
operator|(
name|BundleContextMock
operator|)
name|this
operator|.
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|BundleContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|bc
operator|.
name|putService
argument_list|(
name|FactStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|FactStoreMock
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|uriInfoMock
operator|=
operator|new
name|UriInfoMock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutFactSchemaNoSchemaURI
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|putFactSchema
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutFactSchemaNoJSON
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|putFactSchema
argument_list|(
literal|"no JSON-LD string"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutFactSchemaNoJSONSchema
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|putFactSchema
argument_list|(
literal|"{}"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTooLongURN
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|putFactSchema
argument_list|(
literal|"{\"@context\":{\"iks\":\"http://iks-project.eu/ont/\",\"@types\":{\"person\":\"iks:person\",\"organization\":\"iks:organization\"}}}"
argument_list|,
literal|"http://www.test.de/this/urn/is/a/bit/too/long/to/be/used/in/this/fact/store/implementation/with/derby"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutFactSchemaValidInput
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|putFactSchema
argument_list|(
literal|"{\"@context\":{\"iks\":\"http://iks-project.eu/ont/\",\"@types\":{\"person\":\"iks:person\",\"organization\":\"iks:organization\"}}}"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|CREATED
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostSingleFact
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|postFacts
argument_list|(
literal|"{\"@context\":{\"iks\":\"http://iks-project.eu/ont/\",\"upb\":\"http://upb.de/persons/\"},\"@profile\":\"iks:employeeOf\",\"person\":{\"@iri\":\"upb:bnagel\"},\"organization\":{\"@iri\":\"http://uni-paderborn.de\"}}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://testhost:1234/factstore/facts/99"
argument_list|,
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultiFacts
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|postFacts
argument_list|(
literal|"{\"@context\":{\"iks\":\"http://iks-project.eu/ont/\",\"upb\":\"http://upb.de/persons/\"},\"@profile\":\"iks:employeeOf\",\"@subject\":[{\"person\":{\"@iri\":\"upb:bnagel\"},\"organization\":{\"@iri\":\"http://uni-paderborn.de\"}},{\"person\":{\"@iri\":\"upb:fchrist\"},\"organization\":{\"@iri\":\"http://uni-paderborn.de\"}}]}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultiFactsDifferentTypes
parameter_list|()
block|{
name|FactsResource
name|fr
init|=
operator|new
name|FactsResourceWrapper
argument_list|(
name|this
operator|.
name|servletContext
argument_list|,
name|this
operator|.
name|uriInfoMock
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|fr
operator|.
name|postFacts
argument_list|(
literal|"{\"@context\":{\"iks\":\"http://iks-project.eu/ont/\",\"upb\":\"http://upb.de/persons/\"},\"@subject\":[{\"@profile\":\"iks:employeeOf\",\"person\":{\"@iri\":\"upb:bnagel\"},\"organization\":{\"@iri\":\"http://uni-paderborn.de\"}},{\"@profile\":\"iks:friendOf\",\"person\":{\"@iri\":\"upb:bnagel\"},\"friend\":{\"@iri\":\"upb:fchrist\"}}]}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

