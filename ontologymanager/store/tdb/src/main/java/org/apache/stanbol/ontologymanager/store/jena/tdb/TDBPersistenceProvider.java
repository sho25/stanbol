begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|jena
operator|.
name|tdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|JenaPersistenceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Dataset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|TDBFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|enabled
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|TDBPersistenceProvider
implements|implements
name|JenaPersistenceProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TDBPersistenceProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|datasetPath
decl_stmt|;
specifier|protected
name|Dataset
name|dataset
decl_stmt|;
specifier|public
name|TDBPersistenceProvider
parameter_list|()
block|{      }
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|datasetPath
operator|=
name|cc
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getDataFile
argument_list|(
literal|"Jena TDB Store"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|dataset
operator|=
name|TDBFactory
operator|.
name|createDataset
argument_list|(
name|datasetPath
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Dataset restored in {} ms "
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
name|dataset
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|clear
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|URIs
init|=
name|dataset
operator|.
name|listNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|URIs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dataset
operator|.
name|getNamedModel
argument_list|(
name|URIs
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
name|dataset
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|datasetPath
argument_list|)
decl_stmt|;
name|boolean
name|deleted
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
name|deleted
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Deleted TDB Store at {} "
argument_list|,
name|datasetPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can not delete TDB Store at {} "
argument_list|,
name|datasetPath
argument_list|)
expr_stmt|;
block|}
name|dataset
operator|=
name|TDBFactory
operator|.
name|createDataset
argument_list|(
name|datasetPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Model
name|createModel
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
if|if
condition|(
name|dataset
operator|.
name|containsNamedModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|model
init|=
name|dataset
operator|.
name|getNamedModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|model
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Deleted model at  {}"
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
return|return
name|dataset
operator|.
name|getNamedModel
argument_list|(
name|ontologyURI
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Model
name|getModel
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
if|if
condition|(
name|dataset
operator|.
name|containsNamedModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
return|return
name|dataset
operator|.
name|getNamedModel
argument_list|(
name|ontologyURI
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasModel
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
return|return
name|dataset
operator|.
name|containsNamedModel
argument_list|(
name|ontologyURI
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listModels
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|modelIt
init|=
name|dataset
operator|.
name|listNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|modelIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|models
operator|.
name|add
argument_list|(
name|modelIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|models
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeModel
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
if|if
condition|(
name|dataset
operator|.
name|containsNamedModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|model
init|=
name|dataset
operator|.
name|getNamedModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|model
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can not commit null model"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|supportsTransactions
argument_list|()
condition|)
block|{
name|model
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

