begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|jena
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|JenaPersistenceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|PersistenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|StoreSynchronizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|jena
operator|.
name|util
operator|.
name|JenaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|AdministeredOntologies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|BuiltInResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ClassConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ClassContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ClassMetaInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ClassesForOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ConstraintType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ContainerClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|DatatypePropertiesForOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|DatatypePropertyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|DisjointClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|Domain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|EquivalentClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|EquivalentProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ImportsForOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|IndividualContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|IndividualMetaInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|IndividualsForOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ObjectPropertiesForOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ObjectPropertyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|OntologyImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|OntologyMetaInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|PropertyAssertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|PropertyAssertions
operator|.
name|PropertyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|PropertyMetaInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|ResourceMetaInformationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|SuperProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|Superclasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|owllink
operator|.
name|OWLlinkHTTPXMLReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|owllink
operator|.
name|OWLlinkHTTPXMLReasonerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|owllink
operator|.
name|OWLlinkReasonerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|owllink
operator|.
name|OWLlinkReasonerRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|owllink
operator|.
name|builtin
operator|.
name|requests
operator|.
name|ReleaseKB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|ConsoleProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|IndividualNodeSetPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|OWLReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredClassAssertionAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredDataPropertyCharacteristicAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredDisjointClassesAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredEquivalentClassAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredEquivalentDataPropertiesAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredEquivalentObjectPropertyAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredInverseObjectPropertiesAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredObjectPropertyCharacteristicAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredPropertyAssertionGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredSubClassAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredSubDataPropertyAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredSubObjectPropertyAxiomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|AllValuesFromRestriction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ComplementClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ConversionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|DataRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|DatatypeProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|EnumeratedClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|HasValueRestriction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|IntersectionClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|SomeValuesFromRestriction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|UnionClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|ResultSetFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ResourceFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|shared
operator|.
name|ReificationStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|iterator
operator|.
name|ExtendedIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|JenaPersistenceStore
implements|implements
name|PersistenceStore
block|{
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
argument_list|(
name|value
operator|=
literal|""
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|REASONER_URL_PROP
init|=
literal|"org.apache.stanbol.ontologymanager.store.reasonerURL"
decl_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
argument_list|(
name|name
operator|=
name|JenaPersistenceStore
operator|.
name|REASONER_INFERRED_AXIOM_GENERATOR
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|,
name|value
operator|=
block|{
literal|"InferredClassAssertionAxiomGenerator"
block|}
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredClassAssertionAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredClassAssertionAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredObjectPropertyCharacteristicAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredObjectPropertyCharacteristicAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredDataPropertyCharacteristicAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredDataPropertyCharacteristicAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredDisjointClassesAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredDisjointClassesAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredEquivalentClassesAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredEquivalentClassesAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredEquivalentDataPropertiesAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredEquivalentDataPropertiesAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredEquivalentObjectPropertyAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredEquivalentObjectPropertyAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredInverseObjectPropertiesGenerator"
argument_list|,
name|value
operator|=
literal|"InferredInverseObjectPropertiesGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredObjectPropertyCharacteristicAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredObjectPropertyCharacteristicAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredPropertyAssertionGenerator"
argument_list|,
name|value
operator|=
literal|"InferredPropertyAssertionGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredSubClassAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredSubClassAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredSubDataPropertyAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredSubDataPropertyAxiomGenerator"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"InferredSubObjectPropertyAssertionAxiomGenerator"
argument_list|,
name|value
operator|=
literal|"InferredSubObjectPropertyAssertionAxiomGenerator"
argument_list|)
block|}
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|REASONER_INFERRED_AXIOM_GENERATOR
init|=
literal|"org.apache.stanbol.ontologymanager.store.reasonerInferredAxiomGenerators"
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|)
specifier|private
name|JenaPersistenceProvider
name|persistenceProvider
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ResourceManager
name|resourceManager
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|target
operator|=
literal|"(component.factory=org.apache.stanbol.ontologymanager.store.StoreSynchronizerFactory)"
argument_list|)
specifier|private
name|ComponentFactory
name|componentFactory
decl_stmt|;
specifier|private
name|SynchronizerThread
name|synchronizerThread
decl_stmt|;
specifier|private
name|URL
name|REASONER_URL
decl_stmt|;
specifier|private
name|boolean
name|useReasoner
decl_stmt|;
specifier|private
name|List
argument_list|<
name|InferredAxiomGenerator
argument_list|>
name|inferredAxiomGenerators
decl_stmt|;
comment|/** Logger instance **/
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JenaPersistenceStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Singleton instance **/
specifier|private
specifier|static
name|JenaPersistenceStore
name|persistenceStoreInstance
init|=
literal|null
decl_stmt|;
static|static
block|{
name|JenaUtil
operator|.
name|initialConf
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
name|this
operator|.
name|synchronizerThread
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Activate
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|reasonerUrl
init|=
name|properties
operator|.
name|get
argument_list|(
name|REASONER_URL_PROP
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|axiomGenerators
init|=
name|properties
operator|.
name|get
argument_list|(
name|REASONER_INFERRED_AXIOM_GENERATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|inferenceGenerators
decl_stmt|;
if|if
condition|(
name|axiomGenerators
operator|instanceof
name|String
condition|)
block|{
name|inferenceGenerators
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|inferenceGenerators
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|axiomGenerators
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inferenceGenerators
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|properties
operator|.
name|get
argument_list|(
name|REASONER_INFERRED_AXIOM_GENERATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inferredAxiomGenerators
operator|=
name|createAxiomGenerators
argument_list|(
name|inferenceGenerators
argument_list|)
expr_stmt|;
if|if
condition|(
name|reasonerUrl
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|reasonerUrl
argument_list|)
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Reasoner URL not found, If inferred axioms are requested "
operator|+
name|OntModelSpec
operator|.
name|OWL_DL_MEM_TRANS_INF
operator|+
literal|" will be used"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|REASONER_URL
operator|=
operator|new
name|URL
argument_list|(
name|reasonerUrl
argument_list|)
expr_stmt|;
name|this
operator|.
name|useReasoner
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Invalid URL for reasoner : "
operator|+
name|reasonerUrl
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get IStoreSycnhronizer from component factory
if|if
condition|(
name|this
operator|.
name|componentFactory
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Dictionary
name|props
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ResourceManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|resourceManager
argument_list|)
expr_stmt|;
name|ComponentInstance
name|componentInstance
init|=
name|this
operator|.
name|componentFactory
operator|.
name|newInstance
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|StoreSynchronizer
name|storeSynchronizer
init|=
operator|(
name|StoreSynchronizer
operator|)
name|componentInstance
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|this
operator|.
name|synchronizerThread
operator|=
operator|new
name|SynchronizerThread
argument_list|(
name|storeSynchronizer
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
name|synchronizerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"No synchronizer factory found"
argument_list|)
expr_stmt|;
block|}
name|persistenceStoreInstance
operator|=
name|this
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|InferredAxiomGenerator
argument_list|>
name|createAxiomGenerators
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|inferenceGenerators
parameter_list|)
block|{
name|List
argument_list|<
name|InferredAxiomGenerator
argument_list|>
name|generators
init|=
operator|new
name|ArrayList
argument_list|<
name|InferredAxiomGenerator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|generator
range|:
name|inferenceGenerators
control|)
block|{
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredClassAssertionAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredClassAssertionAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredDataPropertyCharacteristicAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredDataPropertyCharacteristicAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredDisjointClassesAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredDisjointClassesAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredEquivalentClassAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredEquivalentClassAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredEquivalentDataPropertiesAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredEquivalentDataPropertiesAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredEquivalentObjectPropertyAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredEquivalentDataPropertiesAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredInverseObjectPropertiesAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredInverseObjectPropertiesAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredObjectPropertyCharacteristicAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredObjectPropertyCharacteristicAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredDataPropertyCharacteristicAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredDataPropertyCharacteristicAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredPropertyAssertionGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredPropertyAssertionGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredSubClassAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredClassAssertionAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredSubDataPropertyAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredClassAssertionAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generator
operator|.
name|equalsIgnoreCase
argument_list|(
name|InferredSubObjectPropertyAxiomGenerator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
operator|new
name|InferredClassAssertionAxiomGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|generators
return|;
block|}
specifier|public
name|void
name|bindComponentFactory
parameter_list|(
name|ComponentFactory
name|componentFactory
parameter_list|)
block|{
name|this
operator|.
name|componentFactory
operator|=
name|componentFactory
expr_stmt|;
block|}
specifier|public
name|void
name|unbindComponentFactory
parameter_list|(
name|ComponentFactory
name|componentFactory
parameter_list|)
block|{
name|this
operator|.
name|synchronizerThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|this
operator|.
name|componentFactory
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|bindPersistenceProvider
parameter_list|(
name|JenaPersistenceProvider
name|persistenceProvider
parameter_list|)
block|{
name|this
operator|.
name|persistenceProvider
operator|=
name|persistenceProvider
expr_stmt|;
block|}
specifier|public
name|void
name|unbindPersistenceProvider
parameter_list|(
name|JenaPersistenceProvider
name|persistenceProvider
parameter_list|)
block|{
name|this
operator|.
name|synchronizerThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|this
operator|.
name|persistenceProvider
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|URL
name|getREASONER_URL
parameter_list|()
block|{
return|return
name|REASONER_URL
return|;
block|}
specifier|public
name|ModelMaker
name|getModelMaker
parameter_list|()
block|{
name|ModelMaker
name|m_maker
init|=
name|ModelFactory
operator|.
name|createMemModelMaker
argument_list|(
name|ReificationStyle
operator|.
name|Minimal
argument_list|)
decl_stmt|;
return|return
name|m_maker
return|;
block|}
specifier|public
name|OntModelSpec
name|getOntModelSpec
parameter_list|(
name|boolean
name|attachReasoner
parameter_list|)
block|{
name|OntModelSpec
name|oms
decl_stmt|;
if|if
condition|(
name|attachReasoner
condition|)
block|{
name|oms
operator|=
operator|new
name|OntModelSpec
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM_TRANS_INF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oms
operator|=
operator|new
name|OntModelSpec
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|)
expr_stmt|;
block|}
return|return
name|oms
return|;
block|}
specifier|public
specifier|static
name|JenaPersistenceStore
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|persistenceStoreInstance
operator|==
literal|null
condition|)
block|{
name|persistenceStoreInstance
operator|=
operator|new
name|JenaPersistenceStore
argument_list|()
expr_stmt|;
block|}
return|return
name|persistenceStoreInstance
return|;
block|}
comment|/** Interface Functions **/
specifier|public
name|boolean
name|clearPersistenceStore
parameter_list|()
block|{
name|resourceManager
operator|.
name|clearResourceManager
argument_list|()
expr_stmt|;
return|return
name|persistenceProvider
operator|.
name|clear
argument_list|()
return|;
block|}
specifier|public
name|AdministeredOntologies
name|retrieveAdministeredOntologies
parameter_list|()
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|AdministeredOntologies
name|administeredOntologies
init|=
name|objectFactory
operator|.
name|createAdministeredOntologies
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ontologyURIs
init|=
name|getSavedOntologyURIs
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|ontologyURIsItr
init|=
name|ontologyURIs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontologyURIsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|curOntologyURI
init|=
name|ontologyURIsItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curOntologyPath
init|=
name|resourceManager
operator|.
name|getOntologyPath
argument_list|(
name|curOntologyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|curOntologyPath
operator|!=
literal|null
condition|)
block|{
name|OntologyMetaInformation
name|ontologyMetaInformation
init|=
name|retrieveOntologyMetaInformation
argument_list|(
name|curOntologyURI
argument_list|)
decl_stmt|;
name|administeredOntologies
operator|.
name|getOntologyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|ontologyMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|administeredOntologies
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntologyMetaInformation
name|saveOntology
parameter_list|(
name|String
name|ontologyContent
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|ontologyContent
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|saveOntology
argument_list|(
name|is
argument_list|,
name|ontologyURI
argument_list|,
name|encoding
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntologyMetaInformation
name|saveOntology
parameter_list|(
name|URL
name|ontologyContent
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|ontologyContent
operator|.
name|openStream
argument_list|()
decl_stmt|;
return|return
name|saveOntology
argument_list|(
name|is
argument_list|,
name|ontologyURI
argument_list|,
name|encoding
argument_list|)
return|;
block|}
specifier|public
name|OntologyMetaInformation
name|saveOntology
parameter_list|(
name|InputStream
name|content
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OntologyMetaInformation
name|ontMetaInformation
init|=
literal|null
decl_stmt|;
name|OntModel
name|om
init|=
literal|null
decl_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Ontology store for: "
operator|+
name|ontologyURI
operator|+
literal|" already exists: Updating ontology"
argument_list|)
expr_stmt|;
name|deleteOntology
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
name|long
name|st1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Creating a new ontology store for: "
operator|+
name|ontologyURI
argument_list|)
expr_stmt|;
comment|// InputStream is = new ByteArrayInputStream(ontologyContent.getBytes(encoding));
name|long
name|st2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// ModelMaker modelMaker = getModelMaker();
name|OntModelSpec
name|oms
init|=
name|getOntModelSpec
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|long
name|st3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// oms.setDocumentManager(new DbAwareDocumentManager(modelMaker));
name|long
name|st4
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Model
name|base
init|=
name|persistenceProvider
operator|.
name|createModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|long
name|st5
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|om
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|oms
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|long
name|st6
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|/** FIXME:: instead of try/catch, use a parameter **/
name|Model
name|createdModel
init|=
literal|null
decl_stmt|;
name|resourceManager
operator|.
name|registerOntology
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
try|try
block|{
name|createdModel
operator|=
name|om
operator|.
name|read
argument_list|(
name|content
argument_list|,
name|ontologyURI
argument_list|,
literal|"RDF/XML"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|resourceManager
operator|.
name|registerOntology
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to read ontology {} "
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|ontologyURI
operator|+
literal|"model read as RDF/XML"
argument_list|)
expr_stmt|;
name|long
name|st7
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Create input stream: "
operator|+
operator|(
name|st2
operator|-
name|st1
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Get Model Spec: "
operator|+
operator|(
name|st3
operator|-
name|st2
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Create Base Model: "
operator|+
operator|(
name|st5
operator|-
name|st4
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Create Ont Model: "
operator|+
operator|(
name|st6
operator|-
name|st5
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Read Model: "
operator|+
operator|(
name|st7
operator|-
name|st6
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Total Creation: "
operator|+
operator|(
name|st7
operator|-
name|st1
operator|)
argument_list|)
expr_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|t4
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|createdModel
operator|!=
literal|null
condition|)
block|{
name|ExtendedIterator
name|ontClassesItr
init|=
name|om
operator|.
name|listClasses
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontClassesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|curOntClass
init|=
operator|(
name|OntClass
operator|)
name|ontClassesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curOntClassURI
init|=
name|curOntClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curOntClassURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerClass
argument_list|(
name|ontologyURI
argument_list|,
name|curOntClassURI
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|t5
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|ontDatatypePropertiesItr
init|=
name|om
operator|.
name|listDatatypeProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontDatatypePropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatatypeProperty
name|curDatatypeProperty
init|=
operator|(
name|DatatypeProperty
operator|)
name|ontDatatypePropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curDatatypePropertyURI
init|=
name|curDatatypeProperty
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curDatatypePropertyURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerDatatypeProperty
argument_list|(
name|ontologyURI
argument_list|,
name|curDatatypePropertyURI
argument_list|)
expr_stmt|;
block|}
block|}
comment|// XXX Get referenced properties from OWL.Restrictions
comment|// StmtIterator stmts = om.listStatements(null, OWL.onProperty,
comment|// (RDFNode) null);
comment|// List<Statement> stmtsToBeAdded = new ArrayList<Statement>();
comment|// while (stmts.hasNext()) {
comment|// RDFNode node = stmts.next().getObject();
comment|// if (node.isURIResource()) {
comment|// stmtsToBeAdded.add(new StatementImpl(node.asResource(),
comment|// RDF.type, RDF.Property));
comment|// }
comment|// }
name|long
name|t6
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|ontObjectPropertiesItr
init|=
name|om
operator|.
name|listObjectProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontObjectPropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectProperty
name|curObjectProperty
init|=
operator|(
name|ObjectProperty
operator|)
name|ontObjectPropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curObjectPropertyURI
init|=
name|curObjectProperty
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curObjectPropertyURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerObjectProperty
argument_list|(
name|ontologyURI
argument_list|,
name|curObjectPropertyURI
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|t7
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|ontIndividualsItr
init|=
name|om
operator|.
name|listIndividuals
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontIndividualsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Individual
name|curIndividual
init|=
operator|(
name|Individual
operator|)
name|ontIndividualsItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curIndividualURI
init|=
name|curIndividual
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curIndividualURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerIndividual
argument_list|(
name|ontologyURI
argument_list|,
name|curIndividualURI
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|t8
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Set
name|imports
init|=
name|om
operator|.
name|listImportedOntologyURIs
argument_list|()
decl_stmt|;
name|Iterator
name|importsItr
init|=
name|imports
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|importsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|importedOntologyURI
init|=
operator|(
name|String
operator|)
name|importsItr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|resourceManager
operator|.
name|registerOntology
argument_list|(
name|importedOntologyURI
argument_list|)
expr_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|createModel
argument_list|(
name|importedOntologyURI
argument_list|)
decl_stmt|;
comment|// Model baseModel =
comment|// modelMaker.getModel(importedOntologyURI);
name|OntModel
name|imported_om
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
comment|// FIXME Test this case
name|imported_om
operator|.
name|read
argument_list|(
name|importedOntologyURI
argument_list|)
expr_stmt|;
name|ExtendedIterator
name|importedOntClassesItr
init|=
name|imported_om
operator|.
name|listClasses
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedOntClassesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|curOntClass
init|=
operator|(
name|OntClass
operator|)
name|importedOntClassesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curOntClassURI
init|=
name|curOntClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curOntClassURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerClass
argument_list|(
name|importedOntologyURI
argument_list|,
name|curOntClassURI
argument_list|)
expr_stmt|;
block|}
block|}
name|ExtendedIterator
name|importedDatatypePropertiesItr
init|=
name|imported_om
operator|.
name|listDatatypeProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedDatatypePropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatatypeProperty
name|curDatatypeProperty
init|=
operator|(
name|DatatypeProperty
operator|)
name|importedDatatypePropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curDatatypePropertyURI
init|=
name|curDatatypeProperty
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curDatatypePropertyURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerDatatypeProperty
argument_list|(
name|importedOntologyURI
argument_list|,
name|curDatatypePropertyURI
argument_list|)
expr_stmt|;
block|}
block|}
name|ExtendedIterator
name|importedObjectPropertiesItr
init|=
name|imported_om
operator|.
name|listObjectProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedObjectPropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectProperty
name|curObjectProperty
init|=
operator|(
name|ObjectProperty
operator|)
name|importedObjectPropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curObjectPropertyURI
init|=
name|curObjectProperty
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curObjectPropertyURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerObjectProperty
argument_list|(
name|importedOntologyURI
argument_list|,
name|curObjectPropertyURI
argument_list|)
expr_stmt|;
block|}
block|}
name|ExtendedIterator
name|importedOntIndividualsItr
init|=
name|imported_om
operator|.
name|listIndividuals
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedOntIndividualsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Individual
name|curIndividual
init|=
operator|(
name|Individual
operator|)
name|importedOntIndividualsItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curIndividualURI
init|=
name|curIndividual
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curIndividualURI
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|registerIndividual
argument_list|(
name|importedOntologyURI
argument_list|,
name|curIndividualURI
argument_list|)
expr_stmt|;
block|}
block|}
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|imported_om
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error at importing ontology: "
operator|+
name|importedOntologyURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|t9
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ontMetaInformation
operator|=
name|retrieveOntologyMetaInformation
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
name|long
name|t10
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Get Connection: "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Create Ontology Model : "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Classes : "
operator|+
operator|(
name|t5
operator|-
name|t4
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Datatype Properties : "
operator|+
operator|(
name|t6
operator|-
name|t5
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Object Props : "
operator|+
operator|(
name|t7
operator|-
name|t6
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Individuals : "
operator|+
operator|(
name|t8
operator|-
name|t7
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Imports : "
operator|+
operator|(
name|t9
operator|-
name|t8
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" MetaInf : "
operator|+
operator|(
name|t10
operator|-
name|t9
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" Total Save Time "
operator|+
operator|(
name|t10
operator|-
name|t1
operator|)
operator|+
literal|" miliseconds"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|om
argument_list|)
expr_stmt|;
block|}
return|return
name|ontMetaInformation
return|;
block|}
specifier|public
name|String
name|retrieveOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|language
parameter_list|,
name|boolean
name|withInferredAxioms
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
name|withInferredAxioms
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|useReasoner
operator|&&
name|withInferredAxioms
condition|)
block|{
name|ontModel
operator|=
name|addInferencesToModel
argument_list|(
name|ontModel
argument_list|,
name|ontologyURI
argument_list|,
name|InferenceScope
operator|.
name|Class
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|RDFWriter
name|rdfWriter
init|=
name|ontModel
operator|.
name|getWriter
argument_list|(
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|rdfWriter
operator|.
name|setProperty
argument_list|(
literal|"xmlbase"
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|rdfWriter
operator|.
name|write
argument_list|(
name|ontModel
operator|.
name|getBaseModel
argument_list|()
argument_list|,
name|bos
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|byte
index|[]
name|ontologyContentAsByteArray
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|ontologyContentAsString
init|=
operator|new
name|String
argument_list|(
name|ontologyContentAsByteArray
argument_list|)
decl_stmt|;
return|return
name|ontologyContentAsString
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|mergeOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|targetOntology
parameter_list|,
name|String
name|targetOntologyURI
parameter_list|,
name|boolean
name|withInferredAxioms
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
name|withInferredAxioms
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|useReasoner
operator|&&
name|withInferredAxioms
condition|)
block|{
name|ontModel
operator|=
name|addInferencesToModel
argument_list|(
name|ontModel
argument_list|,
name|ontologyURI
argument_list|,
name|InferenceScope
operator|.
name|Class
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|targetOntology
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ontModel
operator|.
name|read
argument_list|(
name|is
argument_list|,
name|targetOntologyURI
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|RDFWriter
name|rdfWriter
init|=
name|ontModel
operator|.
name|getWriter
argument_list|(
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|rdfWriter
operator|.
name|setProperty
argument_list|(
literal|"xmlbase"
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|rdfWriter
operator|.
name|write
argument_list|(
name|ontModel
operator|.
name|getBaseModel
argument_list|()
argument_list|,
name|bos
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|byte
index|[]
name|ontologyContentAsByteArray
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|ontologyContentAsString
init|=
operator|new
name|String
argument_list|(
name|ontologyContentAsByteArray
argument_list|)
decl_stmt|;
return|return
name|ontologyContentAsString
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ClassMetaInformation
name|generateClassForOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|classURI
parameter_list|)
block|{
name|OntModel
name|ontModel
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// System.out.println(ontologyURI);
comment|// System.out.println(classURI);
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|ontModel
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
expr_stmt|;
name|OntClass
name|classForURI
init|=
name|ontModel
operator|.
name|getOntClass
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|classForURI
operator|==
literal|null
condition|)
block|{
comment|// the class does not exist, this is what we desire
name|ontModel
operator|.
name|createClass
argument_list|(
name|classURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerClass
argument_list|(
name|ontologyURI
argument_list|,
name|classURI
argument_list|)
expr_stmt|;
return|return
name|generateClassMetaInformation
argument_list|(
name|classURI
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModel
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|PropertyMetaInformation
name|generateDatatypePropertyForOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|datatypePropertyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|OntProperty
name|ontPropertyForURI
init|=
name|ontModel
operator|.
name|getOntProperty
argument_list|(
name|datatypePropertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontPropertyForURI
operator|==
literal|null
condition|)
block|{
comment|// the datatypeProperty does not exist, this is what we
comment|// desire
name|ontModel
operator|.
name|createDatatypeProperty
argument_list|(
name|datatypePropertyURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerDatatypeProperty
argument_list|(
name|ontologyURI
argument_list|,
name|datatypePropertyURI
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModel
argument_list|)
expr_stmt|;
return|return
name|generatePropertyMetaInformation
argument_list|(
name|datatypePropertyURI
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|PropertyMetaInformation
name|generateObjectPropertyForOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|objectPropertyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|OntProperty
name|ontPropertyForURI
init|=
name|ontModel
operator|.
name|getOntProperty
argument_list|(
name|objectPropertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontPropertyForURI
operator|==
literal|null
condition|)
block|{
comment|// the objectProperty does not exist, this is what we desire
name|ontModel
operator|.
name|createObjectProperty
argument_list|(
name|objectPropertyURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerObjectProperty
argument_list|(
name|ontologyURI
argument_list|,
name|objectPropertyURI
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModel
argument_list|)
expr_stmt|;
return|return
name|generatePropertyMetaInformation
argument_list|(
name|objectPropertyURI
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|makeSubClassOf
parameter_list|(
name|String
name|subClassURI
parameter_list|,
name|String
name|superClassURI
parameter_list|)
block|{
try|try
block|{
comment|// FIXME:: What happens when the superClassURI does not exist?
name|String
name|subClassOntologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|subClassURI
argument_list|)
decl_stmt|;
name|String
name|superClassOntologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|superClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClassOntologyURI
operator|!=
literal|null
operator|&&
name|superClassOntologyURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|subClassModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|subClassOntologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|subClassOntModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|subClassModel
argument_list|)
decl_stmt|;
name|OntClass
name|subClass
init|=
name|subClassOntModel
operator|.
name|getOntClass
argument_list|(
name|subClassURI
argument_list|)
decl_stmt|;
name|Model
name|superClassModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|superClassOntologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|superClassOntModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|superClassModel
argument_list|)
decl_stmt|;
name|OntClass
name|superClass
init|=
name|superClassOntModel
operator|.
name|getOntClass
argument_list|(
name|superClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClass
operator|!=
literal|null
operator|&&
name|superClass
operator|!=
literal|null
condition|)
block|{
name|subClass
operator|.
name|addSuperClass
argument_list|(
name|superClass
argument_list|)
expr_stmt|;
name|superClass
operator|.
name|addSubClass
argument_list|(
name|subClass
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|subClassOntModel
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|superClassOntModel
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteSuperClass
parameter_list|(
name|String
name|subClassURI
parameter_list|,
name|String
name|superClassURI
parameter_list|)
block|{
try|try
block|{
comment|// FIXME:: What happens when the superClassURI does not exist?
name|String
name|subClassOntologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|subClassURI
argument_list|)
decl_stmt|;
name|String
name|superClassOntologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|superClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClassOntologyURI
operator|!=
literal|null
operator|&&
name|superClassOntologyURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|subClassModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|subClassOntologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|subClassOntModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|subClassModel
argument_list|)
decl_stmt|;
name|OntClass
name|subClass
init|=
name|subClassOntModel
operator|.
name|getOntClass
argument_list|(
name|subClassURI
argument_list|)
decl_stmt|;
name|Model
name|superClassModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|superClassOntologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|superClassOntModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|superClassModel
argument_list|)
decl_stmt|;
name|OntClass
name|superClass
init|=
name|superClassOntModel
operator|.
name|getOntClass
argument_list|(
name|superClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClass
operator|!=
literal|null
operator|&&
name|superClass
operator|!=
literal|null
condition|)
block|{
name|subClass
operator|.
name|removeSuperClass
argument_list|(
name|superClass
argument_list|)
expr_stmt|;
name|superClass
operator|.
name|removeSubClass
argument_list|(
name|subClass
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|subClassOntModel
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|superClassOntModel
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|setDomain
parameter_list|(
name|String
name|propertyURI
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|domainURIs
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
for|for
control|(
name|OntResource
name|domainResource
range|:
name|ontProperty
operator|.
name|listDomain
argument_list|()
operator|.
name|toList
argument_list|()
control|)
block|{
name|ontProperty
operator|.
name|removeDomain
argument_list|(
name|domainResource
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|domainURI
range|:
name|domainURIs
control|)
block|{
name|String
name|ontologyForDomainURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|domainURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForPropertyURI
operator|!=
literal|null
operator|&&
name|ontologyForDomainURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForDomain
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForDomainURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForDomain
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForDomain
argument_list|)
decl_stmt|;
name|OntClass
name|ontClassForDomain
init|=
name|ontModelForDomain
operator|.
name|getOntClass
argument_list|(
name|domainURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|ontClassForDomain
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|addDomain
argument_list|(
name|ontClassForDomain
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForDomain
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|addDomain
parameter_list|(
name|String
name|propertyURI
parameter_list|,
name|String
name|domainURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForDomainURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|domainURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForPropertyURI
operator|!=
literal|null
operator|&&
name|ontologyForDomainURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForDomain
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForDomainURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForDomain
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForDomain
argument_list|)
decl_stmt|;
name|OntClass
name|ontClassForDomain
init|=
name|ontModelForDomain
operator|.
name|getOntClass
argument_list|(
name|domainURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|ontClassForDomain
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|addDomain
argument_list|(
name|ontClassForDomain
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForDomain
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteDomain
parameter_list|(
name|String
name|propertyURI
parameter_list|,
name|String
name|domainURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForDomainURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|domainURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForPropertyURI
operator|!=
literal|null
operator|&&
name|ontologyForDomainURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForDomain
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForDomainURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForDomain
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForDomain
argument_list|)
decl_stmt|;
name|OntClass
name|ontClassForDomain
init|=
name|ontModelForDomain
operator|.
name|getOntClass
argument_list|(
name|domainURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|ontClassForDomain
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|removeDomain
argument_list|(
name|ontClassForDomain
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForDomain
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|setRange
parameter_list|(
name|String
name|propertyURI
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rangeURIs
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
for|for
control|(
name|OntResource
name|rangeResource
range|:
name|ontProperty
operator|.
name|listRange
argument_list|()
operator|.
name|toList
argument_list|()
control|)
block|{
name|ontProperty
operator|.
name|removeRange
argument_list|(
name|rangeResource
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|rangeURI
range|:
name|rangeURIs
control|)
block|{
name|String
name|ontologyForRangeURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForPropertyURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JenaUtil
operator|.
name|isBuiltInType
argument_list|(
name|rangeURI
argument_list|)
condition|)
block|{
name|Resource
name|rangeResource
init|=
name|JenaUtil
operator|.
name|getResourceForBuiltInType
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|rangeResource
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|addRange
argument_list|(
name|rangeResource
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ontologyForRangeURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForRange
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForRangeURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForRange
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForRange
argument_list|)
decl_stmt|;
name|OntClass
name|ontClassForRange
init|=
name|ontModelForRange
operator|.
name|getOntClass
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|ontClassForRange
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|addRange
argument_list|(
name|ontClassForRange
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForRange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|addRange
parameter_list|(
name|String
name|propertyURI
parameter_list|,
name|String
name|rangeURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForRangeURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForPropertyURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JenaUtil
operator|.
name|isBuiltInType
argument_list|(
name|rangeURI
argument_list|)
condition|)
block|{
name|Resource
name|rangeResource
init|=
name|JenaUtil
operator|.
name|getResourceForBuiltInType
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|rangeResource
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|addRange
argument_list|(
name|rangeResource
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ontologyForRangeURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForRange
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForRangeURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForRange
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForRange
argument_list|)
decl_stmt|;
name|OntClass
name|ontClassForRange
init|=
name|ontModelForRange
operator|.
name|getOntClass
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|ontClassForRange
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|addRange
argument_list|(
name|ontClassForRange
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForRange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteRange
parameter_list|(
name|String
name|propertyURI
parameter_list|,
name|String
name|rangeURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForRangeURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForPropertyURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JenaUtil
operator|.
name|isBuiltInType
argument_list|(
name|rangeURI
argument_list|)
condition|)
block|{
name|Resource
name|rangeResource
init|=
name|JenaUtil
operator|.
name|getResourceForBuiltInType
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|rangeResource
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|removeRange
argument_list|(
name|rangeResource
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ontologyForRangeURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForRange
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForRangeURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForRange
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForRange
argument_list|)
decl_stmt|;
name|OntClass
name|ontClassForRange
init|=
name|ontModelForRange
operator|.
name|getOntClass
argument_list|(
name|rangeURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|!=
literal|null
operator|&&
name|ontClassForRange
operator|!=
literal|null
condition|)
block|{
name|ontProperty
operator|.
name|removeRange
argument_list|(
name|ontClassForRange
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForRange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|makeSubPropertyOf
parameter_list|(
name|String
name|subPropertyURI
parameter_list|,
name|String
name|superPropertyURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForSubPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|subPropertyURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForSuperClassURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|superPropertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForSubPropertyURI
operator|!=
literal|null
operator|&&
name|ontologyForSuperClassURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForSubProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForSubPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForSubProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForSubProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|subProperty
init|=
name|ontModelForSubProperty
operator|.
name|getOntProperty
argument_list|(
name|subPropertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForSuperProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForSuperClassURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForSuperProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForSuperProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|superProperty
init|=
name|ontModelForSuperProperty
operator|.
name|getOntProperty
argument_list|(
name|superPropertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|subProperty
operator|!=
literal|null
operator|&&
name|superProperty
operator|!=
literal|null
condition|)
block|{
name|subProperty
operator|.
name|addSuperProperty
argument_list|(
name|superProperty
argument_list|)
expr_stmt|;
name|superProperty
operator|.
name|addSubProperty
argument_list|(
name|subProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForSubProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForSuperProperty
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteSuperPropertyAssertion
parameter_list|(
name|String
name|subPropertyURI
parameter_list|,
name|String
name|superPropertyURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForSubPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|subPropertyURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForSuperClassURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|superPropertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForSubPropertyURI
operator|!=
literal|null
operator|&&
name|ontologyForSuperClassURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForSubProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForSubPropertyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForSubProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForSubProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|subProperty
init|=
name|ontModelForSubProperty
operator|.
name|getOntProperty
argument_list|(
name|subPropertyURI
argument_list|)
decl_stmt|;
name|Model
name|modelForSuperProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForSuperClassURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForSuperProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForSuperProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|superProperty
init|=
name|ontModelForSuperProperty
operator|.
name|getOntProperty
argument_list|(
name|superPropertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|subProperty
operator|!=
literal|null
operator|&&
name|superProperty
operator|!=
literal|null
condition|)
block|{
name|subProperty
operator|.
name|removeSuperProperty
argument_list|(
name|superProperty
argument_list|)
expr_stmt|;
name|superProperty
operator|.
name|removeSubProperty
argument_list|(
name|subProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForSubProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForSuperProperty
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|setPropertyAttributes
parameter_list|(
name|String
name|propertyURI
parameter_list|,
name|Boolean
name|isFunctional
parameter_list|,
name|Boolean
name|isTransitive
parameter_list|,
name|Boolean
name|isSymmetric
parameter_list|,
name|Boolean
name|isInverseFunctional
parameter_list|)
throws|throws
name|SQLException
block|{
name|OntModel
name|ontModelForProperty
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|ontologyForPropertyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForPropertyURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForPropertyURI
argument_list|)
decl_stmt|;
name|ontModelForProperty
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
expr_stmt|;
name|OntProperty
name|property
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFunctional
operator|!=
literal|null
operator|&&
name|isFunctional
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|property
operator|.
name|convertToFunctionalProperty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// FIXME:: check if fix works
name|List
argument_list|<
name|Statement
argument_list|>
name|stmts
init|=
name|ontModelForProperty
operator|.
name|listStatements
argument_list|(
name|property
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|FunctionalProperty
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|ontModelForProperty
operator|.
name|remove
argument_list|(
name|stmts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTransitive
operator|!=
literal|null
operator|&&
name|isTransitive
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|property
operator|.
name|convertToTransitiveProperty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// FIXME:: check if fix works
name|List
argument_list|<
name|Statement
argument_list|>
name|stmts
init|=
name|ontModelForProperty
operator|.
name|listStatements
argument_list|(
name|property
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|TransitiveProperty
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|ontModelForProperty
operator|.
name|remove
argument_list|(
name|stmts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSymmetric
operator|!=
literal|null
operator|&&
name|isSymmetric
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|property
operator|.
name|convertToSymmetricProperty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// FIXME:: check if fix works
name|List
argument_list|<
name|Statement
argument_list|>
name|stmts
init|=
name|ontModelForProperty
operator|.
name|listStatements
argument_list|(
name|property
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|SymmetricProperty
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|ontModelForProperty
operator|.
name|remove
argument_list|(
name|stmts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInverseFunctional
operator|!=
literal|null
operator|&&
name|isInverseFunctional
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|property
operator|.
name|convertToInverseFunctionalProperty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// FIXME:: check if fix works
name|List
argument_list|<
name|Statement
argument_list|>
name|stmts
init|=
name|ontModelForProperty
operator|.
name|listStatements
argument_list|(
name|property
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|InverseFunctionalProperty
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|ontModelForProperty
operator|.
name|remove
argument_list|(
name|stmts
argument_list|)
expr_stmt|;
block|}
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|assertPropertyValue
parameter_list|(
name|String
name|individualURI
parameter_list|,
name|String
name|propertyURI
parameter_list|,
name|String
name|individualAsValueURI
parameter_list|,
name|String
name|literalAsValue
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyFor_arg0
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|String
name|ontologyFor_arg1
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyFor_arg0
operator|!=
literal|null
operator|&&
name|ontologyFor_arg1
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForIndividual
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyFor_arg0
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForIndividual
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForIndividual
argument_list|)
decl_stmt|;
name|Individual
name|individual
init|=
name|ontModelForIndividual
operator|.
name|getIndividual
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyFor_arg1
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualAsValueURI
operator|!=
literal|null
condition|)
block|{
comment|// System.out.println("individualAsValueURI==="
comment|// + individualAsValueURI);
name|String
name|ontologyFor_arg2
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualAsValueURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyFor_arg2
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForValue
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyFor_arg2
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForValue
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForValue
argument_list|)
decl_stmt|;
name|Individual
name|value
init|=
name|ontModelForValue
operator|.
name|getIndividual
argument_list|(
name|individualAsValueURI
argument_list|)
decl_stmt|;
name|individual
operator|.
name|addProperty
argument_list|(
name|ontProperty
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForIndividual
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|literalAsValue
operator|!=
literal|null
condition|)
block|{
name|Literal
name|literal
init|=
name|ontModelForIndividual
operator|.
name|createLiteral
argument_list|(
name|literalAsValue
argument_list|)
decl_stmt|;
name|individual
operator|.
name|addProperty
argument_list|(
name|ontProperty
argument_list|,
name|literal
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForIndividual
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deletePropertyAssertion
parameter_list|(
name|String
name|individualURI
parameter_list|,
name|String
name|propertyURI
parameter_list|,
name|String
name|individualAsValueURI
parameter_list|,
name|String
name|literalAsValue
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyFor_arg0
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|String
name|ontologyFor_arg1
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyFor_arg0
operator|!=
literal|null
operator|&&
name|ontologyFor_arg1
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForIndividual
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyFor_arg0
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForIndividual
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForIndividual
argument_list|)
decl_stmt|;
name|Individual
name|individual
init|=
name|ontModelForIndividual
operator|.
name|getIndividual
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|Model
name|modelForProperty
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyFor_arg1
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForProperty
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForProperty
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModelForProperty
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualAsValueURI
operator|!=
literal|null
condition|)
block|{
name|String
name|ontologyFor_arg2
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualAsValueURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyFor_arg2
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForValue
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyFor_arg2
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForValue
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForValue
argument_list|)
decl_stmt|;
name|Individual
name|value
init|=
name|ontModelForValue
operator|.
name|getIndividual
argument_list|(
name|individualAsValueURI
argument_list|)
decl_stmt|;
name|individual
operator|.
name|removeProperty
argument_list|(
name|ontProperty
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForIndividual
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|literalAsValue
operator|!=
literal|null
condition|)
block|{
name|Literal
name|literal
init|=
name|ontModelForIndividual
operator|.
name|createLiteral
argument_list|(
name|literalAsValue
argument_list|)
decl_stmt|;
name|individual
operator|.
name|removeProperty
argument_list|(
name|ontProperty
argument_list|,
name|literal
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForIndividual
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForProperty
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|addContainerClassForIndividual
parameter_list|(
name|String
name|individualURI
parameter_list|,
name|String
name|classURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForIndividual
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForClass
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForIndividual
operator|!=
literal|null
operator|&&
name|ontologyForClass
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForIndividual
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForIndividual
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForIndividual
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForIndividual
argument_list|)
decl_stmt|;
name|Individual
name|individual
init|=
name|ontModelForIndividual
operator|.
name|getIndividual
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|Model
name|modelForClass
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForClass
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForClass
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForClass
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|ontModelForClass
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|individual
operator|.
name|addOntClass
argument_list|(
name|ontClass
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForClass
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForIndividual
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteContainerClassForIndividual
parameter_list|(
name|String
name|individualURI
parameter_list|,
name|String
name|classURI
parameter_list|)
block|{
try|try
block|{
name|String
name|ontologyForIndividual
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|String
name|ontologyForClass
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyForIndividual
operator|!=
literal|null
operator|&&
name|ontologyForClass
operator|!=
literal|null
condition|)
block|{
name|Model
name|modelForIndividual
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForIndividual
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForIndividual
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForIndividual
argument_list|)
decl_stmt|;
name|Individual
name|individual
init|=
name|ontModelForIndividual
operator|.
name|getIndividual
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|Model
name|modelForClass
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyForClass
argument_list|)
decl_stmt|;
name|OntModel
name|ontModelForClass
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|modelForClass
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|ontModelForClass
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|individual
operator|.
name|removeOntClass
argument_list|(
name|ontClass
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForClass
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModelForIndividual
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|IndividualMetaInformation
name|generateIndividualForOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|classURI
parameter_list|,
name|String
name|individualURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|Individual
name|individualForURI
init|=
name|ontModel
operator|.
name|getIndividual
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|OntClass
name|ontClassForURI
init|=
name|ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualForURI
operator|==
literal|null
operator|&&
name|ontClassForURI
operator|!=
literal|null
condition|)
block|{
name|ontModel
operator|.
name|createIndividual
argument_list|(
name|individualURI
argument_list|,
name|ontClassForURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerIndividual
argument_list|(
name|ontologyURI
argument_list|,
name|individualURI
argument_list|)
expr_stmt|;
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModel
argument_list|)
expr_stmt|;
return|return
name|generateIndividualMetaInformation
argument_list|(
name|individualURI
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|OntologyMetaInformation
name|retrieveOntologyMetaInformation
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
if|if
condition|(
name|ontologyURI
operator|!=
literal|null
condition|)
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|OntologyMetaInformation
name|ontologyMetaInformation
init|=
name|objectFactory
operator|.
name|createOntologyMetaInformation
argument_list|()
decl_stmt|;
name|ontologyMetaInformation
operator|.
name|setURI
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
name|ontologyMetaInformation
operator|.
name|setHref
argument_list|(
name|resourceManager
operator|.
name|getOntologyFullPath
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
comment|/** FIXME: Descriptions have to be administerable **/
name|ontologyMetaInformation
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|ontologyMetaInformation
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|ClassesForOntology
name|retrieveClassesOfOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|ClassesForOntology
name|classesForOntology
init|=
name|objectFactory
operator|.
name|createClassesForOntology
argument_list|()
decl_stmt|;
name|classesForOntology
operator|.
name|setOntologyMetaInformation
argument_list|(
name|retrieveOntologyMetaInformation
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|ExtendedIterator
name|ontClassesItr
init|=
name|ontModel
operator|.
name|listClasses
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontClassesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|curOntClass
init|=
operator|(
name|OntClass
operator|)
name|ontClassesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curOntClass
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|curOntClass
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
name|classesForOntology
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{                      }
block|}
return|return
name|classesForOntology
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|public
name|DatatypePropertiesForOntology
name|retrieveDatatypePropertiesOfOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|DatatypePropertiesForOntology
name|datatypePropertiesForOntology
init|=
name|objectFactory
operator|.
name|createDatatypePropertiesForOntology
argument_list|()
decl_stmt|;
name|datatypePropertiesForOntology
operator|.
name|setOntologyMetaInformation
argument_list|(
name|retrieveOntologyMetaInformation
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|ExtendedIterator
name|ontDatatypePropertiesItr
init|=
name|ontModel
operator|.
name|listDatatypeProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontDatatypePropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatatypeProperty
name|curDatatypeProperty
init|=
operator|(
name|DatatypeProperty
operator|)
name|ontDatatypePropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curDatatypeProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|curDatatypeProperty
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|datatypePropertiesForOntology
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|datatypePropertiesForOntology
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|public
name|ObjectPropertiesForOntology
name|retrieveObjectPropertiesOfOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|ObjectPropertiesForOntology
name|objectPropertiesForOntology
init|=
name|objectFactory
operator|.
name|createObjectPropertiesForOntology
argument_list|()
decl_stmt|;
name|objectPropertiesForOntology
operator|.
name|setOntologyMetaInformation
argument_list|(
name|retrieveOntologyMetaInformation
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|ExtendedIterator
name|ontObjectPropertiesItr
init|=
name|ontModel
operator|.
name|listObjectProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontObjectPropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectProperty
name|curObjectProperty
init|=
operator|(
name|ObjectProperty
operator|)
name|ontObjectPropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curObjectProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertyMetaInformation
name|propertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|curObjectProperty
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyMetaInformation
operator|!=
literal|null
condition|)
block|{
name|objectPropertiesForOntology
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|propertyMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|objectPropertiesForOntology
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|public
name|IndividualsForOntology
name|retrieveIndividualsOfOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|IndividualsForOntology
name|individualsForOntology
init|=
name|objectFactory
operator|.
name|createIndividualsForOntology
argument_list|()
decl_stmt|;
name|individualsForOntology
operator|.
name|setOntologyMetaInformation
argument_list|(
name|retrieveOntologyMetaInformation
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|ExtendedIterator
name|ontIndividualsItr
init|=
name|ontModel
operator|.
name|listIndividuals
argument_list|()
decl_stmt|;
while|while
condition|(
name|ontIndividualsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Individual
name|individual
init|=
operator|(
name|Individual
operator|)
name|ontIndividualsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|individual
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|IndividualMetaInformation
name|individualMetaInformation
init|=
name|generateIndividualMetaInformation
argument_list|(
name|individual
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|individualsForOntology
operator|.
name|getIndividualMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|individualMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|individualsForOntology
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|deleteOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|resourceManager
operator|.
name|hasOntology
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|persistenceProvider
operator|.
name|removeModel
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|removeOntology
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteResource
parameter_list|(
name|String
name|resourceURI
parameter_list|)
block|{
name|OntModel
name|ontModel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceURI
operator|!=
literal|null
operator|&&
name|ontologyURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|ontModel
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
expr_stmt|;
name|OntResource
name|ontResource
init|=
name|ontModel
operator|.
name|getOntResource
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontResource
operator|!=
literal|null
condition|)
block|{
name|ontResource
operator|.
name|remove
argument_list|()
expr_stmt|;
name|OntResource
name|xCheck
init|=
name|ontModel
operator|.
name|getOntResource
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|xCheck
operator|==
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|removeResource
argument_list|(
name|resourceURI
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|ontModel
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ClassContext
name|generateClassContext
parameter_list|(
name|String
name|classURI
parameter_list|,
name|boolean
name|withInferredAxioms
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
name|withInferredAxioms
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|useReasoner
operator|&&
name|withInferredAxioms
condition|)
block|{
name|OWLOntology
name|ontology
init|=
name|jenaToOWlApi
argument_list|(
name|ontModel
argument_list|)
decl_stmt|;
name|OWLlinkHTTPXMLReasoner
name|reasoner
init|=
name|getOWLLinkReasoner
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|IRI
name|classIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|OWLClass
name|owlClass
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|classIRI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontology
operator|.
name|containsClassInSignature
argument_list|(
name|classIRI
argument_list|)
condition|)
block|{
name|ClassContext
name|classContext
init|=
name|objectFactory
operator|.
name|createClassContext
argument_list|()
decl_stmt|;
name|classContext
operator|.
name|setClassMetaInformation
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|classURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// EquivalentClasses
name|EquivalentClasses
name|equivalentClasses
init|=
name|generateEquivalentClasses
argument_list|(
name|objectFactory
argument_list|,
name|owlClass
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|classContext
operator|.
name|setEquivalentClasses
argument_list|(
name|equivalentClasses
argument_list|)
expr_stmt|;
comment|// Superclasses
name|Superclasses
name|superclasses
init|=
name|generateSuperClasses
argument_list|(
name|objectFactory
argument_list|,
name|owlClass
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|classContext
operator|.
name|setSuperclasses
argument_list|(
name|superclasses
argument_list|)
expr_stmt|;
comment|// Disjoint Classes
name|DisjointClasses
name|disjointClasses
init|=
name|generateDisjointClasses
argument_list|(
name|objectFactory
argument_list|,
name|owlClass
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|classContext
operator|.
name|setDisjointClasses
argument_list|(
name|disjointClasses
argument_list|)
expr_stmt|;
name|classContext
operator|.
name|getClassConstraint
argument_list|()
operator|.
name|addAll
argument_list|(
name|resolveOntClass
argument_list|(
name|ontClass
argument_list|)
argument_list|)
expr_stmt|;
comment|// Class Constraints
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|classContext
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ontClass
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ClassContext
name|classContext
init|=
name|objectFactory
operator|.
name|createClassContext
argument_list|()
decl_stmt|;
name|classContext
operator|.
name|setClassMetaInformation
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|classURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// EquivalentClasses
name|EquivalentClasses
name|equivalentClasses
init|=
name|generateEquivalentClasses
argument_list|(
name|objectFactory
argument_list|,
name|ontClass
argument_list|)
decl_stmt|;
name|classContext
operator|.
name|setEquivalentClasses
argument_list|(
name|equivalentClasses
argument_list|)
expr_stmt|;
comment|// Superclasses
name|Superclasses
name|superclasses
init|=
name|generateSuperClasses
argument_list|(
name|objectFactory
argument_list|,
name|ontClass
argument_list|)
decl_stmt|;
name|classContext
operator|.
name|setSuperclasses
argument_list|(
name|superclasses
argument_list|)
expr_stmt|;
comment|// DisjointClasses
name|DisjointClasses
name|disjointClasses
init|=
name|generateDisjointClasses
argument_list|(
name|objectFactory
argument_list|,
name|ontClass
argument_list|)
decl_stmt|;
name|classContext
operator|.
name|setDisjointClasses
argument_list|(
name|disjointClasses
argument_list|)
expr_stmt|;
name|classContext
operator|.
name|getClassConstraint
argument_list|()
operator|.
name|addAll
argument_list|(
name|resolveOntClass
argument_list|(
name|ontClass
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|classContext
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Superclasses
name|generateSuperClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLClass
name|owlClass
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|Superclasses
name|superclasses
init|=
name|objectFactory
operator|.
name|createSuperclasses
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|supClases
init|=
name|reasoner
operator|.
name|getSuperClasses
argument_list|(
name|owlClass
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLClass
name|klazz
range|:
name|supClases
control|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|klazz
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
name|superclasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
return|return
name|superclasses
return|;
block|}
specifier|private
name|Superclasses
name|generateSuperClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OntClass
name|ontClass
parameter_list|)
block|{
name|Superclasses
name|superclasses
init|=
name|objectFactory
operator|.
name|createSuperclasses
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|superClassesItr
init|=
name|ontClass
operator|.
name|listSuperClasses
argument_list|()
decl_stmt|;
while|while
condition|(
name|superClassesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|curClass
init|=
operator|(
name|OntClass
operator|)
name|superClassesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curClass_classURI
init|=
name|curClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curClass_classURI
operator|!=
literal|null
condition|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|curClass_classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
block|{
name|superclasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"super class without uri, localName="
operator|+
name|curClass
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|superclasses
return|;
block|}
specifier|private
name|EquivalentClasses
name|generateEquivalentClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OntClass
name|ontClass
parameter_list|)
block|{
name|EquivalentClasses
name|equivalentClasses
init|=
name|objectFactory
operator|.
name|createEquivalentClasses
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|equivalentClassesItr
init|=
name|ontClass
operator|.
name|listEquivalentClasses
argument_list|()
decl_stmt|;
while|while
condition|(
name|equivalentClassesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|curClass
init|=
operator|(
name|OntClass
operator|)
name|equivalentClassesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curClass_classURI
init|=
name|curClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curClass_classURI
operator|!=
literal|null
condition|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|curClass_classURI
argument_list|)
decl_stmt|;
name|equivalentClasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"equivalent class without uri, localName="
operator|+
name|curClass
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|equivalentClasses
return|;
block|}
specifier|private
name|EquivalentClasses
name|generateEquivalentClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLClass
name|owlClass
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|EquivalentClasses
name|equivalentClasses
init|=
name|objectFactory
operator|.
name|createEquivalentClasses
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|eqClasses
init|=
name|reasoner
operator|.
name|getEquivalentClasses
argument_list|(
name|owlClass
argument_list|)
operator|.
name|getEntities
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLClass
name|klazz
range|:
name|eqClasses
control|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|klazz
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
block|{
name|equivalentClasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|equivalentClasses
return|;
block|}
specifier|private
name|DisjointClasses
name|generateDisjointClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OntClass
name|ontClass
parameter_list|)
block|{
name|DisjointClasses
name|disjointClasses
init|=
name|objectFactory
operator|.
name|createDisjointClasses
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|disjointClassesItr
init|=
name|ontClass
operator|.
name|listDisjointWith
argument_list|()
decl_stmt|;
while|while
condition|(
name|disjointClassesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|curClass
init|=
operator|(
name|OntClass
operator|)
name|disjointClassesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curClass_classURI
init|=
name|curClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curClass_classURI
operator|!=
literal|null
condition|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|curClass_classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
block|{
name|disjointClasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"disjoint class without uri, localName="
operator|+
name|curClass
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|disjointClasses
return|;
block|}
specifier|private
name|DisjointClasses
name|generateDisjointClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLClass
name|owlClass
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|DisjointClasses
name|disjointClasses
init|=
name|objectFactory
operator|.
name|createDisjointClasses
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|disjClasses
init|=
name|reasoner
operator|.
name|getDisjointClasses
argument_list|(
name|owlClass
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLClass
name|klazz
range|:
name|disjClasses
control|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|klazz
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// FIXME URI of OWLNothing is not resolved to any ontologyURI
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
block|{
name|disjointClasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|disjointClasses
return|;
block|}
specifier|public
name|IndividualContext
name|generateIndividualContext
parameter_list|(
name|String
name|individualURI
parameter_list|,
name|boolean
name|withInferredAxioms
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
name|withInferredAxioms
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|Individual
name|individual
init|=
name|ontModel
operator|.
name|getIndividual
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|IndividualContext
name|individualContext
init|=
name|objectFactory
operator|.
name|createIndividualContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|useReasoner
operator|&&
name|withInferredAxioms
condition|)
block|{
name|OWLOntology
name|ontology
init|=
name|jenaToOWlApi
argument_list|(
name|ontModel
argument_list|)
decl_stmt|;
name|OWLlinkHTTPXMLReasoner
name|reasoner
init|=
name|getOWLLinkReasoner
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|IRI
name|individualIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontology
operator|.
name|containsIndividualInSignature
argument_list|(
name|individualIRI
argument_list|)
condition|)
block|{
name|OWLNamedIndividual
name|owlIndividual
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|individualIRI
argument_list|)
decl_stmt|;
comment|// Container Classes
name|ContainerClasses
name|containerClasses
init|=
name|generateContainerClasses
argument_list|(
name|objectFactory
argument_list|,
name|owlIndividual
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|individualContext
operator|.
name|setContainerClasses
argument_list|(
name|containerClasses
argument_list|)
expr_stmt|;
comment|// Property Assertions
name|PropertyAssertions
name|propertyAssertions
init|=
name|generatePropertyAssertions
argument_list|(
name|objectFactory
argument_list|,
name|ontology
argument_list|,
name|owlIndividual
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|individualContext
operator|.
name|setPropertyAssertions
argument_list|(
name|propertyAssertions
argument_list|)
expr_stmt|;
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reasoner
operator|=
literal|null
expr_stmt|;
return|return
name|individualContext
return|;
block|}
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reasoner
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|individual
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|individualContext
operator|.
name|setIndividualMetaInformation
argument_list|(
name|generateIndividualMetaInformation
argument_list|(
name|individualURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container Classes
name|ContainerClasses
name|containerClasses
init|=
name|generateContainerClasses
argument_list|(
name|objectFactory
argument_list|,
name|individual
argument_list|)
decl_stmt|;
name|individualContext
operator|.
name|setContainerClasses
argument_list|(
name|containerClasses
argument_list|)
expr_stmt|;
comment|// Property Assertions
name|PropertyAssertions
name|propertyAssertions
init|=
name|generatePropertyAssertions
argument_list|(
name|objectFactory
argument_list|,
name|individual
argument_list|)
decl_stmt|;
name|individualContext
operator|.
name|setPropertyAssertions
argument_list|(
name|propertyAssertions
argument_list|)
expr_stmt|;
return|return
name|individualContext
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|private
name|ContainerClasses
name|generateContainerClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|Individual
name|individual
parameter_list|)
block|{
name|ContainerClasses
name|containerClasses
init|=
name|objectFactory
operator|.
name|createContainerClasses
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|containerOntClassesItr
init|=
name|individual
operator|.
name|listOntClasses
argument_list|(
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|containerOntClassesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|obj
init|=
name|containerOntClassesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|OntClass
name|curClass
init|=
operator|(
name|OntClass
operator|)
name|obj
decl_stmt|;
name|String
name|curClass_classURI
init|=
name|curClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|curClass_classURI
operator|!=
literal|null
condition|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|curClass_classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
block|{
name|containerClasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"equivalent class without uri, localName="
operator|+
name|curClass
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConversionException
name|ce
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|ce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containerClasses
return|;
block|}
specifier|private
name|ContainerClasses
name|generateContainerClasses
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLNamedIndividual
name|individual
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|ContainerClasses
name|containerClasses
init|=
name|objectFactory
operator|.
name|createContainerClasses
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|contClasses
init|=
name|reasoner
operator|.
name|getTypes
argument_list|(
name|individual
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLClass
name|klazz
range|:
name|contClasses
control|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|klazz
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classMetaInformation
operator|!=
literal|null
condition|)
block|{
name|containerClasses
operator|.
name|getClassMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containerClasses
return|;
block|}
specifier|private
name|PropertyAssertions
name|generatePropertyAssertions
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|Individual
name|individual
parameter_list|)
block|{
name|PropertyAssertions
name|propertyAssertions
init|=
name|objectFactory
operator|.
name|createPropertyAssertions
argument_list|()
decl_stmt|;
name|StmtIterator
name|propertiesItr
init|=
name|individual
operator|.
name|listProperties
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|knownProperties
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|propertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|curStmt
init|=
operator|(
name|Statement
operator|)
name|propertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Property
name|curProperty
init|=
name|curStmt
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
name|PropertyMetaInformation
name|propertyMetaInformation
decl_stmt|;
if|if
condition|(
name|curProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|knownProperties
operator|.
name|contains
argument_list|(
name|curProperty
operator|.
name|getURI
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|propertyMetaInformation
operator|=
name|generatePropertyMetaInformation
argument_list|(
name|curProperty
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|knownProperties
operator|.
name|add
argument_list|(
name|curProperty
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertyMetaInformation
operator|!=
literal|null
condition|)
block|{
name|PropertyAssertion
name|propertyAssertion
init|=
name|objectFactory
operator|.
name|createPropertyAssertionsPropertyAssertion
argument_list|()
decl_stmt|;
name|propertyAssertion
operator|.
name|setPropertyMetaInformation
argument_list|(
name|propertyMetaInformation
argument_list|)
expr_stmt|;
name|NodeIterator
name|propertyValuesItr
init|=
name|individual
operator|.
name|listPropertyValues
argument_list|(
name|curProperty
argument_list|)
decl_stmt|;
while|while
condition|(
name|propertyValuesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RDFNode
name|curValue
init|=
operator|(
name|RDFNode
operator|)
name|propertyValuesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curValue
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|propertyAssertion
operator|.
name|getIndividualMetaInformationOrLiteral
argument_list|()
operator|.
name|add
argument_list|(
name|curValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndividualMetaInformation
name|individualMetaInformation
init|=
name|generateIndividualMetaInformation
argument_list|(
name|curValue
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualMetaInformation
operator|!=
literal|null
condition|)
block|{
name|propertyAssertion
operator|.
name|getIndividualMetaInformationOrLiteral
argument_list|()
operator|.
name|add
argument_list|(
name|individualMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Unable to resolve property value = "
operator|+
name|curValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|propertyAssertions
operator|.
name|getPropertyAssertion
argument_list|()
operator|.
name|add
argument_list|(
name|propertyAssertion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|propertyAssertions
return|;
block|}
specifier|private
name|PropertyAssertions
name|generatePropertyAssertions
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|,
name|OWLNamedIndividual
name|individual
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|PropertyAssertions
name|propertyAssertions
init|=
name|objectFactory
operator|.
name|createPropertyAssertions
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLDataProperty
name|dataProp
range|:
name|ontology
operator|.
name|getDataPropertiesInSignature
argument_list|()
control|)
block|{
name|PropertyMetaInformation
name|propertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|dataProp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyAssertion
name|propertyAssertion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OWLLiteral
name|literal
range|:
name|reasoner
operator|.
name|getDataPropertyValues
argument_list|(
name|individual
argument_list|,
name|dataProp
argument_list|)
control|)
block|{
if|if
condition|(
name|propertyAssertion
operator|==
literal|null
condition|)
block|{
name|propertyAssertion
operator|=
name|objectFactory
operator|.
name|createPropertyAssertionsPropertyAssertion
argument_list|()
expr_stmt|;
name|propertyAssertion
operator|.
name|setPropertyMetaInformation
argument_list|(
name|propertyMetaInformation
argument_list|)
expr_stmt|;
block|}
name|propertyAssertion
operator|.
name|getIndividualMetaInformationOrLiteral
argument_list|()
operator|.
name|add
argument_list|(
name|literal
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertyAssertion
operator|!=
literal|null
condition|)
block|{
name|propertyAssertions
operator|.
name|getPropertyAssertion
argument_list|()
operator|.
name|add
argument_list|(
name|propertyAssertion
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OWLObjectProperty
name|objetProp
range|:
name|ontology
operator|.
name|getObjectPropertiesInSignature
argument_list|()
control|)
block|{
name|PropertyMetaInformation
name|propertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|objetProp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyAssertion
name|propertyAssertion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OWLNamedIndividual
name|ind
range|:
name|reasoner
operator|.
name|getObjectPropertyValues
argument_list|(
name|individual
argument_list|,
name|objetProp
argument_list|)
operator|.
name|getFlattened
argument_list|()
control|)
block|{
if|if
condition|(
name|propertyAssertion
operator|==
literal|null
condition|)
block|{
name|propertyAssertion
operator|=
name|objectFactory
operator|.
name|createPropertyAssertionsPropertyAssertion
argument_list|()
expr_stmt|;
name|propertyAssertion
operator|.
name|setPropertyMetaInformation
argument_list|(
name|propertyMetaInformation
argument_list|)
expr_stmt|;
block|}
name|propertyAssertion
operator|.
name|getIndividualMetaInformationOrLiteral
argument_list|()
operator|.
name|add
argument_list|(
name|generateIndividualMetaInformation
argument_list|(
name|ind
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertyAssertion
operator|!=
literal|null
condition|)
block|{
name|propertyAssertions
operator|.
name|getPropertyAssertion
argument_list|()
operator|.
name|add
argument_list|(
name|propertyAssertion
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|propertyAssertions
return|;
block|}
specifier|public
name|DatatypePropertyContext
name|generateDatatypePropertyContext
parameter_list|(
name|String
name|datatypePropertyURI
parameter_list|,
name|boolean
name|withInferredAxioms
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|datatypePropertyURI
argument_list|)
decl_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
name|withInferredAxioms
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|DatatypeProperty
name|datatypeProperty
init|=
name|ontModel
operator|.
name|getDatatypeProperty
argument_list|(
name|datatypePropertyURI
argument_list|)
decl_stmt|;
comment|// FIXME(Cihan) Domain and Range of a property can have multiple
comment|// class values which is not handled in our current schema
if|if
condition|(
name|this
operator|.
name|useReasoner
operator|&&
name|withInferredAxioms
condition|)
block|{
name|OWLOntology
name|owlOntology
init|=
name|jenaToOWlApi
argument_list|(
name|ontModel
argument_list|)
decl_stmt|;
name|OWLlinkHTTPXMLReasoner
name|reasoner
init|=
name|getOWLLinkReasoner
argument_list|(
name|owlOntology
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|owlOntology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|IRI
name|owlDataPropertyIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|datatypePropertyURI
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|owlDataProperty
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|owlDataPropertyIRI
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlOntology
operator|.
name|containsDataPropertyInSignature
argument_list|(
name|owlDataPropertyIRI
argument_list|)
condition|)
block|{
name|DatatypePropertyContext
name|datatypePropertyContext
init|=
name|objectFactory
operator|.
name|createDatatypePropertyContext
argument_list|()
decl_stmt|;
name|datatypePropertyContext
operator|.
name|setPropertyMetaInformation
argument_list|(
name|generatePropertyMetaInformation
argument_list|(
name|datatypePropertyURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// Domain
name|Domain
name|domain
init|=
name|generateDatatypePropertyDomain
argument_list|(
name|objectFactory
argument_list|,
name|owlDataProperty
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
name|datatypePropertyContext
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
comment|// Range
name|Range
name|range
init|=
name|generateDatatypePropertyRange
argument_list|(
name|objectFactory
argument_list|,
name|datatypeProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
name|datatypePropertyContext
operator|.
name|setRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
comment|// isFunctional
comment|// FIXME How to understand that reasoner concluded the
comment|// datatypeProperty is functional or not
name|datatypePropertyContext
operator|.
name|setIsFunctional
argument_list|(
name|datatypeProperty
operator|.
name|isFunctionalProperty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Equivalent Properties
name|EquivalentProperties
name|equivalentProperties
init|=
name|generateDatatypePropertyEquivalentProperties
argument_list|(
name|objectFactory
argument_list|,
name|owlDataProperty
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|datatypePropertyContext
operator|.
name|setEquivalentProperties
argument_list|(
name|equivalentProperties
argument_list|)
expr_stmt|;
comment|// Super Properties
name|SuperProperties
name|superProperties
init|=
name|generateDatatypePropertySuperProperties
argument_list|(
name|objectFactory
argument_list|,
name|owlDataProperty
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|datatypePropertyContext
operator|.
name|setSuperProperties
argument_list|(
name|superProperties
argument_list|)
expr_stmt|;
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reasoner
operator|=
literal|null
expr_stmt|;
return|return
name|datatypePropertyContext
return|;
block|}
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reasoner
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|datatypeProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatatypePropertyContext
name|datatypePropertyContext
init|=
name|objectFactory
operator|.
name|createDatatypePropertyContext
argument_list|()
decl_stmt|;
name|datatypePropertyContext
operator|.
name|setPropertyMetaInformation
argument_list|(
name|generatePropertyMetaInformation
argument_list|(
name|datatypePropertyURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// Domain
name|Domain
name|domain
init|=
name|generateDatatypePropertyDomain
argument_list|(
name|objectFactory
argument_list|,
name|datatypeProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
name|datatypePropertyContext
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
comment|// Range
name|Range
name|range
init|=
name|generateDatatypePropertyRange
argument_list|(
name|objectFactory
argument_list|,
name|datatypeProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
name|datatypePropertyContext
operator|.
name|setRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
comment|// isFunctional
name|datatypePropertyContext
operator|.
name|setIsFunctional
argument_list|(
name|datatypeProperty
operator|.
name|isFunctionalProperty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Equivalent Properties
name|EquivalentProperties
name|equivalentProperties
init|=
name|generateDatatypePropertyEquivalentProperties
argument_list|(
name|objectFactory
argument_list|,
name|datatypeProperty
argument_list|)
decl_stmt|;
name|datatypePropertyContext
operator|.
name|setEquivalentProperties
argument_list|(
name|equivalentProperties
argument_list|)
expr_stmt|;
comment|// Super Properties
name|SuperProperties
name|superProperties
init|=
name|generateDatatypePropertySuperProperties
argument_list|(
name|objectFactory
argument_list|,
name|datatypeProperty
argument_list|)
decl_stmt|;
name|datatypePropertyContext
operator|.
name|setSuperProperties
argument_list|(
name|superProperties
argument_list|)
expr_stmt|;
return|return
name|datatypePropertyContext
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|private
name|Domain
name|generateDatatypePropertyDomain
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|DatatypeProperty
name|datatypeProperty
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|OntResource
argument_list|>
name|domainResources
init|=
name|datatypeProperty
operator|.
name|listDomain
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Domain
name|domain
init|=
name|objectFactory
operator|.
name|createDomain
argument_list|()
decl_stmt|;
for|for
control|(
name|OntResource
name|domainResource
range|:
name|domainResources
control|)
block|{
if|if
condition|(
name|domainResource
operator|!=
literal|null
operator|&&
name|domainResource
operator|.
name|isClass
argument_list|()
condition|)
block|{
name|OntClass
name|domainClass
init|=
name|domainResource
operator|.
name|asClass
argument_list|()
decl_stmt|;
name|String
name|resourceURI
init|=
name|domainClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|resourceURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JenaUtil
operator|.
name|isBuiltInClass
argument_list|(
name|resourceURI
argument_list|)
condition|)
block|{
name|BuiltInResource
name|builtInResource
init|=
name|objectFactory
operator|.
name|createBuiltInResource
argument_list|()
decl_stmt|;
name|builtInResource
operator|.
name|setURI
argument_list|(
name|resourceURI
argument_list|)
expr_stmt|;
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|builtInResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|domainClass
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"domain for datatypeProperty ="
operator|+
name|datatypeProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" is resolved to OntClass but it does not have URI"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"domain for datatypeProperty ="
operator|+
name|datatypeProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" cannot be resolved to OntClass"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|domain
return|;
block|}
specifier|private
name|Domain
name|generateDatatypePropertyDomain
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLDataProperty
name|owlDataProperty
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|domainClasses
init|=
name|reasoner
operator|.
name|getDataPropertyDomains
argument_list|(
name|owlDataProperty
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
name|Domain
name|domain
init|=
name|objectFactory
operator|.
name|createDomain
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLClass
name|domainClass
range|:
name|domainClasses
control|)
block|{
if|if
condition|(
name|domainClass
operator|.
name|isOWLThing
argument_list|()
operator|||
name|domainClass
operator|.
name|isOWLNothing
argument_list|()
condition|)
block|{
name|BuiltInResource
name|builtInResource
init|=
name|objectFactory
operator|.
name|createBuiltInResource
argument_list|()
decl_stmt|;
name|builtInResource
operator|.
name|setURI
argument_list|(
name|domainClass
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|builtInResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|domainClass
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|domain
return|;
block|}
specifier|private
name|Range
name|generateDatatypePropertyRange
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|DatatypeProperty
name|datatypeProperty
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|OntResource
argument_list|>
name|rangeResources
init|=
name|datatypeProperty
operator|.
name|listRange
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Range
name|range
init|=
name|objectFactory
operator|.
name|createRange
argument_list|()
decl_stmt|;
for|for
control|(
name|OntResource
name|rangeResource
range|:
name|rangeResources
control|)
block|{
if|if
condition|(
name|rangeResource
operator|!=
literal|null
operator|&&
name|rangeResource
operator|.
name|isClass
argument_list|()
condition|)
block|{
name|OntClass
name|rangeClass
init|=
name|rangeResource
operator|.
name|asClass
argument_list|()
decl_stmt|;
name|String
name|resourceURI
init|=
name|rangeClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|resourceURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JenaUtil
operator|.
name|isBuiltInClass
argument_list|(
name|resourceURI
argument_list|)
operator|||
name|JenaUtil
operator|.
name|isBuiltInType
argument_list|(
name|resourceURI
argument_list|)
condition|)
block|{
name|BuiltInResource
name|builtInResource
init|=
name|objectFactory
operator|.
name|createBuiltInResource
argument_list|()
decl_stmt|;
name|builtInResource
operator|.
name|setURI
argument_list|(
name|resourceURI
argument_list|)
expr_stmt|;
name|range
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|builtInResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|range
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|rangeClass
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"range for datatypeProperty ="
operator|+
name|datatypeProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" is resolved to OntClass but it does not have URI"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"domain for datatypeProperty ="
operator|+
name|datatypeProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" cannot be resolved to OntClass"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|range
return|;
block|}
comment|// FIXME How to get DatatypeProperty ranges in OWLReasoner
specifier|private
name|EquivalentProperties
name|generateDatatypePropertyEquivalentProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|DatatypeProperty
name|datatypeProperty
parameter_list|)
block|{
name|EquivalentProperties
name|equivalentProperties
init|=
name|objectFactory
operator|.
name|createEquivalentProperties
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|equivalentPropertiesItr
init|=
name|datatypeProperty
operator|.
name|listEquivalentProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|equivalentPropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntProperty
name|curEquivalentProperty
init|=
operator|(
name|OntProperty
operator|)
name|equivalentPropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curEquivalentProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|curEquivalentProperty
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|equivalentProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"equivalent property with uri, localName="
operator|+
name|curEquivalentProperty
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|equivalentProperties
return|;
block|}
specifier|private
name|EquivalentProperties
name|generateDatatypePropertyEquivalentProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLDataProperty
name|owlDataProperty
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|EquivalentProperties
name|equivalentProperties
init|=
name|objectFactory
operator|.
name|createEquivalentProperties
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLDataProperty
argument_list|>
name|equiProperties
init|=
name|reasoner
operator|.
name|getEquivalentDataProperties
argument_list|(
name|owlDataProperty
argument_list|)
operator|.
name|getEntities
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLDataProperty
name|dataProp
range|:
name|equiProperties
control|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|dataProp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|equivalentProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
return|return
name|equivalentProperties
return|;
block|}
specifier|private
name|SuperProperties
name|generateDatatypePropertySuperProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|DatatypeProperty
name|datatypeProperty
parameter_list|)
block|{
name|SuperProperties
name|superProperties
init|=
name|objectFactory
operator|.
name|createSuperProperties
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|superPropertiesItr
init|=
name|datatypeProperty
operator|.
name|listSuperProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|superPropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntProperty
name|curSuperProperty
init|=
operator|(
name|OntProperty
operator|)
name|superPropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curSuperProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|curSuperProperty
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|superProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"equivalent property with uri, localName="
operator|+
name|curSuperProperty
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|superProperties
return|;
block|}
specifier|private
name|SuperProperties
name|generateDatatypePropertySuperProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLDataProperty
name|owlDataProperty
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|SuperProperties
name|superProperties
init|=
name|objectFactory
operator|.
name|createSuperProperties
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLDataProperty
argument_list|>
name|supProperties
init|=
name|reasoner
operator|.
name|getSuperDataProperties
argument_list|(
name|owlDataProperty
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLDataProperty
name|dataProp
range|:
name|supProperties
control|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|dataProp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|superProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
return|return
name|superProperties
return|;
block|}
specifier|public
name|ObjectPropertyContext
name|generateObjectPropertyContext
parameter_list|(
name|String
name|objectPropertyURI
parameter_list|,
name|boolean
name|withInferredAxioms
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|objectPropertyURI
argument_list|)
decl_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
name|withInferredAxioms
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|ObjectProperty
name|objectProperty
init|=
name|ontModel
operator|.
name|getObjectProperty
argument_list|(
name|objectPropertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|useReasoner
operator|&&
name|withInferredAxioms
condition|)
block|{
name|OWLOntology
name|owlOntology
init|=
name|jenaToOWlApi
argument_list|(
name|ontModel
argument_list|)
decl_stmt|;
name|OWLlinkHTTPXMLReasoner
name|reasoner
init|=
name|getOWLLinkReasoner
argument_list|(
name|owlOntology
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|owlOntology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|IRI
name|owlObjectPropertyIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|objectPropertyURI
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|owlObjectProperty
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|owlObjectPropertyIRI
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlOntology
operator|.
name|containsObjectPropertyInSignature
argument_list|(
name|owlObjectPropertyIRI
argument_list|)
condition|)
block|{
name|ObjectPropertyContext
name|objectPropertyContext
init|=
name|objectFactory
operator|.
name|createObjectPropertyContext
argument_list|()
decl_stmt|;
name|objectPropertyContext
operator|.
name|setPropertyMetaInformation
argument_list|(
name|generatePropertyMetaInformation
argument_list|(
name|objectPropertyURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// Domain
comment|// FIXME Current Schema can not handle multiple domains and
comment|// ranges
name|Domain
name|domain
init|=
name|generateObjectPropertyDomain
argument_list|(
name|objectFactory
argument_list|,
name|owlObjectProperty
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
name|objectPropertyContext
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
comment|// Range
name|Range
name|range
init|=
name|generateObjectPropertyRange
argument_list|(
name|objectFactory
argument_list|,
name|owlObjectProperty
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|objectPropertyContext
operator|.
name|setRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
comment|// isFunctional
name|objectPropertyContext
operator|.
name|setIsFunctional
argument_list|(
name|objectProperty
operator|.
name|isFunctionalProperty
argument_list|()
argument_list|)
expr_stmt|;
name|objectPropertyContext
operator|.
name|setIsInverseFunctional
argument_list|(
name|objectProperty
operator|.
name|isInverseFunctionalProperty
argument_list|()
argument_list|)
expr_stmt|;
name|objectPropertyContext
operator|.
name|setIsTransitive
argument_list|(
name|objectProperty
operator|.
name|isTransitiveProperty
argument_list|()
argument_list|)
expr_stmt|;
name|objectPropertyContext
operator|.
name|setIsSymmetric
argument_list|(
name|objectProperty
operator|.
name|isSymmetricProperty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Equivalent Properties
name|EquivalentProperties
name|equivalentProperties
init|=
name|generateObjectPropertyEquivalentProperties
argument_list|(
name|objectFactory
argument_list|,
name|owlObjectProperty
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|objectPropertyContext
operator|.
name|setEquivalentProperties
argument_list|(
name|equivalentProperties
argument_list|)
expr_stmt|;
comment|// Super Properties
name|SuperProperties
name|superProperties
init|=
name|generateObjectPropertySuperProperties
argument_list|(
name|objectFactory
argument_list|,
name|owlObjectProperty
argument_list|,
name|reasoner
argument_list|)
decl_stmt|;
name|objectPropertyContext
operator|.
name|setSuperProperties
argument_list|(
name|superProperties
argument_list|)
expr_stmt|;
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reasoner
operator|=
literal|null
expr_stmt|;
return|return
name|objectPropertyContext
return|;
block|}
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reasoner
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|objectProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ObjectPropertyContext
name|objectPropertyContext
init|=
name|objectFactory
operator|.
name|createObjectPropertyContext
argument_list|()
decl_stmt|;
name|objectPropertyContext
operator|.
name|setPropertyMetaInformation
argument_list|(
name|generatePropertyMetaInformation
argument_list|(
name|objectPropertyURI
argument_list|)
argument_list|)
expr_stmt|;
comment|// Domain
comment|// FIXME Current Schema can not handle multiple domains and
comment|// ranges
name|Domain
name|domain
init|=
name|generateObjectPropertyDomain
argument_list|(
name|objectFactory
argument_list|,
name|objectProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
name|objectPropertyContext
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
comment|// Range
name|Range
name|range
init|=
name|generateObjectPropertyRange
argument_list|(
name|objectFactory
argument_list|,
name|objectProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|objectPropertyContext
operator|.
name|setRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
comment|// isFunctional
name|objectPropertyContext
operator|.
name|setIsFunctional
argument_list|(
name|objectProperty
operator|.
name|isFunctionalProperty
argument_list|()
argument_list|)
expr_stmt|;
name|objectPropertyContext
operator|.
name|setIsInverseFunctional
argument_list|(
name|objectProperty
operator|.
name|isInverseFunctionalProperty
argument_list|()
argument_list|)
expr_stmt|;
name|objectPropertyContext
operator|.
name|setIsTransitive
argument_list|(
name|objectProperty
operator|.
name|isTransitiveProperty
argument_list|()
argument_list|)
expr_stmt|;
name|objectPropertyContext
operator|.
name|setIsSymmetric
argument_list|(
name|objectProperty
operator|.
name|isSymmetricProperty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Equivalent Properties
name|EquivalentProperties
name|equivalentProperties
init|=
name|generateObjectPropertyEquivalentProperties
argument_list|(
name|objectFactory
argument_list|,
name|objectProperty
argument_list|)
decl_stmt|;
name|objectPropertyContext
operator|.
name|setEquivalentProperties
argument_list|(
name|equivalentProperties
argument_list|)
expr_stmt|;
comment|// Super Properties
name|SuperProperties
name|superProperties
init|=
name|generateObjectPropertySuperProperties
argument_list|(
name|objectFactory
argument_list|,
name|objectProperty
argument_list|)
decl_stmt|;
name|objectPropertyContext
operator|.
name|setSuperProperties
argument_list|(
name|superProperties
argument_list|)
expr_stmt|;
return|return
name|objectPropertyContext
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|private
name|Domain
name|generateObjectPropertyDomain
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|ObjectProperty
name|objectProperty
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|OntResource
argument_list|>
name|domainResources
init|=
name|objectProperty
operator|.
name|listDomain
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Domain
name|domain
init|=
name|objectFactory
operator|.
name|createDomain
argument_list|()
decl_stmt|;
for|for
control|(
name|OntResource
name|domainResource
range|:
name|domainResources
control|)
block|{
if|if
condition|(
name|domainResource
operator|!=
literal|null
operator|&&
name|domainResource
operator|.
name|isClass
argument_list|()
condition|)
block|{
name|OntClass
name|domainClass
init|=
name|domainResource
operator|.
name|asClass
argument_list|()
decl_stmt|;
name|String
name|resourceURI
init|=
name|domainResource
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|domainClass
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JenaUtil
operator|.
name|isBuiltInClass
argument_list|(
name|domainClass
operator|.
name|getURI
argument_list|()
argument_list|)
condition|)
block|{
name|BuiltInResource
name|builtInResource
init|=
name|objectFactory
operator|.
name|createBuiltInResource
argument_list|()
decl_stmt|;
name|builtInResource
operator|.
name|setURI
argument_list|(
name|resourceURI
argument_list|)
expr_stmt|;
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|builtInResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|domainClass
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"domain for datatypeProperty ="
operator|+
name|objectProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" is resolved to OntClass but it does not have URI"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"domain for datatypeProperty ="
operator|+
name|objectProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" cannot be resolved to OntClass"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|domain
return|;
block|}
specifier|private
name|Domain
name|generateObjectPropertyDomain
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLObjectProperty
name|owlObjectProperty
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|domainClasses
init|=
name|reasoner
operator|.
name|getObjectPropertyDomains
argument_list|(
name|owlObjectProperty
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
name|Domain
name|domain
init|=
name|objectFactory
operator|.
name|createDomain
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLClass
name|domainClass
range|:
name|domainClasses
control|)
block|{
if|if
condition|(
name|domainClass
operator|.
name|isOWLThing
argument_list|()
operator|||
name|domainClass
operator|.
name|isOWLNothing
argument_list|()
condition|)
block|{
name|BuiltInResource
name|builtInResource
init|=
name|objectFactory
operator|.
name|createBuiltInResource
argument_list|()
decl_stmt|;
name|builtInResource
operator|.
name|setURI
argument_list|(
name|domainClass
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|builtInResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|domain
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|domainClass
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|domain
return|;
block|}
specifier|private
name|Range
name|generateObjectPropertyRange
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|ObjectProperty
name|objectProperty
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|OntResource
argument_list|>
name|rangeResources
init|=
name|objectProperty
operator|.
name|listRange
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Range
name|range
init|=
name|objectFactory
operator|.
name|createRange
argument_list|()
decl_stmt|;
for|for
control|(
name|OntResource
name|rangeResource
range|:
name|rangeResources
control|)
block|{
if|if
condition|(
name|rangeResource
operator|!=
literal|null
operator|&&
name|rangeResource
operator|.
name|isClass
argument_list|()
condition|)
block|{
name|OntClass
name|rangeClass
init|=
name|rangeResource
operator|.
name|asClass
argument_list|()
decl_stmt|;
name|String
name|resourceURI
init|=
name|rangeClass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|resourceURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JenaUtil
operator|.
name|isBuiltInClass
argument_list|(
name|resourceURI
argument_list|)
operator|||
name|JenaUtil
operator|.
name|isBuiltInType
argument_list|(
name|resourceURI
argument_list|)
condition|)
block|{
name|BuiltInResource
name|builtInResource
init|=
name|objectFactory
operator|.
name|createBuiltInResource
argument_list|()
decl_stmt|;
name|builtInResource
operator|.
name|setURI
argument_list|(
name|resourceURI
argument_list|)
expr_stmt|;
name|range
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|builtInResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|range
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|rangeClass
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"range for datatypeProperty ="
operator|+
name|objectProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" is resolved to OntClass but it does not have URI"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"domain for datatypeProperty ="
operator|+
name|objectProperty
operator|.
name|getURI
argument_list|()
operator|+
literal|" cannot be resolved to OntClass"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|range
return|;
block|}
specifier|private
name|Range
name|generateObjectPropertyRange
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLObjectProperty
name|owlObjectProperty
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|rangeClasses
init|=
name|reasoner
operator|.
name|getObjectPropertyRanges
argument_list|(
name|owlObjectProperty
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
name|Range
name|range
init|=
name|objectFactory
operator|.
name|createRange
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLClass
name|rangeClass
range|:
name|rangeClasses
control|)
block|{
if|if
condition|(
name|rangeClass
operator|.
name|isOWLThing
argument_list|()
operator|||
name|rangeClass
operator|.
name|isOWLNothing
argument_list|()
condition|)
block|{
name|BuiltInResource
name|builtInResource
init|=
name|objectFactory
operator|.
name|createBuiltInResource
argument_list|()
decl_stmt|;
name|builtInResource
operator|.
name|setURI
argument_list|(
name|rangeClass
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|range
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|builtInResource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|range
operator|.
name|getClassMetaInformationOrBuiltInResource
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|rangeClass
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|range
return|;
block|}
specifier|private
name|EquivalentProperties
name|generateObjectPropertyEquivalentProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|ObjectProperty
name|objectProperty
parameter_list|)
block|{
name|EquivalentProperties
name|equivalentProperties
init|=
name|objectFactory
operator|.
name|createEquivalentProperties
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|equivalentPropertiesItr
init|=
name|objectProperty
operator|.
name|listEquivalentProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|equivalentPropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntProperty
name|curEquivalentProperty
init|=
operator|(
name|OntProperty
operator|)
name|equivalentPropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curEquivalentProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|curEquivalentProperty
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|equivalentProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"equivalent property with uri, localName="
operator|+
name|curEquivalentProperty
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|equivalentProperties
return|;
block|}
specifier|private
name|EquivalentProperties
name|generateObjectPropertyEquivalentProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLObjectProperty
name|owlObjectProperty
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|EquivalentProperties
name|equivalentProperties
init|=
name|objectFactory
operator|.
name|createEquivalentProperties
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLObjectProperty
argument_list|>
name|equiProperties
init|=
name|reasoner
operator|.
name|getEquivalentObjectProperties
argument_list|(
name|owlObjectProperty
argument_list|)
operator|.
name|getEntities
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLObjectProperty
name|objectProp
range|:
name|equiProperties
control|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|objectProp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|equivalentProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
return|return
name|equivalentProperties
return|;
block|}
specifier|private
name|SuperProperties
name|generateObjectPropertySuperProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|ObjectProperty
name|objectProperty
parameter_list|)
block|{
name|SuperProperties
name|superProperties
init|=
name|objectFactory
operator|.
name|createSuperProperties
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|superPropertiesItr
init|=
name|objectProperty
operator|.
name|listSuperProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|superPropertiesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntProperty
name|curSuperProperty
init|=
operator|(
name|OntProperty
operator|)
name|superPropertiesItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curSuperProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|curSuperProperty
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|superProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"equivalent property with uri, localName="
operator|+
name|curSuperProperty
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|superProperties
return|;
block|}
specifier|private
name|SuperProperties
name|generateObjectPropertySuperProperties
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|,
name|OWLObjectProperty
name|owlObjectProperty
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|)
block|{
name|SuperProperties
name|superProperties
init|=
name|objectFactory
operator|.
name|createSuperProperties
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLObjectProperty
argument_list|>
name|supProperties
init|=
name|reasoner
operator|.
name|getSuperObjectProperties
argument_list|(
name|owlObjectProperty
argument_list|,
literal|false
argument_list|)
operator|.
name|getFlattened
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLObjectProperty
name|objectProp
range|:
name|supProperties
control|)
block|{
name|PropertyMetaInformation
name|datatypePropertyMetaInformation
init|=
name|generatePropertyMetaInformation
argument_list|(
name|objectProp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|superProperties
operator|.
name|getPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|datatypePropertyMetaInformation
argument_list|)
expr_stmt|;
block|}
return|return
name|superProperties
return|;
block|}
specifier|public
name|boolean
name|addDisjointClass
parameter_list|(
name|String
name|classURI
parameter_list|,
name|String
name|disjointClassURI
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|class_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|class_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|class_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|class_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|class_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|class_ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|String
name|disjointClass_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|disjointClassURI
argument_list|)
decl_stmt|;
name|Model
name|disjointClass_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|disjointClass_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|disjointClass_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|disjointClass_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|disjointOntClass
init|=
name|disjointClass_ontModel
operator|.
name|getOntClass
argument_list|(
name|disjointClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|!=
literal|null
operator|&&
name|disjointOntClass
operator|!=
literal|null
condition|)
block|{
name|ontClass
operator|.
name|addDisjointWith
argument_list|(
name|disjointOntClass
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// closeDBConnection(m_conn);
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteDisjointClass
parameter_list|(
name|String
name|classURI
parameter_list|,
name|String
name|disjointClassURI
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|class_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|class_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|class_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|class_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|class_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|class_ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|String
name|disjointClass_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|disjointClassURI
argument_list|)
decl_stmt|;
name|Model
name|disjointClass_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|disjointClass_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|disjointClass_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|disjointClass_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|disjointOntClass
init|=
name|disjointClass_ontModel
operator|.
name|getOntClass
argument_list|(
name|disjointClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|!=
literal|null
operator|&&
name|disjointOntClass
operator|!=
literal|null
condition|)
block|{
name|ontClass
operator|.
name|removeDisjointWith
argument_list|(
name|disjointOntClass
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// closeDBConnection(m_conn);
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|addEquivalentClass
parameter_list|(
name|String
name|classURI
parameter_list|,
name|String
name|equivalentClassURI
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|class_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|class_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|class_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|class_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|class_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|class_ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|String
name|equivalentClass_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|equivalentClassURI
argument_list|)
decl_stmt|;
name|Model
name|equivalentClass_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|equivalentClass_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|equivalentClass_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|equivalentClass_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|equivalentOntClass
init|=
name|equivalentClass_ontModel
operator|.
name|getOntClass
argument_list|(
name|equivalentClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|!=
literal|null
operator|&&
name|equivalentOntClass
operator|!=
literal|null
condition|)
block|{
name|ontClass
operator|.
name|addEquivalentClass
argument_list|(
name|equivalentOntClass
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// closeDBConnection(m_conn);
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteEquivalentClass
parameter_list|(
name|String
name|classURI
parameter_list|,
name|String
name|equivalentClassURI
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|class_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|class_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|class_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|class_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|class_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|class_ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|String
name|equivalentClass_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|equivalentClassURI
argument_list|)
decl_stmt|;
name|Model
name|equivalentClass_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|equivalentClass_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|equivalentClass_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|equivalentClass_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|equivalentOntClass
init|=
name|equivalentClass_ontModel
operator|.
name|getOntClass
argument_list|(
name|equivalentClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|!=
literal|null
operator|&&
name|equivalentOntClass
operator|!=
literal|null
condition|)
block|{
name|ontClass
operator|.
name|removeEquivalentClass
argument_list|(
name|equivalentOntClass
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// closeDBConnection(m_conn);
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|makeUnionClassOf
parameter_list|(
name|String
name|classURI
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|unionClassURIs
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|boolean
name|successful
init|=
literal|true
decl_stmt|;
name|String
name|class_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|class_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|class_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|class_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|class_baseModel
argument_list|)
decl_stmt|;
try|try
block|{
name|OntClass
name|ontClass
init|=
name|class_ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|RDFList
name|rdfList
init|=
name|class_ontModel
operator|.
name|createList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|unionClassURIsItr
init|=
name|unionClassURIs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unionClassURIsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|curUnionClassURI
init|=
name|unionClassURIsItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|curUnionClass_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|curUnionClassURI
argument_list|)
decl_stmt|;
name|Model
name|curUnionClass_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|curUnionClass_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|curUnionClass_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|curUnionClass_baseModel
argument_list|)
decl_stmt|;
try|try
block|{
name|OntClass
name|curUnionOntClass
init|=
name|curUnionClass_ontModel
operator|.
name|getOntClass
argument_list|(
name|curUnionClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|curUnionOntClass
operator|!=
literal|null
condition|)
block|{
name|rdfList
operator|=
name|rdfList
operator|.
name|cons
argument_list|(
name|curUnionOntClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|successful
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|curUnionClass_ontModel
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|successful
condition|)
block|{
name|ontClass
operator|.
name|convertToUnionClass
argument_list|(
name|rdfList
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
name|persistenceProvider
operator|.
name|commit
argument_list|(
name|class_ontModel
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// closeDBConnection(m_conn);
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|addUnionClass
parameter_list|(
name|String
name|classURI
parameter_list|,
name|String
name|unionClassURI
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|class_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|class_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|class_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|class_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|class_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|class_ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|String
name|curUnionClass_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|unionClassURI
argument_list|)
decl_stmt|;
name|Model
name|curUnionClass_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|curUnionClass_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|unionClass_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|curUnionClass_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|unionOntClass
init|=
name|unionClass_ontModel
operator|.
name|getOntClass
argument_list|(
name|unionClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|unionOntClass
operator|!=
literal|null
condition|)
block|{
comment|// Check if we can view as UnionClass
if|if
condition|(
name|ontClass
operator|.
name|isUnionClass
argument_list|()
condition|)
block|{
comment|// Already union class just add the new union class
comment|// assertion
name|ontClass
operator|.
name|asUnionClass
argument_list|()
operator|.
name|addOperand
argument_list|(
name|unionOntClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RDFList
name|unionList
init|=
name|class_baseModel
operator|.
name|createList
argument_list|()
decl_stmt|;
name|unionList
operator|.
name|cons
argument_list|(
name|unionOntClass
argument_list|)
expr_stmt|;
name|ontClass
operator|.
name|convertToUnionClass
argument_list|(
name|unionList
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteUnionClass
parameter_list|(
name|String
name|classURI
parameter_list|,
name|String
name|unionClassURI
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|class_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|Model
name|class_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|class_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|class_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|class_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|class_ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|String
name|curUnionClass_ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|unionClassURI
argument_list|)
decl_stmt|;
name|Model
name|curUnionClass_baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|curUnionClass_ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|unionClass_ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|curUnionClass_baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|unionOntClass
init|=
name|unionClass_ontModel
operator|.
name|getOntClass
argument_list|(
name|unionClassURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|unionOntClass
operator|!=
literal|null
condition|)
block|{
comment|// Check if we can view as UnionClass
if|if
condition|(
name|ontClass
operator|.
name|isUnionClass
argument_list|()
condition|)
block|{
comment|// Already union class just add the new union class
comment|// assertion
name|ontClass
operator|.
name|asUnionClass
argument_list|()
operator|.
name|removeOperand
argument_list|(
name|unionOntClass
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ResourceMetaInformationType
name|retrieveResourceWithURI
parameter_list|(
name|String
name|resourceURI
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|OntResource
name|ontResource
init|=
name|ontModel
operator|.
name|getOntResource
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontResource
operator|!=
literal|null
condition|)
block|{
name|ResourceMetaInformationType
name|resourceMetaInformationType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ontResource
operator|.
name|isIndividual
argument_list|()
condition|)
block|{
name|resourceMetaInformationType
operator|=
name|objectFactory
operator|.
name|createIndividualMetaInformation
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontResource
operator|.
name|isClass
argument_list|()
condition|)
block|{
name|resourceMetaInformationType
operator|=
name|objectFactory
operator|.
name|createClassMetaInformation
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontResource
operator|.
name|isProperty
argument_list|()
condition|)
block|{
name|resourceMetaInformationType
operator|=
name|objectFactory
operator|.
name|createPropertyMetaInformation
argument_list|()
expr_stmt|;
block|}
name|resourceMetaInformationType
operator|.
name|setURI
argument_list|(
name|ontResource
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|resourceMetaInformationType
operator|.
name|setNamespace
argument_list|(
name|ontResource
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|resourceMetaInformationType
operator|.
name|setLocalName
argument_list|(
name|ontResource
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|resourceMetaInformationType
operator|.
name|setHref
argument_list|(
name|resourceManager
operator|.
name|getResourceFullPath
argument_list|(
name|resourceURI
argument_list|)
argument_list|)
expr_stmt|;
comment|/** FIXME: Descriptions have to be administerable **/
name|resourceMetaInformationType
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|resourceMetaInformationType
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
comment|/**      * Assumes individualURI1 and objectPropertyURI are in the same ontology      *       * @param individualURI1      * @param objectPropertyURI      * @param individualURI2      * @return      */
comment|/*      * public boolean externallyAnnotateIndividual(String individualURI1, String objectPropertyURI, String      * individualURI2) {      *       * try { String ontologyURI1 = resourceManager .resolveOntologyURIFromResourceURI(individualURI1); if      * (ontologyURI1 != null) { Model baseModel1 = persistenceProvider.getModel(ontologyURI1); OntModel      * ontModel1 = ModelFactory.createOntologyModel( getOntModelSpec(false), baseModel1); Individual      * individual1 = ontModel1 .getIndividual(individualURI1); ObjectProperty objectProperty = ontModel1      * .createObjectProperty(objectPropertyURI); resourceManager.registerObjectProperty(ontologyURI1,      * objectProperty.getURI());      *       * DBPediaClient dbPediaClientInstance = DBPediaClient .getInstance(); dbPediaClientInstance      * .populateWithObjectPropertyValues(individualURI2);      *       * String ontologyURI2 = resourceManager .resolveOntologyURIFromResourceURI(individualURI2); if      * (ontologyURI2 != null) { Model baseModel2 = persistenceProvider .getModel(ontologyURI2); OntModel      * ontModel2 = ModelFactory.createOntologyModel( getOntModelSpec(false), baseModel2); Individual      * individual2 = ontModel2 .getIndividual(individualURI2); if (individual1 != null&& objectProperty !=      * null&& individual2 != null) { individual1.setPropertyValue(objectProperty, individual2); return true;      * } } } } catch (Exception e) { logger.error("Error ", e); } finally { // closeDBConnection(m_conn); }      * return false; }      */
comment|/**      * Non-Interface Functions *      *       * @throws SQLException      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSavedOntologyURIs
parameter_list|()
block|{
return|return
name|persistenceProvider
operator|.
name|listModels
argument_list|()
return|;
block|}
specifier|private
name|ClassMetaInformation
name|generateClassMetaInformation
parameter_list|(
name|String
name|classURI
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|classURI
operator|!=
literal|null
operator|&&
name|ontologyURI
operator|!=
literal|null
condition|)
block|{
comment|// The class description exists in ResourceManager
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|OntClass
name|ontClass
init|=
name|ontModel
operator|.
name|getOntClass
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|!=
literal|null
operator|&&
name|ontClass
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ClassMetaInformation
name|classMetaInformation
init|=
name|objectFactory
operator|.
name|createClassMetaInformation
argument_list|()
decl_stmt|;
name|classMetaInformation
operator|.
name|setHref
argument_list|(
name|resourceManager
operator|.
name|getResourceFullPath
argument_list|(
name|ontClass
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classMetaInformation
operator|.
name|setNamespace
argument_list|(
name|ontClass
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|classMetaInformation
operator|.
name|setLocalName
argument_list|(
name|ontClass
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|classMetaInformation
operator|.
name|setURI
argument_list|(
name|ontClass
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
comment|/** FIXME: Description has to be administerable **/
name|classMetaInformation
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|classMetaInformation
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|PropertyMetaInformation
name|generatePropertyMetaInformation
parameter_list|(
name|String
name|propertyURI
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyURI
operator|!=
literal|null
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|OntProperty
name|ontProperty
init|=
name|ontModel
operator|.
name|getOntProperty
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontProperty
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertyMetaInformation
name|propertyMetaInformation
init|=
name|objectFactory
operator|.
name|createPropertyMetaInformation
argument_list|()
decl_stmt|;
name|propertyMetaInformation
operator|.
name|setHref
argument_list|(
name|resourceManager
operator|.
name|getResourceFullPath
argument_list|(
name|ontProperty
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|propertyMetaInformation
operator|.
name|setNamespace
argument_list|(
name|ontProperty
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|propertyMetaInformation
operator|.
name|setLocalName
argument_list|(
name|ontProperty
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|propertyMetaInformation
operator|.
name|setURI
argument_list|(
name|ontProperty
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
comment|/** FIXME: Description has to be administerable **/
name|propertyMetaInformation
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|propertyMetaInformation
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{          }
return|return
literal|null
return|;
block|}
specifier|private
name|ResourceMetaInformationType
name|generateResourceMetaInformation
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|ResourceMetaInformationType
name|resourceMetaInformation
init|=
name|objectFactory
operator|.
name|createResourceMetaInformationType
argument_list|()
decl_stmt|;
name|resourceMetaInformation
operator|.
name|setLocalName
argument_list|(
name|resource
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|resourceMetaInformation
operator|.
name|setHref
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resourceMetaInformation
operator|.
name|setNamespace
argument_list|(
name|resource
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|resourceMetaInformation
operator|.
name|setURI
argument_list|(
name|resource
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
comment|/** FIXME: Description has to be administerable **/
name|resourceMetaInformation
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|resourceMetaInformation
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|IndividualMetaInformation
name|generateIndividualMetaInformation
parameter_list|(
name|String
name|individualURI
parameter_list|)
block|{
try|try
block|{
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|false
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|Individual
name|individual
init|=
name|ontModel
operator|.
name|getIndividual
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|individual
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|IndividualMetaInformation
name|individualMetaInformation
init|=
name|objectFactory
operator|.
name|createIndividualMetaInformation
argument_list|()
decl_stmt|;
name|individualMetaInformation
operator|.
name|setHref
argument_list|(
name|resourceManager
operator|.
name|getResourceFullPath
argument_list|(
name|individual
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|individualMetaInformation
operator|.
name|setNamespace
argument_list|(
name|individual
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|individualMetaInformation
operator|.
name|setLocalName
argument_list|(
name|individual
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|individualMetaInformation
operator|.
name|setURI
argument_list|(
name|individual
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
comment|/** FIXME: Description has to be administerable **/
name|individualMetaInformation
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|individualMetaInformation
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * FIXME:: Currently, some individuals and some data/object properties are also URIs without any      * references to classes      **/
comment|/** FIXME:: You have to deal with them to!!! **/
comment|/** FIXME OWLLinkReasoner should be used here too. **/
specifier|private
name|List
argument_list|<
name|ClassConstraint
argument_list|>
name|resolveOntClass
parameter_list|(
name|OntClass
name|ontClass
parameter_list|)
block|{
comment|// System.out.println("resolveOntClass");
name|List
argument_list|<
name|ClassConstraint
argument_list|>
name|allConstraints
init|=
operator|new
name|Vector
argument_list|<
name|ClassConstraint
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
comment|// ClassConstraint classConstraint =
comment|// objectFactory.createClassConstraint();
name|List
argument_list|<
name|OntClass
argument_list|>
name|restrictionClasses
init|=
name|ontClass
operator|.
name|listEquivalentClasses
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
name|restrictionClasses
operator|.
name|addAll
argument_list|(
name|ontClass
operator|.
name|listSuperClasses
argument_list|()
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|restrictionClasses
operator|.
name|add
argument_list|(
name|ontClass
argument_list|)
expr_stmt|;
for|for
control|(
name|OntClass
name|restrictionClass
range|:
name|restrictionClasses
control|)
block|{
if|if
condition|(
name|restrictionClass
operator|.
name|isComplementClass
argument_list|()
condition|)
block|{
comment|// System.out.println("complement");
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|COMPLEMENT_OF
argument_list|)
expr_stmt|;
name|ComplementClass
name|complementClass
init|=
name|restrictionClass
operator|.
name|asComplementClass
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|operandsItr
init|=
name|complementClass
operator|.
name|listOperands
argument_list|()
decl_stmt|;
while|while
condition|(
name|operandsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|nextClass
init|=
operator|(
name|OntClass
operator|)
name|operandsItr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|nextClass
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|nextClass
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ClassConstraint
argument_list|>
name|resolvedConstraints
init|=
name|resolveOntClass
argument_list|(
name|nextClass
argument_list|)
decl_stmt|;
name|Iterator
name|resolvedConstraintsItr
init|=
name|resolvedConstraints
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resolvedConstraintsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|resolvedConstraintsItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"error in resolve OntClass "
operator|+
name|restrictionClass
operator|.
name|toString
argument_list|()
operator|+
literal|" proceeding with next input."
argument_list|)
expr_stmt|;
block|}
block|}
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restrictionClass
operator|.
name|isEnumeratedClass
argument_list|()
condition|)
block|{
comment|// System.out.println("enumerated");
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|ENUMERATION_OF
argument_list|)
expr_stmt|;
name|EnumeratedClass
name|enumeratedClass
init|=
name|restrictionClass
operator|.
name|asEnumeratedClass
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|operandsItr
init|=
name|enumeratedClass
operator|.
name|listOneOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|operandsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntResource
name|nextResource
init|=
operator|(
name|OntResource
operator|)
name|operandsItr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|nextResource
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextResource
operator|.
name|isClass
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|nextResource
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextResource
operator|.
name|isIndividual
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateIndividualMetaInformation
argument_list|(
name|nextResource
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|nextResource
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"error in resolve OntClass "
operator|+
name|restrictionClass
operator|.
name|toString
argument_list|()
operator|+
literal|" proceeding with next input."
argument_list|)
expr_stmt|;
block|}
block|}
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restrictionClass
operator|.
name|isIntersectionClass
argument_list|()
condition|)
block|{
comment|// System.out.println("intersection");
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|INTERSECTION_OF
argument_list|)
expr_stmt|;
name|IntersectionClass
name|intersectionClass
init|=
name|restrictionClass
operator|.
name|asIntersectionClass
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|operandsItr
init|=
name|intersectionClass
operator|.
name|listOperands
argument_list|()
decl_stmt|;
while|while
condition|(
name|operandsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OntClass
name|nextClass
init|=
operator|(
name|OntClass
operator|)
name|operandsItr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|nextClass
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|nextClass
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ClassConstraint
argument_list|>
name|resolvedConstraints
init|=
name|resolveOntClass
argument_list|(
name|nextClass
argument_list|)
decl_stmt|;
name|Iterator
name|resolvedConstraintsItr
init|=
name|resolvedConstraints
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resolvedConstraintsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|resolvedConstraintsItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"error in resolve OntClass "
operator|+
name|restrictionClass
operator|.
name|toString
argument_list|()
operator|+
literal|" proceeding with next input."
argument_list|)
expr_stmt|;
block|}
block|}
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restrictionClass
operator|.
name|isRestriction
argument_list|()
condition|)
block|{
name|Restriction
name|restriction
init|=
name|restrictionClass
operator|.
name|asRestriction
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|restriction
operator|.
name|isAllValuesFromRestriction
argument_list|()
condition|)
block|{
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|ALL_VALUES_FROM
argument_list|)
expr_stmt|;
name|AllValuesFromRestriction
name|allValuesFromRestriction
init|=
name|restriction
operator|.
name|asAllValuesFromRestriction
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|allValuesFromRestriction
operator|.
name|getAllValuesFrom
argument_list|()
decl_stmt|;
name|organizePropertyReference
argument_list|(
name|classConstraint
argument_list|,
name|allValuesFromRestriction
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|resource
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// FIXME Resource may not necessarily be a OntClass,
comment|// it can be a DataRange either
try|try
block|{
name|List
argument_list|<
name|ClassConstraint
argument_list|>
name|resolvedConstraints
init|=
name|resolveOntClass
argument_list|(
operator|(
name|OntClass
operator|)
name|resource
argument_list|)
decl_stmt|;
name|Iterator
name|resolvedConstraintsItr
init|=
name|resolvedConstraints
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resolvedConstraintsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|resolvedConstraintsItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can not convert "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" to OntClass"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|organizeDataRange
argument_list|(
name|resource
argument_list|,
name|classConstraint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can not convert "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" to DataRange"
argument_list|)
expr_stmt|;
block|}
block|}
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restriction
operator|.
name|isSomeValuesFromRestriction
argument_list|()
condition|)
block|{
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|SOME_VALUES_FROM
argument_list|)
expr_stmt|;
name|SomeValuesFromRestriction
name|someValuesFromRestriction
init|=
name|restriction
operator|.
name|asSomeValuesFromRestriction
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|someValuesFromRestriction
operator|.
name|getSomeValuesFrom
argument_list|()
decl_stmt|;
name|organizePropertyReference
argument_list|(
name|classConstraint
argument_list|,
name|someValuesFromRestriction
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateClassMetaInformation
argument_list|(
name|resource
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|List
argument_list|<
name|ClassConstraint
argument_list|>
name|resolvedConstraints
init|=
name|resolveOntClass
argument_list|(
operator|(
name|OntClass
operator|)
name|resource
argument_list|)
decl_stmt|;
name|Iterator
name|resolvedConstraintsItr
init|=
name|resolvedConstraints
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resolvedConstraintsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|resolvedConstraintsItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can not convert "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" to OntClass"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|organizeDataRange
argument_list|(
name|resource
argument_list|,
name|classConstraint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can not convert "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" to DataRange"
argument_list|)
expr_stmt|;
block|}
block|}
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restriction
operator|.
name|isHasValueRestriction
argument_list|()
condition|)
block|{
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|HAS_VALUE
argument_list|)
expr_stmt|;
name|HasValueRestriction
name|hasValueRestriction
init|=
name|restriction
operator|.
name|asHasValueRestriction
argument_list|()
decl_stmt|;
comment|// FIXME:: has values are on properties
name|organizePropertyReference
argument_list|(
name|classConstraint
argument_list|,
name|hasValueRestriction
argument_list|)
expr_stmt|;
name|RDFNode
name|node
init|=
name|hasValueRestriction
operator|.
name|getHasValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|node
operator|.
name|asLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateIndividualMetaInformation
argument_list|(
name|node
operator|.
name|asResource
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restriction
operator|.
name|isCardinalityRestriction
argument_list|()
condition|)
block|{
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|CARDINALITY
argument_list|)
expr_stmt|;
name|organizePropertyReference
argument_list|(
name|classConstraint
argument_list|,
name|restriction
argument_list|)
expr_stmt|;
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|restriction
operator|.
name|asCardinalityRestriction
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restriction
operator|.
name|isMaxCardinalityRestriction
argument_list|()
condition|)
block|{
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|MAX_CARDINALITY
argument_list|)
expr_stmt|;
name|organizePropertyReference
argument_list|(
name|classConstraint
argument_list|,
name|restriction
argument_list|)
expr_stmt|;
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|restriction
operator|.
name|asMaxCardinalityRestriction
argument_list|()
operator|.
name|getMaxCardinality
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restriction
operator|.
name|isMinCardinalityRestriction
argument_list|()
condition|)
block|{
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|MIN_CARDINALITY
argument_list|)
expr_stmt|;
name|organizePropertyReference
argument_list|(
name|classConstraint
argument_list|,
name|restriction
argument_list|)
expr_stmt|;
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|restriction
operator|.
name|asMinCardinalityRestriction
argument_list|()
operator|.
name|getMinCardinality
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"error in resolve OntClass "
operator|+
name|restrictionClass
operator|.
name|toString
argument_list|()
operator|+
literal|" proceeding with next input."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|restrictionClass
operator|.
name|isUnionClass
argument_list|()
condition|)
block|{
comment|// System.out.println("union");
name|ClassConstraint
name|classConstraint
init|=
name|objectFactory
operator|.
name|createClassConstraint
argument_list|()
decl_stmt|;
name|classConstraint
operator|.
name|setType
argument_list|(
name|ConstraintType
operator|.
name|UNION_OF
argument_list|)
expr_stmt|;
name|UnionClass
name|unionClass
init|=
name|restrictionClass
operator|.
name|asUnionClass
argument_list|()
decl_stmt|;
name|ExtendedIterator
name|operandsItr
init|=
name|unionClass
operator|.
name|listOperands
argument_list|()
decl_stmt|;
comment|// System.out.println("before while loop");
while|while
condition|(
name|operandsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// System.out.println("in while loop");
try|try
block|{
name|OntClass
name|nextClass
init|=
operator|(
name|OntClass
operator|)
name|operandsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextClass
operator|.
name|getURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// System.out.println("IN UNION_OF :: "
comment|// + nextClass.getURI());
name|ClassMetaInformation
name|classMetaInformation
init|=
name|generateClassMetaInformation
argument_list|(
name|nextClass
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|classMetaInformation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// System.out.println("IN UNION_OF nextClassURI null:: ");
name|List
argument_list|<
name|ClassConstraint
argument_list|>
name|resolvedConstraints
init|=
name|resolveOntClass
argument_list|(
name|nextClass
argument_list|)
decl_stmt|;
name|Iterator
name|resolvedConstraintsItr
init|=
name|resolvedConstraints
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resolvedConstraintsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|resolvedConstraintsItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"error in resolve OntClass "
operator|+
name|restrictionClass
operator|.
name|toString
argument_list|()
operator|+
literal|" proceeding with next input."
argument_list|)
expr_stmt|;
block|}
block|}
name|allConstraints
operator|.
name|add
argument_list|(
name|classConstraint
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allConstraints
return|;
block|}
specifier|private
name|void
name|organizeDataRange
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|ClassConstraint
name|classConstraint
parameter_list|)
block|{
name|DataRange
name|dataRange
init|=
operator|(
name|DataRange
operator|)
name|resource
decl_stmt|;
for|for
control|(
name|RDFNode
name|node
range|:
name|dataRange
operator|.
name|getOneOf
argument_list|()
operator|.
name|asJavaList
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
name|IndividualMetaInformation
name|individualMetaInformation
init|=
name|generateIndividualMetaInformation
argument_list|(
name|resource
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualMetaInformation
operator|!=
literal|null
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|individualMetaInformation
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|resource
operator|.
name|asLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"RDFNode "
operator|+
name|node
operator|.
name|toString
argument_list|()
operator|+
literal|" is neither Literal nor URI Resource"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|organizePropertyReference
parameter_list|(
name|ClassConstraint
name|classConstraint
parameter_list|,
name|Restriction
name|restriction
parameter_list|)
block|{
name|Resource
name|propertyResource
init|=
name|restriction
operator|.
name|getPropertyResourceValue
argument_list|(
name|OWL
operator|.
name|onProperty
argument_list|)
decl_stmt|;
name|PropertyMetaInformation
name|propertyInf
init|=
name|generatePropertyMetaInformation
argument_list|(
name|propertyResource
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyInf
operator|!=
literal|null
condition|)
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|propertyInf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classConstraint
operator|.
name|getClassConstraintOrClassMetaInformationOrPropertyMetaInformation
argument_list|()
operator|.
name|add
argument_list|(
name|generateResourceMetaInformation
argument_list|(
name|propertyResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// (Cihan)
comment|// Query Type = SELECT | CONSTRUCT | DESCRIBE | ASK
specifier|public
name|String
name|sparqlQuery
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|queryString
parameter_list|,
name|String
name|queryType
parameter_list|)
block|{
name|Query
name|query
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|Model
name|baseModel
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpec
argument_list|(
literal|true
argument_list|)
argument_list|,
name|baseModel
argument_list|)
decl_stmt|;
name|QueryExecution
name|exec
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|query
argument_list|,
name|ontModel
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"SELECT"
operator|.
name|equals
argument_list|(
name|queryType
argument_list|)
condition|)
block|{
name|ResultSet
name|results
init|=
name|exec
operator|.
name|execSelect
argument_list|()
decl_stmt|;
return|return
name|ResultSetFormatter
operator|.
name|asXMLString
argument_list|(
name|results
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"CONSTRUCT"
operator|.
name|equals
argument_list|(
name|queryType
argument_list|)
condition|)
block|{
name|Model
name|model
init|=
name|exec
operator|.
name|execConstruct
argument_list|()
decl_stmt|;
name|Writer
name|wr
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|model
operator|.
name|write
argument_list|(
name|wr
argument_list|)
expr_stmt|;
return|return
name|wr
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"DESCRIBE"
operator|.
name|equals
argument_list|(
name|queryType
argument_list|)
condition|)
block|{
name|Model
name|model
init|=
name|exec
operator|.
name|execDescribe
argument_list|()
decl_stmt|;
name|Writer
name|wr
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|model
operator|.
name|write
argument_list|(
name|wr
argument_list|)
expr_stmt|;
return|return
name|wr
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"ASK"
operator|.
name|equals
argument_list|(
name|queryType
argument_list|)
condition|)
block|{
name|boolean
name|ans
init|=
name|exec
operator|.
name|execAsk
argument_list|()
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|ans
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|"An error occured"
return|;
block|}
return|return
literal|"Query Type Not Specified"
return|;
block|}
specifier|private
name|OntModelSpec
name|getOntModelSpecWithoutModelMaker
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|useReasoner
condition|)
block|{
return|return
name|OntModelSpec
operator|.
name|OWL_DL_MEM_TRANS_INF
return|;
block|}
else|else
block|{
return|return
name|OntModelSpec
operator|.
name|OWL_DL_MEM
return|;
block|}
block|}
comment|// FIXME Jena and OWLApi model should be synchronized to prevent creating a
comment|// KB for an ontology every time a resource on that ontology requested
specifier|private
name|OWLlinkHTTPXMLReasoner
name|getOWLLinkReasoner
parameter_list|(
name|OWLOntology
name|ontology
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|OWLlinkHTTPXMLReasonerFactory
name|factory
init|=
operator|new
name|OWLlinkHTTPXMLReasonerFactory
argument_list|()
decl_stmt|;
name|ConsoleProgressMonitor
name|progressMonitor
init|=
operator|new
name|ConsoleProgressMonitor
argument_list|()
decl_stmt|;
name|OWLlinkReasonerConfiguration
name|config
init|=
operator|new
name|OWLlinkReasonerConfiguration
argument_list|(
name|progressMonitor
argument_list|,
name|REASONER_URL
argument_list|,
name|IndividualNodeSetPolicy
operator|.
name|BY_NAME
argument_list|)
decl_stmt|;
name|OWLlinkHTTPXMLReasoner
name|reasoner
init|=
operator|(
name|OWLlinkHTTPXMLReasoner
operator|)
name|factory
operator|.
name|createNonBufferingReasoner
argument_list|(
name|ontology
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|reasoner
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|reasoner
return|;
block|}
specifier|private
name|OntModel
name|addInferencesToModel
parameter_list|(
name|OntModel
name|model
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|InferenceScope
name|infScope
parameter_list|)
block|{
name|OntModel
name|returnModel
init|=
name|model
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OWLOntology
name|original
init|=
name|jenaToOWlApi
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|manager
init|=
name|original
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLlinkHTTPXMLReasonerFactory
name|factory
init|=
operator|new
name|OWLlinkHTTPXMLReasonerFactory
argument_list|()
decl_stmt|;
name|ConsoleProgressMonitor
name|progressMonitor
init|=
operator|new
name|ConsoleProgressMonitor
argument_list|()
decl_stmt|;
name|OWLlinkReasonerConfiguration
name|config
init|=
operator|new
name|OWLlinkReasonerConfiguration
argument_list|(
name|progressMonitor
argument_list|,
name|REASONER_URL
argument_list|,
name|IndividualNodeSetPolicy
operator|.
name|BY_NAME
argument_list|)
decl_stmt|;
name|OWLlinkHTTPXMLReasoner
name|reasoner
init|=
operator|(
name|OWLlinkHTTPXMLReasoner
operator|)
name|factory
operator|.
name|createNonBufferingReasoner
argument_list|(
name|original
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|IRI
name|kb
init|=
name|reasoner
operator|.
name|getDefaultKB
argument_list|()
decl_stmt|;
try|try
block|{
name|reasoner
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OWLOntology
name|ont
init|=
name|manager
operator|.
name|createOntology
argument_list|()
decl_stmt|;
name|generateInferredAxioms
argument_list|(
name|manager
argument_list|,
name|ont
argument_list|,
name|reasoner
argument_list|,
name|inferredAxiomGenerators
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addAxioms
argument_list|(
name|original
argument_list|,
name|ont
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OntModel
name|newModel
init|=
name|owlApiToJena
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Jena -> OWlapi "
operator|+
operator|(
name|t1
operator|-
name|start
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Inferring Statements "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Prepare inferred model "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Owlapi -> Jena "
operator|+
operator|(
name|end
operator|-
name|t3
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Inferred statements are computed in "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|returnModel
operator|=
name|newModel
expr_stmt|;
block|}
finally|finally
block|{
name|reasoner
operator|.
name|answer
argument_list|(
operator|new
name|ReleaseKB
argument_list|(
name|kb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to get inference model. Returning original model"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|returnModel
return|;
block|}
specifier|private
name|OWLOntology
name|jenaToOWlApi
parameter_list|(
name|OntModel
name|model
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|model
operator|.
name|write
argument_list|(
name|bos
argument_list|,
literal|"RDF/XML"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|owlOntology
init|=
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|owlOntology
return|;
block|}
specifier|private
name|OWLOntology
name|jenaToOWlApi
parameter_list|(
name|OntModel
name|model
parameter_list|,
name|String
name|ontologyURI
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|RDFWriter
name|rdfWriter
init|=
name|model
operator|.
name|getWriter
argument_list|(
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|rdfWriter
operator|.
name|setProperty
argument_list|(
literal|"xmlbase"
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|rdfWriter
operator|.
name|write
argument_list|(
name|model
operator|.
name|getBaseModel
argument_list|()
argument_list|,
name|bos
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
comment|// model.write(bos, "RDF/XML", null);
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|owlOntology
init|=
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|owlOntology
return|;
block|}
specifier|private
name|OntModel
name|owlApiToJena
parameter_list|(
name|OWLOntology
name|owlOntology
parameter_list|)
throws|throws
name|OWLOntologyStorageException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|owlmanager
init|=
name|owlOntology
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
name|owlmanager
operator|.
name|saveOntology
argument_list|(
name|owlOntology
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|getOntModelSpecWithoutModelMaker
argument_list|()
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|owlOntology
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
name|String
name|ontologyURI
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
name|ontologyURI
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|ontologyURI
operator|=
name|id
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|ontModel
operator|.
name|read
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
return|return
name|ontModel
return|;
block|}
specifier|private
name|void
name|generateInferredAxioms
parameter_list|(
name|OWLOntologyManager
name|manager
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|,
name|OWLReasoner
name|reasoner
parameter_list|,
name|List
argument_list|<
name|InferredAxiomGenerator
argument_list|>
name|axiomGenerators
parameter_list|)
block|{
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InferredAxiomGenerator
argument_list|<
name|?
extends|extends
name|OWLAxiom
argument_list|>
name|axiomGenerator
range|:
name|axiomGenerators
control|)
block|{
try|try
block|{
for|for
control|(
name|OWLAxiom
name|ax
range|:
name|axiomGenerator
operator|.
name|createAxioms
argument_list|(
name|manager
argument_list|,
name|reasoner
argument_list|)
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|ontology
argument_list|,
name|ax
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLlinkReasonerRuntimeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can not compute inferred statements: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|manager
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JenaPersistenceProvider
name|getPersistenceProvider
parameter_list|()
block|{
return|return
name|persistenceProvider
return|;
block|}
specifier|public
name|void
name|bindResourceManager
parameter_list|(
name|ResourceManager
name|resourceManager
parameter_list|)
block|{
name|this
operator|.
name|resourceManager
operator|=
name|resourceManager
expr_stmt|;
block|}
specifier|public
name|void
name|unbindResourceManager
parameter_list|(
name|ResourceManager
name|resourceManager
parameter_list|)
block|{
name|this
operator|.
name|synchronizerThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|this
operator|.
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ImportsForOntology
name|retrieveOntologyImports
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectFactory
name|of
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|Model
name|model
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|ImportsForOntology
name|imports
init|=
name|of
operator|.
name|createImportsForOntology
argument_list|()
decl_stmt|;
name|imports
operator|.
name|setOntologyMetaInformation
argument_list|(
name|retrieveOntologyMetaInformation
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|importedOntologyURI
range|:
name|ontModel
operator|.
name|listImportedOntologyURIs
argument_list|()
control|)
block|{
name|OntologyImport
name|ontImport
init|=
operator|new
name|OntologyImport
argument_list|()
decl_stmt|;
name|ontImport
operator|.
name|setURI
argument_list|(
name|importedOntologyURI
argument_list|)
expr_stmt|;
name|ontImport
operator|.
name|setHref
argument_list|(
name|resourceManager
operator|.
name|getOntologyFullPath
argument_list|(
name|importedOntologyURI
argument_list|)
argument_list|)
expr_stmt|;
name|imports
operator|.
name|getOntologyImport
argument_list|()
operator|.
name|add
argument_list|(
name|ontImport
argument_list|)
expr_stmt|;
block|}
return|return
name|imports
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addOntologyImport
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|importURI
parameter_list|)
throws|throws
name|Exception
block|{
name|Model
name|model
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|ontModel
operator|.
name|add
argument_list|(
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|ontologyURI
argument_list|)
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|importURI
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|persistenceProvider
operator|.
name|hasModel
argument_list|(
name|importURI
argument_list|)
condition|)
block|{
name|saveOntology
argument_list|(
operator|new
name|URL
argument_list|(
name|importURI
argument_list|)
argument_list|,
name|importURI
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeOntologyImport
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|importURI
parameter_list|)
throws|throws
name|Exception
block|{
name|Model
name|model
init|=
name|persistenceProvider
operator|.
name|getModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|ontModel
operator|.
name|remove
argument_list|(
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|ontologyURI
argument_list|)
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|importURI
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Statement
argument_list|>
name|toDelete
init|=
name|ontModel
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|importURI
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|ontModel
operator|.
name|remove
argument_list|(
name|toDelete
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

