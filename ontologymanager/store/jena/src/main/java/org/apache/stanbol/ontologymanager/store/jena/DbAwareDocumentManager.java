begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  * Source code metadata  *  * Author    ijd  * Package   Jena2 Tests  * Created   Nov 12, 2007  * Filename  DbAwareDocumentManager.java  *  * (c) Copyright 2007 Hewlett-Packard Development Company, LP  *****************************************************************************/
end_comment

begin_comment
comment|// Package
end_comment

begin_comment
comment|///////////////
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|jena
package|;
end_package

begin_comment
comment|// Imports
end_comment

begin_comment
comment|///////////////
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntDocumentManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelReader
import|;
end_import

begin_comment
comment|/**  *<p>  * An extension to the standard document manager that holds a reference to the {@link ModelMaker} for a Jena  * database model. That maker is used as a preferential source of stored models, indexed by URI.  *</p>  *   * @author Ian Dickinson, HP Labs (<a href="mailto:Ian.Dickinson@hp.com">email</a>)  */
end_comment

begin_class
specifier|public
class|class
name|DbAwareDocumentManager
extends|extends
name|OntDocumentManager
block|{
comment|// Constants
comment|// ////////////////////////////////
comment|// Static variables
comment|// ////////////////////////////////
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"unused"
argument_list|)
specifier|private
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DbAwareDocumentManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Instance variables
comment|// ////////////////////////////////
specifier|private
name|ModelMaker
name|m_maker
decl_stmt|;
comment|// Constructors
comment|// ////////////////////////////////
specifier|public
name|DbAwareDocumentManager
parameter_list|(
name|ModelMaker
name|maker
parameter_list|)
block|{
name|m_maker
operator|=
name|maker
expr_stmt|;
block|}
comment|// External signature methods
comment|// ////////////////////////////////
annotation|@
name|Override
specifier|protected
name|void
name|loadImport
parameter_list|(
name|OntModel
name|model
parameter_list|,
name|String
name|importURI
parameter_list|,
name|List
name|readQueue
parameter_list|)
block|{
if|if
condition|(
name|m_processImports
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"OntDocumentManager loading "
operator|+
name|importURI
argument_list|)
expr_stmt|;
comment|// add this model to occurs check list
name|model
operator|.
name|addLoadedImport
argument_list|(
name|importURI
argument_list|)
expr_stmt|;
comment|// check first to see if we have already loaded this model into the db
name|Model
name|in
init|=
name|checkExistingDbImport
argument_list|(
name|importURI
argument_list|)
decl_stmt|;
comment|// otherwise, try to find it
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|fetchPossiblyCachedImportModel
argument_list|(
name|model
argument_list|,
name|importURI
argument_list|)
expr_stmt|;
block|}
comment|// we trap the case of importing ourself (which may happen via an indirect imports chain)
if|if
condition|(
name|in
operator|!=
name|model
condition|)
block|{
comment|// queue the imports from the input model on the end of the read queue
name|queueImports
argument_list|(
name|in
argument_list|,
name|readQueue
argument_list|,
name|model
operator|.
name|getProfile
argument_list|()
argument_list|)
expr_stmt|;
comment|// add to the imports union graph, but don't do the rebind yet
name|model
operator|.
name|addSubModel
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// we also cache the model if we haven't seen it before (and caching is on)
name|addModel
argument_list|(
name|importURI
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Given a URI of an ontology, check to see whether that URL is already loaded into the database. If so,      * use that model.      *       * @param importURI      *            The URI of an ontology to import      * @return The existing DB model for that URI, or null      */
specifier|protected
name|Model
name|checkExistingDbImport
parameter_list|(
name|String
name|importURI
parameter_list|)
block|{
if|if
condition|(
name|m_maker
operator|.
name|hasModel
argument_list|(
name|importURI
argument_list|)
condition|)
block|{
return|return
name|m_maker
operator|.
name|getModel
argument_list|(
name|importURI
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// Internal implementation methods
comment|// ////////////////////////////////
comment|/*      * The following two methods have been copied by OntDocumentManager since they're marked private. This is      * a bug (they should be protected), and will be fixed in the next Jena release.      */
comment|/**      * if we have a cached version get that, otherwise load from the URI but don't do the imports closure      *       * @param model      * @param importURI      * @return      */
specifier|protected
name|Model
name|fetchPossiblyCachedImportModel
parameter_list|(
name|OntModel
name|model
parameter_list|,
name|String
name|importURI
parameter_list|)
block|{
name|Model
name|in
init|=
name|getModel
argument_list|(
name|importURI
argument_list|)
decl_stmt|;
comment|// if not cached, we must load it from source
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|fetchLoadedImportModel
argument_list|(
name|model
operator|.
name|getSpecification
argument_list|()
argument_list|,
name|importURI
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
comment|/**      * @param spec      * @param importURI      * @return      */
specifier|protected
name|Model
name|fetchLoadedImportModel
parameter_list|(
name|OntModelSpec
name|spec
parameter_list|,
name|String
name|importURI
parameter_list|)
block|{
name|ModelMaker
name|maker
init|=
name|spec
operator|.
name|getImportModelMaker
argument_list|()
decl_stmt|;
if|if
condition|(
name|maker
operator|.
name|hasModel
argument_list|(
name|importURI
argument_list|)
condition|)
block|{
name|Model
name|m
init|=
name|maker
operator|.
name|getModel
argument_list|(
name|importURI
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
name|m
return|;
block|}
else|else
block|{
comment|// we don't want to hang on to closed models
name|maker
operator|.
name|removeModel
argument_list|(
name|importURI
argument_list|)
expr_stmt|;
block|}
block|}
comment|// otherwise, we use the model maker to get the model anew
name|Model
name|m
init|=
name|spec
operator|.
name|getImportModelGetter
argument_list|()
operator|.
name|getModel
argument_list|(
name|importURI
argument_list|,
operator|new
name|ModelReader
argument_list|()
block|{
specifier|public
name|Model
name|readModel
parameter_list|(
name|Model
name|toRead
parameter_list|,
name|String
name|URL
parameter_list|)
block|{
name|read
argument_list|(
name|toRead
argument_list|,
name|URL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|toRead
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|m
return|;
block|}
comment|// ==============================================================================
comment|// Inner class definitions
comment|// ==============================================================================
block|}
end_class

end_unit

