begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
operator|.
name|SimpleContentItem
import|;
end_import

begin_comment
comment|/*  * In this scope this class is used to store contentType-content-storeid  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Triple
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|L
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ELEMENT_SEPARATOR
init|=
literal|","
decl_stmt|;
specifier|private
name|K
name|entry1
decl_stmt|;
specifier|private
name|V
name|entry2
decl_stmt|;
specifier|private
name|L
name|entry3
decl_stmt|;
specifier|public
name|Triple
parameter_list|(
specifier|final
name|K
name|entry1
parameter_list|,
specifier|final
name|V
name|entry2
parameter_list|,
specifier|final
name|L
name|entry3
parameter_list|)
block|{
name|this
operator|.
name|entry1
operator|=
name|entry1
expr_stmt|;
name|this
operator|.
name|entry2
operator|=
name|entry2
expr_stmt|;
name|this
operator|.
name|entry3
operator|=
name|entry3
expr_stmt|;
block|}
specifier|public
specifier|static
name|Triple
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|createTriple
parameter_list|(
specifier|final
name|String
name|string
parameter_list|)
block|{
name|String
index|[]
name|field
init|=
name|string
operator|.
name|split
argument_list|(
name|ELEMENT_SEPARATOR
argument_list|)
decl_stmt|;
name|String
name|entry1
init|=
name|field
index|[
literal|0
index|]
decl_stmt|;
name|String
name|entry2
init|=
name|field
index|[
literal|1
index|]
decl_stmt|;
name|String
name|entry3
init|=
name|field
index|[
literal|2
index|]
decl_stmt|;
return|return
operator|new
name|Triple
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|entry1
argument_list|,
name|entry2
argument_list|,
name|entry3
argument_list|)
return|;
block|}
specifier|public
name|K
name|getEntry1
parameter_list|()
block|{
return|return
name|entry1
return|;
block|}
specifier|public
name|V
name|getEntry2
parameter_list|()
block|{
return|return
name|entry2
return|;
block|}
specifier|public
name|L
name|getEntry3
parameter_list|()
block|{
return|return
name|entry3
return|;
block|}
specifier|public
name|void
name|setEntry1
parameter_list|(
specifier|final
name|K
name|entry1
parameter_list|)
block|{
name|this
operator|.
name|entry1
operator|=
name|entry1
expr_stmt|;
block|}
specifier|public
name|void
name|setEntry2
parameter_list|(
specifier|final
name|V
name|entry2
parameter_list|)
block|{
name|this
operator|.
name|entry2
operator|=
name|entry2
expr_stmt|;
block|}
specifier|public
name|void
name|setEntry3
parameter_list|(
specifier|final
name|L
name|entry3
parameter_list|)
block|{
name|this
operator|.
name|entry3
operator|=
name|entry3
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// Return entries in comma separated from
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry1
argument_list|)
operator|.
name|append
argument_list|(
name|ELEMENT_SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry2
argument_list|)
operator|.
name|append
argument_list|(
name|ELEMENT_SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry3
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ContentItem
name|toContentItem
parameter_list|()
block|{
return|return
operator|new
name|SimpleContentItem
argument_list|(
operator|(
name|String
operator|)
name|entry1
argument_list|,
literal|null
argument_list|,
operator|(
name|String
operator|)
name|entry3
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|entry2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

