begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|rest
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|PersistenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|rest
operator|.
name|LockManagerImp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|rest
operator|.
name|ResourceManagerImp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ontologies/{ontologyPath:.+}/individuals/{individualPath:.+}/propertyAssertions"
argument_list|)
specifier|public
class|class
name|ParticularIndividualPropertyAssertions
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ParticularIndividualPropertyAssertions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PersistenceStore
name|persistenceStore
decl_stmt|;
specifier|public
name|ParticularIndividualPropertyAssertions
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|persistenceStore
operator|=
operator|(
name|PersistenceStore
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|PersistenceStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// FIXME Handle PS errors properly, correct return values
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"{propertyPath:.+}"
argument_list|)
specifier|public
name|Response
name|addPropertyAssertions
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyPath"
argument_list|)
name|String
name|ontologyPath
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"individualPath"
argument_list|)
name|String
name|individualPath
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"propertyPath"
argument_list|)
name|String
name|propertyPath
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"literalValues"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|literalValues
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"objectValues"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|objectValues
parameter_list|)
block|{
name|LockManager
name|lockManager
init|=
name|LockManagerImp
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|lockManager
operator|.
name|obtainWriteLockFor
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
try|try
block|{
name|ResourceManagerImp
name|resourceManager
init|=
name|ResourceManagerImp
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|individualURI
init|=
name|resourceManager
operator|.
name|getResourceURIForPath
argument_list|(
name|ontologyPath
argument_list|,
name|individualPath
argument_list|)
decl_stmt|;
name|String
name|propertyURI
init|=
name|resourceManager
operator|.
name|convertEntityRelativePathToURI
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualURI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|literalValues
operator|!=
literal|null
operator|&&
name|literalValues
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|String
name|literalValue
range|:
name|literalValues
control|)
block|{
if|if
condition|(
name|literalValue
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
continue|continue;
try|try
block|{
name|persistenceStore
operator|.
name|assertPropertyValue
argument_list|(
name|individualURI
argument_list|,
name|propertyURI
argument_list|,
literal|null
argument_list|,
name|literalValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|objectValues
operator|!=
literal|null
operator|&&
name|objectValues
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|String
name|objectValue
range|:
name|objectValues
control|)
block|{
if|if
condition|(
name|objectValue
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
continue|continue;
try|try
block|{
name|persistenceStore
operator|.
name|assertPropertyValue
argument_list|(
name|individualURI
argument_list|,
name|propertyURI
argument_list|,
name|objectValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|lockManager
operator|.
name|releaseWriteLockFor
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"{propertyPath:.+}/literals/"
argument_list|)
specifier|public
name|Response
name|deleteDatatypePropertyAssertions
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyPath"
argument_list|)
name|String
name|ontologyPath
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"individualPath"
argument_list|)
name|String
name|individualPath
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"propertyPath"
argument_list|)
name|String
name|propertyPath
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"value"
argument_list|)
name|String
name|value
parameter_list|)
block|{
name|LockManager
name|lockManager
init|=
name|LockManagerImp
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|lockManager
operator|.
name|obtainWriteLockFor
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
try|try
block|{
name|ResourceManagerImp
name|resourceManager
init|=
name|ResourceManagerImp
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|individualURI
init|=
name|resourceManager
operator|.
name|getResourceURIForPath
argument_list|(
name|ontologyPath
argument_list|,
name|individualPath
argument_list|)
decl_stmt|;
name|String
name|propertyURI
init|=
name|resourceManager
operator|.
name|convertEntityRelativePathToURI
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualURI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|persistenceStore
operator|.
name|deletePropertyAssertion
argument_list|(
name|individualURI
argument_list|,
name|propertyURI
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|lockManager
operator|.
name|releaseWriteLockFor
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"{propertyPath:.+}/objects/{value:.+}"
argument_list|)
specifier|public
name|Response
name|deleteObjectPropertyAssertions
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyPath"
argument_list|)
name|String
name|ontologyPath
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"individualPath"
argument_list|)
name|String
name|individualPath
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"propertyPath"
argument_list|)
name|String
name|propertyPath
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"value"
argument_list|)
name|String
name|value
parameter_list|)
block|{
name|LockManager
name|lockManager
init|=
name|LockManagerImp
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|lockManager
operator|.
name|obtainWriteLockFor
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
try|try
block|{
name|ResourceManagerImp
name|resourceManager
init|=
name|ResourceManagerImp
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|individualURI
init|=
name|resourceManager
operator|.
name|getResourceURIForPath
argument_list|(
name|ontologyPath
argument_list|,
name|individualPath
argument_list|)
decl_stmt|;
name|String
name|propertyURI
init|=
name|resourceManager
operator|.
name|convertEntityRelativePathToURI
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
name|String
name|valueURI
init|=
name|resourceManager
operator|.
name|convertEntityRelativePathToURI
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualURI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|persistenceStore
operator|.
name|deletePropertyAssertion
argument_list|(
name|individualURI
argument_list|,
name|propertyURI
argument_list|,
name|valueURI
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|lockManager
operator|.
name|releaseWriteLockFor
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

