begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|owlapi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  * An input source that provides the supplied OWL ontology straight away or from its physical resource. The  * physical IRI is either obtained from the default document IRI in the ontology, or supplied manually using  * the appropriate constructor (e.g. retrieved from the ontology manager that actually loaded the ontology).<br>  *<br>  * Note that, no matter what constructor is used, the expected behavior of {@link OntologyInputSource}  * consumers remains the same, i.e. the root ontology is checked first, and then its physical origin.  *   * @author alexdma  */
end_comment

begin_class
specifier|public
class|class
name|RootOntologySource
extends|extends
name|AbstractOWLOntologyInputSource
block|{
comment|/**      * This constructor can be used when the physical IRI of the ontology is known and one wants Stanbol to      * obtain the ontology/ies from it. Any failure to do so, including parse errors and unresolved imports,      * will cause an {@link OWLOntologyCreationException} to be thrown.      *       * @param rootPhysicalIri      *            the physical IRI where the ontology is located.      * @throws OWLOntologyCreationException      *             if no ontology could be obtained by resolving the root physical IRI.      */
specifier|public
name|RootOntologySource
parameter_list|(
name|IRI
name|rootPhysicalIri
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|this
argument_list|(
name|rootPhysicalIri
argument_list|,
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This constructor can be used when the physical IRI of the ontology is known and one wants Stanbol to      * obtain the ontology/ies from it, but one needs a special configuration for the ontology manager that      * should be used for doing so, e.g. custom IRI mappers or import resolution policies. This custom      * ontology manager can be passed as the second argument.<br>      *<br>      * Any failure to obtain the ontology/ies, including parse errors and unresolved imports (if set to do      * so), will cause an {@link OWLOntologyCreationException} to be thrown.      *       * @param rootPhysicalIri      *            the physical IRI where the ontology is located.      * @param manager      *            the ontology manager to be used for resolving the IRI.      * @throws OWLOntologyCreationException      *             if no ontology could be obtained by resolving the root physical IRI.      */
specifier|public
name|RootOntologySource
parameter_list|(
name|IRI
name|rootPhysicalIri
parameter_list|,
name|OWLOntologyManager
name|manager
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|bindPhysicalOrigin
argument_list|(
name|Origin
operator|.
name|create
argument_list|(
name|rootPhysicalIri
argument_list|)
argument_list|)
expr_stmt|;
name|bindRootOntology
argument_list|(
name|manager
operator|.
name|loadOntology
argument_list|(
name|rootPhysicalIri
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This constructor can be used if an {@link OWLOntology} object was obtained prior to creating this input      * source. The {@link OWLOntology} passed in as an argument is set as the root ontology. No import check      * or resolution is performed.      *       * @param rootOntology      *            the ontology object that will be returned by {@link #getRootOntology()}.      */
specifier|public
name|RootOntologySource
parameter_list|(
name|OWLOntology
name|rootOntology
parameter_list|)
block|{
name|this
argument_list|(
name|rootOntology
argument_list|,
name|rootOntology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|rootOntology
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This constructor can be used if an {@link OWLOntology} object was obtained prior to creating this input      * source, but one needs to specify that the source for that ontology is at a different IRI than the one      * recorded by its ontology manager. The {@link OWLOntology} passed in as an argument is set as the root      * ontology. No import check or resolution is performed.      *       * @param rootOntology      *            the ontology object that will be returned by {@link #getRootOntology()}.      * @param physicalIriOverride      *            the new physical location of the ontology.      */
specifier|public
name|RootOntologySource
parameter_list|(
name|OWLOntology
name|rootOntology
parameter_list|,
name|IRI
name|physicalIriOverride
parameter_list|)
block|{
if|if
condition|(
name|rootOntology
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Root ontology cannot be null. "
operator|+
literal|"To submit a dummy ontology input source, please use class "
operator|+
name|BlankOntologySource
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" instead."
argument_list|)
throw|;
name|bindRootOntology
argument_list|(
name|rootOntology
argument_list|)
expr_stmt|;
comment|// Never bind logical IDs as physical IRIs, as they risk overwriting previous bindings.
name|bindPhysicalOrigin
argument_list|(
name|Origin
operator|.
name|create
argument_list|(
name|physicalIriOverride
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ROOT_ONT<"
operator|+
name|rootOntology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

