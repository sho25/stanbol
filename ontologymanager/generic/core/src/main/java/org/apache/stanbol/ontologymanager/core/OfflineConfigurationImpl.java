begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|core
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@link OfflineConfiguration}.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
block|{
name|OfflineConfiguration
operator|.
name|class
block|,
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|obsolete
operator|.
name|api
operator|.
name|OfflineConfiguration
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|OfflineConfigurationImpl
implements|implements
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|obsolete
operator|.
name|api
operator|.
name|OfflineConfiguration
block|{
specifier|public
specifier|static
specifier|final
name|String
name|_DEFAULT_NS_DEFAULT
init|=
literal|"http://localhost:8080/ontonet/"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|IRI
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|IRI
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OfflineConfiguration
operator|.
name|DEFAULT_NS
argument_list|,
name|value
operator|=
name|_DEFAULT_NS_DEFAULT
argument_list|)
specifier|private
name|String
name|ns
decl_stmt|;
comment|/**      * TODO how do you use array initializers in Property annotations without causing compile errors?      */
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OfflineConfiguration
operator|.
name|ONTOLOGY_PATHS
argument_list|,
name|value
operator|=
block|{
literal|"."
block|,
literal|"/ontologies"
block|}
argument_list|)
specifier|private
name|String
index|[]
name|ontologyDirs
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ONManagerConfigurationImpl instances do need to be      * configured! YOU NEED TO USE {@link #ONManagerConfigurationImpl(Dictionary)} or its overloads, to parse      * the configuration and then initialise the rule store if running outside an OSGI environment.      */
specifier|public
name|OfflineConfigurationImpl
parameter_list|()
block|{}
comment|/**      * To be invoked by non-OSGi environments.      *       * @param configuration      */
specifier|public
name|OfflineConfigurationImpl
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} activate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
comment|// Parse configuration.
name|ns
operator|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|OfflineConfiguration
operator|.
name|DEFAULT_NS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
name|ns
operator|.
name|isEmpty
argument_list|()
condition|)
name|ns
operator|=
name|_DEFAULT_NS_DEFAULT
expr_stmt|;
name|ontologyDirs
operator|=
operator|(
name|String
index|[]
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|OfflineConfiguration
operator|.
name|ONTOLOGY_PATHS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyDirs
operator|==
literal|null
condition|)
name|ontologyDirs
operator|=
operator|new
name|String
index|[]
block|{
literal|"."
block|,
literal|"/ontologies"
block|}
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|ontologyDirs
control|)
block|{
name|IRI
name|iri
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
try|try
block|{
name|iri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: Don't give up. It could still an absolute path.
block|}
block|}
else|else
try|try
block|{
name|iri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
try|try
block|{
name|iri
operator|=
name|IRI
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to obtain a path for {}. Skipping..."
argument_list|,
name|iri
argument_list|,
name|e2
argument_list|)
expr_stmt|;
name|iri
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iri
operator|!=
literal|null
condition|)
name|locations
operator|.
name|add
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
comment|// else location stays empty.
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|ontologyDirs
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"in {} deactivate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|OfflineConfiguration
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ns
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|OfflineConfiguration
operator|)
name|obj
operator|)
operator|.
name|getDefaultOntologyNetworkNamespace
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|locations
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|OfflineConfiguration
operator|)
name|obj
operator|)
operator|.
name|getOntologySourceLocations
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getDefaultOntologyNetworkNamespace
parameter_list|()
block|{
return|return
name|IRI
operator|.
name|create
argument_list|(
name|ns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|IRI
argument_list|>
name|getOntologySourceLocations
parameter_list|()
block|{
return|return
name|locations
return|;
block|}
block|}
end_class

end_unit

