begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|ontology
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|MockOsgiContext
operator|.
name|ontologyProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|MockOsgiContext
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Verify that it is always possible to obtain the correct ontologies given their IDs whenever available, or  * their expected public keys.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|TestOntologyReconciliation
block|{
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/*      * Anonymous ontologies loaded from a data stream must be stored with at least one non-null and      * non-anonymous public key.      */
annotation|@
name|Test
specifier|public
name|void
name|anonymousFromStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/ontologies/nameless_ontology.owl"
decl_stmt|;
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|in
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|onMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|o1
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// in = getClass().getResourceAsStream(location); // use if stream cannot be reset
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Anonymous ontology loaded with non-anonymous public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|OWLOntology
name|o2
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o2
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getAxioms
argument_list|()
argument_list|,
name|o2
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal OWLOntology objects
block|}
comment|/*      * Anonymous ontologies loaded from a URL must reconcile with a public key that matches the resource URL      * in its ontology IRI.      */
annotation|@
name|Test
specifier|public
name|void
name|anonymousFromURL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/ontologies/nameless_ontology.owl"
decl_stmt|;
name|URL
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyManager
name|onMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|o1
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
comment|// in = getClass().getResourceAsStream(location); // use if stream cannot be reset
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|in
argument_list|)
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Anonymous ontology loaded with non-anonymous public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|OWLOntology
name|o2
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o2
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getAxioms
argument_list|()
argument_list|,
name|o2
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal OWLOntology objects
block|}
comment|/*      * Named ontologies loaded from a data stream should have no aliases and directly reconcile with the      * ontology IRI.      */
annotation|@
name|Test
specifier|public
name|void
name|namedFromStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/ontologies/naming/named-2.owl"
decl_stmt|;
name|OWLOntologyID
name|expectedId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontologies/test/naming/named-2"
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|in
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|onMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|o1
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|o1
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// in = getClass().getResourceAsStream(location); // use if stream cannot be reset
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Named ontology loaded with public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- (matches actual ontology ID)."
argument_list|)
expr_stmt|;
name|OWLOntology
name|o1_1
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1_1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|o1_1
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal OWLOntology objects
comment|// Check that axioms match
name|log
operator|.
name|warn
argument_list|(
literal|"Plain OWL API seems to be failing to preserve owl:versionInfo. Will test non-annotation axioms only."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- TBox axiom check successful."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- ABox axiom check successful."
argument_list|)
expr_stmt|;
comment|// Now check there are no aliases.
name|assertSame
argument_list|(
literal|0
argument_list|,
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|expectedId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Named ontologies loaded from an URL must reconcile with both their logical ID and their resource URL      * (through aliasing).      */
annotation|@
name|Test
specifier|public
name|void
name|namedFromURL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/ontologies/naming/named-1.owl"
decl_stmt|;
name|OWLOntologyID
name|expectedId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontologies/test/naming/named-1"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyManager
name|onMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|o1
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|o1
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// in = getClass().getResourceAsStream(location); // use if stream cannot be reset
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|url
argument_list|)
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Named ontology loaded with public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- (matches actual ontology ID)."
argument_list|)
expr_stmt|;
name|OWLOntology
name|o1_1
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1_1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|o1_1
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal OWLOntology objects
comment|// Check that axioms match
name|log
operator|.
name|warn
argument_list|(
literal|"Plain OWL API seems to be failing to preserve owl:versionInfo. Will test non-annotation axioms only."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- TBox axiom check successful."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- ABox axiom check successful."
argument_list|)
expr_stmt|;
comment|// Now check the alias from the physical URL
name|OWLOntologyID
name|aliasId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|aliases
init|=
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|expectedId
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|1
argument_list|,
name|aliases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aliases
operator|.
name|contains
argument_list|(
name|aliasId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that it actually *is* an alias
name|OWLOntology
name|alias
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|aliasId
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|alias
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both ontologies come from the ontology provider and should have preserved ontology annotations.
comment|// Therefore ass axioms should match safely.
name|assertEquals
argument_list|(
name|o1_1
operator|.
name|getAxioms
argument_list|()
argument_list|,
name|alias
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Two versioned ontologies that share their ontology IRI are stored with separate public keys that manage      * their full ontology IDs.      */
annotation|@
name|Test
specifier|public
name|void
name|versioned
parameter_list|()
throws|throws
name|Exception
block|{
name|OWLOntologyManager
name|onMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
comment|// Load the first ontology
name|String
name|location
init|=
literal|"/ontologies/versiontest_v1.owl"
decl_stmt|;
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|in
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// Keep tack of the original in a separate ontology.
name|OWLOntology
name|o1
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|id1
init|=
name|o1
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// in = getClass().getResourceAsStream(location); // use if stream cannot be reset
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Named ontology loaded with public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id1
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- (matches actual ontology ID)."
argument_list|)
expr_stmt|;
comment|// The unversioned ID should return no match...
name|OWLOntologyID
name|unversioned
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|key
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ontologyProvider
operator|.
name|hasOntology
argument_list|(
name|unversioned
argument_list|)
argument_list|)
expr_stmt|;
comment|// ...but a query on the available versions should return only the public key.
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|versions
init|=
name|ontologyProvider
operator|.
name|listVersions
argument_list|(
name|key
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|versions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|1
argument_list|,
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versions
operator|.
name|contains
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now load the second version.
name|location
operator|=
literal|"/ontologies/versiontest_v2.owl"
expr_stmt|;
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|in
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// Keep tack of the original in a separate ontology.
name|OWLOntology
name|o2
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o2
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|id2
init|=
name|o2
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// in = getClass().getResourceAsStream(location); // use if stream cannot be reset
name|key
operator|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Named ontology loaded with public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id2
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- (matches actual ontology ID)."
argument_list|)
expr_stmt|;
comment|// The unversioned ID should still return no match...
name|assertFalse
argument_list|(
name|ontologyProvider
operator|.
name|hasOntology
argument_list|(
name|unversioned
argument_list|)
argument_list|)
expr_stmt|;
comment|// ...but a query on the available versions should return both public keys now.
name|versions
operator|=
name|ontologyProvider
operator|.
name|listVersions
argument_list|(
name|key
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|versions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|2
argument_list|,
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versions
operator|.
name|contains
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|versions
operator|.
name|contains
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that axioms match for version 1
name|log
operator|.
name|info
argument_list|(
literal|"Version 1:"
argument_list|)
expr_stmt|;
name|OWLOntology
name|o1_1
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|id1
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1_1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getOntologyID
argument_list|()
argument_list|,
name|o1_1
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal OWLOntology objects
name|log
operator|.
name|warn
argument_list|(
literal|"Plain OWL API seems to be failing to preserve owl:versionInfo. Will test non-annotation axioms only."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- TBox axiom check successful."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- ABox axiom check successful."
argument_list|)
expr_stmt|;
comment|// Check that axioms match for version 2 (therefore differ from each other)
name|log
operator|.
name|info
argument_list|(
literal|"Version 2:"
argument_list|)
expr_stmt|;
name|OWLOntology
name|o2_1
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|id2
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o2_1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o2
operator|.
name|getOntologyID
argument_list|()
argument_list|,
name|o2_1
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal OWLOntology objects
name|log
operator|.
name|warn
argument_list|(
literal|"Plain OWL API seems to be failing to preserve owl:versionInfo. Will test non-annotation axioms only."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o2
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o2_1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- TBox axiom check successful."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o2
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o2_1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- ABox axiom check successful."
argument_list|)
expr_stmt|;
comment|// There should be no aliases.
name|assertSame
argument_list|(
literal|0
argument_list|,
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|unversioned
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|0
argument_list|,
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|id1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|0
argument_list|,
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|id2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * If an ontology has no ontology IRI but does have a version IRI, it should still be possible to load it,      * but the version IRI must be erased.      */
annotation|@
name|Test
specifier|public
name|void
name|versionedOnlyFromStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/ontologies/naming/versionedonly.owl"
decl_stmt|;
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|in
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|onMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|o1
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// Ensure that the OWL API erases the version IRI.
name|assertTrue
argument_list|(
name|o1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o1
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getVersionIRI
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// in = getClass().getResourceAsStream(location); // use if stream cannot be reset
comment|// The public key must be non-anonymous nonetheless.
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|key
operator|.
name|getVersionIRI
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Wrongly versioned ontology loaded with public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|OWLOntology
name|o1_1
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o1_1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o1_1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o1_1
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getVersionIRI
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal two OWLOntology objects, especially if anonymous.
comment|// Check that they match axiom-wise.
name|log
operator|.
name|warn
argument_list|(
literal|"Plain OWL API seems to be failing to preserve owl:versionInfo. Will test non-annotation axioms only."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- TBox axiom check successful."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- ABox axiom check successful."
argument_list|)
expr_stmt|;
comment|// No aliases should have been created.
name|assertSame
argument_list|(
literal|0
argument_list|,
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|key
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * If an ontology has no ontology IRI but does have a version IRI, it should still be possible to load it,      * but the version IRI must be erased. Plus, the public key should be created after the resource URL.      */
annotation|@
name|Test
specifier|public
name|void
name|versionedOnlyFromURL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/ontologies/naming/versionedonly.owl"
decl_stmt|;
name|IRI
name|url
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|expected
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|OWLOntologyManager
name|onMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|o1
init|=
name|onMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// Ensure that the OWL API erases the version IRI.
name|assertTrue
argument_list|(
name|o1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o1
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getVersionIRI
argument_list|()
argument_list|)
expr_stmt|;
comment|// The public key must be non-anonymous nonetheless.
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|url
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Wrongly versioned ontology loaded with public key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- (matches resource URL)."
argument_list|)
expr_stmt|;
name|OWLOntology
name|o1_1
init|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o1_1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o1_1
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o1_1
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getVersionIRI
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot equal two OWLOntology objects, especially if anonymous.
comment|// Check that they match axiom-wise.
name|log
operator|.
name|warn
argument_list|(
literal|"Plain OWL API seems to be failing to preserve owl:versionInfo. Will test non-annotation axioms only."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getTBoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- TBox axiom check successful."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|,
name|o1_1
operator|.
name|getABoxAxioms
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" -- ABox axiom check successful."
argument_list|)
expr_stmt|;
comment|// No aliases should have been created.
name|assertSame
argument_list|(
literal|0
argument_list|,
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|key
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Ensures ontology IDs with only the version IRI are illegal.      */
annotation|@
name|Test
specifier|public
name|void
name|versionIriOnlyIsIllegal
parameter_list|()
block|{
try|try
block|{
operator|new
name|OWLOntologyID
argument_list|(
literal|null
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontologies/version/bad/1"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"An anonymous ontology ID with a version IRI was unexpectedly accepted!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

