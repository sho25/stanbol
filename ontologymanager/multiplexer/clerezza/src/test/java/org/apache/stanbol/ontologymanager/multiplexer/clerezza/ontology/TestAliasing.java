begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|ontology
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|MockOsgiContext
operator|.
name|ontologyProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|MockOsgiContext
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyProvider
operator|.
name|Status
operator|.
name|MATCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyProvider
operator|.
name|Status
operator|.
name|UNCHARTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This test suite checks the coherence of registered ontology entries and their relationship with stored  * graphs, if any. It also verifies that entries can be created at one time but will only become accessible  * when filled.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|TestAliasing
block|{
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|prefix
init|=
literal|"http://stanbol.apache.org/ontologies/test/aliasing"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|canCreateUnchartedOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|OWLOntologyID
name|uncharted
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|prefix
argument_list|)
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"#canCreateUnchartedOnce()"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|uncharted_copy
init|=
name|ontologyProvider
operator|.
name|createBlankOntologyEntry
argument_list|(
name|uncharted
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created uncharted ontology entry."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... key: {}"
argument_list|,
name|uncharted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uncharted
argument_list|,
name|uncharted_copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UNCHARTED
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|uncharted
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|entries
init|=
name|ontologyProvider
operator|.
name|listAllRegisteredEntries
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} entries registered."
argument_list|,
name|entries
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Re-creating uncharted ontology entry..."
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|recreated
init|=
name|ontologyProvider
operator|.
name|createBlankOntologyEntry
argument_list|(
name|uncharted
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" ... Created same entry twice. This should not happen."
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" ... key: {}"
argument_list|,
name|recreated
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created same entry twice. This should not happen."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... Creation failed. This is expected."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UNCHARTED
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|uncharted
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|newsize
init|=
name|ontologyProvider
operator|.
name|listAllRegisteredEntries
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|newsize
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} entries registered."
argument_list|,
name|newsize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ontologyProvider
operator|.
name|listOrphans
argument_list|()
operator|.
name|contains
argument_list|(
name|uncharted
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ontologyProvider
operator|.
name|listPrimaryKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|uncharted
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|canFillDeferred
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating uncharted ontology entry."
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|key
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|prefix
argument_list|)
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"#canFillDeferred()"
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... key: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|key2
init|=
name|ontologyProvider
operator|.
name|createBlankOntologyEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|key2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UNCHARTED
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|location
init|=
literal|"/ontologies/test1.owl"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Filling from data stream."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... source: {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... target: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|key2
operator|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|,
name|Origin
operator|.
name|create
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|key2
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... DONE. Primary keys match."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MATCH
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cannotReplaceExistingDataStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a new full entry.
name|String
name|location
init|=
literal|"/ontologies/test1.owl"
decl_stmt|;
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created and filled entry {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MATCH
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ontologyProvider
operator|.
name|listAllRegisteredEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to replace the data stream of a full entry (should fail).
name|location
operator|=
literal|"/ontologies/mockfoaf.rdf"
expr_stmt|;
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
try|try
block|{
name|OWLOntologyID
name|wrongKey
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|,
name|Origin
operator|.
name|create
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Replaced existing data stream. This should not happen."
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" ... key: "
argument_list|,
name|wrongKey
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Replaced existing data stream without warning."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Caught exception of type {}"
argument_list|,
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MATCH
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ontologyProvider
operator|.
name|listAllRegisteredEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ontologyProvider
operator|.
name|listPrimaryKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create a new uncharted entry and fill its data stream with the failed one.
name|OWLOntologyID
name|uncharted
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|prefix
argument_list|)
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"#cannotReplaceExistingDataStream()"
argument_list|)
argument_list|)
decl_stmt|;
name|ontologyProvider
operator|.
name|createBlankOntologyEntry
argument_list|(
name|uncharted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UNCHARTED
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|uncharted
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|,
name|Origin
operator|.
name|create
argument_list|(
name|uncharted
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MATCH
argument_list|,
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|uncharted
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ontologyProvider
operator|.
name|listPrimaryKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Nothing needs to be preserved across tests.      */
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

