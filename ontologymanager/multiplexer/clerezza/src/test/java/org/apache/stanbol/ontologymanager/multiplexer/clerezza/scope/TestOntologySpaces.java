begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|scope
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|MockOsgiContext
operator|.
name|onManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|MockOsgiContext
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|OWLOntologyManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|MissingOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|OntologySpace
operator|.
name|SpaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|owlapi
operator|.
name|BlankOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|owlapi
operator|.
name|ParentPathInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|owlapi
operator|.
name|RootOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestOntologySpaces
block|{
specifier|public
specifier|static
name|IRI
name|baseIri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|Constants
operator|.
name|PEANUTS_MAIN_BASE
argument_list|)
decl_stmt|,
name|baseIri2
init|=
name|IRI
operator|.
name|create
argument_list|(
name|Constants
operator|.
name|PEANUTS_MINOR_BASE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|OntologySpaceFactory
name|factory
decl_stmt|;
specifier|private
specifier|static
name|OntologyInputSource
argument_list|<
name|OWLOntology
argument_list|>
name|inMemorySrc
decl_stmt|,
name|minorSrc
decl_stmt|,
name|dropSrc
decl_stmt|,
name|nonexSrc
decl_stmt|;
specifier|private
specifier|static
name|OWLAxiom
name|linusIsHuman
init|=
literal|null
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|OWLOntology
name|ont
init|=
literal|null
decl_stmt|,
name|ont2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|OntologyInputSource
argument_list|<
name|OWLOntology
argument_list|>
name|getLocalSource
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|OWLOntologyManager
name|mgr
parameter_list|)
throws|throws
name|OWLOntologyCreationException
throws|,
name|URISyntaxException
block|{
name|URL
name|url
init|=
name|TestOntologySpaces
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|resourcePath
argument_list|)
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ParentPathInputSource
argument_list|(
name|f
argument_list|,
name|mgr
operator|!=
literal|null
condition|?
name|mgr
else|:
name|OWLOntologyManagerFactory
operator|.
name|createOWLOntologyManager
argument_list|(
name|onManager
operator|.
name|getOfflineConfiguration
argument_list|()
operator|.
name|getOntologySourceLocations
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|IRI
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
name|onManager
operator|.
name|getOntologySpaceFactory
argument_list|()
expr_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
name|fail
argument_list|(
literal|"Could not instantiate ontology space factory"
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLOntologyManagerFactory
operator|.
name|createOWLOntologyManager
argument_list|(
name|onManager
operator|.
name|getOfflineConfiguration
argument_list|()
operator|.
name|getOntologySourceLocations
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|IRI
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|ont
operator|=
name|mgr
operator|.
name|createOntology
argument_list|(
name|baseIri
argument_list|)
expr_stmt|;
name|inMemorySrc
operator|=
operator|new
name|RootOntologySource
argument_list|(
name|ont
argument_list|)
expr_stmt|;
comment|// Let's state that Linus is a human being
name|OWLClass
name|cHuman
init|=
name|df
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|baseIri
operator|+
literal|"/"
operator|+
name|Constants
operator|.
name|humanBeing
argument_list|)
argument_list|)
decl_stmt|;
name|OWLIndividual
name|iLinus
init|=
name|df
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|baseIri
operator|+
literal|"/"
operator|+
name|Constants
operator|.
name|linus
argument_list|)
argument_list|)
decl_stmt|;
name|linusIsHuman
operator|=
name|df
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|cHuman
argument_list|,
name|iLinus
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|ont
argument_list|,
name|linusIsHuman
argument_list|)
argument_list|)
expr_stmt|;
name|ont2
operator|=
name|mgr
operator|.
name|createOntology
argument_list|(
name|baseIri2
argument_list|)
expr_stmt|;
name|minorSrc
operator|=
operator|new
name|RootOntologySource
argument_list|(
name|ont2
argument_list|)
expr_stmt|;
name|dropSrc
operator|=
name|getLocalSource
argument_list|(
literal|"/ontologies/droppedcharacters.owl"
argument_list|,
name|mgr
argument_list|)
expr_stmt|;
name|nonexSrc
operator|=
name|getLocalSource
argument_list|(
literal|"/ontologies/nonexistentcharacters.owl"
argument_list|,
name|mgr
argument_list|)
expr_stmt|;
name|minorSrc
operator|=
operator|new
name|RootOntologySource
argument_list|(
name|ont2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddOntology
parameter_list|()
throws|throws
name|Exception
block|{
name|OntologySpace
name|space
init|=
literal|null
decl_stmt|;
name|IRI
name|logicalId
init|=
name|nonexSrc
operator|.
name|getRootOntology
argument_list|()
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|;
name|space
operator|=
name|factory
operator|.
name|createCustomOntologySpace
argument_list|(
literal|"testAddOntology"
argument_list|,
name|dropSrc
argument_list|)
expr_stmt|;
name|space
operator|.
name|addOntology
argument_list|(
name|minorSrc
argument_list|)
expr_stmt|;
name|space
operator|.
name|addOntology
argument_list|(
name|nonexSrc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|logicalId
argument_list|)
argument_list|)
expr_stmt|;
name|logicalId
operator|=
name|dropSrc
operator|.
name|getRootOntology
argument_list|()
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|logicalId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCoreLock
parameter_list|()
throws|throws
name|Exception
block|{
name|OntologySpace
name|space
init|=
name|factory
operator|.
name|createCoreOntologySpace
argument_list|(
literal|"testCoreLock"
argument_list|,
name|inMemorySrc
argument_list|)
decl_stmt|;
name|space
operator|.
name|setUp
argument_list|()
expr_stmt|;
try|try
block|{
name|space
operator|.
name|addOntology
argument_list|(
name|minorSrc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modification was permitted on locked ontology space."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
name|assertSame
argument_list|(
name|space
argument_list|,
name|e
operator|.
name|getOntologyCollector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|OntologySpace
name|space
init|=
name|factory
operator|.
name|createCustomOntologySpace
argument_list|(
literal|"testCreateSpace"
argument_list|,
name|dropSrc
argument_list|)
decl_stmt|;
name|IRI
name|logicalId
init|=
name|dropSrc
operator|.
name|getRootOntology
argument_list|()
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|logicalId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomLock
parameter_list|()
throws|throws
name|Exception
block|{
name|OntologySpace
name|space
init|=
name|factory
operator|.
name|createCustomOntologySpace
argument_list|(
literal|"testCustomLock"
argument_list|,
name|inMemorySrc
argument_list|)
decl_stmt|;
name|space
operator|.
name|setUp
argument_list|()
expr_stmt|;
try|try
block|{
name|space
operator|.
name|addOntology
argument_list|(
name|minorSrc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modification was permitted on locked ontology space."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
name|assertSame
argument_list|(
name|space
argument_list|,
name|e
operator|.
name|getOntologyCollector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks whether attempting to create ontology spaces with invalid identifiers or namespaces results in      * the appropriate exceptions being thrown.      *       * @throws Exception      *             if an unexpected error occurs.      */
annotation|@
name|Test
specifier|public
name|void
name|testIdentifiers
parameter_list|()
throws|throws
name|Exception
block|{
name|OntologySpace
name|shouldBeNull
init|=
literal|null
decl_stmt|,
name|shouldBeNotNull
init|=
literal|null
decl_stmt|;
comment|/* First test space identifiers. */
comment|// Null identifier (invalid).
try|try
block|{
name|shouldBeNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|null
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|,
operator|new
name|BlankOntologySource
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException not thrown despite null scope identifier."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|shouldBeNull
argument_list|)
expr_stmt|;
comment|// More than one slash in identifier (invalid).
try|try
block|{
name|shouldBeNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|"Sc0/p3"
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|,
operator|new
name|BlankOntologySource
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException not thrown despite null scope identifier."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|shouldBeNull
argument_list|)
expr_stmt|;
comment|/* Now test namespaces. */
comment|// Null namespace (invalid).
name|factory
operator|.
name|setDefaultNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|shouldBeNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|"Sc0p3"
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|,
operator|new
name|BlankOntologySource
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException not thrown despite null OntoNet namespace."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|shouldBeNull
argument_list|)
expr_stmt|;
comment|// Namespace with query (invalid).
name|factory
operator|.
name|setDefaultNamespace
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontology/?query=true"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|shouldBeNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|"Sc0p3"
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|,
operator|new
name|BlankOntologySource
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException not thrown despite query in OntoNet namespace."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|shouldBeNull
argument_list|)
expr_stmt|;
comment|// Namespace with fragment (invalid).
name|factory
operator|.
name|setDefaultNamespace
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontology#fragment"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|shouldBeNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|"Sc0p3"
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|,
operator|new
name|BlankOntologySource
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException not thrown despite fragment in OntoNet namespace."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|shouldBeNull
argument_list|)
expr_stmt|;
comment|// Namespace ending with hash (invalid).
name|factory
operator|.
name|setDefaultNamespace
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontology#"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|shouldBeNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|"Sc0p3"
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException not thrown despite fragment in OntoNet namespace."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|shouldBeNull
argument_list|)
expr_stmt|;
comment|// Namespace ending with neither (valid, should automatically add slash).
name|factory
operator|.
name|setDefaultNamespace
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontology"
argument_list|)
argument_list|)
expr_stmt|;
name|shouldBeNotNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|"Sc0p3"
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|shouldBeNotNull
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shouldBeNotNull
operator|.
name|getDefaultNamespace
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|shouldBeNotNull
operator|=
literal|null
expr_stmt|;
comment|// Namespace ending with slash (valid).
name|factory
operator|.
name|setDefaultNamespace
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontology/"
argument_list|)
argument_list|)
expr_stmt|;
name|shouldBeNotNull
operator|=
name|factory
operator|.
name|createOntologySpace
argument_list|(
literal|"Sc0p3"
argument_list|,
name|SpaceType
operator|.
name|CORE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|shouldBeNotNull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveCustomOntology
parameter_list|()
throws|throws
name|Exception
block|{
name|OntologySpace
name|space
init|=
literal|null
decl_stmt|;
name|space
operator|=
name|factory
operator|.
name|createCustomOntologySpace
argument_list|(
literal|"testRemoveCustomOntology"
argument_list|,
name|dropSrc
argument_list|)
expr_stmt|;
name|IRI
name|dropId
init|=
name|dropSrc
operator|.
name|getRootOntology
argument_list|()
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|;
name|IRI
name|nonexId
init|=
name|nonexSrc
operator|.
name|getRootOntology
argument_list|()
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|;
name|space
operator|.
name|addOntology
argument_list|(
name|inMemorySrc
argument_list|)
expr_stmt|;
name|space
operator|.
name|addOntology
argument_list|(
name|nonexSrc
argument_list|)
expr_stmt|;
comment|// The other remote ontologies may change base IRI...
name|assertTrue
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|ont
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|dropId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|nonexId
argument_list|)
argument_list|)
expr_stmt|;
name|IRI
name|bogus
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.example.org/ontology/bogus"
argument_list|)
decl_stmt|;
try|try
block|{
name|space
operator|.
name|removeOntology
argument_list|(
name|bogus
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing nonexisting ontology succeeded without an exception. This should not happen."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingOntologyException
name|mex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Expected exception caught when removing missing ontology {}"
argument_list|,
name|bogus
argument_list|)
expr_stmt|;
block|}
name|space
operator|.
name|removeOntology
argument_list|(
name|dropId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|dropId
argument_list|)
argument_list|)
expr_stmt|;
name|space
operator|.
name|removeOntology
argument_list|(
name|nonexId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|space
operator|.
name|hasOntology
argument_list|(
name|nonexId
argument_list|)
argument_list|)
expr_stmt|;
comment|// OntologyUtils.printOntology(space.getTopOntology(), System.err);
block|}
block|}
end_class

end_unit

