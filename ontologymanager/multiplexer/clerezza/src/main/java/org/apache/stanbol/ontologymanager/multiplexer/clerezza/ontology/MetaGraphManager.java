begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|ontology
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|ENTRY_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|HAS_ONTOLOGY_IRI_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|HAS_VERSION_IRI_URIREF
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * Note that this class is not public.  *   * @author alexdma  *   */
end_comment

begin_class
class|class
name|MetaGraphManager
block|{
specifier|private
name|MGraph
name|graph
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
specifier|public
name|MetaGraphManager
parameter_list|(
name|TcManager
name|tcManager
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|this
operator|.
name|tcManager
operator|=
name|tcManager
expr_stmt|;
name|this
operator|.
name|graph
operator|=
name|graph
expr_stmt|;
block|}
specifier|protected
name|UriRef
name|buildResource
parameter_list|(
specifier|final
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
if|if
condition|(
name|publicKey
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot build a UriRef resource on a null public key!"
argument_list|)
throw|;
comment|// The UriRef is of the form ontologyIRI[:::versionIRI] (TODO use something less conventional?)
comment|// XXX should versionIRI also include the version IRI set by owners? Currently not
comment|// Remember not to sanitize logical identifiers.
name|IRI
name|ontologyIri
init|=
name|publicKey
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|,
name|versionIri
init|=
name|publicKey
operator|.
name|getVersionIRI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ontologyIri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot build a UriRef resource on an anonymous public key!"
argument_list|)
throw|;
name|log
operator|.
name|debug
argument_list|(
literal|"Searching for a meta graph entry for public key:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" -- {}"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
name|UriRef
name|match
init|=
literal|null
decl_stmt|;
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|TypedLiteral
name|oiri
init|=
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TypedLiteral
name|viri
init|=
name|versionIri
operator|==
literal|null
condition|?
literal|null
else|:
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|versionIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|HAS_ONTOLOGY_IRI_URIREF
argument_list|,
name|oiri
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|subj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" -- Ontology IRI match found. Scanning"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" -- Resource : {}"
argument_list|,
name|subj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|subj
operator|instanceof
name|UriRef
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- (uncomparable: skipping...)"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|viri
operator|!=
literal|null
condition|)
block|{
comment|// Must find matching versionIRI
if|if
condition|(
name|graph
operator|.
name|contains
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|(
name|UriRef
operator|)
name|subj
argument_list|,
name|HAS_VERSION_IRI_URIREF
argument_list|,
name|viri
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Version IRI match!"
argument_list|)
expr_stmt|;
name|match
operator|=
operator|(
name|UriRef
operator|)
name|subj
expr_stmt|;
break|break;
comment|// Found
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Expected version IRI match not found."
argument_list|)
expr_stmt|;
continue|continue;
comment|// There could be another with the right versionIRI.
block|}
block|}
else|else
block|{
comment|// Must find unversioned resource
if|if
condition|(
name|graph
operator|.
name|filter
argument_list|(
operator|(
name|UriRef
operator|)
name|subj
argument_list|,
name|HAS_VERSION_IRI_URIREF
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Unexpected version IRI found. Skipping."
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Unversioned match!"
argument_list|)
expr_stmt|;
name|match
operator|=
operator|(
name|UriRef
operator|)
name|subj
expr_stmt|;
break|break;
comment|// Found
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Matching UriRef in graph : {}"
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
operator|==
literal|null
condition|)
return|return
operator|new
name|UriRef
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|publicKey
argument_list|)
argument_list|)
return|;
else|else
return|return
name|match
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
name|UriRef
name|publicKeyUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|publicKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|graph
operator|.
name|filter
argument_list|(
name|publicKeyUriRef
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|ENTRY_URIREF
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|graph
operator|.
name|filter
argument_list|(
name|publicKeyUriRef
argument_list|,
name|OWL
operator|.
name|sameAs
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|updateAddAlias
parameter_list|(
name|OWLOntologyID
name|subject
parameter_list|,
name|OWLOntologyID
name|object
parameter_list|)
block|{
comment|// For now add both owl:sameAs statements
name|UriRef
name|suben
init|=
name|buildResource
argument_list|(
name|subject
argument_list|)
decl_stmt|,
name|oben
init|=
name|buildResource
argument_list|(
name|object
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|graph
init|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|suben
argument_list|,
name|OWL
operator|.
name|sameAs
argument_list|,
name|oben
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|oben
argument_list|,
name|OWL
operator|.
name|sameAs
argument_list|,
name|suben
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// XXX add the Entry typing later on, but if so give up on using owl:sameAs.
block|}
specifier|public
name|void
name|updateCreateEntry
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
if|if
condition|(
name|publicKey
operator|==
literal|null
operator|||
name|publicKey
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An anonymous ontology cannot be mapped. A non-anonymous ontology ID must be forged in these cases."
argument_list|)
throw|;
name|Triple
name|tType
decl_stmt|,
name|tHasOiri
init|=
literal|null
decl_stmt|,
name|tHasViri
init|=
literal|null
decl_stmt|;
name|IRI
name|ontologyIRI
init|=
name|publicKey
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|,
name|versionIri
init|=
name|publicKey
operator|.
name|getVersionIRI
argument_list|()
decl_stmt|;
name|UriRef
name|entry
init|=
name|buildResource
argument_list|(
name|publicKey
argument_list|)
decl_stmt|;
name|tType
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|ENTRY_URIREF
argument_list|)
expr_stmt|;
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|tHasOiri
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|HAS_ONTOLOGY_IRI_URIREF
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyIRI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionIri
operator|!=
literal|null
condition|)
name|tHasViri
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|HAS_VERSION_IRI_URIREF
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|versionIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|graph
init|)
block|{
name|graph
operator|.
name|add
argument_list|(
name|tType
argument_list|)
expr_stmt|;
if|if
condition|(
name|tHasViri
operator|!=
literal|null
condition|)
name|graph
operator|.
name|add
argument_list|(
name|tHasViri
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|tHasOiri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

