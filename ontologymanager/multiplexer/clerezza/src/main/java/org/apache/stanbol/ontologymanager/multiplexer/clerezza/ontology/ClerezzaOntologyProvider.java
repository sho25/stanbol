begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|ontology
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|APPENDED_TO_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|ENTRY_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|HAS_APPENDED_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|HAS_ONTOLOGY_IRI_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|HAS_SPACE_CORE_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|HAS_SPACE_CUSTOM_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|HAS_VERSION_IRI_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|IS_MANAGED_BY_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|IS_SPACE_CORE_OF_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|IS_SPACE_CUSTOM_OF_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|MANAGES_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|RETRIEVED_FROM_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|SCOPE_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|SESSION_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|SIZE_IN_TRIPLES_URIREF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|Vocabulary
operator|.
name|_NS_STANBOL_INTERNAL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|EntityAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|OWLOntologyManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|PhonyIRIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|collector
operator|.
name|MGraphMultiplexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OntologyNetworkConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|ImportManagementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|Multiplexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyHandleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OrphanOntologyKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyIRIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Clerezza-based ontology provider implementation. Whether it is persistent or in-memory depends on the  * {@link TcProvider} used.<br>  *<br>  * NOTE: in this implementation, the<code>preferredFormat</code> argument of the  * {@link #loadInStore(InputStream, String, boolean)} and {@link #loadInStore(IRI, String, boolean)} methods  * is not the only one to be tried when parsing an ontology, but merely the first one: should it fail, all  * other supported formats will be tried as a fallback.  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
block|{
name|OntologyProvider
operator|.
name|class
block|,
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|ClerezzaOntologyProvider
implements|implements
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
block|{
comment|/**      * Internally, the Clerezza ontology provider uses a reserved graph to store the associations between      * ontology IDs/physical IRIs and graph names. This graph is wrapped into an {@link OntologyToTcMapper}      * object.      *       * @author alexdma      *       */
specifier|private
class|class
name|OntologyToTcMapper
block|{
specifier|private
name|MGraph
name|graph
decl_stmt|;
name|OntologyToTcMapper
parameter_list|()
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TcProvider cannot be null"
argument_list|)
throw|;
name|UriRef
name|graphId
init|=
operator|new
name|UriRef
argument_list|(
name|metaGraphId
argument_list|)
decl_stmt|;
try|try
block|{
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
name|graph
operator|=
name|store
operator|.
name|getMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|addMapping
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
if|if
condition|(
name|ontologyReference
operator|==
literal|null
operator|||
name|ontologyReference
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An anonymous ontology cannot be mapped. A non-anonymous ontology ID must be forged in these cases."
argument_list|)
throw|;
name|Triple
name|tType
decl_stmt|,
name|tMaps
decl_stmt|,
name|tHasOiri
init|=
literal|null
decl_stmt|,
name|tHasViri
init|=
literal|null
decl_stmt|;
name|IRI
name|ontologyIRI
init|=
name|ontologyReference
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|,
name|versionIri
init|=
name|ontologyReference
operator|.
name|getVersionIRI
argument_list|()
decl_stmt|;
name|UriRef
name|entry
init|=
name|buildResource
argument_list|(
name|ontologyReference
argument_list|)
decl_stmt|;
name|tType
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|ENTRY_URIREF
argument_list|)
expr_stmt|;
name|tMaps
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|MAPS_TO_GRAPH_URIREF
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|tHasOiri
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|HAS_ONTOLOGY_IRI_URIREF
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyIRI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionIri
operator|!=
literal|null
condition|)
name|tHasViri
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|HAS_VERSION_IRI_URIREF
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|versionIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|graph
init|)
block|{
name|graph
operator|.
name|add
argument_list|(
name|tType
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|tMaps
argument_list|)
expr_stmt|;
if|if
condition|(
name|tHasViri
operator|!=
literal|null
condition|)
name|graph
operator|.
name|add
argument_list|(
name|tHasViri
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|tHasOiri
argument_list|)
expr_stmt|;
block|}
block|}
name|OWLOntologyID
name|buildPublicKey
parameter_list|(
specifier|final
name|UriRef
name|resource
parameter_list|)
block|{
comment|// TODO desanitize?
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|IRI
name|oiri
init|=
literal|null
decl_stmt|,
name|viri
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|resource
argument_list|,
name|HAS_ONTOLOGY_IRI_URIREF
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|s
init|=
literal|null
decl_stmt|;
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|s
operator|=
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|TypedLiteral
condition|)
name|s
operator|=
name|lf
operator|.
name|createObject
argument_list|(
name|UriRef
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|obj
argument_list|)
expr_stmt|;
name|oiri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|s
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Anonymous ontology? Decode the resource itself (which is not null)
return|return
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|resource
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
return|;
block|}
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
name|resource
argument_list|,
name|HAS_VERSION_IRI_URIREF
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|s
init|=
literal|null
decl_stmt|;
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|s
operator|=
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|TypedLiteral
condition|)
name|s
operator|=
name|lf
operator|.
name|createObject
argument_list|(
name|UriRef
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|obj
argument_list|)
expr_stmt|;
name|viri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|s
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|viri
operator|==
literal|null
condition|)
return|return
operator|new
name|OWLOntologyID
argument_list|(
name|oiri
argument_list|)
return|;
else|else
return|return
operator|new
name|OWLOntologyID
argument_list|(
name|oiri
argument_list|,
name|viri
argument_list|)
return|;
block|}
comment|/**          * Creates an {@link UriRef} out of an {@link OWLOntologyID}, so it can be used as a storage key for          * the graph.          *           * @param ontologyReference          * @return          */
name|UriRef
name|buildResource
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
comment|/*              * The UriRef is of the form ontologyIRI[:::versionIRI] (TODO use something less conventional e.g.              * the string form of OWLOntologyID objects?)              */
name|TripleCollection
name|meta
init|=
name|getMetaGraph
argument_list|(
name|TripleCollection
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|publicKey
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot build a UriRef resource on a null public key!"
argument_list|)
throw|;
comment|// XXX should versionIRI also include the version IRI set by owners? Currently not
comment|// Remember not to sanitize logical identifiers.
name|IRI
name|ontologyIri
init|=
name|publicKey
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|,
name|versionIri
init|=
name|publicKey
operator|.
name|getVersionIRI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ontologyIri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot build a UriRef resource on an anonymous public key!"
argument_list|)
throw|;
name|log
operator|.
name|debug
argument_list|(
literal|"Searching for a meta graph entry for public key:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" -- {}"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
name|UriRef
name|match
init|=
literal|null
decl_stmt|;
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|TypedLiteral
name|oiri
init|=
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TypedLiteral
name|viri
init|=
name|versionIri
operator|==
literal|null
condition|?
literal|null
else|:
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|versionIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|HAS_ONTOLOGY_IRI_URIREF
argument_list|,
name|oiri
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|subj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" -- Ontology IRI match found. Scanning"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" -- Resource : {}"
argument_list|,
name|subj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|subj
operator|instanceof
name|UriRef
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- (uncomparable: skipping...)"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|viri
operator|!=
literal|null
condition|)
block|{
comment|// Must find matching versionIRI
if|if
condition|(
name|meta
operator|.
name|contains
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|(
name|UriRef
operator|)
name|subj
argument_list|,
name|HAS_VERSION_IRI_URIREF
argument_list|,
name|viri
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Version IRI match!"
argument_list|)
expr_stmt|;
name|match
operator|=
operator|(
name|UriRef
operator|)
name|subj
expr_stmt|;
break|break;
comment|// Found
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Expected version IRI match not found."
argument_list|)
expr_stmt|;
continue|continue;
comment|// There could be another with the right versionIRI.
block|}
block|}
else|else
block|{
comment|// Must find unversioned resource
if|if
condition|(
name|meta
operator|.
name|filter
argument_list|(
operator|(
name|UriRef
operator|)
name|subj
argument_list|,
name|HAS_VERSION_IRI_URIREF
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Unexpected version IRI found. Skipping."
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ---- Unversioned match!"
argument_list|)
expr_stmt|;
name|match
operator|=
operator|(
name|UriRef
operator|)
name|subj
expr_stmt|;
break|break;
comment|// Found
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Matching UriRef in graph : {}"
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|publicKey
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|match
return|;
block|}
block|}
name|UriRef
name|getMapping
parameter_list|(
name|OWLOntologyID
name|reference
parameter_list|)
block|{
name|Set
argument_list|<
name|UriRef
argument_list|>
name|aliases
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|aliases
operator|.
name|add
argument_list|(
name|buildResource
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|listAliases
argument_list|(
name|reference
argument_list|)
control|)
name|aliases
operator|.
name|add
argument_list|(
name|buildResource
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|UriRef
name|alias
range|:
name|aliases
control|)
block|{
comment|// Logical mappings first.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|alias
argument_list|,
name|MAPS_TO_GRAPH_URIREF
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
return|return
operator|(
name|UriRef
operator|)
name|obj
return|;
block|}
name|Literal
name|litloc
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|alias
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Logical mappings failed, try physical mappings.
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RETRIEVED_FROM_URIREF
argument_list|,
name|litloc
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
return|return
operator|(
name|UriRef
operator|)
name|obj
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|OWLOntologyID
name|getReverseMapping
parameter_list|(
name|UriRef
name|graphName
parameter_list|)
block|{
comment|// Logical mappings first.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|MAPS_TO_GRAPH_URIREF
argument_list|,
name|graphName
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
return|return
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|obj
argument_list|)
return|;
block|}
name|Literal
name|litloc
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|graphName
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Logical mappings failed, try physical mappings.
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RETRIEVED_FROM_URIREF
argument_list|,
name|litloc
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|subj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subj
operator|instanceof
name|UriRef
condition|)
return|return
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|subj
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|getVersions
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
if|if
condition|(
name|ontologyIri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot get versions for a null IRI."
argument_list|)
throw|;
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|TypedLiteral
name|iri
init|=
name|lf
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Exclude aliases.
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|HAS_ONTOLOGY_IRI_URIREF
argument_list|,
name|iri
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|sub
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|UriRef
condition|)
name|keys
operator|.
name|add
argument_list|(
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|sub
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Also check for physical locations
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RETRIEVED_FROM_URIREF
argument_list|,
name|iri
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|sub
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|UriRef
condition|)
name|keys
operator|.
name|add
argument_list|(
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|sub
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
name|void
name|mapLocator
parameter_list|(
name|IRI
name|locator
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
if|if
condition|(
name|graphName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A null graph name is not allowed."
argument_list|)
throw|;
comment|// Null locator is a legal argument, will remove all locator mappings from the supplied graph
name|Set
argument_list|<
name|Triple
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|nodes
init|=
name|graph
operator|.
name|filter
argument_list|(
name|graphName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|nodes
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|nodes
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// isOntology |= RDF.type.equals(t.getPredicate())&& OWL.Ontology.equals(t.getObject());
if|if
condition|(
name|RETRIEVED_FROM_URIREF
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getPredicate
argument_list|()
argument_list|)
condition|)
name|remove
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|removeAll
argument_list|(
name|remove
argument_list|)
expr_stmt|;
if|if
condition|(
name|locator
operator|!=
literal|null
condition|)
block|{
name|Literal
name|litloc
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|locator
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|graphName
argument_list|,
name|RETRIEVED_FROM_URIREF
argument_list|,
name|litloc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|registerOntologyDeletion
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
name|Set
argument_list|<
name|Triple
argument_list|>
name|toRemove
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|aliases
init|=
name|listAliases
argument_list|(
name|publicKey
argument_list|)
decl_stmt|;
name|aliases
operator|.
name|add
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|aliases
control|)
block|{
name|UriRef
name|ontologyId
init|=
name|buildResource
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// Also removes aliases and dependencies.
comment|// XXX Too extreme?
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|ontologyId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|toRemove
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ontologyId
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|toRemove
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|removeAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
name|void
name|removeMapping
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|buildResource
argument_list|(
name|ontologyReference
argument_list|)
argument_list|,
name|MAPS_TO_GRAPH_URIREF
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// I expect a concurrent modification exception here, but we can deal with it later.
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|graph
operator|.
name|remove
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|setMapping
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
name|removeMapping
argument_list|(
name|ontologyReference
argument_list|)
expr_stmt|;
name|addMapping
argument_list|(
name|ontologyReference
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|_GRAPH_PREFIX_DEFAULT
init|=
literal|"ontonet"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImportManagementPolicy
name|_IMPORT_POLICY_DEFAULT
init|=
name|ImportManagementPolicy
operator|.
name|PRESERVE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|_META_GRAPH_ID_DEFAULT
init|=
literal|"urn:x-localinstance:/ontologymanager.graph"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|_RESOLVE_IMPORTS_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|protected
name|Multiplexer
name|descriptor
init|=
literal|null
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|IMPORT_POLICY
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|OntologyProvider
operator|.
name|IMPORT_POLICY
operator|+
literal|".option.merge"
argument_list|,
name|name
operator|=
literal|"MERGE"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|OntologyProvider
operator|.
name|IMPORT_POLICY
operator|+
literal|".option.flatten"
argument_list|,
name|name
operator|=
literal|"FLATTEN"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|OntologyProvider
operator|.
name|IMPORT_POLICY
operator|+
literal|".option.preserve"
argument_list|,
name|name
operator|=
literal|"PRESERVE"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"PRESERVE"
argument_list|)
specifier|private
name|String
name|importPolicyString
decl_stmt|;
comment|/**      * Maps ontology IRIs (logical or physical if the ontology is anonymous) to Clerezza storage keys i.e.      * graph names.      */
specifier|private
name|OntologyToTcMapper
name|keymap
init|=
literal|null
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|OWLOntologyIRIMapper
argument_list|>
name|mappers
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyIRIMapper
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|META_GRAPH_ID
argument_list|,
name|value
operator|=
name|_META_GRAPH_ID_DEFAULT
argument_list|)
specifier|protected
name|String
name|metaGraphId
init|=
name|_META_GRAPH_ID_DEFAULT
decl_stmt|;
annotation|@
name|Reference
name|OfflineConfiguration
name|offlineConfig
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For this engine that means it is necessary to check if the used {@link ReferencedSite} can operate      * offline or not.      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
annotation|@
name|Reference
name|Parser
name|parser
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|GRAPH_PREFIX
argument_list|,
name|value
operator|=
name|_GRAPH_PREFIX_DEFAULT
argument_list|)
specifier|protected
name|String
name|prefix
init|=
name|_GRAPH_PREFIX_DEFAULT
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|RESOLVE_IMPORTS
argument_list|,
name|boolValue
operator|=
name|_RESOLVE_IMPORTS_DEFAULT
argument_list|)
specifier|protected
name|boolean
name|resolveImports
init|=
name|_RESOLVE_IMPORTS_DEFAULT
decl_stmt|;
comment|/*      * Do not use SCR reference here: this might be different from the registered WeightedTcProvider services      * : when supplied, it overrides TcManager      */
specifier|private
name|TcProvider
name|store
init|=
literal|null
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|supported
init|=
literal|null
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ClerezzaOntologyProvider instances do need to be      * configured! YOU NEED TO USE {} or its overloads, to parse the configuration and then initialise the      * rule store if running outside an OSGI environment.      */
specifier|public
name|ClerezzaOntologyProvider
parameter_list|()
block|{
name|supported
operator|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|MGraph
operator|.
name|class
operator|,
name|TripleCollection
operator|.
name|class
operator|,
name|OWLOntology
operator|.
name|class
block|}
empty_stmt|;
block|}
specifier|public
name|ClerezzaOntologyProvider
parameter_list|(
name|TcProvider
name|store
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|Parser
name|parser
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|offlineConfig
operator|=
name|offline
expr_stmt|;
comment|// Re-assign the TcManager if no store is supplied
if|if
condition|(
name|store
operator|==
literal|null
condition|)
name|store
operator|=
name|TcManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tcManager
operator|==
literal|null
condition|)
name|this
operator|.
name|tcManager
operator|=
name|TcManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
comment|// Same for the parser
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
name|this
operator|.
name|parser
operator|=
name|Parser
operator|.
name|getInstance
argument_list|()
expr_stmt|;
else|else
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|activate
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} activate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
comment|// Check if the TcManager should be set as the store
if|if
condition|(
name|store
operator|==
literal|null
condition|)
name|store
operator|=
name|tcManager
expr_stmt|;
comment|// Parse configuration.
name|metaGraphId
operator|=
call|(
name|String
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|META_GRAPH_ID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaGraphId
operator|==
literal|null
condition|)
name|metaGraphId
operator|=
name|_META_GRAPH_ID_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
comment|// This call will also create the metadata graph.
name|keymap
operator|=
operator|new
name|OntologyToTcMapper
argument_list|()
expr_stmt|;
name|descriptor
operator|=
operator|new
name|MGraphMultiplexer
argument_list|(
name|keymap
operator|.
name|graph
argument_list|)
expr_stmt|;
comment|// Parse configuration.
name|prefix
operator|=
call|(
name|String
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|GRAPH_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
name|_GRAPH_PREFIX_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
try|try
block|{
name|resolveImports
operator|=
call|(
name|Boolean
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|RESOLVE_IMPORTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|resolveImports
operator|=
name|_RESOLVE_IMPORTS_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
block|}
name|Object
name|importPolicy
init|=
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|IMPORT_POLICY
argument_list|)
decl_stmt|;
if|if
condition|(
name|importPolicy
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|importPolicyString
operator|=
name|_IMPORT_POLICY_DEFAULT
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|importPolicyString
operator|=
name|importPolicy
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// TODO replace with DataFileProvider ?
specifier|final
name|IRI
index|[]
name|offlineResources
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|offlineConfig
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|IRI
argument_list|>
name|paths
init|=
name|offlineConfig
operator|.
name|getOntologySourceLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
name|offlineResources
operator|=
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|IRI
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// There are no offline paths.
else|else
name|offlineResources
operator|=
operator|new
name|IRI
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// There's no offline configuration at all.
else|else
name|offlineResources
operator|=
operator|new
name|IRI
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|mappers
operator|=
name|OWLOntologyManagerFactory
operator|.
name|getMappers
argument_list|(
name|offlineResources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAlias
parameter_list|(
name|OWLOntologyID
name|primaryKey
parameter_list|,
name|OWLOntologyID
name|alias
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Adding alias for ontology entry."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... Primary key : {}"
argument_list|,
name|primaryKey
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... Alias : {}"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
comment|// Check that they do not map to two different ontologies.
name|OWLOntologyID
name|already
init|=
name|checkAlias
argument_list|(
name|primaryKey
argument_list|,
name|alias
argument_list|)
decl_stmt|;
comment|/* if (already != null) throw new IllegalArgumentException */
name|log
operator|.
name|warn
argument_list|(
name|alias
operator|+
literal|" is already an alias for primary key "
operator|+
name|already
argument_list|)
expr_stmt|;
comment|// XXX a SPARQL query could come in handy.
comment|// Nothing to do but defer to the meta graph,
operator|new
name|MetaGraphManager
argument_list|(
name|tcManager
argument_list|,
name|keymap
operator|.
name|graph
argument_list|)
operator|.
name|updateAddAlias
argument_list|(
name|primaryKey
argument_list|,
name|alias
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... DONE."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
name|OWLOntologyID
name|checkAlias
parameter_list|(
name|OWLOntologyID
name|primaryKey
parameter_list|,
name|OWLOntologyID
name|alias
parameter_list|)
block|{
for|for
control|(
name|OWLOntologyID
name|primary
range|:
name|listPrimaryKeys
argument_list|()
control|)
if|if
condition|(
name|listAliases
argument_list|(
name|primary
argument_list|)
operator|.
name|contains
argument_list|(
name|alias
argument_list|)
operator|&&
operator|!
name|alias
operator|.
name|equals
argument_list|(
name|primary
argument_list|)
condition|)
return|return
name|primary
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntologyID
name|createBlankOntologyEntry
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating new orphan entry."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... Public key : {}"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStatus
argument_list|(
name|publicKey
argument_list|)
operator|!=
name|Status
operator|.
name|NO_MATCH
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Public key "
operator|+
name|publicKey
operator|+
literal|"is already registered"
argument_list|)
throw|;
comment|/*          * TODO keep this object from being created on every call once we get totally rid of the          * OntologyToTcMapper class.          */
name|MetaGraphManager
name|metaMgr
init|=
operator|new
name|MetaGraphManager
argument_list|(
name|tcManager
argument_list|,
name|keymap
operator|.
name|graph
argument_list|)
decl_stmt|;
name|metaMgr
operator|.
name|updateCreateEntry
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... DONE."
argument_list|)
expr_stmt|;
return|return
name|publicKey
return|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} deactivate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
comment|/**      * Fills a reverse stack of import targets for the graph identified by key<tt>importing</tt>. The import      * tree is visited in<i>pre-order</i> and the stack is filled accordingly. Optionally, a second stack can      * be supplied to store only the level 1 imports. This can be used for preserving the original import tree      * structure.<br>      *<br>      * TODO there should be a more space-efficient implementation.      *       * @param importing      *            the key of the root graph, which will be at the bottom of every list.      * @param reverseImports      *            the list that will store all import target keys in pre-order.      * @param level1Imports      *            a second list that will store the level 1 import target keys, and is not passed to recursive      *            calls. Will be ignored if null.      */
specifier|private
name|void
name|fillImportsReverse
parameter_list|(
name|OWLOntologyID
name|importing
parameter_list|,
name|List
argument_list|<
name|OWLOntologyID
argument_list|>
name|reverseImports
parameter_list|,
name|List
argument_list|<
name|OWLOntologyID
argument_list|>
name|level1Imports
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Filling reverse imports for {}"
argument_list|,
name|importing
argument_list|)
expr_stmt|;
comment|// Add the importing ontology first
name|reverseImports
operator|.
name|add
argument_list|(
name|importing
argument_list|)
expr_stmt|;
if|if
condition|(
name|level1Imports
operator|!=
literal|null
condition|)
name|level1Imports
operator|.
name|add
argument_list|(
name|importing
argument_list|)
expr_stmt|;
comment|// Get the graph and explore its imports
name|TripleCollection
name|graph
comment|// store.getTriples(importing);
init|=
name|getStoredOntology
argument_list|(
comment|/* getPublicKey */
operator|(
name|importing
operator|)
argument_list|,
name|MGraph
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
return|return;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|graph
operator|.
name|filter
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// obj is the *original* import target
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
block|{
comment|// Right now getKey() is returning the "private" storage ID
name|String
name|key
init|=
name|getKey
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO this will not be needed when getKey() and getPublicKey() return the proper public key.
name|OWLOntologyID
name|oid
init|=
name|keymap
operator|.
name|getReverseMapping
argument_list|(
operator|new
name|UriRef
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check used for breaking cycles in the import graph.
comment|// (Unoptimized, should not use contains() for stacks.)
if|if
condition|(
operator|!
name|reverseImports
operator|.
name|contains
argument_list|(
name|oid
argument_list|)
condition|)
block|{
if|if
condition|(
name|level1Imports
operator|!=
literal|null
condition|)
name|level1Imports
operator|.
name|add
argument_list|(
name|oid
argument_list|)
expr_stmt|;
name|fillImportsReverse
argument_list|(
name|oid
argument_list|,
name|reverseImports
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ImportManagementPolicy
name|getImportManagementPolicy
parameter_list|()
block|{
try|try
block|{
return|return
name|ImportManagementPolicy
operator|.
name|valueOf
argument_list|(
name|importPolicyString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The value \""
operator|+
name|importPolicyString
operator|+
literal|"\" configured as default ImportManagementPolicy does not match any value of the Enumeration! "
operator|+
literal|"Return the default policy as defined by the "
operator|+
name|ImportManagementPolicy
operator|.
name|class
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|_IMPORT_POLICY_DEFAULT
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|String
name|getKey
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
comment|// ontologyIri = URIUtils.sanitizeID(ontologyIri);
return|return
name|getPublicKey
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|String
name|getKey
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
return|return
name|getPublicKey
argument_list|(
name|ontologyId
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
extends|extends
name|TripleCollection
parameter_list|>
name|O
name|getMetaGraph
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|TripleCollection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only subtypes of "
operator|+
name|TripleCollection
operator|.
name|class
operator|+
literal|" are allowed."
argument_list|)
throw|;
return|return
operator|(
name|O
operator|)
name|store
operator|.
name|getTriples
argument_list|(
operator|new
name|UriRef
argument_list|(
name|metaGraphId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|OWLOntologyID
name|getOntologyId
parameter_list|(
name|String
name|storageKey
parameter_list|)
block|{
return|return
name|keymap
operator|.
name|getReverseMapping
argument_list|(
operator|new
name|UriRef
argument_list|(
name|storageKey
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|OntologyNetworkConfiguration
name|getOntologyNetworkConfiguration
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|>
name|coreOntologies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|,
name|customOntologies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|attachedScopes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|TripleCollection
name|meta
init|=
name|store
operator|.
name|getTriples
argument_list|(
operator|new
name|UriRef
argument_list|(
name|metaGraphId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Scopes first
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|SCOPE_URIREF
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// for each
comment|// scope
name|Triple
name|ta
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonLiteral
name|sub
init|=
name|ta
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|UriRef
condition|)
block|{
name|String
name|s
init|=
operator|(
operator|(
name|UriRef
operator|)
name|sub
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|,
name|prefix
init|=
name|_NS_STANBOL_INTERNAL
operator|+
name|Scope
operator|.
name|shortName
operator|+
literal|"/"
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|scopeId
init|=
name|s
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Rebuilding scope \"{}\"."
argument_list|,
name|scopeId
argument_list|)
expr_stmt|;
name|coreOntologies
operator|.
name|put
argument_list|(
name|scopeId
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|customOntologies
operator|.
name|put
argument_list|(
name|scopeId
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|UriRef
name|core_ur
init|=
literal|null
decl_stmt|,
name|custom_ur
init|=
literal|null
decl_stmt|;
name|Resource
name|r
decl_stmt|;
comment|// Check core space
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|meta
operator|.
name|filter
argument_list|(
name|sub
argument_list|,
name|HAS_SPACE_CORE_URIREF
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
name|core_ur
operator|=
operator|(
name|UriRef
operator|)
name|r
expr_stmt|;
block|}
else|else
block|{
name|it2
operator|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|IS_SPACE_CORE_OF_URIREF
argument_list|,
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
name|core_ur
operator|=
operator|(
name|UriRef
operator|)
name|r
expr_stmt|;
block|}
block|}
comment|// Check custom space
name|it2
operator|=
name|meta
operator|.
name|filter
argument_list|(
name|sub
argument_list|,
name|HAS_SPACE_CUSTOM_URIREF
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
name|custom_ur
operator|=
operator|(
name|UriRef
operator|)
name|r
expr_stmt|;
block|}
else|else
block|{
name|it2
operator|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|IS_SPACE_CUSTOM_OF_URIREF
argument_list|,
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
name|custom_ur
operator|=
operator|(
name|UriRef
operator|)
name|r
expr_stmt|;
block|}
block|}
comment|// retrieve the ontologies
if|if
condition|(
name|core_ur
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|it2
operator|=
name|meta
operator|.
name|filter
argument_list|(
name|core_ur
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|predicate
init|=
name|t
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|equals
argument_list|(
name|MANAGES_URIREF
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getObject
argument_list|()
operator|instanceof
name|UriRef
condition|)
name|coreOntologies
operator|.
name|get
argument_list|(
name|scopeId
argument_list|)
operator|.
name|add
argument_list|(
name|keymap
operator|.
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getObject
argument_list|()
argument_list|)
comment|// FIXME must be very
comment|// temporary!
comment|// ((UriRef) t.getObject()).getUnicodeString()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|it2
operator|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|core_ur
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|predicate
init|=
name|t
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|equals
argument_list|(
name|IS_MANAGED_BY_URIREF
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getSubject
argument_list|()
operator|instanceof
name|UriRef
condition|)
name|coreOntologies
operator|.
name|get
argument_list|(
name|scopeId
argument_list|)
operator|.
name|add
argument_list|(
name|keymap
operator|.
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getSubject
argument_list|()
argument_list|)
comment|// FIXME must be very
comment|// temporary!
comment|// ((UriRef) t.getSubject()).getUnicodeString()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|custom_ur
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|it2
operator|=
name|meta
operator|.
name|filter
argument_list|(
name|custom_ur
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|predicate
init|=
name|t
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|equals
argument_list|(
name|MANAGES_URIREF
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getObject
argument_list|()
operator|instanceof
name|UriRef
condition|)
name|customOntologies
operator|.
name|get
argument_list|(
name|scopeId
argument_list|)
operator|.
name|add
argument_list|(
name|keymap
operator|.
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getObject
argument_list|()
argument_list|)
comment|// FIXME must be very
comment|// temporary!
comment|// ((UriRef) t.getObject()).getUnicodeString()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|it2
operator|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|custom_ur
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|predicate
init|=
name|t
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|equals
argument_list|(
name|IS_MANAGED_BY_URIREF
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getSubject
argument_list|()
operator|instanceof
name|UriRef
condition|)
name|customOntologies
operator|.
name|get
argument_list|(
name|scopeId
argument_list|)
operator|.
name|add
argument_list|(
name|keymap
operator|.
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getSubject
argument_list|()
argument_list|)
comment|// FIXME must be very
comment|// temporary!
comment|// ((UriRef) t.getSubject()).getUnicodeString()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Sessions next
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|>
name|sessionOntologies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|SESSION_URIREF
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// for each
comment|// scope
name|Triple
name|ta
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonLiteral
name|sub
init|=
name|ta
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|UriRef
condition|)
block|{
name|UriRef
name|ses_ur
init|=
operator|(
name|UriRef
operator|)
name|sub
decl_stmt|;
name|String
name|s
init|=
operator|(
operator|(
name|UriRef
operator|)
name|sub
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|_NS_STANBOL_INTERNAL
operator|+
name|Session
operator|.
name|shortName
operator|+
literal|"/"
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|sessionId
init|=
name|s
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Rebuilding session \"{}\"."
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|sessionOntologies
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|attachedScopes
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// retrieve the ontologies
if|if
condition|(
name|ses_ur
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|meta
operator|.
name|filter
argument_list|(
name|ses_ur
argument_list|,
name|MANAGES_URIREF
argument_list|,
literal|null
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|sessionOntologies
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|add
argument_list|(
name|keymap
operator|.
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|obj
argument_list|)
comment|// FIXME must be very temporary!
comment|// ((UriRef) obj).getUnicodeString()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|IS_MANAGED_BY_URIREF
argument_list|,
name|ses_ur
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|subj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subj
operator|instanceof
name|UriRef
condition|)
name|sessionOntologies
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|add
argument_list|(
name|keymap
operator|.
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|subj
argument_list|)
comment|// FIXME must be very temporary!
comment|// ((UriRef) subj).getUnicodeString()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|APPENDED_TO_URIREF
argument_list|,
name|ses_ur
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|subj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subj
operator|instanceof
name|UriRef
condition|)
block|{
name|String
name|s1
init|=
operator|(
operator|(
name|UriRef
operator|)
name|subj
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|String
name|prefix1
init|=
name|_NS_STANBOL_INTERNAL
operator|+
name|Scope
operator|.
name|shortName
operator|+
literal|"/"
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
name|prefix1
argument_list|)
condition|)
block|{
name|String
name|scopeId
init|=
name|s1
operator|.
name|substring
argument_list|(
name|prefix1
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|attachedScopes
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|add
argument_list|(
name|scopeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|meta
operator|.
name|filter
argument_list|(
name|ses_ur
argument_list|,
name|HAS_APPENDED_URIREF
argument_list|,
literal|null
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
block|{
name|String
name|s1
init|=
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|String
name|prefix1
init|=
name|_NS_STANBOL_INTERNAL
operator|+
name|Scope
operator|.
name|shortName
operator|+
literal|"/"
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
name|prefix1
argument_list|)
condition|)
block|{
name|String
name|scopeId
init|=
name|s1
operator|.
name|substring
argument_list|(
name|prefix1
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|attachedScopes
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|add
argument_list|(
name|scopeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
operator|new
name|OntologyNetworkConfiguration
argument_list|(
name|coreOntologies
argument_list|,
name|customOntologies
argument_list|,
name|sessionOntologies
argument_list|,
name|attachedScopes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Multiplexer
name|getOntologyNetworkDescriptor
parameter_list|()
block|{
return|return
name|descriptor
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|String
name|getPublicKey
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
name|UriRef
name|ur
init|=
name|keymap
operator|.
name|getMapping
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"key for {} is {}"
argument_list|,
name|ontologyId
argument_list|,
name|ur
argument_list|)
expr_stmt|;
return|return
operator|(
name|ur
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ur
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|getPublicKeys
parameter_list|()
block|{
return|return
name|descriptor
operator|.
name|getPublicKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TcProvider
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
comment|// reference = URIUtils.sanitizeID(reference);
return|return
name|getStoredOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|reference
argument_list|)
argument_list|,
name|returnType
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
comment|// reference = URIUtils.sanitizeID(reference);
return|return
name|getStoredOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|reference
argument_list|)
argument_list|,
name|returnType
argument_list|,
name|merge
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|OWLOntologyID
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getStoredOntology
argument_list|(
name|reference
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|OWLOntologyID
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
switch|switch
condition|(
name|getStatus
argument_list|(
name|reference
argument_list|)
condition|)
block|{
case|case
name|NO_MATCH
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ontology with public key "
operator|+
name|reference
operator|+
literal|" found."
argument_list|)
throw|;
case|case
name|UNCHARTED
case|:
name|log
operator|.
name|warn
argument_list|(
literal|"No key found for IRI {}"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|ORPHAN
case|:
throw|throw
operator|new
name|OrphanOntologyKeyException
argument_list|(
name|reference
argument_list|)
throw|;
default|default:
name|String
name|key
init|=
comment|/* getKey(reference); */
name|keymap
operator|.
name|getMapping
argument_list|(
name|reference
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
return|return
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|returnType
argument_list|,
name|merge
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * In this implementation the identifier is the Graph Name (e.g. ontonet::blabla)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|identifier
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|forceMerge
parameter_list|)
block|{
if|if
condition|(
name|identifier
operator|==
literal|null
operator|||
name|identifier
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Identifier cannot be null or empty."
argument_list|)
throw|;
if|if
condition|(
name|returnType
operator|==
literal|null
condition|)
block|{
comment|// Defaults to OWLOntology
name|returnType
operator|=
operator|(
name|Class
argument_list|<
name|O
argument_list|>
operator|)
name|OWLOntology
operator|.
name|class
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"No return type given for the ontology. Will return a {}"
argument_list|,
name|returnType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|canDo
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|getSupportedReturnTypes
argument_list|()
control|)
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
name|canDo
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|canDo
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Return type "
operator|+
name|returnType
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" is not allowed in this implementation. Only allowed return types are "
operator|+
name|supported
argument_list|)
throw|;
name|TripleCollection
name|tc
init|=
name|store
operator|.
name|getTriples
argument_list|(
operator|new
name|UriRef
argument_list|(
name|identifier
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|/*          * The ontology provider itself does not wrap the returned object into an in-memory graph, therefore          * any direct modifications will be propagated. Collectors should wrap them, though. To change this          * behaviour, uncomment the line below.          */
comment|// tc = new SimpleMGraph(tc);
if|if
condition|(
name|TripleCollection
operator|.
name|class
operator|.
name|equals
argument_list|(
name|returnType
argument_list|)
operator|||
name|MGraph
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
return|return
name|returnType
operator|.
name|cast
argument_list|(
name|tc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|(
name|O
operator|)
name|toOWLOntology
argument_list|(
operator|new
name|UriRef
argument_list|(
name|identifier
argument_list|)
argument_list|,
name|forceMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to return stored ontology "
operator|+
name|identifier
operator|+
literal|" as type "
operator|+
name|returnType
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getSupportedReturnTypes
parameter_list|()
block|{
return|return
name|supported
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
comment|// ontologyIri = URIUtils.sanitizeID(ontologyIri);
return|return
name|hasOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|OWLOntologyID
name|id
parameter_list|)
block|{
name|Status
name|stat
init|=
name|getStatus
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
name|Status
operator|.
name|ORPHAN
condition|)
throw|throw
operator|new
name|OrphanOntologyKeyException
argument_list|(
name|id
argument_list|)
throw|;
return|return
name|getStatus
argument_list|(
name|id
argument_list|)
operator|==
name|Status
operator|.
name|MATCH
return|;
block|}
annotation|@
name|Override
specifier|public
name|Status
name|getStatus
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
if|if
condition|(
name|publicKey
operator|==
literal|null
operator|||
name|publicKey
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot check for an anonymous ontology."
argument_list|)
throw|;
if|if
condition|(
operator|!
operator|new
name|MetaGraphManager
argument_list|(
name|tcManager
argument_list|,
name|keymap
operator|.
name|graph
argument_list|)
operator|.
name|exists
argument_list|(
name|publicKey
argument_list|)
condition|)
return|return
name|Status
operator|.
name|NO_MATCH
return|;
name|UriRef
name|graphName
init|=
name|keymap
operator|.
name|getMapping
argument_list|(
name|publicKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|graphName
operator|==
literal|null
condition|)
return|return
name|Status
operator|.
name|UNCHARTED
return|;
if|if
condition|(
name|store
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|graphName
argument_list|)
condition|)
return|return
name|Status
operator|.
name|MATCH
return|;
else|else
return|return
name|Status
operator|.
name|ORPHAN
return|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      *       * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
comment|/*      * (non-Javadoc) XXX see if we can use reasoners, either live or by caching materialisations.      *       * @see      * org.apache.stanbol.ontologymanager.ontonet.api.ontology.OntologyProvider#listAliases(org.semanticweb      * .owlapi.model.OWLOntologyID)      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|listAliases
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
if|if
condition|(
name|publicKey
operator|==
literal|null
operator|||
name|publicKey
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot locate aliases for null or anonymous public keys."
argument_list|)
throw|;
specifier|final
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|aliases
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
name|computeAliasClosure
argument_list|(
name|publicKey
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
name|aliases
operator|.
name|remove
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|aliases
return|;
block|}
specifier|protected
name|void
name|computeAliasClosure
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|,
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|target
parameter_list|)
block|{
name|target
operator|.
name|add
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|TripleCollection
name|meta
init|=
name|getMetaGraph
argument_list|(
name|TripleCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|UriRef
name|ont
init|=
name|keymap
operator|.
name|buildResource
argument_list|(
name|publicKey
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Forwards
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
name|ont
argument_list|,
name|OWL
operator|.
name|sameAs
argument_list|,
literal|null
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|resources
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Backwards
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|OWL
operator|.
name|sameAs
argument_list|,
name|ont
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|resources
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|resources
control|)
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
block|{
name|OWLOntologyID
name|newKey
init|=
name|keymap
operator|.
name|buildPublicKey
argument_list|(
operator|(
name|UriRef
operator|)
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|contains
argument_list|(
name|newKey
argument_list|)
condition|)
name|computeAliasClosure
argument_list|(
name|newKey
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|listAllRegisteredEntries
parameter_list|()
block|{
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add aliases
for|for
control|(
name|OWLOntologyID
name|key
range|:
name|descriptor
operator|.
name|getPublicKeys
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|listAliases
argument_list|(
name|key
argument_list|)
control|)
name|result
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
name|listOrphans
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|key
range|:
name|descriptor
operator|.
name|getPublicKeys
argument_list|()
control|)
block|{
name|UriRef
name|graphName
init|=
name|keymap
operator|.
name|getMapping
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|graphName
operator|==
literal|null
operator|||
operator|!
name|store
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|graphName
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
name|listPrimaryKeys
parameter_list|()
block|{
comment|// XXX here we should decide if non-registered Clerezza graphs should also be in the list.
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|key
range|:
name|descriptor
operator|.
name|getPublicKeys
argument_list|()
control|)
if|if
condition|(
name|keymap
operator|.
name|getMapping
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|listVersions
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
return|return
name|keymap
operator|.
name|getVersions
argument_list|(
name|ontologyIri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntologyID
name|loadInStore
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|,
name|Origin
argument_list|<
name|?
argument_list|>
modifier|...
name|references
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No data to load ontologies from."
argument_list|)
throw|;
if|if
condition|(
name|formatIdentifier
operator|==
literal|null
operator|||
name|formatIdentifier
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A non-null, non-blank format identifier is required for parsing the data stream."
argument_list|)
throw|;
name|checkReplaceability
argument_list|(
name|references
argument_list|)
expr_stmt|;
comment|// This method only tries the supplied format once.
name|log
operator|.
name|debug
argument_list|(
literal|"Trying to parse data stream with format {}"
argument_list|,
name|formatIdentifier
argument_list|)
expr_stmt|;
name|TripleCollection
name|rdfData
init|=
name|parser
operator|.
name|parse
argument_list|(
name|data
argument_list|,
name|formatIdentifier
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"SUCCESS format {}."
argument_list|,
name|formatIdentifier
argument_list|)
expr_stmt|;
return|return
name|loadInStore
argument_list|(
name|rdfData
argument_list|,
name|force
argument_list|,
name|references
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntologyID
name|loadInStore
parameter_list|(
specifier|final
name|IRI
name|ontologyIri
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|,
name|Origin
argument_list|<
name|?
argument_list|>
modifier|...
name|origins
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Loading {}"
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyIri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Ontology IRI cannot be null."
argument_list|)
throw|;
name|IRI
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|force
condition|)
name|location
operator|=
literal|null
expr_stmt|;
else|else
for|for
control|(
name|OWLOntologyIRIMapper
name|mapper
range|:
name|mappers
control|)
block|{
name|location
operator|=
name|mapper
operator|.
name|getDocumentIRI
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
break|break;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isOfflineMode
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve "
operator|+
name|ontologyIri
operator|+
literal|" while Stanbol is in offline mode. "
operator|+
literal|"No resource with that identifier was found locally."
argument_list|)
throw|;
else|else
name|location
operator|=
name|ontologyIri
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"found {} in {}"
argument_list|,
name|ontologyIri
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|// Add the physical IRI to the origins.
name|origins
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|origins
argument_list|,
name|origins
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|origins
index|[
name|origins
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|Origin
operator|.
name|create
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
name|checkReplaceability
argument_list|(
name|origins
argument_list|)
expr_stmt|;
comment|// Get ordered list of preferred/supported formats, or use the specified one.
name|List
argument_list|<
name|String
argument_list|>
name|supported
init|=
name|OntologyUtils
operator|.
name|getPreferredSupportedFormats
argument_list|(
name|parser
operator|.
name|getSupportedFormats
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|formatIdentifier
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|formatIdentifier
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|formats
operator|=
name|supported
expr_stmt|;
else|else
block|{
name|formats
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
comment|// Pre-check supported format
if|if
condition|(
name|supported
operator|.
name|contains
argument_list|(
name|formatIdentifier
argument_list|)
condition|)
name|formats
operator|.
name|add
argument_list|(
name|formatIdentifier
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|sup
range|:
name|supported
control|)
if|if
condition|(
name|sup
operator|!=
literal|null
operator|&&
operator|!
name|formats
operator|.
name|contains
argument_list|(
name|sup
argument_list|)
condition|)
name|formats
operator|.
name|add
argument_list|(
name|sup
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|currentFormat
range|:
name|formats
control|)
block|{
try|try
block|{
specifier|final
name|URLConnection
name|con
init|=
name|location
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setRequestProperty
argument_list|(
literal|"Accept"
argument_list|,
name|currentFormat
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|is
init|=
name|con
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
comment|/*                      * We provide the current format, so the recursive call won't be trying to sort preferred                      * formats again. Also, we provide the ontologyIRI as the preferred key, since we already                      * know it.                      */
name|OWLOntologyID
name|key
init|=
name|loadInStore
argument_list|(
name|is
argument_list|,
name|currentFormat
argument_list|,
name|force
argument_list|,
name|origins
argument_list|)
decl_stmt|;
comment|// If parsing failed, an exception will be thrown before getting here, so no risk.
comment|// if (key != null&& !key.isEmpty()) setLocatorMapping(ontologyIri, key);
return|return
name|key
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"FAILURE format {} (unsupported). Trying next one."
argument_list|,
name|currentFormat
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"FAILURE format {} (parse error). Will try next one."
argument_list|,
name|currentFormat
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// No parser worked, return null.
name|log
operator|.
name|error
argument_list|(
literal|"All parsers failed, giving up."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntologyID
name|loadInStore
parameter_list|(
name|Object
name|ontology
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|,
name|Origin
argument_list|<
name|?
argument_list|>
modifier|...
name|origins
parameter_list|)
block|{
if|if
condition|(
name|ontology
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ontology supplied."
argument_list|)
throw|;
name|checkReplaceability
argument_list|(
name|origins
argument_list|)
expr_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TripleCollection
name|targetGraph
decl_stmt|;
comment|// The final graph
name|TripleCollection
name|rdfData
decl_stmt|;
comment|// The supplied ontology converted to TripleCollection
if|if
condition|(
name|ontology
operator|instanceof
name|OWLOntology
condition|)
block|{
comment|// This will be in memory!
name|rdfData
operator|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
operator|(
name|OWLOntology
operator|)
name|ontology
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontology
operator|instanceof
name|TripleCollection
condition|)
block|{
comment|// This might be in memory or in persistent storage.
name|rdfData
operator|=
operator|(
name|TripleCollection
operator|)
name|ontology
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This ontology provider can only accept objects assignable to "
operator|+
name|TripleCollection
operator|.
name|class
operator|+
literal|" or "
operator|+
name|OWLOntology
operator|.
name|class
argument_list|)
throw|;
comment|// XXX Force is ignored for the content, but the imports?
comment|// Now we proceed to assign the primary key to the ontology.
name|OWLOntologyID
name|primaryKey
init|=
literal|null
decl_stmt|;
comment|/*          * Compute aliases          */
name|UriRef
name|graphName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyID
argument_list|>
name|overrides
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
comment|// Priority aliases.
name|List
argument_list|<
name|IRI
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|IRI
argument_list|>
argument_list|()
decl_stmt|;
comment|// Second-choice aliases.
comment|// Scan origins ONCE.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|origins
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Origin
argument_list|<
name|?
argument_list|>
name|origin
init|=
name|origins
index|[
name|i
index|]
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Found origin at index {}"
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|origin
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Null origin at index {}. Skipping."
argument_list|,
name|i
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Object
name|ref
init|=
name|origin
operator|.
name|getReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Null reference at index {}. Skipping."
argument_list|,
name|i
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" ... Reference is a {}"
argument_list|,
name|ref
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... Value : {}"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|OWLOntologyID
condition|)
block|{
name|OWLOntologyID
name|key
init|=
operator|(
name|OWLOntologyID
operator|)
name|ref
decl_stmt|;
if|if
condition|(
name|primaryKey
operator|==
literal|null
condition|)
block|{
name|primaryKey
operator|=
name|key
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... assigned as primary key."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|primaryKey
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ... matches primary key. Skipping."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overrides
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... assigned as a priority alias for {}"
argument_list|,
name|primaryKey
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ref
operator|instanceof
name|IRI
condition|)
block|{
name|sources
operator|.
name|add
argument_list|(
operator|(
name|IRI
operator|)
name|ref
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... assigned as a secondary alias (source) for {}"
argument_list|,
name|primaryKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|instanceof
name|UriRef
condition|)
block|{
if|if
condition|(
name|graphName
operator|!=
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Graph name already assigned as {}. Skipping."
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
else|else
block|{
name|graphName
operator|=
operator|(
name|UriRef
operator|)
name|ref
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... assigned as a graph name for {}"
argument_list|,
name|primaryKey
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unhandled type for origin at index {} : {}. Skipping."
argument_list|,
name|i
argument_list|,
name|ref
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The actual logical ID will be dereferenceable no matter what.
name|OWLOntologyID
name|extractedId
init|=
name|OWLUtils
operator|.
name|extractOntologyID
argument_list|(
name|rdfData
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryKey
operator|==
literal|null
condition|)
name|primaryKey
operator|=
name|extractedId
expr_stmt|;
comment|// Not overridden: set as primary key.
else|else
name|overrides
operator|.
name|add
argument_list|(
name|extractedId
argument_list|)
expr_stmt|;
comment|// Overridden: must be an alias anyway.
if|if
condition|(
name|primaryKey
operator|==
literal|null
condition|)
comment|// No overrides, no extracted ID.
block|{
name|IRI
name|z
decl_stmt|;
comment|// The first IRI found becomes the primary key.
if|if
condition|(
operator|!
name|sources
operator|.
name|isEmpty
argument_list|()
condition|)
name|z
operator|=
name|sources
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
elseif|else
comment|// Try the graph name
if|if
condition|(
name|graphName
operator|!=
literal|null
condition|)
name|z
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|graphName
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
else|else
comment|// Extrema ratio : compute a timestamped primary key.
name|z
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-time:"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|primaryKey
operator|=
operator|new
name|OWLOntologyID
argument_list|(
name|z
argument_list|)
expr_stmt|;
block|}
comment|// Check if it is possible to avoid reloading the ontology content from its source.
name|boolean
name|mustLoad
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
name|graphName
operator|!=
literal|null
operator|&&
name|store
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|graphName
argument_list|)
condition|)
block|{
name|boolean
name|condition
init|=
literal|true
decl_stmt|;
comment|// Any failed check will abort the scan.
comment|// Check if the extracted ontology ID matches that of the supplied graph.
comment|// XXX note that anonymous ontologies should be considered a match... or should they not?
name|TripleCollection
name|tc
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|graphName
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|idFromStore
init|=
name|OWLUtils
operator|.
name|extractOntologyID
argument_list|(
name|tc
argument_list|)
decl_stmt|;
name|condition
operator|&=
operator|(
name|extractedId
operator|==
literal|null
operator|&&
name|idFromStore
operator|==
literal|null
operator|)
operator|||
name|extractedId
operator|.
name|equals
argument_list|(
name|idFromStore
argument_list|)
expr_stmt|;
comment|// Finally, a size check
comment|// FIXME not a good policy for graphs that change without altering the size.
if|if
condition|(
name|condition
operator|&&
name|rdfData
operator|instanceof
name|TripleCollection
condition|)
name|condition
operator|&=
name|tc
operator|.
name|size
argument_list|()
operator|==
name|rdfData
operator|.
name|size
argument_list|()
expr_stmt|;
name|mustLoad
operator|&=
operator|!
name|condition
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mustLoad
operator|&&
name|graphName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Graph with ID {} already in store. Default action is to skip storage."
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
name|targetGraph
operator|=
name|store
operator|.
name|getTriples
argument_list|(
name|graphName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|iri
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|primaryKey
operator|.
name|getOntologyIRI
argument_list|()
operator|!=
literal|null
condition|)
name|iri
operator|=
name|primaryKey
operator|.
name|getOntologyIRI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|primaryKey
operator|.
name|getVersionIRI
argument_list|()
operator|!=
literal|null
condition|)
name|iri
operator|+=
literal|":::"
operator|+
name|primaryKey
operator|.
name|getVersionIRI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// s will become the graph name
name|String
name|s
init|=
operator|(
name|iri
operator|.
name|startsWith
argument_list|(
name|prefix
operator|+
literal|"::"
argument_list|)
operator|)
condition|?
literal|""
else|:
operator|(
name|prefix
operator|+
literal|"::"
operator|)
decl_stmt|;
name|s
operator|+=
name|iri
expr_stmt|;
name|graphName
operator|=
operator|new
name|UriRef
argument_list|(
name|URIUtils
operator|.
name|sanitize
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Storing ontology with graph ID {}"
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
try|try
block|{
name|targetGraph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|graphName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
name|graphName
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getEntityName
argument_list|()
argument_list|)
condition|)
name|targetGraph
operator|=
name|store
operator|.
name|getMGraph
argument_list|(
name|graphName
argument_list|)
expr_stmt|;
else|else
name|targetGraph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|graphName
argument_list|)
expr_stmt|;
block|}
name|targetGraph
operator|.
name|addAll
argument_list|(
name|rdfData
argument_list|)
expr_stmt|;
block|}
comment|// All is already sanitized by the time we get here.
comment|// Now do the mappings
name|String
name|mappedIds
init|=
literal|""
decl_stmt|;
comment|// Discard unconventional ontology IDs with only the version IRI
if|if
condition|(
name|primaryKey
operator|!=
literal|null
operator|&&
name|primaryKey
operator|.
name|getOntologyIRI
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Versioned or not, the real ID mapping is always added
name|keymap
operator|.
name|setMapping
argument_list|(
name|primaryKey
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
name|mappedIds
operator|+=
name|primaryKey
expr_stmt|;
comment|// TODO map unversioned ID as well?
name|Triple
name|t
init|=
operator|new
name|TripleImpl
argument_list|(
name|keymap
operator|.
name|buildResource
argument_list|(
name|primaryKey
argument_list|)
argument_list|,
name|SIZE_IN_TRIPLES_URIREF
argument_list|,
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|rdfData
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|getMetaGraph
argument_list|(
name|MGraph
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Add aliases.
for|for
control|(
name|IRI
name|source
range|:
name|sources
control|)
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
name|overrides
operator|.
name|add
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|overrides
control|)
if|if
condition|(
name|alias
operator|!=
literal|null
operator|&&
operator|!
name|alias
operator|.
name|equals
argument_list|(
name|primaryKey
argument_list|)
condition|)
block|{
name|addAlias
argument_list|(
name|primaryKey
argument_list|,
name|alias
argument_list|)
expr_stmt|;
name|mappedIds
operator|+=
literal|" , "
operator|+
name|alias
expr_stmt|;
block|}
comment|// Do this AFTER registering the ontology, otherwise import cycles will cause infinite loops.
if|if
condition|(
name|resolveImports
condition|)
block|{
comment|// Scan resources of type owl:Ontology, but only get the first.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|targetGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Scan import statements for the one owl:Ontology considered.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|targetGraph
operator|.
name|filter
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Resolving import target {}"
argument_list|,
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
try|try
block|{
comment|// TODO try locals first
name|UriRef
name|target
init|=
operator|(
name|UriRef
operator|)
name|obj
decl_stmt|;
name|OWLOntologyID
name|id
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|target
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|keymap
operator|.
name|getMapping
argument_list|(
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// Check if it's not there already.
if|if
condition|(
name|isOfflineMode
argument_list|()
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot load imported ontology "
operator|+
name|obj
operator|+
literal|" while Stanbol is in offline mode."
argument_list|)
throw|;
comment|// TODO manage origins for imported ontologies too?
name|OWLOntologyID
name|id2
init|=
name|loadInStore
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|id2
operator|!=
literal|null
condition|)
name|id
operator|=
name|id2
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Import {} resolved."
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Requested import already stored. Setting dependency only."
argument_list|)
expr_stmt|;
block|}
name|descriptor
operator|.
name|setDependency
argument_list|(
name|primaryKey
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse format for resource "
operator|+
name|obj
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// / XXX configure to continue?
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to load ontology from resource "
operator|+
name|obj
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// / XXX configure to continue?
block|}
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" Ontology {}"
argument_list|,
name|mappedIds
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetGraph
operator|!=
literal|null
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|" ... ({} triples)"
argument_list|,
name|targetGraph
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... primary public key : {}"
argument_list|,
name|primaryKey
argument_list|)
expr_stmt|;
comment|// log.debug("--- {}", URIUtils.sanitize(s));
name|log
operator|.
name|debug
argument_list|(
literal|"Time: {} ms"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
operator|)
argument_list|)
expr_stmt|;
comment|// return URIUtils.sanitize(s);
return|return
name|primaryKey
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeOntology
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
throws|throws
name|OntologyHandleException
block|{
if|if
condition|(
name|descriptor
operator|.
name|getDependents
argument_list|(
name|publicKey
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|descriptor
operator|.
name|getHandles
argument_list|(
name|publicKey
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|UriRef
name|graphName
init|=
name|keymap
operator|.
name|getMapping
argument_list|(
name|publicKey
argument_list|)
decl_stmt|;
comment|// TODO propagate everything to the descriptor
name|descriptor
operator|.
name|clearDependencies
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
comment|// release dependencies
name|keymap
operator|.
name|registerOntologyDeletion
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
comment|// remove metadata
comment|// Now the actual deletion
name|store
operator|.
name|deleteTripleCollection
argument_list|(
name|graphName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
throw|throw
operator|new
name|OntologyHandleException
argument_list|(
literal|"There are ontologies or collectors depending on "
operator|+
name|publicKey
operator|+
literal|"Those handles must be released first."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setImportManagementPolicy
parameter_list|(
name|ImportManagementPolicy
name|policy
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Import management policy cannot be null."
argument_list|)
throw|;
name|importPolicyString
operator|=
name|policy
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLocatorMapping
parameter_list|(
name|IRI
name|locator
parameter_list|,
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
if|if
condition|(
name|publicKey
operator|==
literal|null
operator|||
name|publicKey
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key must be non-null and non-anonymous."
argument_list|)
throw|;
name|log
operator|.
name|info
argument_list|(
literal|"Setting {} as the resource locator for ontology {}"
argument_list|,
name|locator
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
operator|new
name|MetaGraphManager
argument_list|(
name|tcManager
argument_list|,
name|keymap
operator|.
name|graph
argument_list|)
operator|.
name|updateAddAlias
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|locator
argument_list|)
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLocatorMapping
parameter_list|(
name|IRI
name|locator
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key must be non-null and non-empty."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|store
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|UriRef
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ontology found with storage key "
operator|+
name|key
argument_list|)
throw|;
if|if
condition|(
name|locator
operator|==
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Setting null locator for {}. This will remove all physical mappings for the corresponding graph."
argument_list|,
name|key
argument_list|)
expr_stmt|;
else|else
name|log
operator|.
name|info
argument_list|(
literal|"Setting {} as the resource locator for ontology {}"
argument_list|,
name|locator
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|keymap
operator|.
name|mapLocator
argument_list|(
name|locator
argument_list|,
operator|new
name|UriRef
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkReplaceability
parameter_list|(
name|Origin
argument_list|<
name|?
argument_list|>
modifier|...
name|origins
parameter_list|)
block|{
for|for
control|(
name|Origin
argument_list|<
name|?
argument_list|>
name|or
range|:
name|origins
control|)
block|{
if|if
condition|(
name|or
operator|==
literal|null
operator|||
operator|!
operator|(
name|or
operator|.
name|getReference
argument_list|()
operator|instanceof
name|OWLOntologyID
operator|)
condition|)
continue|continue;
name|OWLOntologyID
name|key
init|=
operator|(
name|OWLOntologyID
operator|)
name|or
operator|.
name|getReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|getStatus
argument_list|(
name|key
argument_list|)
operator|==
name|Status
operator|.
name|MATCH
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Public key "
operator|+
name|key
operator|+
literal|" matches an existing non-orphan entry. Cannot replace."
argument_list|)
throw|;
block|}
block|}
comment|/**      *       * @param graphName      * @param forceMerge      *            if set to false, the selected import management policy will be applied.      * @return      * @throws OWLOntologyCreationException      */
specifier|protected
name|OWLOntology
name|toOWLOntology
parameter_list|(
name|UriRef
name|graphName
parameter_list|,
name|boolean
name|forceMerge
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exporting graph to OWLOntology"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" -- Graph name : {}"
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
comment|// Never try to import
name|mgr
operator|.
name|addIRIMapper
argument_list|(
operator|new
name|PhonyIRIMapper
argument_list|(
name|Collections
operator|.
expr|<
name|IRI
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|loaded
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
name|TripleCollection
name|graph
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|graphName
argument_list|)
decl_stmt|;
name|UriRef
name|ontologyId
init|=
literal|null
decl_stmt|;
comment|// Get the id of this ontology.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|itt
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|itt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|nl
init|=
name|itt
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|nl
operator|instanceof
name|UriRef
condition|)
name|ontologyId
operator|=
operator|(
name|UriRef
operator|)
name|nl
expr_stmt|;
block|}
name|List
argument_list|<
name|OWLOntologyID
argument_list|>
name|revImps
init|=
operator|new
name|Stack
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyID
argument_list|>
name|lvl1
init|=
operator|new
name|Stack
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
name|fillImportsReverse
argument_list|(
name|keymap
operator|.
name|getReverseMapping
argument_list|(
name|graphName
argument_list|)
argument_list|,
name|revImps
argument_list|,
name|lvl1
argument_list|)
expr_stmt|;
comment|// If not set to merge (either by policy of by force), adopt the set import policy.
if|if
condition|(
operator|!
name|forceMerge
operator|&&
operator|!
name|ImportManagementPolicy
operator|.
name|MERGE
operator|.
name|equals
argument_list|(
name|getImportManagementPolicy
argument_list|()
argument_list|)
condition|)
block|{
name|OWLOntology
name|o
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|graph
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
comment|// TODO make it not flat.
comment|// Examining the reverse imports stack will flatten all imports.
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyID
argument_list|>
name|listToUse
decl_stmt|;
switch|switch
condition|(
name|getImportManagementPolicy
argument_list|()
condition|)
block|{
case|case
name|FLATTEN
case|:
name|listToUse
operator|=
name|revImps
expr_stmt|;
break|break;
case|case
name|PRESERVE
case|:
name|listToUse
operator|=
name|lvl1
expr_stmt|;
break|break;
default|default:
name|listToUse
operator|=
name|lvl1
expr_stmt|;
break|break;
block|}
for|for
control|(
name|OWLOntologyID
name|ref
range|:
name|listToUse
control|)
if|if
condition|(
operator|!
name|loaded
operator|.
name|contains
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|ref
operator|.
name|equals
argument_list|(
name|keymap
operator|.
name|getReverseMapping
argument_list|(
name|graphName
argument_list|)
argument_list|)
condition|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|o
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|ref
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
else|else
block|{
comment|// Merge
comment|// If there is just the root ontology, convert it straight away.
if|if
condition|(
name|revImps
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|revImps
operator|.
name|contains
argument_list|(
name|graphName
argument_list|)
condition|)
block|{
name|OWLOntology
name|o
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|graph
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
return|return
name|o
return|;
block|}
comment|// FIXME when there's more than one ontology, this way of merging them seems inefficient...
name|TripleCollection
name|tempGraph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
comment|// The set of triples that will be excluded from the merge
name|Set
argument_list|<
name|Triple
argument_list|>
name|exclusions
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
comment|// Examine all reverse imports
for|for
control|(
name|OWLOntologyID
name|ref
range|:
name|revImps
control|)
if|if
condition|(
operator|!
name|loaded
operator|.
name|contains
argument_list|(
name|ref
argument_list|)
condition|)
block|{
comment|// Get the triples
name|TripleCollection
name|imported
init|=
comment|// store.getTriples(ref);
name|getStoredOntology
argument_list|(
name|getKey
argument_list|(
name|ref
argument_list|)
argument_list|,
name|MGraph
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// For each owl:Ontology
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|remove
init|=
name|imported
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
while|while
condition|(
name|remove
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|subj
init|=
name|remove
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|/*                          * If it's not the root ontology, trash all its triples. If the root ontology is                          * anonymous, all ontology annotations are to be trashed without distinction.                          */
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
operator|!
name|subj
operator|.
name|equals
argument_list|(
name|ontologyId
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|imported
operator|.
name|filter
argument_list|(
name|subj
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|imported
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exclusions
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
name|tempGraph
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|loaded
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
comment|// Since they are all merged and import statements removed, there should be no risk of going
comment|// online.
return|return
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|tempGraph
argument_list|,
name|mgr
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

