begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|session
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OntologyNetworkConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|MissingOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|OntologyCollectorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|StoredOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyNetworkMultiplexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|ScopeEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|DuplicateSessionIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|NonReferenceableSessionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionEvent
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * Calls to<code>getSessionListeners()</code> return a {@link Set} of listeners.  *   * TODO: implement storage (using persistence layer).  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|SessionManager
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SessionManagerImpl
implements|implements
name|SessionManager
implements|,
name|ScopeEventListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|_ID_DEFAULT
init|=
literal|"session"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|_MAX_ACTIVE_SESSIONS_DEFAULT
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_ONTOLOGY_NETWORK_NS_DEFAULT
init|=
literal|"http://localhost:8080/ontonet/"
decl_stmt|;
comment|/**      * Concatenated with the sessionManager ID, it identifies the Web endpoint and default base URI for all      * sessions.      */
specifier|private
name|IRI
name|baseNS
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SessionManager
operator|.
name|ID
argument_list|,
name|value
operator|=
name|_ID_DEFAULT
argument_list|)
specifier|protected
name|String
name|id
decl_stmt|;
specifier|protected
name|SessionIDGenerator
name|idgen
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|SessionListener
argument_list|>
name|listeners
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SessionManager
operator|.
name|MAX_ACTIVE_SESSIONS
argument_list|,
name|intValue
operator|=
name|_MAX_ACTIVE_SESSIONS_DEFAULT
argument_list|)
specifier|private
name|int
name|maxSessions
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ONManager
name|onManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OfflineConfiguration
name|offline
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Session
argument_list|>
name|sessionsByID
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ReengineerManagerImpl instances do need to be configured!      * YOU NEED TO USE {@link #SessionManagerImpl(OntologyProvider, Dictionary)} to parse the configuration      * and then initialise the rule store if running outside an OSGI environment.      */
specifier|public
name|SessionManagerImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|listeners
operator|=
operator|new
name|HashSet
argument_list|<
name|SessionListener
argument_list|>
argument_list|()
expr_stmt|;
name|sessionsByID
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Session
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * To be invoked by non-OSGi environments.      *       * @param the      *            ontology provider that will store and provide ontologies for this session manager.      * @param configuration      */
specifier|public
name|SessionManagerImpl
parameter_list|(
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|(
name|ontologyProvider
argument_list|,
literal|null
argument_list|,
name|offline
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * To be invoked by non-OSGi environments.      *       * @param the      *            ontology provider that will store and provide ontologies for this session manager.      * @param configuration      */
specifier|public
name|SessionManagerImpl
parameter_list|(
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
parameter_list|,
name|ONManager
name|onManager
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|ontologyProvider
operator|=
name|ontologyProvider
expr_stmt|;
name|this
operator|.
name|onManager
operator|=
name|onManager
expr_stmt|;
name|this
operator|.
name|offline
operator|=
name|offline
expr_stmt|;
try|try
block|{
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to access servlet context."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|SessionManagerImpl
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Parse configuration
name|id
operator|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|SessionManager
operator|.
name|ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
name|id
operator|=
name|_ID_DEFAULT
expr_stmt|;
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|setDefaultNamespace
argument_list|(
name|offline
operator|.
name|getDefaultOntologyNetworkNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid namespace {}. Setting to default value {}"
argument_list|,
name|offline
operator|.
name|getDefaultOntologyNetworkNamespace
argument_list|()
argument_list|,
name|_ONTOLOGY_NETWORK_NS_DEFAULT
argument_list|)
expr_stmt|;
name|setDefaultNamespace
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|_ONTOLOGY_NETWORK_NS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|s
operator|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|SessionManager
operator|.
name|MAX_ACTIVE_SESSIONS
argument_list|)
expr_stmt|;
name|maxSessions
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid session limit {}. Setting to default value {}"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|SessionManager
operator|.
name|MAX_ACTIVE_SESSIONS
argument_list|)
argument_list|,
name|_MAX_ACTIVE_SESSIONS_DEFAULT
argument_list|)
expr_stmt|;
name|maxSessions
operator|=
name|_MAX_ACTIVE_SESSIONS_DEFAULT
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The Ontology Network Manager configuration does not define a ID for the Ontology Network Manager"
argument_list|)
expr_stmt|;
block|}
name|idgen
operator|=
operator|new
name|TimestampedSessionIDGenerator
argument_list|()
expr_stmt|;
comment|// Add listeners
if|if
condition|(
name|ontologyProvider
operator|instanceof
name|SessionListener
condition|)
name|this
operator|.
name|addSessionListener
argument_list|(
operator|(
name|SessionListener
operator|)
name|ontologyProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|addSessionListener
argument_list|(
name|ontologyProvider
operator|.
name|getOntologyNetworkDescriptor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|onManager
operator|!=
literal|null
condition|)
name|onManager
operator|.
name|addScopeRegistrationListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Rebuild sessions
name|rebuildSessions
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|SessionManager
operator|.
name|class
operator|+
literal|" activated. Time : {} ms."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|addSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|sessionsByID
operator|.
name|put
argument_list|(
name|session
operator|.
name|getID
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSessionListener
parameter_list|(
name|SessionListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSessionLimit
parameter_list|()
throws|throws
name|SessionLimitException
block|{
if|if
condition|(
name|maxSessions
operator|>=
literal|0
operator|&&
name|sessionsByID
operator|.
name|size
argument_list|()
operator|>=
name|maxSessions
condition|)
throw|throw
operator|new
name|SessionLimitException
argument_list|(
name|maxSessions
argument_list|,
literal|"Cannot create new session. Limit of "
operator|+
name|maxSessions
operator|+
literal|" already raeached."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearSessionListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Session
name|createSession
parameter_list|()
throws|throws
name|SessionLimitException
block|{
name|checkSessionLimit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|exclude
init|=
name|getRegisteredSessionIDs
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|session
operator|==
literal|null
condition|)
try|try
block|{
name|session
operator|=
name|createSession
argument_list|(
name|idgen
operator|.
name|createSessionID
argument_list|(
name|exclude
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateSessionIDException
name|e
parameter_list|)
block|{
name|exclude
operator|.
name|add
argument_list|(
name|e
operator|.
name|getDuplicateID
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
return|return
name|session
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Session
name|createSession
parameter_list|(
name|String
name|sessionID
parameter_list|)
throws|throws
name|DuplicateSessionIDException
throws|,
name|SessionLimitException
block|{
comment|/*          * Throw the duplicate ID exception first, in case developers decide to reuse the existing session          * before creating a new one.          */
if|if
condition|(
name|sessionsByID
operator|.
name|containsKey
argument_list|(
name|sessionID
argument_list|)
condition|)
throw|throw
operator|new
name|DuplicateSessionIDException
argument_list|(
name|sessionID
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
name|checkSessionLimit
argument_list|()
expr_stmt|;
name|IRI
name|ns
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getDefaultNamespace
argument_list|()
operator|+
name|getID
argument_list|()
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
operator|new
name|SessionImpl
argument_list|(
name|sessionID
argument_list|,
name|ns
argument_list|,
name|ontologyProvider
argument_list|)
decl_stmt|;
comment|// Have the ontology provider listen to ontology events
if|if
condition|(
name|ontologyProvider
operator|instanceof
name|OntologyCollectorListener
condition|)
name|session
operator|.
name|addOntologyCollectorListener
argument_list|(
operator|(
name|OntologyCollectorListener
operator|)
name|ontologyProvider
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyProvider
operator|instanceof
name|SessionListener
condition|)
name|session
operator|.
name|addSessionListener
argument_list|(
operator|(
name|SessionListener
operator|)
name|ontologyProvider
argument_list|)
expr_stmt|;
name|OntologyNetworkMultiplexer
name|multiplexer
init|=
name|ontologyProvider
operator|.
name|getOntologyNetworkDescriptor
argument_list|()
decl_stmt|;
name|session
operator|.
name|addOntologyCollectorListener
argument_list|(
name|multiplexer
argument_list|)
expr_stmt|;
name|session
operator|.
name|addSessionListener
argument_list|(
name|multiplexer
argument_list|)
expr_stmt|;
name|addSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|fireSessionCreated
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|session
return|;
block|}
comment|/**      * Deactivation of the ONManagerImpl resets all its resources.      */
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|id
operator|=
literal|null
expr_stmt|;
name|baseNS
operator|=
literal|null
expr_stmt|;
name|maxSessions
operator|=
literal|0
expr_stmt|;
comment|// No sessions allowed for an inactive component.
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|SessionManagerImpl
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|destroySession
parameter_list|(
name|String
name|sessionID
parameter_list|)
block|{
try|try
block|{
name|Session
name|ses
init|=
name|sessionsByID
operator|.
name|get
argument_list|(
name|sessionID
argument_list|)
decl_stmt|;
if|if
condition|(
name|ses
operator|==
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Tried to destroy nonexisting session {} . Could it have been previously destroyed?"
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
else|else
block|{
name|ses
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ses
operator|instanceof
name|SessionImpl
condition|)
operator|(
operator|(
name|SessionImpl
operator|)
name|ses
operator|)
operator|.
name|state
operator|=
name|State
operator|.
name|ZOMBIE
expr_stmt|;
comment|// Make session no longer referenceable
name|removeSession
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|fireSessionDestroyed
argument_list|(
name|ses
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NonReferenceableSessionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Tried to kick a dead horse on session \"{}\" which was already in a zombie state."
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fireSessionCreated
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|SessionEvent
name|e
init|=
operator|new
name|SessionEvent
argument_list|(
name|session
argument_list|,
name|OperationType
operator|.
name|CREATE
argument_list|)
decl_stmt|;
for|for
control|(
name|SessionListener
name|l
range|:
name|listeners
control|)
name|l
operator|.
name|sessionChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireSessionDestroyed
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|SessionEvent
name|e
init|=
operator|new
name|SessionEvent
argument_list|(
name|session
argument_list|,
name|OperationType
operator|.
name|KILL
argument_list|)
decl_stmt|;
for|for
control|(
name|SessionListener
name|l
range|:
name|listeners
control|)
name|l
operator|.
name|sessionChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getActiveSessionLimit
parameter_list|()
block|{
return|return
name|maxSessions
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getDefaultNamespace
parameter_list|()
block|{
return|return
name|baseNS
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getNamespace
parameter_list|()
block|{
return|return
name|getDefaultNamespace
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRegisteredSessionIDs
parameter_list|()
block|{
return|return
name|sessionsByID
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Session
name|getSession
parameter_list|(
name|String
name|sessionID
parameter_list|)
block|{
return|return
name|sessionsByID
operator|.
name|get
argument_list|(
name|sessionID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|SessionListener
argument_list|>
name|getSessionListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
specifier|private
name|void
name|rebuildSessions
parameter_list|()
block|{
if|if
condition|(
name|ontologyProvider
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No ontology provider supplied. Cannot rebuild sessions"
argument_list|)
expr_stmt|;
return|return;
block|}
name|OntologyNetworkConfiguration
name|struct
init|=
name|ontologyProvider
operator|.
name|getOntologyNetworkConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sessionId
range|:
name|struct
operator|.
name|getSessionIDs
argument_list|()
control|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Rebuilding session with ID \"{}\""
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|Session
name|session
decl_stmt|;
try|try
block|{
name|session
operator|=
name|createSession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateSessionIDException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Session \"{}\" already exists and will be reused."
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|session
operator|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SessionLimitException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot create session {}. Session limit of {} reached."
argument_list|,
name|sessionId
argument_list|,
name|getActiveSessionLimit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Register even if some ontologies were to fail to be restored afterwards.
name|sessionsByID
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Restored sessions are inactive at first.
for|for
control|(
name|OWLOntologyID
name|key
range|:
name|struct
operator|.
name|getOntologyKeysForSession
argument_list|(
name|sessionId
argument_list|)
control|)
try|try
block|{
name|session
operator|.
name|addOntology
argument_list|(
operator|new
name|StoredOntologySource
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingOntologyException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find an ontology with public key {} to be managed by session \"{}\". Proceeding to next ontology."
argument_list|,
name|key
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception caught while trying to add ontology with public key "
operator|+
name|key
operator|+
literal|" to rebuilt session \""
operator|+
name|sessionId
operator|+
literal|"\". Proceeding to next ontology."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|String
name|scopeId
range|:
name|struct
operator|.
name|getAttachedScopes
argument_list|(
name|sessionId
argument_list|)
control|)
block|{
comment|/*                  * The scope is attached by reference, so we won't have to bother checking if the scope has                  * been rebuilt by then (which could not happen if the SessionManager is being activated                  * first).                  */
name|session
operator|.
name|attachScope
argument_list|(
name|scopeId
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Session \"{}\" rebuilt in {} ms."
argument_list|,
name|sessionId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|synchronized
name|void
name|removeSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|String
name|id
init|=
name|session
operator|.
name|getID
argument_list|()
decl_stmt|;
name|Session
name|s2
init|=
name|sessionsByID
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
name|s2
condition|)
name|sessionsByID
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSessionListener
parameter_list|(
name|SessionListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setActiveSessionLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|maxSessions
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDefaultNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namespace cannot be null."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Query is not allowed in OntoNet namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Fragment is not allowed in OntoNet namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OntoNet namespaces must not end with a hash ('#') character."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Namespace {} does not end with slash character ('/'). It will be added automatically."
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseNS
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
literal|"/"
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|baseNS
operator|=
name|namespace
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
name|setDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeSession
parameter_list|(
name|String
name|sessionID
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|NonReferenceableSessionException
throws|,
name|OWLOntologyStorageException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not necessary. Session content is always stored by default in the current implementation."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scopeActivated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|scopeCreated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|scopeDeactivated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{
for|for
control|(
name|String
name|sid
range|:
name|getRegisteredSessionIDs
argument_list|()
control|)
name|getSession
argument_list|(
name|sid
argument_list|)
operator|.
name|detachScope
argument_list|(
name|scope
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scopeUnregistered
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{
for|for
control|(
name|String
name|sid
range|:
name|getRegisteredSessionIDs
argument_list|()
control|)
name|getSession
argument_list|(
name|sid
argument_list|)
operator|.
name|detachScope
argument_list|(
name|scope
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scopeRegistered
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{}
block|}
end_class

end_unit

