begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|Lockable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|MissingOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|OntologyCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|OntologyCollectorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|OntologyCollectorModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|GraphSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OWLExportable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologySetProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|RemoveImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A basic Clerezza-native implementation of an ontology collector.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOntologyCollectorImpl
implements|implements
name|OntologyCollector
implements|,
name|Lockable
implements|,
name|OntologyInputSourceHandler
implements|,
name|OWLExportable
block|{
specifier|protected
name|String
name|_id
init|=
literal|null
decl_stmt|;
comment|/**      * How many levels back to go in the namespace+id concatenation in order to write resolvable import      * statements.      */
specifier|protected
name|int
name|backwardPathLength
init|=
literal|0
decl_stmt|;
specifier|protected
name|ConnectivityPolicy
name|connectivityPolicy
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|OntologyCollectorListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|OntologyCollectorListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Indicates whether this ontology space is marked as read-only. Default value is false.      */
specifier|protected
specifier|volatile
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The identifier of the ontologies directly managed by this collector (i.e. that were directly added to      * this space, hence not including those just pulled in via import statements).<br>      *<br>      * XXX depending on whether we want to support multiple versionIRIs in the same collector, we may want to      * turn this one into a set of {@link OWLOntologyID}.      */
specifier|protected
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|managedOntologies
decl_stmt|;
specifier|protected
name|IRI
name|namespace
init|=
literal|null
decl_stmt|;
specifier|protected
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|supportedTypes
decl_stmt|;
specifier|public
name|AbstractOntologyCollectorImpl
parameter_list|(
name|String
name|id
parameter_list|,
name|IRI
name|namespace
parameter_list|,
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
parameter_list|)
block|{
comment|// Supports OWL API and Clerezza
name|supportedTypes
operator|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|supportedTypes
operator|.
name|add
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedTypes
operator|.
name|add
argument_list|(
name|TripleCollection
operator|.
name|class
argument_list|)
expr_stmt|;
name|setID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|this
operator|.
name|ontologyProvider
operator|=
name|ontologyProvider
expr_stmt|;
name|this
operator|.
name|managedOntologies
operator|=
operator|new
name|HashSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|OWLOntologyID
name|addOntology
parameter_list|(
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|ontologySource
parameter_list|)
throws|throws
name|UnmodifiableOntologyCollectorException
block|{
comment|// Check for error conditions.
if|if
condition|(
name|locked
condition|)
throw|throw
operator|new
name|UnmodifiableOntologyCollectorException
argument_list|(
name|this
argument_list|)
throw|;
if|if
condition|(
name|ontologySource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Ontology source cannot be null."
argument_list|)
throw|;
name|log
operator|.
name|debug
argument_list|(
literal|"Adding ontology to collector {}"
argument_list|,
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ontologySource
operator|.
name|hasRootOntology
argument_list|()
condition|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|ontologySource
operator|.
name|getRootOntology
argument_list|()
decl_stmt|;
comment|// // FIXME restore ownership management, but maybe not by directly setting the versionIRI
comment|// if (ontologyProvider.hasOntology(id.getOntologyIRI())) if (o instanceof MGraph)
comment|// claimOwnership((MGraph) o);
comment|// else if (o instanceof OWLOntology) claimOwnership((OWLOntology) o);
comment|// Check the origin anyhow, as it may be useful for setting aliases with physical locations etc.
if|if
condition|(
name|ontologySource
operator|.
name|hasOrigin
argument_list|()
condition|)
name|key
operator|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|o
argument_list|,
literal|false
argument_list|,
name|ontologySource
operator|.
name|getOrigin
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|key
operator|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|o
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|managedOntologies
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// Note that imported ontologies are not considered as managed! TODO should we change this?
name|log
operator|.
name|info
argument_list|(
literal|"Add ontology completed in {} ms."
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
operator|)
argument_list|)
expr_stmt|;
comment|// Fire the event
name|fireOntologyAdded
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ontologySource
operator|.
name|hasOrigin
argument_list|()
condition|)
block|{
comment|// Just the origin : see if it is satisfiable
name|log
operator|.
name|debug
argument_list|(
literal|"Checking origin satisfiability..."
argument_list|)
expr_stmt|;
name|Origin
argument_list|<
name|?
argument_list|>
name|origin
init|=
name|ontologySource
operator|.
name|getOrigin
argument_list|()
decl_stmt|;
name|Object
name|ref
init|=
name|origin
operator|.
name|getReference
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Origin wraps a {}"
argument_list|,
name|ref
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|IRI
condition|)
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Deferring addition to physical IRI {} (if available)."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|key
operator|=
name|addOntology
argument_list|(
operator|new
name|RootOntologyIRISource
argument_list|(
operator|(
name|IRI
operator|)
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|instanceof
name|UriRef
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Deferring addition to stored Clerezza graph {} (if available)."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|key
operator|=
name|addOntology
argument_list|(
operator|new
name|GraphSource
argument_list|(
operator|(
name|UriRef
operator|)
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|instanceof
name|OWLOntologyID
condition|)
block|{
name|OWLOntologyID
name|idref
init|=
operator|(
name|OWLOntologyID
operator|)
name|ref
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Deferring addition to stored ontology with public key {} (if available)."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ontologyProvider
operator|.
name|hasOntology
argument_list|(
name|idref
argument_list|)
condition|)
throw|throw
operator|new
name|MissingOntologyException
argument_list|(
name|this
argument_list|,
name|idref
argument_list|)
throw|;
name|key
operator|=
name|idref
expr_stmt|;
if|if
condition|(
name|managedOntologies
operator|.
name|add
argument_list|(
name|idref
argument_list|)
condition|)
name|fireOntologyAdded
argument_list|(
name|idref
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid origin "
operator|+
name|origin
argument_list|)
throw|;
block|}
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Ontology source must provide either an ontology object, or a way to reference one (i.e. an origin)."
argument_list|)
throw|;
name|log
operator|.
name|info
argument_list|(
literal|"Public key : {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addOntologyCollectorListener
parameter_list|(
name|OntologyCollectorListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|claimOwnership
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearOntologyCollectorListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|arg0
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|arg0
operator|instanceof
name|OntologyCollector
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|arg0
condition|)
return|return
literal|true
return|;
name|log
operator|.
name|warn
argument_list|(
literal|"{} only implements weak equality, i.e. managed ontologies are only checked by public key, not by content."
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|OntologyCollector
name|coll
init|=
operator|(
name|OntologyCollector
operator|)
name|arg0
decl_stmt|;
return|return
name|this
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|coll
operator|.
name|getID
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getDefaultNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|coll
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|listManagedOntologies
argument_list|()
operator|.
name|equals
argument_list|(
name|coll
operator|.
name|listManagedOntologies
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getSupportedOntologyTypes
argument_list|()
operator|.
name|equals
argument_list|(
name|coll
operator|.
name|getSupportedOntologyTypes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|export
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
return|return
name|export
argument_list|(
name|returnType
argument_list|,
name|merge
argument_list|,
name|getDefaultNamespace
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|export
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
block|{
if|if
condition|(
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
return|return
operator|(
name|O
operator|)
name|exportToOWLOntology
argument_list|(
name|merge
argument_list|,
name|universalPrefix
argument_list|)
return|;
block|}
if|if
condition|(
name|TripleCollection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
name|TripleCollection
name|root
init|=
name|exportToMGraph
argument_list|(
name|merge
argument_list|,
name|universalPrefix
argument_list|)
decl_stmt|;
comment|// A Clerezza graph has to be cast properly.
if|if
condition|(
name|returnType
operator|==
name|Graph
operator|.
name|class
condition|)
name|root
operator|=
operator|(
operator|(
name|MGraph
operator|)
name|root
operator|)
operator|.
name|getGraph
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|returnType
operator|==
name|MGraph
operator|.
name|class
condition|)
block|{}
return|return
operator|(
name|O
operator|)
name|root
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot export ontology collector "
operator|+
name|getID
argument_list|()
operator|+
literal|" to a "
operator|+
name|returnType
argument_list|)
throw|;
block|}
comment|/**      * This method has no conversion calls, to it can be invoked by subclasses that wish to modify it      * afterwards.      *       * @param merge      * @return      */
specifier|protected
name|MGraph
name|exportToMGraph
parameter_list|(
name|boolean
name|merge
parameter_list|,
name|IRI
name|prefix
parameter_list|)
block|{
comment|// if (merge) throw new UnsupportedOperationException(
comment|// "Merge not implemented yet for Clerezza triple collections.");
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// No need to store, give it a name, or anything.
name|MGraph
name|root
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|UriRef
name|iri
init|=
operator|new
name|UriRef
argument_list|(
name|prefix
operator|+
name|_id
argument_list|)
decl_stmt|;
comment|// Add the import declarations for directly managed ontologies.
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
comment|// Set the ontology ID
name|root
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|iri
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|merge
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Merging of Clerezza triple collections is only implemented one level down. Import statements will be preserved for further levels."
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|Set
argument_list|<
name|Resource
argument_list|>
name|importTargets
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|ontologyId
range|:
name|managedOntologies
control|)
block|{
name|Graph
name|g
init|=
name|getOntology
argument_list|(
name|ontologyId
argument_list|,
name|Graph
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAll
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|it
operator|=
name|g
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IRI
name|tgt
decl_stmt|;
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
name|tgt
operator|=
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|r
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|r
operator|instanceof
name|Literal
condition|)
name|tgt
operator|=
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|r
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|tgt
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tgt
operator|=
name|URIUtils
operator|.
name|sanitize
argument_list|(
name|tgt
argument_list|)
expr_stmt|;
name|importTargets
operator|.
name|add
argument_list|(
operator|new
name|UriRef
argument_list|(
name|tgt
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"FAILED to obtain import target from resource {}"
argument_list|,
name|r
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|it
operator|=
name|g
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|ontology
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Removing all triples related to {} from {}"
argument_list|,
name|ontology
argument_list|,
name|iri
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|g
operator|.
name|filter
argument_list|(
name|ontology
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
name|root
operator|.
name|remove
argument_list|(
name|it2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*                      * Reinstate import statements, though. If imported ontologies were not merged earlier, we                      * are not doing it now anyway.                      */
for|for
control|(
name|Resource
name|target
range|:
name|importTargets
control|)
name|root
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|iri
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|base
init|=
name|prefix
operator|+
name|getID
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|backwardPathLength
condition|;
name|i
operator|++
control|)
name|base
operator|=
name|URIUtils
operator|.
name|upOne
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|base
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|base
operator|+=
literal|"/"
expr_stmt|;
comment|// The key set of managedOntologies contains the ontology IRIs, not their storage keys.
for|for
control|(
name|OWLOntologyID
name|ontologyId
range|:
name|managedOntologies
control|)
block|{
name|IRI
name|physIRI
init|=
comment|// ontologyId.getVersionIRI() == null ? URIUtils.sanitize(IRI
comment|// .create(base + ontologyId.getOntologyIRI())) : URIUtils.sanitize(IRI
comment|// .create(base + ontologyId.getVersionIRI()));
name|IRI
operator|.
name|create
argument_list|(
name|base
operator|+
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|iri
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
operator|new
name|UriRef
argument_list|(
name|physIRI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Clerezza export of {} completed in {} ms."
argument_list|,
name|getID
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
return|return
name|root
return|;
block|}
specifier|private
name|TripleCollection
name|getMergedTc
parameter_list|()
block|{
name|TripleCollection
name|result
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
comment|// Takes less memory than the Indexed one
for|for
control|(
name|OWLOntologyID
name|key
range|:
name|listManagedOntologies
argument_list|()
control|)
block|{
comment|// TODO when implemented, switch to true.
name|TripleCollection
name|managed
init|=
name|getOntology
argument_list|(
name|key
argument_list|,
name|TripleCollection
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Resource
argument_list|>
name|exclusions
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|managed
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|exclusions
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Triple
name|t
range|:
name|managed
control|)
if|if
condition|(
operator|!
name|exclusions
operator|.
name|contains
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// TODO Purge property usage
return|return
name|result
return|;
block|}
comment|/**      * This method has no conversion calls, to it can be invoked by subclasses that wish to modify it      * afterwards.      *       * FIXME not merging yet FIXME not including imported ontologies unless they are merged *before* storage.      *       * @param merge      * @return      */
specifier|protected
name|OWLOntology
name|exportToOWLOntology
parameter_list|(
name|boolean
name|merge
parameter_list|,
name|IRI
name|prefix
parameter_list|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Create a new ontology
name|OWLOntology
name|root
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|prefix
operator|+
name|_id
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// It should be impossible, but just in case.
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e1
parameter_list|)
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|iri
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|_id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
comment|// Add the import declarations for directly managed ontologies.
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|merge
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Merging {} with its imports."
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|ontologyId
range|:
name|managedOntologies
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Merging {} with {}."
argument_list|,
name|ontologyId
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|getOntology
argument_list|(
name|ontologyId
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OWLOntologySetProvider
name|provider
init|=
operator|new
name|OWLOntologySetProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|()
block|{
return|return
name|set
return|;
block|}
block|}
decl_stmt|;
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|provider
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|,
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to merge imports for ontology "
operator|+
name|iri
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Add the import declarations for directly managed ontologies.
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|ontologyManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|String
name|base
init|=
name|prefix
operator|+
name|getID
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|backwardPathLength
condition|;
name|i
operator|++
control|)
name|base
operator|=
name|URIUtils
operator|.
name|upOne
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|base
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|base
operator|+=
literal|"/"
expr_stmt|;
comment|// The key set of managedOntologies contains the ontology IRIs, not their storage keys.
for|for
control|(
name|OWLOntologyID
name|ontologyId
range|:
name|managedOntologies
control|)
block|{
comment|// XXX some day the versionIRI will be the only physical reference for the ontology
name|IRI
name|physIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|base
operator|+
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|root
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|physIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ontologyManager
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"OWL export of {} completed in {} ms."
argument_list|,
name|getID
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
comment|/**      * Notifies all ontology space listeners that an ontology has been added to this space.      *       * @param ontologyIri      *            the identifier of the ontology that was added to this space.      */
specifier|protected
name|void
name|fireOntologyAdded
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
for|for
control|(
name|OntologyCollectorListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyAdded
argument_list|(
name|this
argument_list|,
name|ontologyId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Notifies all ontology space listeners that an ontology has been removed from this space.      *       * @param ontologyIri      *            the identifier of the ontology that was removed from this space.      */
specifier|protected
name|void
name|fireOntologyRemoved
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
for|for
control|(
name|OntologyCollectorListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyRemoved
argument_list|(
name|this
argument_list|,
name|ontologyId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectivityPolicy
name|getConnectivityPolicy
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectivityPolicy
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getDefaultNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|_id
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|Set
argument_list|<
name|O
argument_list|>
name|getManagedOntologies
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|withClosure
parameter_list|)
block|{
if|if
condition|(
name|withClosure
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Closure support not implemented yet. Will merge instead."
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|O
argument_list|>
name|ontologies
init|=
operator|new
name|HashSet
argument_list|<
name|O
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|managedOntologies
control|)
comment|// FIXME temporary fix is to merge instead of including closure
name|ontologies
operator|.
name|add
argument_list|(
name|getOntology
argument_list|(
name|id
argument_list|,
name|returnType
argument_list|,
name|withClosure
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|ontologies
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getNamespace
parameter_list|()
block|{
return|return
name|getDefaultNamespace
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|returnType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|returnType
argument_list|,
name|merge
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|returnType
argument_list|,
name|merge
argument_list|,
name|universalPrefix
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|returnType
argument_list|,
name|universalPrefix
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
name|ontologyId
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
name|ontologyId
argument_list|,
name|returnType
argument_list|,
name|merge
argument_list|,
name|getDefaultNamespace
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
block|{
if|if
condition|(
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
return|return
operator|(
name|O
operator|)
name|getOntologyAsOWLOntology
argument_list|(
name|ontologyId
argument_list|,
name|merge
argument_list|,
name|universalPrefix
argument_list|)
return|;
if|if
condition|(
name|TripleCollection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
name|TripleCollection
name|root
init|=
name|getOntologyAsMGraph
argument_list|(
name|ontologyId
argument_list|,
name|merge
argument_list|,
name|universalPrefix
argument_list|)
decl_stmt|;
comment|// A Clerezza graph has to be cast properly.
if|if
condition|(
name|returnType
operator|==
name|Graph
operator|.
name|class
condition|)
name|root
operator|=
operator|(
operator|(
name|MGraph
operator|)
name|root
operator|)
operator|.
name|getGraph
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|returnType
operator|==
name|MGraph
operator|.
name|class
condition|)
block|{}
comment|// We don't know of other TripleCollection subclasses: just try to cast the MGraph.
return|return
operator|(
name|O
operator|)
name|root
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot export ontology collector "
operator|+
name|getID
argument_list|()
operator|+
literal|" to a "
operator|+
name|returnType
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
name|ontologyId
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|,
name|universalPrefix
argument_list|)
return|;
block|}
specifier|protected
name|MGraph
name|getOntologyAsMGraph
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
block|{
if|if
condition|(
name|merge
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Merge not implemented yet for Clerezza triple collections."
argument_list|)
throw|;
comment|/*          * TODO manage import rewrites better once the container ID is fully configurable (i.e. instead of          * going upOne() add "session" or "ontology" if needed). But only do this if we keep considering          * imported ontologies as *not* managed.          */
comment|// if (!merge) { // TODO
name|MGraph
name|o
init|=
operator|new
name|IndexedMGraph
argument_list|(
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyId
argument_list|,
name|MGraph
operator|.
name|class
argument_list|,
name|merge
argument_list|)
argument_list|)
decl_stmt|;
comment|// Now rewrite import statements
comment|// Scan import statements for each owl:Ontology instance (hopefully one).
name|String
name|tid
init|=
name|getID
argument_list|()
decl_stmt|;
comment|// Bit of a hack : since ontology spaces are named like {scopeid}/{core|custom}, in that particular
comment|// case we go back to {scopeid}, whereas for sessions we maintain their original id.
if|if
condition|(
name|backwardPathLength
operator|>
literal|0
condition|)
name|tid
operator|=
name|tid
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|List
argument_list|<
name|Triple
argument_list|>
name|newImports
init|=
operator|new
name|LinkedList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|o
init|)
block|{
name|it
operator|=
name|o
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// We use this list to avoid concurrent modification exceptions.
name|List
argument_list|<
name|Triple
argument_list|>
name|replaceUs
init|=
operator|new
name|LinkedList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|replaceUs
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Triple
name|t
range|:
name|replaceUs
control|)
block|{
name|String
name|s
init|=
operator|(
call|(
name|UriRef
call|)
argument_list|(
name|t
operator|.
name|getObject
argument_list|()
argument_list|)
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
comment|// FIXME note the different import targets in the OWLOntology and TripleColllection objects!
comment|// s = s.substring(s.indexOf("::") + 2, s.length());
name|boolean
name|managed
init|=
name|managedOntologies
operator|.
name|contains
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|UriRef
name|target
init|=
operator|new
name|UriRef
argument_list|(
operator|(
name|managed
condition|?
name|universalPrefix
operator|+
literal|"/"
operator|+
name|tid
operator|+
literal|"/"
else|:
name|URIUtils
operator|.
name|upOne
argument_list|(
name|universalPrefix
argument_list|)
operator|+
literal|"/"
operator|)
operator|+
name|s
argument_list|)
decl_stmt|;
name|o
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|newImports
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Triple
name|t
range|:
name|newImports
control|)
name|o
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// } // TODO else if (merge)
return|return
name|o
return|;
block|}
specifier|protected
name|OWLOntology
name|getOntologyAsOWLOntology
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
block|{
comment|// if (merge) throw new UnsupportedOperationException("Merge not implemented yet for OWLOntology.");
comment|// Remove the check below. It might be an unmanaged dependency (TODO remove from collector and
comment|// reintroduce check?).
comment|// if (!hasOntology(ontologyIri)) return null;
name|OWLOntology
name|o
decl_stmt|;
name|o
operator|=
operator|(
name|OWLOntology
operator|)
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyId
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
name|merge
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Merging {} with its imports, if any."
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|// Actually, if the provider already performed the merge, this won't happen
for|for
control|(
name|OWLOntology
name|impo
range|:
name|o
operator|.
name|getImportsClosure
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Imported ontology {} will be merged with {}."
argument_list|,
name|impo
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|impo
argument_list|)
expr_stmt|;
block|}
name|OWLOntologySetProvider
name|provider
init|=
operator|new
name|OWLOntologySetProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|()
block|{
return|return
name|set
return|;
block|}
block|}
decl_stmt|;
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|provider
argument_list|)
decl_stmt|;
try|try
block|{
name|o
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|,
name|ontologyId
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to merge imports for ontology "
operator|+
name|ontologyId
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// do not reassign the root ontology
block|}
block|}
else|else
block|{
comment|// Rewrite import statements
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
comment|/*              * TODO manage import rewrites better once the container ID is fully configurable (i.e. instead of              * going upOne() add "session" or "ontology" if needed). But only do this if we keep considering              * imported ontologies as *not* managed.              */
for|for
control|(
name|OWLImportsDeclaration
name|oldImp
range|:
name|o
operator|.
name|getImportsDeclarations
argument_list|()
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|RemoveImport
argument_list|(
name|o
argument_list|,
name|oldImp
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|oldImp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// FIXME Ugly way to check, but we'll get through with it
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"::"
argument_list|)
condition|)
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"::"
argument_list|)
operator|+
literal|2
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|managed
init|=
name|managedOntologies
operator|.
name|contains
argument_list|(
name|oldImp
operator|.
name|getIRI
argument_list|()
argument_list|)
decl_stmt|;
comment|// For space, always go up at least one
name|String
name|tid
init|=
name|getID
argument_list|()
decl_stmt|;
if|if
condition|(
name|backwardPathLength
operator|>
literal|0
condition|)
name|tid
operator|=
name|tid
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|IRI
name|target
init|=
name|IRI
operator|.
name|create
argument_list|(
operator|(
name|managed
condition|?
name|universalPrefix
operator|+
literal|"/"
operator|+
name|tid
operator|+
literal|"/"
else|:
name|URIUtils
operator|.
name|upOne
argument_list|(
name|universalPrefix
argument_list|)
operator|+
literal|"/"
operator|)
operator|+
name|s
argument_list|)
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|o
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|target
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|OntologyCollectorListener
argument_list|>
name|getOntologyCollectorListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSupportedOntologyTypes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|supportedTypes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
return|return
name|hasOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|aliases
init|=
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedOntologies
operator|.
name|contains
argument_list|(
name|ontologyId
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|aliases
control|)
if|if
condition|(
name|managedOntologies
operator|.
name|contains
argument_list|(
name|alias
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|locked
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|listManagedOntologies
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|(
name|managedOntologies
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeOntology
parameter_list|(
name|IRI
name|ontologyId
parameter_list|)
throws|throws
name|OntologyCollectorModificationException
block|{
name|removeOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeOntology
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
throws|throws
name|OntologyCollectorModificationException
block|{
if|if
condition|(
name|publicKey
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot remove an ontology by providing a null public key."
argument_list|)
throw|;
if|if
condition|(
name|publicKey
operator|.
name|getOntologyIRI
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot remove an ontology whose public key has a null ontology IRI."
argument_list|)
throw|;
if|if
condition|(
name|locked
condition|)
throw|throw
operator|new
name|UnmodifiableOntologyCollectorException
argument_list|(
name|this
argument_list|)
throw|;
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|aliases
init|=
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|publicKey
argument_list|)
decl_stmt|;
name|aliases
operator|.
name|add
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|aliases
control|)
name|removed
operator||=
name|managedOntologies
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
comment|// Don't fire if the ontology wasn't there in the first place.
if|if
condition|(
name|removed
condition|)
name|fireOntologyRemoved
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|MissingOntologyException
argument_list|(
name|this
argument_list|,
name|publicKey
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeOntologyCollectorListener
parameter_list|(
name|OntologyCollectorListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConnectivityPolicy
parameter_list|(
name|ConnectivityPolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|connectivityPolicy
operator|=
name|policy
expr_stmt|;
block|}
comment|/**      * @param namespace      *            The OntoNet namespace that will prefix the space ID in Web references. This implementation      *            only allows non-null and non-empty IRIs, with no query or fragment. Hash URIs are not      *            allowed, slash URIs are preferred. If neither, a slash will be concatenated and a warning      *            will be logged.      */
annotation|@
name|Override
specifier|public
name|void
name|setDefaultNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Stanbol ontology namespace cannot be null."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Query is not allowed in Stanbol ontology namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Fragment is not allowed in Stanbol ontology namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Stanbol ontology namespaces must not end with a hash ('#') character."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Namespace {} does not end with a slash ('/') character. It be added automatically."
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|setID
parameter_list|(
name|String
name|id
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
name|setDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|locked
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|this
operator|.
name|locked
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

