begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An ontology source that rewrites the physical IRI by appending the logical one to the scope ID. If the  * ontology is anonymous, the original physical IRI is retained.  *   * @author alessandro  *   */
end_comment

begin_class
specifier|public
class|class
name|ScopeOntologySource
extends|extends
name|AbstractOntologyInputSource
block|{
specifier|public
name|ScopeOntologySource
parameter_list|(
name|IRI
name|scopeIri
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|,
name|IRI
name|origin
parameter_list|)
block|{
name|bindRootOntology
argument_list|(
name|ontology
argument_list|)
expr_stmt|;
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScopeOntologySource
operator|.
name|class
argument_list|)
operator|.
name|debug
argument_list|(
literal|"Rewriting {} to {}/{}"
argument_list|,
operator|new
name|IRI
index|[]
block|{
name|origin
block|,
name|scopeIri
block|,
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|IRI
name|iri
init|=
operator|!
name|ontology
operator|.
name|isAnonymous
argument_list|()
condition|?
name|IRI
operator|.
name|create
argument_list|(
name|scopeIri
operator|+
literal|"/"
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
else|:
name|origin
decl_stmt|;
name|bindPhysicalIri
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SCOPE_ONT_IRI<"
operator|+
name|getPhysicalIRI
argument_list|()
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

