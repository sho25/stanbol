begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|CoreOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|CustomOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyCollectorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SessionOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SpaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link OntologySpaceFactory} based on Clerezza.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologySpaceFactoryImpl
implements|implements
name|OntologySpaceFactory
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|IRI
name|namespace
decl_stmt|;
specifier|protected
name|OfflineConfiguration
name|offline
decl_stmt|;
specifier|protected
name|ScopeRegistry
name|registry
decl_stmt|;
specifier|protected
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
name|provider
decl_stmt|;
specifier|public
name|OntologySpaceFactoryImpl
parameter_list|(
name|ScopeRegistry
name|registry
parameter_list|,
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
name|provider
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|IRI
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|offline
operator|=
name|offline
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
comment|/**      * Utility method for configuring ontology spaces after creating them.      *       * @param s      * @param scopeID      * @param rootSource      */
specifier|private
name|void
name|configureSpace
parameter_list|(
name|OntologySpace
name|s
parameter_list|,
name|String
name|scopeID
parameter_list|,
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
modifier|...
name|ontologySources
parameter_list|)
block|{
comment|// FIXME: ensure that this is not null AND convert to using Strings for scope IDs
name|OntologyScope
name|parentScope
init|=
name|registry
operator|.
name|getScope
argument_list|(
name|scopeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentScope
operator|!=
literal|null
operator|&&
name|parentScope
operator|instanceof
name|OntologyCollectorListener
condition|)
name|s
operator|.
name|addListener
argument_list|(
operator|(
name|OntologyCollectorListener
operator|)
name|parentScope
argument_list|)
expr_stmt|;
comment|// Set the supplied ontology's parent as the root for this space.
if|if
condition|(
name|ontologySources
operator|!=
literal|null
condition|)
try|try
block|{
for|for
control|(
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|src
range|:
name|ontologySources
control|)
name|s
operator|.
name|addOntology
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Ontology space "
operator|+
name|s
operator|.
name|getID
argument_list|()
operator|+
literal|" was found locked at creation time!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// s.setUp();
block|}
annotation|@
name|Override
specifier|public
name|CoreOntologySpace
name|createCoreOntologySpace
parameter_list|(
name|String
name|scopeId
parameter_list|,
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
modifier|...
name|coreSources
parameter_list|)
block|{
name|CoreOntologySpace
name|s
init|=
operator|new
name|CoreOntologySpaceImpl
argument_list|(
name|scopeId
argument_list|,
name|namespace
argument_list|,
name|provider
operator|.
name|getStore
argument_list|()
argument_list|)
decl_stmt|;
name|configureSpace
argument_list|(
name|s
argument_list|,
name|scopeId
argument_list|,
name|coreSources
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|CustomOntologySpace
name|createCustomOntologySpace
parameter_list|(
name|String
name|scopeId
parameter_list|,
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
modifier|...
name|customSources
parameter_list|)
block|{
name|CustomOntologySpace
name|s
init|=
operator|new
name|CustomOntologySpaceImpl
argument_list|(
name|scopeId
argument_list|,
name|namespace
argument_list|,
name|provider
operator|.
name|getStore
argument_list|()
argument_list|)
decl_stmt|;
name|configureSpace
argument_list|(
name|s
argument_list|,
name|scopeId
argument_list|,
name|customSources
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntologySpace
name|createOntologySpace
parameter_list|(
name|String
name|scopeId
parameter_list|,
name|SpaceType
name|type
parameter_list|,
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
modifier|...
name|ontologySources
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CORE
case|:
return|return
name|createCoreOntologySpace
argument_list|(
name|scopeId
argument_list|,
name|ontologySources
argument_list|)
return|;
case|case
name|CUSTOM
case|:
return|return
name|createCustomOntologySpace
argument_list|(
name|scopeId
argument_list|,
name|ontologySources
argument_list|)
return|;
case|case
name|SESSION
case|:
comment|// return createSessionOntologySpace(scopeId, ontologySources);
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Factory "
operator|+
name|getClass
argument_list|()
operator|+
literal|"cannot create obsolete session spaces."
argument_list|)
throw|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SessionOntologySpace
name|createSessionOntologySpace
parameter_list|(
name|String
name|scopeId
parameter_list|,
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
modifier|...
name|sessionSources
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Newer ontology space factory implementations such as "
operator|+
name|getClass
argument_list|()
operator|+
literal|" no longer allow the creation of session spaces. Please store data in sessions"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|this
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

