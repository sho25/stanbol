begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|MissingOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SessionOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SpaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologySpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|ClerezzaOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StringDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StringDocumentTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of an ontology space. While it still leaves it up to developers to decide what  * locking policies to adopt for subclasses (in the<code>setUp()</code> method), it provides default  * implementations of all other interface methods.<br>  *<br>  * NOTE: By default, an ontology space is NOT write-locked. Developers need to set the<code>locked</code>  * variable to true to make the space read-only.  *   *   * @author alessandro  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOntologySpaceImpl
implements|implements
name|OntologySpace
block|{
specifier|protected
name|IRI
name|_id
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|OntologySpaceListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|OntologySpaceListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Indicates whether this ontology space is marked as read-only. Default value is false.      */
specifier|protected
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Each ontology space comes with its OWL ontology manager. By default, it is not available to the outside      * world, unless subclasses implement methods to return it.      */
specifier|protected
name|OWLOntologyManager
name|ontologyManager
decl_stmt|;
specifier|protected
name|ClerezzaOntologyStorage
name|storage
decl_stmt|;
specifier|protected
name|IRI
name|parentID
init|=
literal|null
decl_stmt|;
comment|/**      * The identifier of the ontologies directly managed by this space (i.e. that were directly added to this      * space, hence not including those just pulled in via import statements).      */
specifier|protected
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|managedOntologies
decl_stmt|;
annotation|@
name|Deprecated
specifier|protected
name|OWLOntology
name|rootOntology
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|silent
init|=
literal|false
decl_stmt|;
specifier|protected
name|AbstractOntologySpaceImpl
parameter_list|(
name|IRI
name|spaceID
parameter_list|,
name|SpaceType
name|type
parameter_list|,
name|ClerezzaOntologyStorage
name|storage
parameter_list|)
block|{
name|this
argument_list|(
name|spaceID
argument_list|,
name|type
argument_list|,
name|storage
argument_list|,
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new ontology space with the supplied ontology manager as the default manager for this space.      *       * @param spaceID      *            the IRI that will uniquely identify this space.      * @param parentID      *            IRI of the parent scope (TODO: get rid of it).      * @param ontologyManager      *            the default ontology manager for this space.      */
specifier|protected
name|AbstractOntologySpaceImpl
parameter_list|(
name|IRI
name|spaceID
parameter_list|,
name|SpaceType
name|type
parameter_list|,
name|ClerezzaOntologyStorage
name|storage
parameter_list|,
name|OWLOntologyManager
name|ontologyManager
parameter_list|)
block|{
comment|// this.parentID = parentID;
comment|// SUFFIX = type.getIRISuffix();
comment|// // FIXME: ensure that this is not null
comment|// OntologyScope parentScope = ONManager.get().getScopeRegistry()
comment|// .getScope(parentID);
comment|//
comment|// if (parentScope != null&& parentScope instanceof OntologySpaceListener)
comment|// this.addOntologySpaceListener((OntologySpaceListener) parentScope);
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
name|this
operator|.
name|_id
operator|=
name|spaceID
expr_stmt|;
if|if
condition|(
name|ontologyManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|ontologyManager
operator|=
name|ontologyManager
expr_stmt|;
else|else
name|this
operator|.
name|ontologyManager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|managedOntologies
operator|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * TODO: manage import statements      *       * TODO 2 : manage anonymous ontologies.      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addOntology
parameter_list|(
name|OntologyInputSource
name|ontologySource
parameter_list|)
throws|throws
name|UnmodifiableOntologySpaceException
block|{
if|if
condition|(
name|locked
condition|)
throw|throw
operator|new
name|UnmodifiableOntologySpaceException
argument_list|(
name|this
argument_list|)
throw|;
comment|// if (getTopOntology() == null) {
comment|// log.warn("Root ontology for ontology space {} was found to be null. This should not happen.",
comment|// this.getID());
comment|// // If no top ontology has been set, we must create one first.
comment|// IRI rootIri = null;
comment|// try {
comment|// rootIri = IRI.create(StringUtils.stripIRITerminator(this.getID()) + "/root.owl");
comment|// OntologyInputSource src = new RootOntologySource(ontologyManager.createOntology(rootIri),
comment|// null);
comment|// // Don't bother about the ontology to be added right now.
comment|// setTopOntology(src, false);
comment|// } catch (OWLOntologyCreationException e) {
comment|// log.error(
comment|// "Exception caught when creating top ontology " + rootIri + " for space " + this.getID()
comment|// + ".", e);
comment|// // No point in continuing if we can't even create the root...
comment|// return;
comment|// }
comment|// }
comment|// Now add the new ontology.
if|if
condition|(
name|ontologySource
operator|!=
literal|null
operator|&&
name|ontologySource
operator|.
name|hasRootOntology
argument_list|()
condition|)
block|{
comment|// Remember that this method also fires the event
name|performAdd
argument_list|(
name|ontologySource
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addOntologySpaceListener
parameter_list|(
name|OntologySpaceListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearOntologySpaceListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
return|return
name|ontologyManager
operator|.
name|contains
argument_list|(
name|ontologyIri
argument_list|)
return|;
block|}
comment|/**      * Notifies all ontology space listeners that an ontology has been added to this space.      *       * @param ontologyIri      *            the identifier of the ontology that was added to this space.      */
specifier|protected
name|void
name|fireOntologyAdded
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
for|for
control|(
name|OntologySpaceListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyAdded
argument_list|(
name|this
operator|.
name|getID
argument_list|()
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Notifies all ontology space listeners that an ontology has been removed from this space.      *       * @param ontologyIri      *            the identifier of the ontology that was removed from this space.      */
specifier|protected
name|void
name|fireOntologyRemoved
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
for|for
control|(
name|OntologySpaceListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyRemoved
argument_list|(
name|this
operator|.
name|getID
argument_list|()
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getID
parameter_list|()
block|{
return|return
name|_id
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|(
name|boolean
name|withClosure
parameter_list|)
block|{
return|return
name|withClosure
condition|?
name|ontologyManager
operator|.
name|getOntologies
argument_list|()
else|:
name|managedOntologies
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
name|OWLOntology
name|o
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|it
init|=
name|managedOntologies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|o
operator|==
literal|null
condition|)
block|{
name|OWLOntology
name|temp
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|temp
operator|.
name|isAnonymous
argument_list|()
operator|&&
name|ontologyIri
operator|.
name|equals
argument_list|(
name|temp
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
condition|)
name|o
operator|=
name|temp
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|o
operator|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|OntologySpaceListener
argument_list|>
name|getOntologyScopeListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|getTopOntology
parameter_list|()
block|{
name|OWLOntology
name|root
decl_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|_id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|_id
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|_id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e1
parameter_list|)
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|_id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|_id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|_id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
comment|// Add the import declarations for directly managed ontologies.
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|ontologyManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntology
name|o
range|:
name|getOntologies
argument_list|(
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
continue|continue;
name|String
name|base
init|=
name|URIUtils
operator|.
name|upOne
argument_list|(
name|getID
argument_list|()
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|IRI
name|ontologyIri
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|isAnonymous
argument_list|()
condition|)
try|try
block|{
name|ontologyIri
operator|=
name|ontologyManager
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ontologyIri
operator|=
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ontologyIri
operator|=
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getDefaultDocumentIRI
argument_list|()
expr_stmt|;
block|}
name|IRI
name|physIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|base
operator|+
name|ontologyIri
argument_list|)
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|root
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|physIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ontologyManager
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
comment|// return rootOntology;
return|return
name|root
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
return|return
name|this
operator|.
name|getOntology
argument_list|(
name|ontologyIri
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|locked
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSilentMissingOntologyHandling
parameter_list|()
block|{
return|return
name|silent
return|;
block|}
specifier|private
name|void
name|performAdd
parameter_list|(
name|OntologyInputSource
name|ontSrc
parameter_list|)
block|{
name|OWLOntology
name|ontology
init|=
name|ontSrc
operator|.
name|getRootOntology
argument_list|()
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|ontology
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
comment|// Should not modify the child ontology in any way.
comment|// TODO implement transaction control.
comment|// OntologyUtils.appendOntology(new RootOntologySource(getTopOntology(), null), ontSrc,
comment|// ontologyManager);
comment|// See to it that the ontology is copied to this manager
name|reload
argument_list|(
name|ontology
argument_list|,
name|ontologyManager
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OWLOntology
name|newOnt
init|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|managedOntologies
operator|.
name|add
argument_list|(
name|newOnt
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Store the top ontology
if|if
condition|(
operator|!
operator|(
name|this
operator|instanceof
name|SessionOntologySpace
operator|)
condition|)
block|{
if|if
condition|(
name|storage
operator|==
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"No ontology storage found. Ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" will be stored in-memory only."
argument_list|)
expr_stmt|;
else|else
block|{
comment|// storage = new ClerezzaOntologyStorage(tcManager, wtcProvider)
name|storage
operator|.
name|store
argument_list|(
name|ontology
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ONManager.get().getOntologyStore().load(rootOntology.getOntologyID().getOntologyIRI());
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"An error occurred while storing ontology "
operator|+
name|ontology
operator|+
literal|" . Ontology management will be volatile."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|fireOntologyAdded
argument_list|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|performAddOld
parameter_list|(
name|OntologyInputSource
name|ontSrc
parameter_list|)
block|{
name|OWLOntology
name|ontology
init|=
name|ontSrc
operator|.
name|getRootOntology
argument_list|()
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|ontology
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
comment|// Should not modify the child ontology in any way.
comment|// TODO implement transaction control.
name|OntologyUtils
operator|.
name|appendOntology
argument_list|(
operator|new
name|RootOntologySource
argument_list|(
name|getTopOntology
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ontSrc
argument_list|,
name|ontologyManager
argument_list|)
expr_stmt|;
comment|// StringDocumentTarget tgt = new StringDocumentTarget();
comment|// try {
comment|// ontologyManager.saveOntology(ontology, new RDFXMLOntologyFormat(), tgt);
comment|// } catch (OWLOntologyStorageException e) {
comment|// log.error("KReS : [FATAL] Failed to store ontology " + id + " in memory.", e);
comment|// return;
comment|// }
name|reload
argument_list|(
name|ontology
argument_list|,
name|ontologyManager
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// try {
comment|// ontologyManager.removeOntology(ontology);
comment|//
comment|// // FIXME : this is not memory-efficient.
comment|// Set<OWLOntology> closure = ontology.getOWLOntologyManager().getImportsClosure(ontology);
comment|// ontologyManager.createOntology(ontology.getOntologyID().getOntologyIRI(), closure);
comment|// // FIXME : this on the other hand is neither time-efficient nor network-safe
comment|// // ontologyManager
comment|// // .loadOntologyFromOntologyDocument(new StringDocumentSource(
comment|// // tgt.toString()));
comment|// } catch (OWLOntologyAlreadyExistsException e) {
comment|// // Could happen if we supplied an ontology manager that already
comment|// // knows this ontology. Nothing to do then.
comment|// log.warn("KReS : [NONFATAL] Tried to copy ontology " + id + " to existing one.");
comment|// } catch (OWLOntologyCreationException e) {
comment|// log.error("Unexpected exception caught while copying ontology " + id + " across managers", e);
comment|// return;
comment|// }
try|try
block|{
comment|// Store the top ontology
if|if
condition|(
operator|!
operator|(
name|this
operator|instanceof
name|SessionOntologySpace
operator|)
condition|)
block|{
if|if
condition|(
name|storage
operator|==
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"No ontology storage found. Ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" will be stored in-memory only."
argument_list|)
expr_stmt|;
else|else
block|{
comment|// storage = new ClerezzaOntologyStorage(tcManager, wtcProvider)
name|storage
operator|.
name|store
argument_list|(
name|ontology
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ONManager.get().getOntologyStore().load(rootOntology.getOntologyID().getOntologyIRI());
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"An error occurred while storing ontology "
operator|+
name|ontology
operator|+
literal|" . Ontology management will be volatile."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|fireOntologyAdded
argument_list|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * TODO 1 : optimize addition/removal<br>      * TODO 2 : set import statements      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeOntology
parameter_list|(
name|OntologyInputSource
name|src
parameter_list|)
throws|throws
name|OntologySpaceModificationException
block|{
if|if
condition|(
name|locked
condition|)
throw|throw
operator|new
name|UnmodifiableOntologySpaceException
argument_list|(
name|this
argument_list|)
throw|;
else|else
block|{
comment|// TODO : find a way to remove anonymous ontologies.
name|OWLOntology
name|o
init|=
name|src
operator|.
name|getRootOntology
argument_list|()
decl_stmt|;
name|IRI
name|logicalID
init|=
literal|null
decl_stmt|,
name|physicalIRI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|logicalID
operator|=
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
expr_stmt|;
name|physicalIRI
operator|=
name|src
operator|.
name|getPhysicalIRI
argument_list|()
expr_stmt|;
if|if
condition|(
name|physicalIRI
operator|==
literal|null
condition|)
if|if
condition|(
name|isSilentMissingOntologyHandling
argument_list|()
condition|)
return|return;
else|else
throw|throw
operator|new
name|MissingOntologyException
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
throw|;
if|if
condition|(
name|logicalID
operator|==
literal|null
condition|)
name|logicalID
operator|=
name|physicalIRI
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|isSilentMissingOntologyHandling
argument_list|()
condition|)
return|return;
else|else
throw|throw
operator|new
name|MissingOntologyException
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
throw|;
block|}
comment|// if (o.equals(getTopOntology()))
comment|// // setTopOntology(null, false);
comment|// throw new IrremovableOntologyException(this, logicalID);
try|try
block|{
comment|// OWLImportsDeclaration imp = ontologyManager.getOWLDataFactory().getOWLImportsDeclaration(
comment|// physicalIRI);
comment|// ontologyManager.applyChange(new RemoveImport(getTopOntology(), imp));
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|fireOntologyRemoved
argument_list|(
name|logicalID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OntologySpaceModificationException
argument_list|(
name|this
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Utility method to copy an ontology (or ontology network) across ontology managers without having it go      * online to reload it.      *       * @param ontology      *            the ontology to copy from its own manager to the supplied one.      * @param mgr      *            the ontology manager where the ontology will be copied to. If null, the space's default      *            ontology manager will be used.      * @param withClosure      *            if true, the whole imports closure will be reloaded, otherwise only the root ontology will      *            be reloaded. However, import statements and other non-logical axioms will still be copied.      * @param merge      *            if true, all the axioms from the ontology closure will be merged in the new ontology maned      *            after<code>ontology</code>. This parameter has virtually no effect if      *<code>withClosure</code> is set to false.      */
specifier|protected
name|void
name|reload
parameter_list|(
name|OWLOntology
name|ontology
parameter_list|,
name|OWLOntologyManager
name|mgr
parameter_list|,
name|boolean
name|withClosure
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
if|if
condition|(
name|ontology
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ontology cannot be null"
argument_list|)
throw|;
if|if
condition|(
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|==
name|ontologyManager
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is already managed by the supplied OWLOntologyManager. Skipping copy."
argument_list|,
name|ontology
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
name|mgr
operator|=
name|ontologyManager
expr_stmt|;
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|closure
init|=
name|withClosure
condition|?
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getImportsClosure
argument_list|(
name|ontology
argument_list|)
else|:
name|Collections
operator|.
name|singleton
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|removeOntology
argument_list|(
name|ontology
argument_list|)
expr_stmt|;
if|if
condition|(
name|merge
condition|)
try|try
block|{
name|mgr
operator|.
name|createOntology
argument_list|(
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|,
name|closure
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception caught while copying ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" across managers"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|OWLOntology
name|o
range|:
name|closure
control|)
block|{
name|OWLOntologyID
name|id
init|=
name|o
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgr
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|mgr
operator|.
name|removeOntology
argument_list|(
name|mgr
operator|.
name|getOntology
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mgr
operator|.
name|createOntology
argument_list|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|!=
name|mgr
condition|)
block|{
name|mgr
operator|.
name|removeOntology
argument_list|(
name|o
argument_list|)
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|createOntology
argument_list|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception caught while copying ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" across managers"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to re-create ontology {} for ontology space {} . Continuing..."
argument_list|,
name|id
argument_list|,
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeOntologySpaceListener
parameter_list|(
name|OntologySpaceListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSilentMissingOntologyHandling
parameter_list|(
name|boolean
name|silent
parameter_list|)
block|{
name|this
operator|.
name|silent
operator|=
name|silent
expr_stmt|;
block|}
comment|/**      * TODO 1 : Attention: the ontology from<code>ontologySource</code> is NOT added to the ontology manager!      */
annotation|@
name|Deprecated
specifier|public
specifier|synchronized
name|void
name|setTopOntology
parameter_list|(
name|OntologyInputSource
name|ontologySource
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|UnmodifiableOntologySpaceException
block|{
comment|// TODO : implement or avoid passing of OWLOntology objects across managers
comment|// Clear the ontology manager
for|for
control|(
name|OWLOntology
name|o
range|:
name|ontologyManager
operator|.
name|getOntologies
argument_list|()
control|)
block|{
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|fireOntologyRemoved
argument_list|(
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyID
name|id
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|StringUtils
operator|.
name|stripIRITerminator
argument_list|(
name|_id
argument_list|)
operator|+
literal|"/root.owl"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntology
name|ontology
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ontologySource
operator|!=
literal|null
condition|)
block|{
name|ontology
operator|=
name|ontologySource
operator|.
name|getRootOntology
argument_list|()
expr_stmt|;
block|}
comment|// Placeholder for the parent ontology (can be either the space root or the supplied ontology).
name|OWLOntology
name|oParent
init|=
literal|null
decl_stmt|;
comment|// If set to create a parent ontology or this one is anonymous, create the parent
if|if
condition|(
name|createParent
operator|||
name|ontology
operator|==
literal|null
operator|||
name|ontology
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
try|try
block|{
name|oParent
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// Should not happen since the manager was cleared, but anyway.
name|oParent
operator|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: Failed to copy ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" across ontology managers."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If we don't have to create a parent, set the original ontology to be the parent.
name|oParent
operator|=
name|ontology
expr_stmt|;
block|}
if|if
condition|(
name|ontologySource
operator|!=
literal|null
condition|)
try|try
block|{
comment|// Append the supplied ontology to the parent.
name|oParent
operator|=
name|OntologyUtils
operator|.
name|appendOntology
argument_list|(
operator|new
name|RootOntologySource
argument_list|(
name|oParent
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ontologySource
argument_list|,
name|ontologyManager
argument_list|)
expr_stmt|;
comment|// Save and reload it to make sure the whole import closure is
comment|// loaded in memory.
name|StringDocumentTarget
name|tgt
init|=
operator|new
name|StringDocumentTarget
argument_list|()
decl_stmt|;
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|oParent
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|tgt
argument_list|)
expr_stmt|;
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|oParent
argument_list|)
expr_stmt|;
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|StringDocumentSource
argument_list|(
name|tgt
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// // FIXME why doesnt this work?
comment|// // ontologyManager.removeOntology(oParent);
comment|// reload(oParent, ontologyManager, true, false);
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Tried to copy ontology "
operator|+
name|id
operator|+
literal|" to existing one."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to create ontology "
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
comment|// Shouldn't be a problem to save it in memory as RDF/XML...
name|log
operator|.
name|error
argument_list|(
literal|"In-memory store failed for ontology "
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Assign the ontology and fire the corresponding event.
name|rootOntology
operator|=
name|oParent
operator|!=
literal|null
condition|?
name|oParent
else|:
name|ontology
expr_stmt|;
try|try
block|{
comment|// Store the top ontology
if|if
condition|(
operator|!
operator|(
name|this
operator|instanceof
name|SessionOntologySpace
operator|)
condition|)
block|{
if|if
condition|(
name|storage
operator|==
literal|null
condition|)
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: [NONFATAL] no ontology storage found. Ontology "
operator|+
name|rootOntology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" will be stored in-memory only."
argument_list|)
expr_stmt|;
else|else
block|{
name|storage
operator|.
name|store
argument_list|(
name|rootOntology
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: [NONFATAL] An error occurred while storing root ontology "
operator|+
name|rootOntology
operator|+
literal|" . Ontology management will be volatile!"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|fireOntologyAdded
argument_list|(
name|rootOntology
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

