begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
package|;
end_package

begin_comment
comment|/**  * An event that encompasses a change in the state of a KReS session.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|SessionEvent
block|{
specifier|public
enum|enum
name|OperationType
block|{
name|ACTIVATE
block|,
name|CLOSE
block|,
name|CREATE
block|,
name|DEACTIVATE
block|,
name|KILL
block|,
name|STORE
block|}
comment|/** 	 * The KReS session affected by this event. 	 */
specifier|private
name|Session
name|affectedSession
decl_stmt|;
specifier|private
name|OperationType
name|operationType
decl_stmt|;
specifier|public
name|OperationType
name|getOperationType
parameter_list|()
block|{
return|return
name|operationType
return|;
block|}
comment|/** 	 * Creates a new instance of SessionEvent. 	 *  	 * @param session 	 *            the KReS session affected by this event 	 */
specifier|public
name|SessionEvent
parameter_list|(
name|Session
name|session
parameter_list|,
name|OperationType
name|operationType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|operationType
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No operation type specified for this session event."
argument_list|)
throw|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No KReS session specified for this session event."
argument_list|)
throw|;
name|this
operator|.
name|operationType
operator|=
name|operationType
expr_stmt|;
name|this
operator|.
name|affectedSession
operator|=
name|session
expr_stmt|;
block|}
comment|/** 	 * Returns the KReS session affected by this event. 	 *  	 * @return the affected KReS session 	 */
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|affectedSession
return|;
block|}
block|}
end_class

end_unit

