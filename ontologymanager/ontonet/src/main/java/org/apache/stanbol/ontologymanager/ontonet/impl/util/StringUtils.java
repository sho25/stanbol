begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_class
specifier|public
class|class
name|StringUtils
block|{
specifier|public
specifier|static
name|IRI
name|stripIRITerminator
parameter_list|(
name|IRI
name|iri
parameter_list|)
block|{
if|if
condition|(
name|iri
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|IRI
operator|.
name|create
argument_list|(
name|stripIRITerminator
argument_list|(
name|iri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|stripIRITerminator
parameter_list|(
name|String
name|iri
parameter_list|)
block|{
if|if
condition|(
name|iri
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|iri
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|iri
operator|.
name|endsWith
argument_list|(
literal|":"
argument_list|)
condition|)
comment|// Shorten the string by one
return|return
name|stripIRITerminator
argument_list|(
name|iri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iri
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
else|else
return|return
name|iri
return|;
block|}
specifier|public
specifier|static
name|String
name|stripNamespace
parameter_list|(
name|String
name|fullIri
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|fullIri
operator|.
name|startsWith
argument_list|(
name|namespace
argument_list|)
condition|)
return|return
name|fullIri
operator|.
name|substring
argument_list|(
name|namespace
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
else|else
return|return
name|fullIri
return|;
block|}
block|}
end_class

end_unit

