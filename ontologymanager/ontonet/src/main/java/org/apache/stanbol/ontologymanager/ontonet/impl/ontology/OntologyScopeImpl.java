begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|CoreOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|CustomOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OWLExportable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyCollectorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeOntologyListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SessionOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologySetProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The default implementation of an ontology scope.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyScopeImpl
implements|implements
name|OntologyScope
implements|,
name|OntologyCollectorListener
block|{
comment|/**      * The core ontology space for this scope, always set as default.      */
specifier|protected
name|CoreOntologySpace
name|coreSpace
decl_stmt|;
comment|/**      * The custom ontology space for this scope. This is optional, but cannot be set after the scope has been      * setup.      */
specifier|protected
name|CustomOntologySpace
name|customSpace
decl_stmt|;
comment|/**      * The unique identifier for this scope.      */
specifier|protected
name|String
name|id
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ScopeOntologyListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|ScopeOntologyListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * An ontology scope knows whether it's write-locked or not. Initially it is not.      */
specifier|protected
specifier|volatile
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|IRI
name|namespace
init|=
literal|null
decl_stmt|;
comment|/**      * Maps session IDs to ontology space. A single scope has at most one space per session.      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SessionOntologySpace
argument_list|>
name|sessionSpaces
decl_stmt|;
specifier|public
name|OntologyScopeImpl
parameter_list|(
name|String
name|id
parameter_list|,
name|IRI
name|namespace
parameter_list|,
name|OntologySpaceFactory
name|factory
parameter_list|,
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
modifier|...
name|coreOntologies
parameter_list|)
block|{
name|setID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreSpace
operator|=
name|factory
operator|.
name|createCoreOntologySpace
argument_list|(
name|id
argument_list|,
name|coreOntologies
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreSpace
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// let's just lock it. Once the core space is done it's done.
name|this
operator|.
name|coreSpace
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// if (customRoot != null) {
try|try
block|{
name|setCustomSpace
argument_list|(
name|factory
operator|.
name|createCustomOntologySpace
argument_list|(
name|id
comment|/* , coreOntologies */
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
comment|// Can't happen unless the factory or space implementations are
comment|// really naughty.
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology scope "
operator|+
name|id
operator|+
literal|" was denied creation of its own custom space upon initialization! This should not happen."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|customSpace
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// }
name|sessionSpaces
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SessionOntologySpace
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addOntologyScopeListener
parameter_list|(
name|ScopeOntologyListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addSessionSpace
parameter_list|(
name|OntologySpace
name|sessionSpace
parameter_list|,
name|String
name|sessionId
parameter_list|)
throws|throws
name|UnmodifiableOntologyCollectorException
block|{
if|if
condition|(
name|sessionSpace
operator|instanceof
name|SessionOntologySpace
condition|)
block|{
name|sessionSpaces
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
operator|(
name|SessionOntologySpace
operator|)
name|sessionSpace
argument_list|)
expr_stmt|;
name|sessionSpace
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getCustomSpace
argument_list|()
operator|!=
literal|null
condition|)
operator|(
operator|(
name|SessionOntologySpace
operator|)
name|sessionSpace
operator|)
operator|.
name|attachSpace
argument_list|(
name|this
operator|.
name|getCustomSpace
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
operator|(
operator|(
name|SessionOntologySpace
operator|)
name|sessionSpace
operator|)
operator|.
name|attachSpace
argument_list|(
name|this
operator|.
name|getCoreSpace
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * FIXME not merging yet      *       * @see OWLExportable#asOWLOntology(boolean)      */
annotation|@
name|Override
specifier|public
name|OWLOntology
name|asOWLOntology
parameter_list|(
name|boolean
name|merge
parameter_list|)
block|{
comment|// if (merge) throw new UnsupportedOperationException(
comment|// "Ontology merging only implemented for managed ontologies, not for collectors. "
comment|// + "Please set merge parameter to false.");
comment|// Create an ontology manager on the fly. We don't really need a permanent one.
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLOntology
name|ont
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|merge
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Merging custom space of {}."
argument_list|,
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|this
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|asOWLOntology
argument_list|(
name|merge
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Merging core space of {}."
argument_list|,
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|this
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|asOWLOntology
argument_list|(
name|merge
argument_list|)
argument_list|)
expr_stmt|;
name|OWLOntologySetProvider
name|provider
init|=
operator|new
name|OWLOntologySetProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|()
block|{
return|return
name|set
return|;
block|}
block|}
decl_stmt|;
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|provider
argument_list|)
decl_stmt|;
try|try
block|{
name|ont
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|getNamespace
argument_list|()
operator|+
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to merge imports for ontology."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ont
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The root ontology ID is in the form [namespace][scopeId]
name|ont
operator|=
name|mgr
operator|.
name|createOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|getNamespace
argument_list|()
operator|+
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add the import statement for the custom space, if existing and not empty
name|OntologySpace
name|spc
init|=
name|getCustomSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|getOntologyCount
argument_list|(
literal|false
argument_list|)
operator|>
literal|0
condition|)
block|{
name|IRI
name|spaceIri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getNamespace
argument_list|()
operator|+
name|spc
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|ont
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|spaceIri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the import statement for the core space, if existing and not empty
name|spc
operator|=
name|getCoreSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|getOntologyCount
argument_list|(
literal|false
argument_list|)
operator|>
literal|0
condition|)
block|{
name|IRI
name|spaceIri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getNamespace
argument_list|()
operator|+
name|spc
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|ont
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|spaceIri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mgr
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to generate an OWL form of scope "
operator|+
name|getID
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ont
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|ont
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearOntologyScopeListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|fireOntologyAdded
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
for|for
control|(
name|ScopeOntologyListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyAdded
argument_list|(
name|this
operator|.
name|getID
argument_list|()
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireOntologyRemoved
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
for|for
control|(
name|ScopeOntologyListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyRemoved
argument_list|(
name|this
operator|.
name|getID
argument_list|()
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OntologySpace
name|getCoreSpace
parameter_list|()
block|{
return|return
name|coreSpace
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntologySpace
name|getCustomSpace
parameter_list|()
block|{
return|return
name|customSpace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ScopeOntologyListener
argument_list|>
name|getOntologyScopeListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
annotation|@
name|Override
specifier|public
name|SessionOntologySpace
name|getSessionSpace
parameter_list|(
name|String
name|sessionID
parameter_list|)
block|{
return|return
name|sessionSpaces
operator|.
name|get
argument_list|(
name|sessionID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OntologySpace
argument_list|>
name|getSessionSpaces
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|OntologySpace
argument_list|>
argument_list|(
name|sessionSpaces
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|locked
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOntologyAdded
parameter_list|(
name|String
name|collectorId
parameter_list|,
name|IRI
name|addedOntology
parameter_list|)
block|{
comment|// Propagate events to scope listeners
name|fireOntologyAdded
argument_list|(
name|addedOntology
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOntologyRemoved
parameter_list|(
name|String
name|collectorId
parameter_list|,
name|IRI
name|removedOntology
parameter_list|)
block|{
comment|// Propagate events to scope listeners
name|fireOntologyRemoved
argument_list|(
name|removedOntology
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeOntologyScopeListener
parameter_list|(
name|ScopeOntologyListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setCustomSpace
parameter_list|(
name|OntologySpace
name|customSpace
parameter_list|)
throws|throws
name|UnmodifiableOntologyCollectorException
block|{
if|if
condition|(
name|this
operator|.
name|customSpace
operator|!=
literal|null
operator|&&
name|this
operator|.
name|customSpace
operator|.
name|isLocked
argument_list|()
condition|)
throw|throw
operator|new
name|UnmodifiableOntologyCollectorException
argument_list|(
name|getCustomSpace
argument_list|()
argument_list|)
throw|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|customSpace
operator|instanceof
name|CustomOntologySpace
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"supplied object is not a CustomOntologySpace instance."
argument_list|)
throw|;
else|else
block|{
name|this
operator|.
name|customSpace
operator|=
operator|(
name|CustomOntologySpace
operator|)
name|customSpace
expr_stmt|;
name|this
operator|.
name|customSpace
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// this.customSpace.attachCoreSpace(this.coreSpace, true);
block|}
block|}
specifier|protected
name|void
name|setID
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Scope ID cannot be null."
argument_list|)
throw|;
name|id
operator|=
name|id
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Scope ID cannot be empty."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|id
operator|.
name|matches
argument_list|(
literal|"[\\w-]+"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal scope ID "
operator|+
name|id
operator|+
literal|" - Must be an alphanumeric sequence, with optional underscores or dashes."
argument_list|)
throw|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * @param namespace      *            The OntoNet namespace that will prefix the scope ID in Web references. This implementation      *            only allows non-null and non-empty IRIs, with no query or fragment. Hash URIs are not      *            allowed, slash URIs are preferred. If neither, a slash will be concatenated and a warning      *            will be logged.      *       * @see OntologyScope#setNamespace(IRI)      */
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namespace cannot be null."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Query is not allowed in OntoNet namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Fragment is not allowed in OntoNet namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OntoNet namespaces must not end with a hash ('#') character."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Namespace {} does not end with slash character ('/'). It will be added automatically."
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setUp
parameter_list|()
block|{
if|if
condition|(
name|locked
operator|||
operator|(
name|customSpace
operator|!=
literal|null
operator|&&
operator|!
name|customSpace
operator|.
name|isLocked
argument_list|()
operator|)
condition|)
return|return;
name|this
operator|.
name|coreSpace
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreSpace
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|customSpace
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|customSpace
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|customSpace
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
name|locked
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|synchronizeSpaces
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|tearDown
parameter_list|()
block|{
comment|// this.coreSpace.addOntologySpaceListener(this);
name|this
operator|.
name|coreSpace
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|customSpace
operator|!=
literal|null
condition|)
block|{
comment|// this.customSpace.addOntologySpaceListener(this);
name|this
operator|.
name|customSpace
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
name|locked
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getNamespace
argument_list|()
operator|+
name|getID
argument_list|()
return|;
block|}
block|}
end_class

end_unit

