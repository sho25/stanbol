begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|model
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|RegistryLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|io
operator|.
name|XDRegistrySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|AbstractRegistryItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|OntologyManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|cache
operator|.
name|ODPRegistryCacheException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|cache
operator|.
name|ODPRegistryCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|cache
operator|.
name|URIUnresolvableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|xd
operator|.
name|utils
operator|.
name|RDFSLabelGetter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|xd
operator|.
name|vocabulary
operator|.
name|CODOVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|OWLOntologyCreationIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologySetProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLAxiomFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|vocab
operator|.
name|OWLRDFVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RegistryLoaderImpl
implements|implements
name|RegistryLoader
block|{
specifier|private
specifier|final
name|OWLClass
name|cRegistryLibrary
decl_stmt|;
specifier|private
specifier|final
name|OWLObjectProperty
name|isPartOf
decl_stmt|,
name|isOntologyOf
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IRI
name|mergedOntologyIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|REPOSITORY_MERGED_ONTOLOGY
argument_list|)
decl_stmt|;
specifier|private
name|ONManager
name|onm
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|URI
argument_list|,
name|OWLOntology
argument_list|>
name|registryOntologiesCache
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 */
specifier|public
name|RegistryLoaderImpl
parameter_list|(
name|ONManager
name|onm
parameter_list|)
block|{
name|this
operator|.
name|onm
operator|=
name|onm
expr_stmt|;
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|cRegistryLibrary
operator|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|CODD_OntologyLibrary
argument_list|)
argument_list|)
expr_stmt|;
name|isPartOf
operator|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|PARTOF_IsPartOf
argument_list|)
argument_list|)
expr_stmt|;
name|isOntologyOf
operator|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|ODPM_IsOntologyOf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|gatherOntologies
parameter_list|(
name|RegistryItem
name|registryItem
parameter_list|,
name|OWLOntologyManager
name|manager
parameter_list|,
name|boolean
name|recurseRegistries
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|registryItem
operator|instanceof
name|Registry
condition|)
for|for
control|(
name|RegistryItem
name|item
range|:
operator|(
operator|(
name|Registry
operator|)
name|registryItem
operator|)
operator|.
name|getChildren
argument_list|()
control|)
try|try
block|{
name|result
operator|.
name|addAll
argument_list|(
name|gatherOntologies
argument_list|(
name|item
argument_list|,
name|manager
argument_list|,
name|recurseRegistries
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[NONFATAL] Could not gather ontologies for registry "
operator|+
name|registryItem
operator|.
name|getName
argument_list|()
operator|+
literal|". Skipping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|registryItem
operator|.
name|isOntology
argument_list|()
condition|)
try|try
block|{
name|result
operator|.
name|add
argument_list|(
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|RegistryOntology
operator|)
name|registryItem
operator|)
operator|.
name|getURL
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|ex
parameter_list|)
block|{
comment|// E chissenefrega, ce la aggiungiamo lo stesso.
name|result
operator|.
name|add
argument_list|(
name|manager
operator|.
name|getOntology
argument_list|(
name|ex
operator|.
name|getOntologyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationIOException
name|ex
parameter_list|)
block|{
comment|// Che ce potemo fa'?
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[NONFATAL] Malformed URI for ontology "
operator|+
name|registryItem
operator|.
name|getName
argument_list|()
operator|+
literal|". Skipping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|registryItem
operator|.
name|isLibrary
argument_list|()
condition|)
for|for
control|(
name|RegistryItem
name|item
range|:
operator|(
operator|(
name|RegistryLibrary
operator|)
name|registryItem
operator|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|gatherOntologies
argument_list|(
name|item
argument_list|,
name|manager
argument_list|,
name|recurseRegistries
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|RegistryLibrary
name|getLibrary
parameter_list|(
name|Registry
name|reg
parameter_list|,
name|IRI
name|libraryID
parameter_list|)
block|{
for|for
control|(
name|RegistryItem
name|child
range|:
name|reg
operator|.
name|getChildren
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|child
operator|.
name|isLibrary
argument_list|()
operator|&&
name|IRI
operator|.
name|create
argument_list|(
name|child
operator|.
name|getURL
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|libraryID
argument_list|)
condition|)
return|return
operator|(
name|RegistryLibrary
operator|)
name|child
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// If some URL is not well-formed here and there, sticazzi
continue|continue;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|OWLOntology
name|getMergedOntology
parameter_list|(
name|IRI
name|registryLocation
parameter_list|)
throws|throws
name|RegistryContentException
block|{
try|try
block|{
return|return
name|getMergedOntology
argument_list|(
name|registryLocation
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"KReS :: [NONFATAL] Malformed URI for merged ontology from registry "
operator|+
name|registryLocation
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|OWLOntology
name|getMergedOntology
parameter_list|(
name|URL
name|registryLocation
parameter_list|)
throws|throws
name|RegistryContentException
block|{
name|OWLOntology
name|ontology
init|=
literal|null
decl_stmt|;
try|try
block|{
name|IRI
name|mergedOntology
init|=
name|mergedOntologyIRI
operator|.
name|resolve
argument_list|(
literal|"#"
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|registryLocation
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ODPRegistryCacheManager
operator|.
name|registryContains
argument_list|(
name|mergedOntology
operator|.
name|toURI
argument_list|()
argument_list|)
condition|)
block|{
comment|// final OWLOntology ont =
comment|// getOntologyForRegistryLocation(registryLocation
comment|// .toURI());
specifier|final
name|OWLOntology
name|ont
init|=
name|getOntologyForRegistryLocationNoCached
argument_list|(
name|registryLocation
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ont
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RegistryContentException
argument_list|(
operator|new
name|NullPointerException
argument_list|(
literal|"Registry unavailable: "
operator|+
name|registryLocation
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
throw|;
name|OWLOntologySetProvider
name|provider
init|=
operator|new
name|OWLOntologySetProvider
argument_list|()
block|{
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|()
block|{
return|return
name|ODPRegistryCacheManager
operator|.
name|getManager
argument_list|()
operator|.
name|getImportsClosure
argument_list|(
name|ont
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|OWLDataFactory
name|factory
init|=
name|ODPRegistryCacheManager
operator|.
name|getManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
comment|// We filter only interesting axioms
name|OWLAxiomFilter
name|filter
init|=
operator|new
name|OWLAxiomFilter
argument_list|()
block|{
specifier|public
name|boolean
name|passes
parameter_list|(
name|OWLAxiom
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|arg0
operator|.
name|getSignature
argument_list|()
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|CODD_OntologyLibrary
argument_list|)
argument_list|)
argument_list|)
operator|||
name|arg0
operator|.
name|getSignature
argument_list|()
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|CODK_Ontology
argument_list|)
argument_list|)
argument_list|)
operator|||
name|arg0
operator|.
name|getSignature
argument_list|()
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|ODPM_IsOntologyOf
argument_list|)
argument_list|)
argument_list|)
operator|||
name|arg0
operator|.
name|getSignature
argument_list|()
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|PARTOF_IsPartOf
argument_list|)
argument_list|)
argument_list|)
operator|||
name|arg0
operator|.
name|getSignature
argument_list|()
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLAnnotationProperty
argument_list|(
name|OWLRDFVocabulary
operator|.
name|RDFS_LABEL
operator|.
name|getIRI
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|provider
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|OWLOntology
name|merged
init|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|getManager
argument_list|()
argument_list|,
name|mergedOntology
argument_list|)
decl_stmt|;
name|ODPRegistryCacheManager
operator|.
name|addResource
argument_list|(
name|merged
argument_list|,
name|mergedOntology
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|ontology
operator|=
name|merged
expr_stmt|;
block|}
else|else
block|{
name|ontology
operator|=
name|ODPRegistryCacheManager
operator|.
name|getOntology
argument_list|(
name|mergedOntology
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URIUnresolvableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryContentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryContentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyChangeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryContentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ODPRegistryCacheException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryContentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryContentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryContentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ontology
return|;
block|}
specifier|private
name|OWLOntology
name|getOntologyForRegistryLocation
parameter_list|(
name|URI
name|location
parameter_list|)
block|{
return|return
name|registryOntologiesCache
operator|.
name|get
argument_list|(
name|location
argument_list|)
return|;
block|}
specifier|private
name|OWLOntology
name|getOntologyForRegistryLocationNoCached
parameter_list|(
name|URI
name|location
parameter_list|)
block|{
name|OntologyManagerFactory
name|factory
init|=
name|onm
operator|.
name|getOntologyManagerFactory
argument_list|()
decl_stmt|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|location
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
return|return
name|factory
operator|.
name|createOntologyManager
argument_list|(
literal|true
argument_list|)
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|iri
argument_list|)
return|;
else|else
return|return
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|iri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: Registry loader failed to load ontology at "
operator|+
name|location
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Object
name|getParent
parameter_list|(
name|Object
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|AbstractRegistryItem
condition|)
block|{
return|return
operator|(
operator|(
name|RegistryItem
operator|)
name|child
operator|)
operator|.
name|getParent
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|getParentContainer
parameter_list|(
name|OWLNamedIndividual
name|child
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|containsKey
argument_list|(
name|isPartOf
argument_list|)
operator|||
name|child
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|containsKey
argument_list|(
name|isOntologyOf
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|partOfSet
init|=
name|child
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|get
argument_list|(
name|isPartOf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|ontologyOfSet
init|=
name|child
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|get
argument_list|(
name|isOntologyOf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|mergedSet
init|=
operator|new
name|HashSet
argument_list|<
name|OWLIndividual
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|partOfSet
operator|!=
literal|null
condition|)
name|mergedSet
operator|.
name|addAll
argument_list|(
name|partOfSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyOfSet
operator|!=
literal|null
condition|)
name|mergedSet
operator|.
name|addAll
argument_list|(
name|ontologyOfSet
argument_list|)
expr_stmt|;
return|return
name|mergedSet
return|;
block|}
else|else
return|return
operator|new
name|HashSet
argument_list|<
name|OWLIndividual
argument_list|>
argument_list|()
return|;
block|}
specifier|private
name|Set
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|getParts
parameter_list|(
name|OWLIndividual
name|parent
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|)
block|{
name|Set
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|indies
init|=
name|ontology
operator|.
name|getIndividualsInSignature
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|iter
init|=
name|indies
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|tor
init|=
operator|new
name|HashSet
argument_list|<
name|OWLNamedIndividual
argument_list|>
argument_list|()
decl_stmt|;
comment|// For each individual in this ontology
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLNamedIndividual
name|n
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Get its parent wrt to isPartOf or isOntologyOf relationships
for|for
control|(
name|OWLIndividual
name|i
range|:
name|this
operator|.
name|getParentContainer
argument_list|(
name|n
argument_list|,
name|ontology
argument_list|)
control|)
block|{
if|if
condition|(
name|i
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|tor
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|tor
return|;
block|}
specifier|private
name|List
argument_list|<
name|Registry
argument_list|>
name|getRegistries
parameter_list|()
block|{
name|List
argument_list|<
name|Registry
argument_list|>
name|registries
init|=
operator|new
name|ArrayList
argument_list|<
name|Registry
argument_list|>
argument_list|()
decl_stmt|;
comment|// String storedStringValue = XDRegistryPlugin.getDefault()
comment|// .getPreferenceStore().getString(
comment|// PreferenceConstants.P_ODP_REGISTRIES);
name|String
index|[]
name|regs
init|=
operator|new
name|String
index|[]
block|{}
comment|/*                                         * URLListEditor .parsePreferenceStoreValue (storedStringValue)                                         */
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Registry
name|registry1
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO Find a way to obtain registry names
name|String
name|registryName
init|=
literal|""
comment|/*                                          * URLListEditor .parseNameValueString(regs[i])[0]                                          */
decl_stmt|;
comment|// TODO Find a way to obtain registry locations
name|String
name|registryLocation
init|=
literal|""
comment|/*                                              * URLListEditor .parseNameValueString(regs[i])[1]                                              */
decl_stmt|;
name|registry1
operator|=
operator|new
name|Registry
argument_list|(
name|registryName
argument_list|)
expr_stmt|;
name|registry1
operator|.
name|setURL
argument_list|(
operator|new
name|URL
argument_list|(
name|registryLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|registry1
operator|!=
literal|null
condition|)
block|{
name|registry1
operator|.
name|setError
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: Error on ODP registry: "
operator|+
name|registry1
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|registry1
operator|!=
literal|null
condition|)
name|registries
operator|.
name|add
argument_list|(
name|registry1
argument_list|)
expr_stmt|;
else|else
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: Cannot load ODP registry: "
operator|+
name|regs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|registries
return|;
block|}
specifier|private
name|List
argument_list|<
name|Registry
argument_list|>
name|getRegistries
parameter_list|(
name|XDRegistrySource
name|source
parameter_list|)
block|{
name|List
argument_list|<
name|Registry
argument_list|>
name|registries
init|=
operator|new
name|ArrayList
argument_list|<
name|Registry
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|getPhysicalIRI
argument_list|()
operator|!=
literal|null
condition|)
block|{          }
elseif|else
if|if
condition|(
name|source
operator|.
name|isInputStreamAvailable
argument_list|()
condition|)
block|{          }
elseif|else
if|if
condition|(
name|source
operator|.
name|isReaderAvailable
argument_list|()
condition|)
block|{          }
return|return
name|registries
return|;
block|}
specifier|private
name|RegistryLibrary
name|getTree
parameter_list|(
name|OWLNamedIndividual
name|i
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|)
block|{
name|RegistryLibrary
name|to
init|=
operator|new
name|RegistryLibrary
argument_list|(
operator|new
name|RDFSLabelGetter
argument_list|(
name|ontology
argument_list|,
name|i
operator|.
name|getIRI
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getPreferred
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|children
init|=
name|this
operator|.
name|getParts
argument_list|(
name|i
argument_list|,
name|ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|to
return|;
for|for
control|(
name|OWLNamedIndividual
name|childIndividual
range|:
name|children
control|)
block|{
if|if
condition|(
name|isLibrary
argument_list|(
name|childIndividual
argument_list|,
name|ontology
argument_list|)
condition|)
block|{
name|RegistryLibrary
name|t
init|=
name|this
operator|.
name|getTree
argument_list|(
name|childIndividual
argument_list|,
name|ontology
argument_list|)
decl_stmt|;
name|to
operator|.
name|addChild
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isOntology
argument_list|(
name|childIndividual
argument_list|,
name|ontology
argument_list|)
condition|)
block|{
name|RegistryOntology
name|t
init|=
operator|new
name|RegistryOntology
argument_list|(
operator|new
name|RDFSLabelGetter
argument_list|(
name|ontology
argument_list|,
name|childIndividual
operator|.
name|getIRI
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getPreferred
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setURL
argument_list|(
name|childIndividual
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|to
operator|.
name|addChild
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: MalformedURLException caught while getting tree for "
operator|+
name|i
operator|.
name|getIRI
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|to
return|;
block|}
specifier|public
name|boolean
name|hasChildren
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|instanceof
name|RegistryLibrary
condition|)
return|return
operator|(
operator|(
name|RegistryLibrary
operator|)
name|parent
operator|)
operator|.
name|hasChildren
argument_list|()
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasLibrary
parameter_list|(
name|Registry
name|reg
parameter_list|,
name|IRI
name|libraryID
parameter_list|)
block|{
for|for
control|(
name|RegistryItem
name|child
range|:
name|reg
operator|.
name|getChildren
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|child
operator|.
name|isLibrary
argument_list|()
operator|&&
name|IRI
operator|.
name|create
argument_list|(
name|child
operator|.
name|getURL
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|libraryID
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// If some URL is not well-formed here and there, sticazzi
continue|continue;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isLibrary
parameter_list|(
name|OWLIndividual
name|indy
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|)
block|{
name|OWLClass
name|folderClass
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|CODD_OntologyLibrary
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|folderClass
operator|.
name|getIndividuals
argument_list|(
name|ontology
argument_list|)
operator|.
name|contains
argument_list|(
name|indy
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|isOntology
parameter_list|(
name|OWLIndividual
name|indy
parameter_list|,
name|OWLOntology
name|ontology
parameter_list|)
block|{
name|OWLClass
name|ontologyClass
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CODOVocabulary
operator|.
name|CODK_Ontology
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|ontologyClass
operator|.
name|getIndividuals
argument_list|(
name|ontology
argument_list|)
operator|.
name|contains
argument_list|(
name|indy
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|loadLocations
parameter_list|()
throws|throws
name|RegistryContentException
block|{
try|try
block|{
name|registryOntologiesCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Registry
argument_list|>
name|registries
init|=
name|getRegistries
argument_list|()
decl_stmt|;
name|int
name|regsize
init|=
name|registries
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Registry
name|current
range|:
name|registries
control|)
block|{
name|c
operator|++
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loading "
operator|+
name|current
operator|.
name|toString
argument_list|()
operator|+
literal|" ["
operator|+
name|c
operator|+
literal|"/"
operator|+
name|regsize
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ODPRegistryCacheManager
operator|.
name|registryContains
argument_list|(
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Fetching: "
operator|+
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|registryOntologiesCache
operator|.
name|put
argument_list|(
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|,
name|ODPRegistryCacheManager
operator|.
name|getOntology
argument_list|(
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URIUnresolvableException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: could not resolve URI "
operator|+
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|registryOntologiesCache
operator|.
name|put
argument_list|(
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ODPRegistryCacheException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: failed to cache ontology "
operator|+
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|registryOntologiesCache
operator|.
name|put
argument_list|(
name|current
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|c
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Registry
name|registry
range|:
name|registries
control|)
block|{
name|c
operator|++
expr_stmt|;
try|try
block|{
name|registry
operator|=
name|setupRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryContentException
name|e
parameter_list|)
block|{
name|registry
operator|.
name|setError
argument_list|(
literal|" [Unable to load from location "
operator|+
name|registry
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KreS :: Exception occurred while trying to get registry locations."
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The ontology at<code>physicalIRI</code> may in turn include more than one registry.      *       * @param physicalIRI      * @return      */
specifier|public
name|Set
argument_list|<
name|Registry
argument_list|>
name|loadRegistriesEager
parameter_list|(
name|IRI
name|physicalIRI
parameter_list|)
block|{
name|Set
argument_list|<
name|Registry
argument_list|>
name|results
init|=
operator|new
name|HashSet
argument_list|<
name|Registry
argument_list|>
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|onm
operator|.
name|getOwlCacheManager
argument_list|()
decl_stmt|;
comment|// getManager();
try|try
block|{
name|OWLOntology
name|ontology
init|=
name|mgr
operator|.
name|loadOntology
argument_list|(
name|physicalIRI
argument_list|)
decl_stmt|;
for|for
control|(
name|OWLIndividual
name|ind
range|:
name|cRegistryLibrary
operator|.
name|getIndividuals
argument_list|(
name|ontology
argument_list|)
control|)
if|if
condition|(
name|ind
operator|.
name|isNamed
argument_list|()
condition|)
block|{
name|OWLNamedIndividual
name|nind
init|=
name|ind
operator|.
name|asOWLNamedIndividual
argument_list|()
decl_stmt|;
name|IRI
name|regiri
init|=
name|nind
operator|.
name|getIRI
argument_list|()
decl_stmt|;
name|Registry
name|registry
init|=
operator|new
name|Registry
argument_list|(
name|regiri
operator|.
name|getFragment
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// TODO: avoid using toURL crap
name|registry
operator|.
name|setURL
argument_list|(
name|regiri
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// Why should a well-formed IRI be a malformed URL
comment|// anyway ?
name|log
operator|.
name|warn
argument_list|(
literal|"KReS :: ontology document IRI "
operator|+
name|physicalIRI
operator|+
literal|" matches a malformed URI pattern."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Find the ontologies in this registry
comment|// If this is individual is not "ontology of" or "part of",
comment|// then proceed.
if|if
condition|(
operator|!
name|nind
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|containsKey
argument_list|(
name|isPartOf
argument_list|)
operator|&&
operator|!
name|nind
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|containsKey
argument_list|(
name|isOntologyOf
argument_list|)
condition|)
block|{
name|registry
operator|.
name|addChild
argument_list|(
name|this
operator|.
name|getTree
argument_list|(
operator|(
name|OWLNamedIndividual
operator|)
name|nind
argument_list|,
name|ontology
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"KReS :: ontology "
operator|+
name|e
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" exists and will not be reloaded."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Do nothing. Existing ontologies are fine.
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: Could not load ontology "
operator|+
name|physicalIRI
operator|+
literal|" ."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{}
return|return
name|results
return|;
block|}
comment|/**      * Requires that Registry objects are created earlier. Problem is, we might not know their names a priori.      *       * @param registry      * @return      * @throws RegistryContentException      */
specifier|private
name|Registry
name|setupRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
throws|throws
name|RegistryContentException
block|{
comment|// For each registry:
name|registry
operator|.
name|removeChildren
argument_list|()
expr_stmt|;
name|OWLOntology
name|ontology
init|=
name|getMergedOntology
argument_list|(
name|registry
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: Restore ODP cache manager.
comment|// setManager(ODPRegistryCacheManager.getManager());
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|folderSet
init|=
name|cRegistryLibrary
operator|.
name|getIndividuals
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
comment|// Look for first level elements;
name|Iterator
argument_list|<
name|OWLIndividual
argument_list|>
name|iter
init|=
name|folderSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLIndividual
name|i
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|instanceof
name|OWLNamedIndividual
condition|)
block|{
if|if
condition|(
operator|!
name|i
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|containsKey
argument_list|(
name|isPartOf
argument_list|)
operator|&&
operator|!
name|i
operator|.
name|getObjectPropertyValues
argument_list|(
name|ontology
argument_list|)
operator|.
name|containsKey
argument_list|(
name|isOntologyOf
argument_list|)
condition|)
block|{
name|registry
operator|.
name|addChild
argument_list|(
name|this
operator|.
name|getTree
argument_list|(
operator|(
name|OWLNamedIndividual
operator|)
name|i
argument_list|,
name|ontology
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|registry
return|;
block|}
block|}
end_class

end_unit

