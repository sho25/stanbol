begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|MissingImportEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|MissingImportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyDocumentAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  *<p>  * This class is intended to manage the OWLOntologyAlreadyExistsException when it is thrown  * by the OWLOntologyManager as a missing import event.</p>  *   *<p>The OWLOntologyAlreadyExistsException sometimes   * occurs while loading ontologies from the owl:import statement. In some  * cases, duplicate import statements in the ontology network will fail when you want to  * do not tolerate missing imports.</p>  *   *<p>See this scenario: if you set silent missing  * import handling to true in the OWLOntologyManager, then the manager will  * tolerate this unsuccesful tries, but you will not be sure that you have all  * the ontologies you need. If you set silent missing import handling to false,  * then the loading of the network will fail if there are duplicate owl:import  * statements in different places.</p>  *   * @author enrico daga  *   */
end_comment

begin_class
specifier|public
class|class
name|OWLDuplicateSafeLoader
block|{
comment|/** 	 *<p> 	 * This is the central method that execute the loading. 	 * The OWLOntologyManager method internally used is loadOntology(). 	 * The original state of the manager (silent missing import handling) is restored 	 * after the operation. 	 * If the operation fails, an exception is thrown. 	 * Elsewhere, the OWLOntology instance is returned. 	 *</p> 	 *  	 * @param manager - an OWLOntologyManager 	 * @param location - a string uri to load from   	 * @return ontology - the OWLOntology object 	 */
specifier|public
specifier|synchronized
name|OWLOntology
name|load
parameter_list|(
name|OWLOntologyManager
name|manager
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
comment|/** 		 * We save the state of the passed manager 		 */
name|boolean
name|stateImportsHandling
init|=
name|manager
operator|.
name|isSilentMissingImportsHandling
argument_list|()
decl_stmt|;
comment|/** 		 * We set the silent missing imports handling to true. (We want to 		 * manage this without considering duplicated import statements) 		 */
name|manager
operator|.
name|setSilentMissingImportsHandling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/** 		 * we first create a set to save any missing uri as string 		 */
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 		 * We setup our missing import listener 		 */
name|MissingImportListener
name|missingImportListener
init|=
operator|new
name|MissingImportListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|importMissing
parameter_list|(
name|MissingImportEvent
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|arg0
operator|.
name|getCreationException
argument_list|()
operator|instanceof
name|OWLOntologyDocumentAlreadyExistsException
condition|)
block|{
comment|// Simply do not consider already existent ontologies as
comment|// missing imports
block|}
else|else
name|missing
operator|.
name|add
argument_list|(
name|arg0
operator|.
name|getImportedOntologyURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** 		 * Then we add the import listener, which will remember all the missed 		 * uris 		 */
name|manager
operator|.
name|addMissingImportListener
argument_list|(
name|missingImportListener
argument_list|)
expr_stmt|;
name|OWLOntology
name|owlontology
init|=
literal|null
decl_stmt|;
comment|/** 		 * We do the actual loading. Now, if some exception occurs we return it, 		 * since the missing import is the one we are interested to control. 		 */
try|try
block|{
name|owlontology
operator|=
name|manager
operator|.
name|loadOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
comment|/** 		 * Now we re-set the original state of the manager 		 */
name|manager
operator|.
name|setSilentMissingImportsHandling
argument_list|(
name|stateImportsHandling
argument_list|)
expr_stmt|;
name|manager
operator|.
name|removeMissingImportListener
argument_list|(
name|missingImportListener
argument_list|)
expr_stmt|;
comment|/** 		 * Now - this is the key part - we remove from the list of not available 		 * ontologies the document uris which have been alredy loaded (of course 		 * after this method clients can overwrite such ontology document 		 * location) 		 */
for|for
control|(
name|OWLOntology
name|o
range|:
name|manager
operator|.
name|getOntologies
argument_list|()
control|)
block|{
name|String
name|miss
init|=
name|manager
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|missing
operator|.
name|remove
argument_list|(
name|miss
argument_list|)
expr_stmt|;
block|}
comment|/** 		 * Are there any missing imports? 		 */
name|int
name|missingImports
init|=
name|missing
operator|.
name|size
argument_list|()
decl_stmt|;
comment|/** 		 * If yes, throw an exception! 		 */
if|if
condition|(
name|missingImports
operator|!=
literal|0
condition|)
block|{
name|String
index|[]
name|missuris
init|=
operator|new
name|String
index|[
name|missing
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|missuris
operator|=
name|missing
operator|.
name|toArray
argument_list|(
name|missuris
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OWLOntologyCreationException
argument_list|(
literal|"There are missing imports: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|missuris
argument_list|)
argument_list|)
throw|;
block|}
comment|/** 		 * If no, just return the filled ontology manager. 		 */
return|return
name|owlontology
return|;
block|}
block|}
end_class

end_unit

