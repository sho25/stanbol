begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OWLExportable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SpaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract Clerezza-native implementation of {@link OntologySpace}.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOntologySpaceImpl
extends|extends
name|AbstractOntologyCollectorImpl
implements|implements
name|OntologySpace
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|silent
init|=
literal|false
decl_stmt|;
specifier|protected
name|SpaceType
name|type
decl_stmt|;
specifier|public
name|AbstractOntologySpaceImpl
parameter_list|(
name|String
name|spaceID
parameter_list|,
name|IRI
name|namespace
parameter_list|,
name|SpaceType
name|type
parameter_list|,
name|TcManager
name|tcManager
parameter_list|)
block|{
name|super
argument_list|(
name|spaceID
argument_list|,
name|namespace
argument_list|,
name|tcManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|asOWLOntology
parameter_list|()
block|{
return|return
name|this
operator|.
name|asOWLOntology
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**      * FIXME not merging yet      *       * @see OWLExportable#asOWLOntology(boolean)      */
annotation|@
name|Override
specifier|public
name|OWLOntology
name|asOWLOntology
parameter_list|(
name|boolean
name|merge
parameter_list|)
block|{
name|OWLOntology
name|root
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
name|_id
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e1
parameter_list|)
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|iri
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|_id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
comment|// Add the import declarations for directly managed ontologies.
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|ontologyManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntology
name|o
range|:
name|getOntologies
argument_list|(
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
continue|continue;
name|String
name|base
init|=
name|URIUtils
operator|.
name|upOne
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
name|getID
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|IRI
name|ontologyIri
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|isAnonymous
argument_list|()
condition|)
try|try
block|{
name|ontologyIri
operator|=
name|ontologyManager
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ontologyIri
operator|=
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ontologyIri
operator|=
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getDefaultDocumentIRI
argument_list|()
expr_stmt|;
block|}
name|IRI
name|physIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|base
operator|+
name|ontologyIri
argument_list|)
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|root
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|physIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ontologyManager
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
return|return
name|root
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSilentMissingOntologyHandling
parameter_list|()
block|{
return|return
name|silent
return|;
block|}
comment|/**      *       * @param id      *            The ontology space identifier. This implementation only allows non-null and non-empty      *            alphanumeric sequences, case-sensitive and preferably separated by a single slash character,      *            with optional dashes or underscores.      */
annotation|@
name|Override
specifier|protected
name|void
name|setID
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Space ID cannot be null."
argument_list|)
throw|;
name|id
operator|=
name|id
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Space ID cannot be empty."
argument_list|)
throw|;
if|if
condition|(
name|id
operator|.
name|matches
argument_list|(
literal|"[\\w-]+"
argument_list|)
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Space ID {} is a single alphanumeric sequence, with no separating slash."
operator|+
literal|" This is legal but strongly discouraged. Please consider using"
operator|+
literal|" space IDs of the form [scope_id]/[space_type], e.g. Users/core ."
argument_list|,
name|id
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|id
operator|.
name|matches
argument_list|(
literal|"[\\w-]+/[\\w-]+"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal space ID "
operator|+
name|id
operator|+
literal|" - Must be an alphanumeric sequence, (preferably two, "
operator|+
literal|" slash-separated), with optional underscores or dashes."
argument_list|)
throw|;
name|this
operator|.
name|_id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSilentMissingOntologyHandling
parameter_list|(
name|boolean
name|silent
parameter_list|)
block|{
name|this
operator|.
name|silent
operator|=
name|silent
expr_stmt|;
block|}
block|}
end_class

end_unit

