begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|owlapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyCollectorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyCollectorModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SessionOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SpaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|OWLOntologyDocumentTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StringDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StringDocumentTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyDocumentAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of an ontology space. While it still leaves it up to developers to decide what  * locking policies to adopt for subclasses (in the<code>setUp()</code> method), it provides default  * implementations of all other interface methods.<br>  *<br>  * NOTE: By default, an ontology space is NOT write-locked. Developers need to set the<code>locked</code>  * variable to true to make the space read-only.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOntologySpaceImpl
implements|implements
name|OntologySpace
block|{
specifier|protected
name|String
name|_id
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|OntologyCollectorListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|OntologyCollectorListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Indicates whether this ontology space is marked as read-only. Default value is false.      */
specifier|protected
specifier|volatile
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The identifier of the ontologies directly managed by this space (i.e. that were directly added to this      * space, hence not including those just pulled in via import statements).      */
specifier|protected
name|Map
argument_list|<
name|IRI
argument_list|,
name|OWLOntology
argument_list|>
name|managedOntologies
decl_stmt|;
specifier|protected
name|IRI
name|namespace
init|=
literal|null
decl_stmt|;
comment|/**      * Each ontology space comes with its OWL ontology manager. By default, it is not available to the outside      * world, unless subclasses implement methods to return it.      */
specifier|protected
name|OWLOntologyManager
name|ontologyManager
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|supportedTypes
decl_stmt|;
specifier|protected
name|SpaceType
name|type
decl_stmt|;
specifier|protected
name|AbstractOntologySpaceImpl
parameter_list|(
name|String
name|spaceID
parameter_list|,
name|IRI
name|namespace
parameter_list|,
name|SpaceType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|spaceID
argument_list|,
name|namespace
argument_list|,
name|type
argument_list|,
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new ontology space with the supplied ontology manager as the default manager for this space.      *       * @param spaceID      *            the IRI that will uniquely identify this space.      * @param ontologyManager      *            the default ontology manager for this space.      */
specifier|protected
name|AbstractOntologySpaceImpl
parameter_list|(
name|String
name|spaceID
parameter_list|,
name|IRI
name|namespace
parameter_list|,
name|SpaceType
name|type
parameter_list|,
name|OWLOntologyManager
name|ontologyManager
parameter_list|)
block|{
name|supportedTypes
operator|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|supportedTypes
operator|.
name|add
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|)
expr_stmt|;
name|setID
argument_list|(
name|spaceID
argument_list|)
expr_stmt|;
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
comment|// this.storage = storage;
if|if
condition|(
name|ontologyManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|ontologyManager
operator|=
name|ontologyManager
expr_stmt|;
else|else
name|this
operator|.
name|ontologyManager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|managedOntologies
operator|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|OWLOntology
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|OntologyCollectorListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|addOntology
parameter_list|(
name|OntologyInputSource
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|ontologySource
parameter_list|)
throws|throws
name|UnmodifiableOntologyCollectorException
block|{
if|if
condition|(
name|locked
condition|)
throw|throw
operator|new
name|UnmodifiableOntologyCollectorException
argument_list|(
name|this
argument_list|)
throw|;
name|log
operator|.
name|debug
argument_list|(
literal|"Trying to add ontology {} to space {}"
argument_list|,
name|ontologySource
operator|!=
literal|null
condition|?
name|ontologySource
operator|.
name|getRootOntology
argument_list|()
else|:
literal|"<NULL>"
argument_list|,
name|getNamespace
argument_list|()
operator|+
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntology
name|o
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ontologySource
operator|!=
literal|null
operator|&&
name|ontologySource
operator|.
name|hasRootOntology
argument_list|()
condition|)
block|{
name|Object
name|r
init|=
name|ontologySource
operator|.
name|getRootOntology
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|OWLOntology
condition|)
block|{
name|o
operator|=
operator|(
name|OWLOntology
operator|)
name|r
expr_stmt|;
comment|// Avoid adding the space top ontology itself.
if|if
condition|(
operator|!
name|o
operator|.
name|isAnonymous
argument_list|()
operator|&&
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add a space's own ontology to itself."
argument_list|)
throw|;
else|else
name|performAdd
argument_list|(
name|ontologySource
argument_list|)
expr_stmt|;
comment|// Remember that performAdd() also fires the event
block|}
else|else
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This ontology space implementation can only handle "
operator|+
name|OWLOntology
operator|.
name|class
operator|+
literal|" input sources."
argument_list|)
throw|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
return|return
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
else|else
return|return
literal|null
return|;
comment|// No ontology to add
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|asOWLOntology
parameter_list|(
name|boolean
name|merge
parameter_list|)
block|{
if|if
condition|(
name|merge
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Ontology merging not implemented yet. Please set merge parameter to false."
argument_list|)
throw|;
name|OWLOntology
name|root
decl_stmt|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
name|_id
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e1
parameter_list|)
block|{
name|root
operator|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|iri
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to assemble root ontology for scope "
operator|+
name|_id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
comment|// Add the import declarations for directly managed ontologies.
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|ontologyManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntology
name|o
range|:
name|getOntologies
argument_list|(
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
continue|continue;
name|String
name|base
init|=
name|URIUtils
operator|.
name|upOne
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
name|getID
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|IRI
name|ontologyIri
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|isAnonymous
argument_list|()
condition|)
try|try
block|{
name|ontologyIri
operator|=
name|ontologyManager
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ontologyIri
operator|=
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ontologyIri
operator|=
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getDefaultDocumentIRI
argument_list|()
expr_stmt|;
block|}
name|IRI
name|physIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|base
operator|+
name|ontologyIri
argument_list|)
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|root
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|physIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ontologyManager
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
comment|// return rootOntology;
return|return
name|root
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|export
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
if|if
condition|(
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
return|return
operator|(
name|O
operator|)
name|asOWLOntology
argument_list|(
name|merge
argument_list|)
return|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot export to "
operator|+
name|returnType
argument_list|)
throw|;
block|}
comment|/**      * Notifies all ontology space listeners that an ontology has been added to this space.      *       * @param ontologyIri      *            the identifier of the ontology that was added to this space.      */
specifier|protected
name|void
name|fireOntologyAdded
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
for|for
control|(
name|OntologyCollectorListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyAdded
argument_list|(
name|this
operator|.
name|getID
argument_list|()
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Notifies all ontology space listeners that an ontology has been removed from this space.      *       * @param ontologyIri      *            the identifier of the ontology that was removed from this space.      */
specifier|protected
name|void
name|fireOntologyRemoved
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
for|for
control|(
name|OntologyCollectorListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|onOntologyRemoved
argument_list|(
name|this
operator|.
name|getID
argument_list|()
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getDocumentIRI
parameter_list|()
block|{
return|return
name|IRI
operator|.
name|create
argument_list|(
name|getNamespace
argument_list|()
operator|+
name|getID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|_id
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|OntologyCollectorListener
argument_list|>
name|getListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|(
name|boolean
name|withClosure
parameter_list|)
block|{
return|return
name|withClosure
condition|?
name|ontologyManager
operator|.
name|getOntologies
argument_list|()
else|:
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|(
name|managedOntologies
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|Set
argument_list|<
name|O
argument_list|>
name|getManagedOntologies
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|withClosure
parameter_list|)
block|{
if|if
condition|(
operator|!
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This implementation can only get objects of type "
operator|+
name|OWLOntology
operator|.
name|class
argument_list|)
throw|;
return|return
operator|(
name|Set
argument_list|<
name|O
argument_list|>
operator|)
name|getOntologies
argument_list|(
name|withClosure
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Requesting ontology {} from space {}"
argument_list|,
name|ontologyIri
argument_list|,
name|getNamespace
argument_list|()
operator|+
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntology
name|o
init|=
name|managedOntologies
operator|.
name|get
argument_list|(
name|ontologyIri
argument_list|)
decl_stmt|;
comment|// Iterator<OWLOntology> it = managedOntologies.iterator();
comment|// while (it.hasNext()&& o == null) {
comment|// OWLOntology temp = it.next();
comment|// if (!temp.isAnonymous()&& ontologyIri.equals(temp.getOntologyID().getOntologyIRI())) o = temp;
comment|// }
comment|// if (o == null) o = ontologyManager.getOntology(ontologyIri);
return|return
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
if|if
condition|(
name|merge
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Merge not implemented yet in OWLAPI version. Just a matter of time..."
argument_list|)
throw|;
return|return
name|getOntology
argument_list|(
name|ontologyIri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getOntology
argument_list|(
name|ontologyIri
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
if|if
condition|(
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
return|return
operator|(
name|O
operator|)
name|getOntology
argument_list|(
name|ontologyIri
argument_list|,
name|merge
argument_list|)
return|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot export to "
operator|+
name|returnType
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOntologyCount
parameter_list|(
name|boolean
name|withClosure
parameter_list|)
block|{
if|if
condition|(
operator|!
name|withClosure
condition|)
return|return
name|managedOntologies
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
else|else
block|{
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntology
name|o
range|:
name|managedOntologies
operator|.
name|values
argument_list|()
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|o
operator|.
name|getImportsClosure
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOntologyCount
parameter_list|()
block|{
return|return
name|getOntologyCount
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSupportedOntologyTypes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|supportedTypes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
return|return
name|this
operator|.
name|getOntology
argument_list|(
name|ontologyIri
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|locked
return|;
block|}
specifier|private
name|void
name|performAdd
parameter_list|(
name|OntologyInputSource
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|ontSrc
parameter_list|)
block|{
name|Object
name|obj
init|=
name|ontSrc
operator|.
name|getRootOntology
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontology
init|=
operator|(
name|OWLOntology
operator|)
name|obj
decl_stmt|;
comment|// Should not modify the child ontology in any way.
comment|// TODO implement transaction control.
comment|// See to it that the ontology is copied to this manager.
name|OWLOntology
name|newOnt
init|=
name|reload
argument_list|(
operator|(
name|OWLOntology
operator|)
name|ontology
argument_list|,
name|ontologyManager
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// if (newOnt!=null)
name|managedOntologies
operator|.
name|put
argument_list|(
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|newOnt
argument_list|)
argument_list|,
name|newOnt
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Store the top ontology
if|if
condition|(
operator|!
operator|(
name|this
operator|instanceof
name|SessionOntologySpace
operator|)
condition|)
block|{
comment|// No longer storing in OWLAPI implementation!
comment|// if (storage == null) log.warn(
comment|// "No ontology storage found. Ontology {} will be stored in-memory only.", ontology);
comment|// else {
comment|// // storage = new ClerezzaOntologyStorage(tcManager, wtcProvider)
comment|// storage.store(ontology);
comment|// }
block|}
comment|// ONManager.get().getOntologyStore().load(rootOntology.getOntologyID().getOntologyIRI());
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"An error occurred while storing ontology "
operator|+
name|ontology
operator|+
literal|" . Ontology management will be volatile."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|fireOntologyAdded
argument_list|(
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|ontology
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|OWLOntology
name|reload
parameter_list|(
name|OWLOntology
name|ontology
parameter_list|,
name|OWLOntologyManager
name|mgr
parameter_list|,
name|boolean
name|withClosure
parameter_list|)
block|{
if|if
condition|(
name|ontology
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ontology cannot be null"
argument_list|)
throw|;
if|if
condition|(
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|==
name|ontologyManager
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is already managed by the supplied OWLOntologyManager. Skipping copy."
argument_list|,
name|ontology
argument_list|)
expr_stmt|;
return|return
name|ontology
return|;
block|}
name|OWLOntology
name|newOnt
init|=
literal|null
decl_stmt|;
name|OWLOntologyDocumentTarget
name|tgt
init|=
operator|new
name|StringDocumentTarget
argument_list|()
decl_stmt|;
try|try
block|{
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|saveOntology
argument_list|(
name|ontology
argument_list|,
name|tgt
argument_list|)
expr_stmt|;
name|newOnt
operator|=
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|StringDocumentSource
argument_list|(
name|tgt
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to re-serialize ontology."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to deserialize ontology."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|newOnt
return|;
block|}
comment|/**      * Utility method to copy an ontology (or ontology network) across ontology managers without having it go      * online to reload it.      *       * @param ontology      *            the ontology to copy from its own manager to the supplied one.      * @param mgr      *            the ontology manager where the ontology will be copied to. If null, the space's default      *            ontology manager will be used.      * @param withClosure      *            if true, the whole imports closure will be reloaded, otherwise only the root ontology will      *            be reloaded. However, import statements and other non-logical axioms will still be copied.      * @param merge      *            if true, all the axioms from the ontology closure will be merged in the new ontology maned      *            after<code>ontology</code>. This parameter has virtually no effect if      *<code>withClosure</code> is set to false.      */
specifier|protected
name|OWLOntology
name|reload
parameter_list|(
name|OWLOntology
name|ontology
parameter_list|,
name|OWLOntologyManager
name|mgr
parameter_list|,
name|boolean
name|withClosure
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
if|if
condition|(
name|ontology
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ontology cannot be null"
argument_list|)
throw|;
if|if
condition|(
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|==
name|ontologyManager
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is already managed by the supplied OWLOntologyManager. Skipping copy."
argument_list|,
name|ontology
argument_list|)
expr_stmt|;
return|return
name|ontology
return|;
block|}
name|OWLOntology
name|root
init|=
literal|null
decl_stmt|;
name|IRI
name|location
init|=
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
name|IRI
name|idd
init|=
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
name|mgr
operator|=
name|ontologyManager
expr_stmt|;
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|closure
init|=
name|withClosure
condition|?
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getImportsClosure
argument_list|(
name|ontology
argument_list|)
else|:
name|Collections
operator|.
name|singleton
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|removeOntology
argument_list|(
name|ontology
argument_list|)
expr_stmt|;
if|if
condition|(
name|merge
condition|)
try|try
block|{
name|root
operator|=
name|mgr
operator|.
name|createOntology
argument_list|(
name|idd
argument_list|,
name|closure
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setOntologyDocumentIRI
argument_list|(
name|root
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception caught while copying ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" across managers"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|OWLOntology
name|o
range|:
name|closure
control|)
block|{
comment|// System.out.println("In closure of " + ontology + " : " + o);
name|IRI
name|id2
init|=
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|o
argument_list|)
decl_stmt|;
comment|// OWLOntologyID id = o.getOntologyID();
if|if
condition|(
name|mgr
operator|.
name|contains
argument_list|(
name|id2
argument_list|)
condition|)
block|{
comment|// System.out.println("REMOVING " + id2);
name|mgr
operator|.
name|removeOntology
argument_list|(
name|mgr
operator|.
name|getOntology
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|OWLOntology
name|o1
init|=
name|mgr
operator|.
name|createOntology
argument_list|(
name|id2
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
comment|// System.out.println("DIO BASTARDO " + o1);
name|mgr
operator|.
name|setOntologyDocumentIRI
argument_list|(
name|o1
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|idd
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
condition|)
name|root
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// System.out.println("ARIFAMO " + e.getOntologyID());
if|if
condition|(
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|!=
name|mgr
condition|)
block|{
name|mgr
operator|.
name|removeOntology
argument_list|(
name|o
argument_list|)
expr_stmt|;
try|try
block|{
name|OWLOntology
name|o1
init|=
name|mgr
operator|.
name|createOntology
argument_list|(
name|id2
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|setOntologyDocumentIRI
argument_list|(
name|o1
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|idd
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
condition|)
name|root
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception caught while copying ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" across managers"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyDocumentAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// System.out.println("RIRIFAMO " + e.getOntologyDocumentIRI());
if|if
condition|(
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|!=
name|mgr
condition|)
block|{
name|OWLOntology
name|oRemove
init|=
name|mgr
operator|.
name|getOntology
argument_list|(
name|e
operator|.
name|getOntologyDocumentIRI
argument_list|()
argument_list|)
decl_stmt|;
comment|// System.out.println("LEVIAMO " + oRemove);
name|mgr
operator|.
name|removeOntology
argument_list|(
name|oRemove
argument_list|)
expr_stmt|;
try|try
block|{
name|OWLOntology
name|o1
init|=
name|mgr
operator|.
name|createOntology
argument_list|(
name|id2
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|setOntologyDocumentIRI
argument_list|(
name|o1
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|idd
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
condition|)
name|root
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception caught while copying ontology "
operator|+
name|ontology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" across managers"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to re-create ontology "
operator|+
name|id2
operator|+
literal|" for ontology space "
operator|+
name|getID
argument_list|()
operator|+
literal|" . Continuing..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|root
return|;
block|}
return|return
name|root
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|OntologyCollectorListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeOntology
parameter_list|(
name|IRI
name|ontologyId
parameter_list|)
throws|throws
name|OntologyCollectorModificationException
block|{
if|if
condition|(
name|locked
condition|)
throw|throw
operator|new
name|UnmodifiableOntologyCollectorException
argument_list|(
name|this
argument_list|)
throw|;
comment|// OWLOntology o = null;
comment|//
comment|// if (src != null&& src.hasRootOntology()) {
comment|// Object r = src.getRootOntology();
comment|// if (r instanceof OWLOntology) {
comment|// o = (OWLOntology) r;
comment|// if (!o.isAnonymous()&& getID().equals(o.getOntologyID().getOntologyIRI())) throw new
comment|// IllegalArgumentException(
comment|// "Cannot remove a space's own ontology form.");
comment|// } else throw new UnsupportedOperationException(
comment|// "This ontology space implementation can only handle " + OWLOntology.class
comment|// + " input sources.");
comment|// } else return; // No ontology to remove
comment|//
comment|// // o should no longer be null here.
comment|//
comment|// // TODO : find a way to remove anonymous ontologies.
comment|// IRI logicalID = null, physicalIRI = null;
comment|// try {
comment|// logicalID = o.getOntologyID().getOntologyIRI();
comment|// physicalIRI = src.getPhysicalIRI();
comment|// if (physicalIRI == null) if (isSilentMissingOntologyHandling()) return;
comment|// else throw new MissingOntologyException(this, null);
comment|// if (logicalID == null) logicalID = physicalIRI;
comment|// } catch (RuntimeException ex) {
comment|// if (isSilentMissingOntologyHandling()) return;
comment|// else throw new MissingOntologyException(this, null);
comment|// }
try|try
block|{
name|ontologyManager
operator|.
name|removeOntology
argument_list|(
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
expr_stmt|;
name|managedOntologies
operator|.
name|remove
argument_list|(
name|ontologyId
argument_list|)
expr_stmt|;
name|fireOntologyRemoved
argument_list|(
name|ontologyId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OntologyCollectorModificationException
argument_list|(
name|this
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      *       * @param id      *            The ontology space identifier. This implementation only allows non-null and non-empty      *            alphanumeric sequences, case-sensitive and preferably separated by a single slash character,      *            with optional dashes or underscores.      */
specifier|protected
name|void
name|setID
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Space ID cannot be null."
argument_list|)
throw|;
name|id
operator|=
name|id
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Space ID cannot be empty."
argument_list|)
throw|;
if|if
condition|(
name|id
operator|.
name|matches
argument_list|(
literal|"[\\w-]+"
argument_list|)
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Space ID {} is a single alphanumeric sequence, with no separating slash."
operator|+
literal|" This is legal but strongly discouraged. Please consider using"
operator|+
literal|" space IDs of the form [scope_id]/[space_type], e.g. Users/core ."
argument_list|,
name|id
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|id
operator|.
name|matches
argument_list|(
literal|"[\\w-]+/[\\w-]+"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal space ID "
operator|+
name|id
operator|+
literal|" - Must be an alphanumeric sequence, (preferably two, "
operator|+
literal|" slash-separated), with optional underscores or dashes."
argument_list|)
throw|;
name|this
operator|.
name|_id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * @param namespace      *            The OntoNet namespace that will prefix the space ID in Web references. This implementation      *            only allows non-null and non-empty IRIs, with no query or fragment. Hash URIs are not      *            allowed, slash URIs are preferred. If neither, a slash will be concatenated and a warning      *            will be logged.      *       * @see OntologySpace#setNamespace(IRI)      */
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namespace cannot be null."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Query is not allowed in OntoNet namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toURI
argument_list|()
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI Fragment is not allowed in OntoNet namespaces."
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OntoNet namespaces must not end with a hash ('#') character."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|namespace
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Namespace {} does not end with slash character ('/'). It will be added automatically."
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|namespace
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
block|}
end_class

end_unit

