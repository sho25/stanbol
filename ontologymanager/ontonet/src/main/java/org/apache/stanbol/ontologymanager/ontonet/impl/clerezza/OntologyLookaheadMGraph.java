begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWL2Constants
import|;
end_import

begin_comment
comment|/**  * An utility modifiable graph that only  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyLookaheadMGraph
extends|extends
name|SimpleMGraph
block|{
specifier|private
name|UriRef
name|ontologyIRI
init|=
literal|null
decl_stmt|,
name|versionIRI
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|performAdd
parameter_list|(
name|Triple
name|t
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
comment|// filter the interesting Triples
if|if
condition|(
name|RDF
operator|.
name|type
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getPredicate
argument_list|()
argument_list|)
operator|&&
name|OWL
operator|.
name|Ontology
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getObject
argument_list|()
argument_list|)
condition|)
name|b
operator|=
name|super
operator|.
name|performAdd
argument_list|(
name|t
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|new
name|UriRef
argument_list|(
name|OWL2Constants
operator|.
name|OWL_VERSION_IRI
argument_list|)
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getPredicate
argument_list|()
argument_list|)
condition|)
name|b
operator|=
name|super
operator|.
name|performAdd
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// check the currently available triples for the Ontology ID
name|checkOntologyId
argument_list|()
expr_stmt|;
if|if
condition|(
name|ontologyIRI
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
comment|// stop importing
comment|// TODO: add a limit to the triples you read
return|return
name|b
return|;
block|}
specifier|public
name|UriRef
name|getOntologyIRI
parameter_list|()
block|{
return|return
name|ontologyIRI
return|;
block|}
specifier|private
name|void
name|checkOntologyId
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|this
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NonLiteral
name|s
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|instanceof
name|UriRef
condition|)
block|{
name|ontologyIRI
operator|=
operator|(
name|UriRef
operator|)
name|s
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

