begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of an {@link OntologyInputSource} that returns {@link Graph} objects as ontologies.  *   * Subclasses must implement the {@link #getImports(boolean)} method, as the availability of imported  * ontologies might depend on the input source being able to access the {@link TcManager} where they are  * stored.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractClerezzaGraphInputSource
extends|extends
name|AbstractGenericInputSource
argument_list|<
name|TripleCollection
argument_list|>
block|{
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|bindRootOntology
parameter_list|(
name|TripleCollection
name|ontology
parameter_list|)
block|{
name|super
operator|.
name|bindRootOntology
argument_list|(
name|ontology
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|TripleCollection
argument_list|>
name|getImports
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
return|return
name|getImportedGraphs
argument_list|(
name|rootOntology
argument_list|,
name|recursive
argument_list|)
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|TripleCollection
argument_list|>
name|getImportedGraphs
parameter_list|(
name|TripleCollection
name|g
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|Set
argument_list|<
name|TripleCollection
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|TripleCollection
argument_list|>
argument_list|()
decl_stmt|;
name|UriRef
name|u
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|g
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|subj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"RDF Graph has multiple OWL ontology definitions! Ignoring all but {}"
argument_list|,
name|subj
argument_list|)
expr_stmt|;
if|if
condition|(
name|subj
operator|instanceof
name|UriRef
condition|)
name|u
operator|=
operator|(
name|UriRef
operator|)
name|subj
expr_stmt|;
block|}
name|it
operator|=
name|g
operator|.
name|filter
argument_list|(
name|u
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
block|{
name|TripleCollection
name|gr
init|=
name|TcManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getTriples
argument_list|(
operator|(
name|UriRef
operator|)
name|r
argument_list|)
decl_stmt|;
comment|// Avoid calls to getGraph() to save memory
comment|// if (gr instanceof Graph)
name|result
operator|.
name|add
argument_list|(
comment|/* (Graph) */
name|gr
argument_list|)
expr_stmt|;
comment|// else if (gr instanceof MGraph) result.add(((MGraph) gr).getGraph());
if|if
condition|(
name|recursive
condition|)
name|result
operator|.
name|addAll
argument_list|(
name|getImportedGraphs
argument_list|(
name|gr
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

