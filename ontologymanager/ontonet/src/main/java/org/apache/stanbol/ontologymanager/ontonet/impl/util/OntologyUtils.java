begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|MANCHESTER_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|OWL_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologySpaceSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StringDocumentTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|UnknownOWLOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A set of static utility methods for managing ontologies.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OntologyUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|preferredFormats
init|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|}
decl_stmt|;
specifier|public
specifier|static
name|OWLOntology
name|buildImportTree
parameter_list|(
name|OntologyInputSource
argument_list|<
name|OWLOntology
argument_list|>
name|rootSrc
parameter_list|,
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|subtrees
parameter_list|)
block|{
return|return
name|buildImportTree
argument_list|(
name|rootSrc
operator|.
name|getRootOntology
argument_list|()
argument_list|,
name|subtrees
argument_list|,
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *       * @param rootSrc      * @param subtrees      * @param mgr      * @return      */
specifier|public
specifier|static
name|OWLOntology
name|buildImportTree
parameter_list|(
name|OntologyInputSource
argument_list|<
name|OWLOntology
argument_list|>
name|rootSrc
parameter_list|,
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|subtrees
parameter_list|,
name|OWLOntologyManager
name|mgr
parameter_list|)
block|{
if|if
condition|(
name|rootSrc
operator|instanceof
name|OntologySpaceSource
condition|)
block|{
name|OntologySpace
name|spc
init|=
operator|(
operator|(
name|OntologySpaceSource
operator|)
name|rootSrc
operator|)
operator|.
name|asOntologySpace
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntology
name|o
range|:
name|subtrees
control|)
try|try
block|{
name|spc
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologySource
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot add ontology {} to unmodifiable space {}"
argument_list|,
name|o
argument_list|,
name|spc
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|buildImportTree
argument_list|(
name|rootSrc
operator|.
name|getRootOntology
argument_list|()
argument_list|,
name|subtrees
argument_list|,
name|mgr
argument_list|)
return|;
block|}
comment|/**      * Non-recursively adds import statements to the root ontology so that it is directly linked to all the      * ontologies in the subtrees set.      *       * @param root      *            the ontology to which import subtrees should be appended. If null, a runtime exception will      *            be thrown.      * @param subtrees      *            the set of target ontologies for import statements. These can in turn be importing other      *            ontologies, hence the&quot;subtree&quot; notation. A single statement will be added for      *            each member of this set.      * @return the same input ontology as defined in<code>root</code>, but with the added import statements.      */
specifier|public
specifier|static
name|OWLOntology
name|buildImportTree
parameter_list|(
name|OWLOntology
name|root
parameter_list|,
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|subtrees
parameter_list|)
block|{
return|return
name|buildImportTree
argument_list|(
name|root
argument_list|,
name|subtrees
argument_list|,
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Non-recursively adds import statements to the root ontology so that it is directly linked to all the      * ontologies in the subtrees set.      *       * @param parent      *            the ontology to which import subtrees should be appended. If null, a runtime exception will      *            be thrown.      * @param subtrees      *            the set of target ontologies for import statements. These can in turn be importing other      *            ontologies, hence the&quot;subtree&quot; notation. A single statement will be added for      *            each member of this set.      * @param mgr      *            the OWL ontology manager to use for constructing the import tree. If null, an internal one      *            will be used instead, otherwise an existing ontology manager can be used e.g. for extracting      *            import statements from its IRI mappers or known ontologies. Note that the supplied manager      *            will<i>never</i> try to load any ontologies, even when they are unknown.      * @return the same input ontology as defined in<code>root</code>, but with the added import statements.      */
specifier|public
specifier|static
name|OWLOntology
name|buildImportTree
parameter_list|(
name|OWLOntology
name|parent
parameter_list|,
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|subtrees
parameter_list|,
name|OWLOntologyManager
name|mgr
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot append import trees to a nonexistent ontology."
argument_list|)
throw|;
comment|// If no manager was supplied, use a temporary one.
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
name|mgr
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
name|OWLDataFactory
name|owlFactory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntology
name|o
range|:
name|subtrees
control|)
block|{
name|IRI
name|importIri
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|/*                  * First query the manager, as it could know the physical location of anonymous ontologies, if                  * previously loaded or IRI-mapped.                  */
name|importIri
operator|=
name|mgr
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownOWLOntologyException
name|ex
parameter_list|)
block|{
comment|/*                  * Otherwise, ask the ontology itself (the location of an anonymous ontology may have been                  * known at creation/loading time, even if another manager built it.)                  */
name|importIri
operator|=
name|o
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getDefaultDocumentIRI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception caught during tree building. Skipping import of ontology "
operator|+
name|o
operator|.
name|getOntologyID
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|/*                  * It is still possible that an imported ontology is anonymous but has no physical document                  * IRI (for example, because it was only generated in-memory but not stored). In this case it                  * is necessary (and generally safe) to copy all its axioms and import statements to the                  * parent ontology, or else it is lost.                  */
if|if
condition|(
name|o
operator|.
name|isAnonymous
argument_list|()
operator|&&
name|importIri
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Anonymous import target "
operator|+
name|o
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|" not mapped to physical IRI. Will add extracted axioms to parent ontology."
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLImportsDeclaration
name|im
range|:
name|o
operator|.
name|getImportsDeclarations
argument_list|()
control|)
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|parent
argument_list|,
name|im
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLAxiom
name|im
range|:
name|o
operator|.
name|getAxioms
argument_list|()
control|)
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|parent
argument_list|,
name|im
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|importIri
operator|!=
literal|null
condition|)
block|{
comment|// An anonymous ontology can still be imported if it has a
comment|// valid document IRI.
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|parent
argument_list|,
name|owlFactory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|importIri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// End subtrees cycle.
comment|// All possible error causes should have been dealt with by now, but we
comment|// apply the changes one by one, just in case.
for|for
control|(
name|OWLOntologyChange
name|im
range|:
name|changes
control|)
try|try
block|{
name|mgr
operator|.
name|applyChange
argument_list|(
name|im
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"KReS :: Exception caught during tree building. Skipping import"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// mgr.applyChanges(changes);
return|return
name|parent
return|;
block|}
specifier|public
specifier|static
name|OWLOntology
name|buildImportTree
parameter_list|(
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|subtrees
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
return|return
name|buildImportTree
argument_list|(
name|subtrees
argument_list|,
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OWLOntology
name|buildImportTree
parameter_list|(
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|subtrees
parameter_list|,
name|OWLOntologyManager
name|mgr
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
return|return
name|buildImportTree
argument_list|(
operator|new
name|RootOntologySource
argument_list|(
name|mgr
operator|.
name|createOntology
argument_list|()
argument_list|)
argument_list|,
name|subtrees
argument_list|,
name|mgr
argument_list|)
return|;
block|}
comment|/**      * Extracts an OWL Ontology ID from its standard string form. The string must be of type      *<tt>ontologyIRI[:::versionIRI]</tt>. Any substring<tt>"%3A%3A%3A"</tt> present in<tt>ontologyIRI</tt>      * or<tt>versionIRI</tt> will be URL-decoded (i.e. converted to<tt>":::"</tt>).<br/>      *<br/>      * Also note that both<tt>ontologyIRI</tt> and<tt>versionIRI</tt> are desanitized in the process.      *       * @param stringForm      *            the string to decode      * @return the string form of this ID.      * @see URIUtils#desanitize(IRI)      */
specifier|public
specifier|static
name|OWLOntologyID
name|decode
parameter_list|(
name|String
name|stringForm
parameter_list|)
block|{
if|if
condition|(
name|stringForm
operator|==
literal|null
operator|||
name|stringForm
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Supplied string form must be non-null and non-empty."
argument_list|)
throw|;
name|IRI
name|oiri
decl_stmt|,
name|viri
decl_stmt|;
name|String
index|[]
name|split
init|=
name|stringForm
operator|.
name|split
argument_list|(
literal|":::"
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|oiri
operator|=
name|URIUtils
operator|.
name|desanitize
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|split
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"%3A%3A%3A"
argument_list|,
literal|":::"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|viri
operator|=
operator|(
name|split
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|URIUtils
operator|.
name|desanitize
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|split
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|"%3A%3A%3A"
argument_list|,
literal|":::"
argument_list|)
argument_list|)
argument_list|)
else|:
literal|null
expr_stmt|;
return|return
operator|(
name|viri
operator|!=
literal|null
operator|)
condition|?
operator|new
name|OWLOntologyID
argument_list|(
name|oiri
argument_list|,
name|viri
argument_list|)
else|:
operator|new
name|OWLOntologyID
argument_list|(
name|oiri
argument_list|)
return|;
block|}
else|else
return|return
literal|null
return|;
comment|// Anonymous but versioned ontologies are not acceptable.
block|}
comment|/**      * Provides a standardized string format for an OWL Ontology ID. The string returned is of type      *<tt>ontologyIRI[:::versionIRI]</tt>. Any substring<tt>":::"</tt> present in<tt>ontologyIRI</tt> or      *<tt>versionIRI</tt> will be URL-encoded (i.e. converted to<tt>"%3A%3A%3A"</tt>).<br/>      *<br/>      * Also note that both<tt>ontologyIRI</tt> and<tt>versionIRI</tt> are sanitized in the process. No other      * URL encoding occurs.      *       * @param id      *            the OWL ontology ID to encode      * @return the string form of this ID.      * @see URIUtils#sanitize(IRI)      */
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|OWLOntologyID
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot encode a null OWLOntologyID."
argument_list|)
throw|;
if|if
condition|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot encode an OWLOntologyID that is missing an ontologyIRI."
argument_list|)
throw|;
name|String
name|s
init|=
literal|""
decl_stmt|;
name|s
operator|+=
name|URIUtils
operator|.
name|sanitize
argument_list|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|":::"
argument_list|,
literal|"%3A%3A%3A"
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|getVersionIRI
argument_list|()
operator|!=
literal|null
condition|)
name|s
operator|+=
operator|(
literal|":::"
operator|)
operator|+
name|URIUtils
operator|.
name|sanitize
argument_list|(
name|id
operator|.
name|getVersionIRI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|":::"
argument_list|,
literal|"%3A%3A%3A"
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPreferredFormats
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|preferredFormats
control|)
name|result
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPreferredSupportedFormats
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|supported
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|preferredFormats
control|)
if|if
condition|(
name|supported
operator|.
name|contains
argument_list|(
name|f
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// The non-preferred supported formats on the tail in any order
for|for
control|(
name|String
name|f
range|:
name|supported
control|)
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|f
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|void
name|printOntology
parameter_list|(
name|OWLOntology
name|o
parameter_list|,
name|PrintStream
name|printer
parameter_list|)
block|{
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|StringDocumentTarget
name|tgt
init|=
operator|new
name|StringDocumentTarget
argument_list|()
decl_stmt|;
try|try
block|{
name|mgr
operator|.
name|saveOntology
argument_list|(
name|o
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|tgt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|printer
argument_list|)
expr_stmt|;
block|}
name|printer
operator|.
name|println
argument_list|(
name|tgt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

