begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|RegistryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|RegistryManager
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RegistryManagerImpl
implements|implements
name|RegistryManager
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|_LAZY_LOADING_DEFAULT
init|=
literal|false
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|RegistryManager
operator|.
name|LAZY_LOADING
argument_list|,
name|boolValue
operator|=
name|_LAZY_LOADING_DEFAULT
argument_list|)
specifier|private
name|boolean
name|lazyLoading
init|=
name|_LAZY_LOADING_DEFAULT
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|Set
argument_list|<
name|IRI
argument_list|>
argument_list|>
name|libraryIndex
init|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|Set
argument_list|<
name|IRI
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|RegistryManager
operator|.
name|REGISTRY_LOCATIONS
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|)
specifier|private
name|String
index|[]
name|locations
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|Set
argument_list|<
name|IRI
argument_list|>
argument_list|>
name|ontologyIndex
init|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|Set
argument_list|<
name|IRI
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|Registry
argument_list|>
name|registries
init|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|Registry
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|RegistryManager
operator|.
name|CACHING_POLICY
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|RegistryManager
operator|.
name|CACHING_POLICY
operator|+
literal|".option.registry"
argument_list|,
name|name
operator|=
literal|"registry"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|RegistryManager
operator|.
name|CACHING_POLICY
operator|+
literal|".option.all"
argument_list|,
name|name
operator|=
literal|"all"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"all"
argument_list|)
specifier|private
name|String
name|cachingPolicyString
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the RegistryManagerImpl instances do need to be configured!      * YOU NEED TO USE {@link #RegistryManagerImpl(Dictionary)} or its overloads, to parse the configuration      * and then initialise the rule store if running outside an OSGI environment.      */
specifier|public
name|RegistryManagerImpl
parameter_list|()
block|{}
comment|/**      * To be invoked by non-OSGi environments.      *       * @param configuration      */
specifier|public
name|RegistryManagerImpl
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} activate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
comment|// Parse configuration.
try|try
block|{
name|lazyLoading
operator|=
call|(
name|Boolean
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|RegistryManager
operator|.
name|LAZY_LOADING
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|lazyLoading
operator|=
name|_LAZY_LOADING_DEFAULT
expr_stmt|;
block|}
name|locations
operator|=
operator|(
name|String
index|[]
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|RegistryManager
operator|.
name|REGISTRY_LOCATIONS
argument_list|)
expr_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
name|locations
operator|=
operator|new
name|String
index|[]
block|{}
expr_stmt|;
comment|// TODO manage enum constants for caching policy.
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
comment|// Load registries
for|for
control|(
name|String
name|loc
range|:
name|locations
control|)
block|{
try|try
block|{
name|OWLOntology
name|o
init|=
name|mgr
operator|.
name|loadOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|loc
argument_list|)
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Skipping cached ontology {}."
argument_list|,
name|e
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to load ontology "
operator|+
name|loc
operator|+
literal|" - Skipping..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
try|try
block|{
name|registries
operator|.
name|put
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|registry
operator|.
name|getURL
argument_list|()
argument_list|)
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|updateLocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to add ontology registry."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegistries
parameter_list|()
block|{
name|registries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|updateLocations
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|lazyLoading
operator|=
name|_LAZY_LOADING_DEFAULT
expr_stmt|;
name|locations
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"in {} deactivate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Library
argument_list|>
name|getLibraries
parameter_list|(
name|IRI
name|ontologyID
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Registry
argument_list|>
name|getRegistries
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Registry
argument_list|>
argument_list|(
name|registries
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Registry
argument_list|>
name|getRegistries
parameter_list|(
name|IRI
name|libraryID
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Registry
name|getRegistry
parameter_list|(
name|IRI
name|id
parameter_list|)
block|{
return|return
name|registries
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLazyLoading
parameter_list|()
block|{
return|return
name|lazyLoading
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRegistry
parameter_list|(
name|IRI
name|registryId
parameter_list|)
block|{
name|registries
operator|.
name|remove
argument_list|(
name|registryId
argument_list|)
expr_stmt|;
name|updateLocations
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLazyLoading
parameter_list|(
name|boolean
name|lazy
parameter_list|)
block|{
name|this
operator|.
name|lazyLoading
operator|=
name|lazy
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|updateLocations
parameter_list|()
block|{
name|Set
argument_list|<
name|IRI
argument_list|>
name|locations
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|registries
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|locations
operator|=
name|locations
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

