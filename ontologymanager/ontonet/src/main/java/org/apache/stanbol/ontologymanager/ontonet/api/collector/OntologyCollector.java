begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|NamedArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_comment
comment|/**  * It is not literally an ontology<i>collection</i>, in that it only collects references to ontologies, not  * the ontologies themselves. Unless implementations specify a different behaviour, removing ontologies from  * the collector does not delete them from their persistence system.  *   * @author alexdma  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|OntologyCollector
extends|extends
name|OntologyCollectorListenable
extends|,
name|NamedArtifact
extends|,
name|OntologyInputSourceHandler
block|{
comment|/**      * Adds the given ontology to the ontology collector. If the supplied ontology is not already present in      * storage and does not have an OWL version IRI of its own, this ontology collector will 'claim ownership'      * of the ontology by setting its own logical ID as the version IRI of the new ontology.      *       * @param ontology      *            the ontology to be added      * @return the key that can be used for accessing the stored ontology directly      */
name|OWLOntologyID
name|addOntology
parameter_list|(
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|ontology
parameter_list|)
function_decl|;
comment|/**      * Returns the ontologies managed by this ontology space. This is a shortcut method for iterating      * {@link #getOntology(OWLOntologyID, Class)} calls over {@link #listManagedOntologies()}.      *       * @deprecated Please simulate this method manually by iterating      *             {@link #getOntology(OWLOntologyID, Class)} calls over {@link #listManagedOntologies()}      *       * @param withClosure      *            if true, also the ontologies imported by those directly managed by this space will be      *            included.      * @return the set of ontologies in the ontology space      */
parameter_list|<
name|O
parameter_list|>
name|Set
argument_list|<
name|O
argument_list|>
name|getManagedOntologies
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|withClosure
parameter_list|)
function_decl|;
comment|/**      * @deprecated Please use {@link #getOntology(OWLOntologyID, Class)} instead.      * @param ontologyIri      * @param returnType      * @return      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
function_decl|;
comment|/**      * TODO replace merge parameter with integer for merge level (-1 for infinite).      *       * @deprecated Please use {@link #getOntology(OWLOntologyID, Class, boolean)} instead.      * @param ontologyIri      * @param returnType      * @param merge      * @return      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
function_decl|;
comment|/**      * @deprecated Please use {@link #getOntology(OWLOntologyID, Class, boolean, IRI)} instead.      * @param ontologyIri      * @param returnType      * @param merge      * @param universalPrefix      * @return      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
function_decl|;
comment|/**      * @deprecated Please use {@link #getOntology(OWLOntologyID, Class, IRI)} instead.      * @param ontologyIri      * @param returnType      * @param universalPrefix      * @return      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
function_decl|;
comment|/**      * Returns the managed ontology with the specified public key as a Java object of the specified type, if      * supported. If such an ontology exists but is not managed by this collector, it will not be returned.<br>      *<br>      * How the method should react if<code>publicKey</code> is invalid or no such ontology exists, or whether      * the desired return type is not supported, is implementation-dependent. However, developers should at      * least expect that the methods either returns<code>null</code> or throws a      * {@link MissingOntologyException} if no such ontology is managed by this collector. Likewise, if      *<code>returnType</code> is not supported, an {@link UnsupportedOperationException} could be expected to      * be thrown.      *       * @param publicKey      *            the public identifier of the requested ontology.      * @param returnType      *            the desired type of the ontology object.      * @return the ontology object.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
function_decl|;
comment|/**      * Returns the managed ontology with the specified public key as a Java object of the specified type, if      * supported. If such an ontology exists but is not managed by this collector, it will not be returned.<br>      *<br>      * How the method should react if<code>publicKey</code> is invalid or no such ontology exists, or whether      * the desired return type is not supported, is implementation-dependent. However, developers should at      * least expect that the methods either returns<code>null</code> or throws a      * {@link MissingOntologyException} if no such ontology is managed by this collector. Likewise, if      *<code>returnType</code> is not supported, an {@link UnsupportedOperationException} could be expected to      * be thrown.<br>      *<br>      * TODO replace merge parameter with integer for merge level (-1 for infinite).      *       * @param publicKey      *            the public identifier of the requested ontology.      * @param returnType      *            the desired type of the ontology object.      * @param merge      *            if true, the requested ontology will be merged with its imports up to whatever supported      *            level.      * @return the ontology object.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
function_decl|;
comment|/**      * Returns the managed ontology with the specified public key as a Java object of the specified type, if      * supported. If such an ontology exists but is not managed by this collector, it will not be returned.<br>      *<br>      * How the method should react if<code>publicKey</code> is invalid or no such ontology exists, or whether      * the desired return type is not supported, is implementation-dependent. However, developers should at      * least expect that the methods either returns<code>null</code> or throws a      * {@link MissingOntologyException} if no such ontology is managed by this collector. Likewise, if      *<code>returnType</code> is not supported, an {@link UnsupportedOperationException} could be expected to      * be thrown.<br>      *<br>      * TODO replace merge parameter with integer for merge level (-1 for infinite).      *       * @param publicKey      *            the public identifier of the requested ontology.      * @param returnType      *            the desired type of the ontology object.      * @param merge      *            if true, the requested ontology will be merged with its imports up to whatever supported      *            level.      * @param universalPrefix      *            the IRI to be used as a prefix and/or namespace for all derived IRIs, e.g. OWL import      *            statements and version IRIs.      * @return the ontology object.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
function_decl|;
comment|/**      * Returns the managed ontology with the specified public key as a Java object of the specified type, if      * supported. If such an ontology exists but is not managed by this collector, it will not be returned.<br>      *<br>      * How the method should react if<code>publicKey</code> is invalid or no such ontology exists, or whether      * the desired return type is not supported, is implementation-dependent. However, developers should at      * least expect that the methods either returns<code>null</code> or throws a      * {@link MissingOntologyException} if no such ontology is managed by this collector. Likewise, if      *<code>returnType</code> is not supported, an {@link UnsupportedOperationException} could be expected to      * be thrown.<br>      *<br>      * TODO replace merge parameter with integer for merge level (-1 for infinite).      *       * @param publicKey      *            the public identifier of the requested ontology.      * @param returnType      *            the desired type of the ontology object.      * @param universalPrefix      *            the IRI to be used as a prefix and/or namespace for all derived IRIs, e.g. OWL import      *            statements and version IRIs.      * @return the ontology object.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getOntology
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|IRI
name|universalPrefix
parameter_list|)
function_decl|;
comment|/**      * Determines if the ontology identified by the supplied public key is being managed by this collector.<br>      *<br>      * Note that the public key will match the ontology's logical ID only if it has one. Otherwise it can be      * an {@link OWLOntologyID} that wraps either the physical URL or the identifier chosen by Stanbol as its      * ontologyIRI.      *       * @deprecated the usage of {@link IRI} to identify ontologies is reductive. Please create a new      *             {@link OWLOntologyID#OWLOntologyID(IRI)} from this IRI and use      *             {@link #hasOntology(OWLOntologyID)} with this new public key as a parameter.      *       * @param publicKey      *            the<i>logical</i> identifier of the ontology to query for.      *       * @return true iff an ontology with this public key has been loaded in this collector.      */
name|boolean
name|hasOntology
parameter_list|(
name|IRI
name|ontologyId
parameter_list|)
function_decl|;
comment|/**      * Determines if the ontology identified by the supplied public key is being managed by this collector.<br>      *<br>      * Note that the public key will match the ontology's logical ID only if it has one. Otherwise it can be      * an {@link OWLOntologyID} that wraps either the physical URL or the identifier chosen by Stanbol as its      * ontologyIRI.      *       * @param publicKey      *            the<i>logical</i> identifier of the ontology to query for.      *       * @return true iff an ontology with this public key has been loaded in this collector.      */
name|boolean
name|hasOntology
parameter_list|(
name|OWLOntologyID
name|publicKey
parameter_list|)
function_decl|;
comment|/**      * Gets the public key set of all the ontologies managed by this ontology collector.      *       * @return the key set of managed ontologies.      */
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|listManagedOntologies
parameter_list|()
function_decl|;
comment|/**      * Removes the given ontology from the ontology collector, if it was being managed. Otherwise, it should      * throw a {@link MissingOntologyException}.<br/>      *<u>Note</u> that this will NOT necessarily delete the ontology from the store! This method simply      * states that the ontology is no longer managed by this collectors and its axioms will no longer appear      * when the collector is serialized as an ontology. To make sure the ontology itself is deleted, please      * use the {@link OntologyProvider}.      *       * @deprecated the usage of {@link IRI} to identify ontologies is reductive. Please create a new      *             {@link OWLOntologyID#OWLOntologyID(IRI)} from this IRI and use      *             {@link #removeOntology(OWLOntologyID)} with this new public key as a parameter.      *       * @param ontologyIri      *            the identifier of this ontology.      */
name|void
name|removeOntology
parameter_list|(
name|IRI
name|ontologyId
parameter_list|)
function_decl|;
comment|/**      * Removes the given ontology from the ontology collector, if it was being managed. Otherwise, it should      * throw a {@link MissingOntologyException}.<br/>      *<u>Note</u> that this will NOT necessarily delete the ontology from the store! This method simply      * states that the ontology is no longer managed by this collectors and its axioms will no longer appear      * when the collector is serialized as an ontology. To make sure the ontology itself is deleted, please      * use the {@link OntologyProvider}.      *       * @param ontologyIri      *            the identifier of this ontology.      */
name|void
name|removeOntology
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
function_decl|;
comment|/**      * Bootstraps the ontology space. In some cases (such as with core and custom spaces) this also implies      * write-locking its ontologies.      *       * XXX make it a protected, non-interface method ?      */
name|void
name|setUp
parameter_list|()
function_decl|;
comment|/**      * Performs all required operations for disposing of an ontology space and releasing its resources (e.g.      * removing the writelock).      *       * XXX make it a protected, non-interface method ?      */
name|void
name|tearDown
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

