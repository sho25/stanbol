begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|LibraryContentNotLoadedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|RegistryContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|RegistryOntologyNotLoadedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  * Default implementation of the ontology library model.  */
end_comment

begin_class
specifier|public
class|class
name|LibraryImpl
extends|extends
name|AbstractRegistryItem
implements|implements
name|Library
block|{
specifier|private
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
specifier|public
name|LibraryImpl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LibraryImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|()
throws|throws
name|RegistryContentException
block|{
comment|/*          * Note that this implementation is not synchronized. Listeners may indefinitely be notified before or          * after the rest of this method is executed. If listeners call loadOntologies(), they could still get          * a RegistryContentException, which however they can catch by calling loadOntologies() and          * getOntologies() in sequence.          */
name|fireContentRequested
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|loaded
condition|)
throw|throw
operator|new
name|LibraryContentNotLoadedException
argument_list|(
name|this
argument_list|)
throw|;
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|ontologies
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegistryItem
name|child
range|:
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|RegistryOntology
condition|)
block|{
name|OWLOntology
name|o
init|=
operator|(
operator|(
name|RegistryOntology
operator|)
name|child
operator|)
operator|.
name|asOWLOntology
argument_list|()
decl_stmt|;
comment|// Should never be null if the library was loaded correctly (an error should have already been
comment|// thrown when loading it), but just in case.
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
name|ontologies
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|RegistryOntologyNotLoadedException
argument_list|(
operator|(
name|RegistryOntology
operator|)
name|child
argument_list|)
throw|;
block|}
block|}
return|return
name|ontologies
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|loaded
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|loadOntologies
parameter_list|(
name|OWLOntologyManager
name|mgr
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

