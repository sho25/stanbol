begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|CustomOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_comment
comment|/**  * Default implementation of custom ontology space.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|CustomSpaceImpl
extends|extends
name|AbstractOntologySpaceImpl
implements|implements
name|CustomOntologySpace
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX
init|=
name|SpaceType
operator|.
name|CUSTOM
operator|.
name|getIRISuffix
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|String
name|buildId
parameter_list|(
name|String
name|scopeID
parameter_list|)
block|{
return|return
operator|(
name|scopeID
operator|!=
literal|null
condition|?
name|scopeID
else|:
literal|""
operator|)
operator|+
literal|"/"
operator|+
name|SUFFIX
return|;
block|}
specifier|private
name|ConnectivityPolicy
name|policy
decl_stmt|;
specifier|public
name|CustomSpaceImpl
parameter_list|(
name|String
name|scopeID
parameter_list|,
name|IRI
name|namespace
parameter_list|,
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
parameter_list|)
block|{
name|super
argument_list|(
name|buildId
argument_list|(
name|scopeID
argument_list|)
argument_list|,
name|namespace
argument_list|,
name|SpaceType
operator|.
name|CUSTOM
argument_list|,
name|ontologyProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectivityPolicy
name|getConnectivityPolicy
parameter_list|()
block|{
return|return
name|policy
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MGraph
name|getOntologyAsMGraph
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
name|MGraph
name|o
init|=
name|super
operator|.
name|getOntologyAsMGraph
argument_list|(
name|ontologyIri
argument_list|,
name|merge
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|getConnectivityPolicy
argument_list|()
condition|)
block|{
case|case
name|LOOSE
case|:
break|break;
case|case
name|TIGHT
case|:
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|onts
init|=
operator|new
name|HashSet
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
decl_stmt|;
comment|// Expected to be a singleton
synchronized|synchronized
init|(
name|o
init|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|o
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|onts
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|getID
argument_list|()
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
name|SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
comment|// strip "custom"
name|s
operator|+=
name|SpaceType
operator|.
name|CORE
operator|.
name|getIRISuffix
argument_list|()
expr_stmt|;
comment|// concatenate "core"
name|UriRef
name|target
init|=
operator|new
name|UriRef
argument_list|(
name|getNamespace
argument_list|()
operator|+
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|NonLiteral
name|subject
range|:
name|onts
control|)
name|o
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|o
return|;
block|}
annotation|@
name|Override
specifier|protected
name|OWLOntology
name|getOntologyAsOWLOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
name|OWLOntology
name|o
init|=
name|super
operator|.
name|getOntologyAsOWLOntology
argument_list|(
name|ontologyIri
argument_list|,
name|merge
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|getConnectivityPolicy
argument_list|()
condition|)
block|{
case|case
name|LOOSE
case|:
break|break;
case|case
name|TIGHT
case|:
name|String
name|s
init|=
name|getID
argument_list|()
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
name|SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
comment|// strip "custom"
name|s
operator|+=
name|SpaceType
operator|.
name|CORE
operator|.
name|getIRISuffix
argument_list|()
expr_stmt|;
comment|// concatenate "core"
name|IRI
name|target
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getNamespace
argument_list|()
operator|+
name|s
argument_list|)
decl_stmt|;
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChange
argument_list|(
operator|new
name|AddImport
argument_list|(
name|o
argument_list|,
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|target
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConnectivityPolicy
parameter_list|(
name|ConnectivityPolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
comment|/**      * Once it is set up, a custom space is write-locked.      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setUp
parameter_list|()
block|{
name|locked
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|tearDown
parameter_list|()
block|{
name|locked
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

