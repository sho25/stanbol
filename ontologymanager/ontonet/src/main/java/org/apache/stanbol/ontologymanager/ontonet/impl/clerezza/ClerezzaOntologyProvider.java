begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|EntityAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|OWLOntologyManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|PhonyIRIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|util
operator|.
name|OWLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyIRIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Clerezza-based ontology cache implementation. Whether it is persistent or in-memory depends on the  * {@link TcProvider} used.  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|false
argument_list|)
annotation|@
name|Service
argument_list|(
name|OntologyProvider
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ClerezzaOntologyProvider
implements|implements
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|_GRAPH_PREFIX_DEFAULT
init|=
literal|"ontonet"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|_RESOLVE_IMPORTS_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|OWLOntologyIRIMapper
argument_list|>
name|mappers
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyIRIMapper
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OfflineConfiguration
name|offlineConfig
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For this engine that means it is necessary to check if the used {@link ReferencedSite} can operate      * offline or not.      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
comment|/**      * Maps ontology IRIs (logical or physical if the ontology is anonymous) to Clerezza storage keys i.e.      * graph names.      */
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|ontologyIdsToKeys
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Parser
name|parser
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|GRAPH_PREFIX
argument_list|,
name|value
operator|=
name|_GRAPH_PREFIX_DEFAULT
argument_list|)
specifier|protected
name|String
name|prefix
init|=
name|_GRAPH_PREFIX_DEFAULT
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|RESOLVE_IMPORTS
argument_list|,
name|boolValue
operator|=
name|_RESOLVE_IMPORTS_DEFAULT
argument_list|)
specifier|protected
name|boolean
name|resolveImports
init|=
name|_RESOLVE_IMPORTS_DEFAULT
decl_stmt|;
comment|/*      * Do not use SCR reference here: this might be different from the registered WeightedTcProvider services      * : when supplied, it overrides TcManager      */
specifier|private
name|TcProvider
name|store
init|=
literal|null
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|supported
init|=
literal|null
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ClerezzaOntologyProvider instances do need to be      * configured! YOU NEED TO USE {} or its overloads, to parse the configuration and then initialise the      * rule store if running outside an OSGI environment.      */
specifier|public
name|ClerezzaOntologyProvider
parameter_list|()
block|{
name|supported
operator|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|MGraph
operator|.
name|class
operator|,
name|OWLOntology
operator|.
name|class
block|}
empty_stmt|;
name|ontologyIdsToKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ClerezzaOntologyProvider
parameter_list|(
name|TcProvider
name|store
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|Parser
name|parser
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|offlineConfig
operator|=
name|offline
expr_stmt|;
comment|// Re-assign the TcManager if no store is supplied
if|if
condition|(
name|store
operator|==
literal|null
condition|)
name|store
operator|=
name|TcManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tcManager
operator|==
literal|null
condition|)
name|this
operator|.
name|tcManager
operator|=
name|TcManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
name|this
operator|.
name|parser
operator|=
name|Parser
operator|.
name|getInstance
argument_list|()
expr_stmt|;
else|else
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|activate
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} activate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
comment|// Check if the TcManager should be set as the store
if|if
condition|(
name|store
operator|==
literal|null
condition|)
name|store
operator|=
name|tcManager
expr_stmt|;
comment|// Parse configuration.
name|prefix
operator|=
call|(
name|String
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|GRAPH_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
name|_GRAPH_PREFIX_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
try|try
block|{
name|resolveImports
operator|=
call|(
name|Boolean
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|RESOLVE_IMPORTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|resolveImports
operator|=
name|_RESOLVE_IMPORTS_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
block|}
specifier|final
name|IRI
index|[]
name|offlineResources
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|offlineConfig
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|IRI
argument_list|>
name|paths
init|=
name|offlineConfig
operator|.
name|getOntologySourceLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
name|offlineResources
operator|=
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|IRI
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// There are no offline paths.
else|else
name|offlineResources
operator|=
operator|new
name|IRI
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// There's no offline configuration at all.
else|else
name|offlineResources
operator|=
operator|new
name|IRI
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|mappers
operator|=
name|OWLOntologyManagerFactory
operator|.
name|getMappers
argument_list|(
name|offlineResources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} deactivate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
specifier|private
name|void
name|fillImportsReverse
parameter_list|(
name|UriRef
name|importing
parameter_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
name|reverseImports
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Filling reverse imports for {}"
argument_list|,
name|importing
argument_list|)
expr_stmt|;
name|reverseImports
operator|.
name|add
argument_list|(
name|importing
argument_list|)
expr_stmt|;
name|TripleCollection
name|graph
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|importing
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|graph
operator|.
name|filter
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|fillImportsReverse
argument_list|(
operator|new
name|UriRef
argument_list|(
name|getKey
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
comment|// prefix + "::" + ((UriRef) obj).getUnicodeString()
argument_list|)
argument_list|,
name|reverseImports
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
name|ontologyIri
operator|=
name|URIUtils
operator|.
name|sanitizeID
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"key for {} is {}"
argument_list|,
name|ontologyIri
argument_list|,
name|ontologyIdsToKeys
operator|.
name|get
argument_list|(
name|ontologyIri
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ontologyIdsToKeys
operator|.
name|get
argument_list|(
name|ontologyIri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|ontologyIdsToKeys
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TcProvider
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getStoredOntology
argument_list|(
name|getKey
argument_list|(
name|reference
argument_list|)
argument_list|,
name|returnType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
return|return
name|getStoredOntology
argument_list|(
name|getKey
argument_list|(
name|reference
argument_list|)
argument_list|,
name|returnType
argument_list|,
name|merge
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
comment|// TODO default to false? Or by set policy?
return|return
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * In this implementation the identifier is the Graph Name (e.g. ontonet::blabla)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|identifier
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
block|{
if|if
condition|(
name|identifier
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Identifier cannot be null"
argument_list|)
throw|;
if|if
condition|(
name|returnType
operator|==
literal|null
condition|)
block|{
name|returnType
operator|=
operator|(
name|Class
argument_list|<
name|O
argument_list|>
operator|)
name|OWLOntology
operator|.
name|class
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"No return type given for ontologies. Will return a {}"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
block|}
name|boolean
name|canDo
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|getSupportedReturnTypes
argument_list|()
control|)
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
name|canDo
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|canDo
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Return type "
operator|+
name|returnType
operator|+
literal|" is not allowed in this implementation. Only allowed return types are "
operator|+
name|supported
argument_list|)
throw|;
name|TripleCollection
name|tc
init|=
name|store
operator|.
name|getTriples
argument_list|(
operator|new
name|UriRef
argument_list|(
name|identifier
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|MGraph
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
return|return
name|returnType
operator|.
name|cast
argument_list|(
name|tc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|(
name|O
operator|)
name|toOWLOntology
argument_list|(
operator|new
name|UriRef
argument_list|(
name|identifier
argument_list|)
argument_list|,
name|merge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to return stored ontology "
operator|+
name|identifier
operator|+
literal|" as type "
operator|+
name|returnType
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getSupportedReturnTypes
parameter_list|()
block|{
return|return
name|supported
return|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      *       * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|loadInStore
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|String
name|preferredKey
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No data to load ontologies from."
argument_list|)
throw|;
comment|// Force is ignored for the content, but the imports?
comment|// Get sorted list of supported formats, or use specified one.
name|Collection
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|formatIdentifier
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|formatIdentifier
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|formats
operator|=
name|OntologyUtils
operator|.
name|getPreferredSupportedFormats
argument_list|(
name|parser
operator|.
name|getSupportedFormats
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|formats
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|formatIdentifier
argument_list|)
expr_stmt|;
comment|// Try each format, return on the first one that was parsed.
for|for
control|(
name|String
name|format
range|:
name|formats
control|)
block|{
try|try
block|{
name|TripleCollection
name|rdfData
init|=
name|parser
operator|.
name|parse
argument_list|(
name|data
argument_list|,
name|format
argument_list|)
decl_stmt|;
return|return
name|loadInStore
argument_list|(
name|rdfData
argument_list|,
name|preferredKey
argument_list|,
name|force
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unsupported format format {}. Trying next one."
argument_list|,
name|format
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parsing format "
operator|+
name|format
operator|+
literal|" failed. Trying next one."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// No parser worked, return null.
name|log
operator|.
name|error
argument_list|(
literal|"All parsers failed, giving up."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|loadInStore
parameter_list|(
specifier|final
name|IRI
name|ontologyIri
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|String
name|preferredKey
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedFormatException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Loading {}"
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyIri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Ontology IRI cannot be null."
argument_list|)
throw|;
name|IRI
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|force
condition|)
name|location
operator|=
literal|null
expr_stmt|;
else|else
for|for
control|(
name|OWLOntologyIRIMapper
name|mapper
range|:
name|mappers
control|)
block|{
name|location
operator|=
name|mapper
operator|.
name|getDocumentIRI
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
break|break;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isOfflineMode
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve "
operator|+
name|ontologyIri
operator|+
literal|" while Stanbol is in offline mode. "
operator|+
literal|"No resource with that identifier was found locally."
argument_list|)
throw|;
else|else
name|location
operator|=
name|ontologyIri
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"found {} in {}"
argument_list|,
name|ontologyIri
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|formatIdentifier
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|formatIdentifier
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|formats
operator|=
name|OntologyUtils
operator|.
name|getPreferredSupportedFormats
argument_list|(
name|parser
operator|.
name|getSupportedFormats
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|formats
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|formatIdentifier
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|currentFormat
range|:
name|formats
control|)
block|{
try|try
block|{
specifier|final
name|URLConnection
name|con
init|=
name|location
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setRequestProperty
argument_list|(
literal|"Accept"
argument_list|,
name|currentFormat
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|is
init|=
name|con
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
comment|/*                      * We provide the current format, so the recursive call won't be trying to sort preferred                      * formats again. Also, we provide the ontologyIRI as the preferred key, since we already                      * know it.                      */
return|return
name|loadInStore
argument_list|(
name|is
argument_list|,
name|currentFormat
argument_list|,
name|ontologyIri
operator|.
name|toString
argument_list|()
argument_list|,
name|force
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unsupported format format {}. Trying next one."
argument_list|,
name|currentFormat
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parsing format "
operator|+
name|currentFormat
operator|+
literal|" failed. Trying next one."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// No parser worked, return null.
name|log
operator|.
name|error
argument_list|(
literal|"All parsers failed, giving up."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|loadInStore
parameter_list|(
name|Object
name|ontology
parameter_list|,
name|String
name|preferredKey
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
if|if
condition|(
name|ontology
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ontology supplied."
argument_list|)
throw|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MGraph
name|graph
decl_stmt|;
name|TripleCollection
name|rdfData
decl_stmt|;
if|if
condition|(
name|ontology
operator|instanceof
name|OWLOntology
condition|)
block|{
name|rdfData
operator|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
operator|(
name|OWLOntology
operator|)
name|ontology
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontology
operator|instanceof
name|TripleCollection
condition|)
block|{
name|rdfData
operator|=
operator|(
name|TripleCollection
operator|)
name|ontology
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This ontology provider can only accept objects assignable to "
operator|+
name|TripleCollection
operator|.
name|class
operator|+
literal|" or "
operator|+
name|OWLOntology
operator|.
name|class
argument_list|)
throw|;
comment|// Force is ignored for the content, but the imports?
name|String
name|s
init|=
name|prefix
operator|+
literal|"::"
decl_stmt|;
name|IRI
name|ontologyIri
init|=
literal|null
decl_stmt|;
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
comment|// FIXME are we getting rid of rdfData after adding its triples?
name|String
name|iri
init|=
name|preferredKey
decl_stmt|;
if|if
condition|(
name|iri
operator|==
literal|null
operator|||
name|iri
operator|.
name|isEmpty
argument_list|()
condition|)
name|iri
operator|=
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|rdfData
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
else|else
try|try
block|{
operator|new
name|UriRef
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|iri
operator|=
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|rdfData
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
block|}
name|ontologyIri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|iri
argument_list|)
expr_stmt|;
name|ontologyIri
operator|=
name|URIUtils
operator|.
name|sanitizeID
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
name|s
operator|+=
name|ontologyIri
expr_stmt|;
comment|// if (s.endsWith("#")) s = s.substring(0, s.length() - 1);
comment|/*          * rdfData should be a SimpleGraph, so we shouldn't have a problem creating one with the TcProvider          * and adding triples there, so that the SimpleGraph is garbage-collected.          */
block|{
name|UriRef
name|uriref
init|=
operator|new
name|UriRef
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|uriref
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
name|uriref
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getEntityName
argument_list|()
argument_list|)
condition|)
name|graph
operator|=
name|store
operator|.
name|getMGraph
argument_list|(
name|uriref
argument_list|)
expr_stmt|;
else|else
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|uriref
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|addAll
argument_list|(
name|rdfData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolveImports
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|graph
operator|.
name|filter
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
try|try
block|{
name|loadInStore
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse format for resource "
operator|+
name|obj
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to load ontology from resource "
operator|+
name|obj
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|loaded
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|loaded
condition|)
block|{
comment|// All is already sanitized by the time we get here.
name|ontologyIdsToKeys
operator|.
name|put
argument_list|(
name|ontologyIri
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology \n\t\t{}\n\tstored with key\n\t\t{}"
argument_list|,
name|ontologyIri
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Time: {} ms"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
operator|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
specifier|protected
name|OWLOntology
name|toOWLOntology
parameter_list|(
name|UriRef
name|graphName
parameter_list|,
name|boolean
name|merge
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
comment|// Never try to import
name|mgr
operator|.
name|addIRIMapper
argument_list|(
operator|new
name|PhonyIRIMapper
argument_list|(
name|Collections
operator|.
expr|<
name|IRI
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|loaded
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|TripleCollection
name|graph
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|graphName
argument_list|)
decl_stmt|;
name|UriRef
name|ontologyId
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|itt
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|itt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|nl
init|=
name|itt
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|nl
operator|instanceof
name|UriRef
condition|)
name|ontologyId
operator|=
operator|(
name|UriRef
operator|)
name|nl
expr_stmt|;
block|}
name|List
argument_list|<
name|UriRef
argument_list|>
name|revImps
init|=
operator|new
name|Stack
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|fillImportsReverse
argument_list|(
name|graphName
argument_list|,
name|revImps
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|merge
condition|)
block|{
name|OWLOntology
name|o
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|graph
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
comment|// TODO make it not flat.
comment|// Examining the reverse imports stack will flatten all imports.
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|UriRef
name|ref
range|:
name|revImps
control|)
if|if
condition|(
operator|!
name|loaded
operator|.
name|contains
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|ref
operator|.
name|equals
argument_list|(
name|graphName
argument_list|)
condition|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|o
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ref
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
else|else
block|{
comment|// final Set<OWLOntology> mergeUs = new HashSet<OWLOntology>();
comment|//
comment|// for (UriRef ref : revImps) {
comment|// if (!loaded.contains(ref)) {
comment|// TripleCollection tc = store.getTriples(ref);
comment|// mergeUs.add(OWLAPIToClerezzaConverter.clerezzaGraphToOWLOntology(tc, mgr));
comment|// loaded.add(ref);
comment|// }
comment|// }
comment|// mergeUs.add(o);
comment|// OWLOntologyMerger merger = new OWLOntologyMerger(new OWLOntologySetProvider() {
comment|//
comment|// @Override
comment|// public Set<OWLOntology> getOntologies() {
comment|// return mergeUs;
comment|// }
comment|//
comment|// }, false);
comment|// OWLOntology merged = merger.createMergedOntology(OWLManager.createOWLOntologyManager(),
comment|// OWLUtils.guessOntologyIdentifier(o));
comment|// More efficient / brutal implementation.
name|TripleCollection
name|tempGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
comment|// The set of triples that will be excluded from the merge
name|Set
argument_list|<
name|Triple
argument_list|>
name|exclusions
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
comment|// Examine all reverse imports
for|for
control|(
name|UriRef
name|ref
range|:
name|revImps
control|)
if|if
condition|(
operator|!
name|loaded
operator|.
name|contains
argument_list|(
name|ref
argument_list|)
condition|)
block|{
comment|// Get the triples
name|TripleCollection
name|imported
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|ref
argument_list|)
decl_stmt|;
comment|// For each owl:Ontology
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|remove
init|=
name|imported
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
while|while
condition|(
name|remove
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|subj
init|=
name|remove
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|/*                          * If it's not the root ontology, trash all its triples. If the root ontology is                          * anonymous, all ontology annotations are to be trashed without distinction.                          */
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
operator|!
name|subj
operator|.
name|equals
argument_list|(
name|ontologyId
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|imported
operator|.
name|filter
argument_list|(
name|subj
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|imported
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exclusions
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
name|tempGraph
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|loaded
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
comment|// Since they are all merged and import statements removed, there should be no risk of going
comment|// online.
return|return
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|tempGraph
argument_list|,
name|mgr
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

