begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|IS_MANAGED_BY_CORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|IS_MANAGED_BY_CUSTOM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|MANAGES_IN_CORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|MANAGES_IN_CUSTOM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|SCOPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|_NS_ONTONET
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|EntityAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|OWLOntologyManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|PhonyIRIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|ImportManagementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|OntologyCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|OntologyCollectorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|CoreOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|CustomOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|ScopeEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyIRIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Clerezza-based ontology provider implementation. Whether it is persistent or in-memory depends on the  * {@link TcProvider} used.  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|OntologyProvider
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ClerezzaOntologyProvider
implements|implements
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
implements|,
name|ScopeEventListener
implements|,
name|OntologyCollectorListener
block|{
specifier|private
class|class
name|InvalidMetaGraphStateException
extends|extends
name|RuntimeException
block|{
comment|/**          *           */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3915817349833358738L
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|InvalidMetaGraphStateException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
name|InvalidMetaGraphStateException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Internally, the Clerezza ontology provider uses a reserved graph to store the associations between      * ontology IDs/physical IRIs and graph names. This graph is wrapped into an {@link OntologyToTcMapper}      * object.      *       * @author alexdma      *       */
specifier|private
class|class
name|OntologyToTcMapper
block|{
comment|/**          * The basic terms to use for the mapping graph.          *           * @author alexdma          *           */
specifier|private
class|class
name|Vocabulary
block|{
specifier|static
specifier|final
name|String
name|ENTRY
init|=
name|_NS_ONTONET
operator|+
literal|"Entry"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HAS_ONTOLOGY_IRI
init|=
name|_NS_ONTONET
operator|+
literal|"hasOntologyIRI"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HAS_VERSION_IRI
init|=
name|_NS_ONTONET
operator|+
literal|"hasVersionIRI"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MAPS_TO_GRAPH
init|=
name|_NS_ONTONET
operator|+
literal|"mapsToGraph"
decl_stmt|;
specifier|static
specifier|final
name|String
name|RETRIEVED_FROM
init|=
name|_NS_ONTONET
operator|+
literal|"retrievedFrom"
decl_stmt|;
block|}
specifier|private
name|MGraph
name|graph
decl_stmt|;
specifier|private
name|UriRef
name|graphId
init|=
operator|new
name|UriRef
argument_list|(
name|metaGraphId
argument_list|)
decl_stmt|;
name|OntologyToTcMapper
parameter_list|()
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TcProvider cannot be null"
argument_list|)
throw|;
try|try
block|{
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
name|graph
operator|=
name|store
operator|.
name|getMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|addMapping
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
if|if
condition|(
name|ontologyReference
operator|==
literal|null
operator|||
name|ontologyReference
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An anonymous ontology cannot be mapped. A non-anonymous ontology ID must be forged in these cases."
argument_list|)
throw|;
name|Triple
name|tType
decl_stmt|,
name|tMaps
decl_stmt|,
name|tHasOiri
init|=
literal|null
decl_stmt|,
name|tHasViri
init|=
literal|null
decl_stmt|;
name|IRI
name|ontologyIRI
init|=
name|ontologyReference
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|,
name|versionIri
init|=
name|ontologyReference
operator|.
name|getVersionIRI
argument_list|()
decl_stmt|;
name|UriRef
name|entry
init|=
name|buildResource
argument_list|(
name|ontologyReference
argument_list|)
decl_stmt|;
name|tType
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|ENTRY
argument_list|)
argument_list|)
expr_stmt|;
name|tMaps
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
name|tHasOiri
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|HAS_ONTOLOGY_IRI
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|ontologyIRI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionIri
operator|!=
literal|null
condition|)
name|tHasViri
operator|=
operator|new
name|TripleImpl
argument_list|(
name|entry
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|HAS_VERSION_IRI
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|versionIri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|tType
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|tMaps
argument_list|)
expr_stmt|;
if|if
condition|(
name|tHasViri
operator|!=
literal|null
condition|)
name|graph
operator|.
name|add
argument_list|(
name|tHasViri
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|tHasOiri
argument_list|)
expr_stmt|;
block|}
comment|/**          * Creates an {@link OWLOntologyID} object by combining the ontologyIRI and the versionIRI, where          * applicable, of the stored graph.          *           * @param resource          *            the ontology          * @return          */
specifier|private
name|OWLOntologyID
name|buildOntologyId
parameter_list|(
name|UriRef
name|resource
parameter_list|)
block|{
name|IRI
name|oiri
init|=
literal|null
decl_stmt|,
name|viri
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|resource
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|HAS_ONTOLOGY_IRI
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|oiri
operator|=
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
return|return
literal|null
return|;
comment|// Anonymous but versioned ontologies are not acceptable.
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
name|resource
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|HAS_VERSION_IRI
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|viri
operator|=
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|viri
operator|==
literal|null
condition|)
return|return
operator|new
name|OWLOntologyID
argument_list|(
name|oiri
argument_list|)
return|;
else|else
return|return
operator|new
name|OWLOntologyID
argument_list|(
name|oiri
argument_list|,
name|viri
argument_list|)
return|;
block|}
comment|/**          * Creates an {@link UriRef} out of an {@link OWLOntologyID}, so it can be used as a storage key for          * the graph.          *           * @param ontologyReference          * @return          */
name|UriRef
name|buildResource
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|)
block|{
comment|// The UriRef is of the form ontologyIRI[:::versionIRI] (TODO use something less conventional?)
name|IRI
name|ontologyIRI
init|=
name|ontologyReference
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|,
name|versionIri
init|=
name|ontologyReference
operator|.
name|getVersionIRI
argument_list|()
decl_stmt|;
name|UriRef
name|entry
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyIRI
operator|.
name|toString
argument_list|()
operator|+
operator|(
operator|(
name|versionIri
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
operator|(
literal|":::"
operator|+
name|versionIri
operator|.
name|toString
argument_list|()
operator|)
operator|)
argument_list|)
decl_stmt|;
return|return
name|entry
return|;
block|}
name|void
name|clearMappings
parameter_list|()
block|{
name|graph
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|UriRef
name|getMapping
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|buildResource
argument_list|(
name|ontologyReference
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
return|return
operator|(
name|UriRef
operator|)
name|obj
return|;
block|}
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|keys
parameter_list|()
block|{
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|subj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subj
operator|instanceof
name|UriRef
condition|)
name|result
operator|.
name|add
argument_list|(
name|buildOntologyId
argument_list|(
operator|(
name|UriRef
operator|)
name|subj
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|void
name|mapLocator
parameter_list|(
name|IRI
name|locator
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
if|if
condition|(
name|graphName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A null graph name is not allowed."
argument_list|)
throw|;
comment|// Null locator is a legal argument, will remove all locator mappings from the supplied graph
name|UriRef
name|retrieved_from
init|=
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|RETRIEVED_FROM
argument_list|)
decl_stmt|;
name|boolean
name|isOntology
init|=
literal|true
decl_stmt|;
name|Set
argument_list|<
name|Triple
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|nodes
init|=
name|graph
operator|.
name|filter
argument_list|(
name|graphName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|nodes
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|nodes
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// isOntology |= RDF.type.equals(t.getPredicate())&& OWL.Ontology.equals(t.getObject());
if|if
condition|(
name|retrieved_from
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getPredicate
argument_list|()
argument_list|)
condition|)
name|remove
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|removeAll
argument_list|(
name|remove
argument_list|)
expr_stmt|;
if|if
condition|(
name|locator
operator|!=
literal|null
condition|)
block|{
name|Literal
name|litloc
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
operator|new
name|UriRef
argument_list|(
name|locator
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|graphName
argument_list|,
name|retrieved_from
argument_list|,
name|litloc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|removeMapping
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|buildResource
argument_list|(
name|ontologyReference
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// I expect a concurrent modification exception here, but we'll deal with it later.
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|graph
operator|.
name|remove
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|setMapping
parameter_list|(
name|OWLOntologyID
name|ontologyReference
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
name|removeMapping
argument_list|(
name|ontologyReference
argument_list|)
expr_stmt|;
name|addMapping
argument_list|(
name|ontologyReference
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|stringValues
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|result
operator|.
name|add
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|_GRAPH_PREFIX_DEFAULT
init|=
literal|"ontonet"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImportManagementPolicy
name|_IMPORT_POLICY_DEFAULT
init|=
name|ImportManagementPolicy
operator|.
name|PRESERVE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|_META_GRAPH_ID_DEFAULT
init|=
literal|"org.apache.stanbol.ontologymanager.ontonet"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|_RESOLVE_IMPORTS_DEFAULT
init|=
literal|true
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|IMPORT_POLICY
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|OntologyProvider
operator|.
name|IMPORT_POLICY
operator|+
literal|".option.merge"
argument_list|,
name|name
operator|=
literal|"MERGE"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|OntologyProvider
operator|.
name|IMPORT_POLICY
operator|+
literal|".option.flatten"
argument_list|,
name|name
operator|=
literal|"FLATTEN"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|OntologyProvider
operator|.
name|IMPORT_POLICY
operator|+
literal|".option.preserve"
argument_list|,
name|name
operator|=
literal|"PRESERVE"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"PRESERVE"
argument_list|)
specifier|private
name|String
name|importPolicyString
decl_stmt|;
comment|/**      * Maps ontology IRIs (logical or physical if the ontology is anonymous) to Clerezza storage keys i.e.      * graph names.      */
specifier|private
name|OntologyToTcMapper
name|keymap
init|=
literal|null
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|OWLOntologyIRIMapper
argument_list|>
name|mappers
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyIRIMapper
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|META_GRAPH_ID
argument_list|,
name|value
operator|=
name|_META_GRAPH_ID_DEFAULT
argument_list|)
specifier|protected
name|String
name|metaGraphId
init|=
name|_META_GRAPH_ID_DEFAULT
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OfflineConfiguration
name|offlineConfig
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For this engine that means it is necessary to check if the used {@link ReferencedSite} can operate      * offline or not.      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Parser
name|parser
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|GRAPH_PREFIX
argument_list|,
name|value
operator|=
name|_GRAPH_PREFIX_DEFAULT
argument_list|)
specifier|protected
name|String
name|prefix
init|=
name|_GRAPH_PREFIX_DEFAULT
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|OntologyProvider
operator|.
name|RESOLVE_IMPORTS
argument_list|,
name|boolValue
operator|=
name|_RESOLVE_IMPORTS_DEFAULT
argument_list|)
specifier|protected
name|boolean
name|resolveImports
init|=
name|_RESOLVE_IMPORTS_DEFAULT
decl_stmt|;
comment|/*      * Do not use SCR reference here: this might be different from the registered WeightedTcProvider services      * : when supplied, it overrides TcManager      */
specifier|private
name|TcProvider
name|store
init|=
literal|null
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|supported
init|=
literal|null
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ClerezzaOntologyProvider instances do need to be      * configured! YOU NEED TO USE {} or its overloads, to parse the configuration and then initialise the      * rule store if running outside an OSGI environment.      */
specifier|public
name|ClerezzaOntologyProvider
parameter_list|()
block|{
name|supported
operator|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|MGraph
operator|.
name|class
operator|,
name|OWLOntology
operator|.
name|class
block|}
empty_stmt|;
block|}
specifier|public
name|ClerezzaOntologyProvider
parameter_list|(
name|TcProvider
name|store
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|Parser
name|parser
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|offlineConfig
operator|=
name|offline
expr_stmt|;
comment|// Re-assign the TcManager if no store is supplied
if|if
condition|(
name|store
operator|==
literal|null
condition|)
name|store
operator|=
name|TcManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tcManager
operator|==
literal|null
condition|)
name|this
operator|.
name|tcManager
operator|=
name|TcManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
comment|// Same for the parser
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
name|this
operator|.
name|parser
operator|=
name|Parser
operator|.
name|getInstance
argument_list|()
expr_stmt|;
else|else
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|activate
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} activate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
comment|// Check if the TcManager should be set as the store
if|if
condition|(
name|store
operator|==
literal|null
condition|)
name|store
operator|=
name|tcManager
expr_stmt|;
comment|// Parse configuration.
name|metaGraphId
operator|=
call|(
name|String
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|META_GRAPH_ID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaGraphId
operator|==
literal|null
condition|)
name|metaGraphId
operator|=
name|_META_GRAPH_ID_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
comment|// This call will also create the metadata graph.
name|keymap
operator|=
operator|new
name|OntologyToTcMapper
argument_list|()
expr_stmt|;
comment|// Parse configuration.
name|prefix
operator|=
call|(
name|String
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|GRAPH_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
name|_GRAPH_PREFIX_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
try|try
block|{
name|resolveImports
operator|=
call|(
name|Boolean
call|)
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|RESOLVE_IMPORTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|resolveImports
operator|=
name|_RESOLVE_IMPORTS_DEFAULT
expr_stmt|;
comment|// Should be already assigned though
block|}
name|Object
name|importPolicy
init|=
name|configuration
operator|.
name|get
argument_list|(
name|OntologyProvider
operator|.
name|IMPORT_POLICY
argument_list|)
decl_stmt|;
if|if
condition|(
name|importPolicy
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|importPolicyString
operator|=
name|_IMPORT_POLICY_DEFAULT
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|importPolicyString
operator|=
name|importPolicy
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// TODO replace with DataFileProvider ?
specifier|final
name|IRI
index|[]
name|offlineResources
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|offlineConfig
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|IRI
argument_list|>
name|paths
init|=
name|offlineConfig
operator|.
name|getOntologySourceLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
name|offlineResources
operator|=
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|IRI
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// There are no offline paths.
else|else
name|offlineResources
operator|=
operator|new
name|IRI
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// There's no offline configuration at all.
else|else
name|offlineResources
operator|=
operator|new
name|IRI
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|mappers
operator|=
name|OWLOntologyManagerFactory
operator|.
name|getMappers
argument_list|(
name|offlineResources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in {} deactivate with context {}"
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
comment|/**      * Fills a reverse stack of import targets for the graph identified by key<tt>importing</tt>. The import      * tree is visited in<i>pre-order</i> and the stack is filled accordingly. Optionally, a second stack can      * be supplied to store only the level 1 imports. This can be used for preserving the original import tree      * structure.<br>      *<br>      * TODO there should be a more space-efficient implementation.      *       * @param importing      *            the key of the root graph, which will be at the bottom of every list.      * @param reverseImports      *            the list that will store all import target keys in pre-order.      * @param level1Imports      *            a second list that will store the level 1 import target keys, and is not passed to recursive      *            calls. Will be ignored if null.      */
specifier|private
name|void
name|fillImportsReverse
parameter_list|(
name|UriRef
name|importing
parameter_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
name|reverseImports
parameter_list|,
name|List
argument_list|<
name|UriRef
argument_list|>
name|level1Imports
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Filling reverse imports for {}"
argument_list|,
name|importing
argument_list|)
expr_stmt|;
name|reverseImports
operator|.
name|add
argument_list|(
name|importing
argument_list|)
expr_stmt|;
if|if
condition|(
name|level1Imports
operator|!=
literal|null
condition|)
name|level1Imports
operator|.
name|add
argument_list|(
name|importing
argument_list|)
expr_stmt|;
comment|// Get the graph and explore its imports
name|TripleCollection
name|graph
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|importing
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|graph
operator|.
name|filter
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
block|{
name|UriRef
name|key
init|=
operator|new
name|UriRef
argument_list|(
name|getKey
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|level1Imports
operator|!=
literal|null
condition|)
name|level1Imports
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|fillImportsReverse
argument_list|(
name|key
argument_list|,
name|reverseImports
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ImportManagementPolicy
name|getImportManagementPolicy
parameter_list|()
block|{
try|try
block|{
return|return
name|ImportManagementPolicy
operator|.
name|valueOf
argument_list|(
name|importPolicyString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The value \""
operator|+
name|importPolicyString
operator|+
literal|"\" configured as default ImportManagementPolicy does not match any value of the Enumeration! "
operator|+
literal|"Return the default policy as defined by the "
operator|+
name|ImportManagementPolicy
operator|.
name|class
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|_IMPORT_POLICY_DEFAULT
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
name|ontologyIri
operator|=
name|URIUtils
operator|.
name|sanitizeID
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
return|return
name|getKey
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
name|UriRef
name|ur
init|=
name|keymap
operator|.
name|getMapping
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"key for {} is {}"
argument_list|,
name|ontologyId
argument_list|,
name|ur
argument_list|)
expr_stmt|;
return|return
operator|(
name|ur
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ur
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|keymap
operator|.
name|stringValues
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
extends|extends
name|TripleCollection
parameter_list|>
name|O
name|getMetaGraph
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|TripleCollection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only subtypes of "
operator|+
name|TripleCollection
operator|.
name|class
operator|+
literal|" are allowed."
argument_list|)
throw|;
return|return
operator|(
name|O
operator|)
name|store
operator|.
name|getTriples
argument_list|(
operator|new
name|UriRef
argument_list|(
name|metaGraphId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getOntologyVersionKeys
parameter_list|(
name|IRI
name|ontologyIRI
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TcProvider
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getStoredOntology
argument_list|(
name|reference
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|forceMerge
parameter_list|)
block|{
name|String
name|key
init|=
name|getKey
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No key found for IRI {}"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
return|return
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|returnType
argument_list|,
name|forceMerge
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * In this implementation the identifier is the Graph Name (e.g. ontonet::blabla)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|identifier
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|forceMerge
parameter_list|)
block|{
if|if
condition|(
name|identifier
operator|==
literal|null
operator|||
name|identifier
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Identifier cannot be null or empty."
argument_list|)
throw|;
if|if
condition|(
name|returnType
operator|==
literal|null
condition|)
block|{
comment|// Defaults to OWLOntology
name|returnType
operator|=
operator|(
name|Class
argument_list|<
name|O
argument_list|>
operator|)
name|OWLOntology
operator|.
name|class
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"No return type given for the ontology. Will return a {}"
argument_list|,
name|returnType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|canDo
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|getSupportedReturnTypes
argument_list|()
control|)
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
name|canDo
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|canDo
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Return type "
operator|+
name|returnType
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" is not allowed in this implementation. Only allowed return types are "
operator|+
name|supported
argument_list|)
throw|;
name|TripleCollection
name|tc
init|=
name|store
operator|.
name|getTriples
argument_list|(
operator|new
name|UriRef
argument_list|(
name|identifier
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|MGraph
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
return|return
name|returnType
operator|.
name|cast
argument_list|(
name|tc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|OWLOntology
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|(
name|O
operator|)
name|toOWLOntology
argument_list|(
operator|new
name|UriRef
argument_list|(
name|identifier
argument_list|)
argument_list|,
name|forceMerge
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to return stored ontology "
operator|+
name|identifier
operator|+
literal|" as type "
operator|+
name|returnType
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getSupportedReturnTypes
parameter_list|()
block|{
return|return
name|supported
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
block|{
return|return
name|hasOntology
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|OWLOntologyID
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot check for an anonymous ontology."
argument_list|)
throw|;
return|return
name|keymap
operator|.
name|getMapping
argument_list|(
name|id
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|store
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|UriRef
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      *       * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|loadInStore
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No data to load ontologies from."
argument_list|)
throw|;
comment|// Force is ignored for the content, but the imports?
comment|// Get sorted list of supported formats, or use specified one.
name|Collection
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|formatIdentifier
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|formatIdentifier
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|formats
operator|=
name|OntologyUtils
operator|.
name|getPreferredSupportedFormats
argument_list|(
name|parser
operator|.
name|getSupportedFormats
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|formats
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|formatIdentifier
argument_list|)
expr_stmt|;
comment|// Try each format, return on the first one that was parsed.
for|for
control|(
name|String
name|format
range|:
name|formats
control|)
block|{
try|try
block|{
name|TripleCollection
name|rdfData
init|=
name|parser
operator|.
name|parse
argument_list|(
name|data
argument_list|,
name|format
argument_list|)
decl_stmt|;
return|return
name|loadInStore
argument_list|(
name|rdfData
argument_list|,
name|force
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unsupported format format {}. Trying next one."
argument_list|,
name|format
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parsing format "
operator|+
name|format
operator|+
literal|" failed. Trying next one."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// No parser worked, return null.
name|log
operator|.
name|error
argument_list|(
literal|"All parsers failed, giving up."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|loadInStore
parameter_list|(
specifier|final
name|IRI
name|ontologyIri
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Loading {}"
argument_list|,
name|ontologyIri
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyIri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Ontology IRI cannot be null."
argument_list|)
throw|;
name|IRI
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|force
condition|)
name|location
operator|=
literal|null
expr_stmt|;
else|else
for|for
control|(
name|OWLOntologyIRIMapper
name|mapper
range|:
name|mappers
control|)
block|{
name|location
operator|=
name|mapper
operator|.
name|getDocumentIRI
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
break|break;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isOfflineMode
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve "
operator|+
name|ontologyIri
operator|+
literal|" while Stanbol is in offline mode. "
operator|+
literal|"No resource with that identifier was found locally."
argument_list|)
throw|;
else|else
name|location
operator|=
name|ontologyIri
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"found {} in {}"
argument_list|,
name|ontologyIri
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|formatIdentifier
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|formatIdentifier
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|formats
operator|=
name|OntologyUtils
operator|.
name|getPreferredSupportedFormats
argument_list|(
name|parser
operator|.
name|getSupportedFormats
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|formats
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|formatIdentifier
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|currentFormat
range|:
name|formats
control|)
block|{
try|try
block|{
specifier|final
name|URLConnection
name|con
init|=
name|location
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setRequestProperty
argument_list|(
literal|"Accept"
argument_list|,
name|currentFormat
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|is
init|=
name|con
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
comment|/*                      * We provide the current format, so the recursive call won't be trying to sort preferred                      * formats again. Also, we provide the ontologyIRI as the preferred key, since we already                      * know it.                      */
name|String
name|key
init|=
name|loadInStore
argument_list|(
name|is
argument_list|,
name|currentFormat
argument_list|,
name|force
argument_list|)
decl_stmt|;
comment|// If parsing failed, an exception will be thrown before getting here, so no risk.
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
name|setLocatorMapping
argument_list|(
name|ontologyIri
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unsupported format format {}. Trying next one."
argument_list|,
name|currentFormat
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parsing format "
operator|+
name|currentFormat
operator|+
literal|" failed. Trying next one."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// No parser worked, return null.
name|log
operator|.
name|error
argument_list|(
literal|"All parsers failed, giving up."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|loadInStore
parameter_list|(
name|Object
name|ontology
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
if|if
condition|(
name|ontology
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ontology supplied."
argument_list|)
throw|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TripleCollection
name|graph
decl_stmt|;
comment|// The final graph
name|TripleCollection
name|rdfData
decl_stmt|;
comment|// The supplied ontology converted to TripleCollection
if|if
condition|(
name|ontology
operator|instanceof
name|OWLOntology
condition|)
block|{
name|rdfData
operator|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
operator|(
name|OWLOntology
operator|)
name|ontology
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontology
operator|instanceof
name|TripleCollection
condition|)
block|{
name|rdfData
operator|=
operator|(
name|TripleCollection
operator|)
name|ontology
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This ontology provider can only accept objects assignable to "
operator|+
name|TripleCollection
operator|.
name|class
operator|+
literal|" or "
operator|+
name|OWLOntology
operator|.
name|class
argument_list|)
throw|;
comment|// Force is ignored for the content, but the imports?
name|String
name|s
init|=
name|prefix
operator|+
literal|"::"
decl_stmt|;
comment|// This will become the graph name
name|IRI
name|ontologyIri
init|=
literal|null
decl_stmt|;
comment|// FIXME Profile this method. Are we getting rid of rdfData after adding its triples?
comment|// preferredKey should be the "guessed" ontology id
name|String
name|iri
init|=
literal|null
decl_stmt|;
name|OWLOntologyID
name|realId
init|=
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|rdfData
argument_list|)
decl_stmt|;
comment|// String alternateId = OWLUtils.guessOntologyIdentifier(rdfData).getUnicodeString();
if|if
condition|(
operator|(
name|iri
operator|==
literal|null
operator|||
name|iri
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|realId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|realId
operator|.
name|getOntologyIRI
argument_list|()
operator|!=
literal|null
condition|)
name|iri
operator|=
name|realId
operator|.
name|getOntologyIRI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|realId
operator|.
name|getVersionIRI
argument_list|()
operator|!=
literal|null
condition|)
name|iri
operator|+=
literal|":::"
operator|+
name|realId
operator|.
name|getVersionIRI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// else try {
comment|// new UriRef(iri); // Can I make a UriRef from it?
comment|// } catch (Exception ex) {
comment|// iri = OWLUtils.guessOntologyIdentifier(rdfData).getUnicodeString();
comment|// }
name|ontologyIri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|iri
argument_list|)
expr_stmt|;
while|while
condition|(
name|s
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ontologyIri
operator|=
name|URIUtils
operator|.
name|sanitizeID
argument_list|(
name|ontologyIri
argument_list|)
expr_stmt|;
name|s
operator|+=
name|ontologyIri
expr_stmt|;
comment|// if (s.endsWith("#")) s = s.substring(0, s.length() - 1);
comment|/*          * rdfData should be an in-memory graph, so we shouldn't have a problem creating one with the          * TcProvider and adding triples there, so that the in-memory graph is garbage-collected.          *           * TODO this occupies twice as much space, which should not be necessary if the provider is the same          * as the one used by the input source.          */
name|UriRef
name|uriref
init|=
operator|new
name|UriRef
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Storing ontology with graph ID {}"
argument_list|,
name|uriref
argument_list|)
expr_stmt|;
comment|// The policy here is to avoid copying the triples from a graph already in the store.
comment|// FIXME not a good policy for graphs that change
if|if
condition|(
operator|!
name|getStore
argument_list|()
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|uriref
argument_list|)
operator|||
name|force
condition|)
block|{
try|try
block|{
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|uriref
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
name|uriref
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getEntityName
argument_list|()
argument_list|)
condition|)
name|graph
operator|=
name|store
operator|.
name|getMGraph
argument_list|(
name|uriref
argument_list|)
expr_stmt|;
else|else
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|uriref
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|addAll
argument_list|(
name|rdfData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Graph with ID {} already in store. Default action is to skip storage."
argument_list|,
name|uriref
argument_list|)
expr_stmt|;
name|graph
operator|=
name|store
operator|.
name|getTriples
argument_list|(
name|uriref
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolveImports
condition|)
block|{
comment|// Scan resources of type owl:Ontology, but only get the first.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Scan import statements for the one owl:Ontology considered.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it2
init|=
name|graph
operator|.
name|filter
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
try|try
block|{
comment|// TODO try locals first
if|if
condition|(
name|isOfflineMode
argument_list|()
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Camnnot load imported ontology "
operator|+
name|obj
operator|+
literal|" while Stanbol is in offline mode."
argument_list|)
throw|;
else|else
name|loadInStore
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse format for resource "
operator|+
name|obj
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to load ontology from resource "
operator|+
name|obj
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// All is already sanitized by the time we get here.
comment|// Now do the mappings
name|String
name|mappedIds
init|=
literal|""
decl_stmt|;
comment|// Discard unconventional ontology IDs with only the version IRI
if|if
condition|(
name|realId
operator|!=
literal|null
operator|&&
name|realId
operator|.
name|getOntologyIRI
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Versioned or not, the real ID mapping is always added
name|keymap
operator|.
name|setMapping
argument_list|(
name|realId
argument_list|,
name|uriref
argument_list|)
expr_stmt|;
name|mappedIds
operator|+=
name|realId
expr_stmt|;
if|if
condition|(
name|realId
operator|.
name|getVersionIRI
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// If the unversioned variant of a versioned ID wasn't mapped, map it too.
name|OWLOntologyID
name|unvId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|realId
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keymap
operator|.
name|getMapping
argument_list|(
name|unvId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|keymap
operator|.
name|setMapping
argument_list|(
name|unvId
argument_list|,
name|uriref
argument_list|)
expr_stmt|;
name|mappedIds
operator|+=
name|realId
expr_stmt|;
block|}
block|}
block|}
comment|/*          * Make an ontology ID out of the originally supplied IRI (which might be the physical one and differ          * from the logical one!)          *           * If we find out that it differs from the "real ID", we map this one too.          *           * TODO how safe is this if there was a mapping earlier?          */
name|OWLOntologyID
name|unv
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unv
operator|.
name|equals
argument_list|(
name|realId
argument_list|)
condition|)
block|{
name|keymap
operator|.
name|setMapping
argument_list|(
name|unv
argument_list|,
name|uriref
argument_list|)
expr_stmt|;
name|mappedIds
operator|+=
literal|" , "
operator|+
name|unv
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology \n\t\t{}\n\tstored with key\n\t\t{}"
argument_list|,
name|mappedIds
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Time: {} ms"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
operator|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scopeActivated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|scopeCreated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|scopeDeactivated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|scopeDeregistered
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{
name|UriRef
name|graphId
init|=
operator|new
name|UriRef
argument_list|(
name|metaGraphId
argument_list|)
decl_stmt|;
name|MGraph
name|graph
init|=
name|store
operator|.
name|getMGraph
argument_list|(
name|graphId
argument_list|)
decl_stmt|;
if|if
condition|(
name|graph
operator|==
literal|null
condition|)
try|try
block|{
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get meta graph {} for writing scope registration. "
argument_list|,
name|graphId
argument_list|)
expr_stmt|;
block|}
name|boolean
name|removable
init|=
literal|false
decl_stmt|,
name|conflict
init|=
literal|false
decl_stmt|;
name|UriRef
name|sid
init|=
operator|new
name|UriRef
argument_list|(
name|scope
operator|.
name|getNamespace
argument_list|()
operator|+
name|scope
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Triple
argument_list|>
name|removeUs
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|sid
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|RDF
operator|.
name|type
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getPredicate
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|new
name|UriRef
argument_list|(
name|SCOPE
argument_list|)
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getObject
argument_list|()
argument_list|)
condition|)
name|removable
operator|=
literal|true
expr_stmt|;
else|else
name|conflict
operator|=
literal|true
expr_stmt|;
block|}
name|removeUs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|sid
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|removeUs
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|removable
condition|)
name|log
operator|.
name|error
argument_list|(
literal|"Cannot write scope deregistration to persistence: resource {} is not typed as a {} in the meta-graph."
argument_list|,
name|sid
argument_list|,
name|SCOPE
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|conflict
condition|)
name|log
operator|.
name|error
argument_list|(
literal|"Conflict upon scope deregistration: resource {} has incompatible types in the meta-graph."
argument_list|,
name|sid
argument_list|,
name|SCOPE
argument_list|)
expr_stmt|;
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Removing all triples for {}"
argument_list|,
name|sid
argument_list|)
expr_stmt|;
name|graph
operator|.
name|removeAll
argument_list|(
name|removeUs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|scopeRegistered
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{
name|UriRef
name|graphId
init|=
operator|new
name|UriRef
argument_list|(
name|metaGraphId
argument_list|)
decl_stmt|;
name|MGraph
name|graph
init|=
name|store
operator|.
name|getMGraph
argument_list|(
name|graphId
argument_list|)
decl_stmt|;
if|if
condition|(
name|graph
operator|==
literal|null
condition|)
try|try
block|{
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get meta graph {} for writing scope registration. "
argument_list|,
name|graphId
argument_list|)
expr_stmt|;
block|}
name|Triple
name|t
init|=
operator|new
name|TripleImpl
argument_list|(
operator|new
name|UriRef
argument_list|(
name|scope
operator|.
name|getNamespace
argument_list|()
operator|+
name|scope
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
operator|new
name|UriRef
argument_list|(
name|SCOPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|graph
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"Not adding triple {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Adding triple {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setImportManagementPolicy
parameter_list|(
name|ImportManagementPolicy
name|policy
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Import management policy cannot be null."
argument_list|)
throw|;
name|importPolicyString
operator|=
name|policy
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLocatorMapping
parameter_list|(
name|IRI
name|locator
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key must be non-null and non-empty."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|store
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|UriRef
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ontology found with storage key "
operator|+
name|key
argument_list|)
throw|;
if|if
condition|(
name|locator
operator|==
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Setting null locator for {}. This will remove all physical mappings for the corresponding graph."
argument_list|,
name|key
argument_list|)
expr_stmt|;
else|else
name|log
operator|.
name|info
argument_list|(
literal|"Setting {} as the resource locator for ontology {}"
argument_list|,
name|locator
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|keymap
operator|.
name|mapLocator
argument_list|(
name|locator
argument_list|,
operator|new
name|UriRef
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @param graphName      * @param forceMerge      *            if set to false, the selected import management policy will be applied.      * @return      * @throws OWLOntologyCreationException      */
specifier|protected
name|OWLOntology
name|toOWLOntology
parameter_list|(
name|UriRef
name|graphName
parameter_list|,
name|boolean
name|forceMerge
parameter_list|)
throws|throws
name|OWLOntologyCreationException
block|{
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
comment|// Never try to import
name|mgr
operator|.
name|addIRIMapper
argument_list|(
operator|new
name|PhonyIRIMapper
argument_list|(
name|Collections
operator|.
expr|<
name|IRI
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|loaded
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|TripleCollection
name|graph
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|graphName
argument_list|)
decl_stmt|;
name|UriRef
name|ontologyId
init|=
literal|null
decl_stmt|;
comment|// Get the id of this ontology.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|itt
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
if|if
condition|(
name|itt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|nl
init|=
name|itt
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|nl
operator|instanceof
name|UriRef
condition|)
name|ontologyId
operator|=
operator|(
name|UriRef
operator|)
name|nl
expr_stmt|;
block|}
name|List
argument_list|<
name|UriRef
argument_list|>
name|revImps
init|=
operator|new
name|Stack
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UriRef
argument_list|>
name|lvl1
init|=
operator|new
name|Stack
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|fillImportsReverse
argument_list|(
name|graphName
argument_list|,
name|revImps
argument_list|,
name|lvl1
argument_list|)
expr_stmt|;
comment|// If not set to merge (either by policy of by force), adopt the set import policy.
if|if
condition|(
operator|!
name|forceMerge
operator|&&
operator|!
name|ImportManagementPolicy
operator|.
name|MERGE
operator|.
name|equals
argument_list|(
name|getImportManagementPolicy
argument_list|()
argument_list|)
condition|)
block|{
name|OWLOntology
name|o
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|graph
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
comment|// TODO make it not flat.
comment|// Examining the reverse imports stack will flatten all imports.
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UriRef
argument_list|>
name|listToUse
decl_stmt|;
switch|switch
condition|(
name|getImportManagementPolicy
argument_list|()
condition|)
block|{
case|case
name|FLATTEN
case|:
name|listToUse
operator|=
name|revImps
expr_stmt|;
break|break;
case|case
name|PRESERVE
case|:
name|listToUse
operator|=
name|lvl1
expr_stmt|;
break|break;
default|default:
name|listToUse
operator|=
name|lvl1
expr_stmt|;
break|break;
block|}
for|for
control|(
name|UriRef
name|ref
range|:
name|listToUse
control|)
if|if
condition|(
operator|!
name|loaded
operator|.
name|contains
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|ref
operator|.
name|equals
argument_list|(
name|graphName
argument_list|)
condition|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|o
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ref
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
else|else
block|{
comment|// Merge
comment|// If there is just the root ontology, convert it straight away.
if|if
condition|(
name|revImps
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|revImps
operator|.
name|contains
argument_list|(
name|graphName
argument_list|)
condition|)
block|{
name|OWLOntology
name|o
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|graph
argument_list|,
name|mgr
argument_list|)
decl_stmt|;
return|return
name|o
return|;
block|}
comment|// FIXME when there's more than one ontology, this way of merging them seems inefficient...
name|TripleCollection
name|tempGraph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
comment|// The set of triples that will be excluded from the merge
name|Set
argument_list|<
name|Triple
argument_list|>
name|exclusions
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
comment|// Examine all reverse imports
for|for
control|(
name|UriRef
name|ref
range|:
name|revImps
control|)
if|if
condition|(
operator|!
name|loaded
operator|.
name|contains
argument_list|(
name|ref
argument_list|)
condition|)
block|{
comment|// Get the triples
name|TripleCollection
name|imported
init|=
name|store
operator|.
name|getTriples
argument_list|(
name|ref
argument_list|)
decl_stmt|;
comment|// For each owl:Ontology
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|remove
init|=
name|imported
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|OWL
operator|.
name|Ontology
argument_list|)
decl_stmt|;
while|while
condition|(
name|remove
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|subj
init|=
name|remove
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|/*                          * If it's not the root ontology, trash all its triples. If the root ontology is                          * anonymous, all ontology annotations are to be trashed without distinction.                          */
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
operator|!
name|subj
operator|.
name|equals
argument_list|(
name|ontologyId
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|imported
operator|.
name|filter
argument_list|(
name|subj
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|imported
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exclusions
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
name|tempGraph
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|loaded
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
comment|// Since they are all merged and import statements removed, there should be no risk of going
comment|// online.
return|return
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|tempGraph
argument_list|,
name|mgr
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOntologyAdded
parameter_list|(
name|OntologyCollector
name|collector
parameter_list|,
name|OWLOntologyID
name|addedOntology
parameter_list|)
block|{
comment|// When the ontology provider hears an ontology has been added to a collector, it has to register this
comment|// into the metadata graph.
comment|// log.info("Heard addition of ontology {} to collector {}", addedOntology, collector.getID());
comment|// log.info("This ontology is stored as {}", getKey(addedOntology));
name|UriRef
name|c
init|=
operator|new
name|UriRef
argument_list|(
name|collector
operator|.
name|getNamespace
argument_list|()
operator|+
name|collector
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|u
init|=
name|keymap
operator|.
name|buildResource
argument_list|(
name|addedOntology
argument_list|)
decl_stmt|;
comment|// TODO OntologyProvider should not be aware of scopes, spaces or sessions. Move elsewhere.
name|MGraph
name|meta
init|=
name|getMetaGraph
argument_list|(
name|MGraph
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|sMan
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
name|u
argument_list|,
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CUSTOM
argument_list|)
argument_list|,
literal|null
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|sMan
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|+
literal|", "
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
name|u
argument_list|,
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CORE
argument_list|)
argument_list|,
literal|null
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|sMan
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|+
literal|", "
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CUSTOM
argument_list|)
argument_list|,
name|u
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|sMan
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|+
literal|"(inverse), "
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CORE
argument_list|)
argument_list|,
name|u
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|sMan
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|+
literal|"(inverse), "
expr_stmt|;
if|if
condition|(
operator|!
name|sMan
operator|.
name|isEmpty
argument_list|()
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is already managed by the following collectors : "
operator|+
name|sMan
argument_list|,
name|addedOntology
argument_list|)
expr_stmt|;
comment|// Add both inverse triples. This graph has to be traversed efficiently, no need for reasoners.
name|UriRef
name|predicate1
init|=
literal|null
decl_stmt|,
name|predicate2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collector
operator|instanceof
name|CoreOntologySpace
condition|)
block|{
name|predicate1
operator|=
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CORE
argument_list|)
expr_stmt|;
name|predicate2
operator|=
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CORE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|collector
operator|instanceof
name|CustomOntologySpace
condition|)
block|{
name|predicate1
operator|=
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CUSTOM
argument_list|)
expr_stmt|;
name|predicate2
operator|=
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CUSTOM
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|collector
operator|instanceof
name|Session
condition|)
block|{
comment|// TODO implement model for sessions.
block|}
synchronized|synchronized
init|(
name|meta
init|)
block|{
name|Triple
name|t
decl_stmt|;
if|if
condition|(
name|predicate1
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
operator|new
name|TripleImpl
argument_list|(
name|c
argument_list|,
name|predicate1
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|boolean
name|b
init|=
name|meta
operator|.
name|add
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
operator|(
name|b
condition|?
literal|"Successful"
else|:
literal|"Redundant"
operator|)
operator|+
literal|" addition of meta triple {} "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|predicate2
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
operator|new
name|TripleImpl
argument_list|(
name|u
argument_list|,
name|predicate2
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|boolean
name|b
init|=
name|meta
operator|.
name|add
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
operator|(
name|b
condition|?
literal|"Successful"
else|:
literal|"Redundant"
operator|)
operator|+
literal|" addition of meta triple {} "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOntologyRemoved
parameter_list|(
name|OntologyCollector
name|collector
parameter_list|,
name|OWLOntologyID
name|removedOntology
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Heard removal of ontology {} from collector {}"
argument_list|,
name|removedOntology
argument_list|,
name|collector
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|UriRef
name|c
init|=
operator|new
name|UriRef
argument_list|(
name|collector
operator|.
name|getNamespace
argument_list|()
operator|+
name|collector
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|u
init|=
name|keymap
operator|.
name|buildResource
argument_list|(
name|removedOntology
argument_list|)
decl_stmt|;
comment|// XXX condense the following code
name|MGraph
name|meta
init|=
name|getMetaGraph
argument_list|(
name|MGraph
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|badState
init|=
literal|true
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Checking ({},{}) pattern"
argument_list|,
name|c
argument_list|,
name|u
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|u
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|UriRef
name|property
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|collector
operator|instanceof
name|CoreOntologySpace
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CORE
argument_list|)
argument_list|)
condition|)
name|badState
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CUSTOM
argument_list|)
argument_list|)
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is still managed by custom space {}. "
operator|+
literal|"Removal from core space might alter axiom interpretation within the scope."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collector
operator|instanceof
name|CustomOntologySpace
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CORE
argument_list|)
argument_list|)
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is still managed by core space {}. "
operator|+
literal|"Removal from the custom space will most likely have no effect on the scope."
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CUSTOM
argument_list|)
argument_list|)
condition|)
name|badState
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Checking ({},{}) pattern"
argument_list|,
name|u
argument_list|,
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|meta
operator|.
name|filter
argument_list|(
name|u
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|UriRef
name|property
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|collector
operator|instanceof
name|CoreOntologySpace
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CORE
argument_list|)
argument_list|)
condition|)
name|badState
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CUSTOM
argument_list|)
argument_list|)
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is still managed by custom space {}. "
operator|+
literal|"Removal from core space might alter axiom interpretation within the scope."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collector
operator|instanceof
name|CustomOntologySpace
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CORE
argument_list|)
argument_list|)
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Ontology {} is still managed by core space {}. "
operator|+
literal|"Removal from the custom space will most likely have no effect on the scope."
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CUSTOM
argument_list|)
argument_list|)
condition|)
name|badState
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|badState
condition|)
throw|throw
operator|new
name|InvalidMetaGraphStateException
argument_list|(
literal|"No relationship found for ontology-collector pair {"
operator|+
name|u
operator|+
literal|" , "
operator|+
name|c
operator|+
literal|"}"
argument_list|)
throw|;
synchronized|synchronized
init|(
name|meta
init|)
block|{
if|if
condition|(
name|collector
operator|instanceof
name|CoreOntologySpace
condition|)
block|{
name|meta
operator|.
name|remove
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|c
argument_list|,
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CORE
argument_list|)
argument_list|,
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|u
argument_list|,
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CORE
argument_list|)
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|collector
operator|instanceof
name|CustomOntologySpace
condition|)
block|{
name|meta
operator|.
name|remove
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|c
argument_list|,
operator|new
name|UriRef
argument_list|(
name|MANAGES_IN_CUSTOM
argument_list|)
argument_list|,
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|u
argument_list|,
operator|new
name|UriRef
argument_list|(
name|IS_MANAGED_BY_CUSTOM
argument_list|)
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

