begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|RegistryItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|model
operator|.
name|RegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|model
operator|.
name|RegistryLibraryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|model
operator|.
name|RegistryOntologyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|xd
operator|.
name|vocabulary
operator|.
name|CODOVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AxiomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_class
specifier|public
class|class
name|RegistryItemFactoryImpl
implements|implements
name|RegistryItemFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REGISTRY_LIBRARY_ID
init|=
name|CODOVocabulary
operator|.
name|CODD_OntologyLibrary
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IS_PART_OF_ID
init|=
name|CODOVocabulary
operator|.
name|PARTOF_IsPartOf
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IS_ONTOLOGY_OF_ID
init|=
name|CODOVocabulary
operator|.
name|ODPM_IsOntologyOf
decl_stmt|;
specifier|private
specifier|final
name|OWLClass
name|cRegistryLibrary
decl_stmt|;
specifier|private
specifier|final
name|OWLObjectProperty
name|isPartOf
decl_stmt|,
name|isOntologyOf
decl_stmt|;
specifier|public
name|RegistryItemFactoryImpl
parameter_list|()
block|{
name|OWLDataFactory
name|df
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|cRegistryLibrary
operator|=
name|df
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|REGISTRY_LIBRARY_ID
argument_list|)
argument_list|)
expr_stmt|;
name|isPartOf
operator|=
name|df
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|IS_PART_OF_ID
argument_list|)
argument_list|)
expr_stmt|;
name|isOntologyOf
operator|=
name|df
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|IS_ONTOLOGY_OF_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Library
name|createLibrary
parameter_list|(
name|OWLNamedIndividual
name|ind
parameter_list|,
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|ontologies
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ind
operator|.
name|getTypes
argument_list|(
name|ontologies
argument_list|)
operator|.
name|contains
argument_list|(
name|cRegistryLibrary
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Will not create a library from an individual not stated to be of type "
operator|+
name|REGISTRY_LIBRARY_ID
operator|+
literal|" in the supplied ontologies."
argument_list|)
throw|;
name|Library
name|l
init|=
literal|null
decl_stmt|;
try|try
block|{
name|l
operator|=
operator|new
name|RegistryLibraryImpl
argument_list|(
name|ind
operator|.
name|getIRI
argument_list|()
operator|.
name|getFragment
argument_list|()
argument_list|,
name|ind
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
comment|// recurse into its children
for|for
control|(
name|OWLOntology
name|o
range|:
name|ontologies
control|)
block|{
for|for
control|(
name|OWLAxiom
name|ax
range|:
name|ind
operator|.
name|getReferencingAxioms
argument_list|(
name|o
argument_list|,
literal|true
argument_list|)
control|)
block|{
if|if
condition|(
name|ax
operator|.
name|isOfType
argument_list|(
name|AxiomType
operator|.
name|OBJECT_PROPERTY_ASSERTION
argument_list|)
operator|&&
operator|(
name|isOntologyOf
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|OWLObjectPropertyAssertionAxiom
operator|)
name|ax
operator|)
operator|.
name|getProperty
argument_list|()
argument_list|)
operator|||
name|isPartOf
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|OWLObjectPropertyAssertionAxiom
operator|)
name|ax
operator|)
operator|.
name|getProperty
argument_list|()
argument_list|)
operator|)
condition|)
block|{                      }
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|l
return|;
block|}
annotation|@
name|Override
specifier|public
name|Registry
name|createRegistry
parameter_list|(
name|OWLNamedIndividual
name|ind
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|RegistryImpl
argument_list|(
name|ind
operator|.
name|getIRI
argument_list|()
operator|.
name|getFragment
argument_list|()
argument_list|,
name|ind
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RegistryOntology
name|createRegistryOntology
parameter_list|(
name|OWLNamedIndividual
name|ind
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|RegistryOntologyImpl
argument_list|(
name|ind
operator|.
name|getIRI
argument_list|()
operator|.
name|getFragment
argument_list|()
argument_list|,
name|ind
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

