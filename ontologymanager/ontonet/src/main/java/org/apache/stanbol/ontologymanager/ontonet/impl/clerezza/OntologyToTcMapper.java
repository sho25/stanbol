begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|EntityAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_comment
comment|/**  * A map from logical/physical ontology IDs to Clerezza graph names, stored using the supplied TcProvider.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyToTcMapper
block|{
comment|/**      * The basic terms to use for the mapping graph.      *       * @author alexdma      *       */
specifier|private
class|class
name|Vocabulary
block|{
specifier|static
specifier|final
name|String
name|_BASE_VOCAB
init|=
literal|"http://stanbol.apache.org/ontology/ontonet/meta#"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MAPS_TO_GRAPH
init|=
name|_BASE_VOCAB
operator|+
literal|"mapsToGraph"
decl_stmt|;
block|}
specifier|private
name|MGraph
name|graph
decl_stmt|;
specifier|private
name|UriRef
name|graphId
init|=
operator|new
name|UriRef
argument_list|(
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TcProvider
name|store
decl_stmt|;
specifier|public
name|OntologyToTcMapper
parameter_list|(
name|TcProvider
name|store
parameter_list|)
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TcProvider cannot be null"
argument_list|)
throw|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
try|try
block|{
name|graph
operator|=
name|store
operator|.
name|createMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
name|graph
operator|=
name|store
operator|.
name|getMGraph
argument_list|(
name|graphId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addMapping
parameter_list|(
name|IRI
name|ontologyReference
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyReference
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
name|graphName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearMappings
parameter_list|()
block|{
name|graph
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|UriRef
name|getMapping
parameter_list|(
name|IRI
name|ontologyReference
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyReference
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
return|return
operator|(
name|UriRef
operator|)
name|obj
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Set
argument_list|<
name|IRI
argument_list|>
name|keys
parameter_list|()
block|{
name|Set
argument_list|<
name|IRI
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|IRI
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|subj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subj
operator|instanceof
name|UriRef
condition|)
name|result
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|subj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|removeMapping
parameter_list|(
name|IRI
name|ontologyReference
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyReference
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// I expect a concurrent modification exception here, but we'll deal with it later.
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|graph
operator|.
name|remove
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMapping
parameter_list|(
name|IRI
name|ontologyReference
parameter_list|,
name|UriRef
name|graphName
parameter_list|)
block|{
name|removeMapping
argument_list|(
name|ontologyReference
argument_list|)
expr_stmt|;
name|addMapping
argument_list|(
name|ontologyReference
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|stringValues
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
operator|new
name|UriRef
argument_list|(
name|Vocabulary
operator|.
name|MAPS_TO_GRAPH
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|UriRef
condition|)
name|result
operator|.
name|add
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|obj
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

