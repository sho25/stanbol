begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_class
specifier|public
class|class
name|Vocabulary
block|{
comment|/**      * The default namespace for the Stanbol OntoNet metadata vocabulary      */
specifier|public
specifier|static
specifier|final
name|String
name|_NS_ONTONET
init|=
literal|"http://stanbol.apache.org/ontology/meta/ontonet#"
decl_stmt|;
comment|/**      * This namespace is used for representing Stanbol resources internally. It should applied to all portable      * resources that might be moved from one host to another, e.g. scopes and sessions.<br/>      *<br>      * This namespace MUST NOT be used for identifying resources in the outside world, e.g. RESTful services:      * it MUST be converted to the public namespace before exporting.      */
specifier|public
specifier|static
specifier|final
name|String
name|_NS_STANBOL_INTERNAL
init|=
literal|"http://stanbol.apache.org/ontology/.internal/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|APPENDED_TO
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"isAppendedTo"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|HAS_APPENDED
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"hasAppended"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|HAS_SPACE_CORE
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"hasCoreSpace"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|HAS_SPACE_CUSTOM
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"hasCustomSpace"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|HAS_STATUS
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"hasStatus"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|IS_MANAGED_BY
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"isManagedBy"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|IS_MANAGED_BY_CORE
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"isManagedByCore"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|IS_MANAGED_BY_CUSTOM
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"isManagedByCustom"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|IS_SPACE_CORE_OF
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"isCoreSpaceOf"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|IS_SPACE_CUSTOM_OF
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"isCustomSpaceOf"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MANAGES
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"manages"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MANAGES_IN_CORE
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"managesInCore"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MANAGES_IN_CUSTOM
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"managesInCustom"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|SCOPE
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"Scope"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|SESSION
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"Session"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|SPACE
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"Space"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|STATUS
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"Status"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|STATUS_ACTIVE
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"Status.ACTIVE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|STATUS_INACTIVE
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_ONTONET
operator|+
literal|"Status.INACTIVE"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

