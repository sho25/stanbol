begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|BlankOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|NoSuchScopeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|conf
operator|.
name|OntologyNetworkConfigurationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
operator|.
name|ClerezzaOntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
operator|.
name|OntologySpaceFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|OntologyIndexImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|OntologyScopeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|ScopeRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|session
operator|.
name|ScopeSessionSynchronizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|session
operator|.
name|SessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|OWLOntologyManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|FileDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|IRIDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|OWLOntologyDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StreamDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The running context of a Stanbol Ontology Network Manager instance. From this object it is possible to  * obtain factories, indices, registries and what have you.  *   * @see ONManager  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|ONManager
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ONManagerImpl
implements|implements
name|ONManager
block|{
comment|/**      * Utility class to speed up ontology network startup.<br>      * TODO: it's most likely useless, remove it.      *       * @author enrico      *       */
specifier|private
class|class
name|Helper
block|{
comment|/**          * Adds the ontology fromt he given iri to the custom space of the given scope          *           * @param scopeID          * @param locationIri          */
specifier|public
specifier|synchronized
name|void
name|addToCustomSpace
parameter_list|(
name|String
name|scopeID
parameter_list|,
name|String
index|[]
name|locationIris
parameter_list|)
block|{
name|OntologyScope
name|scope
init|=
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|scopeID
argument_list|)
decl_stmt|;
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|locationIri
range|:
name|locationIris
control|)
block|{
try|try
block|{
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
name|createOntologyInputSource
argument_list|(
name|locationIri
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added "
operator|+
name|locationIri
operator|+
literal|" to scope "
operator|+
name|scopeID
operator|+
literal|" in the custom space."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"An error occurred while trying to add the ontology from location: "
operator|+
name|locationIri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|private
name|OntologyInputSource
name|createOntologyInputSource
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load the ontology {}"
argument_list|,
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load the ontology {}"
argument_list|,
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|_CONFIG_ONTOLOGY_PATH_DEFAULT
init|=
literal|""
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_ID_DEFAULT
init|=
literal|"ontonet"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_ONTOLOGY_NETWORK_NS_DEFAULT
init|=
literal|"http://localhost:8080/ontonet/ontology/"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ONManager
operator|.
name|CONFIG_ONTOLOGY_PATH
argument_list|,
name|value
operator|=
name|_CONFIG_ONTOLOGY_PATH_DEFAULT
argument_list|)
specifier|private
name|String
name|configPath
decl_stmt|;
specifier|private
name|Helper
name|helper
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OfflineConfiguration
name|offline
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For this engine that means it is necessary to check if the used {@link ReferencedSite} can operate      * offline or not.      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
specifier|private
name|OntologyIndex
name|oIndex
decl_stmt|;
specifier|private
name|OntologyScopeFactory
name|ontologyScopeFactory
decl_stmt|;
specifier|private
name|OntologySpaceFactory
name|ontologySpaceFactory
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ONManager
operator|.
name|ID
argument_list|,
name|value
operator|=
name|_ID_DEFAULT
argument_list|)
specifier|private
name|String
name|ontonetID
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ONManager
operator|.
name|ONTOLOGY_NETWORK_NS
argument_list|,
name|value
operator|=
name|_ONTOLOGY_NETWORK_NS_DEFAULT
argument_list|)
specifier|private
name|String
name|ontonetNS
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlCacheManager
decl_stmt|;
specifier|private
name|ScopeRegistry
name|scopeRegistry
decl_stmt|;
specifier|private
name|SessionManager
name|sessionManager
decl_stmt|;
comment|// private ClerezzaOntologyStorage storage;
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcm
decl_stmt|;
comment|/*      * The identifiers (not yet parsed as IRIs) of the ontology scopes that should be activated.      */
specifier|private
name|String
index|[]
name|toActivate
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|WeightedTcProvider
name|wtcp
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ReengineerManagerImpl instances do need to be configured!      * YOU NEED TO USE {@link #ONManagerImpl(TcManager, WeightedTcProvider, OfflineConfiguration, Dictionary)}      * or its overloads, to parse the configuration and then initialise the rule store if running outside an      * OSGI environment.      */
specifier|public
name|ONManagerImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// All bindings are deferred to the activator
block|}
comment|/**      * @deprecated use {@link #ONManagerImpl(TcManager, WeightedTcProvider, OfflineConfiguration, Dictionary)}      *             instead. Note that if the deprecated method is used instead, its effect will be to copy the      *             Dictionary context to a new {@link OfflineConfiguration} object.      * @param tcm      * @param wtcp      * @param configuration      */
annotation|@
name|Deprecated
specifier|public
name|ONManagerImpl
parameter_list|(
name|TcManager
name|tcm
parameter_list|,
name|WeightedTcProvider
name|wtcp
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
comment|// Copy the same configuration to the ONManagerConfigurationImpl.
name|this
argument_list|(
name|tcm
argument_list|,
name|wtcp
argument_list|,
operator|new
name|OfflineConfigurationImpl
argument_list|(
name|configuration
argument_list|)
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor to be invoked by non-OSGi environments.      *       * @deprecated tcm and wctp are no longer to be supplied directly to the ONManager object. Use      *             {@link #ONManagerImpl(OntologyProvider, OfflineConfiguration, Dictionary)} instead.      *       * @param tcm      *            the triple collection manager to be used for storing ontologies.      * @param wtcp      *            the triple collection provider to be used for storing ontologies.      * @param onmconfig      *            the configuration of this ontology network manager.      * @param configuration      *            additional parameters for the ONManager not included in {@link OfflineConfiguration}.      */
annotation|@
name|Deprecated
specifier|public
name|ONManagerImpl
parameter_list|(
name|TcManager
name|tcm
parameter_list|,
name|WeightedTcProvider
name|wtcp
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
comment|/*          * Assume this.tcm this.wtcp and this.wtcp were not filled in by OSGi-DS. As a matter of fact,          * WeightedTcProvider is now ignored as we assume to use those bound with the TcManager.          */
name|this
argument_list|(
operator|new
name|ClerezzaOntologyProvider
argument_list|(
name|tcm
argument_list|,
name|offline
argument_list|,
operator|new
name|Parser
argument_list|()
argument_list|)
argument_list|,
name|offline
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ONManagerImpl
parameter_list|(
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
parameter_list|,
name|OfflineConfiguration
name|offline
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|ontologyProvider
operator|=
name|ontologyProvider
expr_stmt|;
name|this
operator|.
name|offline
operator|=
name|offline
expr_stmt|;
try|try
block|{
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to access servlet context."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ONManagerImpl
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Parse configuration
name|ontonetID
operator|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|ONManager
operator|.
name|ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontonetID
operator|==
literal|null
condition|)
name|ontonetID
operator|=
name|_ID_DEFAULT
expr_stmt|;
name|ontonetNS
operator|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|ONManager
operator|.
name|ONTOLOGY_NETWORK_NS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontonetNS
operator|==
literal|null
condition|)
name|ontonetNS
operator|=
name|_ONTOLOGY_NETWORK_NS_DEFAULT
expr_stmt|;
name|configPath
operator|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|ONManager
operator|.
name|CONFIG_ONTOLOGY_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
name|configPath
operator|==
literal|null
condition|)
name|configPath
operator|=
name|_CONFIG_ONTOLOGY_PATH_DEFAULT
expr_stmt|;
if|if
condition|(
name|ontonetID
operator|==
literal|null
operator|||
name|ontonetID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The Ontology Network Manager configuration does not define a ID for the Ontology Network Manager"
argument_list|)
expr_stmt|;
block|}
comment|// Bind components, starting with the local directories.
name|List
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|IRI
name|iri
range|:
name|offline
operator|.
name|getOntologySourceLocations
argument_list|()
control|)
name|dirs
operator|.
name|add
argument_list|(
name|iri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// Ok, go empty
block|}
name|owlCacheManager
operator|=
name|OWLOntologyManagerFactory
operator|.
name|createOWLOntologyManager
argument_list|(
name|offline
operator|.
name|getOntologySourceLocations
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|IRI
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// These depend on one another
name|scopeRegistry
operator|=
operator|new
name|ScopeRegistryImpl
argument_list|()
expr_stmt|;
name|oIndex
operator|=
operator|new
name|OntologyIndexImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|bindResources
argument_list|()
expr_stmt|;
comment|// String tfile = (String) configuration.get(CONFIG_FILE_PATH);
comment|// if (tfile != null) this.configPath = tfile;
comment|// String tns = (String) configuration.get(KRES_NAMESPACE);
comment|// if (tns != null) this.kresNs = tns;
comment|// configPath = (String) configuration.get(CONFIG_FILE_PATH);
comment|/*          * If there is no configuration file, just start with an empty scope set          */
name|String
name|configPath
init|=
name|getOntologyNetworkConfigurationPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|configPath
operator|!=
literal|null
operator|&&
operator|!
name|configPath
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OWLOntology
name|oConf
init|=
literal|null
decl_stmt|;
name|OWLOntologyManager
name|tempMgr
init|=
name|OWLOntologyManagerFactory
operator|.
name|createOWLOntologyManager
argument_list|(
name|offline
operator|.
name|getOntologySourceLocations
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|IRI
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntologyDocumentSource
name|oConfSrc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Try to load the configuration ontology from a local bundle relative path"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|configPath
argument_list|)
decl_stmt|;
name|oConfSrc
operator|=
operator|new
name|StreamDocumentSource
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot load from a local bundle relative path"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Try to load the configuration ontology resolving the given IRI"
argument_list|)
expr_stmt|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|configPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iri
operator|.
name|isAbsolute
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"IRI seems to be not absolute! value was: "
operator|+
name|iri
operator|.
name|toQuotedString
argument_list|()
argument_list|)
throw|;
name|oConfSrc
operator|=
operator|new
name|IRIDocumentSource
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot load from the web"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Try to load the configuration ontology as full local file path"
argument_list|)
expr_stmt|;
name|oConfSrc
operator|=
operator|new
name|FileDocumentSource
argument_list|(
operator|new
name|File
argument_list|(
name|configPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load the configuration ontology from parameter value: "
operator|+
name|configPath
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|oConfSrc
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No ONM configuration file found at path "
operator|+
name|configPath
operator|+
literal|". Starting with blank scope set."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|oConf
operator|=
name|tempMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|oConfSrc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot create the configuration ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create and populate the scopes from the config ontology.
name|bootstrapOntologyNetwork
argument_list|(
name|oConf
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
name|ONManager
operator|.
name|class
operator|+
literal|"activated."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|bindResources
parameter_list|()
block|{
if|if
condition|(
name|ontologyProvider
operator|.
name|getStore
argument_list|()
operator|instanceof
name|TcManager
condition|)
name|ontologySpaceFactory
operator|=
operator|new
name|OntologySpaceFactoryImpl
argument_list|(
name|scopeRegistry
argument_list|,
operator|(
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
operator|)
name|ontologyProvider
argument_list|,
name|offline
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|getOntologyNetworkNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|ontologySpaceFactory
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|owlapi
operator|.
name|OntologySpaceFactoryImpl
argument_list|(
name|scopeRegistry
argument_list|,
name|offline
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|getOntologyNetworkNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ontologyScopeFactory
operator|=
operator|new
name|OntologyScopeFactoryImpl
argument_list|(
name|scopeRegistry
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|getOntologyNetworkNamespace
argument_list|()
argument_list|)
argument_list|,
name|ontologySpaceFactory
argument_list|)
expr_stmt|;
name|ontologyScopeFactory
operator|.
name|addScopeEventListener
argument_list|(
name|oIndex
argument_list|)
expr_stmt|;
name|sessionManager
operator|=
operator|new
name|SessionManagerImpl
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iks-project.eu/"
argument_list|)
argument_list|,
name|getScopeRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|sessionManager
operator|.
name|addSessionListener
argument_list|(
operator|new
name|ScopeSessionSynchronizer
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|bootstrapOntologyNetwork
parameter_list|(
name|OWLOntology
name|configOntology
parameter_list|)
block|{
if|if
condition|(
name|configOntology
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology Network Manager starting with empty scope set."
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|/**              * We create and register the scopes before activating              */
for|for
control|(
name|String
name|scopeIRI
range|:
name|OntologyNetworkConfigurationUtils
operator|.
name|getScopes
argument_list|(
name|configOntology
argument_list|)
control|)
block|{
name|String
index|[]
name|cores
init|=
name|OntologyNetworkConfigurationUtils
operator|.
name|getCoreOntologies
argument_list|(
name|configOntology
argument_list|,
name|scopeIRI
argument_list|)
decl_stmt|;
name|String
index|[]
name|customs
init|=
name|OntologyNetworkConfigurationUtils
operator|.
name|getCustomOntologies
argument_list|(
name|configOntology
argument_list|,
name|scopeIRI
argument_list|)
decl_stmt|;
comment|// "Be a man. Use printf"
name|log
operator|.
name|debug
argument_list|(
literal|"Scope "
operator|+
name|scopeIRI
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|cores
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"\tCore ontology "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|customs
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"\tCustom ontology "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
comment|// Create the scope
name|OntologyScope
name|sc
init|=
literal|null
decl_stmt|;
name|sc
operator|=
name|ontologyScopeFactory
operator|.
name|createOntologyScope
argument_list|(
name|scopeIRI
argument_list|,
operator|new
name|BlankOntologySource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Populate the core space
if|if
condition|(
name|cores
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|OntologySpace
name|corespc
init|=
name|sc
operator|.
name|getCoreSpace
argument_list|()
decl_stmt|;
name|corespc
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cores
operator|.
name|length
condition|;
name|i
operator|++
control|)
try|try
block|{
name|corespc
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|cores
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to import ontology "
operator|+
name|cores
index|[
name|i
index|]
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// ((CustomOntologySpace) sc.getCustomSpace()).attachCoreSpace((CoreOntologySpace)
comment|// corespc, false);
block|}
name|sc
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|scopeRegistry
operator|.
name|registerScope
argument_list|(
name|sc
argument_list|)
expr_stmt|;
comment|// getScopeHelper().createScope(scopeIRI);
comment|// getScopeHelper().addToCoreSpace(scopeIRI, cores);
name|getScopeHelper
argument_list|()
operator|.
name|addToCustomSpace
argument_list|(
name|scopeIRI
argument_list|,
name|customs
argument_list|)
expr_stmt|;
block|}
comment|/**              * Try to get activation policies              */
name|toActivate
operator|=
name|OntologyNetworkConfigurationUtils
operator|.
name|getScopesToActivate
argument_list|(
name|configOntology
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|scopeID
range|:
name|toActivate
control|)
block|{
try|try
block|{
name|scopeID
operator|=
name|scopeID
operator|.
name|trim
argument_list|()
expr_stmt|;
name|scopeRegistry
operator|.
name|setScopeActive
argument_list|(
name|scopeID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Ontology scope "
operator|+
name|scopeID
operator|+
literal|" activated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchScopeException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Tried to activate unavailable scope "
operator|+
name|scopeID
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception caught while activating scope "
operator|+
name|scopeID
operator|+
literal|" . Skipping."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid ONM configuration file found. "
operator|+
literal|"Starting with blank scope set."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Deactivation of the ONManagerImpl resets all its resources.      */
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|ontonetID
operator|=
literal|null
expr_stmt|;
name|ontonetNS
operator|=
literal|null
expr_stmt|;
name|configPath
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ONManagerImpl
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|OntologyIndex
name|getOntologyIndex
parameter_list|()
block|{
return|return
name|oIndex
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOntologyNetworkConfigurationPath
parameter_list|()
block|{
return|return
name|configPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOntologyNetworkNamespace
parameter_list|()
block|{
return|return
name|ontonetNS
return|;
block|}
comment|/**      * Returns the ontology scope factory that was created along with the manager context.      *       * @return the ontology scope factory      */
specifier|public
name|OntologyScopeFactory
name|getOntologyScopeFactory
parameter_list|()
block|{
return|return
name|ontologyScopeFactory
return|;
block|}
comment|/**      * Returns the ontology space factory that was created along with the manager context.      *       * @return the ontology space factory      */
specifier|public
name|OntologySpaceFactory
name|getOntologySpaceFactory
parameter_list|()
block|{
return|return
name|ontologySpaceFactory
return|;
block|}
comment|// public ClerezzaOntologyStorage getOntologyStore() {
comment|// // return storage;
comment|// return null;
comment|// }
specifier|public
name|OWLOntologyManager
name|getOwlCacheManager
parameter_list|()
block|{
comment|// return OWLManager.createOWLOntologyManager();
return|return
name|owlCacheManager
return|;
block|}
specifier|public
name|Helper
name|getScopeHelper
parameter_list|()
block|{
if|if
condition|(
name|helper
operator|==
literal|null
condition|)
block|{
name|helper
operator|=
operator|new
name|Helper
argument_list|()
expr_stmt|;
block|}
return|return
name|helper
return|;
block|}
comment|/**      * Returns the unique ontology scope registry for this context.      *       * @return the ontology scope registry      */
specifier|public
name|ScopeRegistry
name|getScopeRegistry
parameter_list|()
block|{
return|return
name|scopeRegistry
return|;
block|}
specifier|public
name|SessionManager
name|getSessionManager
parameter_list|()
block|{
return|return
name|sessionManager
return|;
block|}
specifier|public
name|String
index|[]
name|getUrisToActivate
parameter_list|()
block|{
return|return
name|toActivate
return|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      *       * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|OfflineConfiguration
name|getOfflineConfiguration
parameter_list|()
block|{
return|return
name|offline
return|;
block|}
block|}
end_class

end_unit

