begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|BlankOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|CoreOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|CustomOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|NoSuchScopeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologySpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|ClerezzaOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|InMemoryOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|OntologyIndexImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|OntologyScopeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|OntologySpaceFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
operator|.
name|ScopeRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|model
operator|.
name|impl
operator|.
name|RegistryLoaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|session
operator|.
name|SessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|session
operator|.
name|ScopeSessionSynchronizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|PersistenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|FileDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|IRIDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|OWLOntologyDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StreamDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The running context of a KReS Ontology Network Manager instance. From this object it is possible to obtain  * factories, indices, registries and what have you.  *   * @author alessandro  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|ONManager
operator|.
name|class
argument_list|)
comment|// @Property(name="service.ranking",intValue=5)
specifier|public
class|class
name|ONManagerImpl
implements|implements
name|ONManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|_ALIAS_DEFAULT
init|=
literal|"/ontology"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_CONFIG_FILE_PATH_DEFAULT
init|=
literal|""
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_KRES_NAMESPACE_DEFAULT
init|=
literal|"http://kres.iksproject.eu/"
decl_stmt|;
comment|// @Property(value = _ALIAS_DEFAULT)
specifier|public
specifier|static
specifier|final
name|String
name|ALIAS
init|=
literal|"org.apache.stanbol.ontologyNetworkManager.alias"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_CONFIG_FILE_PATH_DEFAULT
argument_list|)
specifier|public
specifier|static
name|String
name|CONFIG_FILE_PATH
init|=
literal|"org.apache.stanbol.ontologyNetworkManager.config_ont"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_KRES_NAMESPACE_DEFAULT
argument_list|)
specifier|public
specifier|static
name|String
name|KRES_NAMESPACE
init|=
literal|"kres.namespace"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|String
name|alias
init|=
name|_ALIAS_DEFAULT
decl_stmt|;
specifier|private
name|String
name|configPath
init|=
name|_CONFIG_FILE_PATH_DEFAULT
decl_stmt|;
specifier|private
name|String
name|kresNs
init|=
name|_KRES_NAMESPACE_DEFAULT
decl_stmt|;
comment|// private static ONManagerImpl me = new ONManagerImpl();
comment|//
comment|// public static ONManagerImpl get() {
comment|// return me;
comment|// }
comment|// private ComponentContext ce;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|OntologyIndex
name|oIndex
decl_stmt|;
specifier|private
name|OntologyScopeFactory
name|ontologyScopeFactory
decl_stmt|;
specifier|private
name|OntologySpaceFactory
name|ontologySpaceFactory
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlCacheManager
decl_stmt|;
specifier|private
name|OWLDataFactory
name|owlFactory
decl_stmt|;
specifier|private
name|RegistryLoaderImpl
name|registryLoader
decl_stmt|;
specifier|private
name|ScopeRegistry
name|scopeRegistry
decl_stmt|;
specifier|private
name|SessionManager
name|sessionManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcm
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|WeightedTcProvider
name|wtcp
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|PersistenceStore
name|persistenceStore
decl_stmt|;
comment|//private ClerezzaOntologyStorage storage;
comment|/*      * The identifiers (not yet parsed as IRIs) of the ontology scopes that should be activated.      */
specifier|private
name|String
index|[]
name|toActivate
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ReengineerManagerImpl instances do need to be configured!      * YOU NEED TO USE {@link #ONManagerImpl(TcManager, WeightedTcProvider, Dictionary)} or its overloads, to      * parse the configuration and then initialise the rule store if running outside an OSGI environment.      */
specifier|public
name|ONManagerImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|owlFactory
operator|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|owlCacheManager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
comment|// These depend on one another
name|scopeRegistry
operator|=
operator|new
name|ScopeRegistryImpl
argument_list|()
expr_stmt|;
name|oIndex
operator|=
operator|new
name|OntologyIndexImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Defer the call to the bindResources() method to the activator.
block|}
specifier|protected
name|void
name|bindResources
parameter_list|(
name|TcManager
name|tcm
parameter_list|,
name|WeightedTcProvider
name|wtcp
parameter_list|)
block|{
comment|// At this stage we know if tcm and wtcp have been provided or not.
comment|/*          * With the current implementation of OntologyStorage, we cannot live with either component being          * null. So create the object only if both are not null.          */
comment|/*     	 * NOW WE USE THE STANBOL PERSISTENCE STORE.     	 *      	if (tcm != null&& wtcp != null) storage = new ClerezzaOntologyStorage(tcm, wtcp);         // Manage this in-memory, so it won't have to be null.         else {             storage = new InMemoryOntologyStorage();         }                  */
comment|// Now create everything that depends on the Storage object.
comment|// These may require the OWL cache manager
name|ontologySpaceFactory
operator|=
operator|new
name|OntologySpaceFactoryImpl
argument_list|(
name|scopeRegistry
argument_list|,
name|persistenceStore
argument_list|)
expr_stmt|;
name|ontologyScopeFactory
operator|=
operator|new
name|OntologyScopeFactoryImpl
argument_list|(
name|scopeRegistry
argument_list|,
name|ontologySpaceFactory
argument_list|)
expr_stmt|;
name|ontologyScopeFactory
operator|.
name|addScopeEventListener
argument_list|(
name|oIndex
argument_list|)
expr_stmt|;
comment|// This requires the OWL cache manager
name|registryLoader
operator|=
operator|new
name|RegistryLoaderImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// TODO : assign dynamically in case the FISE persistence store is not
comment|// available.
comment|// storage = new FISEPersistenceStorage();
name|sessionManager
operator|=
operator|new
name|SessionManagerImpl
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iks-project.eu/"
argument_list|)
argument_list|,
name|getScopeRegistry
argument_list|()
argument_list|,
name|persistenceStore
argument_list|)
expr_stmt|;
name|sessionManager
operator|.
name|addSessionListener
argument_list|(
operator|new
name|ScopeSessionSynchronizer
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * To be invoked by non-OSGi environments.      *       * @param tcm      * @param wtcp      * @param configuration      */
specifier|public
name|ONManagerImpl
parameter_list|(
name|TcManager
name|tcm
parameter_list|,
name|WeightedTcProvider
name|wtcp
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
comment|// Assume this.tcm and this.wtcp were not filled in by OSGi-DS.
name|this
operator|.
name|tcm
operator|=
name|tcm
expr_stmt|;
name|this
operator|.
name|wtcp
operator|=
name|wtcp
expr_stmt|;
try|try
block|{
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to access servlet context."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ONManagerImpl
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
comment|//        if (storage == null) storage = new OntologyStorage(this.tcm, this.wtcp);
name|bindResources
argument_list|(
name|this
operator|.
name|tcm
argument_list|,
name|this
operator|.
name|wtcp
argument_list|)
expr_stmt|;
name|String
name|tfile
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|CONFIG_FILE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|tfile
operator|!=
literal|null
condition|)
name|this
operator|.
name|configPath
operator|=
name|tfile
expr_stmt|;
name|String
name|tns
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|KRES_NAMESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tns
operator|!=
literal|null
condition|)
name|this
operator|.
name|kresNs
operator|=
name|tns
expr_stmt|;
comment|// configPath = (String) configuration.get(CONFIG_FILE_PATH);
comment|/*          * If there is no configuration file, just start with an empty scope set          */
if|if
condition|(
name|configPath
operator|!=
literal|null
operator|&&
operator|!
name|configPath
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OWLOntology
name|oConf
init|=
literal|null
decl_stmt|;
name|OWLOntologyManager
name|tempMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntologyDocumentSource
name|oConfSrc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Try to load the configuration ontology from a local bundle relative path"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|configPath
argument_list|)
decl_stmt|;
name|oConfSrc
operator|=
operator|new
name|StreamDocumentSource
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot load from a local bundle relative path"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Try to load the configuration ontology resolving the given IRI"
argument_list|)
expr_stmt|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|configPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iri
operator|.
name|isAbsolute
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"IRI seems to be not absolute! value was: "
operator|+
name|iri
operator|.
name|toQuotedString
argument_list|()
argument_list|)
throw|;
name|oConfSrc
operator|=
operator|new
name|IRIDocumentSource
argument_list|(
name|iri
argument_list|)
expr_stmt|;
if|if
condition|(
name|oConfSrc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot load from the IRI: "
operator|+
name|iri
operator|.
name|toQuotedString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot load from the web"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Try to load the configuration ontology as full local file path"
argument_list|)
expr_stmt|;
name|oConfSrc
operator|=
operator|new
name|FileDocumentSource
argument_list|(
operator|new
name|File
argument_list|(
name|configPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load the configuration ontology from parameter value: "
operator|+
name|configPath
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|oConfSrc
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"KReS :: [NONFATAL] No ONM configuration file found at path "
operator|+
name|configPath
operator|+
literal|". Starting with blank scope set."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|oConf
operator|=
name|tempMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|oConfSrc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot create the configuration ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create and populate the scopes from the config ontology.
name|bootstrapOntologyNetwork
argument_list|(
name|oConf
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"KReS :: ONManager activated."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|bootstrapOntologyNetwork
parameter_list|(
name|OWLOntology
name|configOntology
parameter_list|)
block|{
if|if
condition|(
name|configOntology
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"KReS :: Ontology Network Manager starting with empty scope set."
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|/**              * We create and register the scopes before activating              */
for|for
control|(
name|String
name|scopeIRI
range|:
name|ConfigurationManagement
operator|.
name|getScopes
argument_list|(
name|configOntology
argument_list|)
control|)
block|{
name|String
index|[]
name|cores
init|=
name|ConfigurationManagement
operator|.
name|getCoreOntologies
argument_list|(
name|configOntology
argument_list|,
name|scopeIRI
argument_list|)
decl_stmt|;
name|String
index|[]
name|customs
init|=
name|ConfigurationManagement
operator|.
name|getCustomOntologies
argument_list|(
name|configOntology
argument_list|,
name|scopeIRI
argument_list|)
decl_stmt|;
comment|// "Be a man. Use printf"
name|log
operator|.
name|debug
argument_list|(
literal|"KReS :: Scope "
operator|+
name|scopeIRI
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|cores
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"\tKReS :: Core ontology "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|customs
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"\tKReS :: Custom ontology "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
comment|// Create the scope
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|scopeIRI
argument_list|)
decl_stmt|;
name|OntologyScope
name|sc
init|=
literal|null
decl_stmt|;
name|sc
operator|=
name|ontologyScopeFactory
operator|.
name|createOntologyScope
argument_list|(
name|iri
argument_list|,
operator|new
name|BlankOntologySource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Populate the core space
if|if
condition|(
name|cores
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|OntologySpace
name|corespc
init|=
name|sc
operator|.
name|getCoreSpace
argument_list|()
decl_stmt|;
name|corespc
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cores
operator|.
name|length
condition|;
name|i
operator|++
control|)
try|try
block|{
name|corespc
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|cores
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"KReS :: failed to import ontology "
operator|+
name|cores
index|[
name|i
index|]
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// TODO: this call should be automatic
operator|(
operator|(
name|CustomOntologySpace
operator|)
name|sc
operator|.
name|getCustomSpace
argument_list|()
operator|)
operator|.
name|attachCoreSpace
argument_list|(
operator|(
name|CoreOntologySpace
operator|)
name|corespc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|sc
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|scopeRegistry
operator|.
name|registerScope
argument_list|(
name|sc
argument_list|)
expr_stmt|;
comment|// getScopeHelper().createScope(scopeIRI);
comment|// getScopeHelper().addToCoreSpace(scopeIRI, cores);
name|getScopeHelper
argument_list|()
operator|.
name|addToCustomSpace
argument_list|(
name|scopeIRI
argument_list|,
name|customs
argument_list|)
expr_stmt|;
block|}
comment|/**              * Try to get activation policies              */
name|toActivate
operator|=
name|ConfigurationManagement
operator|.
name|getScopesToActivate
argument_list|(
name|configOntology
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|scopeID
range|:
name|toActivate
control|)
block|{
try|try
block|{
name|IRI
name|scopeId
init|=
name|IRI
operator|.
name|create
argument_list|(
name|scopeID
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|scopeRegistry
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"KReS :: Ontology scope "
operator|+
name|scopeID
operator|+
literal|" activated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchScopeException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Tried to activate unavailable scope "
operator|+
name|scopeID
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception caught while activating scope "
operator|+
name|scopeID
operator|+
literal|" . Skipping."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"[NONFATAL] Invalid ONM configuration file found. "
operator|+
literal|"Starting with blank scope set."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Deactivation of the ONManagerImpl resets all its resources.      */
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ONManagerImpl
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKReSNamespace
parameter_list|()
block|{
return|return
name|kresNs
return|;
block|}
specifier|public
name|OntologyIndex
name|getOntologyIndex
parameter_list|()
block|{
return|return
name|oIndex
return|;
block|}
comment|/**      * Returns the ontology scope factory that was created along with the manager context.      *       * @return the ontology scope factory      */
specifier|public
name|OntologyScopeFactory
name|getOntologyScopeFactory
parameter_list|()
block|{
return|return
name|ontologyScopeFactory
return|;
block|}
comment|/**      * Returns the ontology space factory that was created along with the manager context.      *       * @return the ontology space factory      */
specifier|public
name|OntologySpaceFactory
name|getOntologySpaceFactory
parameter_list|()
block|{
return|return
name|ontologySpaceFactory
return|;
block|}
specifier|public
name|PersistenceStore
name|getOntologyStore
parameter_list|()
block|{
return|return
name|persistenceStore
return|;
block|}
specifier|public
name|OWLOntologyManager
name|getOwlCacheManager
parameter_list|()
block|{
comment|// return OWLManager.createOWLOntologyManager();
return|return
name|owlCacheManager
return|;
block|}
comment|/**      * Returns a factory object that can be used for obtaining OWL API objects.      *       * @return the default OWL data factory      */
specifier|public
name|OWLDataFactory
name|getOwlFactory
parameter_list|()
block|{
return|return
name|owlFactory
return|;
block|}
comment|/**      * Returns the default ontology registry loader.      *       * @return the default ontology registry loader      */
specifier|public
name|RegistryLoaderImpl
name|getRegistryLoader
parameter_list|()
block|{
return|return
name|registryLoader
return|;
block|}
comment|/**      * Returns the unique ontology scope registry for this context.      *       * @return the ontology scope registry      */
specifier|public
name|ScopeRegistry
name|getScopeRegistry
parameter_list|()
block|{
return|return
name|scopeRegistry
return|;
block|}
specifier|public
name|SessionManager
name|getSessionManager
parameter_list|()
block|{
return|return
name|sessionManager
return|;
block|}
specifier|public
name|String
index|[]
name|getUrisToActivate
parameter_list|()
block|{
return|return
name|toActivate
return|;
block|}
specifier|private
name|Helper
name|helper
init|=
literal|null
decl_stmt|;
specifier|public
name|Helper
name|getScopeHelper
parameter_list|()
block|{
if|if
condition|(
name|helper
operator|==
literal|null
condition|)
block|{
name|helper
operator|=
operator|new
name|Helper
argument_list|()
expr_stmt|;
block|}
return|return
name|helper
return|;
block|}
specifier|public
class|class
name|Helper
block|{
specifier|private
name|Helper
parameter_list|()
block|{}
comment|/**          * Create an empty scope. The scope is created, registered and activated          *           * @param scopeID          * @return          * @throws DuplicateIDException          */
specifier|public
specifier|synchronized
name|OntologyScope
name|createScope
parameter_list|(
name|String
name|scopeID
parameter_list|)
throws|throws
name|DuplicateIDException
block|{
name|OntologyInputSource
name|oisbase
init|=
operator|new
name|BlankOntologySource
argument_list|()
decl_stmt|;
name|IRI
name|scopeIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|scopeID
argument_list|)
decl_stmt|;
comment|/*              * The scope is created by the ScopeFactory or loaded to the scope registry of KReS              */
name|OntologyScope
name|scope
decl_stmt|;
name|scope
operator|=
name|ontologyScopeFactory
operator|.
name|createOntologyScope
argument_list|(
name|scopeIRI
argument_list|,
name|oisbase
argument_list|)
expr_stmt|;
name|scope
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|scopeRegistry
operator|.
name|registerScope
argument_list|(
name|scope
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Created scope "
operator|+
name|scopeIRI
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|scope
return|;
block|}
comment|/**          * Adds the ontology from the given iri to the core space of the given scope          *           * @param scopeID          * @param locationIri          */
specifier|public
specifier|synchronized
name|void
name|addToCoreSpace
parameter_list|(
name|String
name|scopeID
parameter_list|,
name|String
index|[]
name|locationIris
parameter_list|)
block|{
name|OntologyScope
name|scope
init|=
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|scopeID
argument_list|)
argument_list|)
decl_stmt|;
name|OntologySpace
name|corespc
init|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
decl_stmt|;
name|scope
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|corespc
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|locationIri
range|:
name|locationIris
control|)
block|{
try|try
block|{
name|corespc
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|locationIri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// corespc.addOntology(
comment|// createOntologyInputSource(locationIri));
name|log
operator|.
name|debug
argument_list|(
literal|"Added "
operator|+
name|locationIri
operator|+
literal|" to scope "
operator|+
name|scopeID
operator|+
literal|" in the core space."
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// OntologySpace cs = scope.getCustomSpace();
comment|// if (cs instanceof CustomOntologySpace) {
comment|// (
comment|// (CustomOntologySpace)cs).attachCoreSpace((CoreOntologySpace)corespc,
comment|// false);
comment|// }
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologySpaceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Core space for scope "
operator|+
name|scopeID
operator|+
literal|" denied addition of ontology "
operator|+
name|locationIri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Creation of ontology from source "
operator|+
name|locationIri
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|corespc
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/**          * Adds the ontology fromt he given iri to the custom space of the given scope          *           * @param scopeID          * @param locationIri          */
specifier|public
specifier|synchronized
name|void
name|addToCustomSpace
parameter_list|(
name|String
name|scopeID
parameter_list|,
name|String
index|[]
name|locationIris
parameter_list|)
block|{
name|OntologyScope
name|scope
init|=
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|scopeID
argument_list|)
argument_list|)
decl_stmt|;
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|locationIri
range|:
name|locationIris
control|)
block|{
try|try
block|{
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
name|createOntologyInputSource
argument_list|(
name|locationIri
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added "
operator|+
name|locationIri
operator|+
literal|" to scope "
operator|+
name|scopeID
operator|+
literal|" in the custom space."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologySpaceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"An error occurred while trying to add the ontology from location: "
operator|+
name|locationIri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|private
name|OntologyInputSource
name|createOntologyInputSource
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
comment|/*              * The scope factory needs an OntologyInputSource as input for the core ontology space. We want to              * use the dbpedia ontology as core ontology of our scope.              */
name|OntologyInputSource
name|ois
init|=
operator|new
name|OntologyInputSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasRootOntology
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPhysicalIRI
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|getRootOntology
parameter_list|()
block|{
try|try
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
return|return
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load the ontology "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load the ontology "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/** If some errors occur **/
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getPhysicalIRI
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
return|return
name|ois
return|;
block|}
block|}
block|}
end_class

end_unit

