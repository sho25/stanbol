begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|ImportManagementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  * A system responsible for maintaining stored ontologies.<br>  *<br>  * TODO see if full CRUD operation support is necessary.  *   * @author alexdma  *   * @param<S>  *            the storage system actually used by this provider.  */
end_comment

begin_interface
specifier|public
interface|interface
name|OntologyProvider
parameter_list|<
name|S
parameter_list|>
block|{
comment|/**      * The key used to configure the prefix to be used for addressing ontologies stored by this provider.      */
specifier|public
name|String
name|GRAPH_PREFIX
init|=
literal|"org.apache.stanbol.ontologymanager.ontonet.graphPrefix"
decl_stmt|;
comment|/**      * The key used to configure the import management policy.      */
specifier|public
name|String
name|IMPORT_POLICY
init|=
literal|"org.apache.stanbol.ontologymanager.ontonet.importPolicy"
decl_stmt|;
comment|/**      * The key used to configure the identifier of the meta-level graph      */
specifier|public
name|String
name|META_GRAPH_ID
init|=
literal|"org.apache.stanbol.ontologymanager.ontonet.metaGraphId"
decl_stmt|;
comment|/**      * The key used to configure the default import resolution policy for this provider.      */
specifier|public
name|String
name|RESOLVE_IMPORTS
init|=
literal|"org.apache.stanbol.ontologymanager.ontonet.resolveImports"
decl_stmt|;
comment|/**      * Gets the policy adopted by this provider whenever an import statement is found in an ontology<i>that      * has already been loaded</i> (e.g. when exporting it). It does<b>not</b> influence how the system      * should<i>resolve</i> imports of newly found ontologies.      *       * @return the import management policy.      */
name|ImportManagementPolicy
name|getImportManagementPolicy
parameter_list|()
function_decl|;
comment|/**      * Gets a string that can be used to directly access the ontology whose logical identifier is      *<tt>ontologyIRI</tt>.      *       * @param locator      *            the logical identifier of the ontology.      * @return the key to access the ontology from the store.      */
name|String
name|getKey
parameter_list|(
name|IRI
name|locator
parameter_list|)
function_decl|;
comment|/**      * Gets the key of the ontology with the supplied ontology ID. Note that both ontoloeyIRI and versionIRI      * (if present) must match, otherwise it will return null. To get the keys for a givemn ontologyIRI, no      * matte what its version is, use {@link #getOntologyVersionKeys(IRI)}.      *       * @param ontologyId      * @return      */
name|String
name|getKey
parameter_list|(
name|OWLOntologyID
name|ontologyId
parameter_list|)
function_decl|;
comment|/**      * Gets the set of all the strings that can be used to access the ontologies stored by this provider.      *       * @return the ontology key set.      */
name|Set
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
function_decl|;
comment|/**      * Returns the graph that stores all the information on stored ontologies. Whether the returned triple      * collection is a {@link Graph} or a {@link MGraph} depends on the provider's policy on allowing external      * modifications to the meta-level graph or not.      *       * @param returnType      * @return      */
parameter_list|<
name|O
extends|extends
name|TripleCollection
parameter_list|>
name|O
name|getMetaGraph
parameter_list|(
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
function_decl|;
comment|/**      * Will return the keys of all the ontologies whose ontologyIRI is the one provided. These include any      * ontologies with that ontologyIRI and a versionIRI, and one ontology with no version IRI (if it exists,      * it must be unique).      *       * @param ontologyIRI      * @return      */
name|Set
argument_list|<
name|String
argument_list|>
name|getOntologyVersionKeys
parameter_list|(
name|IRI
name|ontologyIRI
parameter_list|)
function_decl|;
comment|/**      * Returns the storage system used by this ontology provider (e.g. a {@link TcProvider} or an      * {@link OWLOntologyManager}).      *       * @return the ontology store.      */
name|S
name|getStore
parameter_list|()
function_decl|;
comment|/**      * Same as {@link OntologyProvider#getStoredOntology(String, Class)}, but instead of the internal key it      * uses an IRI that<i>publicly</i> identifies or references an ontology. This can be, ordered by      * preference most relevant first:      *<ol>      *<li>The version IRI      *<li>The ontology IRI      *<li>The physical IRI, if different from the above      *</ol>      *       * @param reference      *            the IRI that references the ontology.      * @param returnType      *            the desired type that the method should return, if supported, otherwise an      *            {@link UnsupportedOperationException} is thrown. Can be null, in which case a default return      *            type is chosen.      * @return the stored ontology in the desired format, or null if no such ontology is managed by the      *         provider.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
function_decl|;
comment|/**      * Same as {@link OntologyProvider#getStoredOntology(String, Class, boolean)}, but instead of the internal      * key it uses an IRI that<i>publicly</i> identifies or references an ontology. This can be, ordered by      * preference most relevant first:      *       * @param reference      *            the IRI that references the ontology.      * @param returnType      *            The expected type for the returned ontology object. If null, the provider will arbitrarily      *            select a supported return type. If the supplied type is not supported (i.e. not assignable      *            to any type contained in the result of {@link #getSupportedReturnTypes()}) an      *            {@link UnsupportedOperationException} should be thrown.      * @param forceMerge      *            if true, the ontology will be merged with all its imports, thus overriding the import      *            management policy set for this provider.      * @return the stored ontology in the desired format, or null if no such ontology is managed by the      *         provider.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|IRI
name|reference
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|merge
parameter_list|)
function_decl|;
comment|/**      * Returns a stored ontology that is internally identified by the provided key.      *       * @param key      *            the key used to identify the ontology in this provider. They can or cannot coincide with the      *            logical and/or physical IRI of the ontology.      * @param returnType      *            The expected type for the returned ontology object. If null, the provider will arbitrarily      *            select a supported return type. If the supplied type is not supported (i.e. not assignable      *            to any type contained in the result of {@link #getSupportedReturnTypes()}) an      *            {@link UnsupportedOperationException} should be thrown.      * @return the stored ontology in the desired format, or null if no such ontology is managed by the      *         provider.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|)
function_decl|;
comment|/**      * Returns a stored ontology that is internally identified by the provided key.      *       * @param key      *            the key used to identify the ontology in this provider. They can or cannot coincide with the      *            logical and/or physical IRI of the ontology.      * @param returnType      *            The expected type for the returned ontology object. If null, the provider will arbitrarily      *            select a supported return type. If the supplied type is not supported (i.e. not assignable      *            to any type contained in the result of {@link #getSupportedReturnTypes()}) an      *            {@link UnsupportedOperationException} should be thrown.      * @param forceMerge      *            if true, the ontology will be merged with all its imports, thus overriding the import      *            management policy set for this provider.      * @return the stored ontology in the desired format, or null if no such ontology is managed by the      *         provider.      */
parameter_list|<
name|O
parameter_list|>
name|O
name|getStoredOntology
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|O
argument_list|>
name|returnType
parameter_list|,
name|boolean
name|forceMerge
parameter_list|)
function_decl|;
comment|/**      * Returns an array containing the most specific types for ontology objects that this provider can manage      * and return on a call to {@link #getStoredOntology(String, Class)}.      *       * @return the supported ontology return types.      */
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getSupportedReturnTypes
parameter_list|()
function_decl|;
comment|/**      * A convenience method for checking the availability of an ontology given its (physical or logical) IRI.      * It is typically more efficient than calling {@link #getStoredOntology(IRI, Class)} and null-checking      * the result.      *       * @param ontologyIri      * @return      */
name|boolean
name|hasOntology
parameter_list|(
name|IRI
name|ontologyIri
parameter_list|)
function_decl|;
comment|/**      * Checks if an ontology with the specified OWL ontology ID is in the ontology provider's store.<br>      *<br>      * Implementations are typically faster than calling {@link #getStoredOntology(IRI, Class)} and checking      * if the returned value is not null.      *       * @param id      *            the ontology id. If there is both an ontology IRI and a version IRI, both must match the      *            ontology provider's records in order to return true. Otherwise, it will return true iff      *<i>any</i> match with the ontology IIR is found, no matter its version IRI.      * @return true iff an ontology with the supplied id is in the provider's store.      */
name|boolean
name|hasOntology
parameter_list|(
name|OWLOntologyID
name|id
parameter_list|)
function_decl|;
comment|/**      * Checks if an ontology with the specified storage reference is in the ontology provider's store.<br>      *<br>      * Implementations are typically faster than calling {@link #getStoredOntology(String, Class)} and      * checking if the returned value is not null.      *       * @param key      *            the ontology storage key.      * @return true iff an ontology with the supplied key is in the provider's store.      */
name|boolean
name|hasOntology
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
comment|/**      * Retrieves an ontology by reading its content from a data stream and stores it using the storage system      * attached to this provider. A key that can be used to identify the ontology in this provider is returned      * if successful.      *       * @param data      *            the ontology content.      * @param formatIdentifier      *            the MIME type of the expected serialization format of this ontology. If null, all supported      *            formats will be tried until all parsers fail or one succeeds.      * @param preferredKey      *            a string that should preferrably identify the ontology internally within the provider. It      *            will be ignored if null or empty. It is not guaranteed that the supplied key can be used,      *            e.g. if there is already a duplicate of the key and the policy does not allow duplicates. In      *            this case, a different key will be set and returned by this method.      * @param force      *            if true, all mappings provided by the offline configuration will be ignored (both for the      *            root ontology and its recursive imports) and the provider will forcibly try to resolve the      *            location IRI. If some remote import is found, the import policy is aggressive and Stanbol is      *            set on offline mode, this method will fail.      * @return a key that can be used to retrieve the stored ontology afterwards, or null if loading/storage      *         failed. If it was possible to set it as such, it will be the same as<tt>preferredKey</tt>.      * @throws IOException      *             if all attempts to load the ontology failed.      * @throws UnsupportedFormatException      *             if no parsers are able to parse the supplied format (or the actual file format).      */
name|String
name|loadInStore
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedFormatException
function_decl|;
comment|/**      * Retrieves an ontology physically located at<code>location</code> (unless mapped otherwise by the      * offline configuration) and stores it using the storage system attached to this provider. A key that can      * be used to identify the ontology in this provider is returned if successful.      *       * @param location      *            the physical IRI where the ontology is located.      * @param formatIdentifier      *            the MIME type of the expected serialization format of this ontology. If null, all supported      *            formats will be tried until all parsers fail or one succeeds.      * @param preferredKey      *            a string that should preferrably identify the ontology internally within the provider. It      *            will be ignored if null or empty. It is not guaranteed that the supplied key can be used,      *            e.g. if there is already a duplicate of the key and the policy does not allow duplicates. In      *            this case, a different key will be set and returned by this method.      * @param force      *            if true, all mappings provided by the offline configuration will be ignored (both for the      *            root ontology and its recursive imports) and the provider will forcibly try to resolve the      *            location IRI. If the IRI is not local and Stanbol is set on offline mode, this method will      *            fail.      * @return a key that can be used to retrieve the stored ontology afterwards, or null if loading/storage      *         failed.      * @throws IOException      *             if all attempts to load the ontology failed.      * @throws UnsupportedFormatException      *             if no parsers are able to parse the supplied format (or the actual file format).      */
name|String
name|loadInStore
parameter_list|(
name|IRI
name|location
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Stores an ontology that has already been loaded into an object. If the object is of a non-native yet      * supported type, the ontology provider will try to perform a conversion prior to storing it.      *       * @param ontology      *            the ontology to be stored.      * @param preferredKey      *            a string that should preferrably identify the ontology internally within the provider. It      *            will be ignored if null or empty. It is not guaranteed that the supplied key can be used,      *            e.g. if there is already a duplicate of the key and the policy does not allow duplicates. In      *            this case, a different key will be set and returned by this method.      * @param force      *            if true, all mappings provided by the offline configuration will be ignored (both for the      *            root ontology and its recursive imports) and the provider will forcibly try to resolve the      *            location IRI. If some remote import is found, the import policy is aggressive and Stanbol is      *            set on offline mode, this method will fail.      * @return      */
name|String
name|loadInStore
parameter_list|(
name|Object
name|ontology
parameter_list|,
name|boolean
name|force
parameter_list|)
function_decl|;
comment|/**      * Sets the policy adopted by this provider whenever an import statement is found in an ontology<i>that      * has already been loaded</i> (e.g. when exporting it). It does<b>not</b> influence how the system      * should<i>resolve</i> imports of newly found ontologies.      *       * @param policy      *            the import management policy.      */
name|void
name|setImportManagementPolicy
parameter_list|(
name|ImportManagementPolicy
name|policy
parameter_list|)
function_decl|;
comment|/**      * Will not be checked by dereferencing      *       * If the key does not exist in the provider, or if locator is already bound to a different key, an      * {@link IllegalArgumentException} will be thrown.      *       *       * @param locator      * @param key      */
name|void
name|setLocatorMapping
parameter_list|(
name|IRI
name|locator
parameter_list|,
name|String
name|key
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

