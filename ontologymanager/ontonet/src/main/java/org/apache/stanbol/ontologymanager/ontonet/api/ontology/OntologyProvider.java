begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_comment
comment|/**  * A system responsible for maintaining registry ontologies. Depending on the implementation, it can be  * volatile or persistent, centralised or distributed.  *   * @author alexdma  *   * @param<S>  *            the storage system actually used by this provider.  */
end_comment

begin_interface
specifier|public
interface|interface
name|OntologyProvider
parameter_list|<
name|S
parameter_list|>
block|{
comment|/**      * The key used to configure the prefix to be used for addressing ontologies stored by this provider.      */
specifier|public
name|String
name|GRAPH_PREFIX
init|=
literal|"org.apache.stanbol.ontologymanager.ontonet.graphPrefix"
decl_stmt|;
comment|/**      * The key used to configure the default import resolution policy for this provider.      */
specifier|public
name|String
name|RESOLVE_IMPORTS
init|=
literal|"org.apache.stanbol.ontologymanager.ontonet.resolveImports"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|getOntologyReferences
parameter_list|()
function_decl|;
comment|/**      * Returns the storage system used by this ontology provider.      *       * @return the ontology store.      */
name|S
name|getStore
parameter_list|()
function_decl|;
comment|/**      *       * @param identifier      * @param returnType      *            The expected type for the returned ontology object. If null, the provider will arbitrarily      *            select a supported return type. If the supplied type is not supported (i.e. not assignable      *            to any type contained in the result of {@link #getSupportedReturnTypes()}) an      *            {@link UnsupportedOperationException} will be thrown.      * @return      */
name|Object
name|getStoredOntology
parameter_list|(
name|String
name|identifier
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
parameter_list|)
function_decl|;
comment|/**      * Returns an array containing the most specific types for ontology objects that this provider can manage      * and return on a call to {@link #getStoredOntology(String, Class)}.      *       * @return the supported ontology return types.      */
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getSupportedReturnTypes
parameter_list|()
function_decl|;
name|String
name|loadInStore
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedFormatException
function_decl|;
name|String
name|loadInStore
parameter_list|(
name|IRI
name|location
parameter_list|,
name|String
name|formatIdentifier
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedFormatException
function_decl|;
block|}
end_interface

end_unit

