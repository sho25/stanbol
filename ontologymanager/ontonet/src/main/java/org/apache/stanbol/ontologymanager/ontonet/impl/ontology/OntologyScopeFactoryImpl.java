begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ontology
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class that instantiates default implementations of ontology scope.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyScopeFactoryImpl
implements|implements
name|OntologyScopeFactory
block|{
specifier|private
name|Set
argument_list|<
name|ScopeEventListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|ScopeEventListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|IRI
name|namespace
decl_stmt|;
specifier|protected
name|ScopeRegistry
name|registry
decl_stmt|;
specifier|protected
name|OntologySpaceFactory
name|spaceFactory
decl_stmt|;
specifier|public
name|OntologyScopeFactoryImpl
parameter_list|(
name|ScopeRegistry
name|registry
parameter_list|,
name|IRI
name|namespace
parameter_list|,
name|OntologySpaceFactory
name|spaceFactory
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|spaceFactory
operator|=
name|spaceFactory
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
if|if
condition|(
operator|!
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|spaceFactory
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Scope factory namespace {} differs from space factory namespace {} . This is not illegal but strongly discouraged."
argument_list|,
name|getNamespace
argument_list|()
argument_list|,
name|spaceFactory
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addScopeEventListener
parameter_list|(
name|ScopeEventListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearScopeEventListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// @Override
comment|// public OntologyScope createOntologyScope(String scopeID, OntologyInputSource coreSource) throws
comment|// DuplicateIDException {
comment|// return createOntologyScope(scopeID, coreSource, null);
comment|// }
annotation|@
name|Override
specifier|public
name|OntologyScope
name|createOntologyScope
parameter_list|(
name|String
name|scopeID
parameter_list|,
name|OntologyInputSource
modifier|...
name|coreSources
parameter_list|)
throws|throws
name|DuplicateIDException
block|{
if|if
condition|(
name|registry
operator|.
name|containsScope
argument_list|(
name|scopeID
argument_list|)
condition|)
throw|throw
operator|new
name|DuplicateIDException
argument_list|(
name|scopeID
argument_list|,
literal|"Scope registry already contains ontology scope with ID "
operator|+
name|scopeID
argument_list|)
throw|;
name|OntologyScope
name|scope
init|=
operator|new
name|OntologyScopeImpl
argument_list|(
name|scopeID
argument_list|,
name|getNamespace
argument_list|()
argument_list|,
name|spaceFactory
argument_list|,
name|coreSources
argument_list|)
decl_stmt|;
comment|// scope.addOntologyScopeListener(ONManager.get().getOntologyIndex());
comment|// TODO : manage scopes with null core ontologies
name|fireScopeCreated
argument_list|(
name|scope
argument_list|)
expr_stmt|;
return|return
name|scope
return|;
block|}
specifier|protected
name|void
name|fireScopeCreated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{
for|for
control|(
name|ScopeEventListener
name|l
range|:
name|listeners
control|)
name|l
operator|.
name|scopeCreated
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ScopeEventListener
argument_list|>
name|getScopeEventListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeScopeEventListener
parameter_list|(
name|ScopeEventListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
name|IRI
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
block|}
end_class

end_unit

