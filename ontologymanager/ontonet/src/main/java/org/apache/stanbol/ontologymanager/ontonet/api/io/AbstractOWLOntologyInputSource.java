begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  * Abstract OWL API implementation of {@link OntologyInputSource} with the basic methods for obtaining root  * ontologies and their physical IRIs where applicable.<br/>  *</br> Implementations should either invoke abstract methods {@link #bindPhysicalIri(IRI)} and  * {@link #bindRootOntology(OWLOntology)} in their constructors, or override them.  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOWLOntologyInputSource
extends|extends
name|AbstractGenericInputSource
argument_list|<
name|OWLOntology
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getImports
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|OWLOntologyManager
name|mgr
init|=
name|rootOntology
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
return|return
operator|(
name|recursive
condition|?
name|mgr
operator|.
name|getImportsClosure
argument_list|(
name|rootOntology
argument_list|)
else|:
name|mgr
operator|.
name|getDirectImports
argument_list|(
name|rootOntology
argument_list|)
operator|)
return|;
comment|// return rootOntology.getOWLOntologyManager().getImportsClosure(rootOntology);
block|}
block|}
end_class

end_unit

