begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|ParentPathInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ONManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_class
specifier|public
class|class
name|TestOntologyInputSources
block|{
specifier|private
specifier|static
name|ONManager
name|onm
decl_stmt|;
specifier|private
specifier|static
name|OWLDataFactory
name|df
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|onm
operator|=
operator|new
name|ONManagerImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|df
operator|=
name|onm
operator|.
name|getOwlFactory
argument_list|()
expr_stmt|;
block|}
comment|/**      * Loads a modified FOAF by resolving a URI from a resource directory.      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testOfflineSingleton
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/ontologies/index.rdf"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|OntologyInputSource
name|coreSource
init|=
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|df
argument_list|)
expr_stmt|;
comment|/*          * To check it fetched the correct ontology, we look for a declaration of the bogus class foaf:Perzon          * (added in the local FOAF)          */
name|OWLClass
name|cPerzon
init|=
name|df
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://xmlns.com/foaf/0.1/Perzon"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|coreSource
operator|.
name|getRootOntology
argument_list|()
operator|.
name|getClassesInSignature
argument_list|()
operator|.
name|contains
argument_list|(
name|cPerzon
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Uses a {@link ParentPathInputSource} to load an ontology importing a modified FOAF, both located in the      * same resource directory.      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testOfflineImport
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/ontologies/maincharacters.owl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|OntologyInputSource
name|coreSource
init|=
operator|new
name|ParentPathInputSource
argument_list|(
name|f
argument_list|)
decl_stmt|;
comment|// Check that all the imports closure is made of local files
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|closure
init|=
name|coreSource
operator|.
name|getClosure
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntology
name|o
range|:
name|closure
control|)
name|assertEquals
argument_list|(
literal|"file"
argument_list|,
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|o
argument_list|)
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|coreSource
operator|.
name|getRootOntology
argument_list|()
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|Constants
operator|.
name|base
argument_list|)
argument_list|)
expr_stmt|;
comment|// Linus is stated to be a foaf:Person
name|OWLNamedIndividual
name|iLinus
init|=
name|df
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|Constants
operator|.
name|base
operator|+
literal|"#Linus"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Lucy is stated to be a foaf:Perzon
name|OWLNamedIndividual
name|iLucy
init|=
name|df
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|Constants
operator|.
name|base
operator|+
literal|"#Lucy"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLClass
name|cPerzon
init|=
name|df
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://xmlns.com/foaf/0.1/Perzon"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|instances
init|=
name|cPerzon
operator|.
name|getIndividuals
argument_list|(
name|coreSource
operator|.
name|getRootOntology
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|instances
operator|.
name|contains
argument_list|(
name|iLinus
argument_list|)
operator|&&
name|instances
operator|.
name|contains
argument_list|(
name|iLucy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

