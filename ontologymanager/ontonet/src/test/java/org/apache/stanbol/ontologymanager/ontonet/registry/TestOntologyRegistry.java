begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|registry
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|Locations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManagerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|CoreOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SessionOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologySpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|RegistryLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|RegistryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|io
operator|.
name|OntologyRegistryIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ONManagerConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ONManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|registry
operator|.
name|RegistryManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|AutoIRIMapper
import|;
end_import

begin_class
specifier|public
class|class
name|TestOntologyRegistry
block|{
specifier|private
specifier|static
name|OWLOntologyManager
name|ontologyManager
decl_stmt|;
specifier|private
specifier|static
name|RegistryLoader
name|loader
decl_stmt|;
specifier|private
specifier|static
name|OntologyRegistryIRISource
name|ontologySource
decl_stmt|;
specifier|private
specifier|static
name|ONManagerConfiguration
name|configuration
decl_stmt|;
specifier|private
specifier|static
name|ONManager
name|onm
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
specifier|final
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|emptyConfig
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|configuration
operator|=
operator|new
name|ONManagerConfigurationImpl
argument_list|(
name|emptyConfig
argument_list|)
expr_stmt|;
name|RegistryManager
name|regman
init|=
operator|new
name|RegistryManagerImpl
argument_list|(
name|emptyConfig
argument_list|)
decl_stmt|;
comment|// An ONManagerImpl with no store and default settings
name|onm
operator|=
operator|new
name|ONManagerImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|configuration
argument_list|,
name|regman
argument_list|,
name|emptyConfig
argument_list|)
expr_stmt|;
name|ontologyManager
operator|=
name|onm
operator|.
name|getOwlCacheManager
argument_list|()
expr_stmt|;
name|loader
operator|=
name|onm
operator|.
name|getRegistryLoader
argument_list|()
expr_stmt|;
block|}
comment|// private static boolean mapperIsSet = false;
comment|//
comment|// public void setupOfflineMapper() {
comment|// if (mapperIsSet) {} else {
comment|// ontologySource = new OntologyRegistryIRISource(testRegistryIri, ontologyManager, loader);
comment|// mapperIsSet = true;
comment|// }
comment|// }
annotation|@
name|Test
specifier|public
name|void
name|testPopulateRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|OWLOntologyManager
name|virginOntologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/ontologies/registry"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|virginOntologyManager
operator|.
name|addIRIMapper
argument_list|(
operator|new
name|AutoIRIMapper
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Population is lazy; no need to add other mappers.
name|OWLOntology
name|oReg
init|=
name|virginOntologyManager
operator|.
name|loadOntology
argument_list|(
name|Locations
operator|.
name|_REGISTRY_TEST
argument_list|)
decl_stmt|;
name|Registry
name|r
init|=
name|onm
operator|.
name|getRegistryManager
argument_list|()
operator|.
name|populateRegistry
argument_list|(
name|oReg
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|r
operator|.
name|getChildren
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify that, when loading multiple registries that add library information to each other, the overall      * model reflects the union of these registries.      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testRegistryUnion
parameter_list|()
throws|throws
name|Exception
block|{
name|OWLOntologyManager
name|virginOntologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/ontologies/registry"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|virginOntologyManager
operator|.
name|addIRIMapper
argument_list|(
operator|new
name|AutoIRIMapper
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Population is lazy; no need to add other mappers.
name|OWLOntology
name|oReg
init|=
name|virginOntologyManager
operator|.
name|loadOntology
argument_list|(
name|Locations
operator|.
name|_REGISTRY_TEST
argument_list|)
decl_stmt|;
name|Registry
name|r1
init|=
name|onm
operator|.
name|getRegistryManager
argument_list|()
operator|.
name|populateRegistry
argument_list|(
name|oReg
argument_list|)
decl_stmt|;
comment|// Now the second registry.
name|oReg
operator|=
name|virginOntologyManager
operator|.
name|loadOntology
argument_list|(
name|Locations
operator|.
name|_REGISTRY_TEST_ADDITIONS
argument_list|)
expr_stmt|;
name|Registry
name|r2
init|=
name|onm
operator|.
name|getRegistryManager
argument_list|()
operator|.
name|populateRegistry
argument_list|(
name|oReg
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|r1
operator|.
name|getChildren
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//        for (RegistryItem lib : r1.getChildren()) {
comment|//            System.out.println("\t"+lib);
comment|//            for (RegistryItem ont : lib.getChildren()) {
comment|//                System.out.println("\t\t"+ont);
comment|//            }
comment|//        }
comment|//        for (RegistryItem lib : r2.getChildren()) {
comment|//            System.out.println("\t"+lib);
comment|//            for (RegistryItem ont : lib.getChildren()) {
comment|//                System.out.println("\t\t"+ont);
comment|//            }
comment|//        }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRegistryToSessionSpace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setupOfflineMapper();
name|IRI
name|scopeIri
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://fise.iks-project.eu/scopone"
argument_list|)
decl_stmt|;
name|SessionOntologySpace
name|space
init|=
literal|null
decl_stmt|;
name|space
operator|=
name|onm
operator|.
name|getOntologySpaceFactory
argument_list|()
operator|.
name|createSessionOntologySpace
argument_list|(
name|scopeIri
argument_list|)
expr_stmt|;
name|space
operator|.
name|setUp
argument_list|()
expr_stmt|;
try|try
block|{
comment|// space.addOntology(new
comment|// OntologyRegistryIRISource(testRegistryIri,onm.getOwlCacheManager(),onm.getRegistryLoader()));
name|space
operator|.
name|addOntology
argument_list|(
name|ontologySource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologySpaceException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Adding libraries to session space failed. "
operator|+
literal|"This should not happen for active session spaces."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|space
operator|.
name|getTopOntology
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|space
operator|.
name|getOntologies
argument_list|()
operator|.
name|contains
argument_list|(
name|space
operator|.
name|getTopOntology
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScopeCreationWithRegistry
parameter_list|()
block|{
comment|// setupOfflineMapper();
name|IRI
name|scopeIri
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://fise.iks-project.eu/scopone"
argument_list|)
decl_stmt|;
name|OntologyScope
name|scope
init|=
literal|null
decl_stmt|;
comment|// The factory call also invokes loadRegistriesEager() and
comment|// gatherOntologies() so no need to test them individually.
try|try
block|{
name|scope
operator|=
name|onm
operator|.
name|getOntologyScopeFactory
argument_list|()
operator|.
name|createOntologyScope
argument_list|(
name|scopeIri
argument_list|,
name|ontologySource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateIDException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"DuplicateID exception caught when creating test scope."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|scope
operator|!=
literal|null
operator|&&
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|getTopOntology
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpaceCreationWithRegistry
parameter_list|()
block|{
comment|// setupOfflineMapper();
name|IRI
name|scopeIri
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://fise.iks-project.eu/scopone"
argument_list|)
decl_stmt|;
name|CoreOntologySpace
name|space
init|=
literal|null
decl_stmt|;
comment|// The factory call also invokes loadRegistriesEager() and
comment|// gatherOntologies() so no need to test them individually.
name|space
operator|=
name|onm
operator|.
name|getOntologySpaceFactory
argument_list|()
operator|.
name|createCoreOntologySpace
argument_list|(
name|scopeIri
argument_list|,
name|ontologySource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|space
operator|!=
literal|null
operator|&&
name|space
operator|.
name|getTopOntology
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

