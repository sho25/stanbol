begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|onManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|parser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|resetManagers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|sessionManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|IS_MANAGED_BY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|MANAGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|Vocabulary
operator|.
name|_NS_STANBOL_INTERNAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|simple
operator|.
name|storage
operator|.
name|SimpleTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|GraphContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ONManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|OfflineConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This suite is for testing that all the meta-level information stored by OntoNet can be retrieved and  * rebuilt if OntoNet or Stanbol goes down but the Clerezza store is not cleared.  *   * TODO add tests for preserving added ontologies  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|TestOntologyNetworkPersistence
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
name|ontologyProvider
decl_stmt|;
specifier|private
name|ONManager
name|onm
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|updatesGraphOnSpaceModification
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensure the metadata graph is there.
name|TripleCollection
name|meta
init|=
name|ontologyProvider
operator|.
name|getMetaGraph
argument_list|(
name|TripleCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|String
name|scopeId
init|=
literal|"updateTest"
decl_stmt|;
name|OntologyScope
name|scope
init|=
name|onm
operator|.
name|createOntologyScope
argument_list|(
name|scopeId
argument_list|,
operator|new
name|GraphContentInputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/test1.owl"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|UriRef
name|collector
init|=
operator|new
name|UriRef
argument_list|(
name|_NS_STANBOL_INTERNAL
operator|+
name|OntologySpace
operator|.
name|shortName
operator|+
literal|"/"
operator|+
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|test1id
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontologies/test1.owl"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Has no versionIRI
comment|// Be strict: the whole property pair must be there.
name|UriRef
name|predicate
init|=
name|MANAGES
decl_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|contains
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|collector
argument_list|,
name|predicate
argument_list|,
name|test1id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|predicate
operator|=
name|IS_MANAGED_BY
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|contains
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|test1id
argument_list|,
name|predicate
argument_list|,
name|collector
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scope
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|// To modify the core space.
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
operator|new
name|GraphContentInputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/minorcharacters.owl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UriRef
name|minorId
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontologies/pcomics/minorcharacters.owl"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|predicate
operator|=
name|MANAGES
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|contains
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|collector
argument_list|,
name|predicate
argument_list|,
name|minorId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|predicate
operator|=
name|IS_MANAGED_BY
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|contains
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|minorId
argument_list|,
name|predicate
argument_list|,
name|collector
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
operator|new
name|GraphContentInputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/test1.owl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
operator|new
name|GraphContentInputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/minorcharacters.owl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|preservesManagedOntologies
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"preserve"
decl_stmt|;
name|OntologyScope
name|scope
init|=
name|onManager
operator|.
name|createOntologyScope
argument_list|(
name|id
argument_list|,
operator|new
name|GraphContentInputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/mockfoaf.rdf"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
operator|new
name|GraphContentInputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/nonexistentcharacters.owl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate Stanbol going down.
name|log
operator|.
name|info
argument_list|(
literal|"Stanbol going down..."
argument_list|)
expr_stmt|;
name|resetOntologyProvider
argument_list|()
expr_stmt|;
comment|// but keep the TcProvider
name|resetManagers
argument_list|()
expr_stmt|;
name|OntologyScope
name|sc
init|=
name|onManager
operator|.
name|getScope
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sc
argument_list|)
expr_stmt|;
comment|// assertEquals(scope, sc); XXX should scopes be equal on ID + content?
block|}
annotation|@
name|Test
specifier|public
name|void
name|scopesAndSessionsOutliveOntoNet
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          * Both scopes will be created, but scope1 will be unregistered and we expect not to be able to          * rebuild it.          */
name|String
name|id1
init|=
literal|"scope1"
decl_stmt|,
name|id2
init|=
literal|"scope2"
decl_stmt|,
name|sid2
init|=
literal|"auto-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Setup a network
name|OntologyScope
name|scope1
init|=
name|onManager
operator|.
name|createOntologyScope
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|scope1
argument_list|)
expr_stmt|;
name|OntologyScope
name|scope2
init|=
name|onManager
operator|.
name|createOntologyScope
argument_list|(
name|id2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|scope2
argument_list|)
expr_stmt|;
name|onManager
operator|.
name|deregisterScope
argument_list|(
name|scope1
argument_list|)
expr_stmt|;
comment|// A session with a system ID
name|Session
name|ses1
init|=
name|sessionManager
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|String
name|sid1
init|=
name|ses1
operator|.
name|getID
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ses1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sid1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// A session with an ID chosen manually
name|Session
name|ses2
init|=
name|sessionManager
operator|.
name|createSession
argument_list|(
name|sid2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ses2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ses2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sid2
argument_list|,
name|ses2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stanbol going down..."
argument_list|)
expr_stmt|;
name|resetOntologyProvider
argument_list|()
expr_stmt|;
comment|// but keep the TcProvider
name|resetManagers
argument_list|()
expr_stmt|;
comment|// The unregistered scope should be missing.
name|assertNull
argument_list|(
name|onManager
operator|.
name|getScope
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// The other collectors should have been rebuilt.
name|assertNotNull
argument_list|(
name|onManager
operator|.
name|getScope
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sid1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sid2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Use a dedicated TC Provider that is setup once before the tests begin and never cleared.      */
specifier|private
name|TcProvider
name|tcp
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|canRetrieveOntologyImported
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pcomics
init|=
literal|"http://stanbol.apache.org/ontologies/pcomics/"
decl_stmt|;
name|OWLOntologyID
name|foaf
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|)
argument_list|)
decl_stmt|,
name|all
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|pcomics
operator|+
literal|"characters_all.owl"
argument_list|)
argument_list|)
decl_stmt|,
name|main
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|pcomics
operator|+
literal|"maincharacters.owl"
argument_list|)
argument_list|)
decl_stmt|,
name|minor
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|pcomics
operator|+
literal|"minorcharacters.owl"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntology
name|oAll
decl_stmt|,
name|oMain
decl_stmt|,
name|oMinor
decl_stmt|,
name|oFoaf
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|4
decl_stmt|;
comment|// Load the Peanuts characters_all ontology (has 2 import levels)
name|InputStream
name|data
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/characters_all.owl"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|data
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          * characters_all, main, minor + mockfoaf (note: imports are available only because the xml:base is          * set to be the same as the import target)          */
name|assertEquals
argument_list|(
name|total
argument_list|,
name|ontologyProvider
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that each imported ontology is stored
name|oAll
operator|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|all
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|id
init|=
name|oAll
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|all
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|oMain
operator|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|main
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|id
operator|=
name|oMain
operator|.
name|getOntologyID
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|main
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|oMinor
operator|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|minor
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|id
operator|=
name|oMinor
operator|.
name|getOntologyID
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minor
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|oFoaf
operator|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|foaf
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|id
operator|=
name|oFoaf
operator|.
name|getOntologyID
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foaf
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stanbol going down..."
argument_list|)
expr_stmt|;
name|resetOntologyProvider
argument_list|()
expr_stmt|;
comment|// but keep the TcProvider
name|assertEquals
argument_list|(
name|total
argument_list|,
name|ontologyProvider
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The OWL API implements OWLOntology#equals()
name|assertEquals
argument_list|(
name|oAll
argument_list|,
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|all
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oMain
argument_list|,
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|main
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oMinor
argument_list|,
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|minor
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oFoaf
argument_list|,
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|foaf
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canRetrieveOntologySingleton
parameter_list|()
throws|throws
name|Exception
block|{
name|OWLOntologyID
name|foaf
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://xmlns.com/foaf/0.1/"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntology
name|o1
decl_stmt|;
comment|// Get the fake FOAF and load it into the ontology provider
name|InputStream
name|data
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/mockfoaf.rdf"
argument_list|)
decl_stmt|;
comment|// Keep track of its storage key
name|String
name|key
init|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|data
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve the stored fake FOAF
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ontologyProvider
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|o1
operator|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|id
init|=
name|o1
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foaf
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Check there is a storage key for the (real) ID of the FOAF ontology
name|key
operator|=
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|foaf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stanbol going down..."
argument_list|)
expr_stmt|;
name|resetOntologyProvider
argument_list|()
expr_stmt|;
comment|// but keep the TcProvider
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ontologyProvider
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check again for the FOAF key
name|key
operator|=
name|ontologyProvider
operator|.
name|getKey
argument_list|(
name|foaf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// The OWL API implements OWLOntology#equals()
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Before each test, everything is cleaned up, including the TcProvider.      */
annotation|@
name|Before
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|tcp
operator|=
operator|new
name|SimpleTcProvider
argument_list|()
expr_stmt|;
name|resetOntologyProvider
argument_list|()
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|empty
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|onm
operator|=
operator|new
name|ONManagerImpl
argument_list|(
name|ontologyProvider
argument_list|,
operator|new
name|OfflineConfigurationImpl
argument_list|(
name|empty
argument_list|)
argument_list|,
operator|new
name|OntologySpaceFactoryImpl
argument_list|(
name|ontologyProvider
argument_list|,
name|empty
argument_list|)
argument_list|,
name|empty
argument_list|)
expr_stmt|;
block|}
comment|/*      * With this method, the ontology provider and all its internal indices are cleared. However, the Clerezza      * persistence objects are not cleared, so we can check if we can still retrieve metadata from them.      */
specifier|private
name|void
name|resetOntologyProvider
parameter_list|()
block|{
name|ontologyProvider
operator|=
operator|new
name|ClerezzaOntologyProvider
argument_list|(
name|tcp
argument_list|,
operator|new
name|OfflineConfigurationImpl
argument_list|(
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

