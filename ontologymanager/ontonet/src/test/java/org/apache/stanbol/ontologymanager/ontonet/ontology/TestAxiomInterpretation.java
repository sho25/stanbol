begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|ontology
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|onManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|GraphContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestAxiomInterpretation
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomAboxCoreTbox
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/ontologies/imports-disconnected"
decl_stmt|;
name|InputStream
name|content
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
operator|+
literal|"/abox.owl"
argument_list|)
decl_stmt|;
name|OntologyInputSource
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|coreSrc
init|=
operator|new
name|GraphContentInputSource
argument_list|(
name|content
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
decl_stmt|;
name|OntologyScope
name|scope
init|=
name|onManager
operator|.
name|createOntologyScope
argument_list|(
literal|"imports-disconnected"
argument_list|,
name|coreSrc
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|content
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
operator|+
literal|"/tbox.owl"
argument_list|)
expr_stmt|;
name|OntologyInputSource
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|custSrc
init|=
operator|new
name|GraphContentInputSource
argument_list|(
name|content
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
decl_stmt|;
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
name|custSrc
argument_list|)
expr_stmt|;
name|Graph
name|g
init|=
name|scope
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// for (Triple t : g)
comment|// System.out.println(t);
comment|//
comment|// OWLOntology o = scope.export(OWLOntology.class, true);
comment|// for (OWLAxiom ax : o.getAxioms())
comment|// System.out.println(ax);
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

