begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|parser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|MockOsgiContext
operator|.
name|tcManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|Locations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|GraphSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestClerezzaInputSources
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|loadGraphs
parameter_list|()
throws|throws
name|Exception
block|{
name|reset
argument_list|()
expr_stmt|;
name|UriRef
name|uri
init|=
operator|new
name|UriRef
argument_list|(
name|Locations
operator|.
name|CHAR_ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|TestClerezzaInputSources
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/characters_all.owl"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|uri
argument_list|)
argument_list|,
name|inputStream
argument_list|,
literal|"application/rdf+xml"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|uri
operator|=
operator|new
name|UriRef
argument_list|(
name|Locations
operator|.
name|CHAR_MAIN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|inputStream
operator|=
name|TestClerezzaInputSources
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/maincharacters.owl"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|uri
argument_list|)
argument_list|,
name|inputStream
argument_list|,
literal|"application/rdf+xml"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|uri
operator|=
operator|new
name|UriRef
argument_list|(
name|Locations
operator|.
name|CHAR_MINOR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|inputStream
operator|=
name|TestClerezzaInputSources
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/minorcharacters.owl"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|uri
argument_list|)
argument_list|,
name|inputStream
argument_list|,
literal|"application/rdf+xml"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|private
name|OntologyInputSource
argument_list|<
name|TripleCollection
argument_list|,
name|?
argument_list|>
name|gis
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|bind
parameter_list|()
throws|throws
name|Exception
block|{      }
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGraphSource
parameter_list|()
throws|throws
name|Exception
block|{
name|gis
operator|=
operator|new
name|GraphSource
argument_list|(
operator|new
name|UriRef
argument_list|(
name|Locations
operator|.
name|CHAR_ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|gis
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|gis
operator|.
name|getRootOntology
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TripleCollection
argument_list|>
name|imported
init|=
name|gis
operator|.
name|getImports
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Number of stored graphs minus the importing one = imported graphs
name|assertEquals
argument_list|(
name|tcManager
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|imported
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TripleCollection
name|g
range|:
name|imported
control|)
name|assertNotNull
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

