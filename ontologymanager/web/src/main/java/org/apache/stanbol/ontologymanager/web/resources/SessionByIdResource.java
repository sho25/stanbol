begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|CONFLICT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|OK
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|IrremovableOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyCollectorModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|DuplicateSessionIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_comment
comment|/**  * The REST resource of an OntoNet {@link Session} whose identifier is known.  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ontonet/session/{id}"
argument_list|)
specifier|public
class|class
name|SessionByIdResource
extends|extends
name|BaseStanbolResource
block|{
comment|/*      * Placeholder for the ONManager to be fetched from the servlet context.      */
specifier|protected
name|ONManager
name|onm
decl_stmt|;
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|protected
name|SessionManager
name|sesMgr
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|public
name|SessionByIdResource
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|servletContext
operator|=
name|servletContext
expr_stmt|;
name|this
operator|.
name|onm
operator|=
operator|(
name|ONManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ONManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|sesMgr
operator|=
name|onm
operator|.
name|getSessionManager
argument_list|()
expr_stmt|;
name|session
operator|=
name|sesMgr
operator|.
name|getSession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the OWL ontology form of the session.      *       * @param sessionId      *            the session identifier.      * @param uriInfo      * @param headers      * @return the ontology if the session exists, otherwise {@link Status#NOT_FOUND}.      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|asOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|session
operator|.
name|asOWLOntology
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Used to create an OntoNet session with a specified identifier.      *       * @param sessionId      *            the identifier of the session to be created.      * @param uriInfo      * @param headers      * @return {@link Status#OK} if the creation was successful, or {@link Status#CONFLICT} if a session with      *         that ID already exists.      */
annotation|@
name|PUT
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|createSession
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
try|try
block|{
name|session
operator|=
name|sesMgr
operator|.
name|createSession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateSessionIDException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|CONFLICT
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|OK
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Destroys the session and unmanages its ontologies (which are also lost unless stored).      *       * @param sessionId      *            the session identifier      * @param uriInfo      * @param headers      * @return {@link Status#OK} if the deletion was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all.      */
annotation|@
name|DELETE
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|deleteSession
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|sesMgr
operator|.
name|destroySession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|OK
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the session.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if either the sessionn does not      *         exist, or the if the ontology either does not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getManagedOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|OWLOntology
name|o
init|=
name|session
operator|.
name|getOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the session that it should manage the ontology obtained by parsing the supplied content.<br>      *<br>      * Note that the PUT method cannot be used, as it is not possible to predict what ID the ontology will      * have until it is parsed.      *       * @param content      *            the ontology content      * @return {@link Status#OK} if the addition was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session is locked or cannot modified for some      *         other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error occurs.      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|manageOntology
parameter_list|(
name|InputStream
name|content
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
try|try
block|{
name|session
operator|.
name|addOntology
argument_list|(
operator|new
name|OntologyContentInputSource
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|OK
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the session that it should manage the ontology obtained by dereferencing the supplied IRI.<br>      *<br>      * Note that the PUT method cannot be used, as it is not possible to predict what ID the ontology will      * have until it is parsed.      *       * @param content      *            the ontology physical IRI      * @return {@link Status#OK} if the addition was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session is locked or cannot modified for some      *         other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error occurs.      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|value
operator|=
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|manageOntology
parameter_list|(
name|String
name|iri
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
try|try
block|{
name|session
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|iri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|OK
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the session to no longer manage the ontology with the supplied<i>logical</i> identifier. The      * ontology will be lost if not stored or not managed by another collector.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return {@link Status#OK} if the removal was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session or the ontology is locked or cannot      *         modified for some other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error      *         occurs.      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|unmanageOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|OWLOntology
name|o
init|=
name|session
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|notModified
argument_list|()
operator|.
name|build
argument_list|()
return|;
try|try
block|{
name|session
operator|.
name|removeOntology
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IrremovableOntologyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OntologyCollectorModificationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|OK
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

