begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_PLAIN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|CONFLICT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NO_CONTENT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|UNSUPPORTED_MEDIA_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|FUNCTIONAL_OWL_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|MANCHESTER_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|MANCHESTER_OWL_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N3_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N_TRIPLE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|OWL_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|OWL_XML_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_JSON_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|TURTLE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|X_TURTLE_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWL2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|multiplexer
operator|.
name|clerezza
operator|.
name|collector
operator|.
name|MGraphMultiplexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|model
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|OntologyCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|Multiplexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyHandleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyLoadingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OrphanOntologyKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|ScopeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|owlapi
operator|.
name|OntologyContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|util
operator|.
name|OntologyStatsResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|RemoveImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SetOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|ImplicitProduces
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|BodyPart
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataBodyPart
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataMultiPart
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_comment
comment|/**  * Provides the basic HTTP methods for storing and managing ontologies  * regardless of them belonging to a specific network, scope or session.  *  * @author anuzzolese, alexdma  *  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ontonet"
argument_list|)
annotation|@
name|ImplicitProduces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
operator|+
literal|";qs=2"
argument_list|)
specifier|public
class|class
name|OntoNetRootResource
extends|extends
name|AbstractOntologyAccessResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|ScopeManager
name|onManager
decl_stmt|;
comment|/*      * Placeholder for the OntologyProvider to be fetched from the servlet context.      */
specifier|protected
name|OntologyProvider
argument_list|<
name|?
argument_list|>
name|ontologyProvider
decl_stmt|;
comment|/*      * Placeholder for the OntologyProvider to be fetched from the servlet context.      */
specifier|protected
name|RegistryManager
name|registryManager
decl_stmt|;
specifier|protected
name|SessionManager
name|sessionManager
decl_stmt|;
specifier|public
name|OntoNetRootResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|servletContext
operator|=
name|servletContext
expr_stmt|;
name|this
operator|.
name|ontologyProvider
operator|=
operator|(
name|OntologyProvider
argument_list|<
name|?
argument_list|>
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|OntologyProvider
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|onManager
operator|=
operator|(
name|ScopeManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ScopeManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionManager
operator|=
operator|(
name|SessionManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SessionManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|registryManager
operator|=
operator|(
name|RegistryManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RegistryManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
block|}
comment|/*      * TODO before implementing removal, we need OWL dependency checks. Also, this is quite a strong method      * and would be best implemented with RESTful authentication.      */
comment|// @DELETE
specifier|public
name|Response
name|clear
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
specifier|public
name|Response
name|createOntologyEntry
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|OWLOntologyID
name|key
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|ontologyProvider
operator|.
name|listAllRegisteredEntries
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|CONFLICT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ontologyProvider
operator|.
name|createBlankOntologyEntry
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|created
argument_list|(
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
specifier|public
name|Response
name|deleteOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|OWLOntologyID
name|key
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|ontologyProvider
operator|.
name|hasOntology
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// TODO check aliases!
name|ontologyProvider
operator|.
name|removeOntology
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OntologyHandleException
name|e
parameter_list|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|CONFLICT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrphanOntologyKeyException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Orphan ontology key {}. No associated graph found in store."
argument_list|,
name|e
operator|.
name|getOntologyKey
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAliases
parameter_list|(
specifier|final
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
comment|//TODO use rdfViewable instead of Vieable to make separation of
comment|//presentation and application logic cleaner
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|run
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|ontologyId
argument_list|)
control|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aliases
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|MGraph
name|getGraph
parameter_list|(
name|String
name|ontologyId
parameter_list|,
name|boolean
name|merged
parameter_list|,
name|URI
name|requestUri
parameter_list|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OWLOntologyID
name|key
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Will try to retrieve ontology {} from provider."
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|/*          * Export directly to MGraph since the OWLOntologyWriter uses (de-)serializing converters for the          * other formats.          *           * Use oTemp for the "real" graph and o for the graph that will be exported. This is due to the fact          * that in o we want to change import statements, but we do not want these changes to be stored          * permanently.          */
name|MGraph
name|o
init|=
literal|null
decl_stmt|,
name|oTemp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oTemp
operator|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|key
argument_list|,
name|MGraph
operator|.
name|class
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Retrieval of ontology with ID "
operator|+
name|key
operator|+
literal|" failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oTemp
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology {} missing from provider. Trying libraries..."
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// TODO remove once registry supports OWLOntologyID as public key.
name|IRI
name|iri
init|=
name|URIUtils
operator|.
name|sanitize
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
decl_stmt|;
comment|// See if we can touch a library. TODO: replace with event model on the ontology provider.
name|int
name|minSize
init|=
operator|-
literal|1
decl_stmt|;
name|IRI
name|smallest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Library
name|lib
range|:
name|registryManager
operator|.
name|getLibraries
argument_list|(
name|iri
argument_list|)
control|)
block|{
name|int
name|size
init|=
name|lib
operator|.
name|getChildren
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|minSize
operator|<
literal|1
operator|||
name|size
operator|<
name|minSize
condition|)
block|{
name|smallest
operator|=
name|lib
operator|.
name|getIRI
argument_list|()
expr_stmt|;
name|minSize
operator|=
name|size
expr_stmt|;
block|}
block|}
if|if
condition|(
name|smallest
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Selected library for ontology {} is {} ."
argument_list|,
name|iri
argument_list|,
name|smallest
argument_list|)
expr_stmt|;
try|try
block|{
name|oTemp
operator|=
name|registryManager
operator|.
name|getLibrary
argument_list|(
name|smallest
argument_list|)
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|,
name|MGraph
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryContentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The content of library "
operator|+
name|smallest
operator|+
literal|" could not be accessed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// This is needed because we need to change import statements. No need to use a more efficient but
comment|// resource-intensive IndexedMGraph, since both o and oTemp will be GC'ed after serialization.
if|if
condition|(
name|oTemp
operator|!=
literal|null
condition|)
block|{
name|o
operator|=
operator|new
name|SimpleMGraph
argument_list|(
name|oTemp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology {} not found in any ontology provider or library."
argument_list|,
name|ontologyId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Retrieved ontology {} ."
argument_list|,
name|ontologyId
argument_list|)
expr_stmt|;
comment|// Rewrite imports
name|String
name|uri
init|=
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|URI
name|base
init|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|lastIndexOf
argument_list|(
name|ontologyId
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Rewrite import statements
comment|/*          * TODO manage import rewrites better once the container ID is fully configurable (i.e. instead of          * going upOne() add "session" or "ontology" if needed).          */
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|imports
init|=
name|o
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Triple
argument_list|>
name|oldImports
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|imports
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|oldImports
operator|.
name|add
argument_list|(
name|imports
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Triple
name|t
range|:
name|oldImports
control|)
block|{
comment|// construct new statement
name|String
name|s
init|=
operator|(
operator|(
name|UriRef
operator|)
name|t
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"::"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"::"
argument_list|)
operator|+
literal|2
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UriRef
name|target
init|=
operator|new
name|UriRef
argument_list|(
name|base
operator|+
literal|"/"
operator|+
name|s
argument_list|)
decl_stmt|;
name|o
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|,
name|OWL
operator|.
name|imports
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove old statement
name|o
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Versioning.
name|OWLOntologyID
name|id
init|=
name|OWLUtils
operator|.
name|extractOntologyID
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isAnonymous
argument_list|()
operator|&&
name|id
operator|.
name|getVersionIRI
argument_list|()
operator|==
literal|null
condition|)
block|{
name|UriRef
name|viri
init|=
operator|new
name|UriRef
argument_list|(
name|requestUri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Setting version IRI for export : {}"
argument_list|,
name|viri
argument_list|)
expr_stmt|;
name|o
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|new
name|UriRef
argument_list|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UriRef
argument_list|(
name|OWL2Constants
operator|.
name|OWL_VERSION_IRI
argument_list|)
argument_list|,
name|viri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Exported as Clerezza Graph in {} ms. Handing over to writer."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHandles
parameter_list|(
specifier|final
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
comment|//TODO use rdfViewable instead of Vieable to make separation of
comment|//presentation and application logic cleaner
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|run
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|handles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|onManager
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Scope
name|scope
range|:
name|onManager
operator|.
name|getRegisteredScopes
argument_list|()
control|)
block|{
if|if
condition|(
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|hasOntology
argument_list|(
name|ontologyId
argument_list|)
operator|||
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|hasOntology
argument_list|(
name|ontologyId
argument_list|)
condition|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|scope
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sessionManager
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|sesId
range|:
name|sessionManager
operator|.
name|getRegisteredSessionIDs
argument_list|()
control|)
block|{
if|if
condition|(
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sesId
argument_list|)
operator|.
name|hasOntology
argument_list|(
name|ontologyId
argument_list|)
condition|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|sesId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|handles
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getHtmlInfo
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|APPLICATION_JSON
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getMetaGraph
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|ontologyProvider
operator|.
name|getMetaGraph
argument_list|(
name|Graph
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
name|getOntologies
parameter_list|()
block|{
comment|//As this method is invoked from the template it would be too late
comment|//to handle AccessControlExceptionS
comment|//TODO use rdfViewable instead of Vieable to make separation of
comment|//presentation and application logic cleaner
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
name|run
parameter_list|()
block|{
comment|// No orphans included.
name|SortedSet
argument_list|<
name|OWLOntologyID
argument_list|>
name|filtered
init|=
operator|new
name|TreeSet
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|orphans
init|=
name|ontologyProvider
operator|.
name|listOrphans
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|ontologyProvider
operator|.
name|getPublicKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|orphans
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|filtered
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filtered
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|getOrphans
parameter_list|()
block|{
comment|//As this method is invoked from the template it would be too late
comment|//to handle AccessControlExceptionS
comment|//TODO use rdfViewable instead of Vieable to make separation of
comment|//presentation and application logic cleaner
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|run
parameter_list|()
block|{
return|return
name|ontologyProvider
operator|.
name|listOrphans
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|OWLOntology
name|getOWLOntology
parameter_list|(
name|String
name|ontologyId
parameter_list|,
name|boolean
name|merge
parameter_list|,
name|URI
name|requestUri
parameter_list|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IRI
name|iri
init|=
name|URIUtils
operator|.
name|sanitize
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Will try to retrieve ontology {} from provider."
argument_list|,
name|iri
argument_list|)
expr_stmt|;
comment|// TODO be selective: if the ontology is small enough, use OWLOntology otherwise export to Graph.
name|OWLOntology
name|o
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// XXX Guarantee that there MUST always be an entry for any decoded ontology ID submitted.
name|OWLOntologyID
name|id
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|o
operator|=
name|ontologyProvider
operator|.
name|getStoredOntology
argument_list|(
name|id
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Retrieval of ontology with ID "
operator|+
name|iri
operator|+
literal|" failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology {} missing from provider. Trying libraries..."
argument_list|,
name|iri
argument_list|)
expr_stmt|;
comment|// See if we can touch a library. TODO: replace with event model on the ontology provider.
name|int
name|minSize
init|=
operator|-
literal|1
decl_stmt|;
name|IRI
name|smallest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Library
name|lib
range|:
name|registryManager
operator|.
name|getLibraries
argument_list|(
name|iri
argument_list|)
control|)
block|{
name|int
name|size
init|=
name|lib
operator|.
name|getChildren
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|minSize
operator|<
literal|1
operator|||
name|size
operator|<
name|minSize
condition|)
block|{
name|smallest
operator|=
name|lib
operator|.
name|getIRI
argument_list|()
expr_stmt|;
name|minSize
operator|=
name|size
expr_stmt|;
block|}
block|}
if|if
condition|(
name|smallest
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Selected library for ontology {} is {} ."
argument_list|,
name|iri
argument_list|,
name|smallest
argument_list|)
expr_stmt|;
try|try
block|{
name|o
operator|=
name|registryManager
operator|.
name|getLibrary
argument_list|(
name|smallest
argument_list|)
operator|.
name|getOntology
argument_list|(
name|iri
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryContentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The content of library "
operator|+
name|smallest
operator|+
literal|" could not be accessed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology {} not found in any ontology provider or library."
argument_list|,
name|iri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Retrieved ontology {} ."
argument_list|,
name|iri
argument_list|)
expr_stmt|;
comment|// Rewrite import statements - no ontology collector to do it for us here.
name|URI
name|base
init|=
name|URI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|df
init|=
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
comment|// TODO manage import rewrites better once the container ID is fully configurable.
for|for
control|(
name|OWLImportsDeclaration
name|oldImp
range|:
name|o
operator|.
name|getImportsDeclarations
argument_list|()
control|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|RemoveImport
argument_list|(
name|o
argument_list|,
name|oldImp
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|oldImp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"::"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"::"
argument_list|)
operator|+
literal|2
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IRI
name|target
init|=
name|IRI
operator|.
name|create
argument_list|(
name|base
operator|+
name|s
argument_list|)
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|o
argument_list|,
name|df
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|target
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Versioning.
name|OWLOntologyID
name|id
init|=
name|o
operator|.
name|getOntologyID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|isAnonymous
argument_list|()
operator|&&
name|id
operator|.
name|getVersionIRI
argument_list|()
operator|==
literal|null
condition|)
block|{
name|IRI
name|viri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|requestUri
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Setting version IRI for export : {}"
argument_list|,
name|viri
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|SetOntologyID
argument_list|(
name|o
argument_list|,
operator|new
name|OWLOntologyID
argument_list|(
name|id
operator|.
name|getOntologyIRI
argument_list|()
argument_list|,
name|viri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Exported as Clerezza Graph in {} ms. Handing over to writer."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|(
specifier|final
name|OWLOntologyID
name|ontologyId
parameter_list|)
block|{
comment|//TODO use rdfViewable instead of Vieable to make separation of
comment|//presentation and application logic cleaner
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
block|{
name|Multiplexer
name|desc
init|=
operator|new
name|MGraphMultiplexer
argument_list|(
name|ontologyProvider
operator|.
name|getMetaGraph
argument_list|(
name|MGraph
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|desc
operator|.
name|getSize
argument_list|(
name|ontologyId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getStandaloneGraph
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"meta"
argument_list|)
name|boolean
name|meta
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merged
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|meta
condition|)
block|{
return|return
name|getMetadata
argument_list|(
name|ontologyId
argument_list|,
name|uriInfo
argument_list|,
name|headers
argument_list|)
return|;
block|}
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
name|ontologyId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyID
name|key
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyProvider
operator|.
name|listOrphans
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NO_CONTENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TripleCollection
name|o
init|=
name|getGraph
argument_list|(
name|ontologyId
argument_list|,
name|merged
argument_list|,
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
decl_stmt|;
name|rb
operator|=
name|o
operator|==
literal|null
condition|?
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
else|:
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the      * session.      *      * @param sessionId the session identifier.      * @param ontologyId the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if      * either the sessionn does not exist, or the if the ontology either does      * not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|getStandaloneOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merged
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
name|ontologyId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyID
name|key
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyProvider
operator|.
name|listOrphans
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NO_CONTENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OWLOntology
name|o
init|=
name|getOWLOntology
argument_list|(
name|ontologyId
argument_list|,
name|merged
argument_list|,
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
decl_stmt|;
name|rb
operator|=
name|o
operator|==
literal|null
condition|?
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
else|:
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Response
name|getMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
name|UriRef
name|me
init|=
operator|new
name|UriRef
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/"
operator|+
name|ontologyId
argument_list|)
decl_stmt|;
name|MGraph
name|mGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|getAliases
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
control|)
block|{
name|mGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|new
name|UriRef
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/"
operator|+
name|alias
argument_list|)
argument_list|,
name|OWL
operator|.
name|sameAs
argument_list|,
name|me
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|mGraph
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|MULTIPART_FORM_DATA
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|TEXT_HTML
block|,
name|TEXT_PLAIN
block|,
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|N3
block|}
argument_list|)
specifier|public
name|Response
name|loadOntologyContent
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
name|FormDataMultiPart
name|data
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|performLoadOntology
argument_list|(
name|data
argument_list|,
name|headers
argument_list|,
name|Origin
operator|.
name|create
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML + "; charset=utf-8");
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|ResponseBuilder
name|performLoadOntology
parameter_list|(
name|FormDataMultiPart
name|data
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|,
name|Origin
argument_list|<
name|?
argument_list|>
modifier|...
name|keys
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" post(FormDataMultiPart data)"
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
literal|null
decl_stmt|;
name|IRI
name|location
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|// If found, it takes precedence over location.
name|String
name|format
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyID
argument_list|>
name|aliases
init|=
operator|new
name|ArrayList
argument_list|<
name|OWLOntologyID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BodyPart
name|bpart
range|:
name|data
operator|.
name|getBodyParts
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"is a {}"
argument_list|,
name|bpart
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bpart
operator|instanceof
name|FormDataBodyPart
condition|)
block|{
name|FormDataBodyPart
name|dbp
init|=
operator|(
name|FormDataBodyPart
operator|)
name|bpart
decl_stmt|;
name|String
name|name
init|=
name|dbp
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|file
operator|=
name|bpart
operator|.
name|getEntityAs
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|dbp
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"format"
argument_list|)
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|"auto"
argument_list|)
condition|)
block|{
name|format
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
try|try
block|{
name|URI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// To throw 400 if malformed.
name|location
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed IRI for "
operator|+
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"alias"
argument_list|)
operator|&&
operator|!
literal|"null"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
try|try
block|{
name|aliases
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed public key for "
operator|+
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// Then add the file
name|OWLOntologyID
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|canRead
argument_list|()
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|/*              * Because the ontology provider's load method could fail after only one attempt without resetting              * the stream, we might have to do that ourselves.              */
name|List
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
operator|&&
operator|!
name|format
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|formats
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
else|else
comment|// The RESTful API has its own list of preferred formats
block|{
name|formats
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|OWL_XML
block|,
name|FUNCTIONAL_OWL
block|,
name|MANCHESTER_OWL
block|,
name|RDF_JSON
block|}
argument_list|)
expr_stmt|;
block|}
name|int
name|unsupported
init|=
literal|0
decl_stmt|,
name|failed
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itf
init|=
name|formats
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|itf
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OntologyLoadingException
argument_list|(
literal|"No suitable format found or defined."
argument_list|)
throw|;
block|}
do|do
block|{
name|String
name|f
init|=
name|itf
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Re-instantiate the stream on every attempt
name|InputStream
name|content
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// ClerezzaOWLUtils.guessOntologyID(new FileInputStream(file), Parser.getInstance(), f);
name|OWLOntologyID
name|guessed
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|Parser
operator|.
name|getInstance
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|guessed
operator|!=
literal|null
operator|&&
operator|!
name|guessed
operator|.
name|isAnonymous
argument_list|()
operator|&&
name|ontologyProvider
operator|.
name|hasOntology
argument_list|(
name|guessed
argument_list|)
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitted
operator|=
name|guessed
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|)
condition|)
block|{
name|rb
operator|.
name|entity
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"/imports/409"
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
name|content
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|key
operator|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|content
argument_list|,
name|f
argument_list|,
literal|true
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"POST method failed for media type {}. This should not happen (should fail earlier)"
argument_list|,
name|headers
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
comment|// rb = Response.status(UNSUPPORTED_MEDIA_TYPE);
name|unsupported
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">>> FAILURE format {} (I/O error)"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|failed
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// SAXParseException and others
name|log
operator|.
name|debug
argument_list|(
literal|">>> FAILURE format {} (parse error)"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|failed
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|key
operator|==
literal|null
comment|/* || key.isAnonymous() */
operator|)
operator|&&
name|itf
operator|.
name|hasNext
argument_list|()
condition|)
do|;
if|if
condition|(
operator|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isAnonymous
argument_list|()
operator|)
operator|&&
name|rb
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|unsupported
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|UNSUPPORTED_MEDIA_TYPE
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Here we try every format supported by the Java API
name|key
operator|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|location
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load ontology from "
operator|+
name|location
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|aliases
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// No content but there are aliases.
block|{
for|for
control|(
name|Origin
argument_list|<
name|?
argument_list|>
name|origin
range|:
name|keys
control|)
block|{
if|if
condition|(
name|origin
operator|.
name|getReference
argument_list|()
operator|instanceof
name|OWLOntologyID
condition|)
block|{
name|OWLOntologyID
name|primary
init|=
operator|(
operator|(
name|OWLOntologyID
operator|)
name|origin
operator|.
name|getReference
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|ontologyProvider
operator|.
name|getStatus
argument_list|(
name|primary
argument_list|)
operator|!=
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyProvider
operator|.
name|Status
operator|.
name|NO_MATCH
condition|)
block|{
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|aliases
control|)
block|{
try|try
block|{
if|if
condition|(
name|ontologyProvider
operator|.
name|addAlias
argument_list|(
name|primary
argument_list|,
name|alias
argument_list|)
operator|&&
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|alias
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot add alias"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|" ... ontology key: {}"
argument_list|,
name|primary
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|" ... alias: {}"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|" ... reason: "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" file is: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|key
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
name|String
name|uri
init|=
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|!
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|)
condition|)
block|{
name|rb
operator|.
name|entity
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rb
operator|==
literal|null
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
return|return
name|rb
return|;
block|}
comment|/**      * Helper method to make sure a ResponseBuilder is created on every      * conditions, so that it is then possible to enable CORS on it afterwards.      *      * @param ontologyId      * @return      */
specifier|protected
name|ResponseBuilder
name|performShowOntology
parameter_list|(
name|String
name|ontologyId
parameter_list|)
block|{
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
name|ontologyId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
return|;
block|}
name|OWLOntologyID
name|key
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyProvider
operator|.
name|listOrphans
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|NO_CONTENT
argument_list|)
return|;
block|}
name|OWLOntology
name|o
init|=
name|getOWLOntology
argument_list|(
name|ontologyId
argument_list|,
literal|false
argument_list|,
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
return|;
block|}
comment|// try {
name|Set
argument_list|<
name|OntologyCollector
argument_list|>
name|handles
init|=
operator|new
name|HashSet
argument_list|<
name|OntologyCollector
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|onManager
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Scope
name|scope
range|:
name|onManager
operator|.
name|getRegisteredScopes
argument_list|()
control|)
block|{
if|if
condition|(
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|hasOntology
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|scope
operator|.
name|getCoreSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|hasOntology
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|scope
operator|.
name|getCustomSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sessionManager
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|sesId
range|:
name|sessionManager
operator|.
name|getRegisteredSessionIDs
argument_list|()
control|)
block|{
if|if
condition|(
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sesId
argument_list|)
operator|.
name|hasOntology
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sesId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ByteArrayOutputStream out = new ByteArrayOutputStream();
comment|// o.getOWLOntologyManager().saveOntology(o, new ManchesterOWLSyntaxOntologyFormat(), out);
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"ontology"
argument_list|,
comment|// new OntologyPrettyPrintResource(servletContext,
comment|// uriInfo, out)
operator|new
name|OntologyStatsResource
argument_list|(
name|servletContext
argument_list|,
name|uriInfo
argument_list|,
name|key
argument_list|,
name|o
argument_list|,
name|ontologyProvider
operator|.
name|listAliases
argument_list|(
name|key
argument_list|)
argument_list|,
name|handles
argument_list|)
argument_list|)
argument_list|)
return|;
comment|// } catch (OWLOntologyStorageException e) {
comment|// throw new WebApplicationException(e, INTERNAL_SERVER_ERROR);
comment|// }
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MULTIPART_FORM_DATA
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|TEXT_HTML
block|,
name|TEXT_PLAIN
block|,
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|N3
block|}
argument_list|)
specifier|public
name|Response
name|postOntology
parameter_list|(
name|FormDataMultiPart
name|data
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|performLoadOntology
argument_list|(
name|data
argument_list|,
name|headers
argument_list|)
decl_stmt|;
comment|// rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML + "; charset=utf-8");
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|showOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|performShowOntology
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * POSTs an ontology content as application/x-www-form-urlencoded      *      * @param content      * @param headers      * @return      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|OWL_XML
block|,
name|FUNCTIONAL_OWL
block|,
name|MANCHESTER_OWL
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|storeOntology
parameter_list|(
name|InputStream
name|content
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
name|MediaType
name|mt
init|=
name|headers
operator|.
name|getMediaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|RDF_XML_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|TURTLE_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|X_TURTLE_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|N3_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|N_TRIPLE_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|RDF_JSON_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
condition|)
block|{
name|OWLOntologyID
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
name|key
operator|=
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|content
argument_list|,
name|headers
operator|.
name|getMediaType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"POST method failed for media type {}. This should not happen (should fail earlier)"
argument_list|,
name|headers
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|UNSUPPORTED_MEDIA_TYPE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
comment|// An exception should have been thrown earlier, but just in case.
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|OWL_XML_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|FUNCTIONAL_OWL_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|MANCHESTER_OWL_TYPE
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
condition|)
block|{
try|try
block|{
name|OntologyInputSource
argument_list|<
name|OWLOntology
argument_list|>
name|src
init|=
operator|new
name|OntologyContentInputSource
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|ontologyProvider
operator|.
name|loadInStore
argument_list|(
name|src
operator|.
name|getRootOntology
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|UNSUPPORTED_MEDIA_TYPE
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Response
name|r
init|=
name|rb
operator|.
name|build
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"POST request for ontology addition completed in {} ms with status {}."
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
operator|)
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

