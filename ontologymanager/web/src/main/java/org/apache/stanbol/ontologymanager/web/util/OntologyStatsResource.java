begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|OntologyCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|resources
operator|.
name|AbstractOntologyAccessResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_comment
comment|/**  * Will be used for human-readable rendering of OWL ontologies.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyStatsResource
extends|extends
name|AbstractOntologyAccessResource
block|{
specifier|private
name|Set
argument_list|<
name|OntologyCollector
argument_list|>
name|handles
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|identifiers
decl_stmt|;
specifier|private
name|OWLOntology
name|o
decl_stmt|;
specifier|public
name|OntologyStatsResource
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|,
name|OWLOntologyID
name|key
parameter_list|,
name|OWLOntology
name|o
parameter_list|,
name|Set
argument_list|<
name|OWLOntologyID
argument_list|>
name|identifiers
parameter_list|,
name|Set
argument_list|<
name|OntologyCollector
argument_list|>
name|handles
parameter_list|)
block|{
name|this
operator|.
name|servletContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|uriInfo
operator|=
name|uriInfo
expr_stmt|;
name|this
operator|.
name|submitted
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|o
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|identifiers
operator|=
name|identifiers
expr_stmt|;
name|this
operator|.
name|handles
operator|=
name|handles
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAliases
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|alias
range|:
name|identifiers
control|)
comment|// if (!o.getOntologyID().equals(alias))
name|aliases
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|aliases
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getScopeHandles
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|handles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OntologyCollector
name|handle
range|:
name|this
operator|.
name|handles
control|)
if|if
condition|(
name|handle
operator|instanceof
name|OntologySpace
condition|)
name|handles
operator|.
name|add
argument_list|(
name|handle
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|handles
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSessionHandles
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|handles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OntologyCollector
name|handle
range|:
name|this
operator|.
name|handles
control|)
if|if
condition|(
name|handle
operator|instanceof
name|Session
condition|)
name|handles
operator|.
name|add
argument_list|(
name|handle
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|handles
return|;
block|}
specifier|public
name|int
name|getTotalAxioms
parameter_list|()
block|{
return|return
name|o
operator|.
name|getAxiomCount
argument_list|()
return|;
block|}
block|}
end_class

end_unit

