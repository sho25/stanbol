begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|PUT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_PLAIN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|WILDCARD
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|CONFLICT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|MANCHESTER_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|OWL_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OntologyLoadingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|IrremovableOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|OntologyCollectorModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|collector
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|GraphContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|DuplicateSessionIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|io
operator|.
name|LibrarySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|util
operator|.
name|OntologyPrettyPrintResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|coode
operator|.
name|owlapi
operator|.
name|manchesterowlsyntax
operator|.
name|ManchesterOWLSyntaxOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|BodyPart
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataBodyPart
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataMultiPart
import|;
end_import

begin_comment
comment|/**  * The REST resource of an OntoNet {@link Session} whose identifier is known.  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ontonet/session/{id}"
argument_list|)
specifier|public
class|class
name|SessionResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|ONManager
name|onMgr
decl_stmt|;
specifier|protected
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
name|ontologyProvider
decl_stmt|;
comment|/*      * Placeholder for the session manager to be fetched from the servlet context.      */
specifier|protected
name|SessionManager
name|sesMgr
decl_stmt|;
comment|/*      * Placeholder for the RegistryManager to be fetched from the servlet context.      */
specifier|protected
name|RegistryManager
name|regMgr
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|public
name|SessionResource
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|servletContext
operator|=
name|servletContext
expr_stmt|;
name|this
operator|.
name|sesMgr
operator|=
operator|(
name|SessionManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SessionManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|regMgr
operator|=
operator|(
name|RegistryManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RegistryManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|ontologyProvider
operator|=
operator|(
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|OntologyProvider
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|onMgr
operator|=
operator|(
name|ONManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ONManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|session
operator|=
name|sesMgr
operator|.
name|getSession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|asOntologyGraph
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/session/"
argument_list|)
decl_stmt|;
comment|// Export to Clerezza Graph, which can be rendered as JSON-LD.
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|session
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|}
argument_list|)
specifier|public
name|Response
name|asOntologyMixed
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|ResponseBuilder
name|rb
decl_stmt|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/session/"
argument_list|)
decl_stmt|;
comment|// Export smaller graphs to OWLOntology due to the more human-readable rendering.
if|if
condition|(
name|merge
condition|)
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|session
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|session
operator|.
name|export
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|asOntologyOWL
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/session/"
argument_list|)
decl_stmt|;
comment|// Export to OWLOntology, the only to support OWL formats.
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|session
operator|.
name|export
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Used to create an OntoNet session with a specified identifier.      *       * @param sessionId      *            the identifier of the session to be created.      * @param uriInfo      * @param headers      * @return {@link Status#OK} if the creation was successful, or {@link Status#CONFLICT} if a session with      *         that ID already exists.      */
annotation|@
name|PUT
specifier|public
name|Response
name|createSession
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
try|try
block|{
name|session
operator|=
name|sesMgr
operator|.
name|createSession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateSessionIDException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|CONFLICT
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SessionLimitException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|created
argument_list|(
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Destroys the session and unmanages its ontologies (which are also lost unless stored).      *       * @param sessionId      *            the session identifier      * @param uriInfo      * @param headers      * @return {@link Status#OK} if the deletion was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all.      */
annotation|@
name|DELETE
specifier|public
name|Response
name|deleteSession
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|sesMgr
operator|.
name|destroySession
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Produces
argument_list|(
block|{
name|WILDCARD
block|}
argument_list|)
specifier|public
name|Response
name|emptyPost
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" post(no data)"
argument_list|)
expr_stmt|;
for|for
control|(
name|OntologyScope
name|sc
range|:
name|getAllScopes
argument_list|()
control|)
block|{
comment|// First remove appended scopes not in the list
name|String
name|scid
init|=
name|sc
operator|.
name|getID
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAppendedScopes
argument_list|()
operator|.
name|contains
argument_list|(
name|scid
argument_list|)
condition|)
block|{
name|session
operator|.
name|detachScope
argument_list|(
name|scid
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removed scope \"{]\"."
argument_list|,
name|scid
argument_list|)
expr_stmt|;
block|}
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/*      * Needed for freemarker      */
specifier|public
name|Set
argument_list|<
name|OntologyScope
argument_list|>
name|getAllScopes
parameter_list|()
block|{
return|return
name|onMgr
operator|.
name|getRegisteredScopes
argument_list|()
return|;
block|}
comment|/*      * Needed for freemarker      */
specifier|public
name|Set
argument_list|<
name|OntologyScope
argument_list|>
name|getAppendableScopes
parameter_list|()
block|{
name|Set
argument_list|<
name|OntologyScope
argument_list|>
name|notAppended
init|=
operator|new
name|HashSet
argument_list|<
name|OntologyScope
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OntologyScope
name|sc
range|:
name|onMgr
operator|.
name|getRegisteredScopes
argument_list|()
control|)
if|if
condition|(
operator|!
name|session
operator|.
name|getAttachedScopes
argument_list|()
operator|.
name|contains
argument_list|(
name|sc
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
name|notAppended
operator|.
name|add
argument_list|(
name|sc
argument_list|)
expr_stmt|;
return|return
name|notAppended
return|;
block|}
comment|/*      * Needed for freemarker      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAppendedScopes
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|appended
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OntologyScope
name|sc
range|:
name|onMgr
operator|.
name|getRegisteredScopes
argument_list|()
control|)
if|if
condition|(
name|session
operator|.
name|getAttachedScopes
argument_list|()
operator|.
name|contains
argument_list|(
name|sc
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
name|appended
operator|.
name|add
argument_list|(
name|sc
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|appended
return|;
block|}
specifier|private
name|URI
name|getCreatedResource
parameter_list|(
name|String
name|ontologyIRI
parameter_list|)
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
literal|"/"
operator|+
name|ontologyIRI
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getHtmlInfo
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|getManageableOntologies
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|ontologyProvider
operator|.
name|listOntologies
argument_list|()
control|)
name|result
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|session
operator|.
name|listManagedOntologies
argument_list|()
control|)
name|result
operator|.
name|remove
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|getOntologies
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|session
operator|.
name|listManagedOntologies
argument_list|()
control|)
name|result
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/*      * Needed for freemarker      */
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|,
name|GET
argument_list|,
name|POST
argument_list|,
name|PUT
argument_list|,
name|DELETE
argument_list|,
name|OPTIONS
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightOntology
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|,
name|GET
argument_list|,
name|DELETE
argument_list|,
name|OPTIONS
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the session.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if either the sessionn does not      *         exist, or the if the ontology either does not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|managedOntologyGetGraph
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/session/"
argument_list|)
decl_stmt|;
name|Graph
name|o
init|=
name|session
operator|.
name|getOntology
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|,
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|(
name|o
operator|!=
literal|null
operator|)
condition|?
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
else|:
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the session.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if either the sessionn does not      *         exist, or the if the ontology either does not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|}
argument_list|)
specifier|public
name|Response
name|managedOntologyGetMixed
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
block|{
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/session/"
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|merge
condition|)
block|{
name|Graph
name|g
init|=
name|session
operator|.
name|getOntology
argument_list|(
name|id
argument_list|,
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|rb
operator|=
operator|(
name|g
operator|!=
literal|null
operator|)
condition|?
name|Response
operator|.
name|ok
argument_list|(
name|g
argument_list|)
else|:
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OWLOntology
name|o
init|=
name|session
operator|.
name|getOntology
argument_list|(
name|id
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|rb
operator|=
operator|(
name|o
operator|!=
literal|null
operator|)
condition|?
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
else|:
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the session.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if either the sessionn does not      *         exist, or the if the ontology either does not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|managedOntologyGetOWL
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/session/"
argument_list|)
decl_stmt|;
name|OWLOntology
name|o
init|=
name|session
operator|.
name|getOntology
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|(
name|o
operator|!=
literal|null
operator|)
condition|?
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
else|:
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|managedOntologyShow
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
name|ontologyId
operator|.
name|isEmpty
argument_list|()
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
else|else
block|{
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/session/"
argument_list|)
decl_stmt|;
name|OWLOntology
name|o
init|=
name|session
operator|.
name|getOntology
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
try|try
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|saveOntology
argument_list|(
name|o
argument_list|,
operator|new
name|ManchesterOWLSyntaxOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"ontology"
argument_list|,
operator|new
name|OntologyPrettyPrintResource
argument_list|(
name|servletContext
argument_list|,
name|uriInfo
argument_list|,
name|out
argument_list|,
name|session
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the session to no longer manage the ontology with the supplied<i>logical</i> identifier. The      * ontology will be lost if not stored or not managed by another collector.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return {@link Status#OK} if the removal was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session or the ontology is locked or cannot      *         modified for some other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error      *         occurs.      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/{ontologyId:.+}"
argument_list|)
specifier|public
name|Response
name|managedOntologyUnload
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|sessionId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
block|{
name|OWLOntologyID
name|id
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|hasOntology
argument_list|(
name|id
argument_list|)
condition|)
name|rb
operator|=
name|Response
operator|.
name|notModified
argument_list|()
expr_stmt|;
else|else
try|try
block|{
name|session
operator|.
name|removeOntology
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IrremovableOntologyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OntologyCollectorModificationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the session that it should manage the ontology obtained by parsing the supplied content.<br>      *<br>      * Note that the PUT method cannot be used, as it is not possible to predict what ID the ontology will      * have until it is parsed.      *       * @param content      *            the ontology content      * @return {@link Status#OK} if the addition was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session is locked or cannot modified for some      *         other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error occurs.      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|OWL_XML
block|,
name|N_TRIPLE
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|FUNCTIONAL_OWL
block|,
name|MANCHESTER_OWL
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|manageOntology
parameter_list|(
name|InputStream
name|content
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
name|String
name|mt
init|=
name|headers
operator|.
name|getMediaType
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
comment|// Always check session first
else|else
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"POST content claimed to be of type {}."
argument_list|,
name|mt
argument_list|)
expr_stmt|;
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|src
decl_stmt|;
if|if
condition|(
name|OWL_XML
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|FUNCTIONAL_OWL
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
operator|||
name|MANCHESTER_OWL
operator|.
name|equals
argument_list|(
name|mt
argument_list|)
condition|)
name|src
operator|=
operator|new
name|OntologyContentInputSource
argument_list|(
name|content
argument_list|)
expr_stmt|;
else|else
comment|// content = new BufferedInputStream(content);
name|src
operator|=
operator|new
name|GraphContentInputSource
argument_list|(
name|content
argument_list|,
name|mt
argument_list|,
name|ontologyProvider
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"SUCCESS parse with media type {}."
argument_list|,
name|mt
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|key
init|=
name|session
operator|.
name|addOntology
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"FAILED parse with media type {}."
argument_list|,
name|mt
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
comment|// FIXME ugly but will have to do for the time being
name|log
operator|.
name|debug
argument_list|(
literal|"SUCCESS add ontology to session {}."
argument_list|,
name|session
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Storage key : {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
comment|// key.split("::")[1];
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//            uri = uri.substring((ontologyProvider.getGraphPrefix() + "::").length());
name|URI
name|created
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|!
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|created
operator|=
name|getCreatedResource
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|created
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"POST request for ontology addition completed in {} ms."
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
operator|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"New resource URL is {}"
argument_list|,
name|created
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"FAILED parse with media type {}."
argument_list|,
name|mt
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the session that it should manage the ontology obtained by dereferencing the supplied IRI.<br>      *<br>      * Note that the PUT method cannot be used, as it is not possible to predict what ID the ontology will      * have until it is parsed.      *       * @param content      *            the ontology physical IRI      * @return {@link Status#OK} if the addition was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session is locked or cannot modified for some      *         other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error occurs.      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|value
operator|=
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|manageOntology
parameter_list|(
name|String
name|iri
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
try|try
block|{
name|session
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|iri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MULTIPART_FORM_DATA
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|WILDCARD
block|}
argument_list|)
specifier|public
name|Response
name|postOntology
parameter_list|(
name|FormDataMultiPart
name|data
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" post(FormDataMultiPart data)"
argument_list|)
expr_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
comment|// TODO remove and make sure it is set across the method
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|IRI
name|location
init|=
literal|null
decl_stmt|,
name|library
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|// If found, it takes precedence over location.
name|String
name|format
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|toAppend
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BodyPart
name|bpart
range|:
name|data
operator|.
name|getBodyParts
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Found body part of type {}"
argument_list|,
name|bpart
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bpart
operator|instanceof
name|FormDataBodyPart
condition|)
block|{
name|FormDataBodyPart
name|dbp
init|=
operator|(
name|FormDataBodyPart
operator|)
name|bpart
decl_stmt|;
name|String
name|name
init|=
name|dbp
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|file
operator|=
name|bpart
operator|.
name|getEntityAs
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|dbp
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"format"
argument_list|)
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|"auto"
argument_list|)
condition|)
name|format
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"url"
argument_list|)
condition|)
try|try
block|{
name|URI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// To throw 400 if malformed.
name|location
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed IRI for "
operator|+
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"library"
argument_list|)
operator|&&
operator|!
literal|"null"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
try|try
block|{
name|URI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// To throw 400 if malformed.
name|library
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed IRI for "
operator|+
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"stored"
argument_list|)
operator|&&
operator|!
literal|"null"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Request to manage ontology with key {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"scope"
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Request to append scope \"{}\"."
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|toAppend
operator|==
literal|null
condition|)
name|toAppend
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|toAppend
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|boolean
name|fileOk
init|=
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|canRead
argument_list|()
operator|&&
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileOk
operator|||
name|location
operator|!=
literal|null
operator|||
name|library
operator|!=
literal|null
condition|)
block|{
comment|// File and location take precedence
comment|// Then add the file
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|src
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileOk
condition|)
block|{
comment|// File first
name|Collection
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|format
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|formats
operator|=
name|OntologyUtils
operator|.
name|getPreferredFormats
argument_list|()
expr_stmt|;
else|else
name|formats
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|format
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|formats
control|)
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Trying format {}."
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|long
name|b4buf
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Recreate the stream on each attempt
name|InputStream
name|content
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Streams created in {} ms"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|b4buf
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Creating ontology input source..."
argument_list|)
expr_stmt|;
name|b4buf
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|src
operator|=
operator|new
name|GraphContentInputSource
argument_list|(
name|content
argument_list|,
name|f
argument_list|,
name|ontologyProvider
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Done in {} ms"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|b4buf
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SUCCESS parse with format {}."
argument_list|,
name|f
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|OntologyLoadingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"FAILURE parse with format {}."
argument_list|,
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"FAILURE parse with format {} (I/O error)."
argument_list|,
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"No more formats to try."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|src
operator|=
operator|new
name|RootOntologyIRISource
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load ontology from "
operator|+
name|location
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|library
operator|!=
literal|null
condition|)
block|{
comment|// This comes last, since it will most likely have a value.
try|try
block|{
name|src
operator|=
operator|new
name|LibrarySource
argument_list|(
name|library
argument_list|,
name|regMgr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load ontology library "
operator|+
name|library
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" file is: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding ontology from input source {}"
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|long
name|b4add
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OWLOntologyID
name|key
init|=
name|session
operator|.
name|addOntology
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
comment|// FIXME ugly but will have to do for the time being
name|log
operator|.
name|debug
argument_list|(
literal|"Addition done in {} ms."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|b4add
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Storage key : {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
comment|// key.split("::")[1];
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//                uri = uri.substring((ontologyProvider.getGraphPrefix() + "::").length());
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|!
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
name|rb
operator|=
name|Response
operator|.
name|seeOther
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/ontonet/session/"
operator|+
name|session
operator|.
name|getID
argument_list|()
operator|+
literal|"/"
operator|+
name|uri
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|rb
operator|=
name|Response
operator|.
name|seeOther
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/ontonet/session/"
operator|+
name|session
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
name|session
operator|.
name|addOntology
argument_list|(
name|Origin
operator|.
name|create
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|seeOther
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/ontonet/session/"
operator|+
name|session
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now check scopes
if|if
condition|(
name|toAppend
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|toAppend
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|toAppend
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|getAppendedScopes
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
condition|)
block|{
for|for
control|(
name|OntologyScope
name|sc
range|:
name|getAllScopes
argument_list|()
control|)
block|{
comment|// First remove appended scopes not in the list
name|String
name|scid
init|=
name|sc
operator|.
name|getID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|toAppend
operator|.
name|contains
argument_list|(
name|scid
argument_list|)
operator|&&
name|getAppendedScopes
argument_list|()
operator|.
name|contains
argument_list|(
name|scid
argument_list|)
condition|)
block|{
name|session
operator|.
name|detachScope
argument_list|(
name|scid
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removed scope \"{}\"."
argument_list|,
name|scid
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|scid
range|:
name|toAppend
control|)
block|{
comment|// Then add all the scopes in the list
if|if
condition|(
operator|!
name|getAppendedScopes
argument_list|()
operator|.
name|contains
argument_list|(
name|scid
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Appending scope \"{}\" to session \"{}\"."
argument_list|,
name|scid
argument_list|,
name|session
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|attachScope
argument_list|(
name|scid
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Appended scope \"{}\"."
argument_list|,
name|scid
argument_list|)
expr_stmt|;
block|}
block|}
name|rb
operator|=
name|Response
operator|.
name|seeOther
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/ontonet/session/"
operator|+
name|session
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else {
comment|// log.error("Nothing to do with session {}.", session.getID());
comment|// throw new WebApplicationException(BAD_REQUEST);
comment|// }
comment|// rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML + "; charset=utf-8");
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"POST ontology completed in {} ms."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

