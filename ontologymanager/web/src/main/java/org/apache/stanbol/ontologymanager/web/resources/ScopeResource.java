begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_comment
comment|//import static javax.ws.rs.HttpMethod.DELETE;
end_comment

begin_comment
comment|//import static javax.ws.rs.HttpMethod.GET;
end_comment

begin_comment
comment|//import static javax.ws.rs.HttpMethod.OPTIONS;
end_comment

begin_comment
comment|//import static javax.ws.rs.HttpMethod.POST;
end_comment

begin_comment
comment|//import static javax.ws.rs.HttpMethod.PUT;
end_comment

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_PLAIN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|CONFLICT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|MANCHESTER_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|OWL_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|form
operator|.
name|FormFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|form
operator|.
name|MultiPartBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|model
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|io
operator|.
name|LibrarySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|IrremovableOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|OntologyCollectorModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|collector
operator|.
name|UnmodifiableOntologyCollectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|SetInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|io
operator|.
name|StoredOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyLoadingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|ontology
operator|.
name|OntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|ScopeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|clerezza
operator|.
name|GraphContentInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|clerezza
operator|.
name|GraphSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|sources
operator|.
name|owlapi
operator|.
name|RootOntologySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|util
operator|.
name|OntologyPrettyPrintResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|coode
operator|.
name|owlapi
operator|.
name|manchesterowlsyntax
operator|.
name|ManchesterOWLSyntaxOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|//import static org.apache.stanbol.commons.web.base.CorsHelper.addCORSOrigin;
end_comment

begin_comment
comment|//import static org.apache.stanbol.commons.web.base.CorsHelper.enableCORS;
end_comment

begin_comment
comment|//import org.apache.stanbol.commons.web.base.ContextHelper;
end_comment

begin_comment
comment|/**  * The REST resource of an OntoNet {@link OntologyScope} whose identifier is known.  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Object
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/ontonet/ontology/{scopeid}"
argument_list|)
specifier|public
class|class
name|ScopeResource
extends|extends
name|AbstractOntologyAccessResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/*      * Placeholder for the ONManager to be fetched from the servlet context.      */
annotation|@
name|Reference
specifier|protected
name|ScopeManager
name|onm
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|OntologyProvider
argument_list|<
name|TcProvider
argument_list|>
name|ontologyProvider
decl_stmt|;
comment|/*      * Placeholder for the RegistryManager to be fetched from the servlet context.      */
annotation|@
name|Reference
specifier|protected
name|RegistryManager
name|regMgr
decl_stmt|;
specifier|protected
name|Scope
name|scope
decl_stmt|;
specifier|public
name|ScopeResource
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// log.info("<init> with scope {}", scopeId);
comment|//
comment|// this.servletContext = servletContext;
comment|// this.onm = (ScopeManager) ContextHelper.getServiceFromContext(ScopeManager.class, servletContext);
comment|// this.regMgr = (RegistryManager) ContextHelper.getServiceFromContext(RegistryManager.class,
comment|// servletContext);
comment|// this.ontologyProvider = (OntologyProvider<TcProvider>) ContextHelper.getServiceFromContext(
comment|// OntologyProvider.class, servletContext);
comment|// if (scopeId == null || scopeId.isEmpty()) {
comment|// log.error("Missing path parameter scopeid={}", scopeId);
comment|// throw new WebApplicationException(NOT_FOUND);
comment|// }
comment|// scope = onm.getScope(scopeId);
comment|// // Skip null checks: the scope might be created with a PUT
comment|// if (scope == null) {
comment|// log.error("Scope {} not found", scopeId);
comment|// throw new WebApplicationException(NOT_FOUND);
comment|// }
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|asOntologyGraph
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
comment|// Export to Clerezza Graph, which can be rendered as JSON-LD.
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|scope
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|}
argument_list|)
specifier|public
name|Response
name|asOntologyMixed
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
comment|// Export smaller graphs to OWLOntology due to the more human-readable rendering.
name|ResponseBuilder
name|rb
decl_stmt|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|merge
condition|)
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|scope
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|scope
operator|.
name|export
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|asOntologyOWL
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
comment|// Export to OWLOntology due to the more human-readable rendering.
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|scope
operator|.
name|export
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|DELETE
specifier|public
name|Response
name|deregisterScope
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
name|onm
operator|.
name|deregisterScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|scope
operator|=
literal|null
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|getCoreOntologies
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|listManagedOntologies
argument_list|()
control|)
name|result
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/core"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getCoreSpaceGraph
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
name|OntologySpace
name|space
init|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
decl_stmt|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
name|Graph
name|o
init|=
name|space
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/core"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|getCoreSpaceOWL
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
name|OntologySpace
name|space
init|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
decl_stmt|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
name|OWLOntology
name|o
init|=
name|space
operator|.
name|export
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|URI
name|getCreatedResource
parameter_list|(
name|String
name|ontologyIRI
parameter_list|)
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
literal|"/"
operator|+
name|ontologyIRI
argument_list|)
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|getCustomOntologies
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|listManagedOntologies
argument_list|()
control|)
name|result
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/custom"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getCustomSpaceGraph
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
name|OntologySpace
name|space
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
name|Graph
name|o
init|=
name|space
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/custom"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|getCustomSpaceOWL
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
name|OntologySpace
name|space
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
name|OWLOntology
name|o
init|=
name|space
operator|.
name|export
argument_list|(
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getHtmlInfo
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO move to a dedicated class
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Library
argument_list|>
name|getLibraries
parameter_list|()
block|{
return|return
name|regMgr
operator|.
name|getLibraries
argument_list|()
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|getManageableOntologies
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// for (String s : ontologyProvider.getPublicKeys()) {
comment|// // String s1 = s.split("::")[1];
comment|// if (s != null&& !s.isEmpty()) result.add(s);
comment|// }
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|ontologyProvider
operator|.
name|listPrimaryKeys
argument_list|()
control|)
name|result
operator|.
name|add
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|listManagedOntologies
argument_list|()
control|)
name|result
operator|.
name|remove
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntologyID
name|id
range|:
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|listManagedOntologies
argument_list|()
control|)
name|result
operator|.
name|remove
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/*      * Needed for freemarker      */
specifier|public
name|Scope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
comment|// enableCORS(servletContext, rb, headers, GET, POST, PUT, DELETE, OPTIONS);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/core"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightCore
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
comment|// enableCORS(servletContext, rb, headers, GET, OPTIONS);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/custom"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightCustom
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
comment|// enableCORS(servletContext, rb, headers, GET, OPTIONS);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightOntology
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
comment|// enableCORS(servletContext, rb, headers, GET, DELETE, OPTIONS);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the session.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if either the sessionn does not      *         exist, or the if the ontology either does not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|APPLICATION_JSON
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|managedOntologyGetGraph
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Absolute URL Path {}"
argument_list|,
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology ID {}"
argument_list|,
name|ontologyId
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
block|{
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
name|Graph
name|o
init|=
literal|null
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|OntologySpace
name|spc
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|hasOntology
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|o
operator|=
name|spc
operator|.
name|getOntology
argument_list|(
name|id
argument_list|,
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|spc
operator|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|hasOntology
argument_list|(
name|id
argument_list|)
condition|)
name|o
operator|=
name|spc
operator|.
name|getOntology
argument_list|(
name|id
argument_list|,
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the session.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if either the sessionn does not      *         exist, or the if the ontology either does not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|managedOntologyGetOWL
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Absolute URL Path {}"
argument_list|,
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology ID {}"
argument_list|,
name|ontologyId
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
block|{
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
name|OWLOntology
name|o
init|=
literal|null
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|OntologySpace
name|spc
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|hasOntology
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|o
operator|=
name|spc
operator|.
name|getOntology
argument_list|(
name|id
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|spc
operator|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|hasOntology
argument_list|(
name|id
argument_list|)
condition|)
name|o
operator|=
name|spc
operator|.
name|getOntology
argument_list|(
name|id
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
name|merge
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|managedOntologyShow
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ontologyId
operator|==
literal|null
operator|||
name|ontologyId
operator|.
name|isEmpty
argument_list|()
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|ontologyProvider
operator|.
name|hasOntology
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|)
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
block|{
name|IRI
name|prefix
init|=
name|IRI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"ontonet/ontology/"
argument_list|)
decl_stmt|;
name|OWLOntology
name|o
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|getOntology
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|o
operator|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|getOntology
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
argument_list|,
name|OWLOntology
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
try|try
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|saveOntology
argument_list|(
name|o
argument_list|,
operator|new
name|ManchesterOWLSyntaxOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"ontology"
argument_list|,
operator|new
name|OntologyPrettyPrintResource
argument_list|(
name|uriInfo
argument_list|,
name|out
argument_list|,
name|scope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Unloads an ontology from an ontology scope.      *       * @param scopeId      * @param ontologyid      * @param uriInfo      * @param headers      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/{ontologyId:.+}"
argument_list|)
specifier|public
name|Response
name|managedOntologyUnload
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeId
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyId
operator|!=
literal|null
operator|&&
operator|!
name|ontologyId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OWLOntologyID
name|id
init|=
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|OntologySpace
name|cs
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cs
operator|.
name|hasOntology
argument_list|(
name|id
argument_list|)
condition|)
name|rb
operator|=
name|Response
operator|.
name|notModified
argument_list|()
expr_stmt|;
comment|// ontology not managed
else|else
try|try
block|{
name|onm
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cs
operator|.
name|removeOntology
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IrremovableOntologyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OntologyCollectorModificationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|onm
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|// null/blank ontology ID
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the scope that it should manage the ontology obtained by parsing the supplied content.<br>      *<br>      * Note that the PUT method cannot be used, as it is not possible to predict what ID the ontology will      * have until it is parsed.      *       * @param content      *            the ontology content      * @return {@link Status#OK} if the addition was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session is locked or cannot modified for some      *         other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error occurs.      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|value
operator|=
block|{
name|RDF_XML
block|,
name|OWL_XML
block|,
name|N_TRIPLE
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|FUNCTIONAL_OWL
block|,
name|MANCHESTER_OWL
block|,
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|manageOntology
parameter_list|(
name|InputStream
name|content
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
comment|// Always check session first
else|else
try|try
block|{
name|MediaType
name|mt
init|=
name|headers
operator|.
name|getMediaType
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"POST content claimed to be of type {}."
argument_list|,
name|mt
argument_list|)
expr_stmt|;
name|OWLOntologyID
name|key
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
comment|/*              * For the time being, REST services operate in-memory (i.e. no TcProvider is supplied to the              * input source). This means that only the final processed graph is stored.              *               * TODO : we might find a reason to change that in the future.              */
operator|new
name|GraphContentInputSource
argument_list|(
name|content
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|,
name|ontologyProvider
operator|.
name|getStore
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"FAILED parse with media type {}."
argument_list|,
name|mt
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
comment|// FIXME ugly but will have to do for the time being
name|log
operator|.
name|debug
argument_list|(
literal|"SUCCESS parse with media type {}."
argument_list|,
name|mt
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
comment|// key.split("::")[1];
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// uri = uri.substring((ontologyProvider.getGraphPrefix() + "::").length());
name|URI
name|created
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|!
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|created
operator|=
name|getCreatedResource
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|created
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"POST request for ontology addition completed in {} ms."
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
operator|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"New resource URL is {}"
argument_list|,
name|created
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tells the session that it should manage the ontology obtained by dereferencing the supplied IRI.<br>      *<br>      * Note that the PUT method cannot be used, as it is not possible to predict what ID the ontology will      * have until it is parsed.      *       * @param content      *            the ontology physical IRI      * @return {@link Status#OK} if the addition was successful, {@link Status#NOT_FOUND} if there is no such      *         session at all, {@link Status#FORBIDDEN} if the session is locked or cannot modified for some      *         other reason, {@link Status#INTERNAL_SERVER_ERROR} if some other error occurs.      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|value
operator|=
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|manageOntology
parameter_list|(
name|String
name|iri
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
else|else
try|try
block|{
name|OWLOntologyID
name|key
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
operator|new
name|RootOntologySource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|iri
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|created
init|=
name|getCreatedResource
argument_list|(
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|=
name|Response
operator|.
name|created
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologyCollectorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|FORBIDDEN
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MULTIPART_FORM_DATA
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|TEXT_HTML
block|,
name|TEXT_PLAIN
block|,
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|N3
block|}
argument_list|)
specifier|public
name|Response
name|postOntology
parameter_list|(
name|MultiPartBody
name|data
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" post(MultiPartBody data) scope: {}"
argument_list|,
name|scopeid
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
decl_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
comment|// TODO remove and make sure it is set across the method
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|IRI
name|location
init|=
literal|null
decl_stmt|,
name|library
init|=
literal|null
decl_stmt|;
name|FormFile
name|file
init|=
literal|null
decl_stmt|;
comment|// If found, it takes precedence over location.
name|String
name|format
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// for (BodyPart bpart : data.getBodyParts()) {
comment|// log.debug("is a {}", bpart.getClass());
comment|// if (bpart instanceof FormDataBodyPart) {
comment|// FormDataBodyPart dbp = (FormDataBodyPart) bpart;
comment|// String name = dbp.getName();
comment|// if (name.equals("file")) file = bpart.getEntityAs(File.class);
comment|// else {
comment|// String value = dbp.getValue();
comment|// if (name.equals("format")&& !value.equals("auto")) format = value;
comment|// else if (name.equals("url")) try {
comment|// URI.create(value); // To throw 400 if malformed.
comment|// location = IRI.create(value);
comment|// } catch (Exception ex) {
comment|// log.error("Malformed IRI for " + value, ex);
comment|// throw new WebApplicationException(ex, BAD_REQUEST);
comment|// }
comment|// else if (name.equals("library")&& !"null".equals(value)) try {
comment|// URI.create(value); // To throw 400 if malformed.
comment|// library = IRI.create(value);
comment|// } catch (Exception ex) {
comment|// log.error("Malformed IRI for " + value, ex);
comment|// throw new WebApplicationException(ex, BAD_REQUEST);
comment|// }
comment|// else if (name.equals("stored")&& !"null".equals(value)) {
comment|// log.info("Request to manage ontology with key {}", value);
comment|// keys.add(value);
comment|// }
comment|// }
comment|//
comment|// }
comment|// }
if|if
condition|(
name|data
operator|.
name|getFormFileParameterValues
argument_list|(
literal|"file"
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|file
operator|=
name|data
operator|.
name|getFormFileParameterValues
argument_list|(
literal|"file"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// else {
if|if
condition|(
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"format"
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|value
init|=
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"format"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|"auto"
argument_list|)
condition|)
block|{
name|format
operator|=
name|value
expr_stmt|;
block|}
block|}
if|if
condition|(
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"url"
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|value
init|=
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"url"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|URI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// To throw 400 if malformed.
name|location
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed IRI for param url "
operator|+
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"library"
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|value
init|=
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"library"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|URI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// To throw 400 if malformed.
name|library
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed IRI for param library "
operator|+
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"stored"
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|value
init|=
name|data
operator|.
name|getTextParameterValues
argument_list|(
literal|"stored"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Parameters:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"url: {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"format: {}"
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"keys: {}"
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|boolean
name|fileOk
init|=
name|file
operator|!=
literal|null
decl_stmt|;
comment|// if(fileOk&& !(file.canRead()&& file.exists())){
comment|// log.error("File is not accessible: {}", file);
comment|// throw new WebApplicationException(INTERNAL_SERVER_ERROR);
comment|// }
if|if
condition|(
name|fileOk
operator|||
name|location
operator|!=
literal|null
operator|||
name|library
operator|!=
literal|null
condition|)
block|{
comment|// File and location take precedence
comment|// src = new GraphContentInputSource(content, format, ontologyProvider.getStore());
comment|// Then add the file
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|src
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileOk
condition|)
block|{
comment|/*                  * Because the ontology provider's load method could fail after only one attempt without                  * resetting the stream, we might have to do that ourselves.                  */
name|List
argument_list|<
name|String
argument_list|>
name|formats
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
operator|&&
operator|!
name|format
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|formats
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|format
argument_list|)
expr_stmt|;
else|else
comment|// The RESTful API has its own list of preferred formats
name|formats
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|RDF_XML
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|N3
block|,
name|N_TRIPLE
block|,
name|OWL_XML
block|,
name|FUNCTIONAL_OWL
block|,
name|MANCHESTER_OWL
block|,
name|RDF_JSON
block|}
argument_list|)
expr_stmt|;
name|int
name|unsupported
init|=
literal|0
decl_stmt|,
name|failed
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itf
init|=
name|formats
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|itf
operator|.
name|hasNext
argument_list|()
condition|)
throw|throw
operator|new
name|OntologyLoadingException
argument_list|(
literal|"No suitable format found or defined."
argument_list|)
throw|;
do|do
block|{
name|String
name|f
init|=
name|itf
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Re-instantiate the stream on every attempt
name|InputStream
name|content
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|file
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
comment|// ClerezzaOWLUtils.guessOntologyID(new FileInputStream(file), Parser.getInstance(),
comment|// f);
name|OWLOntologyID
name|guessed
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|Parser
operator|.
name|getInstance
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"guessed ontology id: {}"
argument_list|,
name|guessed
argument_list|)
expr_stmt|;
if|if
condition|(
name|guessed
operator|!=
literal|null
operator|&&
operator|!
name|guessed
operator|.
name|isAnonymous
argument_list|()
operator|&&
name|ontologyProvider
operator|.
name|hasOntology
argument_list|(
name|guessed
argument_list|)
condition|)
block|{
comment|// rb = Response.status(Status.CONFLICT);
name|this
operator|.
name|submitted
operator|=
name|guessed
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|)
condition|)
block|{
name|rb
operator|.
name|entity
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"conflict.ftl"
argument_list|,
operator|new
name|ScopeResultData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
name|content
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|file
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Recreated input stream for format {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|src
operator|=
operator|new
name|GraphContentInputSource
argument_list|(
name|content
argument_list|,
name|f
argument_list|,
name|ontologyProvider
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"POST method failed for media type {}. This should not happen (should fail earlier)"
argument_list|,
name|headers
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
comment|// rb = Response.status(UNSUPPORTED_MEDIA_TYPE);
name|unsupported
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">>> FAILURE format {} (I/O error)"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|failed
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// SAXParseException and others
name|log
operator|.
name|debug
argument_list|(
literal|">>> FAILURE format {} (parse error)"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|failed
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
name|src
operator|==
literal|null
operator|&&
name|itf
operator|.
name|hasNext
argument_list|()
condition|)
do|;
block|}
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|OWLOntologyID
name|key
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isAnonymous
argument_list|()
condition|)
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
comment|// FIXME ugly but will have to do for the time being
name|String
name|uri
init|=
comment|// key.split("::")[1];
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// uri = uri.substring((ontologyProvider.getGraphPrefix() + "::").length());
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|!
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|seeOther
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/ontonet/ontology/"
operator|+
name|scope
operator|.
name|getID
argument_list|()
operator|+
literal|"/"
operator|+
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|==
literal|null
condition|)
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|addOntology
argument_list|(
operator|new
name|StoredOntologySource
argument_list|(
name|OntologyUtils
operator|.
name|decode
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|=
name|Response
operator|.
name|seeOther
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/ontonet/ontology/"
operator|+
name|scope
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else throw new WebApplicationException(BAD_REQUEST);
comment|// rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML + "; charset=utf-8");
comment|// FIXME return an appropriate response e.g. 201
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * At least one between corereg and coreont must be present. Registry iris supersede ontology iris.      *       * @param scopeid      * @param coreRegistry      *            a. If it is a well-formed IRI it supersedes<code>coreOntology</code>.      * @param coreOntologies      * @param customRegistry      *            a. If it is a well-formed IRI it supersedes<code>customOntology</code>.      * @param customOntologies      * @param activate      *            if true, the new scope will be activated upon creation.      * @param uriInfo      * @param headers      * @return      */
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|registerScope
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"corereg"
argument_list|)
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|coreRegistries
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"coreont"
argument_list|)
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|coreOntologies
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"activate"
argument_list|)
name|boolean
name|activate
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Request URI {}"
argument_list|,
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
expr_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScope
argument_list|(
name|scopeid
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
argument_list|>
name|srcs
init|=
operator|new
name|ArrayList
argument_list|<
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|coreOntologies
operator|.
name|size
argument_list|()
operator|+
name|coreRegistries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// First thing, check registry sources.
if|if
condition|(
name|coreRegistries
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|reg
range|:
name|coreRegistries
control|)
if|if
condition|(
name|reg
operator|!=
literal|null
operator|&&
operator|!
name|reg
operator|.
name|isEmpty
argument_list|()
condition|)
try|try
block|{
comment|// Library IDs are sanitized differently
name|srcs
operator|.
name|add
argument_list|(
operator|new
name|LibrarySource
argument_list|(
name|URIUtils
operator|.
name|desanitize
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|reg
argument_list|)
argument_list|)
argument_list|,
name|regMgr
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e1
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
comment|// Bad or not supplied core registry, try the ontology.
block|}
comment|// Then ontology sources
if|if
condition|(
name|coreOntologies
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|ont
range|:
name|coreOntologies
control|)
if|if
condition|(
name|ont
operator|!=
literal|null
operator|&&
operator|!
name|ont
operator|.
name|isEmpty
argument_list|()
condition|)
try|try
block|{
name|srcs
operator|.
name|add
argument_list|(
operator|new
name|RootOntologySource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ont
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e2
parameter_list|)
block|{
comment|// If this fails too, throw a bad request.
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e2
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
comment|// Now the creation.
try|try
block|{
comment|// Expand core sources
name|List
argument_list|<
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
argument_list|>
name|expanded
init|=
operator|new
name|ArrayList
argument_list|<
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|coreSrc
range|:
name|srcs
control|)
if|if
condition|(
name|coreSrc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|coreSrc
operator|instanceof
name|SetInputSource
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
operator|(
name|SetInputSource
argument_list|<
name|?
argument_list|>
operator|)
name|coreSrc
operator|)
operator|.
name|getOntologies
argument_list|()
control|)
block|{
name|OntologyInputSource
argument_list|<
name|?
argument_list|>
name|src
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|OWLOntology
condition|)
name|src
operator|=
operator|new
name|RootOntologySource
argument_list|(
operator|(
name|OWLOntology
operator|)
name|o
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|TripleCollection
condition|)
name|src
operator|=
operator|new
name|GraphSource
argument_list|(
operator|(
name|TripleCollection
operator|)
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
name|expanded
operator|.
name|add
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|expanded
operator|.
name|add
argument_list|(
name|coreSrc
argument_list|)
expr_stmt|;
comment|// Must be denoting a single ontology
block|}
name|scope
operator|=
name|onm
operator|.
name|createOntologyScope
argument_list|(
name|scopeid
argument_list|,
name|expanded
operator|.
name|toArray
argument_list|(
operator|new
name|OntologyInputSource
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup and register the scope. If no custom space was set, it will
comment|// still be open for modification.
name|scope
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|onm
operator|.
name|setScopeActive
argument_list|(
name|scopeid
argument_list|,
name|activate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateIDException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|CONFLICT
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|created
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
comment|// addCORSOrigin(servletContext, rb, headers);
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
class|class
name|ScopeResultData
extends|extends
name|ResultData
block|{
specifier|public
name|OWLOntologyID
name|getRepresentedOntologyKey
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"getRepresentedOntologyKey {}"
argument_list|,
name|ScopeResource
operator|.
name|this
operator|.
name|getRepresentedOntologyKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ScopeResource
operator|.
name|this
operator|.
name|getRepresentedOntologyKey
argument_list|()
return|;
block|}
specifier|public
name|String
name|stringForm
parameter_list|(
name|OWLOntologyID
name|ontologyID
parameter_list|)
block|{
return|return
name|OntologyUtils
operator|.
name|encode
argument_list|(
name|ontologyID
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

