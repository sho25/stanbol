begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyCollectorModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This resource represents ontologies loaded within a scope.  *   * @author alexdma  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ontonet/ontology/{scopeid}/{ontologyId:.+}"
argument_list|)
specifier|public
class|class
name|ScopeOntologyResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/*      * Placeholder for the ONManager to be fetched from the servlet context.      */
specifier|protected
name|ONManager
name|onm
decl_stmt|;
specifier|protected
name|OntologyScope
name|scope
decl_stmt|;
specifier|public
name|ScopeOntologyResource
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"scopeid"
argument_list|)
name|String
name|scopeId
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|servletContext
operator|=
name|servletContext
expr_stmt|;
name|this
operator|.
name|onm
operator|=
operator|(
name|ONManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ONManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|scope
operator|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|scopeId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the ontology with the given identifier in its version managed by the session.      *       * @param sessionId      *            the session identifier.      * @param ontologyId      *            the ontology identifier.      * @param uriInfo      * @param headers      * @return the requested managed ontology, or {@link Status#NOT_FOUND} if either the sessionn does not      *         exist, or the if the ontology either does not exist or is not managed.      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getManagedOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"ontologyId"
argument_list|)
name|String
name|ontologyId
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"merge"
argument_list|)
name|boolean
name|merge
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
comment|// First of all, it could be a simple request for the space root!
name|String
name|absur
init|=
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Absolute URL Path {}"
argument_list|,
name|absur
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Ontology ID {}"
argument_list|,
name|ontologyId
argument_list|)
expr_stmt|;
name|IRI
name|ontiri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
comment|// TODO: hack (ma anche no)
if|if
condition|(
operator|!
name|ontiri
operator|.
name|isAbsolute
argument_list|()
condition|)
name|ontiri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|absur
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
comment|// First of all, it could be a simple request for the space root!
name|String
name|temp
init|=
name|scopeId
operator|+
literal|"/"
operator|+
name|ontologyId
decl_stmt|;
name|OntologySpace
name|space
init|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|equals
argument_list|(
name|space
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
return|return
name|Response
operator|.
name|ok
argument_list|(
name|space
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
else|else
block|{
name|space
operator|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|temp
operator|.
name|equals
argument_list|(
name|space
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
return|return
name|Response
operator|.
name|ok
argument_list|(
name|space
operator|.
name|export
argument_list|(
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Graph
name|o
init|=
literal|null
decl_stmt|;
name|IRI
name|ontologyIri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|ontologyId
argument_list|)
decl_stmt|;
name|OntologySpace
name|spc
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|hasOntology
argument_list|(
name|ontologyIri
argument_list|)
condition|)
block|{
comment|// o = spc.getOntology(ontologyIri, merge);
name|o
operator|=
name|spc
operator|.
name|getOntology
argument_list|(
name|ontologyIri
argument_list|,
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|spc
operator|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|spc
operator|!=
literal|null
operator|&&
name|spc
operator|.
name|hasOntology
argument_list|(
name|ontologyIri
argument_list|)
condition|)
comment|// o = spc.getOntology(ontologyIri, merge);
name|o
operator|=
name|spc
operator|.
name|getOntology
argument_list|(
name|ontologyIri
argument_list|,
name|Graph
operator|.
name|class
argument_list|,
name|merge
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|o
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Unloads an ontology from an ontology scope.      *       * @param scopeId      * @param ontologyid      * @param uriInfo      * @param headers      */
annotation|@
name|DELETE
specifier|public
name|void
name|unloadOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"uri"
argument_list|)
name|String
name|ontologyid
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|ontologyid
operator|!=
literal|null
operator|&&
operator|!
name|ontologyid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// String scopeURI = uriInfo.getAbsolutePath().toString().replace(ontologyid, "");
comment|// IRI scopeIri = IRI.create(uriInfo.getBaseUri() + "ontology/" + scopeId);
name|IRI
name|ontIri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|ontologyid
argument_list|)
decl_stmt|;
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologyScope
name|scope
init|=
name|reg
operator|.
name|getScope
argument_list|(
name|scopeId
argument_list|)
decl_stmt|;
name|OntologySpace
name|cs
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|hasOntology
argument_list|(
name|ontIri
argument_list|)
condition|)
block|{
try|try
block|{
name|reg
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cs
operator|.
name|removeOntology
argument_list|(
name|ontIri
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OntologyCollectorModificationException
name|e
parameter_list|)
block|{
name|reg
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

