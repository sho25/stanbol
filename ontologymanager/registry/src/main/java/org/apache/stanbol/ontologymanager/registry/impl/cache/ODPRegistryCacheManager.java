begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|impl
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|FileDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|OWLOntologyDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|MissingImportEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|MissingImportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyLoaderListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|UnknownOWLOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @author Enrico Daga  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ODPRegistryCacheManager
block|{
comment|/**      * Restrict instantiation      */
specifier|private
name|ODPRegistryCacheManager
parameter_list|()
block|{}
comment|/** 	  * 	  */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*      * TODO bundle path or something      */
specifier|public
specifier|static
specifier|final
name|String
name|WORKSPACE_PATH
init|=
literal|""
comment|/*                                                    * ResourcesPlugin.getWorkspace()                                                    * .getRoot().getLocationURI(). toString()                                                    */
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMPORARY_DIR_NAME
init|=
literal|".xd"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMPORARY_FILE_PREFIX
init|=
literal|"uri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMPORARY_FILE_EXTENSION
init|=
literal|".res"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMPORARY_URI_REGISTRY
init|=
literal|".registry"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URI_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|URI
argument_list|,
name|File
argument_list|>
name|uris
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|URI
argument_list|,
name|IRI
argument_list|>
name|oiri
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|IRI
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|URI
argument_list|>
name|unresolvedURIs
init|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|OWLOntologyManager
name|getManager
parameter_list|()
block|{
return|return
name|manager
return|;
block|}
specifier|public
specifier|static
name|void
name|addResource
parameter_list|(
name|OWLOntology
name|ontology
parameter_list|,
name|URI
name|virtualPhysicalURI
parameter_list|)
throws|throws
name|ODPRegistryCacheException
block|{
name|File
name|file
init|=
name|newFile
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheOntology
argument_list|(
name|virtualPhysicalURI
argument_list|,
name|file
argument_list|,
name|ontology
argument_list|)
expr_stmt|;
comment|// manager.saveOntology(ontology, new RDFXMLOntologyFormat(), file
comment|// .toURI());
block|}
catch|catch
parameter_list|(
name|UnknownOWLOntologyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// uris.put(virtualPhysicalURI, file);
block|}
comment|/**      * uri is the physical uri      *       * @param uri      * @return      * @throws ODPRegistryCacheException      * @throws URIUnresolvableException      */
specifier|public
specifier|static
specifier|synchronized
name|OWLOntology
name|getOntology
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|ODPRegistryCacheException
throws|,
name|URIUnresolvableException
block|{
if|if
condition|(
name|getUnresolvedURIs
argument_list|()
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
condition|)
throw|throw
operator|new
name|URIUnresolvableException
argument_list|()
throw|;
try|try
block|{
if|if
condition|(
name|uris
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
return|return
name|retrieveLocalResource
argument_list|(
name|uri
argument_list|)
return|;
else|else
return|return
name|retrieveRemoteResource
argument_list|(
name|uri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownOWLOntologyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|OWLOntologyDocumentSource
name|getOntologyInputSource
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|ODPRegistryCacheException
throws|,
name|URIUnresolvableException
block|{
if|if
condition|(
name|getUnresolvedURIs
argument_list|()
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
condition|)
throw|throw
operator|new
name|URIUnresolvableException
argument_list|()
throw|;
if|if
condition|(
name|uris
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|File
name|f
init|=
name|uris
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|FileDocumentSource
name|fds
init|=
operator|new
name|FileDocumentSource
argument_list|(
name|f
argument_list|)
decl_stmt|;
return|return
name|fds
return|;
block|}
else|else
block|{
try|try
block|{
name|retrieveRemoteResource
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|getOntologyInputSource
argument_list|(
name|uri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownOWLOntologyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODPRegistryCacheException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|URI
name|getRegistryURI
parameter_list|()
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
name|WORKSPACE_PATH
operator|+
name|URI_SEPARATOR
operator|+
name|TEMPORARY_DIR_NAME
operator|+
name|URI_SEPARATOR
operator|+
name|TEMPORARY_URI_REGISTRY
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|registryContains
parameter_list|(
name|URI
name|ontologyURI
parameter_list|)
block|{
return|return
name|uris
operator|.
name|containsKey
argument_list|(
name|ontologyURI
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|URI
name|getTemporaryFolder
parameter_list|()
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
name|WORKSPACE_PATH
operator|+
name|URI_SEPARATOR
operator|+
name|TEMPORARY_DIR_NAME
argument_list|)
return|;
block|}
comment|/**      * @return the unresolvedURIs      */
specifier|public
specifier|static
name|Set
argument_list|<
name|URI
argument_list|>
name|getUnresolvedURIs
parameter_list|()
block|{
return|return
name|unresolvedURIs
return|;
block|}
specifier|public
specifier|static
name|File
name|newFile
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|getTemporaryFolder
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|URI_SEPARATOR
operator|+
name|TEMPORARY_FILE_PREFIX
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TEMPORARY_FILE_EXTENSION
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|file
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|OWLOntology
name|retrieveLocalResource
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|OWLOntologyCreationException
throws|,
name|ODPRegistryCacheException
throws|,
name|URIUnresolvableException
block|{
name|File
name|file
init|=
name|uris
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|uris
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|getOntology
argument_list|(
name|uri
argument_list|)
return|;
block|}
name|manager
operator|.
name|setSilentMissingImportsHandling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addMissingImportListener
argument_list|(
operator|new
name|MissingImportListener
argument_list|()
block|{
specifier|public
name|void
name|importMissing
parameter_list|(
name|MissingImportEvent
name|arg0
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getUnresolvedURIs
argument_list|()
operator|.
name|contains
argument_list|(
name|arg0
operator|.
name|getImportedOntologyURI
argument_list|()
argument_list|)
condition|)
name|getUnresolvedURIs
argument_list|()
operator|.
name|add
argument_list|(
name|arg0
operator|.
name|getImportedOntologyURI
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|IRI
name|oi
init|=
name|oiri
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|OWLOntology
name|ontology
init|=
literal|null
decl_stmt|;
name|ontology
operator|=
name|manager
operator|.
name|getOntology
argument_list|(
name|oi
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontology
operator|==
literal|null
condition|)
try|try
block|{
name|ontology
operator|=
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|ontology
operator|=
name|manager
operator|.
name|getOntology
argument_list|(
name|e
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ontology
return|;
block|}
comment|/**      * Gets the remote ontology and saves it locally      *       * @param uri      * @return      * @throws OWLOntologyCreationException      * @throws UnknownOWLOntologyException      * @throws OWLOntologyStorageException      */
specifier|private
specifier|static
specifier|synchronized
name|OWLOntology
name|retrieveRemoteResource
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|OWLOntologyCreationException
throws|,
name|UnknownOWLOntologyException
throws|,
name|OWLOntologyStorageException
block|{
name|manager
operator|.
name|setSilentMissingImportsHandling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addMissingImportListener
argument_list|(
operator|new
name|MissingImportListener
argument_list|()
block|{
specifier|public
name|void
name|importMissing
parameter_list|(
name|MissingImportEvent
name|arg0
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getUnresolvedURIs
argument_list|()
operator|.
name|contains
argument_list|(
name|arg0
operator|.
name|getImportedOntologyURI
argument_list|()
argument_list|)
condition|)
name|getUnresolvedURIs
argument_list|()
operator|.
name|add
argument_list|(
name|arg0
operator|.
name|getImportedOntologyURI
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addOntologyLoaderListener
argument_list|(
operator|new
name|OWLOntologyLoaderListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|startedLoadingOntology
parameter_list|(
name|LoadingStartedEvent
name|event
parameter_list|)
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|finishedLoadingOntology
parameter_list|(
name|LoadingFinishedEvent
name|event
parameter_list|)
block|{
name|URI
name|onturi
init|=
name|event
operator|.
name|getDocumentIRI
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getUnresolvedURIs
argument_list|()
operator|.
name|add
argument_list|(
name|onturi
argument_list|)
expr_stmt|;
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|class
argument_list|)
operator|.
name|warn
argument_list|(
literal|"Failed to resolve ontology at "
operator|+
name|onturi
operator|+
literal|" . Skipping."
argument_list|,
name|event
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|uris
operator|.
name|containsKey
argument_list|(
name|onturi
argument_list|)
condition|)
block|{
name|cacheOntology
argument_list|(
name|onturi
argument_list|,
name|newFile
argument_list|()
argument_list|,
name|manager
operator|.
name|getOntology
argument_list|(
name|event
operator|.
name|getOntologyID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownOWLOntologyException
name|e
parameter_list|)
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|class
argument_list|)
operator|.
name|warn
argument_list|(
literal|"Failed to cache ontology at "
operator|+
name|onturi
operator|+
literal|" . Skipping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getUnresolvedURIs
argument_list|()
operator|.
name|add
argument_list|(
name|onturi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|class
argument_list|)
operator|.
name|warn
argument_list|(
literal|"Failed to cache ontology at "
operator|+
name|onturi
operator|+
literal|" . Skipping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getUnresolvedURIs
argument_list|()
operator|.
name|add
argument_list|(
name|onturi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|OWLOntology
name|ont
decl_stmt|;
try|try
block|{
name|ont
operator|=
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|ont
operator|=
name|manager
operator|.
name|getOntology
argument_list|(
name|e
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|newFile
argument_list|()
decl_stmt|;
name|cacheOntology
argument_list|(
name|uri
argument_list|,
name|file
argument_list|,
name|ont
argument_list|)
expr_stmt|;
return|return
name|ont
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|void
name|cacheOntology
parameter_list|(
name|URI
name|physicalRemoteUri
parameter_list|,
name|File
name|file
parameter_list|,
name|OWLOntology
name|ont
parameter_list|)
throws|throws
name|UnknownOWLOntologyException
throws|,
name|OWLOntologyStorageException
block|{
name|uris
operator|.
name|put
argument_list|(
name|physicalRemoteUri
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|oiri
operator|.
name|put
argument_list|(
name|physicalRemoteUri
argument_list|,
name|ont
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setOntologyDocumentIRI
argument_list|(
name|ont
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|saveOntology
argument_list|(
name|ont
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|save
parameter_list|()
block|{
name|File
name|registry
init|=
operator|new
name|File
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|getRegistryURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|.
name|exists
argument_list|()
condition|)
name|registry
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|registry
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|u
range|:
name|uris
operator|.
name|keySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|u
operator|.
name|toString
argument_list|()
operator|+
literal|"|"
operator|+
name|uris
operator|.
name|get
argument_list|(
name|u
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|load
parameter_list|()
block|{
name|File
name|registry
init|=
operator|new
name|File
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|getRegistryURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registry
operator|.
name|exists
argument_list|()
condition|)
return|return
literal|false
return|;
name|Map
argument_list|<
name|URI
argument_list|,
name|File
argument_list|>
name|newUris
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|registry
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|<
literal|0
condition|)
continue|continue;
name|String
index|[]
name|splitted
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|newUris
operator|.
name|put
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|splitted
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|splitted
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|class
argument_list|)
operator|.
name|error
argument_list|(
literal|"Failed to load registry "
operator|+
name|getRegistryURI
argument_list|()
operator|+
literal|" File not found."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|class
argument_list|)
operator|.
name|error
argument_list|(
literal|"Failed to load registry "
operator|+
name|getRegistryURI
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|uris
operator|.
name|clear
argument_list|()
expr_stmt|;
name|uris
operator|=
name|newUris
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|clean
parameter_list|()
block|{
comment|// FileUriHelper fu = new FileUriHelper();
try|try
block|{
comment|// fu
comment|// .deleteDir(new File(ODPRegistryCacheManager
comment|// .getTemporaryFolder()));
name|uris
operator|.
name|clear
argument_list|()
expr_stmt|;
name|manager
operator|=
literal|null
expr_stmt|;
name|manager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ODPRegistryCacheManager
operator|.
name|class
argument_list|)
operator|.
name|error
argument_list|(
literal|"OWL cache manager cleanup failed. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

