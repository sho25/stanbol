begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|impl
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|IllegalRegistryCycleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryContentListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|model
operator|.
name|RegistryItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_comment
comment|/**  * Abstract default implementation of registry items.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRegistryItem
implements|implements
name|RegistryItem
block|{
comment|/* Two-way adjacency index TODO use maps instead? */
specifier|protected
name|Map
argument_list|<
name|IRI
argument_list|,
name|RegistryItem
argument_list|>
name|children
init|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|RegistryItem
argument_list|>
argument_list|()
decl_stmt|,
name|parents
init|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|RegistryItem
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|IRI
name|iri
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|RegistryContentListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|RegistryContentListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|AbstractRegistryItem
parameter_list|(
name|IRI
name|iri
parameter_list|)
block|{
name|this
operator|.
name|iri
operator|=
name|iri
expr_stmt|;
block|}
specifier|public
name|AbstractRegistryItem
parameter_list|(
name|IRI
name|iri
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|iri
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addChild
parameter_list|(
name|RegistryItem
name|child
parameter_list|)
throws|throws
name|RegistryContentException
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|child
argument_list|)
operator|||
name|parents
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalRegistryCycleException
argument_list|(
name|this
argument_list|,
name|child
argument_list|,
name|RegistryOperation
operator|.
name|ADD_CHILD
argument_list|)
throw|;
if|if
condition|(
operator|!
name|children
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|children
operator|.
name|put
argument_list|(
name|child
operator|.
name|getIRI
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
try|try
block|{
name|child
operator|.
name|addParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryContentException
name|e
parameter_list|)
block|{
comment|// Shouldn't happen. null is always legal.
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addParent
parameter_list|(
name|RegistryItem
name|parent
parameter_list|)
throws|throws
name|RegistryContentException
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|||
name|children
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalRegistryCycleException
argument_list|(
name|this
argument_list|,
name|parent
argument_list|,
name|RegistryOperation
operator|.
name|ADD_PARENT
argument_list|)
throw|;
if|if
condition|(
operator|!
name|parents
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|parents
operator|.
name|put
argument_list|(
name|parent
operator|.
name|getIRI
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
try|try
block|{
name|parent
operator|.
name|addChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryContentException
name|e
parameter_list|)
block|{
comment|// Shouldn't happen. null is always legal.
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRegistryContentListener
parameter_list|(
name|RegistryContentListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearChildren
parameter_list|()
block|{
for|for
control|(
name|RegistryItem
name|child
range|:
name|children
operator|.
name|values
argument_list|()
control|)
name|removeChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearParents
parameter_list|()
block|{
for|for
control|(
name|RegistryItem
name|parent
range|:
name|parents
operator|.
name|values
argument_list|()
control|)
name|removeParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegistryContentListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|fireContentRequested
parameter_list|(
name|RegistryItem
name|item
parameter_list|)
block|{
for|for
control|(
name|RegistryContentListener
name|listener
range|:
name|getRegistryContentListeners
argument_list|()
control|)
name|listener
operator|.
name|registryContentRequested
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RegistryItem
name|getChild
parameter_list|(
name|IRI
name|id
parameter_list|)
block|{
return|return
name|children
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegistryItem
index|[]
name|getChildren
parameter_list|()
block|{
return|return
name|children
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|RegistryItem
index|[
name|children
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getIRI
parameter_list|()
block|{
return|return
name|iri
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegistryItem
name|getParent
parameter_list|(
name|IRI
name|id
parameter_list|)
block|{
return|return
name|parents
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegistryItem
index|[]
name|getParents
parameter_list|()
block|{
return|return
name|parents
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|RegistryItem
index|[
name|parents
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|RegistryContentListener
argument_list|>
name|getRegistryContentListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildren
parameter_list|()
block|{
return|return
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasParents
parameter_list|()
block|{
return|return
operator|!
name|parents
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prune
parameter_list|()
block|{
name|clearChildren
argument_list|()
expr_stmt|;
name|clearParents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeChild
parameter_list|(
name|RegistryItem
name|child
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|children
operator|.
name|remove
argument_list|(
name|child
operator|.
name|getIRI
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|removeParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeParent
parameter_list|(
name|RegistryItem
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parents
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|parents
operator|.
name|remove
argument_list|(
name|parent
operator|.
name|getIRI
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|removeChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRegistryContentListener
parameter_list|(
name|RegistryContentListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|string
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

