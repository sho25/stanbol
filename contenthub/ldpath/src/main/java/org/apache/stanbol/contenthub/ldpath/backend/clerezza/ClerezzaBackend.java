begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NoConvertorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|util
operator|.
name|W3CDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_comment
comment|/**  * @author anil.sinaci  *   */
end_comment

begin_class
specifier|public
class|class
name|ClerezzaBackend
implements|implements
name|RDFBackend
argument_list|<
name|Resource
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClerezzaBackend
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSD
init|=
literal|"http://www.w3.org/2001/XMLSchema#"
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdInteger
init|=
name|xsd
argument_list|(
literal|"integer"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdInt
init|=
name|xsd
argument_list|(
literal|"int"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdShort
init|=
name|xsd
argument_list|(
literal|"short"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdByte
init|=
name|xsd
argument_list|(
literal|"byte"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdLong
init|=
name|xsd
argument_list|(
literal|"long"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdDouble
init|=
name|xsd
argument_list|(
literal|"double"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdFloat
init|=
name|xsd
argument_list|(
literal|"float"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdAnyURI
init|=
name|xsd
argument_list|(
literal|"anyURI"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdDateTime
init|=
name|xsd
argument_list|(
literal|"dateTime"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdBoolean
init|=
name|xsd
argument_list|(
literal|"boolean"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsdString
init|=
name|xsd
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|xsd
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|XSD
operator|+
name|name
return|;
block|}
specifier|private
name|MGraph
name|mGraph
decl_stmt|;
specifier|public
name|ClerezzaBackend
parameter_list|(
name|MGraph
name|mGraph
parameter_list|)
block|{
name|this
operator|.
name|mGraph
operator|=
name|mGraph
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating literal with content \"{}\""
argument_list|,
name|content
argument_list|)
expr_stmt|;
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|content
argument_list|)
return|;
block|}
specifier|private
name|Object
name|getTypedObject
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Object
name|obj
init|=
name|content
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdInteger
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdInt
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdShort
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdByte
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdLong
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdDouble
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdFloat
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdAnyURI
argument_list|)
condition|)
block|{
name|obj
operator|=
operator|new
name|UriRef
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdDateTime
argument_list|)
condition|)
block|{
name|DateFormat
name|dateFormat
init|=
operator|new
name|W3CDateFormat
argument_list|()
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdBoolean
argument_list|)
condition|)
block|{
name|obj
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdString
argument_list|)
condition|)
block|{
name|obj
operator|=
name|content
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|,
name|Locale
name|language
parameter_list|,
name|URI
name|type
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating literal with content \"{}\", language {}, datatype {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|content
block|,
name|language
block|,
name|type
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
operator|&&
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|createLiteral
argument_list|(
name|content
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|PlainLiteralImpl
argument_list|(
name|content
argument_list|,
operator|new
name|Language
argument_list|(
name|language
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|getTypedObject
argument_list|(
name|content
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|createURI
parameter_list|(
name|String
name|uriref
parameter_list|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|uriref
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|doubleValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Double
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Locale
name|getLiteralLanguage
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|PlainLiteral
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|PlainLiteral
operator|)
name|resource
operator|)
operator|.
name|getLanguage
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Locale
argument_list|(
operator|(
operator|(
name|PlainLiteral
operator|)
name|resource
operator|)
operator|.
name|getLanguage
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a PlainLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getLiteralType
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|TypedLiteral
operator|)
name|resource
operator|)
operator|.
name|getDataType
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
operator|(
operator|(
name|TypedLiteral
operator|)
name|resource
operator|)
operator|.
name|getDataType
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"TypedLiteral datatype was not a valid URI: {}"
argument_list|,
operator|(
operator|(
name|TypedLiteral
operator|)
name|resource
operator|)
operator|.
name|getDataType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBlank
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|resource
operator|instanceof
name|BNode
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLiteral
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|resource
operator|instanceof
name|Literal
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isURI
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|resource
operator|instanceof
name|UriRef
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|listObjects
parameter_list|(
name|Resource
name|subject
parameter_list|,
name|Resource
name|property
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isURI
argument_list|(
name|property
argument_list|)
operator|||
operator|!
operator|(
name|isURI
argument_list|(
name|subject
argument_list|)
operator|||
name|isBlank
argument_list|(
name|subject
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Subject needs to be a URI or blank node, property a URI node"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Resource
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|mGraph
operator|.
name|filter
argument_list|(
operator|(
name|UriRef
operator|)
name|subject
argument_list|,
operator|(
name|UriRef
operator|)
name|property
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|triples
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|listSubjects
parameter_list|(
name|Resource
name|property
parameter_list|,
name|Resource
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isURI
argument_list|(
name|property
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property needs to be a URI node"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Resource
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|mGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
operator|(
name|UriRef
operator|)
name|property
argument_list|,
name|object
argument_list|)
decl_stmt|;
while|while
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|triples
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|longValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Long
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|stringValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|UriRef
condition|)
block|{
return|return
operator|(
operator|(
name|UriRef
operator|)
name|resource
operator|)
operator|.
name|getUnicodeString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|resource
operator|instanceof
name|Literal
condition|)
block|{
return|return
operator|(
operator|(
name|Literal
operator|)
name|resource
operator|)
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|resource
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|booleanValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|dateTimeValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|dateValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|timeValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Float
name|floatValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Float
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|intValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BigInteger
name|integerValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BigDecimal
name|decimalValue
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
try|try
block|{
return|return
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
operator|(
name|TypedLiteral
operator|)
name|resource
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoConvertorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" can not converted, no convertor for the BigDecimal"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a TypedLiteral"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

