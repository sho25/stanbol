begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_interface
specifier|public
interface|interface
name|LDProgramManager
block|{
comment|/** 	 * Saves program to persistent storage with given name and initialize Solr Core with same name 	 * @param programName name of the submitted program, also will be name of corresponding Solr Core 	 * @param ldPathProgram	LDPath Program in the form of {@link String} 	 * @throws LDPathException	is thrown while parsing program and creating Solr Core 	 */
specifier|public
name|void
name|submitProgram
parameter_list|(
name|String
name|programName
parameter_list|,
name|String
name|ldPathProgram
parameter_list|)
throws|throws
name|LDPathException
function_decl|;
comment|/** 	 * Saves program to persistent storage with given name and initialize Solr Core with same name 	 * @param programName name of the submitted program, also will be name of corresponding Solr Core 	 * @param ldPathProgram	LDPath Program in the form of {@link java.io.Reader} 	 * @throws LDPathException	is thrown while parsing program and creating Solr Core 	 */
specifier|public
name|void
name|submitProgram
parameter_list|(
name|String
name|programName
parameter_list|,
name|Reader
name|ldPathProgram
parameter_list|)
throws|throws
name|LDPathException
function_decl|;
comment|/** 	 * Checks whether a program-core pair exist with given name or not 	 * @param programName name of the program/core  	 * @return {@link true} if a program with given name exists; {@link false} otherwise 	 */
specifier|public
name|boolean
name|isManagedProgram
parameter_list|(
name|String
name|programName
parameter_list|)
function_decl|;
comment|/** 	 * Retrieves the program managed by {@link ProgramManager} with given name 	 * @param programName name of the program that will be retrieved 	 * @return requested program as String, if such program does not exist, returns {@link false} 	 */
specifier|public
name|String
name|getProgramByName
parameter_list|(
name|String
name|programName
parameter_list|)
function_decl|;
comment|/** 	 * Deletes both the program and the corresponding Solr Core 	 * @param programName name of the program-core pair to be deleted 	 */
specifier|public
name|void
name|deleteProgram
parameter_list|(
name|String
name|programName
parameter_list|)
function_decl|;
comment|/** 	 * Used to retrieve names and programs of all currently managed program-core pairs 	 * @return All managed programs with their names as {@link LDProgramCollection} 	 */
specifier|public
name|LDProgramCollection
name|retrieveAllPrograms
parameter_list|()
function_decl|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|executeProgram
parameter_list|(
name|String
name|programName
parameter_list|,
name|MGraph
name|graph
parameter_list|)
throws|throws
name|LDPathException
function_decl|;
block|}
end_interface

end_unit

