begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|StoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_comment
comment|/**  * {@link Store} interface for Solr.  *   * @author anil.sinaci  * @author meric.taze  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|SolrStore
extends|extends
name|Store
block|{
specifier|public
specifier|static
specifier|final
name|UriRef
name|TITLE_URI
init|=
operator|new
name|UriRef
argument_list|(
literal|"org.apache.stanbol.contenthub.store.solr.title"
argument_list|)
decl_stmt|;
comment|/**      * Creates a {@link ContentItem} with the given parameters. Created {@link ContentItem} is not persisted,      * this function just creates the object.      *       * @param content      *            The content itself.      * @param id      *            The unique ID for the item. If it is null, {@link SolrStore} should assign a unique ID for      *            this item.      * @param title      *            The title for the content item.      * @param contentType      *            The mimeType of the content.      * @return Created {@link ContentItem}.      * @throws StoreException      */
name|ContentItem
name|create
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Sends the {@link ContentItem} to the {@link EnhancementJobManager} to enhance the content. Afterwards      * saves the item in the default Solr core of the Contenthub.      *       * @param ci      *            The {@link ContentItem} to be enhanced and saved.      * @param chain      *            name of a particular {@link Chain} in which the enhancement engines are ordered according to      *            a specific use case or need      * @return The unique ID of the {@link ContentItem}.      * @throws StoreException      */
name|String
name|enhanceAndPut
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|String
name|chain
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Sends the {@link ContentItem} to the {@link EnhancementJobManager} to enhance the content. Afterwards      * saves the item in the Solr core corresponding to the given<code>indexName</code>.      *       * @param ci      *            The {@link ContentItem} to be enhanced and saved      * @param indexName      *            LDPath program name (name of the Solr core/index) to obtain the corresponding Solr core to      *            store the content item      * @param chain      *            name of a particular {@link Chain} in which the enhancement engines are ordered according to      *            a specific use case or need      * @return The unique ID of the {@link ContentItem}.      * @throws StoreException      */
name|String
name|enhanceAndPut
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|String
name|indexName
parameter_list|,
name|String
name|chain
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Stores the passed {@link ContentItem} in the Solr core corresponding to the specified      *<code>indexName</code>. If<code>null</code> is passed as the LDPath program name (index name), the      * default Solr core of Contenthub is used.      *       * @param ci      *            {@link ContentItem} to be stored      * @param indexName      *            LDPath program name (name of the Solr core/index) to obtain the corresponding Solr core to      *            store the content item      * @return The unique ID of the {@link ContentItem}.      * @throws StoreException      */
name|String
name|put
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Retrieves the {@link ContentItem} from the Solr core corresponding to the specified      *<code>indexName</code>. If<code>null</code> is passed as the LDPath program name (index name), the      * default Solr core of Contenthub is used.      *       * @param id      *            The ID of {@link ContentItem} to be retrieved.      * @param indexName      *            LDPath program name (name of the Solr core/index) to obtain the corresponding Solr core from      *            which the content item will be retrieved      * @return {@link ContentItem} having the specified id      * @throws StoreException      */
name|ContentItem
name|get
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Deletes the {@link ContentItem} from the default Solr core/index of Contenthub.      *       * @param id      *            The ID of the item to be deleted.      */
name|void
name|deleteById
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Deletes the {@link ContentItem} from the default Solr core corresponding to the given      *<code>indexName</code> of the Contenthub.      *       * @param id      *            The ID of the item to be deleted.      * @param indexName      *            LDPath program name (name of the Solr core/index) to obtain the corresponding Solr core from      *            which the content item will be deleted      * @throws StoreException      */
name|void
name|deleteById
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Deletes the {@link ContentItem}s from the default Solr core of Contenthub.      *       * @param id      *            The list of IDs of the items to be deleted.      */
name|void
name|deleteById
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|idList
parameter_list|)
throws|throws
name|StoreException
function_decl|;
comment|/**      * Deletes the {@link ContentItem}s from the Solr core corresponding to the given<code>indexName</code>.      *       * @param idList      *            The list of IDs of the items to be deleted.      * @param indexName      *            LDPath program name (name of the Solr core/index) to obtain the corresponding Solr core from      *            which the content items will be deleted      */
name|void
name|deleteById
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|idList
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|StoreException
function_decl|;
block|}
end_interface

end_unit

