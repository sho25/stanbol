begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|junit
operator|.
name|annotations
operator|.
name|SlingAnnotationsTestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedIndexState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|LDPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|SemanticIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|StoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
operator|.
name|SolrFieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrContentItemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|store
operator|.
name|solr
operator|.
name|manager
operator|.
name|SolrCoreManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|store
operator|.
name|solr
operator|.
name|util
operator|.
name|ContentItemIDOrganizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SlingAnnotationsTestRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|StoreTest
block|{
annotation|@
name|TestReference
specifier|private
name|SolrStore
name|solrStore
decl_stmt|;
annotation|@
name|TestReference
specifier|private
name|SemanticIndexManager
name|semanticIndexManager
decl_stmt|;
annotation|@
name|TestReference
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
annotation|@
name|TestReference
specifier|private
name|ManagedSolrServer
name|managedSolrServer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
if|if
condition|(
name|semanticIndexManager
operator|.
name|isManagedProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
condition|)
block|{
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|isManagedSolrCore
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
condition|)
block|{
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|deleteSolrCore
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSolrContentItemImpl
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrContentItem
name|sci
init|=
operator|new
name|SolrContentItemImpl
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|TestVocabulary
operator|.
name|title
argument_list|,
name|TestVocabulary
operator|.
name|contentByte
argument_list|,
name|TestVocabulary
operator|.
name|contentType
argument_list|,
literal|null
argument_list|,
name|TestVocabulary
operator|.
name|constraints
argument_list|)
decl_stmt|;
name|assertEqual
argument_list|(
name|sci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|consValuesArray
argument_list|,
name|sci
operator|.
name|getConstraints
argument_list|()
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|consFieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDummyCreate
parameter_list|()
throws|throws
name|IOException
block|{
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|create
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|TestVocabulary
operator|.
name|contentByte
argument_list|,
name|TestVocabulary
operator|.
name|contentType
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|TestVocabulary
operator|.
name|contentByte
argument_list|,
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|ContentItemIDOrganizer
operator|.
name|detachBaseURI
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|contentType
argument_list|,
name|ci
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrContentItem
name|sci
init|=
name|solrStore
operator|.
name|create
argument_list|(
name|TestVocabulary
operator|.
name|contentByte
argument_list|,
name|TestVocabulary
operator|.
name|id
argument_list|,
name|TestVocabulary
operator|.
name|title
argument_list|,
name|TestVocabulary
operator|.
name|contentType
argument_list|,
name|TestVocabulary
operator|.
name|constraints
argument_list|)
decl_stmt|;
name|assertEqual
argument_list|(
name|sci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|consValuesArray
argument_list|,
name|sci
operator|.
name|getConstraints
argument_list|()
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|consFieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|StoreException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
name|SolrContentItem
name|sci
init|=
operator|new
name|SolrContentItemImpl
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|TestVocabulary
operator|.
name|title
argument_list|,
name|TestVocabulary
operator|.
name|contentByte
argument_list|,
name|TestVocabulary
operator|.
name|contentType
argument_list|,
literal|null
argument_list|,
name|TestVocabulary
operator|.
name|constraints
argument_list|)
decl_stmt|;
name|solrStore
operator|.
name|put
argument_list|(
name|sci
argument_list|)
expr_stmt|;
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|()
decl_stmt|;
name|SolrDocument
name|result
init|=
name|TestUtils
operator|.
name|getSolrDocument
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|assertEqual
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|deleteDocument
argument_list|(
name|solrServer
argument_list|,
name|solrStore
operator|.
name|getEnhancementGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutWithLD
parameter_list|()
throws|throws
name|StoreException
throws|,
name|IOException
throws|,
name|LDPathException
throws|,
name|SolrServerException
block|{
comment|//We assume that if user give an LD Program, he will not give any constraints
name|SolrContentItem
name|sci
init|=
operator|new
name|SolrContentItemImpl
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|TestVocabulary
operator|.
name|title
argument_list|,
name|TestVocabulary
operator|.
name|contentByte
argument_list|,
name|TestVocabulary
operator|.
name|contentType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|solrStore
operator|.
name|put
argument_list|(
name|sci
argument_list|,
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
decl_stmt|;
name|SolrDocument
name|result
init|=
name|TestUtils
operator|.
name|getSolrDocument
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|assertEqual
argument_list|(
name|result
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|deleteDocument
argument_list|(
name|solrServer
argument_list|,
name|solrStore
operator|.
name|getEnhancementGraph
argument_list|()
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|StoreException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|()
decl_stmt|;
name|TestUtils
operator|.
name|submitDocumentToSolr
argument_list|(
name|solrServer
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SolrContentItem
name|sci
init|=
operator|(
name|SolrContentItem
operator|)
name|solrStore
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertEqual
argument_list|(
name|sci
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|deleteDocument
argument_list|(
name|solrServer
argument_list|,
name|solrStore
operator|.
name|getEnhancementGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWithLD
parameter_list|()
throws|throws
name|LDPathException
throws|,
name|StoreException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
decl_stmt|;
name|TestUtils
operator|.
name|submitDocumentToSolr
argument_list|(
name|solrServer
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SolrContentItem
name|sci
init|=
name|solrStore
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|TestVocabulary
operator|.
name|programName
argument_list|)
decl_stmt|;
name|assertEqual
argument_list|(
name|sci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|deleteDocument
argument_list|(
name|solrServer
argument_list|,
name|solrStore
operator|.
name|getEnhancementGraph
argument_list|()
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteById
parameter_list|()
throws|throws
name|StoreException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|()
decl_stmt|;
name|TestUtils
operator|.
name|submitDocumentToSolr
argument_list|(
name|solrServer
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|solrStore
operator|.
name|deleteById
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|)
expr_stmt|;
name|SolrDocument
name|result
init|=
name|TestUtils
operator|.
name|getSolrDocument
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteByIdWithLD
parameter_list|()
throws|throws
name|StoreException
throws|,
name|SolrServerException
throws|,
name|IOException
throws|,
name|LDPathException
block|{
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
decl_stmt|;
name|TestUtils
operator|.
name|submitDocumentToSolr
argument_list|(
name|solrServer
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|solrStore
operator|.
name|deleteById
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
name|SolrDocument
name|result
init|=
name|TestUtils
operator|.
name|getSolrDocument
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteByIds
parameter_list|()
throws|throws
name|StoreException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|()
decl_stmt|;
name|TestUtils
operator|.
name|submitDocumentToSolr
argument_list|(
name|solrServer
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|idList
operator|.
name|add
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|)
expr_stmt|;
name|idList
operator|.
name|add
argument_list|(
name|TestVocabulary
operator|.
name|id
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|solrStore
operator|.
name|deleteById
argument_list|(
name|idList
argument_list|)
expr_stmt|;
name|SolrDocument
name|result
init|=
name|TestUtils
operator|.
name|getSolrDocument
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteByIdsWithLD
parameter_list|()
throws|throws
name|StoreException
throws|,
name|SolrServerException
throws|,
name|IOException
throws|,
name|LDPathException
block|{
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|SolrServer
name|solrServer
init|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
decl_stmt|;
name|TestUtils
operator|.
name|submitDocumentToSolr
argument_list|(
name|solrServer
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|idList
operator|.
name|add
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|)
expr_stmt|;
name|idList
operator|.
name|add
argument_list|(
name|TestVocabulary
operator|.
name|id
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|solrStore
operator|.
name|deleteById
argument_list|(
name|idList
argument_list|,
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
name|SolrDocument
name|result
init|=
name|TestUtils
operator|.
name|getSolrDocument
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstance
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetServer
parameter_list|()
throws|throws
name|StoreException
throws|,
name|LDPathException
block|{
name|assertNotNull
argument_list|(
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|()
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDefaultSolrServer
parameter_list|()
throws|throws
name|StoreException
block|{
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|createDefaultSolrServer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ManagedIndexState
operator|.
name|ACTIVE
argument_list|,
name|managedSolrServer
operator|.
name|getIndexState
argument_list|(
name|SolrCoreManager
operator|.
name|CONTENTHUB_SOLR_SERVER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//	@Test
comment|//	public void testCreateSolrCore(){
comment|//		SolrCoreManager ins = SolrCoreManager.getInstance(bundleContext, managedSolrServer);
comment|//		ins.createSolrCore(
comment|//                TestVocabulary.programName, ldPathUtils.createSchemaArchive(TestVocabulary.programName, TestVocabulary.ldPathProgram));
comment|//		ins.isManagedSolrCore(TestVocabulary.programName);
comment|//		ins.deleteSolrCore(TestVocabulary.programName);
comment|//	}
comment|//	@Test
comment|//	public void testDeleteSolrCore(){
comment|//
comment|//	}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getSolrConstraints
parameter_list|(
name|SolrDocument
name|result
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|solrConstraints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|itr
init|=
name|result
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SolrFieldName
operator|.
name|isNameReserved
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|result
operator|.
name|getFieldValues
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|solrConstraints
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|solrConstraints
return|;
block|}
specifier|private
name|void
name|assertEqual
parameter_list|(
name|SolrContentItem
name|sci
parameter_list|,
name|boolean
name|checkCons
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|attachedId
argument_list|,
name|sci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|content
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|sci
operator|.
name|getStream
argument_list|()
argument_list|,
name|Constants
operator|.
name|DEFAULT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|contentType
argument_list|,
name|sci
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|title
argument_list|,
name|sci
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkCons
condition|)
block|{
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|consValuesArray
argument_list|,
name|sci
operator|.
name|getConstraints
argument_list|()
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|consFieldName
operator|+
name|TestVocabulary
operator|.
name|consFieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertEqual
parameter_list|(
name|SolrDocument
name|result
parameter_list|,
name|boolean
name|checkCons
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|content
argument_list|,
operator|(
name|String
operator|)
name|result
operator|.
name|getFieldValue
argument_list|(
name|SolrFieldName
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|id
argument_list|,
name|ContentItemIDOrganizer
operator|.
name|detachBaseURI
argument_list|(
operator|(
name|String
operator|)
name|result
operator|.
name|getFieldValue
argument_list|(
name|SolrFieldName
operator|.
name|ID
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|title
argument_list|,
operator|(
name|String
operator|)
name|result
operator|.
name|getFieldValue
argument_list|(
name|SolrFieldName
operator|.
name|TITLE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|contentType
argument_list|,
operator|(
name|String
operator|)
name|result
operator|.
name|getFieldValue
argument_list|(
name|SolrFieldName
operator|.
name|MIMETYPE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|solrConstraints
init|=
name|getSolrConstraints
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkCons
condition|)
block|{
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|constraints
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|consFieldName
argument_list|)
argument_list|,
name|solrConstraints
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|consFieldName
operator|+
name|TestVocabulary
operator|.
name|consFieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

