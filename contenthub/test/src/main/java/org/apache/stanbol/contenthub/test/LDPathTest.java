begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|junit
operator|.
name|annotations
operator|.
name|SlingAnnotationsTestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|LDPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|SemanticIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SlingAnnotationsTestRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|LDPathTest
block|{
annotation|@
name|TestReference
name|SemanticIndexManager
name|semanticIndexManager
decl_stmt|;
comment|/* ClerezzaBackend.java LDPathUtils.java	 */
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
if|if
condition|(
name|semanticIndexManager
operator|.
name|isManagedProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
condition|)
block|{
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmitProgram
parameter_list|()
throws|throws
name|LDPathException
throws|,
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|semanticIndexManager
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"nameProgramMap"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|programMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|semanticIndexManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|,
name|programMap
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
comment|//	@Test
comment|//	public void testGetProgramByName() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, LDPathException{
comment|//		semanticIndexManager.submitProgram(TestVocabulary.programName, TestVocabulary.ldPathProgram);
comment|//		Field field = semanticIndexManager.getClass().getDeclaredField("nameProgramMap");
comment|//		field.setAccessible(true);
comment|//		Map<String,String> programMap = (Map<String, String>) field.get(semanticIndexManager);
comment|//		assertEquals(TestVocabulary.ldPathProgram,programMap.get(TestVocabulary.programName));
comment|//		semanticIndexManager.deleteProgram(TestVocabulary.programName);
comment|//	}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteProgram
parameter_list|()
throws|throws
name|LDPathException
throws|,
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|semanticIndexManager
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"nameProgramMap"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|programMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|semanticIndexManager
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|,
name|programMap
operator|.
name|get
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsManagedProgram
parameter_list|()
throws|throws
name|LDPathException
block|{
name|semanticIndexManager
operator|.
name|submitProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|,
name|TestVocabulary
operator|.
name|ldPathProgram
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|semanticIndexManager
operator|.
name|isManagedProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
argument_list|)
expr_stmt|;
name|semanticIndexManager
operator|.
name|deleteProgram
argument_list|(
name|TestVocabulary
operator|.
name|programName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveAllPrograms
parameter_list|()
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Field
name|field
init|=
name|semanticIndexManager
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"nameProgramMap"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|programMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|semanticIndexManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|programMap
argument_list|,
name|semanticIndexManager
operator|.
name|retrieveAllPrograms
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//	@Test
comment|//	public void testExecuteProgram(){
comment|//
comment|//	}
block|}
end_class

end_unit

