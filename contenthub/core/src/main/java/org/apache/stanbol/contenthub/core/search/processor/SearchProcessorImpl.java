begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|search
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|engine
operator|.
name|EngineProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|engine
operator|.
name|SearchEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|engine
operator|.
name|SearchEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|processor
operator|.
name|SearchProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author anil.sinaci  *   */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
specifier|public
class|class
name|SearchProcessorImpl
implements|implements
name|SearchProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SearchProcessorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EngineComparator
name|COMPARATOR
init|=
operator|new
name|EngineComparator
argument_list|()
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|SearchEngine
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindSearchEngine"
argument_list|,
name|unbind
operator|=
literal|"unbindSearchEngine"
argument_list|)
specifier|private
name|List
argument_list|<
name|SearchEngine
argument_list|>
name|engines
init|=
operator|new
name|ArrayList
argument_list|<
name|SearchEngine
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|final
name|List
argument_list|<
name|SearchEngine
argument_list|>
name|listEngines
parameter_list|()
block|{
synchronized|synchronized
init|(
name|engines
init|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SearchEngine
argument_list|>
argument_list|(
name|engines
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|processQuery
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
name|Iterator
argument_list|<
name|SearchEngine
argument_list|>
name|enginesIterator
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allowedEngines
init|=
name|context
operator|.
name|getAllowedEngines
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|engines
init|)
block|{
name|enginesIterator
operator|=
name|engines
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|enginesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SearchEngine
name|engine
init|=
name|enginesIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO Find a way to uniquely identify search engines
if|if
condition|(
name|allowedEngines
operator|.
name|contains
argument_list|(
name|engine
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|engine
operator|.
name|search
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Engine {} is not selected to process resources"
argument_list|,
name|engine
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SearchEngineException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Query processing error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{} engine completed execution in {} miliseconds"
argument_list|,
name|engine
operator|.
name|toString
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|bindSearchEngine
parameter_list|(
name|SearchEngine
name|engine
parameter_list|)
block|{
synchronized|synchronized
init|(
name|engines
init|)
block|{
name|engines
operator|.
name|add
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|engines
argument_list|,
name|COMPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unbindSearchEngine
parameter_list|(
name|SearchEngine
name|engine
parameter_list|)
block|{
synchronized|synchronized
init|(
name|engines
init|)
block|{
name|engines
operator|.
name|remove
argument_list|(
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|EngineComparator
implements|implements
name|Comparator
argument_list|<
name|SearchEngine
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SearchEngine
name|engine1
parameter_list|,
name|SearchEngine
name|engine2
parameter_list|)
block|{
name|Integer
name|order1
init|=
name|getOrder
argument_list|(
name|engine1
argument_list|)
decl_stmt|;
name|Integer
name|order2
init|=
name|getOrder
argument_list|(
name|engine2
argument_list|)
decl_stmt|;
return|return
name|order1
operator|.
name|compareTo
argument_list|(
name|order2
argument_list|)
return|;
block|}
specifier|public
name|int
name|getOrder
parameter_list|(
name|SearchEngine
name|engine
parameter_list|)
block|{
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Engine can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|engine
operator|instanceof
name|EngineProperties
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|EngineProperties
operator|)
name|engine
operator|)
operator|.
name|getEngineProperties
argument_list|()
operator|.
name|get
argument_list|(
name|EngineProperties
operator|.
name|PROCESSING_ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
return|;
block|}
block|}
return|return
name|EngineProperties
operator|.
name|PROCESSING_DEFAULT
return|;
block|}
block|}
block|}
end_class

end_unit

