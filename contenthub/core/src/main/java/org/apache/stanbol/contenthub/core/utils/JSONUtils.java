begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|SolrContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author anil.sinaci  * @author meric  *   */
end_comment

begin_class
specifier|public
class|class
name|JSONUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JSONUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This function only operates on one-level JSON objects. Nested constraints cannot be processed.      *       * @param jsonFields      * @return      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|convertToMap
parameter_list|(
name|String
name|jsonFields
parameter_list|)
block|{
if|if
condition|(
name|jsonFields
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|fieldMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|jObject
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonFields
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|jObject
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|valueSet
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|jFieldKey
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|jFieldValue
init|=
name|jObject
operator|.
name|get
argument_list|(
name|jFieldKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|jFieldValue
operator|instanceof
name|JSONArray
condition|)
block|{
name|JSONArray
name|jArray
init|=
operator|(
name|JSONArray
operator|)
name|jFieldValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|jArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
condition|)
block|{
name|valueSet
operator|.
name|add
argument_list|(
name|jArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|jFieldValue
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
condition|)
block|{
name|valueSet
operator|.
name|add
argument_list|(
name|jFieldValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jFieldKey
operator|!=
literal|null
operator|&&
operator|!
name|jFieldKey
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|fieldMap
operator|.
name|put
argument_list|(
name|jFieldKey
argument_list|,
name|valueSet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldMap
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot parse Json in generating the search constraints"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|convertToString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
parameter_list|)
block|{
name|JSONObject
name|jObject
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraints
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constaint
range|:
name|constraints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|collection
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|constaint
operator|.
name|getValue
argument_list|()
control|)
block|{
name|collection
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|constaint
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|jObject
operator|.
name|put
argument_list|(
name|constaint
operator|.
name|getKey
argument_list|()
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot parse values for key {}"
argument_list|,
name|constaint
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|jObject
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|createJSONString
parameter_list|(
name|SolrContentItem
name|sci
parameter_list|)
block|{
name|String
name|content
init|=
literal|null
decl_stmt|;
try|try
block|{
name|content
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|sci
operator|.
name|getStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot read the content."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|jObj
init|=
operator|new
name|JSONObject
argument_list|(
name|sci
operator|.
name|getConstraints
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|jObj
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|jObj
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|sci
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot create the JSON Object."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|jObj
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

