begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|SolutionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|RegisteredSolrServerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|IndexMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
operator|.
name|ContentItemIDOrganizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
operator|.
name|sparql
operator|.
name|QueryGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|enhancements
operator|.
name|vocabulary
operator|.
name|EnhancementGraphVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|SolrContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|SolrStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
operator|.
name|SolrFieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author anil.sinaci  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|false
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|SolrStoreImpl
implements|implements
name|SolrStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrStoreImpl
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ManagedSolrServer
name|solrDirectoryManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|EnhancementJobManager
name|jobManager
decl_stmt|;
specifier|private
name|RegisteredSolrServerTracker
name|serverTracker
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_SERVER_NAME
init|=
literal|"contenthub"
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
throws|,
name|InvalidSyntaxException
block|{
if|if
condition|(
operator|!
name|solrDirectoryManager
operator|.
name|isManagedIndex
argument_list|(
name|SOLR_SERVER_NAME
argument_list|)
condition|)
block|{
name|solrDirectoryManager
operator|.
name|createSolrIndex
argument_list|(
name|SOLR_SERVER_NAME
argument_list|,
name|SOLR_SERVER_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|serverTracker
operator|=
operator|new
name|RegisteredSolrServerTracker
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
operator|new
name|IndexReference
argument_list|(
name|solrDirectoryManager
operator|.
name|getServerName
argument_list|()
argument_list|,
name|SOLR_SERVER_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|serverTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|serverTracker
operator|!=
literal|null
condition|)
block|{
name|serverTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|serverTracker
operator|=
literal|null
expr_stmt|;
block|}
name|solrDirectoryManager
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|SolrServer
name|getServer
parameter_list|()
block|{
name|SolrServer
name|server
init|=
name|serverTracker
operator|!=
literal|null
condition|?
name|serverTracker
operator|.
name|getService
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The SolrServer for the Contenthub "
operator|+
literal|"is currently not available!"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|server
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SolrContentItem
name|create
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|id
argument_list|,
name|content
argument_list|,
name|contentType
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|getEnhancementGraph
parameter_list|()
block|{
specifier|final
name|UriRef
name|graphUri
init|=
operator|new
name|UriRef
argument_list|(
name|EnhancementGraphVocabulary
operator|.
name|ENHANCEMENTS_GRAPH_URI
argument_list|)
decl_stmt|;
name|MGraph
name|enhancementGraph
init|=
literal|null
decl_stmt|;
try|try
block|{
name|enhancementGraph
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|graphUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Creating the enhancement graph!"
argument_list|)
expr_stmt|;
name|enhancementGraph
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|graphUri
argument_list|)
expr_stmt|;
block|}
return|return
name|enhancementGraph
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolrContentItem
name|create
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|contentType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
parameter_list|)
block|{
name|UriRef
name|uri
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|uri
operator|=
name|ContentItemHelper
operator|.
name|makeDefaultUri
argument_list|(
name|ContentItemIDOrganizer
operator|.
name|CONTENT_ITEM_URI_PREFIX
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
operator|new
name|UriRef
argument_list|(
name|ContentItemIDOrganizer
operator|.
name|attachBaseURI
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Created ContentItem with id:{} and uri:{}"
argument_list|,
name|id
argument_list|,
name|uri
argument_list|)
expr_stmt|;
specifier|final
name|MGraph
name|g
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
return|return
operator|new
name|SolrContentItemImpl
argument_list|(
name|uri
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
name|content
argument_list|,
name|contentType
argument_list|,
name|g
argument_list|,
name|constraints
argument_list|)
return|;
block|}
specifier|private
name|Object
name|inferObjectType
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
name|Object
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|DateFormat
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|ret
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
try|try
block|{
name|ret
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
try|try
block|{
name|ret
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e3
parameter_list|)
block|{}
block|}
block|}
block|}
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|val
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|addSolrDynamicFieldProperties
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
index|[]
name|values
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|inferObjectType
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Object
name|typed
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
name|String
name|dynamicFieldName
init|=
name|fieldName
decl_stmt|;
if|if
condition|(
name|typed
operator|instanceof
name|String
condition|)
block|{
name|dynamicFieldName
operator|+=
name|SolrVocabulary
operator|.
name|SOLR_DYNAMIC_FIELD_TEXT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typed
operator|instanceof
name|Long
condition|)
block|{
name|dynamicFieldName
operator|+=
name|SolrVocabulary
operator|.
name|SOLR_DYNAMIC_FIELD_LONG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typed
operator|instanceof
name|Double
condition|)
block|{
name|dynamicFieldName
operator|+=
name|SolrVocabulary
operator|.
name|SOLR_DYNAMIC_FIELD_DOUBLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typed
operator|instanceof
name|Date
condition|)
block|{
name|dynamicFieldName
operator|+=
name|SolrVocabulary
operator|.
name|SOLR_DYNAMIC_FIELD_DATE
expr_stmt|;
block|}
return|return
name|dynamicFieldName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|enhanceAndPut
parameter_list|(
name|SolrContentItem
name|sci
parameter_list|)
block|{
try|try
block|{
name|jobManager
operator|.
name|enhanceContent
argument_list|(
name|sci
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot enhance content with id: {}"
argument_list|,
name|sci
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|updateEnhancementGraph
argument_list|(
name|sci
argument_list|)
expr_stmt|;
return|return
name|put
argument_list|(
name|sci
argument_list|)
return|;
block|}
specifier|private
name|void
name|updateEnhancementGraph
parameter_list|(
name|SolrContentItem
name|sci
parameter_list|)
block|{
name|MGraph
name|enhancementGraph
init|=
name|getEnhancementGraph
argument_list|()
decl_stmt|;
comment|// Delete old enhancements which belong to this content item from the global enhancements graph.
name|removeEnhancements
argument_list|(
name|sci
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add new enhancements of this content item to the global enhancements graph.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|sci
operator|.
name|getMetadata
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
literal|null
decl_stmt|;
try|try
block|{
name|triple
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|enhancementGraph
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Cannot add triple {} to the TCManager.enhancementgraph"
argument_list|,
name|triple
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
specifier|private
name|void
name|removeEnhancements
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|MGraph
name|enhancementGraph
init|=
name|getEnhancementGraph
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|enhancementGraph
operator|.
name|filter
argument_list|(
operator|new
name|UriRef
argument_list|(
name|id
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Triple
argument_list|>
name|willBeRemoved
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|willBeRemoved
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|enhancementGraph
operator|.
name|removeAll
argument_list|(
name|willBeRemoved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|put
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
if|if
condition|(
name|ci
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|ci
operator|.
name|getId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"ID of the content item cannot be null while inserting to the SolrStore."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ID of the content item cannot be null while inserting to the SolrStore."
argument_list|)
throw|;
block|}
name|SolrServer
name|server
init|=
name|getServer
argument_list|()
decl_stmt|;
name|String
name|content
init|=
literal|null
decl_stmt|;
try|try
block|{
name|content
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot read the content."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|String
name|creationDate
init|=
name|sdf
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|SolrFieldName
operator|.
name|ID
operator|.
name|toString
argument_list|()
argument_list|,
name|ci
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|SolrFieldName
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|SolrFieldName
operator|.
name|MIMETYPE
operator|.
name|toString
argument_list|()
argument_list|,
name|ci
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|SolrFieldName
operator|.
name|CREATIONDATE
operator|.
name|toString
argument_list|()
argument_list|,
name|creationDate
argument_list|)
expr_stmt|;
comment|// add the number of enhancemets to the content item
name|long
name|enhancementCount
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
operator|new
name|UriRef
argument_list|(
name|ci
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|enhancementCount
operator|++
expr_stmt|;
block|}
name|doc
operator|.
name|addField
argument_list|(
name|SolrFieldName
operator|.
name|ENHANCEMENTCOUNT
operator|.
name|toString
argument_list|()
argument_list|,
name|enhancementCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|ci
operator|instanceof
name|SolrContentItem
condition|)
block|{
name|SolrContentItem
name|sci
init|=
operator|(
name|SolrContentItem
operator|)
name|ci
decl_stmt|;
comment|// add the constraints
if|if
condition|(
name|sci
operator|.
name|getConstraints
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraint
range|:
name|sci
operator|.
name|getConstraints
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
index|[]
name|values
init|=
name|constraint
operator|.
name|getValue
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
condition|)
continue|continue;
name|String
name|dynamicFieldName
init|=
name|addSolrDynamicFieldProperties
argument_list|(
name|constraint
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|dynamicFieldName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sci
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addSemanticFields
argument_list|(
name|sci
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|addFacetFields
argument_list|(
name|sci
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"There are no enhancements for the content item {}"
argument_list|,
name|sci
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Documents are committed to Solr Server successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Solr Server Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"IOException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ci
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|private
name|void
name|addSemanticFields
parameter_list|(
name|SolrContentItem
name|sci
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|)
block|{
for|for
control|(
name|SolrFieldName
name|fn
range|:
name|SolrFieldName
operator|.
name|getSemanticFieldNames
argument_list|()
control|)
block|{
name|addField
argument_list|(
name|sci
argument_list|,
name|doc
argument_list|,
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addFacetFields
parameter_list|(
name|SolrContentItem
name|sci
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|)
block|{
for|for
control|(
name|SolrFieldName
name|fn
range|:
name|SolrFieldName
operator|.
name|getAnnotatedEntityFieldNames
argument_list|()
control|)
block|{
name|addField
argument_list|(
name|sci
argument_list|,
name|doc
argument_list|,
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addField
parameter_list|(
name|SolrContentItem
name|sci
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|,
name|SolrFieldName
name|fieldName
parameter_list|)
block|{
name|SelectQuery
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
operator|(
name|SelectQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|QueryGenerator
operator|.
name|getFieldQuery
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Should never reach here!"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot parse the query generated by QueryGenerator: {}"
argument_list|,
name|QueryGenerator
operator|.
name|getFieldQuery
argument_list|(
name|fieldName
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|sci
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|ResultSet
name|result
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|query
argument_list|,
name|sci
operator|.
name|getMetadata
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolutionMapping
name|sol
init|=
name|result
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|res
init|=
name|sol
operator|.
name|get
argument_list|(
name|fieldName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
continue|continue;
name|String
name|value
init|=
name|res
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|Literal
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|Literal
operator|)
name|res
operator|)
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
name|doc
operator|.
name|addField
argument_list|(
name|fieldName
operator|.
name|toString
argument_list|()
argument_list|,
name|values
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: we can use cache for "Recently uploaded Content Items"..
annotation|@
name|Override
specifier|public
name|SolrContentItem
name|get
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|id
operator|=
name|ContentItemIDOrganizer
operator|.
name|attachBaseURI
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|SolrServer
name|server
init|=
name|getServer
argument_list|()
decl_stmt|;
name|String
name|content
init|=
literal|null
decl_stmt|;
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|StringBuilder
name|queryString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|queryString
operator|.
name|append
argument_list|(
name|SolrFieldName
operator|.
name|ID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|":\""
argument_list|)
expr_stmt|;
name|queryString
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
name|queryString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|results
init|=
name|response
operator|.
name|getResults
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SolrDocument
name|result
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|content
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getFieldValue
argument_list|(
name|SolrFieldName
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mimeType
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getFieldValue
argument_list|(
name|SolrFieldName
operator|.
name|MIMETYPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|itr
init|=
name|result
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SolrFieldName
operator|.
name|isNameReserved
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|result
operator|.
name|getFieldValues
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|constraints
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"No matching item in Solr for the given id {}."
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|String
name|enhancementQuery
init|=
name|QueryGenerator
operator|.
name|getEnhancementsOfContent
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|SelectQuery
name|selectQuery
init|=
literal|null
decl_stmt|;
try|try
block|{
name|selectQuery
operator|=
operator|(
name|SelectQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|enhancementQuery
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|resultSet
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|selectQuery
argument_list|,
name|this
operator|.
name|getEnhancementGraph
argument_list|()
argument_list|)
decl_stmt|;
name|MGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolutionMapping
name|mapping
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|ref
init|=
operator|(
name|UriRef
operator|)
name|mapping
operator|.
name|get
argument_list|(
literal|"enhancement"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|tripleItr
init|=
name|this
operator|.
name|getEnhancementGraph
argument_list|()
operator|.
name|filter
argument_list|(
name|ref
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|tripleItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|tripleItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SolrContentItemImpl
argument_list|(
name|id
argument_list|,
name|content
operator|.
name|getBytes
argument_list|()
argument_list|,
name|mimeType
argument_list|,
name|metadata
argument_list|,
name|constraints
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|SolrServer
name|server
init|=
name|getServer
argument_list|()
decl_stmt|;
name|id
operator|=
name|ContentItemIDOrganizer
operator|.
name|attachBaseURI
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|removeEnhancements
argument_list|(
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|deleteById
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Solr Server Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"IOException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteById
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|idList
parameter_list|)
block|{
name|SolrServer
name|server
init|=
name|getServer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|idList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|ContentItemIDOrganizer
operator|.
name|attachBaseURI
argument_list|(
name|idList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|idList
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|idList
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|server
operator|.
name|deleteById
argument_list|(
name|idList
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Solr Server Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"IOException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

