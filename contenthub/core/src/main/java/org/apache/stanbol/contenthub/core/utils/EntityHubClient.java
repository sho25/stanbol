begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ResourceFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|util
operator|.
name|MultivaluedMapImpl
import|;
end_import

begin_comment
comment|/**  *   * @author cihan  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EntityHubClient
block|{
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_SEPARATOR
init|=
literal|"&"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EQUALS
init|=
literal|"="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY
init|=
literal|"?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|"/"
decl_stmt|;
comment|// private static final String SYMBOL = "symbol";
specifier|private
specifier|static
specifier|final
name|String
name|LOOKUP
init|=
literal|"lookup"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIND
init|=
literal|"find"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SYMBOL_LOOKUP
init|=
name|LOOKUP
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SYMBOL_FIND
init|=
name|FIND
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_ID
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_CREATE
init|=
literal|"create"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_FIELD
init|=
literal|"field"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_LANGUAGE
init|=
literal|"lang"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_SELECT
init|=
literal|"select"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_RDF
init|=
literal|"application/rdf+xml"
decl_stmt|;
specifier|private
name|String
name|entityhubEndpoint
decl_stmt|;
specifier|private
name|Client
name|client
decl_stmt|;
specifier|private
name|RDFUtil
name|rdfUtil
init|=
name|RDFUtil
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EntityHubClient
name|getInstance
parameter_list|(
name|String
name|entityhubEndpoint
parameter_list|)
block|{
return|return
operator|new
name|EntityHubClient
argument_list|(
name|entityhubEndpoint
argument_list|)
return|;
block|}
specifier|private
name|EntityHubClient
parameter_list|(
name|String
name|entityhubEndpoint
parameter_list|)
block|{
name|this
operator|.
name|entityhubEndpoint
operator|=
name|entityhubEndpoint
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|entityhubEndpoint
operator|.
name|endsWith
argument_list|(
name|DELIMITER
argument_list|)
condition|)
block|{
name|this
operator|.
name|entityhubEndpoint
operator|+=
name|DELIMITER
expr_stmt|;
block|}
name|this
operator|.
name|client
operator|=
name|Client
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|nullCheck
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|parameterName
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter "
operator|+
name|parameterName
operator|+
literal|"can not be null"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
name|OntModel
name|symbolLookup
parameter_list|(
name|String
name|id
parameter_list|,
name|Boolean
name|create
parameter_list|)
block|{
name|nullCheck
argument_list|(
name|id
argument_list|,
name|PARAM_ID
argument_list|)
expr_stmt|;
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|(
name|entityhubEndpoint
argument_list|)
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
name|PATH_SYMBOL_LOOKUP
argument_list|)
operator|.
name|append
argument_list|(
name|QUERY
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|PARAM_ID
argument_list|)
operator|.
name|append
argument_list|(
name|EQUALS
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|create
condition|)
block|{
name|path
operator|.
name|append
argument_list|(
name|QUERY_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|PARAM_CREATE
argument_list|)
operator|.
name|append
argument_list|(
name|EQUALS
argument_list|)
operator|.
name|append
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WebResource
name|wr
init|=
name|client
operator|.
name|resource
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|wr
operator|.
name|accept
argument_list|(
name|MEDIA_TYPE_RDF
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|rdfUtil
operator|.
name|getOntModel
argument_list|(
name|response
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|OntModel
name|symbolFind
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|language
parameter_list|,
name|String
modifier|...
name|selects
parameter_list|)
block|{
name|nullCheck
argument_list|(
name|name
argument_list|,
name|PARAM_NAME
argument_list|)
expr_stmt|;
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|(
name|entityhubEndpoint
argument_list|)
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
name|PATH_SYMBOL_FIND
argument_list|)
expr_stmt|;
comment|// Form parameters
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|form
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|.
name|add
argument_list|(
name|PARAM_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
operator|!
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|.
name|add
argument_list|(
name|PARAM_FIELD
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|.
name|add
argument_list|(
name|PARAM_LANGUAGE
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
name|String
name|selectStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|select
range|:
name|selects
control|)
block|{
if|if
condition|(
name|select
operator|!=
literal|null
operator|&&
operator|!
name|select
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|selectStr
operator|+=
name|select
expr_stmt|;
name|selectStr
operator|+=
literal|" "
expr_stmt|;
block|}
block|}
name|form
operator|.
name|add
argument_list|(
name|PARAM_SELECT
argument_list|,
name|selectStr
argument_list|)
expr_stmt|;
name|WebResource
name|wr
init|=
name|client
operator|.
name|resource
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|wr
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
operator|.
name|accept
argument_list|(
name|MEDIA_TYPE_RDF
argument_list|)
operator|.
name|post
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|form
argument_list|)
decl_stmt|;
return|return
name|rdfUtil
operator|.
name|getOntModel
argument_list|(
name|response
argument_list|)
return|;
block|}
comment|/**      * Queries the entity hub and tries to find an entity form referenced sites by<br>      * by text search over the entities' labels. When a matching label found, then gets the whole<br>      * dbpedia ontolgoy of the result entity      *       * @param name      *            name of the entity that we will look for in entity labels      * @param language      *            is the language of the name      * @param selects      *            are the properties that we want in our results      * @return ontology of dbpedia of desired entity, if no entity found then return null      */
specifier|public
name|OntModel
name|referencedSiteFind
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|language
parameter_list|,
name|String
modifier|...
name|selects
parameter_list|)
block|{
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|String
name|field
init|=
literal|"http://www.w3.org/2000/01/rdf-schema#label"
decl_stmt|;
try|try
block|{
name|nullCheck
argument_list|(
name|name
argument_list|,
name|PARAM_NAME
argument_list|)
expr_stmt|;
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|(
name|entityhubEndpoint
argument_list|)
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|"sites/find"
argument_list|)
expr_stmt|;
comment|// Form parameters
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|form
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|.
name|add
argument_list|(
name|PARAM_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
operator|!
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|.
name|add
argument_list|(
name|PARAM_FIELD
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|.
name|add
argument_list|(
name|PARAM_LANGUAGE
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
comment|// to get only one result
name|form
operator|.
name|add
argument_list|(
literal|"limit"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|String
name|selectStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|select
range|:
name|selects
control|)
block|{
if|if
condition|(
name|select
operator|!=
literal|null
operator|&&
operator|!
name|select
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|selectStr
operator|+=
name|select
expr_stmt|;
name|selectStr
operator|+=
literal|" "
expr_stmt|;
block|}
block|}
name|form
operator|.
name|add
argument_list|(
name|PARAM_SELECT
argument_list|,
name|selectStr
argument_list|)
expr_stmt|;
name|WebResource
name|wr
init|=
name|client
operator|.
name|resource
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|wr
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
operator|.
name|accept
argument_list|(
name|MEDIA_TYPE_RDF
argument_list|)
operator|.
name|post
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|form
argument_list|)
decl_stmt|;
name|OntModel
name|ResultModel
init|=
name|rdfUtil
operator|.
name|getOntModel
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|ResourceFactory
operator|.
name|createResource
argument_list|(
literal|"http://www.iks-project.eu/ontology/rick/query/QueryResultSet"
argument_list|)
expr_stmt|;
name|Property
name|property
init|=
name|ResourceFactory
operator|.
name|createProperty
argument_list|(
literal|"http://www.w3.org/2000/01/rdf-schema#label"
argument_list|)
decl_stmt|;
name|StmtIterator
name|statements
init|=
name|ResultModel
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|property
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|String
name|dbpediaId
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|statements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|res
init|=
name|statements
operator|.
name|next
argument_list|()
decl_stmt|;
name|dbpediaId
operator|=
name|res
operator|.
name|getSubject
argument_list|()
operator|.
name|getURI
argument_list|()
expr_stmt|;
block|}
comment|// means can not find any dbpedia entity with given name
if|if
condition|(
name|dbpediaId
operator|==
literal|null
condition|)
block|{
name|model
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|dbpediaId
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|dbpediaId
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
name|model
operator|=
name|symbolLookup
argument_list|(
name|dbpediaId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
return|return
name|model
return|;
block|}
specifier|public
name|String
name|getEntityhubEndpoint
parameter_list|()
block|{
return|return
name|entityhubEndpoint
return|;
block|}
block|}
end_class

end_unit

