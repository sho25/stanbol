begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QuerySolution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFNode
import|;
end_import

begin_comment
comment|/**  * This class is constructed with an rdf model that will be queried and extracts semantically related entities  * according to the entity type's  *   * @author srdc  *   */
end_comment

begin_class
specifier|public
class|class
name|ExploreHelper
block|{
specifier|private
name|OntModel
name|entityModel
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExploreHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ExploreHelper
parameter_list|(
name|OntModel
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Given Entity Model is empty, ExploreHelper could NOT be initialized"
argument_list|)
expr_stmt|;
block|}
else|else
name|entityModel
operator|=
name|model
expr_stmt|;
block|}
comment|/**      * finds the all rdf:type property value of the entity      *       * @return the list of all rdf:type property values; if there is no, returns an empty set      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|extractTypes
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityModel
operator|!=
literal|null
condition|)
block|{
name|String
name|queryString
init|=
name|ExploreQueryHelper
operator|.
name|entityTypeExtracterQuery
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|queryString
argument_list|,
name|entityModel
argument_list|)
operator|.
name|execSelect
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QuerySolution
name|solution
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|RDFNode
name|node
init|=
name|solution
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"There is no entity model to query"
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
comment|/**      * Finds the semantically related entity names, while doing this, categorizes the related entities      * according to their type, for now finds;<br>      * - related places<br>      * - related persons<br>      * - related organizations      *       * @return the Map of Type Category Name of the Entity - Set of Related Entities of that Type      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSuggestedKeywords
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|suggestedKeywords
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|place
init|=
name|findRelatedPlaceEntities
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|person
init|=
name|findRelatedPersonEntities
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|organization
init|=
name|findRelatedOrganizationEntities
argument_list|()
decl_stmt|;
name|suggestedKeywords
operator|.
name|put
argument_list|(
literal|"places"
argument_list|,
name|place
argument_list|)
expr_stmt|;
name|suggestedKeywords
operator|.
name|put
argument_list|(
literal|"organizations"
argument_list|,
name|organization
argument_list|)
expr_stmt|;
name|suggestedKeywords
operator|.
name|put
argument_list|(
literal|"persons"
argument_list|,
name|person
argument_list|)
expr_stmt|;
return|return
name|suggestedKeywords
return|;
block|}
comment|/**      * finds the semantically related entities of type dbpedia-owl:place      *       * @return the Set of place typed related Entities      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findRelatedPlaceEntities
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityModel
operator|!=
literal|null
condition|)
block|{
name|String
name|query
init|=
name|ExploreQueryHelper
operator|.
name|relatedPlaceQuery
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|query
argument_list|,
name|entityModel
argument_list|)
operator|.
name|execSelect
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QuerySolution
name|sol
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|variables
init|=
name|ExploreQueryHelper
operator|.
name|placeTypedProperties
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|variables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|variable
init|=
name|variables
index|[
name|i
index|]
decl_stmt|;
name|RDFNode
name|resultNode
init|=
name|sol
operator|.
name|get
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultNode
operator|!=
literal|null
condition|)
block|{
name|String
name|resultURI
decl_stmt|;
try|try
block|{
name|resultURI
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|resultNode
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|String
name|entityName
init|=
name|resultURI
operator|.
name|substring
argument_list|(
name|ExploreQueryHelper
operator|.
name|splitNameSpaceFromURI
argument_list|(
name|resultURI
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityName
operator|!=
literal|null
operator|&&
operator|!
name|entityName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|entityName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unsupported encoding for URLDecoder.decode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"No binding for the query variable {}"
argument_list|,
name|variable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"There is no entity model, so related places could NOT be found"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * finds the semantically related entities of type dbpedia-owl:person      *       * @return the Set of person typed related Entities      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findRelatedPersonEntities
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityModel
operator|!=
literal|null
condition|)
block|{
name|String
name|query
init|=
name|ExploreQueryHelper
operator|.
name|relatedPersonQuery
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|query
argument_list|,
name|entityModel
argument_list|)
operator|.
name|execSelect
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QuerySolution
name|sol
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|variables
init|=
name|ExploreQueryHelper
operator|.
name|personTypedProperties
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|variables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|variable
init|=
name|variables
index|[
name|i
index|]
decl_stmt|;
name|RDFNode
name|resultNode
init|=
name|sol
operator|.
name|get
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultNode
operator|!=
literal|null
condition|)
block|{
name|String
name|resultURI
decl_stmt|;
try|try
block|{
name|resultURI
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|resultNode
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|String
name|entityName
init|=
name|resultURI
operator|.
name|substring
argument_list|(
name|ExploreQueryHelper
operator|.
name|splitNameSpaceFromURI
argument_list|(
name|resultURI
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityName
operator|!=
literal|null
operator|&&
operator|!
name|entityName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|entityName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unsupported encoding for URLDecoder.decode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"No binding for the query variable {}"
argument_list|,
name|variable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"There is no entity model, so related places could NOT be found"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * finds the semantically related entities of type dbpedia-owl:organization      *       * @return the Set of organization typed related Entities      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findRelatedOrganizationEntities
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityModel
operator|!=
literal|null
condition|)
block|{
name|String
name|query
init|=
name|ExploreQueryHelper
operator|.
name|relatedOrganizationQuery
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|query
argument_list|,
name|entityModel
argument_list|)
operator|.
name|execSelect
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QuerySolution
name|sol
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|variables
init|=
name|ExploreQueryHelper
operator|.
name|organizationTypedProperties
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|variables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|variable
init|=
name|variables
index|[
name|i
index|]
decl_stmt|;
name|RDFNode
name|resultNode
init|=
name|sol
operator|.
name|get
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultNode
operator|!=
literal|null
condition|)
block|{
name|String
name|resultURI
decl_stmt|;
try|try
block|{
name|resultURI
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|resultNode
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|String
name|entityName
init|=
name|resultURI
operator|.
name|substring
argument_list|(
name|ExploreQueryHelper
operator|.
name|splitNameSpaceFromURI
argument_list|(
name|resultURI
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityName
operator|!=
literal|null
operator|&&
operator|!
name|entityName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|entityName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unsupported encoding for URLDecoder.decode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"No binding for the query variable {}"
argument_list|,
name|variable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"There is no entity model, so related places could NOT be found"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

