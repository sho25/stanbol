begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
operator|.
name|ContentItemIDOrganizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|SolrContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
operator|.
name|SolrFieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author meric  *   */
end_comment

begin_class
specifier|public
class|class
name|SolrContentItemImpl
implements|implements
name|SolrContentItem
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrContentItem
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MGraph
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|mimeType
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
decl_stmt|;
specifier|private
name|String
name|title
decl_stmt|;
specifier|public
name|SolrContentItemImpl
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SolrContentItemImpl
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mimetype
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|content
argument_list|,
name|mimetype
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SolrContentItemImpl
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|content
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SolrContentItemImpl
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|MGraph
name|metadata
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|content
argument_list|,
name|mimeType
argument_list|,
name|metadata
argument_list|,
name|constraints
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SolrContentItemImpl
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|title
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|MGraph
name|metadata
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ContentItemHelper
operator|.
name|makeDefaultUri
argument_list|(
name|ContentItemIDOrganizer
operator|.
name|CONTENT_ITEM_URI_PREFIX
argument_list|,
name|content
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|ContentItemIDOrganizer
operator|.
name|attachBaseURI
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|SimpleMGraph
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
literal|"application/octet-stream"
expr_stmt|;
block|}
else|else
block|{
comment|// Keep only first part of content-types like text/plain ; charset=UTF-8
try|try
block|{
name|mimeType
operator|=
name|mimeType
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"mimeType of SolrContentItem cannot be parsed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
name|content
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|constraints
operator|==
literal|null
condition|)
block|{
name|constraints
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|title
operator|=
name|determineTitle
argument_list|(
name|title
argument_list|,
name|id
argument_list|,
name|constraints
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|constraints
operator|=
name|constraints
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|MGraph
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getConstraints
parameter_list|()
block|{
return|return
name|constraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
if|if
condition|(
name|title
operator|!=
literal|null
operator|&&
operator|!
name|title
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|title
return|;
block|}
return|return
name|id
return|;
block|}
specifier|private
name|String
name|determineTitle
parameter_list|(
name|String
name|title
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
parameter_list|)
block|{
if|if
condition|(
name|title
operator|!=
literal|null
operator|&&
operator|!
name|title
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|title
operator|=
name|title
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|titleList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|titleList
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|constraints
operator|.
name|put
argument_list|(
name|SolrFieldName
operator|.
name|TITLE
operator|.
name|toString
argument_list|()
argument_list|,
name|titleList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|titleList
init|=
name|constraints
operator|.
name|get
argument_list|(
name|SolrFieldName
operator|.
name|TITLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|titleList
operator|!=
literal|null
condition|)
block|{
name|String
name|titleCons
init|=
name|titleList
operator|.
name|toString
argument_list|()
decl_stmt|;
name|titleCons
operator|=
name|titleCons
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|titleCons
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|titleList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|titleList
operator|.
name|add
argument_list|(
name|titleCons
argument_list|)
expr_stmt|;
name|title
operator|=
name|titleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|title
operator|=
name|id
expr_stmt|;
name|titleList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|titleList
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|constraints
operator|.
name|put
argument_list|(
name|SolrFieldName
operator|.
name|TITLE
operator|.
name|toString
argument_list|()
argument_list|,
name|titleList
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|title
return|;
block|}
block|}
end_class

end_unit

