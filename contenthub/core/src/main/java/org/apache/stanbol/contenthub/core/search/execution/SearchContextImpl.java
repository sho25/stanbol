begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|search
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|DocumentResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|QueryKeyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|vocabulary
operator|.
name|SearchVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|query
operator|.
name|BindingQueryPlan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|impl
operator|.
name|OntModelImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|larq
operator|.
name|IndexBuilderString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|larq
operator|.
name|IndexLARQ
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|iterator
operator|.
name|ExtendedIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_comment
comment|/**  *   * @author anil.sinaci  *   */
end_comment

begin_class
specifier|public
class|class
name|SearchContextImpl
extends|extends
name|OntModelImpl
implements|implements
name|SearchContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SearchContextImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
decl_stmt|;
specifier|private
specifier|final
name|SearchContextFactoryImpl
name|factory
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allowedEngines
decl_stmt|;
specifier|private
name|OntModel
name|searchModel
decl_stmt|;
specifier|private
name|IndexBuilderString
name|userGraphIndexBuilder
init|=
literal|null
decl_stmt|;
specifier|public
name|SearchContextImpl
parameter_list|(
name|OntModel
name|ontModel
parameter_list|,
name|String
index|[]
name|queryKeywords
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|allowedEngines
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
parameter_list|)
block|{
name|super
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM_RDFS_INF
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchModel
operator|=
name|ontModel
expr_stmt|;
name|this
operator|.
name|constraints
operator|=
name|constraints
expr_stmt|;
name|this
operator|.
name|allowedEngines
operator|=
name|allowedEngines
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|searchModel
operator|!=
literal|null
condition|)
block|{
comment|// Index the user graph
name|this
operator|.
name|userGraphIndexBuilder
operator|=
operator|new
name|IndexBuilderString
argument_list|(
name|SearchVocabulary
operator|.
name|HAS_LOCAL_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|userGraphIndexBuilder
operator|.
name|indexStatements
argument_list|(
name|this
operator|.
name|searchModel
operator|.
name|listStatements
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do not forget to set the default index just before the query execution according to its context
comment|// LARQ.setDefaultIndex(index);
block|}
name|factory
operator|=
operator|new
name|SearchContextFactoryImpl
argument_list|()
expr_stmt|;
name|factory
operator|.
name|setSearchContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|queryKeyword
range|:
name|queryKeywords
control|)
block|{
name|factory
operator|.
name|createQueryKeyword
argument_list|(
name|queryKeyword
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|QueryKeyword
argument_list|>
name|getQueryKeyWords
parameter_list|()
block|{
name|List
argument_list|<
name|QueryKeyword
argument_list|>
name|qkws
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryKeyword
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|res
range|:
name|this
operator|.
name|listResourcesWithProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|SearchVocabulary
operator|.
name|QUERY_KEYWORD
argument_list|)
operator|.
name|toList
argument_list|()
control|)
block|{
name|qkws
operator|.
name|add
argument_list|(
name|factory
operator|.
name|getQueryKeyword
argument_list|(
name|res
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|qkws
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchContextFactory
name|getFactory
parameter_list|()
block|{
return|return
name|factory
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntModel
name|getSearchModel
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchModel
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|RDFNode
parameter_list|>
name|ExtendedIterator
argument_list|<
name|T
argument_list|>
name|queryFor
parameter_list|(
name|BindingQueryPlan
name|query
parameter_list|,
name|List
argument_list|<
name|BindingQueryPlan
argument_list|>
name|altQueries
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|asKey
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllowedEngines
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|allowedEngines
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getConstraints
parameter_list|()
block|{
return|return
name|constraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexLARQ
name|getIndex
parameter_list|()
block|{
if|if
condition|(
name|userGraphIndexBuilder
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"There is no index on user model available for this search."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|userGraphIndexBuilder
operator|.
name|getIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDocumentIDs
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DocumentResource
argument_list|>
name|getDocuments
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getFacets
parameter_list|()
block|{
return|return
name|getConstraints
argument_list|()
return|;
block|}
block|}
end_class

end_unit

