begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|ClassResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|IndividualResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|Keyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|OWL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|OWL2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDFS
import|;
end_import

begin_comment
comment|/**  *   * @author cihan  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ClosureHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClosureHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// private SearchContext context;
specifier|private
name|OntModel
name|model
decl_stmt|;
specifier|private
name|SearchContextFactory
name|factory
decl_stmt|;
specifier|private
name|ClosureHelper
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
comment|// this.context = context;
name|this
operator|.
name|model
operator|=
name|context
operator|.
name|getSearchModel
argument_list|()
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|context
operator|.
name|getFactory
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|ClosureHelper
name|getInstance
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ClosureHelper
argument_list|(
name|context
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|void
name|computeClassClosure
parameter_list|(
name|ClassResource
name|klazz
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|double
name|degradingCoefficient
parameter_list|,
name|Keyword
name|keyword
parameter_list|)
block|{
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|computeSuperClassClosure
argument_list|(
name|klazz
argument_list|,
name|maxDepth
argument_list|,
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
name|computeSubClassClosure
argument_list|(
name|klazz
argument_list|,
name|maxDepth
argument_list|,
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassResource
name|res
range|:
name|keyword
operator|.
name|getRelatedClassResources
argument_list|()
control|)
block|{
name|computeInstanceClosure
argument_list|(
name|res
argument_list|,
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Computed class closure of {} in {} miliseconds"
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|computeIndividualClosure
parameter_list|(
name|IndividualResource
name|individual
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|double
name|degradingCoefficient
parameter_list|,
name|Keyword
name|keyword
parameter_list|)
block|{
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Individual
name|ind
init|=
name|model
operator|.
name|getIndividual
argument_list|(
name|individual
operator|.
name|getIndividualURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|!=
literal|null
operator|&&
name|ind
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
for|for
control|(
name|OntClass
name|klazz
range|:
name|ind
operator|.
name|listOntClasses
argument_list|(
literal|true
argument_list|)
operator|.
name|toSet
argument_list|()
control|)
block|{
if|if
condition|(
name|klazz
operator|!=
literal|null
operator|&&
name|klazz
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
name|ClassResource
name|cr
init|=
name|factory
operator|.
name|createClassResource
argument_list|(
name|klazz
operator|.
name|getURI
argument_list|()
argument_list|,
literal|1.0
argument_list|,
name|individual
operator|.
name|getScore
argument_list|()
argument_list|,
name|keyword
argument_list|)
decl_stmt|;
name|cr
operator|.
name|addRelatedIndividual
argument_list|(
name|individual
argument_list|)
expr_stmt|;
name|computeClassClosure
argument_list|(
name|cr
argument_list|,
literal|6
argument_list|,
literal|1.5
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Computed individual closure of {} in {} miliseconds"
argument_list|,
name|individual
operator|.
name|getIndividualURI
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|computeSuperClassClosure
parameter_list|(
name|ClassResource
name|klazz
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|double
name|degradingCoefficient
parameter_list|,
name|Keyword
name|keyword
parameter_list|)
block|{
name|OntClass
name|ontClass
init|=
name|model
operator|.
name|getOntClass
argument_list|(
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|==
literal|null
operator|||
name|ontClass
operator|.
name|isAnon
argument_list|()
operator|||
name|isClassNotValid
argument_list|(
name|ontClass
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Can not find class with uri {}, skipping ..."
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxDepth
operator|==
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Max depth reached not examining the resource {}"
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Computing super class closure of {} "
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|rank
init|=
name|klazz
operator|.
name|getScore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OntClass
argument_list|>
name|superClasses
init|=
name|ontClass
operator|.
name|listSuperClasses
argument_list|(
literal|true
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|OntClass
name|superClass
range|:
name|superClasses
control|)
block|{
if|if
condition|(
name|superClass
operator|==
literal|null
operator|||
name|superClass
operator|.
name|isAnon
argument_list|()
operator|||
name|isClassNotValid
argument_list|(
name|superClass
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ClassResource
name|newRes
init|=
name|factory
operator|.
name|createClassResource
argument_list|(
name|superClass
operator|.
name|getURI
argument_list|()
argument_list|,
literal|1.0
argument_list|,
name|rank
operator|/
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
decl_stmt|;
comment|// originalClass.addRelatedClass(newRes);
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Added {} as class closure to keyword {} by super class relation"
argument_list|,
name|newRes
operator|.
name|getClassURI
argument_list|()
argument_list|,
name|keyword
operator|.
name|getKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|computeSuperClassClosure
argument_list|(
name|newRes
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|,
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|computeSubClassClosure
parameter_list|(
name|ClassResource
name|klazz
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|double
name|degradingCoefficient
parameter_list|,
name|Keyword
name|keyword
parameter_list|)
block|{
name|OntClass
name|ontClass
init|=
name|model
operator|.
name|getOntClass
argument_list|(
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|==
literal|null
operator|||
name|ontClass
operator|.
name|isAnon
argument_list|()
operator|||
name|isClassNotValid
argument_list|(
name|ontClass
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Can not find class with uri {}, skipping ..."
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxDepth
operator|==
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Max depth reached not examining the resource {}"
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Computing sub class closure of {} "
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|rank
init|=
name|klazz
operator|.
name|getScore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OntClass
argument_list|>
name|subClasses
init|=
name|ontClass
operator|.
name|listSubClasses
argument_list|(
literal|true
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|OntClass
name|subClass
range|:
name|subClasses
control|)
block|{
if|if
condition|(
name|subClass
operator|==
literal|null
operator|||
name|subClass
operator|.
name|isAnon
argument_list|()
operator|||
name|isClassNotValid
argument_list|(
name|subClass
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ClassResource
name|newRes
init|=
name|factory
operator|.
name|createClassResource
argument_list|(
name|subClass
operator|.
name|getURI
argument_list|()
argument_list|,
literal|1.
argument_list|,
name|rank
operator|/
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
decl_stmt|;
comment|// klazz.addRelatedClass(newRes);
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Added {} as  class closure to {} by sub class relation"
argument_list|,
name|newRes
operator|.
name|getClassURI
argument_list|()
argument_list|,
name|keyword
operator|.
name|getKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|computeSubClassClosure
argument_list|(
name|newRes
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|,
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|computeInstanceClosure
parameter_list|(
name|ClassResource
name|klazz
parameter_list|,
name|double
name|degradingCoefficient
parameter_list|,
name|Keyword
name|keyword
parameter_list|)
block|{
name|OntClass
name|ontClass
init|=
name|model
operator|.
name|getOntClass
argument_list|(
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontClass
operator|==
literal|null
operator|||
name|ontClass
operator|.
name|isAnon
argument_list|()
operator|||
name|isClassNotValid
argument_list|(
name|ontClass
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Can not find class with uri {}, skipping ..."
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Computing instance closure of class {} "
argument_list|,
name|klazz
operator|.
name|getClassURI
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|rank
init|=
name|klazz
operator|.
name|getScore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|OntResource
argument_list|>
name|instances
init|=
name|ontClass
operator|.
name|listInstances
argument_list|(
literal|true
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|OntResource
name|instance
range|:
name|instances
control|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
operator|||
name|instance
operator|.
name|isAnon
argument_list|()
operator|||
operator|!
name|instance
operator|.
name|isIndividual
argument_list|()
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|Individual
name|individual
init|=
name|instance
operator|.
name|asIndividual
argument_list|()
decl_stmt|;
name|IndividualResource
name|newRes
init|=
name|factory
operator|.
name|createIndividualResource
argument_list|(
name|individual
operator|.
name|getURI
argument_list|()
argument_list|,
literal|1.
argument_list|,
name|rank
operator|/
name|degradingCoefficient
argument_list|,
name|keyword
argument_list|)
decl_stmt|;
comment|// klazz.addRelatedIndividual(newRes);
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Added {} as a individual closure to keyword {} "
argument_list|,
name|newRes
operator|.
name|getIndividualURI
argument_list|()
argument_list|,
name|keyword
operator|.
name|getKeyword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isClassNotValid
parameter_list|(
name|OntClass
name|klass
parameter_list|)
block|{
name|String
name|uri
init|=
name|klass
operator|.
name|getURI
argument_list|()
decl_stmt|;
return|return
name|uri
operator|.
name|contains
argument_list|(
name|RDF
operator|.
name|getURI
argument_list|()
argument_list|)
operator|||
name|uri
operator|.
name|contains
argument_list|(
name|RDFS
operator|.
name|getURI
argument_list|()
argument_list|)
operator|||
name|uri
operator|.
name|contains
argument_list|(
name|OWL
operator|.
name|getURI
argument_list|()
argument_list|)
operator|||
name|uri
operator|.
name|contains
argument_list|(
name|OWL2
operator|.
name|getURI
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

