begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|crawler
operator|.
name|cnn
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|crawler
operator|.
name|cnn
operator|.
name|CNNImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|HtmlCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htmlcleaner
operator|.
name|TagNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|tidy
operator|.
name|Tidy
import|;
end_import

begin_comment
comment|/**  *   * @author cihan  * @author anil.sinaci  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|CNNImporterImpl
implements|implements
name|CNNImporter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CNNImporterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CNN_URL
init|=
literal|"http://topics.cnn.com/topics/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_CLASS
init|=
literal|"cnn_strycntntlft"
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|SolrStore
name|solrStore
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
if|if
condition|(
name|solrStore
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot activate CNNImporter. There is no SolrStore to be binded."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|URI
argument_list|,
name|String
argument_list|>
name|importCNNNews
parameter_list|(
name|String
name|topic
parameter_list|,
name|int
name|maxNumber
parameter_list|,
name|boolean
name|fullNews
parameter_list|)
block|{
return|return
name|importCNNNews
argument_list|(
name|topic
argument_list|,
name|maxNumber
argument_list|,
name|fullNews
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|URI
argument_list|,
name|String
argument_list|>
name|importCNNNews
parameter_list|(
name|String
name|topic
parameter_list|,
name|int
name|maxNumber
parameter_list|,
name|boolean
name|fullNews
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|List
argument_list|<
name|NewsSummary
argument_list|>
name|summaries
init|=
name|getRelatedNews
argument_list|(
name|topic
argument_list|,
name|maxNumber
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|String
argument_list|>
name|newsInfo
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fullNews
condition|)
block|{
for|for
control|(
name|NewsSummary
name|summary
range|:
name|summaries
control|)
block|{
name|String
name|realContent
init|=
name|getNewsContent
argument_list|(
name|summary
operator|.
name|getNewsURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|realContent
operator|!=
literal|null
operator|&&
operator|!
name|realContent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|summary
operator|.
name|setContent
argument_list|(
name|realContent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|NewsSummary
name|summary
range|:
name|summaries
control|)
block|{
try|try
block|{
name|SolrContentItem
name|sci
init|=
name|solrStore
operator|.
name|create
argument_list|(
name|summary
operator|.
name|getContent
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|,
name|summary
operator|.
name|getTitle
argument_list|()
argument_list|,
literal|"text/plain"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|solrStore
operator|.
name|enhanceAndPut
argument_list|(
name|sci
argument_list|,
name|indexName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|title
init|=
name|summary
operator|.
name|getTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|newsInfo
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error storing content {}. Skipping ..."
argument_list|,
name|summary
operator|.
name|getContent
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newsInfo
return|;
block|}
specifier|private
name|String
name|getNewsContent
parameter_list|(
name|URI
name|newsURI
parameter_list|)
block|{
try|try
block|{
name|URL
name|newsURL
init|=
name|newsURI
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|HtmlCleaner
name|cleaner
init|=
operator|new
name|HtmlCleaner
argument_list|()
decl_stmt|;
name|TagNode
name|root
init|=
name|cleaner
operator|.
name|clean
argument_list|(
name|newsURL
argument_list|)
decl_stmt|;
name|Object
index|[]
name|text
init|=
name|root
operator|.
name|evaluateXPath
argument_list|(
literal|"//div[@class='"
operator|+
name|TEXT_CLASS
operator|+
literal|"']"
argument_list|)
decl_stmt|;
name|StringBuilder
name|realContent
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|storyPart
range|:
name|text
control|)
block|{
try|try
block|{
name|TagNode
name|storyFragment
init|=
operator|(
name|TagNode
operator|)
name|storyPart
decl_stmt|;
for|for
control|(
name|TagNode
name|child
range|:
name|storyFragment
operator|.
name|getChildTags
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|realContent
operator|.
name|append
argument_list|(
name|child
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can not cast {} to TagNode"
argument_list|,
name|storyPart
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|realContent
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to get real content of the news {}"
argument_list|,
name|newsURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|NewsSummary
argument_list|>
name|getRelatedNews
parameter_list|(
name|String
name|topic
parameter_list|,
name|int
name|maxNumber
parameter_list|)
block|{
name|List
argument_list|<
name|NewsSummary
argument_list|>
name|summaries
init|=
operator|new
name|ArrayList
argument_list|<
name|NewsSummary
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|URL
name|topicURL
init|=
operator|new
name|URL
argument_list|(
name|CNN_URL
operator|+
name|topic
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
decl_stmt|;
name|Tidy
name|tidy
init|=
operator|new
name|Tidy
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|tidy
operator|.
name|parseDOM
argument_list|(
name|topicURL
operator|.
name|openStream
argument_list|()
argument_list|,
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"div"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|current
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NamedNodeMap
name|atts
init|=
name|current
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Node
name|classAtt
init|=
name|atts
operator|.
name|getNamedItem
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classAtt
operator|!=
literal|null
operator|&&
name|classAtt
operator|.
name|getNodeValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cnnRelatedArticle archive-item story cnn_skn_spccovstrylst"
argument_list|)
condition|)
block|{
name|NewsSummary
name|summary
init|=
name|createSummary
argument_list|(
operator|(
name|Element
operator|)
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|summary
operator|!=
literal|null
condition|)
block|{
name|summaries
operator|.
name|add
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|summaries
operator|.
name|size
argument_list|()
operator|>=
name|maxNumber
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Topic {} results in malformed url."
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can get content of topic {}."
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
return|return
name|summaries
return|;
block|}
specifier|private
name|NewsSummary
name|createSummary
parameter_list|(
name|Element
name|current
parameter_list|)
block|{
name|NewsSummary
name|newsSummary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|summary
init|=
name|current
operator|.
name|getElementsByTagName
argument_list|(
literal|"p"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
operator|(
operator|(
name|Element
operator|)
name|current
operator|.
name|getElementsByTagName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"href"
argument_list|)
decl_stmt|;
name|String
name|title
init|=
name|current
operator|.
name|getElementsByTagName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|newsSummary
operator|=
operator|new
name|NewsSummary
argument_list|()
expr_stmt|;
name|newsSummary
operator|.
name|setNewsURI
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|newsSummary
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|newsSummary
operator|.
name|setContent
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|newsSummary
operator|=
literal|null
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Error creating summary from node {}"
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|newsSummary
return|;
block|}
block|}
end_class

end_unit

