begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|SearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|related
operator|.
name|RelatedKeywordSearchManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|util
operator|.
name|RestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
operator|.
name|PatternType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/contenthub/search/related"
argument_list|)
specifier|public
class|class
name|RelatedKeywordResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RelatedKeywordResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|AUTOCOMPLETED_KEYWORD_NUMBER
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|String
name|DEFAULT_AUTOCOMPLETE_SEARCH_FIELD
init|=
name|RDFS
operator|.
name|label
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
specifier|private
name|ReferencedSiteManager
name|referencedSiteManager
decl_stmt|;
specifier|private
name|RelatedKeywordSearchManager
name|relatedKeywordSearchManager
decl_stmt|;
specifier|public
name|RelatedKeywordResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|referencedSiteManager
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ReferencedSiteManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|relatedKeywordSearchManager
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RelatedKeywordSearchManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
specifier|final
name|Response
name|findAllRelatedKeywords
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"keyword"
argument_list|)
name|String
name|keyword
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"ontologyURI"
argument_list|)
name|String
name|ontologyURI
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|SearchException
block|{
if|if
condition|(
operator|!
name|RestUtil
operator|.
name|isJSONaccepted
argument_list|(
name|headers
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|keyword
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyword
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"RelatedKeywordResource.findAllRelatedKeywords requires \"keyword\" parameter. \"ontologyURI\" is optional"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|ontologyURI
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
name|SearchResult
name|searchResult
init|=
name|relatedKeywordSearchManager
operator|.
name|getRelatedKeywordsFromAllSources
argument_list|(
name|keyword
argument_list|,
name|ontologyURI
argument_list|)
decl_stmt|;
return|return
name|prepareResponse
argument_list|(
name|searchResult
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/wordnet"
argument_list|)
specifier|public
specifier|final
name|Response
name|findWordnetRelatedKeywords
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"keyword"
argument_list|)
name|String
name|keyword
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|SearchException
block|{
if|if
condition|(
operator|!
name|RestUtil
operator|.
name|isJSONaccepted
argument_list|(
name|headers
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|keyword
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyword
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"RelatedKeywordResource.findWordnetRelatedKeywords requires \"keyword\" parameter."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|SearchResult
name|searchResult
init|=
name|relatedKeywordSearchManager
operator|.
name|getRelatedKeywordsFromWordnet
argument_list|(
name|keyword
argument_list|)
decl_stmt|;
return|return
name|prepareResponse
argument_list|(
name|searchResult
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/ontology"
argument_list|)
specifier|public
specifier|final
name|Response
name|findOntologyRelatedKeywords
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"keyword"
argument_list|)
name|String
name|keyword
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"ontologyURI"
argument_list|)
name|String
name|ontologyURI
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|SearchException
block|{
if|if
condition|(
operator|!
name|RestUtil
operator|.
name|isJSONaccepted
argument_list|(
name|headers
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|keyword
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyword
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"RelatedKeywordResource.findOntologyRelatedKeywords requires \"keyword\" and \"ontologyURI\" parameters."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|ontologyURI
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontologyURI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"RelatedKeywordResource.findOntologyRelatedKeywords requires \"keyword\" and \"ontologyURI\" parameters."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|SearchResult
name|searchResult
init|=
name|relatedKeywordSearchManager
operator|.
name|getRelatedKeywordsFromOntology
argument_list|(
name|keyword
argument_list|,
name|ontologyURI
argument_list|)
decl_stmt|;
return|return
name|prepareResponse
argument_list|(
name|searchResult
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/referencedsite"
argument_list|)
specifier|public
specifier|final
name|Response
name|findReferencedSiteRelatedKeywords
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"keyword"
argument_list|)
name|String
name|keyword
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|SearchException
block|{
if|if
condition|(
operator|!
name|RestUtil
operator|.
name|isJSONaccepted
argument_list|(
name|headers
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|keyword
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyword
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"RelatedKeywordResource.findOntologyRelatedKeywords requires \"keyword\" and \"ontologyURI\" parameters."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|SearchResult
name|searchResult
init|=
name|relatedKeywordSearchManager
operator|.
name|getRelatedKeywordsFromReferencedCites
argument_list|(
name|keyword
argument_list|)
decl_stmt|;
return|return
name|prepareResponse
argument_list|(
name|searchResult
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|private
name|Response
name|prepareResponse
parameter_list|(
name|SearchResult
name|searchResult
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|searchResult
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * This method is used to provide data to autocomplete component. It queries entityhub with the provided      * query term.      */
annotation|@
name|GET
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/autocomplete"
argument_list|)
specifier|public
specifier|final
name|Response
name|bringSuggestion
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"pattern"
argument_list|)
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
operator|||
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|noContent
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
name|pattern
operator|=
name|pattern
operator|.
name|trim
argument_list|()
expr_stmt|;
name|pattern
operator|+=
literal|"*"
expr_stmt|;
name|FieldQueryFactory
name|qf
init|=
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|qf
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|selectedFields
operator|.
name|add
argument_list|(
name|DEFAULT_AUTOCOMPLETE_SEARCH_FIELD
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|addSelectedFields
argument_list|(
name|selectedFields
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|DEFAULT_AUTOCOMPLETE_SEARCH_FIELD
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|pattern
argument_list|,
name|PatternType
operator|.
name|wildcard
argument_list|,
literal|false
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|setLimit
argument_list|(
name|AUTOCOMPLETED_KEYWORD_NUMBER
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|entityhubResult
init|=
name|referencedSiteManager
operator|.
name|find
argument_list|(
name|fieldQuery
argument_list|)
decl_stmt|;
for|for
control|(
name|Representation
name|rep
range|:
name|entityhubResult
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|rep
operator|.
name|getFirst
argument_list|(
name|DEFAULT_AUTOCOMPLETE_SEARCH_FIELD
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|jResult
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
try|try
block|{
name|jResult
operator|.
name|put
argument_list|(
literal|"completedKeywords"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{          }
return|return
name|Response
operator|.
name|ok
argument_list|(
name|jResult
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

