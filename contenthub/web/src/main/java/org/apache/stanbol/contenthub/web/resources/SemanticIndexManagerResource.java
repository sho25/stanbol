begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|LDPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|LDProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|LDProgramCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|SemanticIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|util
operator|.
name|RestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_comment
comment|/**  * This class the the web resource to handle the RESTful requests and HTML view of the LDProgram management  * facilities within Contenthub.  *   * @author anil.pacaci  * @author anil.sinaci  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/contenthub/ldpath"
argument_list|)
specifier|public
class|class
name|SemanticIndexManagerResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SemanticIndexManagerResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SemanticIndexManager
name|programManager
decl_stmt|;
specifier|public
name|SemanticIndexManagerResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|programManager
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SemanticIndexManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|programManager
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Missing LDProgramManager = {}"
argument_list|,
name|programManager
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
block|}
comment|// copied from SiteManagerRootResource
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/program"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightProgram
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/exists"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightExists
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * HTTP GET method which returns all LDPath programs residing in Contenthub. LDPath programs are uniquely      * identified by their names. Returning JSON string presents each LDPath program in string format aligned      * with its name.      *       * @param headers      *            HTTP headers      * @return JSON string of {@code name:program} pairs.      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_HTML
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Response
name|retrieveAllPrograms
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|MediaType
name|acceptedHeader
init|=
name|RestUtil
operator|.
name|getAcceptedMediaType
argument_list|(
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedHeader
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|LDProgramCollection
name|ldProgramCollection
init|=
name|programManager
operator|.
name|retrieveAllPrograms
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|ldProgramCollection
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * HTTP POST method which saves an LDPath program into the persistent store of Contenthub.      *       * @param programName      *            Unique name to identify the LDPath program      * @param program      *            The LDPath program.      * @param headers      *            HTTP Headers      * @return HTTP OK(200) or BAD REQUEST(400)      * @throws LDPathException      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/program"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|APPLICATION_FORM_URLENCODED
argument_list|)
specifier|public
name|Response
name|submitProgram
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"name"
argument_list|)
name|String
name|programName
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"program"
argument_list|)
name|String
name|program
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|LDPathException
block|{
try|try
block|{
name|programManager
operator|.
name|submitProgram
argument_list|(
name|programName
argument_list|,
name|program
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LDPathException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"LDPath program cannot be submitted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
literal|"LDPath program has been successfully saved and corresponding Solr Core has been successfully created."
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * HTTP GET method to retrieve an LDPath program, given its name.      *       * @param programName      *            The name of the LDPath program to be retrieved.      * @param headers      *            HTTP headers      * @return LDPath program in {@link String} format or HTTP NOT FOUND(404)      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/program"
argument_list|)
specifier|public
name|Response
name|getProgramByName
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"name"
argument_list|)
name|String
name|programName
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|String
name|ldPathProgram
init|=
name|programManager
operator|.
name|getProgramByName
argument_list|(
name|programName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldPathProgram
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|ldPathProgram
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * HTTP DELETE method to delete an LDPath program.      *       * @param programName      *            The name of the LDPath program.      * @param headers      *            HTTP headers      * @return HTTP OK(200)      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/program"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|APPLICATION_FORM_URLENCODED
argument_list|)
specifier|public
name|Response
name|deleteProgram
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"name"
argument_list|)
name|String
name|programName
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|programManager
operator|.
name|deleteProgram
argument_list|(
name|programName
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * HTTP GET method to check whether an LDPath program exists in Contenthub or not.      *       * @param programName      *            The name of the LDPath program.      * @param headers      *            HTTP headers      * @return HTTP OK(200) or HTTP NOT FOUND(404)      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/exists"
argument_list|)
specifier|public
name|Response
name|isManagedProgram
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"name"
argument_list|)
name|String
name|programName
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|programManager
operator|.
name|isManagedProgram
argument_list|(
name|programName
argument_list|)
condition|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// Helper methods for HTML view
specifier|public
name|List
argument_list|<
name|LDProgram
argument_list|>
name|getLdPrograms
parameter_list|()
block|{
return|return
name|programManager
operator|.
name|retrieveAllPrograms
argument_list|()
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

