begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|WILDCARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|featured
operator|.
name|util
operator|.
name|SolrContentItemConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|ldpath
operator|.
name|SemanticIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|SearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|DocumentResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|solr
operator|.
name|SolrSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|StoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
operator|.
name|SolrFieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|util
operator|.
name|RestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Chain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Resource to provide a CRU[D] REST API for content items and there related enhancements.  *<p>  * Creation is achieved using either POST requests on the root of the store or as PUT requests on the expected  * content item URI.  *<p>  * Retrieval is achieved using simple GET requests on the content item or enhancement public URIs.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/contenthub/{index}/store"
argument_list|)
specifier|public
class|class
name|StoreResource
extends|extends
name|BaseStanbolResource
block|{
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RDF_MEDIA_TYPES
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|N3
argument_list|,
name|N_TRIPLE
argument_list|,
name|RDF_XML
argument_list|,
name|TURTLE
argument_list|,
name|X_TURTLE
argument_list|,
name|RDF_JSON
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StoreResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
specifier|private
name|SolrStore
name|solrStore
decl_stmt|;
specifier|private
name|SolrSearch
name|solrSearch
decl_stmt|;
specifier|private
name|Serializer
name|serializer
decl_stmt|;
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|pageSize
init|=
literal|5
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DocumentResult
argument_list|>
name|recentlyEnhanced
decl_stmt|;
specifier|private
name|String
name|indexName
decl_stmt|;
comment|/**      *       * @param context      * @param uriInfo      * @param indexName      *            Name of the LDPath program (name of the Solr core/index) to be used while storing this      *            content item. LDPath programs can be managed through {@link SemanticIndexManagerResource} or      *            {@link SemanticIndexManager}      */
specifier|public
name|StoreResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"index"
argument_list|)
name|String
name|indexName
parameter_list|)
block|{
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|solrStore
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SolrStore
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrSearch
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SolrSearch
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|TcManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Serializer
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|uriInfo
operator|=
name|uriInfo
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|solrStore
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing Solr Store Service"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|solrSearch
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing Solr Search Service"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|tcManager
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing tcManager"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
block|}
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/content/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightContent
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/download/{type}/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightDownload
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/metadata/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightMetadata
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/raw/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightRaw
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightURI
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|,
name|DELETE
argument_list|,
name|OPTIONS
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
comment|/*      * Methods for retrieving various parts e.g raw content, metadata of content items      */
comment|/**      * Cool URI handler for the uploaded resource.      *       * @param uri      *            The URI of the resource in the Stanbol Contenthub store      * @param headers      *            HTTP headers      * @return a redirection to either a browser view, the RDF metadata or the raw binary content      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/content/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|getContent
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|StoreException
block|{
name|uri
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
comment|// handle smart redirection to browser view
for|for
control|(
name|MediaType
name|mt
range|:
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|mt
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|TEXT_HTML
argument_list|)
condition|)
block|{
name|URI
name|pageUri
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"/contenthub"
argument_list|)
operator|.
name|path
argument_list|(
name|indexName
argument_list|)
operator|.
name|path
argument_list|(
literal|"store/page"
argument_list|)
operator|.
name|path
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|pageUri
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// handle smart redirection to RDF metadata view
for|for
control|(
name|MediaType
name|mt
range|:
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|RDF_MEDIA_TYPES
operator|.
name|contains
argument_list|(
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|URI
name|metadataUri
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"/contenthub"
argument_list|)
operator|.
name|path
argument_list|(
name|indexName
argument_list|)
operator|.
name|path
argument_list|(
literal|"store/metadata"
argument_list|)
operator|.
name|path
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|metadataUri
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|URI
name|rawUri
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"/contenthub"
argument_list|)
operator|.
name|path
argument_list|(
name|indexName
argument_list|)
operator|.
name|path
argument_list|(
literal|"store/raw"
argument_list|)
operator|.
name|path
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|rawUri
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * HTTP GET method specific for download operations. Raw data (content item) or only metadata of the      * content item can be downloaded.      *       * @param type      *            Type can be {@code "metadata"} or {@code "raw"}. Based on the type, related parts of the      *            content item will be prepared for download.      * @param uri      *            URI of the resource in the Stanbol Contenthub store      * @param format      *            Rdf serialization format of metadata      * @return Raw content item or metadata of the content item.      * @throws IOException      * @throws StoreException      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/download/{type}/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|downloadContentItem
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"type"
argument_list|)
name|String
name|type
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"format"
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|IOException
throws|,
name|StoreException
block|{
name|type
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|uri
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|format
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"metadata"
argument_list|)
condition|)
block|{
name|String
name|fileName
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|uri
argument_list|,
literal|"utf-8"
argument_list|)
operator|+
literal|"-metadata"
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|baos
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|(
name|Object
operator|)
name|is
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|fileName
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|response
operator|.
name|type
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|response
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"raw"
argument_list|)
condition|)
block|{
name|String
name|fileName
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|uri
argument_list|,
literal|"utf-8"
argument_list|)
operator|+
literal|"-raw"
decl_stmt|;
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|(
name|Object
operator|)
name|ci
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|fileName
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|response
operator|.
name|type
argument_list|(
name|ci
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|response
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
block|}
comment|/**      * HTTP GET method to retrieve the metadata of the content item. Generally, metadata contains the      * enhancements of the content item.      *       * @param uri      *            URI id of the resource in the Stanbol Contenthub store      * @return RDF representation of the metadata of the content item.      * @throws IOException      * @throws StoreException      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/metadata/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|getContentItemMetaData
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|IOException
throws|,
name|StoreException
block|{
name|uri
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
literal|"text/plain"
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * HTTP GET method to retrieve the raw content item.      *       * @param uri      *            URI of the resource in the Stanbol Contenthub store      * @return Raw data of the content item.      * @throws IOException      * @throws StoreException      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/raw/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|getRawContent
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|IOException
throws|,
name|StoreException
block|{
name|uri
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|,
name|ci
operator|.
name|getMimeType
argument_list|()
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/*      * Services for content item creation      */
comment|/**      * HTTP POST method to create a content item in Contenthub. This method takes a {@link ContentItem} object      * directly. This means that the values provided for this service will be parsed by the multipart mime      * serialization of Content Items. (see the following links:<a href=      *       * "http://incubator.apache.org/stanbol/docs/trunk/components/enhancer/contentitem.html#multipart_mime_serialization"      *>Content Item Multipart Serialization</a> and<a      * href="http://incubator.apache.org/stanbol/docs/trunk/components/enhancer/enhancerrest.html">Using the      * multi-part content item RESTful API extensions</a>)      *       * @param ci      *            {@link ContentItem} to be stored.      * @param title      *            The title for the content item. Titles can be used to present summary of the actual content.      *            For example, search results are presented by showing the titles of resultant content items.      * @param chain      *            name of a particular {@link Chain} in which the enhancement engines are ordered according to      *            a specific use case or need      * @param headers      *            HTTP Headers      * @return URI of the newly created contentitem      * @throws StoreException      * @throws URISyntaxException      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MULTIPART_FORM_DATA
argument_list|)
specifier|public
name|Response
name|createContentItem
parameter_list|(
name|ContentItem
name|ci
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"title"
argument_list|)
name|String
name|title
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"chain"
argument_list|)
name|String
name|chain
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|StoreException
throws|,
name|URISyntaxException
block|{
name|title
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|chain
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|MediaType
name|acceptedHeader
init|=
name|RestUtil
operator|.
name|getAcceptedMediaType
argument_list|(
name|headers
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|ci
operator|.
name|addPart
argument_list|(
name|SolrStore
operator|.
name|TITLE_URI
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ci
operator|.
name|getMetadata
argument_list|()
operator|==
literal|null
operator|||
name|ci
operator|.
name|getMetadata
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|solrStore
operator|.
name|enhanceAndPut
argument_list|(
name|ci
argument_list|,
name|indexName
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solrStore
operator|.
name|put
argument_list|(
name|ci
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
name|ResponseBuilder
name|rb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|acceptedHeader
operator|!=
literal|null
operator|&&
name|acceptedHeader
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|)
condition|)
block|{
comment|// use a redirect to point browsers to newly created content
name|rb
operator|=
name|Response
operator|.
name|seeOther
argument_list|(
name|makeRedirectionURI
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rb
operator|=
name|Response
operator|.
name|created
argument_list|(
operator|new
name|URI
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * HTTP POST method to create a content item in Contenthub.      *       * @param data      *            Raw data of the content item      *       * @param uri      *            URI for the content item. If not supplied, Contenthub automatically assigns a unique ID      *            (uri) to the content item.      * @param title      *            The title for the content item. Titles can be used to present summary of the actual content.      *            For example, search results are presented by showing the titles of resultant content items.      * @param chain      *            name of a particular {@link Chain} in which the enhancement engines are ordered according to      *            a specific use case or need      * @param headers      *            HTTP headers      * @return Redirects to "contenthub/{indexName}/store/content/uri" which shows the content item in the      *         HTML view.      * @throws URISyntaxException      * @throws EngineException      * @throws StoreException      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|createContentItemWithURI
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"title"
argument_list|)
name|String
name|title
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"chain"
argument_list|)
name|String
name|chain
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EngineException
throws|,
name|StoreException
block|{
name|uri
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|title
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|chain
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|chain
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|ContentItemHelper
operator|.
name|makeDefaultUrn
argument_list|(
name|data
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
block|}
return|return
name|createEnhanceAndRedirect
argument_list|(
name|data
argument_list|,
name|headers
operator|.
name|getMediaType
argument_list|()
argument_list|,
name|uri
argument_list|,
literal|false
argument_list|,
name|title
argument_list|,
name|chain
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * HTTP POST method to create a content item in Contenthub. This method requires the content to be      * text-based.      *       * @param uri      *            Optional URI for the content item to be created.      * @param content      *            Actual content in text format. If this parameter is supplied, {@link url} is ommitted.      * @param url      *            URL where the actual content resides. If this parameter is supplied (and {@link content} is      *            {@code null}, then the content is retrieved from this url.      * @param title      *            The title for the content item. Titles can be used to present summary of the actual content.      *            For example, search results are presented by showing the titles of resultant content items.      * @param chain      *            name of a particular {@link Chain} in which the enhancement engines are ordered according to      *            a specific use case or need      * @param headers      *            HTTP headers (optional)      * @return Redirects to "contenthub/{indexName}/store/content/uri" which shows the content item in the      *         HTML view.      * @throws URISyntaxException      * @throws EngineException      * @throws MalformedURLException      * @throws IOException      * @throws StoreException      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|APPLICATION_FORM_URLENCODED
argument_list|)
specifier|public
name|Response
name|createContentItemFromForm
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"content"
argument_list|)
name|String
name|content
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"url"
argument_list|)
name|String
name|url
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"title"
argument_list|)
name|String
name|title
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"chain"
argument_list|)
name|String
name|chain
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EngineException
throws|,
name|MalformedURLException
throws|,
name|IOException
throws|,
name|StoreException
block|{
name|uri
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|url
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|title
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|chain
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|chain
argument_list|)
expr_stmt|;
return|return
name|createContentItemFromForm
argument_list|(
name|uri
argument_list|,
name|content
argument_list|,
name|url
argument_list|,
name|headers
argument_list|,
name|title
argument_list|,
name|chain
argument_list|)
return|;
block|}
specifier|private
name|Response
name|createContentItemFromForm
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|url
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|chain
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EngineException
throws|,
name|MalformedURLException
throws|,
name|IOException
throws|,
name|StoreException
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
comment|// TODO: rewrite me in a streamable way to avoid
comment|// buffering all the content in memory
name|MediaType
name|mt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
operator|!
name|content
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|data
operator|=
name|content
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|mt
operator|=
name|TEXT_PLAIN_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|!=
literal|null
operator|&&
operator|!
name|url
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|URLConnection
name|uc
init|=
operator|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|data
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|uc
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|mt
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|uc
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to obtain content from the remote URL: {}"
argument_list|,
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|mt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|uri
operator|=
name|ContentItemHelper
operator|.
name|makeDefaultUrn
argument_list|(
name|data
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
block|}
return|return
name|createEnhanceAndRedirect
argument_list|(
name|data
argument_list|,
name|mt
argument_list|,
name|uri
argument_list|,
literal|true
argument_list|,
name|title
argument_list|,
name|chain
argument_list|,
name|headers
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There should be valid values for the media type and content. Media type: %s, content==null: %b"
argument_list|,
name|mt
argument_list|,
name|content
operator|==
literal|null
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There should be valid values for the media type and content. Media type: %s, content==null: %b"
argument_list|,
name|mt
argument_list|,
name|content
operator|==
literal|null
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/*      * This method takes "title" argument so that it would be easy to specify title while calling RESTful      * services. If the title is specified explicitly it is set as the title otherwise, it is searched in the      * constraints.      */
specifier|private
name|Response
name|createEnhanceAndRedirect
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|String
name|uri
parameter_list|,
name|boolean
name|useExplicitRedirect
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|chain
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|EngineException
throws|,
name|URISyntaxException
throws|,
name|StoreException
block|{
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|create
argument_list|(
name|content
argument_list|,
name|uri
argument_list|,
name|title
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|solrStore
operator|.
name|enhanceAndPut
argument_list|(
name|ci
argument_list|,
name|indexName
argument_list|,
name|chain
argument_list|)
expr_stmt|;
if|if
condition|(
name|useExplicitRedirect
condition|)
block|{
comment|// use an redirect to point browsers to newly created content
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|seeOther
argument_list|(
name|makeRedirectionURI
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|created
argument_list|(
name|makeRedirectionURI
argument_list|(
name|ci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
name|URI
name|makeRedirectionURI
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
operator|+
literal|"contenthub/"
operator|+
name|indexName
operator|+
literal|"/store/content/"
operator|+
name|uri
argument_list|)
return|;
block|}
comment|/**      * HTTP DELETE method to delete a content item from Contenhub.      *       * @param uri      *            URI of the content item to be deleted.      * @return HTTP OK      * @throws StoreException      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/{uri:.+}"
argument_list|)
specifier|public
name|Response
name|deleteContentItem
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|StoreException
block|{
name|uri
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
name|solrStore
operator|.
name|deleteById
argument_list|(
name|uri
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/*      * Services to draw HTML view      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
operator|+
literal|";qs=2"
argument_list|)
specifier|public
name|Viewable
name|getView
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
name|int
name|offset
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"pageSize"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"5"
argument_list|)
name|int
name|pageSize
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|pageSize
operator|=
name|pageSize
expr_stmt|;
name|this
operator|.
name|recentlyEnhanced
operator|=
operator|new
name|ArrayList
argument_list|<
name|DocumentResult
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|solrSearch
operator|instanceof
name|SolrSearch
operator|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Failed to obtain default implementation for SolrSearch"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"sort"
argument_list|,
name|SolrFieldName
operator|.
name|CREATIONDATE
operator|.
name|toString
argument_list|()
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"start"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
comment|// always request 1 more to arrange the "Prev-Next" links correctly
name|params
operator|.
name|set
argument_list|(
literal|"rows"
argument_list|,
name|pageSize
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QueryResponse
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|solrSearch
operator|.
name|search
argument_list|(
name|params
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to retrieve submitted documents"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
return|;
block|}
for|for
control|(
name|SolrDocument
name|result
range|:
name|res
operator|.
name|getResults
argument_list|()
control|)
block|{
name|recentlyEnhanced
operator|.
name|add
argument_list|(
name|SolrContentItemConverter
operator|.
name|solrDocument2solrContentItem
argument_list|(
name|result
argument_list|,
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|indexName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"/page/{uri:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|ContentItemResource
name|getContentItemView
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
throws|,
name|StoreException
block|{
name|ContentItem
name|ci
init|=
name|solrStore
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
return|return
operator|new
name|ContentItemResource
argument_list|(
name|uri
argument_list|,
name|ci
argument_list|,
name|uriInfo
argument_list|,
literal|"/contenthub/"
operator|+
name|indexName
operator|+
literal|"/store/download"
argument_list|,
name|tcManager
argument_list|,
name|serializer
argument_list|,
name|servletContext
argument_list|)
return|;
block|}
comment|// Helper methods for HTML view
specifier|public
name|List
argument_list|<
name|DocumentResult
argument_list|>
name|getRecentlyEnhancedItems
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|recentlyEnhanced
operator|.
name|size
argument_list|()
operator|>
name|pageSize
condition|)
block|{
return|return
name|recentlyEnhanced
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|pageSize
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|recentlyEnhanced
return|;
block|}
block|}
specifier|public
name|URI
name|getMoreRecentItemsUri
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|>=
name|pageSize
condition|)
block|{
return|return
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"contenthub"
argument_list|)
operator|.
name|path
argument_list|(
name|indexName
argument_list|)
operator|.
name|path
argument_list|(
literal|"store"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"offset"
argument_list|,
name|offset
operator|-
name|pageSize
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|URI
name|getOlderItemsUri
parameter_list|()
block|{
if|if
condition|(
name|recentlyEnhanced
operator|.
name|size
argument_list|()
operator|<=
name|pageSize
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"contenthub"
argument_list|)
operator|.
name|path
argument_list|(
name|indexName
argument_list|)
operator|.
name|path
argument_list|(
literal|"store"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"offset"
argument_list|,
name|offset
operator|+
name|pageSize
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexName
return|;
block|}
block|}
end_class

end_unit

