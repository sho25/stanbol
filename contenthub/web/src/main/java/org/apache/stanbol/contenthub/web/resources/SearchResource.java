begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|RegisteredSolrServerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
operator|.
name|EntityHubClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
operator|.
name|ExploreHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
operator|.
name|JSONUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|core
operator|.
name|utils
operator|.
name|SearchUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|Search
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|engine
operator|.
name|SearchEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|DocumentResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|QueryKeyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|processor
operator|.
name|SearchProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
operator|.
name|SolrFieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|search
operator|.
name|model
operator|.
name|EngineInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|search
operator|.
name|model
operator|.
name|SearchInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|web
operator|.
name|search
operator|.
name|model
operator|.
name|TempSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_comment
comment|/**  *   * @author cihan  * @author anil.sinaci  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/contenthub/search"
argument_list|)
specifier|public
class|class
name|SearchResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SearchResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Search
name|searcher
decl_stmt|;
specifier|private
name|SearchProcessor
name|processor
decl_stmt|;
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
specifier|private
name|Object
name|templateData
init|=
literal|null
decl_stmt|;
specifier|private
name|Object
name|facets
init|=
literal|null
decl_stmt|;
specifier|private
name|Object
name|suggestions
init|=
literal|null
decl_stmt|;
specifier|private
name|ManagedSolrServer
name|managedSolrServer
decl_stmt|;
specifier|private
name|SolrServer
name|solrServer
decl_stmt|;
specifier|public
name|SearchResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|searcher
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Search
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|tcManager
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|TcManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|processor
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SearchProcessor
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|managedSolrServer
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ManagedSolrServer
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|BundleContext
name|bundleContext
init|=
name|ContextHelper
operator|.
name|getBundleContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedSolrServer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|managedSolrServer
operator|.
name|isManagedIndex
argument_list|(
literal|"contenthub"
argument_list|)
condition|)
block|{
name|managedSolrServer
operator|.
name|createSolrIndex
argument_list|(
literal|"contenthub"
argument_list|,
literal|"contenthub"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|RegisteredSolrServerTracker
name|tracker
init|=
operator|new
name|RegisteredSolrServerTracker
argument_list|(
name|bundleContext
argument_list|,
operator|new
name|IndexReference
argument_list|(
name|managedSolrServer
operator|.
name|getServerName
argument_list|()
argument_list|,
literal|"contenthub"
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: this is currently done for each request
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|solrServer
operator|=
name|tracker
operator|.
name|getService
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
specifier|final
name|Response
name|get
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"kw"
argument_list|)
name|String
name|keywords
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|keywords
operator|!=
literal|null
operator|&&
name|keywords
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|keywordArray
init|=
name|getKeywordArray
argument_list|(
name|keywords
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allowedEngines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchEngine
name|engine
range|:
name|processor
operator|.
name|listEngines
argument_list|()
control|)
block|{
name|allowedEngines
operator|.
name|add
argument_list|(
name|engine
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SearchContext
name|searchContext
init|=
operator|(
name|SearchContext
operator|)
name|searcher
operator|.
name|search
argument_list|(
name|keywordArray
argument_list|,
literal|null
argument_list|,
name|allowedEngines
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|facets
operator|=
name|getConstraints
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|templateData
operator|=
operator|new
name|TempSearchResult
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"result_full"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|SearchInfo
name|si
init|=
operator|new
name|SearchInfo
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|mGraphs
init|=
name|tcManager
operator|.
name|listMGraphs
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|it
init|=
name|mGraphs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|graphURI
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
if|if
condition|(
name|SearchUtils
operator|.
name|isGraphReserved
argument_list|(
name|graphURI
argument_list|)
condition|)
continue|continue;
name|si
operator|.
name|getOntologies
argument_list|()
operator|.
name|add
argument_list|(
name|graphURI
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchEngine
name|engine
range|:
name|processor
operator|.
name|listEngines
argument_list|()
control|)
block|{
name|si
operator|.
name|getEngines
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|EngineInfo
argument_list|(
name|engine
operator|.
name|toString
argument_list|()
argument_list|,
name|engine
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|templateData
operator|=
name|si
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
index|[]
name|getKeywordArray
parameter_list|(
name|String
name|keywords
parameter_list|)
block|{
name|String
index|[]
name|keywordArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keywords
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|keywords
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|keywordArray
operator|=
operator|new
name|String
index|[
literal|1
index|]
expr_stmt|;
name|keywordArray
index|[
literal|0
index|]
operator|=
name|keywords
expr_stmt|;
block|}
else|else
block|{
comment|// Separate the keywords only by space character.
name|keywordArray
operator|=
name|keywords
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|keywordArray
return|;
block|}
annotation|@
name|POST
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
specifier|public
specifier|final
name|Response
name|search
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"graph"
argument_list|)
name|String
name|graphURI
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"keywords"
argument_list|)
name|String
name|keywords
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"engines[]"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|engines
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"constraints"
argument_list|)
name|String
name|jsonCons
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|facetMap
init|=
name|JSONUtils
operator|.
name|convertToMap
argument_list|(
name|jsonCons
argument_list|)
decl_stmt|;
name|String
index|[]
name|keywordArray
init|=
name|getKeywordArray
argument_list|(
name|keywords
argument_list|)
decl_stmt|;
comment|// FIXME A better implementation should be used instead of this casting.
name|SearchContext
name|searchContext
init|=
operator|(
name|SearchContext
operator|)
name|searcher
operator|.
name|search
argument_list|(
name|keywordArray
argument_list|,
name|graphURI
argument_list|,
name|engines
argument_list|,
name|facetMap
argument_list|)
decl_stmt|;
name|this
operator|.
name|facets
operator|=
name|getConstraints
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|templateData
operator|=
operator|new
name|TempSearchResult
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"result"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/suggestion"
argument_list|)
specifier|public
specifier|final
name|Response
name|explorer
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"keyword"
argument_list|)
name|String
name|keyword
parameter_list|)
block|{
name|this
operator|.
name|suggestions
operator|=
name|exploreFromKeyword
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"suggestionResult"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|Object
name|getConstraints
parameter_list|(
name|SearchContext
name|sc
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|SolrServerException
throws|,
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|QueryKeyword
name|queryKeywords
init|=
name|sc
operator|.
name|getQueryKeyWords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DocumentResource
argument_list|>
name|docList
init|=
name|queryKeywords
operator|.
name|getRelatedDocumentResources
argument_list|()
decl_stmt|;
name|StringBuilder
name|queryBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentResource
name|doc
range|:
name|docList
control|)
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
name|SolrFieldName
operator|.
name|ID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
literal|":\""
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
name|doc
operator|.
name|getDocumentURI
argument_list|()
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
name|SolrVocabulary
operator|.
name|SOLR_OR
argument_list|)
expr_stmt|;
block|}
name|String
name|query
init|=
name|queryBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|length
argument_list|()
operator|>
literal|4
condition|)
block|{
name|query
operator|=
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|SolrQuery
name|solrQuery
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|solrQuery
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setFacetMinCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|sdl
init|=
name|solrServer
operator|.
name|query
argument_list|(
name|solrQuery
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sd
range|:
name|sdl
control|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|sd
operator|.
name|getFieldNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|fieldName
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
name|solrQuery
operator|.
name|setFacet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|SolrFieldName
operator|.
name|CREATIONDATE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|||
operator|(
operator|!
name|SolrFieldName
operator|.
name|isNameReserved
argument_list|(
name|field
argument_list|)
operator|&&
operator|!
name|SolrVocabulary
operator|.
name|isNameExcluded
argument_list|(
name|field
argument_list|)
operator|)
condition|)
block|{
name|solrQuery
operator|.
name|addFacetField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|solrQuery
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QueryResponse
name|result
init|=
name|solrServer
operator|.
name|query
argument_list|(
name|solrQuery
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FacetField
argument_list|>
name|facets
init|=
name|bringAnnotatedFacetsForward
argument_list|(
name|result
operator|.
name|getFacetFields
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|facets
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|facets
return|;
block|}
specifier|public
name|Object
name|getTemplateData
parameter_list|()
block|{
return|return
name|templateData
return|;
block|}
specifier|public
name|Object
name|getFacets
parameter_list|()
block|{
return|return
name|facets
return|;
block|}
specifier|public
name|Object
name|getSuggestions
parameter_list|()
block|{
return|return
name|suggestions
return|;
block|}
comment|// TODO: This method SHOULD be written again, maybe as a SEPERATE class
comment|/**      * this method is written just to see that we can explore from search keyword using entityhub      *       * @param queryKeywords      *            is the all keywords seperated by " " that has been entered in search interface      * @return is the List of all related entity names, returns null if there is no element in hashmap      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|exploreFromKeyword
parameter_list|(
name|String
name|queryKeywords
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resultMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|EntityHubClient
name|ehc
init|=
name|EntityHubClient
operator|.
name|getInstance
argument_list|(
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"entityhub"
argument_list|)
decl_stmt|;
name|String
name|keyword
init|=
name|queryKeywords
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
decl_stmt|;
name|OntModel
name|resultModel
init|=
name|ehc
operator|.
name|referencedSiteFind
argument_list|(
name|keyword
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultModel
operator|!=
literal|null
condition|)
block|{
name|ExploreHelper
name|explorer
init|=
operator|new
name|ExploreHelper
argument_list|(
name|resultModel
argument_list|)
decl_stmt|;
name|resultMap
operator|=
name|explorer
operator|.
name|getSuggestedKeywords
argument_list|()
expr_stmt|;
block|}
return|return
name|resultMap
return|;
block|}
specifier|private
name|List
argument_list|<
name|FacetField
argument_list|>
name|bringAnnotatedFacetsForward
parameter_list|(
name|List
argument_list|<
name|FacetField
argument_list|>
name|facets
parameter_list|)
block|{
name|List
argument_list|<
name|FacetField
argument_list|>
name|annotatedEntityFacets
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetField
name|ff
range|:
name|facets
control|)
block|{
name|String
name|facetName
init|=
name|ff
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAnnotatedEntityFacet
argument_list|(
name|facetName
argument_list|)
condition|)
block|{
name|annotatedEntityFacets
operator|.
name|add
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|FacetField
name|ff
range|:
name|annotatedEntityFacets
control|)
block|{
name|facets
operator|.
name|remove
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FacetField
name|ff
range|:
name|annotatedEntityFacets
control|)
block|{
name|facets
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|ff
argument_list|)
expr_stmt|;
block|}
return|return
name|facets
return|;
block|}
specifier|private
name|boolean
name|isAnnotatedEntityFacet
parameter_list|(
name|String
name|facetName
parameter_list|)
block|{
for|for
control|(
name|SolrFieldName
name|sfn
range|:
name|SolrFieldName
operator|.
name|getAnnotatedEntityFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
name|sfn
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|facetName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

