begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Vocabulary class which provides constant properties to be used in the communication with Solr. Most of  * these properties point to the fields defined in the<b>schema.xml</b> of Solr.  *   * @author anil.sinaci  *   */
end_comment

begin_class
specifier|public
class|class
name|SolrVocabulary
block|{
specifier|private
specifier|static
specifier|final
name|String
name|STANBOLRESERVED_PREFIX
init|=
literal|"stanbolreserved_"
decl_stmt|;
specifier|public
enum|enum
name|SolrFieldName
block|{
comment|/**          * Name of the field which holds entities which carry the dbpedia Place property.          */
name|PLACES
argument_list|(
literal|"places"
operator|+
name|SOLR_DYNAMIC_FIELD_TEXT
argument_list|)
block|,
comment|/**          * Name of the field which holds entities which carry the dbpedia Person property.          */
name|PEOPLE
argument_list|(
literal|"people"
operator|+
name|SOLR_DYNAMIC_FIELD_TEXT
argument_list|)
block|,
comment|/**          * Name of the field which holds entities which carry the dbpedia Organization property.          */
name|ORGANIZATIONS
argument_list|(
literal|"organizations"
operator|+
name|SOLR_DYNAMIC_FIELD_TEXT
argument_list|)
block|,
comment|/**          * Name of the unique ID field.          */
name|ID
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"id"
argument_list|)
block|,
comment|/**          * Name of the field which holds the actual content.          */
name|CONTENT
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"content"
argument_list|)
block|,
comment|/**          * Name of the field which holds the mime type (content type) of the content.          */
name|MIMETYPE
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"mimetype"
argument_list|)
block|,
comment|/**          * Name of the field which holds the creation date of the content.          */
name|CREATIONDATE
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"creationdate"
argument_list|)
block|,
comment|/**          * Name of the field which holds the number of enhancements for the content.          */
name|ENHANCEMENTCOUNT
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"enhancementcount"
argument_list|)
block|,
comment|/**          * Name of the field which holds the countries of the cities mentioned in the content. This field is          * populated by the semantic operations through the enhancements of the content.          */
name|COUNTRIES
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"countries"
argument_list|)
block|,
comment|/**          * Name of the field which holds the image captions of the entities mentioned in the content. This          * field is populated by the semantic operations through the enhancements of the content.          */
name|IMAGECAPTIONS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"imagecaptions"
argument_list|)
block|,
comment|/**          * Name of the field which holds the geographic regions of the cities mentioned in the content. This          * field is populated by the semantic operations through the enhancements of the content.          */
name|REGIONS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"regions"
argument_list|)
block|,
comment|/**          * Name of the field which holds the governors of the provinces mentioned in the content. This field          * is populated by the semantic operations through the enhancements of the content.          */
name|GOVERNORS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"governors"
argument_list|)
block|,
comment|/**          * Name of the field which holds the capital cities of the countries mentioned in the content. This          * field is populated by the semantic operations through the enhancements of the content.          */
name|CAPITALS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"capitals"
argument_list|)
block|,
comment|/**          * Name of the field which holds the largest cities of the entities mentioned in the content. This          * field is populated by the semantic operations through the enhancements of the content.          */
name|LARGESTCITIES
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"largestcities"
argument_list|)
block|,
comment|/**          * Name of the field which holds the names of the leaders of the countries mentioned in the content.          * This field is populated by the semantic operations through the enhancements of the content.          */
name|LEADERNAMES
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"leadernames"
argument_list|)
block|,
comment|/**          * Name of the field which holds the given names of the persons mentioned in the content. This field          * is populated by the semantic operations through the enhancements of the content.          */
name|GIVENNAMES
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"givennames"
argument_list|)
block|,
comment|/**          * Name of the field which holds the important events which are known/invented through the persons          * mentioned in the content. This field is populated by the semantic operations through the          * enhancements of the content.          */
name|KNOWNFORS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"knownfors"
argument_list|)
block|,
comment|/**          * Name of the field which holds the birthplaces/placeofbirths of the persons mentioned in the          * content. This field is populated by the semantic operations through the enhancements of the          * content.          */
name|BIRTHPLACES
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"birthplaces"
argument_list|)
block|,
name|PLACEOFBIRTHS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"placeofbirths"
argument_list|)
block|,
comment|/**          * Name of the field which holds the names of the institutions at which the persons mentioned in the          * content worked. This field is populated by the semantic operations through the enhancements of the          * content.          */
name|WORKINSTITUTIONS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"workinstitutions"
argument_list|)
block|,
comment|/**          * Name of the field which holds the captions of the images belonging to the persons mentioned in the          * content. This field is populated by the semantic operations through the enhancements of the          * content.          */
name|CAPTIONS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"captions"
argument_list|)
block|,
comment|/**          * Name of the field which holds the short descriptions of the persons mentioned in the content. This          * field is populated by the semantic operations through the enhancements of the content.          */
name|SHORTDESCRIPTIONS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"shortdescriptions"
argument_list|)
block|,
comment|/**          * Name of the field which holds the fields on which the persons mentioned in the content studied.          * This field is populated by the semantic operations through the enhancements of the content.          */
name|FIELDS
argument_list|(
name|STANBOLRESERVED_PREFIX
operator|+
literal|"fields"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|SolrFieldName
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
specifier|static
name|SolrFieldName
index|[]
name|getSemanticFieldNames
parameter_list|()
block|{
comment|// Semantic fields start from the 8th enumeration.
name|SolrFieldName
index|[]
name|allFields
init|=
name|values
argument_list|()
decl_stmt|;
name|SolrFieldName
index|[]
name|semanticFieldNames
init|=
operator|new
name|SolrFieldName
index|[
name|allFields
operator|.
name|length
operator|-
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|8
init|;
name|i
operator|<
name|allFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|semanticFieldNames
index|[
name|i
operator|-
literal|8
index|]
operator|=
name|allFields
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|semanticFieldNames
return|;
block|}
specifier|public
specifier|static
name|SolrFieldName
index|[]
name|getAnnotatedEntityFieldNames
parameter_list|()
block|{
name|SolrFieldName
index|[]
name|annotatedEntityFieldNames
init|=
block|{
name|PLACES
block|,
name|PEOPLE
block|,
name|ORGANIZATIONS
block|}
decl_stmt|;
return|return
name|annotatedEntityFieldNames
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isNameReserved
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// Reserved keywords starts from the 3rd enumeration
name|SolrFieldName
index|[]
name|allFields
init|=
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|allFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|allFields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Ending characters for dynamic fields of {@link String} type.      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_DYNAMIC_FIELD_TEXT
init|=
literal|"_t"
decl_stmt|;
comment|/**      * Ending characters for dynamic fields of {@link Long} type.      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_DYNAMIC_FIELD_LONG
init|=
literal|"_l"
decl_stmt|;
comment|/**      * Ending characters for dynamic fields of {@link Double} type.      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_DYNAMIC_FIELD_DOUBLE
init|=
literal|"_d"
decl_stmt|;
comment|/**      * Ending characters for dynamic fields of {@link Date} type.      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_DYNAMIC_FIELD_DATE
init|=
literal|"_dt"
decl_stmt|;
comment|/**      * "OR" keyword for Solr queries.      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_OR
init|=
literal|" OR "
decl_stmt|;
comment|/**      * Checks whether the specified field is excluded or not i.e whether the field will be presented as a      * facet or not      *       * @param name      *            field name      */
specifier|public
specifier|static
name|boolean
name|isNameExcluded
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// trim the data type extension if there is one
name|int
name|underscoreIndex
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|underscoreIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|extension
init|=
name|name
operator|.
name|substring
argument_list|(
name|underscoreIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|extension
operator|.
name|equals
argument_list|(
name|SOLR_DYNAMIC_FIELD_DATE
argument_list|)
operator|||
name|extension
operator|.
name|equals
argument_list|(
name|SOLR_DYNAMIC_FIELD_DOUBLE
argument_list|)
operator|||
name|extension
operator|.
name|equals
argument_list|(
name|SOLR_DYNAMIC_FIELD_LONG
argument_list|)
operator|||
name|extension
operator|.
name|equals
argument_list|(
name|SOLR_DYNAMIC_FIELD_TEXT
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|underscoreIndex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|excludedFields
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Fields that will not be presented as facets      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|excludedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|excludedFields
operator|.
name|add
argument_list|(
literal|"cmis:name"
argument_list|)
expr_stmt|;
name|excludedFields
operator|.
name|add
argument_list|(
literal|"skos:definition"
argument_list|)
expr_stmt|;
name|excludedFields
operator|.
name|add
argument_list|(
literal|"rdfs:label"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

