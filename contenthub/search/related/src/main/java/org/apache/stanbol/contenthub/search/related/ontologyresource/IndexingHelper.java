begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|related
operator|.
name|ontologyresource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ResourceFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_comment
comment|/**  * This class is created to create LARQ index of external ontology provided for the search operation  */
end_comment

begin_class
specifier|public
class|class
name|IndexingHelper
block|{
comment|/**      * Represents the special property which is used by Lucene while creating the index. At the beginning of a      * search operation, user ontology is processed to add this special property to each class and individual      * resource by using their local names.      */
specifier|public
specifier|static
specifier|final
name|Property
name|HAS_LOCAL_NAME
init|=
name|property
argument_list|(
literal|"hasLocalName"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Property
name|property
parameter_list|(
name|String
name|local
parameter_list|)
block|{
return|return
name|ResourceFactory
operator|.
name|createProperty
argument_list|(
name|Constants
operator|.
name|SEARCH_URI
argument_list|,
name|local
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|addIndexPropertyToOntResources
parameter_list|(
name|OntModel
name|model
parameter_list|)
block|{
comment|// Add class names
for|for
control|(
name|OntClass
name|klass
range|:
name|model
operator|.
name|listClasses
argument_list|()
operator|.
name|toList
argument_list|()
control|)
block|{
if|if
condition|(
name|klass
operator|==
literal|null
operator|||
name|klass
operator|.
name|isAnon
argument_list|()
condition|)
continue|continue;
name|klass
operator|.
name|addProperty
argument_list|(
name|HAS_LOCAL_NAME
argument_list|,
name|klass
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add individual names
for|for
control|(
name|OntResource
name|ind
range|:
name|model
operator|.
name|listIndividuals
argument_list|()
operator|.
name|toList
argument_list|()
control|)
block|{
if|if
condition|(
name|ind
operator|==
literal|null
operator|||
name|ind
operator|.
name|isAnon
argument_list|()
condition|)
continue|continue;
name|ind
operator|.
name|addProperty
argument_list|(
name|HAS_LOCAL_NAME
argument_list|,
name|ind
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add CMS objects
name|Resource
name|cmsObject
init|=
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|Constants
operator|.
name|CMS_OBJECT
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Statement
argument_list|>
name|cmsOBjects
init|=
name|model
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|cmsObject
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|Statement
name|stmt
range|:
name|cmsOBjects
control|)
block|{
name|Resource
name|subject
init|=
name|stmt
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|/*              * As index is created based on SearchVocabulary.HAS_LOCAL_NAME property, it is necessary to add              * name of CMS Objects in that property.              */
name|String
name|name
init|=
name|getCMSObjectName
argument_list|(
name|subject
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|Statement
name|s
init|=
name|ResourceFactory
operator|.
name|createStatement
argument_list|(
name|subject
argument_list|,
name|HAS_LOCAL_NAME
argument_list|,
name|ResourceFactory
operator|.
name|createPlainLiteral
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getCMSObjectName
parameter_list|(
name|Resource
name|subject
parameter_list|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
name|Property
name|cmsNameProp
init|=
name|ResourceFactory
operator|.
name|createProperty
argument_list|(
name|Constants
operator|.
name|CMS_OBJECT_NAME
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|.
name|hasProperty
argument_list|(
name|cmsNameProp
argument_list|)
condition|)
block|{
name|name
operator|=
name|subject
operator|.
name|getProperty
argument_list|(
name|cmsNameProp
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

