begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|related
operator|.
name|referencedsite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|related
operator|.
name|RelatedKeywordImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|SearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|related
operator|.
name|RelatedKeyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|related
operator|.
name|RelatedKeywordSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
operator|.
name|PatternType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|impl
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * This class is constructed with an rdf model that will be queried and extracts semantically related entities  * according to the entity type's  *   * @author anil.pacaci  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
specifier|public
class|class
name|ReferencedSiteSearch
implements|implements
name|RelatedKeywordSearch
block|{
specifier|private
specifier|static
name|String
name|DBPEDIA_ONT_NAMESPACE
init|=
literal|"http://dbpedia.org/ontology/"
decl_stmt|;
comment|/**      * dbpedia-owl:place ranged properties for related places      */
specifier|public
specifier|final
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|placeTypedProperties
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|DBPEDIA_ONT_NAMESPACE
operator|+
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"country"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"largestCity"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"city"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"state"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"capital"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"isPartOf"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"part"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"deathPlace"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"birthPlace"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"location"
block|}
argument_list|)
decl_stmt|;
comment|/**      * dbpedia-owl:person ranged properties for related persons      */
specifier|public
specifier|final
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|personTypedProperties
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"leader"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"leaderName"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"child"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"spouse"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"partner"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"president"
block|}
argument_list|)
decl_stmt|;
comment|/**      * dbpedia-owl:organization ranged properties for related organizations      */
specifier|public
specifier|final
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|organizationTypedProperties
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"leaderParty"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"affiliation"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"team"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"party"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"otherParty"
block|,
name|DBPEDIA_ONT_NAMESPACE
operator|+
literal|"associatedBand"
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReferencedSiteSearch
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Entityhub
name|entityhub
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|SiteManager
name|referencedSiteManager
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
name|search
parameter_list|(
name|String
name|keyword
parameter_list|)
throws|throws
name|SearchException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|getFieldQuery
argument_list|(
name|keyword
argument_list|)
decl_stmt|;
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|externalEnties
init|=
name|referencedSiteManager
operator|.
name|find
argument_list|(
name|fieldQuery
argument_list|)
decl_stmt|;
name|String
name|entityId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalEnties
operator|!=
literal|null
operator|&&
name|externalEnties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|entityId
operator|=
name|externalEnties
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
try|try
block|{
name|Entity
name|entity
init|=
name|entityhub
operator|.
name|lookupLocalEntity
argument_list|(
name|entityId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|results
operator|=
name|getRelatedKeywordsFromEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"There is no obtained external entity having id: {}"
argument_list|,
name|entityId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Got entityhub exception while looking up for entity: {}"
argument_list|,
name|entityId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
name|search
parameter_list|(
name|String
name|keyword
parameter_list|,
name|String
name|ontologyURI
parameter_list|)
throws|throws
name|SearchException
block|{
return|return
name|search
argument_list|(
name|keyword
argument_list|)
return|;
block|}
specifier|private
name|FieldQuery
name|getFieldQuery
parameter_list|(
name|String
name|keyword
parameter_list|)
block|{
name|FieldQueryFactory
name|qf
init|=
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|FieldQuery
name|fieldQuery
init|=
name|qf
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|selectedFields
operator|.
name|add
argument_list|(
name|RDFS
operator|.
name|label
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|addSelectedFields
argument_list|(
name|selectedFields
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|RDFS
operator|.
name|label
operator|.
name|getUnicodeString
argument_list|()
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|keyword
argument_list|,
name|PatternType
operator|.
name|wildcard
argument_list|,
literal|false
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|setLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fieldQuery
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|fieldQuery
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
name|getRelatedKeywordsFromEntity
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Representation
name|entityRep
init|=
name|entity
operator|.
name|getRepresentation
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|entityRep
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
name|processProperties
argument_list|(
name|organizationTypedProperties
argument_list|,
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|,
name|entity
operator|.
name|getSite
argument_list|()
operator|+
literal|"#Organization"
argument_list|,
name|field
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|processProperties
argument_list|(
name|personTypedProperties
argument_list|,
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|,
name|entity
operator|.
name|getSite
argument_list|()
operator|+
literal|"#Person"
argument_list|,
name|field
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|processProperties
argument_list|(
name|placeTypedProperties
argument_list|,
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|,
name|entity
operator|.
name|getSite
argument_list|()
operator|+
literal|"#Place"
argument_list|,
name|field
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|void
name|processProperties
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|semanticProperties
parameter_list|,
name|Representation
name|entityRep
parameter_list|,
name|String
name|source
parameter_list|,
name|String
name|field
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|semanticProperties
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
name|entityRep
operator|.
name|get
argument_list|(
name|field
argument_list|)
init|;
name|fieldValues
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|fieldValue
init|=
name|fieldValues
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldValueStr
decl_stmt|;
try|try
block|{
name|fieldValueStr
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|fieldValue
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|DEFAULT_ENCODING
argument_list|)
expr_stmt|;
name|fieldValueStr
operator|=
name|fieldValueStr
operator|.
name|substring
argument_list|(
name|Util
operator|.
name|splitNamespace
argument_list|(
name|fieldValueStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unsupported encoding while trying to decode to related entity URI"
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RelatedKeyword
name|rkw
init|=
operator|new
name|RelatedKeywordImpl
argument_list|(
name|fieldValueStr
argument_list|,
literal|0
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|containsKey
argument_list|(
name|source
argument_list|)
condition|)
block|{
name|results
operator|.
name|get
argument_list|(
name|source
argument_list|)
operator|.
name|add
argument_list|(
name|rkw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
name|rkwList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|()
decl_stmt|;
name|rkwList
operator|.
name|add
argument_list|(
name|rkw
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|rkwList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

