begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|engines
operator|.
name|wordnet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|engine
operator|.
name|EngineProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|engine
operator|.
name|SearchEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|engine
operator|.
name|SearchEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|QueryKeyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|SearchContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|execution
operator|.
name|Keyword
operator|.
name|RelatedKeywordSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author cihan  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|WordnetEngine
implements|implements
name|SearchEngine
implements|,
name|EngineProperties
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WordnetEngine
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|WordnetEngine
operator|.
name|WORDNET_DATABASE
argument_list|,
name|value
operator|=
literal|""
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|WORDNET_DATABASE
init|=
literal|"org.apache.stanbol.contenthub.search.engines.wordnet.Wordnet.database"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|WordnetEngine
operator|.
name|WORDNET_EXPANSION_LEVEL
argument_list|,
name|value
operator|=
literal|"1"
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"1"
argument_list|,
name|value
operator|=
literal|"1"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"2"
argument_list|,
name|value
operator|=
literal|"2"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"3"
argument_list|,
name|value
operator|=
literal|"3"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"4"
argument_list|,
name|value
operator|=
literal|"4"
argument_list|)
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|WORDNET_EXPANSION_LEVEL
init|=
literal|"org.apache.stanbol.contenthub.search.engines.wordnet.Wordnet.expansionLevel"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|WordnetEngine
operator|.
name|WORDNET_DEGRADING_FACTOR
argument_list|,
name|value
operator|=
literal|"1.0"
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"1.0"
argument_list|,
name|value
operator|=
literal|"1.0"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"1.9"
argument_list|,
name|value
operator|=
literal|"1.9"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"2.0"
argument_list|,
name|value
operator|=
literal|"2.0"
argument_list|)
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|WORDNET_DEGRADING_FACTOR
init|=
literal|"org.apache.stanbol.contenthub.search.engines.wordnet.Wordnet.degradingFactor"
decl_stmt|;
specifier|private
name|WordnetClient
name|wordnetClient
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|engineProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|void
name|checkProperties
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|properties
parameter_list|)
block|{
name|Object
name|databasePath
init|=
name|properties
operator|.
name|get
argument_list|(
name|WORDNET_DATABASE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|databasePath
operator|instanceof
name|String
operator|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|databasePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wordnet database path can not be empty"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Activate
specifier|public
specifier|final
name|void
name|activate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|properties
init|=
name|cc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|checkProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|String
name|wordnetDatabase
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|WORDNET_DATABASE
argument_list|)
decl_stmt|;
name|Integer
name|expansionLevel
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|WORDNET_EXPANSION_LEVEL
argument_list|)
argument_list|)
decl_stmt|;
name|Double
name|degradingFactor
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|WORDNET_DEGRADING_FACTOR
argument_list|)
argument_list|)
decl_stmt|;
name|wordnetClient
operator|=
operator|new
name|WordnetClient
argument_list|(
name|wordnetDatabase
argument_list|,
name|expansionLevel
argument_list|,
name|degradingFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|engineProperties
operator|.
name|put
argument_list|(
name|EngineProperties
operator|.
name|PROCESSING_ORDER
argument_list|,
name|EngineProperties
operator|.
name|PROCESSING_PRE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|search
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|)
throws|throws
name|SearchEngineException
block|{
name|SearchContextFactory
name|f
init|=
name|searchContext
operator|.
name|getFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryKeyword
name|qkw
range|:
name|searchContext
operator|.
name|getQueryKeyWords
argument_list|()
control|)
block|{
comment|// First keyword is always with the highest score
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Getting related words for {}, {}"
argument_list|,
name|qkw
operator|.
name|getKeyword
argument_list|()
argument_list|,
name|qkw
operator|.
name|getScore
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Scored
argument_list|>
name|keywords
init|=
name|wordnetClient
operator|.
name|getScoredWordnetResources
argument_list|(
name|normalize
argument_list|(
name|qkw
operator|.
name|getKeyword
argument_list|()
argument_list|)
argument_list|,
name|qkw
operator|.
name|getScore
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Scored
name|wordnetFinding
range|:
name|keywords
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"\t {}:{}"
argument_list|,
name|wordnetFinding
operator|.
name|getKeyword
argument_list|()
argument_list|,
name|wordnetFinding
operator|.
name|getScore
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|createKeyword
argument_list|(
name|wordnetFinding
operator|.
name|getKeyword
argument_list|()
argument_list|,
name|wordnetFinding
operator|.
name|getScore
argument_list|()
argument_list|,
name|qkw
argument_list|,
name|RelatedKeywordSource
operator|.
name|WORDNET
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|normalize
parameter_list|(
name|String
name|keyword
parameter_list|)
block|{
return|return
name|keyword
operator|.
name|replaceAll
argument_list|(
literal|"[^a-zA-Z0-9]"
argument_list|,
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getEngineProperties
parameter_list|()
block|{
return|return
name|this
operator|.
name|engineProperties
return|;
block|}
block|}
end_class

end_unit

