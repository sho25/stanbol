begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|featured
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|featured
operator|.
name|util
operator|.
name|SolrContentItemConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrQueryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|SearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|FeaturedSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|ResultantDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|related
operator|.
name|RelatedKeyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|related
operator|.
name|RelatedKeywordSearchManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|solr
operator|.
name|SolrSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|StoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|vocabulary
operator|.
name|SolrVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|store
operator|.
name|solr
operator|.
name|manager
operator|.
name|SolrCoreManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementJobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|InMemoryContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|FeaturedSearchImpl
implements|implements
name|FeaturedSearch
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FeaturedSearchImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|stopWords
decl_stmt|;
static|static
block|{
name|stopWords
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
comment|// TODO read stopwords from the files located in default solr core zip
name|List
argument_list|<
name|String
argument_list|>
name|englishStopWords
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"i"
argument_list|,
literal|"me"
argument_list|,
literal|"my"
argument_list|,
literal|"myself"
argument_list|,
literal|"we"
argument_list|,
literal|"our"
argument_list|,
literal|"ours"
argument_list|,
literal|"ourselves"
argument_list|,
literal|"you"
argument_list|,
literal|"your"
argument_list|,
literal|"yours"
argument_list|,
literal|"yourself"
argument_list|,
literal|"yourselves"
argument_list|,
literal|"he"
argument_list|,
literal|"him"
argument_list|,
literal|"his"
argument_list|,
literal|"himself"
argument_list|,
literal|"she"
argument_list|,
literal|"her"
argument_list|,
literal|"hers"
argument_list|,
literal|"herself"
argument_list|,
literal|"it"
argument_list|,
literal|"its"
argument_list|,
literal|"itself"
argument_list|,
literal|"they"
argument_list|,
literal|"them"
argument_list|,
literal|"their"
argument_list|,
literal|"theirs"
argument_list|,
literal|"themselves"
argument_list|,
literal|"what"
argument_list|,
literal|"which"
argument_list|,
literal|"who"
argument_list|,
literal|"whom"
argument_list|,
literal|"this"
argument_list|,
literal|"that"
argument_list|,
literal|"these"
argument_list|,
literal|"those"
argument_list|,
literal|"am"
argument_list|,
literal|"is"
argument_list|,
literal|"are"
argument_list|,
literal|"was"
argument_list|,
literal|"were"
argument_list|,
literal|"be  "
argument_list|,
literal|"been"
argument_list|,
literal|"being"
argument_list|,
literal|"have"
argument_list|,
literal|"has "
argument_list|,
literal|"had "
argument_list|,
literal|"having"
argument_list|,
literal|"do"
argument_list|,
literal|"does"
argument_list|,
literal|"did "
argument_list|,
literal|"doing"
argument_list|,
literal|"would"
argument_list|,
literal|"should"
argument_list|,
literal|"could"
argument_list|,
literal|"ought"
argument_list|,
literal|"a"
argument_list|,
literal|"an"
argument_list|,
literal|"the"
argument_list|,
literal|"and"
argument_list|,
literal|"but"
argument_list|,
literal|"if"
argument_list|,
literal|"or"
argument_list|,
literal|"because"
argument_list|,
literal|"as"
argument_list|,
literal|"until"
argument_list|,
literal|"while"
argument_list|,
literal|""
argument_list|,
literal|"of"
argument_list|,
literal|"at"
argument_list|,
literal|"by"
argument_list|,
literal|"for"
argument_list|,
literal|"with"
argument_list|,
literal|"about"
argument_list|,
literal|"against"
argument_list|,
literal|"between"
argument_list|,
literal|"into"
argument_list|,
literal|"through"
argument_list|,
literal|"during"
argument_list|,
literal|"before"
argument_list|,
literal|"after"
argument_list|,
literal|"above"
argument_list|,
literal|"below"
argument_list|,
literal|"to"
argument_list|,
literal|"from"
argument_list|,
literal|"up"
argument_list|,
literal|"down"
argument_list|,
literal|"in"
argument_list|,
literal|"out"
argument_list|,
literal|"on"
argument_list|,
literal|"off"
argument_list|,
literal|"over"
argument_list|,
literal|"under"
argument_list|,
literal|"again"
argument_list|,
literal|"further"
argument_list|,
literal|"then"
argument_list|,
literal|"once"
argument_list|,
literal|"here"
argument_list|,
literal|"there"
argument_list|,
literal|"when"
argument_list|,
literal|"where"
argument_list|,
literal|"why"
argument_list|,
literal|"how"
argument_list|,
literal|"all"
argument_list|,
literal|"any"
argument_list|,
literal|"both"
argument_list|,
literal|"each"
argument_list|,
literal|"few"
argument_list|,
literal|"more"
argument_list|,
literal|"most"
argument_list|,
literal|"other"
argument_list|,
literal|"some"
argument_list|,
literal|"such"
argument_list|,
literal|"no"
argument_list|,
literal|"nor"
argument_list|,
literal|"not"
argument_list|,
literal|"only"
argument_list|,
literal|"own"
argument_list|,
literal|"same"
argument_list|,
literal|"so"
argument_list|,
literal|"than"
argument_list|,
literal|"too"
argument_list|,
literal|"very"
argument_list|,
literal|"i'm"
argument_list|,
literal|"you're"
argument_list|,
literal|"he's"
argument_list|,
literal|"she's"
argument_list|,
literal|"it's"
argument_list|,
literal|"we're"
argument_list|,
literal|"they're"
argument_list|,
literal|"i've"
argument_list|,
literal|"you've"
argument_list|,
literal|"we've"
argument_list|,
literal|"they've"
argument_list|,
literal|"i'd"
argument_list|,
literal|"you'd"
argument_list|,
literal|"he'd"
argument_list|,
literal|"she'd"
argument_list|,
literal|"we'd"
argument_list|,
literal|"they'd"
argument_list|,
literal|"i'll"
argument_list|,
literal|"you'll"
argument_list|,
literal|"he'll"
argument_list|,
literal|"she'll"
argument_list|,
literal|"we'll"
argument_list|,
literal|"they'll"
argument_list|,
literal|"isn't"
argument_list|,
literal|"aren't"
argument_list|,
literal|"wasn't"
argument_list|,
literal|"weren't"
argument_list|,
literal|"hasn't"
argument_list|,
literal|"haven't"
argument_list|,
literal|"hadn't"
argument_list|,
literal|"doesn't"
argument_list|,
literal|"don't"
argument_list|,
literal|"didn't"
argument_list|,
literal|"won't"
argument_list|,
literal|"wouldn't"
argument_list|,
literal|"shan't"
argument_list|,
literal|"shouldn't"
argument_list|,
literal|"can't"
argument_list|,
literal|"cannot"
argument_list|,
literal|"couldn't"
argument_list|,
literal|"mustn't"
argument_list|,
literal|"let's"
argument_list|,
literal|"that's"
argument_list|,
literal|"who's"
argument_list|,
literal|"what's"
argument_list|,
literal|"here's"
argument_list|,
literal|"there's"
argument_list|,
literal|"when's"
argument_list|,
literal|"where's"
argument_list|,
literal|"why's"
argument_list|,
literal|"how's"
argument_list|,
literal|"of"
argument_list|)
decl_stmt|;
name|stopWords
operator|.
name|put
argument_list|(
literal|"en"
argument_list|,
name|englishStopWords
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Reference
specifier|private
name|SolrSearch
name|solrSearch
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|RelatedKeywordSearchManager
name|relatedKeywordSearchManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ManagedSolrServer
name|managedSolrServer
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|EnhancementJobManager
name|enhancementJobManager
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SearchResult
name|search
parameter_list|(
name|String
name|queryTerm
parameter_list|)
throws|throws
name|SearchException
block|{
return|return
name|search
argument_list|(
name|queryTerm
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|FacetField
argument_list|>
name|bringAnnotatedFacetsForward
parameter_list|(
name|List
argument_list|<
name|FacetField
argument_list|>
name|facets
parameter_list|)
block|{
name|List
argument_list|<
name|FacetField
argument_list|>
name|annotatedEntityFacets
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetField
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FacetField
argument_list|>
name|facetsHavingNullValues
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetField
name|ff
range|:
name|facets
control|)
block|{
name|String
name|facetName
init|=
name|ff
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ff
operator|.
name|getValues
argument_list|()
operator|==
literal|null
condition|)
block|{
name|facetsHavingNullValues
operator|.
name|add
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SolrVocabulary
operator|.
name|SolrFieldName
operator|.
name|isAnnotatedEntityFacet
argument_list|(
name|facetName
argument_list|)
condition|)
block|{
name|annotatedEntityFacets
operator|.
name|add
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|FacetField
name|ff
range|:
name|annotatedEntityFacets
control|)
block|{
name|facets
operator|.
name|remove
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FacetField
name|ff
range|:
name|annotatedEntityFacets
control|)
block|{
name|facets
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|ff
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FacetField
name|ff
range|:
name|facetsHavingNullValues
control|)
block|{
name|facets
operator|.
name|remove
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
return|return
name|facets
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchResult
name|search
parameter_list|(
name|String
name|queryTerm
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|String
name|ldProgramName
parameter_list|)
throws|throws
name|SearchException
block|{
name|QueryResponse
name|queryResponse
init|=
name|solrSearch
operator|.
name|search
argument_list|(
name|queryTerm
argument_list|,
name|ldProgramName
argument_list|)
decl_stmt|;
return|return
name|search
argument_list|(
name|queryTerm
argument_list|,
name|queryResponse
argument_list|,
name|ontologyURI
argument_list|,
name|ldProgramName
argument_list|)
return|;
block|}
specifier|private
name|SearchResult
name|search
parameter_list|(
name|String
name|queryTerm
parameter_list|,
name|QueryResponse
name|queryResponse
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|String
name|ldProgramName
parameter_list|)
throws|throws
name|SearchException
block|{
name|List
argument_list|<
name|ResultantDocument
argument_list|>
name|resultantDocuments
init|=
operator|new
name|ArrayList
argument_list|<
name|ResultantDocument
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|solrDocument
range|:
name|queryResponse
operator|.
name|getResults
argument_list|()
control|)
block|{
name|resultantDocuments
operator|.
name|add
argument_list|(
name|SolrContentItemConverter
operator|.
name|solrDocument2solrContentItem
argument_list|(
name|solrDocument
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
argument_list|>
name|relatedKeywords
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RelatedKeyword
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queryTerms
init|=
name|tokenizeEntities
argument_list|(
name|queryTerm
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queryToken
range|:
name|queryTerms
control|)
block|{
name|relatedKeywords
operator|.
name|putAll
argument_list|(
name|relatedKeywordSearchManager
operator|.
name|getRelatedKeywordsFromAllSources
argument_list|(
name|queryToken
argument_list|,
name|ontologyURI
argument_list|)
operator|.
name|getRelatedKeywords
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FeaturedSearchResult
argument_list|(
name|resultantDocuments
argument_list|,
name|bringAnnotatedFacetsForward
argument_list|(
name|queryResponse
operator|.
name|getFacetFields
argument_list|()
argument_list|)
argument_list|,
name|relatedKeywords
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchResult
name|search
parameter_list|(
name|SolrParams
name|solrQuery
parameter_list|)
throws|throws
name|SearchException
block|{
return|return
name|search
argument_list|(
name|solrQuery
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchResult
name|search
parameter_list|(
name|SolrParams
name|solrQuery
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|String
name|ldProgramName
parameter_list|)
throws|throws
name|SearchException
block|{
name|QueryResponse
name|queryResponse
init|=
name|solrSearch
operator|.
name|search
argument_list|(
name|solrQuery
argument_list|,
name|ldProgramName
argument_list|)
decl_stmt|;
name|String
name|queryTerm
init|=
name|SolrQueryUtil
operator|.
name|extractQueryTermFromSolrQuery
argument_list|(
name|solrQuery
argument_list|)
decl_stmt|;
return|return
name|search
argument_list|(
name|queryTerm
argument_list|,
name|queryResponse
argument_list|,
name|ontologyURI
argument_list|,
name|ldProgramName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFacetNames
parameter_list|()
throws|throws
name|SearchException
block|{
return|return
name|getFacetNames
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFacetNames
parameter_list|(
name|String
name|ldProgramName
parameter_list|)
throws|throws
name|SearchException
block|{
name|SolrServer
name|solrServer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|solrServer
operator|=
name|SolrCoreManager
operator|.
name|getInstance
argument_list|(
name|bundleContext
argument_list|,
name|managedSolrServer
argument_list|)
operator|.
name|getServer
argument_list|(
name|ldProgramName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StoreException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"SolrSearchImpl.getFacetNames: Failed to obtain solr server for ldprogram: %s"
argument_list|,
name|ldProgramName
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SearchException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|facetNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|facetNames
operator|=
name|SolrQueryUtil
operator|.
name|getFacetNames
argument_list|(
name|solrServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"SolrSearchImpl.getFacetNames: Failed to execute solr query"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SearchException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SearchException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|facetNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|tokenizeEntities
parameter_list|(
name|String
name|queryTerm
parameter_list|)
block|{
comment|// obtain entities about query term through Enhancer
name|ContentItem
name|ci
init|=
literal|null
decl_stmt|;
name|boolean
name|error
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ci
operator|=
operator|new
name|InMemoryContentItem
argument_list|(
name|queryTerm
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|enhancementJobManager
operator|.
name|enhanceContent
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to get bytes of query term: {}"
argument_list|,
name|queryTerm
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EnhancementException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to get enmancements for the query term: {}"
argument_list|,
name|queryTerm
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tokenizedTerms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|||
name|ci
operator|==
literal|null
operator|||
name|ci
operator|.
name|getMetadata
argument_list|()
operator|==
literal|null
condition|)
block|{
name|tokenizedTerms
operator|.
name|add
argument_list|(
name|queryTerm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// traverse selected text assertions
name|MGraph
name|queryTermMetadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|textAnnotations
init|=
name|queryTermMetadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|textAnnotations
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|textAnnotations
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|selectedText
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Literal
condition|)
block|{
name|selectedText
operator|=
operator|(
operator|(
name|Literal
operator|)
name|r
operator|)
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|selectedText
operator|=
name|r
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|tokenizedTerms
operator|.
name|add
argument_list|(
name|selectedText
argument_list|)
expr_stmt|;
block|}
comment|// get language of the query term
name|String
name|language
init|=
literal|"en"
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|lanIt
init|=
name|queryTermMetadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|DC_LANGUAGE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|lanIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|lanIt
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Literal
condition|)
block|{
name|language
operator|=
operator|(
operator|(
name|Literal
operator|)
name|r
operator|)
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|language
operator|=
name|r
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*              * If there is no stopword list for the language detected, it is highly possible that the default              * language is detected is false. As English is the most common language, it is set as default.              */
if|if
condition|(
operator|!
name|stopWords
operator|.
name|containsKey
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|language
operator|=
literal|"en"
expr_stmt|;
block|}
comment|// eliminate entity query tokens from the original query term
for|for
control|(
name|String
name|queryToken
range|:
name|tokenizedTerms
control|)
block|{
name|queryTerm
operator|=
name|removeQueryToken
argument_list|(
name|queryTerm
argument_list|,
name|queryToken
argument_list|)
expr_stmt|;
block|}
comment|// find non-entity query tokens
name|tokenizedTerms
operator|.
name|addAll
argument_list|(
name|getNonEntityQueryTerms
argument_list|(
name|queryTerm
argument_list|,
name|language
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenizedTerms
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getNonEntityQueryTerms
parameter_list|(
name|String
name|queryTerm
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|String
name|currentWord
init|=
literal|""
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queryTokens
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|languageSpecificStopWords
init|=
name|stopWords
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryTerm
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|SolrQueryUtil
operator|.
name|queryDelimiters
operator|.
name|contains
argument_list|(
name|queryTerm
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|currentWord
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
name|languageSpecificStopWords
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|languageSpecificStopWords
operator|.
name|contains
argument_list|(
name|currentWord
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|queryTokens
operator|.
name|add
argument_list|(
name|currentWord
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|queryTokens
operator|.
name|add
argument_list|(
name|currentWord
argument_list|)
expr_stmt|;
block|}
block|}
name|currentWord
operator|=
literal|""
expr_stmt|;
continue|continue;
block|}
name|currentWord
operator|+=
name|queryTerm
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// check for the last word
if|if
condition|(
operator|!
name|currentWord
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
name|languageSpecificStopWords
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|languageSpecificStopWords
operator|.
name|contains
argument_list|(
name|currentWord
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|queryTokens
operator|.
name|add
argument_list|(
name|currentWord
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|queryTokens
operator|.
name|add
argument_list|(
name|currentWord
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queryTokens
return|;
block|}
specifier|private
name|String
name|removeQueryToken
parameter_list|(
name|String
name|queryTerm
parameter_list|,
name|String
name|queryToken
parameter_list|)
block|{
name|String
name|newTerm
decl_stmt|;
name|int
name|tokenStartIndex
init|=
name|queryTerm
operator|.
name|indexOf
argument_list|(
name|queryToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenStartIndex
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// find right delimeter
name|int
name|rightDelimeterIndex
init|=
name|tokenStartIndex
operator|+
name|queryToken
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|rightDelimeterIndex
operator|<
name|queryTerm
operator|.
name|length
argument_list|()
condition|;
name|rightDelimeterIndex
operator|++
control|)
block|{
if|if
condition|(
name|SolrQueryUtil
operator|.
name|queryDelimiters
operator|.
name|contains
argument_list|(
name|queryTerm
operator|.
name|charAt
argument_list|(
name|rightDelimeterIndex
argument_list|)
argument_list|)
condition|)
block|{
name|rightDelimeterIndex
operator|++
expr_stmt|;
break|break;
block|}
block|}
name|newTerm
operator|=
name|queryTerm
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tokenStartIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|rightDelimeterIndex
operator|<
name|queryTerm
operator|.
name|length
argument_list|()
condition|)
block|{
name|newTerm
operator|+=
name|queryTerm
operator|.
name|substring
argument_list|(
name|rightDelimeterIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newTerm
operator|=
name|queryTerm
expr_stmt|;
block|}
return|return
name|newTerm
return|;
block|}
block|}
end_class

end_unit

