begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2012 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|featured
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
operator|.
name|Count
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|featured
operator|.
name|util
operator|.
name|SolrContentItemConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|SearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|ConstrainedDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|DocumentResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|Facet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|FeaturedSearch
import|;
end_import

begin_comment
comment|/**  * This implementation of {@link ConstrainedDocumentSet} retrieves all results without any smart retrieval  * technique e.g retrieve actual documents from the storage when the respective documents are accessed.  *   * @author suat  *   */
end_comment

begin_class
specifier|public
class|class
name|DefaultConstrainedDocumentSet
implements|implements
name|ConstrainedDocumentSet
block|{
specifier|private
name|String
name|queryTerm
decl_stmt|;
specifier|private
name|FeaturedSearch
name|featuredSearch
decl_stmt|;
specifier|private
name|String
name|indexName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DocumentResult
argument_list|>
name|documentURIs
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Constraint
argument_list|>
name|constraints
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Facet
argument_list|>
name|facets
decl_stmt|;
specifier|public
name|DefaultConstrainedDocumentSet
parameter_list|(
name|String
name|queryTerm
parameter_list|,
name|QueryResponse
name|queryResponse
parameter_list|,
name|Set
argument_list|<
name|Constraint
argument_list|>
name|constraints
parameter_list|,
name|String
name|indexName
parameter_list|,
name|FeaturedSearch
name|featuredSearch
parameter_list|)
throws|throws
name|SearchException
block|{
name|this
operator|.
name|queryTerm
operator|=
name|queryTerm
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|featuredSearch
operator|=
name|featuredSearch
expr_stmt|;
name|this
operator|.
name|constraints
operator|=
name|constraints
expr_stmt|;
name|parseQueryResponse
argument_list|(
name|queryResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DocumentResult
argument_list|>
name|getDocuments
parameter_list|()
throws|throws
name|SearchException
block|{
return|return
name|documentURIs
return|;
block|}
specifier|private
name|void
name|parseQueryResponse
parameter_list|(
name|QueryResponse
name|queryResponse
parameter_list|)
block|{
comment|// parse ids
name|List
argument_list|<
name|DocumentResult
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|DocumentResult
argument_list|>
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|documentList
init|=
name|queryResponse
operator|.
name|getResults
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|solrDocument
range|:
name|documentList
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|SolrContentItemConverter
operator|.
name|solrDocument2solrContentItem
argument_list|(
name|solrDocument
argument_list|,
name|indexName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|documentURIs
operator|=
name|ids
expr_stmt|;
comment|// parse facets
name|Set
argument_list|<
name|Facet
argument_list|>
name|facets
init|=
operator|new
name|HashSet
argument_list|<
name|Facet
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetField
name|facetField
range|:
name|queryResponse
operator|.
name|getFacetFields
argument_list|()
control|)
block|{
name|List
argument_list|<
name|PlainLiteral
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|PlainLiteral
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
operator|new
name|PlainLiteralImpl
argument_list|(
name|facetField
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Facet
name|facet
init|=
operator|new
name|FacetImpl
argument_list|(
name|labels
argument_list|)
decl_stmt|;
name|facets
operator|.
name|add
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Count
argument_list|>
name|values
init|=
name|facetField
operator|.
name|getValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Count
name|count
range|:
name|facetField
operator|.
name|getValues
argument_list|()
control|)
block|{
operator|new
name|ConstraintImpl
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|facets
operator|=
name|facets
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Constraint
argument_list|>
name|getConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|constraints
operator|!=
literal|null
condition|?
name|this
operator|.
name|constraints
else|:
operator|new
name|HashSet
argument_list|<
name|Constraint
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Facet
argument_list|>
name|getFacets
parameter_list|()
block|{
return|return
name|this
operator|.
name|facets
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConstrainedDocumentSet
name|narrow
parameter_list|(
name|Constraint
name|constraint
parameter_list|)
throws|throws
name|SearchException
block|{
name|Set
argument_list|<
name|Constraint
argument_list|>
name|newConstraints
init|=
operator|new
name|HashSet
argument_list|<
name|Constraint
argument_list|>
argument_list|(
name|getConstraints
argument_list|()
argument_list|)
decl_stmt|;
name|newConstraints
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
return|return
name|featuredSearch
operator|.
name|search
argument_list|(
name|queryTerm
argument_list|,
name|newConstraints
argument_list|,
name|indexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConstrainedDocumentSet
name|broaden
parameter_list|(
name|Constraint
name|constraint
parameter_list|)
throws|throws
name|SearchException
block|{
name|Set
argument_list|<
name|Constraint
argument_list|>
name|newConstraints
init|=
operator|new
name|HashSet
argument_list|<
name|Constraint
argument_list|>
argument_list|(
name|getConstraints
argument_list|()
argument_list|)
decl_stmt|;
name|newConstraints
operator|.
name|remove
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
return|return
name|featuredSearch
operator|.
name|search
argument_list|(
name|queryTerm
argument_list|,
name|newConstraints
argument_list|,
name|indexName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

