begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2012 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|featured
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|Facet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FacetImpl
implements|implements
name|Facet
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FacetImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Constraint
argument_list|>
name|constraints
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PlainLiteral
argument_list|>
name|labels
decl_stmt|;
comment|/**      * Creates a {@link Facet} with given<code>constraints</code> and<code>labels</code>. The first item of      * label list is considered as the default label of the this facet. The default label of a facet is      * obtained by<code>getLabel(null)</code>.It is important, because any facets are considered as equal if      * their default labels are the same.      *       * @param constraints      *            all possible {@link Constraint} corresponding to the facet values      * @param labels      *            a list of labels representing this facet. First of the labels passed in this list is      *            considered as the default value of this facet      */
specifier|public
name|FacetImpl
parameter_list|(
name|List
argument_list|<
name|PlainLiteral
argument_list|>
name|labels
parameter_list|)
block|{
if|if
condition|(
name|labels
operator|==
literal|null
operator|||
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Label list must include at least one item"
argument_list|)
throw|;
block|}
name|this
operator|.
name|labels
operator|=
name|labels
expr_stmt|;
name|this
operator|.
name|constraints
operator|=
operator|new
name|HashSet
argument_list|<
name|Constraint
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Constraint
argument_list|>
name|getConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|constraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLabel
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
block|{
return|return
name|labels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
else|else
block|{
for|for
control|(
name|PlainLiteral
name|pl
range|:
name|labels
control|)
block|{
if|if
condition|(
name|pl
operator|.
name|getLanguage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|locale
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|pl
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"There is no label for specified language: {}. Returnin default label "
argument_list|,
name|locale
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|labels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|labels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLexicalForm
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * If the default labels of two {@link Facet}s are equal, they are considered as equal. Default label of a      * facet is obtained by passing a<code>null</code> parameter to {@link #getLabel(Locale)} method.      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Facet
condition|)
block|{
return|return
name|this
operator|.
name|getLabel
argument_list|(
literal|null
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Facet
operator|)
name|obj
operator|)
operator|.
name|getLabel
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

