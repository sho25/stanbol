begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2012 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|search
operator|.
name|featured
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|search
operator|.
name|featured
operator|.
name|Facet
import|;
end_import

begin_class
specifier|public
class|class
name|ConstraintImpl
implements|implements
name|Constraint
block|{
specifier|private
name|String
name|value
decl_stmt|;
specifier|private
name|Facet
name|facet
decl_stmt|;
specifier|public
name|ConstraintImpl
parameter_list|(
name|String
name|value
parameter_list|,
name|Facet
name|facet
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A non-empty value must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|facet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A non-null facet must be specified"
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|facet
operator|=
name|facet
expr_stmt|;
name|facet
operator|.
name|getConstraints
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Facet
name|getFacet
parameter_list|()
block|{
return|return
name|this
operator|.
name|facet
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
operator|+
name|facet
operator|.
name|getLabel
argument_list|(
literal|null
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * If the value of two {@link Constraint}s and default labels of their associated facets are equal,      * constraints are treated as equal.      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Constraint
condition|)
block|{
name|Constraint
name|c
init|=
operator|(
name|Constraint
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|c
operator|.
name|getFacet
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getFacet
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

