begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|store
operator|.
name|solr
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|RegisteredSolrServerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|StoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|SolrCoreManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrCoreManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SolrCoreManager
name|instance
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTENTHUB_SOLR_SERVER_NAME
init|=
literal|"contenthub"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SECONDS_TO_WAITFOR_CORE_TO_BEREADY
init|=
literal|2
decl_stmt|;
comment|/**      * Map to cache solr servers that is obtained through OSGi environment. In case of a LD program name      * specified, for not obtaining the server from OSGi again and again, we cache them in this map.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SolrServer
argument_list|>
name|cache
decl_stmt|;
specifier|private
name|SolrCoreManager
parameter_list|()
block|{
name|cache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolrServer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|SolrCoreManager
name|getInstance
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|ManagedSolrServer
name|managedSolrServer
parameter_list|)
block|{
if|if
condition|(
name|bundleContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"SolrCoreManager cannot be used without a BundleContext"
argument_list|)
throw|;
block|}
if|if
condition|(
name|managedSolrServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"SolrCoreManager cannot be used without a ManagedSolrServer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|SolrCoreManager
argument_list|()
expr_stmt|;
block|}
name|instance
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setManagedSolrServer
argument_list|(
name|managedSolrServer
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|ManagedSolrServer
name|managedSolrServer
decl_stmt|;
specifier|private
name|void
name|setManagedSolrServer
parameter_list|(
name|ManagedSolrServer
name|managedSolrServer
parameter_list|)
block|{
name|this
operator|.
name|managedSolrServer
operator|=
name|managedSolrServer
expr_stmt|;
block|}
specifier|private
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|void
name|createDefaultSolrServer
parameter_list|()
throws|throws
name|StoreException
block|{
if|if
condition|(
operator|!
name|cache
operator|.
name|containsKey
argument_list|(
name|CONTENTHUB_SOLR_SERVER_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|managedSolrServer
operator|.
name|isManagedIndex
argument_list|(
name|CONTENTHUB_SOLR_SERVER_NAME
argument_list|)
condition|)
block|{
try|try
block|{
name|managedSolrServer
operator|.
name|createSolrIndex
argument_list|(
name|CONTENTHUB_SOLR_SERVER_NAME
argument_list|,
name|CONTENTHUB_SOLR_SERVER_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error while creating default solr index"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoreException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|createSolrCore
parameter_list|(
name|String
name|coreName
parameter_list|,
name|ArchiveInputStream
name|coreArchive
parameter_list|)
throws|throws
name|StoreException
block|{
if|if
condition|(
name|managedSolrServer
operator|.
name|isManagedIndex
argument_list|(
name|coreName
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Solr index already exists with name: %s"
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoreException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
try|try
block|{
name|managedSolrServer
operator|.
name|createSolrIndex
argument_list|(
name|coreName
argument_list|,
name|coreArchive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"ManagedSolrServer cannot parse the related XML files."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoreException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|deleteSolrCore
parameter_list|(
name|String
name|coreName
parameter_list|)
block|{
if|if
condition|(
name|managedSolrServer
operator|!=
literal|null
condition|)
block|{
comment|// Remove all related files of the solr core
name|managedSolrServer
operator|.
name|removeIndex
argument_list|(
name|coreName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SolrServer
name|getSolrServerFromTracker
parameter_list|(
name|String
name|coreName
parameter_list|)
throws|throws
name|StoreException
block|{
name|SolrServer
name|solrServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|solrServer
operator|==
literal|null
operator|&&
name|i
operator|<=
name|SECONDS_TO_WAITFOR_CORE_TO_BEREADY
condition|;
name|i
operator|++
control|)
block|{
name|RegisteredSolrServerTracker
name|tracker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tracker
operator|=
operator|new
name|RegisteredSolrServerTracker
argument_list|(
name|bundleContext
argument_list|,
operator|new
name|IndexReference
argument_list|(
name|managedSolrServer
operator|.
name|getServerName
argument_list|()
argument_list|,
name|coreName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
operator|||
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
literal|"Failed to create a RegisteredSolrServerTracker"
expr_stmt|;
block|}
throw|throw
operator|new
name|StoreException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|solrServer
operator|=
name|tracker
operator|.
name|getService
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrServer
operator|!=
literal|null
operator|||
name|i
operator|==
name|SECONDS_TO_WAITFOR_CORE_TO_BEREADY
condition|)
break|break;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
if|if
condition|(
name|solrServer
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SolrServer specified by '{}' cannot be retrieved from RegisteredSolrServerTracker"
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoreException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SolrServer specified by '%s' cannot be retrieved from RegisteredSolrServerTracker"
argument_list|,
name|coreName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|solrServer
return|;
block|}
specifier|public
name|SolrServer
name|getServer
parameter_list|()
throws|throws
name|StoreException
block|{
return|return
name|getServer
argument_list|(
name|CONTENTHUB_SOLR_SERVER_NAME
argument_list|)
return|;
block|}
specifier|public
name|SolrServer
name|getServer
parameter_list|(
name|String
name|coreName
parameter_list|)
throws|throws
name|StoreException
block|{
name|SolrServer
name|solrServer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|coreName
operator|==
literal|null
operator|||
name|coreName
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|coreName
operator|=
name|CONTENTHUB_SOLR_SERVER_NAME
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|coreName
argument_list|)
condition|)
block|{
comment|// check cache for the server reference
name|solrServer
operator|=
name|cache
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|managedSolrServer
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|=
name|getSolrServerFromTracker
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
name|solrServer
argument_list|)
expr_stmt|;
block|}
return|return
name|solrServer
return|;
block|}
specifier|public
name|boolean
name|isManagedSolrCore
parameter_list|(
name|String
name|coreName
parameter_list|)
block|{
if|if
condition|(
name|managedSolrServer
operator|.
name|isManagedIndex
argument_list|(
name|coreName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

