begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|helper
operator|.
name|enhancementlistener
operator|.
name|tcmanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|helper
operator|.
name|enhancementlistener
operator|.
name|EnhancementListenerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|enhancements
operator|.
name|vocabulary
operator|.
name|EnhancementGraphVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author anil.sinaci  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|EnhancementListenerFactoryTCM
implements|implements
name|EnhancementListenerFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnhancementListenerFactoryTCM
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementListenerFactory
operator|.
name|ENTITY_HUB_PROP
argument_list|,
name|value
operator|=
name|EnhancementListenerFactory
operator|.
name|ENTITY_HUB_VALUE
argument_list|)
specifier|private
name|String
name|entityHubURI
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
specifier|private
name|EnhancementListener
name|enhancementListener
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Activating Ehnhancement Listener Factory"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|properties
init|=
name|cc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
try|try
block|{
name|entityHubURI
operator|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|EnhancementListenerFactory
operator|.
name|ENTITY_HUB_PROP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration problem at starting enhancement listener factory"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|enhancementListener
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|enhancementListener
operator|=
operator|new
name|EnhancementListener
argument_list|(
name|tcManager
argument_list|,
name|entityHubURI
argument_list|)
expr_stmt|;
name|enhancementListener
operator|.
name|listen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Listener for graph {} is created"
argument_list|,
name|EnhancementGraphVocabulary
operator|.
name|ENHANCEMENTS_GRAPH_URI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Problem creating listener for graph {}"
argument_list|,
name|EnhancementGraphVocabulary
operator|.
name|ENHANCEMENTS_GRAPH_URI
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Error on listener creation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|enhancementListener
operator|.
name|listen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Graph {} is already being listened, no new listener is created"
argument_list|,
name|EnhancementGraphVocabulary
operator|.
name|ENHANCEMENTS_GRAPH_URI
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Deactivating Enhancement Listener Factory"
argument_list|)
expr_stmt|;
name|enhancementListener
operator|.
name|unlisten
argument_list|()
expr_stmt|;
block|}
comment|/**     @Override     public Model getEnhancementModel() {         if (this.enhancementListener == null) {             logger.warn("Listener for graph {} is not ready yet.",                 EnhancementGraphVocabulary.ENHANCEMENTS_GRAPH_URI);             return null;         }         return this.enhancementListener.getEnhancementModel();     }      @Override     public IndexLARQ getIndex() {         if (this.enhancementListener == null) {             logger.warn("Listener for graph {} is not ready yet.",                 EnhancementGraphVocabulary.ENHANCEMENTS_GRAPH_URI);             return null;         }         return this.enhancementListener.getIndex();     }     */
block|}
end_class

end_unit

