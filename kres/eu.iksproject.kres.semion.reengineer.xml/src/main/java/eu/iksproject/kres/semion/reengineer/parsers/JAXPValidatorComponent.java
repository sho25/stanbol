begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2005 The Apache Software Foundation.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|TypeInfoProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|ValidatorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|dom
operator|.
name|DOMInputImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|XMLErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|opti
operator|.
name|DefaultXMLDocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|AttributesProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|AugmentationsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|ErrorHandlerProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|ErrorHandlerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|LocatorProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|XMLResourceIdentifierImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|Augmentations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLDocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XNIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLComponentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLEntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Runs events through a {@link javax.xml.validation.ValidatorHandler}  * and performs validation/infoset-augmentation by an external validator.  *   *<p>  * This component sets up the pipeline as follows:  *    *<!-- this picture may look teribble on your IDE but it is correct. -->  *<pre>  *             __                                           __  *            /  |==> XNI2SAX --> Validator --> SAX2XNI ==>|    *           /   |                                         |     *       ==>| Tee|                                         | next  *           \   |                                         |  component  *            \  |============other XNI events============>|    *             ~~                                           ~~  *</pre>  *<p>  * only those events that need to go through Validator will go the 1st route,  * and other events go the 2nd direct route.  *   * @author Kohsuke Kawaguchi (kohsuke.kawaguchi@sun.com)  * @version $Id$  */
end_comment

begin_class
specifier|final
class|class
name|JAXPValidatorComponent
extends|extends
name|TeeXMLDocumentFilterImpl
implements|implements
name|XMLComponent
block|{
comment|/** Property identifier: entity manager. */
specifier|private
specifier|static
specifier|final
name|String
name|ENTITY_MANAGER
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|ENTITY_MANAGER_PROPERTY
decl_stmt|;
comment|/** Property identifier: error reporter. */
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_REPORTER
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|ERROR_REPORTER_PROPERTY
decl_stmt|;
comment|/** Property identifier: symbol table. */
specifier|private
specifier|static
specifier|final
name|String
name|SYMBOL_TABLE
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|SYMBOL_TABLE_PROPERTY
decl_stmt|;
comment|// pipeline parts
specifier|private
specifier|final
name|ValidatorHandler
name|validator
decl_stmt|;
specifier|private
specifier|final
name|XNI2SAX
name|xni2sax
init|=
operator|new
name|XNI2SAX
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SAX2XNI
name|sax2xni
init|=
operator|new
name|SAX2XNI
argument_list|()
decl_stmt|;
comment|// never be null
specifier|private
specifier|final
name|TypeInfoProvider
name|typeInfoProvider
decl_stmt|;
comment|/**      * Used to store the {@link Augmentations} associated with the      * current event, so that we can pick it up again      * when the event is forwarded by the {@link ValidatorHandler}.      *       * UGLY HACK.      */
specifier|private
name|Augmentations
name|fCurrentAug
decl_stmt|;
comment|/**      * {@link XMLAttributes} version of {@link #fCurrentAug}.      */
specifier|private
name|XMLAttributes
name|fCurrentAttributes
decl_stmt|;
comment|// components obtained from a manager / property
specifier|private
name|SymbolTable
name|fSymbolTable
decl_stmt|;
specifier|private
name|XMLErrorReporter
name|fErrorReporter
decl_stmt|;
specifier|private
name|XMLEntityResolver
name|fEntityResolver
decl_stmt|;
comment|/**      * @param validatorHandler may not be null.      */
specifier|public
name|JAXPValidatorComponent
parameter_list|(
name|ValidatorHandler
name|validatorHandler
parameter_list|)
block|{
name|this
operator|.
name|validator
operator|=
name|validatorHandler
expr_stmt|;
name|TypeInfoProvider
name|tip
init|=
name|validatorHandler
operator|.
name|getTypeInfoProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|tip
operator|==
literal|null
condition|)
name|tip
operator|=
name|noInfoProvider
expr_stmt|;
name|this
operator|.
name|typeInfoProvider
operator|=
name|tip
expr_stmt|;
comment|// configure wiring between internal components.
name|xni2sax
operator|.
name|setContentHandler
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|validator
operator|.
name|setContentHandler
argument_list|(
name|sax2xni
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSide
argument_list|(
name|xni2sax
argument_list|)
expr_stmt|;
comment|// configure validator with proper EntityResolver/ErrorHandler.
name|validator
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|ErrorHandlerProxy
argument_list|()
block|{
specifier|protected
name|XMLErrorHandler
name|getErrorHandler
parameter_list|()
block|{
name|XMLErrorHandler
name|handler
init|=
name|fErrorReporter
operator|.
name|getErrorHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
return|return
name|handler
return|;
return|return
operator|new
name|ErrorHandlerWrapper
argument_list|(
name|DraconianErrorHandler
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|validator
operator|.
name|setResourceResolver
argument_list|(
operator|new
name|LSResourceResolver
argument_list|()
block|{
specifier|public
name|LSInput
name|resolveResource
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|,
name|String
name|baseUri
parameter_list|)
block|{
if|if
condition|(
name|fEntityResolver
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
name|XMLInputSource
name|is
init|=
name|fEntityResolver
operator|.
name|resolveEntity
argument_list|(
operator|new
name|XMLResourceIdentifierImpl
argument_list|(
name|publicId
argument_list|,
name|systemId
argument_list|,
name|baseUri
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|LSInput
name|di
init|=
operator|new
name|DOMInputImpl
argument_list|()
decl_stmt|;
name|di
operator|.
name|setBaseURI
argument_list|(
name|is
operator|.
name|getBaseSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setByteStream
argument_list|(
name|is
operator|.
name|getByteStream
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setCharacterStream
argument_list|(
name|is
operator|.
name|getCharacterStream
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setEncoding
argument_list|(
name|is
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setPublicId
argument_list|(
name|is
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setSystemId
argument_list|(
name|is
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|di
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// erors thrown by the callback is not supposed to be
comment|// reported to users.
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|QName
name|element
parameter_list|,
name|XMLAttributes
name|attributes
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
name|fCurrentAttributes
operator|=
name|attributes
expr_stmt|;
name|fCurrentAug
operator|=
name|augs
expr_stmt|;
name|xni2sax
operator|.
name|startElement
argument_list|(
name|element
argument_list|,
name|attributes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fCurrentAttributes
operator|=
literal|null
expr_stmt|;
comment|// mostly to make it easy to find any bug.
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|QName
name|element
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
name|fCurrentAug
operator|=
name|augs
expr_stmt|;
name|xni2sax
operator|.
name|endElement
argument_list|(
name|element
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|emptyElement
parameter_list|(
name|QName
name|element
parameter_list|,
name|XMLAttributes
name|attributes
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
name|startElement
argument_list|(
name|element
argument_list|,
name|attributes
argument_list|,
name|augs
argument_list|)
expr_stmt|;
name|endElement
argument_list|(
name|element
argument_list|,
name|augs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|XMLString
name|text
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
comment|// since a validator may change the contents,
comment|// let this one go through a validator
name|fCurrentAug
operator|=
name|augs
expr_stmt|;
name|xni2sax
operator|.
name|characters
argument_list|(
name|text
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|XMLString
name|text
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
comment|// since a validator may change the contents,
comment|// let this one go through a validator
name|fCurrentAug
operator|=
name|augs
expr_stmt|;
name|xni2sax
operator|.
name|ignorableWhitespace
argument_list|(
name|text
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|XMLComponentManager
name|componentManager
parameter_list|)
throws|throws
name|XMLConfigurationException
block|{
comment|// obtain references from the manager
name|fSymbolTable
operator|=
operator|(
name|SymbolTable
operator|)
name|componentManager
operator|.
name|getProperty
argument_list|(
name|SYMBOL_TABLE
argument_list|)
expr_stmt|;
name|fErrorReporter
operator|=
operator|(
name|XMLErrorReporter
operator|)
name|componentManager
operator|.
name|getProperty
argument_list|(
name|ERROR_REPORTER
argument_list|)
expr_stmt|;
try|try
block|{
name|fEntityResolver
operator|=
operator|(
name|XMLEntityResolver
operator|)
name|componentManager
operator|.
name|getProperty
argument_list|(
name|ENTITY_MANAGER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
name|fEntityResolver
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      *       * Uses {@link DefaultHandler} as a default implementation of      * {@link ContentHandler}.      *       *<p>      * We only forward certain events from a {@link ValidatorHandler}.      * Other events should go "the 2nd direct route".      */
specifier|private
specifier|final
class|class
name|SAX2XNI
extends|extends
name|DefaultHandler
block|{
comment|/**          * {@link Augmentations} to send along with events.          * We reuse one object for efficiency.          */
specifier|private
specifier|final
name|Augmentations
name|fAugmentations
init|=
operator|new
name|AugmentationsImpl
argument_list|()
decl_stmt|;
comment|/**          * {@link QName} to send along events.          * we reuse one QName for efficiency.          */
specifier|private
specifier|final
name|QName
name|fQName
init|=
operator|new
name|QName
argument_list|()
decl_stmt|;
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|handler
argument_list|()
operator|.
name|characters
argument_list|(
operator|new
name|XMLString
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
argument_list|,
name|aug
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e
parameter_list|)
block|{
throw|throw
name|toSAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|handler
argument_list|()
operator|.
name|ignorableWhitespace
argument_list|(
operator|new
name|XMLString
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
argument_list|,
name|aug
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e
parameter_list|)
block|{
throw|throw
name|toSAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|updateAttributes
argument_list|(
name|atts
argument_list|)
expr_stmt|;
name|handler
argument_list|()
operator|.
name|startElement
argument_list|(
name|toQName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|)
argument_list|,
name|fCurrentAttributes
argument_list|,
name|elementAug
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e
parameter_list|)
block|{
throw|throw
name|toSAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|handler
argument_list|()
operator|.
name|endElement
argument_list|(
name|toQName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|)
argument_list|,
name|aug
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e
parameter_list|)
block|{
throw|throw
name|toSAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Augmentations
name|elementAug
parameter_list|()
block|{
name|Augmentations
name|aug
init|=
name|aug
argument_list|()
decl_stmt|;
comment|/** aug.putItem(Constants.TYPEINFO,typeInfoProvider.getElementTypeInfo()); **/
return|return
name|aug
return|;
block|}
comment|/**          * Gets the {@link Augmentations} that should be associated with          * the current event.          */
specifier|private
name|Augmentations
name|aug
parameter_list|()
block|{
if|if
condition|(
name|fCurrentAug
operator|!=
literal|null
condition|)
block|{
name|Augmentations
name|r
init|=
name|fCurrentAug
decl_stmt|;
name|fCurrentAug
operator|=
literal|null
expr_stmt|;
comment|// we "consumed" this augmentation.
return|return
name|r
return|;
block|}
name|fAugmentations
operator|.
name|removeAllItems
argument_list|()
expr_stmt|;
return|return
name|fAugmentations
return|;
block|}
comment|/**          * Get the handler to which we should send events.          */
specifier|private
name|XMLDocumentHandler
name|handler
parameter_list|()
block|{
return|return
name|JAXPValidatorComponent
operator|.
name|this
operator|.
name|getDocumentHandler
argument_list|()
return|;
block|}
comment|/**          * Converts the {@link XNIException} received from a downstream          * component to a {@link SAXException}.          */
specifier|private
name|SAXException
name|toSAXException
parameter_list|(
name|XNIException
name|xe
parameter_list|)
block|{
name|Exception
name|e
init|=
name|xe
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
name|e
operator|=
name|xe
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SAXException
condition|)
return|return
operator|(
name|SAXException
operator|)
name|e
return|;
return|return
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**          * Creates a proper {@link QName} object from 3 parts.          *<p>          * This method does the symbolization.          */
specifier|private
name|QName
name|toQName
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|int
name|idx
init|=
name|qname
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|prefix
operator|=
name|symbolize
argument_list|(
name|qname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|localName
operator|=
name|symbolize
argument_list|(
name|localName
argument_list|)
expr_stmt|;
name|qname
operator|=
name|symbolize
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|uri
operator|=
name|symbolize
argument_list|(
name|uri
argument_list|)
expr_stmt|;
comment|// notify handlers
name|fQName
operator|.
name|setValues
argument_list|(
name|prefix
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|fQName
return|;
block|}
block|}
comment|/**      * Converts {@link XNI} events to {@link ContentHandler} events.      *       *<p>      * Deriving from {@link DefaultXMLDocumentHandler}      * to reuse its default {@link org.apache.xerces.xni.XMLDocumentHandler}      * implementation.      *       * @author Kohsuke Kawaguchi (kohsuke.kawaguchi@sun.com)      */
specifier|private
specifier|final
class|class
name|XNI2SAX
extends|extends
name|DefaultXMLDocumentHandler
block|{
specifier|private
name|ContentHandler
name|fContentHandler
decl_stmt|;
specifier|private
name|String
name|fVersion
decl_stmt|;
comment|/** Namespace context */
specifier|protected
name|NamespaceContext
name|fNamespaceContext
decl_stmt|;
comment|/**          * For efficiency, we reuse one instance.          */
specifier|private
specifier|final
name|AttributesProxy
name|fAttributesProxy
init|=
operator|new
name|AttributesProxy
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|public
name|void
name|setContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|fContentHandler
operator|=
name|handler
expr_stmt|;
block|}
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
block|{
return|return
name|fContentHandler
return|;
block|}
specifier|public
name|void
name|xmlDecl
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|encoding
parameter_list|,
name|String
name|standalone
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
name|this
operator|.
name|fVersion
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|void
name|startDocument
parameter_list|(
name|XMLLocator
name|locator
parameter_list|,
name|String
name|encoding
parameter_list|,
name|NamespaceContext
name|namespaceContext
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
name|fNamespaceContext
operator|=
name|namespaceContext
expr_stmt|;
name|fContentHandler
operator|.
name|setDocumentLocator
argument_list|(
operator|new
name|LocatorProxy
argument_list|(
name|locator
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fContentHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|endDocument
parameter_list|(
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
try|try
block|{
name|fContentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|XMLString
name|data
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
try|try
block|{
name|fContentHandler
operator|.
name|processingInstruction
argument_list|(
name|target
argument_list|,
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|QName
name|element
parameter_list|,
name|XMLAttributes
name|attributes
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
try|try
block|{
comment|// start namespace prefix mappings
name|int
name|count
init|=
name|fNamespaceContext
operator|.
name|getDeclaredPrefixCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|String
name|uri
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|prefix
operator|=
name|fNamespaceContext
operator|.
name|getDeclaredPrefixAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|uri
operator|=
name|fNamespaceContext
operator|.
name|getURI
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|fContentHandler
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
operator|(
name|uri
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|uri
init|=
name|element
operator|.
name|uri
operator|!=
literal|null
condition|?
name|element
operator|.
name|uri
else|:
literal|""
decl_stmt|;
name|String
name|localpart
init|=
name|element
operator|.
name|localpart
decl_stmt|;
name|fAttributesProxy
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|fContentHandler
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localpart
argument_list|,
name|element
operator|.
name|rawname
argument_list|,
name|fAttributesProxy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|QName
name|element
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
try|try
block|{
name|String
name|uri
init|=
name|element
operator|.
name|uri
operator|!=
literal|null
condition|?
name|element
operator|.
name|uri
else|:
literal|""
decl_stmt|;
name|String
name|localpart
init|=
name|element
operator|.
name|localpart
decl_stmt|;
name|fContentHandler
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localpart
argument_list|,
name|element
operator|.
name|rawname
argument_list|)
expr_stmt|;
comment|// send endPrefixMapping events
name|int
name|count
init|=
name|fNamespaceContext
operator|.
name|getDeclaredPrefixCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|fContentHandler
operator|.
name|endPrefixMapping
argument_list|(
name|fNamespaceContext
operator|.
name|getDeclaredPrefixAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|emptyElement
parameter_list|(
name|QName
name|element
parameter_list|,
name|XMLAttributes
name|attributes
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
name|startElement
argument_list|(
name|element
argument_list|,
name|attributes
argument_list|,
name|augs
argument_list|)
expr_stmt|;
name|endElement
argument_list|(
name|element
argument_list|,
name|augs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|XMLString
name|text
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
try|try
block|{
name|fContentHandler
operator|.
name|characters
argument_list|(
name|text
operator|.
name|ch
argument_list|,
name|text
operator|.
name|offset
argument_list|,
name|text
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|XMLString
name|text
parameter_list|,
name|Augmentations
name|augs
parameter_list|)
throws|throws
name|XNIException
block|{
try|try
block|{
name|fContentHandler
operator|.
name|ignorableWhitespace
argument_list|(
name|text
operator|.
name|ch
argument_list|,
name|text
operator|.
name|offset
argument_list|,
name|text
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XNIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|DraconianErrorHandler
implements|implements
name|ErrorHandler
block|{
comment|/**          * Singleton instance.          */
specifier|private
specifier|static
specifier|final
name|DraconianErrorHandler
name|ERROR_HANDLER_INSTANCE
init|=
operator|new
name|DraconianErrorHandler
argument_list|()
decl_stmt|;
specifier|private
name|DraconianErrorHandler
parameter_list|()
block|{}
comment|/** Returns the one and only instance of this error handler. */
specifier|public
specifier|static
name|DraconianErrorHandler
name|getInstance
parameter_list|()
block|{
return|return
name|ERROR_HANDLER_INSTANCE
return|;
block|}
comment|/** Warning: Ignore. */
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// noop
block|}
comment|/** Error: Throws back SAXParseException. */
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
comment|/** Fatal Error: Throws back SAXParseException. */
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// DraconianErrorHandler
comment|/**      * Compares the given {@link Attributes} with {@link #fCurrentAttributes}      * and update the latter accordingly.      */
specifier|private
name|void
name|updateAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|int
name|len
init|=
name|atts
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|String
name|aqn
init|=
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|j
init|=
name|fCurrentAttributes
operator|.
name|getIndex
argument_list|(
name|aqn
argument_list|)
decl_stmt|;
name|String
name|av
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|==
operator|-
literal|1
condition|)
block|{
comment|// newly added attribute. add to the current attribute list.
name|String
name|prefix
decl_stmt|;
name|int
name|idx
init|=
name|aqn
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|prefix
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|symbolize
argument_list|(
name|aqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|j
operator|=
name|fCurrentAttributes
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|prefix
argument_list|,
name|symbolize
argument_list|(
name|atts
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|symbolize
argument_list|(
name|aqn
argument_list|)
argument_list|,
name|symbolize
argument_list|(
name|atts
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|atts
operator|.
name|getType
argument_list|(
name|i
argument_list|)
argument_list|,
name|av
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the attribute is present.
if|if
condition|(
operator|!
name|av
operator|.
name|equals
argument_list|(
name|fCurrentAttributes
operator|.
name|getValue
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
comment|// but the value was changed.
name|fCurrentAttributes
operator|.
name|setValue
argument_list|(
name|j
argument_list|,
name|av
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Augmentations augs = fCurrentAttributes.getAugmentations(j);             augs.putItem( Constants.TYPEINFO,                 typeInfoProvider.getAttributeTypeInfo(i) );             augs.putItem( Constants.ID_ATTRIBUTE,                 typeInfoProvider.isIdAttribute(i)?Boolean.TRUE:Boolean.FALSE ); **/
block|}
block|}
specifier|private
name|String
name|symbolize
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|fSymbolTable
operator|.
name|addSymbol
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**      * {@link TypeInfoProvider} that returns no info.      */
specifier|private
specifier|static
specifier|final
name|TypeInfoProvider
name|noInfoProvider
init|=
operator|new
name|TypeInfoProvider
argument_list|()
block|{
specifier|public
name|TypeInfo
name|getElementTypeInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|TypeInfo
name|getAttributeTypeInfo
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|TypeInfo
name|getAttributeTypeInfo
parameter_list|(
name|String
name|attributeQName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|TypeInfo
name|getAttributeTypeInfo
parameter_list|(
name|String
name|attributeUri
parameter_list|,
name|String
name|attributeLocalName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isIdAttribute
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isSpecified
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
comment|//
comment|//
comment|// XMLComponent implementation.
comment|//
comment|//
comment|// no property/feature supported
specifier|public
name|String
index|[]
name|getRecognizedFeatures
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|featureId
parameter_list|,
name|boolean
name|state
parameter_list|)
throws|throws
name|XMLConfigurationException
block|{     }
specifier|public
name|String
index|[]
name|getRecognizedProperties
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|ENTITY_MANAGER
block|,
name|ERROR_REPORTER
block|,
name|SYMBOL_TABLE
block|}
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|propertyId
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|XMLConfigurationException
block|{     }
specifier|public
name|Boolean
name|getFeatureDefault
parameter_list|(
name|String
name|featureId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|getPropertyDefault
parameter_list|(
name|String
name|propertyId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

