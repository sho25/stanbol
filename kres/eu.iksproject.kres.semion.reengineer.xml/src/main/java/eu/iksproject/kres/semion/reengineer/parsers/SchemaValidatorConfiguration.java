begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2005 The Apache Software Foundation.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|XMLErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|validation
operator|.
name|ValidationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSMessageFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|jaxp
operator|.
name|validation
operator|.
name|XSGrammarPoolContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|grammars
operator|.
name|XMLGrammarPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLComponentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLConfigurationException
import|;
end_import

begin_comment
comment|/**  *<p>Parser configuration for Xerces' XMLSchemaValidator.</p>  *   * @version $Id$  */
end_comment

begin_class
specifier|final
class|class
name|SchemaValidatorConfiguration
implements|implements
name|XMLComponentManager
block|{
comment|// feature identifiers
comment|/** Feature identifier: schema validation. */
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_VALIDATION
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|SCHEMA_VALIDATION_FEATURE
decl_stmt|;
comment|/** Feature identifier: validation. */
specifier|private
specifier|static
specifier|final
name|String
name|VALIDATION
init|=
name|Constants
operator|.
name|SAX_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|VALIDATION_FEATURE
decl_stmt|;
comment|/** Feature identifier: use grammar pool only. */
specifier|private
specifier|static
specifier|final
name|String
name|USE_GRAMMAR_POOL_ONLY
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|USE_GRAMMAR_POOL_ONLY_FEATURE
decl_stmt|;
comment|/** Feature identifier: parser settings. */
specifier|private
specifier|static
specifier|final
name|String
name|PARSER_SETTINGS
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|PARSER_SETTINGS
decl_stmt|;
comment|// property identifiers
comment|/** Property identifier: error reporter. */
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_REPORTER
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|ERROR_REPORTER_PROPERTY
decl_stmt|;
comment|/** Property identifier: validation manager. */
specifier|private
specifier|static
specifier|final
name|String
name|VALIDATION_MANAGER
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|VALIDATION_MANAGER_PROPERTY
decl_stmt|;
comment|/** Property identifier: grammar pool. */
specifier|private
specifier|static
specifier|final
name|String
name|XMLGRAMMAR_POOL
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|XMLGRAMMAR_POOL_PROPERTY
decl_stmt|;
comment|//
comment|// Data
comment|//
comment|/** Parent component manager. **/
specifier|private
specifier|final
name|XMLComponentManager
name|fParentComponentManager
decl_stmt|;
comment|/** The Schema's grammar pool. **/
specifier|private
specifier|final
name|XMLGrammarPool
name|fGrammarPool
decl_stmt|;
comment|/**       * Tracks whether the validator should use components from       * the grammar pool to the exclusion of all others.      */
specifier|private
specifier|final
name|boolean
name|fUseGrammarPoolOnly
decl_stmt|;
comment|/** Validation manager. */
specifier|private
specifier|final
name|ValidationManager
name|fValidationManager
decl_stmt|;
specifier|public
name|SchemaValidatorConfiguration
parameter_list|(
name|XMLComponentManager
name|parentManager
parameter_list|,
name|XSGrammarPoolContainer
name|grammarContainer
parameter_list|,
name|ValidationManager
name|validationManager
parameter_list|)
block|{
name|fParentComponentManager
operator|=
name|parentManager
expr_stmt|;
name|fGrammarPool
operator|=
name|grammarContainer
operator|.
name|getGrammarPool
argument_list|()
expr_stmt|;
name|fUseGrammarPoolOnly
operator|=
name|grammarContainer
operator|.
name|isFullyComposed
argument_list|()
expr_stmt|;
name|fValidationManager
operator|=
name|validationManager
expr_stmt|;
comment|// add schema message formatter to error reporter
try|try
block|{
name|XMLErrorReporter
name|errorReporter
init|=
operator|(
name|XMLErrorReporter
operator|)
name|fParentComponentManager
operator|.
name|getProperty
argument_list|(
name|ERROR_REPORTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorReporter
operator|!=
literal|null
condition|)
block|{
name|errorReporter
operator|.
name|putMessageFormatter
argument_list|(
name|XSMessageFormatter
operator|.
name|SCHEMA_DOMAIN
argument_list|,
operator|new
name|XSMessageFormatter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ignore exception.
catch|catch
parameter_list|(
name|XMLConfigurationException
name|exc
parameter_list|)
block|{}
block|}
comment|/**      * Returns the state of a feature.      *       * @param featureId The feature identifier.      * @return true if the feature is supported      *       * @throws XMLConfigurationException Thrown for configuration error.      *                                   In general, components should      *                                   only throw this exception if      *                                   it is<strong>really</strong>      *                                   a critical error.      */
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|featureId
parameter_list|)
throws|throws
name|XMLConfigurationException
block|{
if|if
condition|(
name|PARSER_SETTINGS
operator|.
name|equals
argument_list|(
name|featureId
argument_list|)
condition|)
block|{
return|return
name|fParentComponentManager
operator|.
name|getFeature
argument_list|(
name|featureId
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|VALIDATION
operator|.
name|equals
argument_list|(
name|featureId
argument_list|)
operator|||
name|SCHEMA_VALIDATION
operator|.
name|equals
argument_list|(
name|featureId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|USE_GRAMMAR_POOL_ONLY
operator|.
name|equals
argument_list|(
name|featureId
argument_list|)
condition|)
block|{
return|return
name|fUseGrammarPoolOnly
return|;
block|}
return|return
name|fParentComponentManager
operator|.
name|getFeature
argument_list|(
name|featureId
argument_list|)
return|;
block|}
comment|/**      * Returns the value of a property.      *       * @param propertyId The property identifier.      * @return the value of the property      *       * @throws XMLConfigurationException Thrown for configuration error.      *                                   In general, components should      *                                   only throw this exception if      *                                   it is<strong>really</strong>      *                                   a critical error.      */
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|propertyId
parameter_list|)
throws|throws
name|XMLConfigurationException
block|{
if|if
condition|(
name|XMLGRAMMAR_POOL
operator|.
name|equals
argument_list|(
name|propertyId
argument_list|)
condition|)
block|{
return|return
name|fGrammarPool
return|;
block|}
elseif|else
if|if
condition|(
name|VALIDATION_MANAGER
operator|.
name|equals
argument_list|(
name|propertyId
argument_list|)
condition|)
block|{
return|return
name|fValidationManager
return|;
block|}
return|return
name|fParentComponentManager
operator|.
name|getProperty
argument_list|(
name|propertyId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

