begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2005 The Apache Software Foundation.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|validation
operator|.
name|EntityState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|validation
operator|.
name|ValidationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|Augmentations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLDTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLResourceIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XNIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLDTDFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLDTDSource
import|;
end_import

begin_comment
comment|/**  *<p>This filter records which unparsed entities have been  * declared in the DTD and provides this information to a ValidationManager.  * Events are forwarded to the registered XMLDTDHandler without modification.</p>  *   * @author Michael Glavassevich, IBM  * @version $Id$  */
end_comment

begin_class
specifier|final
class|class
name|UnparsedEntityHandler
implements|implements
name|XMLDTDFilter
implements|,
name|EntityState
block|{
comment|/** DTD source and handler. **/
specifier|private
name|XMLDTDSource
name|fDTDSource
decl_stmt|;
specifier|private
name|XMLDTDHandler
name|fDTDHandler
decl_stmt|;
comment|/** Validation manager. */
specifier|private
specifier|final
name|ValidationManager
name|fValidationManager
decl_stmt|;
comment|/** Map for tracking unparsed entities. */
specifier|private
name|HashMap
name|fUnparsedEntities
init|=
literal|null
decl_stmt|;
name|UnparsedEntityHandler
parameter_list|(
name|ValidationManager
name|manager
parameter_list|)
block|{
name|fValidationManager
operator|=
name|manager
expr_stmt|;
block|}
comment|/*      * XMLDTDHandler methods      */
specifier|public
name|void
name|startDTD
parameter_list|(
name|XMLLocator
name|locator
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
name|fValidationManager
operator|.
name|setEntityState
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|fUnparsedEntities
operator|!=
literal|null
operator|&&
operator|!
name|fUnparsedEntities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// should only clear this if the last document contained unparsed entities
name|fUnparsedEntities
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|startDTD
argument_list|(
name|locator
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startParameterEntity
parameter_list|(
name|String
name|name
parameter_list|,
name|XMLResourceIdentifier
name|identifier
parameter_list|,
name|String
name|encoding
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|startParameterEntity
argument_list|(
name|name
argument_list|,
name|identifier
argument_list|,
name|encoding
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|textDecl
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|encoding
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|textDecl
argument_list|(
name|version
argument_list|,
name|encoding
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endParameterEntity
parameter_list|(
name|String
name|name
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|endParameterEntity
argument_list|(
name|name
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startExternalSubset
parameter_list|(
name|XMLResourceIdentifier
name|identifier
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|startExternalSubset
argument_list|(
name|identifier
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endExternalSubset
parameter_list|(
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|endExternalSubset
argument_list|(
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|comment
parameter_list|(
name|XMLString
name|text
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|comment
argument_list|(
name|text
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|XMLString
name|data
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|processingInstruction
argument_list|(
name|target
argument_list|,
name|data
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|elementDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|contentModel
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|elementDecl
argument_list|(
name|name
argument_list|,
name|contentModel
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startAttlist
parameter_list|(
name|String
name|elementName
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|startAttlist
argument_list|(
name|elementName
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|attributeDecl
parameter_list|(
name|String
name|elementName
parameter_list|,
name|String
name|attributeName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|enumeration
parameter_list|,
name|String
name|defaultType
parameter_list|,
name|XMLString
name|defaultValue
parameter_list|,
name|XMLString
name|nonNormalizedDefaultValue
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|attributeDecl
argument_list|(
name|elementName
argument_list|,
name|attributeName
argument_list|,
name|type
argument_list|,
name|enumeration
argument_list|,
name|defaultType
argument_list|,
name|defaultValue
argument_list|,
name|nonNormalizedDefaultValue
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endAttlist
parameter_list|(
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|endAttlist
argument_list|(
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|internalEntityDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|XMLString
name|text
parameter_list|,
name|XMLString
name|nonNormalizedText
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|internalEntityDecl
argument_list|(
name|name
argument_list|,
name|text
argument_list|,
name|nonNormalizedText
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|externalEntityDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|XMLResourceIdentifier
name|identifier
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|externalEntityDecl
argument_list|(
name|name
argument_list|,
name|identifier
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unparsedEntityDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|XMLResourceIdentifier
name|identifier
parameter_list|,
name|String
name|notation
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fUnparsedEntities
operator|==
literal|null
condition|)
block|{
name|fUnparsedEntities
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|fUnparsedEntities
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|unparsedEntityDecl
argument_list|(
name|name
argument_list|,
name|identifier
argument_list|,
name|notation
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|notationDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|XMLResourceIdentifier
name|identifier
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|notationDecl
argument_list|(
name|name
argument_list|,
name|identifier
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startConditional
parameter_list|(
name|short
name|type
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|startConditional
argument_list|(
name|type
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|ignoredCharacters
parameter_list|(
name|XMLString
name|text
parameter_list|,
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|ignoredCharacters
argument_list|(
name|text
argument_list|,
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endConditional
parameter_list|(
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|endConditional
argument_list|(
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endDTD
parameter_list|(
name|Augmentations
name|augmentations
parameter_list|)
throws|throws
name|XNIException
block|{
if|if
condition|(
name|fDTDHandler
operator|!=
literal|null
condition|)
block|{
name|fDTDHandler
operator|.
name|endDTD
argument_list|(
name|augmentations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDTDSource
parameter_list|(
name|XMLDTDSource
name|source
parameter_list|)
block|{
name|fDTDSource
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|XMLDTDSource
name|getDTDSource
parameter_list|()
block|{
return|return
name|fDTDSource
return|;
block|}
comment|/*      * XMLDTDSource methods      */
specifier|public
name|void
name|setDTDHandler
parameter_list|(
name|XMLDTDHandler
name|handler
parameter_list|)
block|{
name|fDTDHandler
operator|=
name|handler
expr_stmt|;
block|}
specifier|public
name|XMLDTDHandler
name|getDTDHandler
parameter_list|()
block|{
return|return
name|fDTDHandler
return|;
block|}
comment|/*      * EntityState methods      */
specifier|public
name|boolean
name|isEntityDeclared
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isEntityUnparsed
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fUnparsedEntities
operator|!=
literal|null
condition|)
block|{
return|return
name|fUnparsedEntities
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

