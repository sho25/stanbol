begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2000-2002,2004,2005 The Apache Software Foundation.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|jaxp
operator|.
name|JAXPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|DOMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|SAXMessageFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_comment
comment|/**  * @author Rajiv Mordani  * @author Edwin Goei  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|KReSDocumentBuilderFactoryImpl
extends|extends
name|DocumentBuilderFactory
block|{
comment|/** These are DocumentBuilderFactory attributes not DOM attributes */
specifier|private
name|Hashtable
name|attributes
decl_stmt|;
specifier|private
name|Hashtable
name|features
decl_stmt|;
specifier|private
name|Schema
name|grammar
decl_stmt|;
specifier|private
name|boolean
name|isXIncludeAware
decl_stmt|;
specifier|private
specifier|final
name|String
name|FEATURE_SECURE_PROCESSING
init|=
literal|"http://javax.xml.XMLConstants/feature/secure-processing"
decl_stmt|;
comment|/**      * State of the secure processing feature, initially<code>false</code>      */
specifier|private
name|boolean
name|fSecureProcess
init|=
literal|false
decl_stmt|;
comment|/**      * Creates a new instance of a {@link javax.xml.parsers.DocumentBuilder}      * using the currently configured parameters.      */
specifier|public
name|DocumentBuilder
name|newDocumentBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
comment|/** Check that if a Schema has been specified that neither of the schema properties have been set. */
if|if
condition|(
name|grammar
operator|!=
literal|null
operator|&&
name|attributes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attributes
operator|.
name|containsKey
argument_list|(
name|JAXPConstants
operator|.
name|JAXP_SCHEMA_LANGUAGE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParserConfigurationException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
literal|null
argument_list|,
literal|"schema-already-specified"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|JAXPConstants
operator|.
name|JAXP_SCHEMA_LANGUAGE
block|}
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|attributes
operator|.
name|containsKey
argument_list|(
name|JAXPConstants
operator|.
name|JAXP_SCHEMA_SOURCE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParserConfigurationException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
literal|null
argument_list|,
literal|"schema-already-specified"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|JAXPConstants
operator|.
name|JAXP_SCHEMA_SOURCE
block|}
argument_list|)
argument_list|)
throw|;
block|}
block|}
try|try
block|{
return|return
operator|new
name|KReSDocumentBuilderImpl
argument_list|(
name|this
argument_list|,
name|attributes
argument_list|,
name|features
argument_list|,
name|fSecureProcess
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
comment|// Handles both SAXNotSupportedException, SAXNotRecognizedException
throw|throw
operator|new
name|ParserConfigurationException
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Allows the user to set specific attributes on the underlying       * implementation.      * @param name    name of attribute      * @param value   null means to remove attribute      */
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// This handles removal of attributes
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Unrecognized attributes do not cause an exception
return|return;
block|}
comment|// This is ugly.  We have to collect the attributes and then
comment|// later create a DocumentBuilderImpl to verify the attributes.
comment|// Create Hashtable if none existed before
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
name|attributes
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
block|}
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Test the attribute name by possibly throwing an exception
try|try
block|{
operator|new
name|KReSDocumentBuilderImpl
argument_list|(
name|this
argument_list|,
name|attributes
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|attributes
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Allows the user to retrieve specific attributes on the underlying       * implementation.      */
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// See if it's in the attributes Hashtable
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|attributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
return|;
block|}
block|}
name|KReSDOMParser
name|domParser
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// We create a dummy DocumentBuilderImpl in case the attribute
comment|// name is not one that is in the attributes hashtable.
name|domParser
operator|=
operator|new
name|KReSDocumentBuilderImpl
argument_list|(
name|this
argument_list|,
name|attributes
argument_list|,
name|features
argument_list|)
operator|.
name|getDOMParser
argument_list|()
expr_stmt|;
return|return
name|domParser
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se1
parameter_list|)
block|{
comment|// assert(name is not recognized or not supported), try feature
try|try
block|{
name|boolean
name|result
init|=
name|domParser
operator|.
name|getFeature
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// Must have been a feature
return|return
name|result
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se2
parameter_list|)
block|{
comment|// Not a property or a feature
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|se1
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|grammar
return|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|grammar
parameter_list|)
block|{
name|this
operator|.
name|grammar
operator|=
name|grammar
expr_stmt|;
block|}
specifier|public
name|boolean
name|isXIncludeAware
parameter_list|()
block|{
return|return
name|this
operator|.
name|isXIncludeAware
return|;
block|}
specifier|public
name|void
name|setXIncludeAware
parameter_list|(
name|boolean
name|state
parameter_list|)
block|{
name|this
operator|.
name|isXIncludeAware
operator|=
name|state
expr_stmt|;
block|}
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|FEATURE_SECURE_PROCESSING
argument_list|)
condition|)
block|{
return|return
name|fSecureProcess
return|;
block|}
comment|// See if it's in the features Hashtable
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|features
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|val
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
try|try
block|{
name|KReSDOMParser
name|domParser
init|=
operator|new
name|KReSDocumentBuilderImpl
argument_list|(
name|this
argument_list|,
name|attributes
argument_list|,
name|features
argument_list|)
operator|.
name|getDOMParser
argument_list|()
decl_stmt|;
return|return
name|domParser
operator|.
name|getFeature
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParserConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
comment|// If this is the secure processing feature, save it then return.
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|FEATURE_SECURE_PROCESSING
argument_list|)
condition|)
block|{
name|fSecureProcess
operator|=
name|value
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|features
operator|==
literal|null
condition|)
block|{
name|features
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
block|}
name|features
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// Test the feature by possibly throwing SAX exceptions
try|try
block|{
operator|new
name|KReSDocumentBuilderImpl
argument_list|(
name|this
argument_list|,
name|attributes
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXNotSupportedException
name|e
parameter_list|)
block|{
name|features
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParserConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXNotRecognizedException
name|e
parameter_list|)
block|{
name|features
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParserConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

