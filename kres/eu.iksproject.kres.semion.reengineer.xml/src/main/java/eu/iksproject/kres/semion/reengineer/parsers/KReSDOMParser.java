begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2000-2005 The Apache Software Foundation.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|AbstractDOMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|EntityResolverWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|EntityResolver2Wrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|ErrorHandlerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|SAXMessageFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XNIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|grammars
operator|.
name|XMLGrammarPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLEntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLParserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|EntityResolver2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|LocatorImpl
import|;
end_import

begin_comment
comment|/**  * This is the main Xerces DOM parser class. It uses the abstract DOM  * parser with a document scanner, a dtd scanner, and a validator, as  * well as a grammar pool.  *  * @author Arnaud  Le Hors, IBM  * @author Andy Clark, IBM  *  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|KReSDOMParser
extends|extends
name|AbstractDOMParser
block|{
comment|//
comment|// Constants
comment|//
comment|// features
comment|/** Feature identifier: EntityResolver2. */
specifier|protected
specifier|static
specifier|final
name|String
name|USE_ENTITY_RESOLVER2
init|=
name|Constants
operator|.
name|SAX_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|USE_ENTITY_RESOLVER2_FEATURE
decl_stmt|;
comment|// properties
comment|/** Property identifier: symbol table. */
specifier|protected
specifier|static
specifier|final
name|String
name|SYMBOL_TABLE
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|SYMBOL_TABLE_PROPERTY
decl_stmt|;
comment|/** Property identifier: XML grammar pool. */
specifier|protected
specifier|static
specifier|final
name|String
name|XMLGRAMMAR_POOL
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|XMLGRAMMAR_POOL_PROPERTY
decl_stmt|;
comment|/** Recognized properties. */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|RECOGNIZED_PROPERTIES
init|=
block|{
name|SYMBOL_TABLE
block|,
name|XMLGRAMMAR_POOL
block|,     }
decl_stmt|;
comment|//
comment|// Data
comment|//
comment|// features
comment|/** Use EntityResolver2. */
specifier|protected
name|boolean
name|fUseEntityResolver2
init|=
literal|true
decl_stmt|;
comment|//
comment|// Constructors
comment|//
comment|/**      * Constructs a DOM parser using the specified parser configuration.      */
specifier|public
name|KReSDOMParser
parameter_list|(
name|XMLParserConfiguration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|//<init>(XMLParserConfiguration)
comment|/**      * Constructs a DOM parser using the dtd/xml schema parser configuration.      */
specifier|public
name|KReSDOMParser
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//<init>()
comment|/**      * Constructs a DOM parser using the specified symbol table.      */
specifier|public
name|KReSDOMParser
parameter_list|(
name|SymbolTable
name|symbolTable
parameter_list|)
block|{
name|this
argument_list|(
name|symbolTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//<init>(SymbolTable)
comment|/**      * Constructs a DOM parser using the specified symbol table and      * grammar pool.      */
specifier|public
name|KReSDOMParser
parameter_list|(
name|SymbolTable
name|symbolTable
parameter_list|,
name|XMLGrammarPool
name|grammarPool
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|XMLParserConfiguration
operator|)
name|ObjectFactory
operator|.
name|createObject
argument_list|(
literal|"org.apache.xerces.xni.parser.XMLParserConfiguration"
argument_list|,
literal|"org.apache.xerces.parsers.XIncludeAwareParserConfiguration"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set properties
name|fConfiguration
operator|.
name|addRecognizedProperties
argument_list|(
name|RECOGNIZED_PROPERTIES
argument_list|)
expr_stmt|;
if|if
condition|(
name|symbolTable
operator|!=
literal|null
condition|)
block|{
name|fConfiguration
operator|.
name|setProperty
argument_list|(
name|SYMBOL_TABLE
argument_list|,
name|symbolTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|grammarPool
operator|!=
literal|null
condition|)
block|{
name|fConfiguration
operator|.
name|setProperty
argument_list|(
name|XMLGRAMMAR_POOL
argument_list|,
name|grammarPool
argument_list|)
expr_stmt|;
block|}
block|}
comment|//<init>(SymbolTable,XMLGrammarPool)
comment|//
comment|// XMLReader methods
comment|//
comment|/**      * Parses the input source specified by the given system identifier.      *<p>      * This method is equivalent to the following:      *<pre>      *     parse(new InputSource(systemId));      *</pre>      *      * @param systemId The system identifier (URI).      *      * @exception org.xml.sax.SAXException Throws exception on SAX error.      * @exception java.io.IOException Throws exception on i/o error.      */
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
comment|// parse document
name|XMLInputSource
name|source
init|=
operator|new
name|XMLInputSource
argument_list|(
literal|null
argument_list|,
name|systemId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|parse
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
comment|// wrap XNI exceptions as SAX exceptions
catch|catch
parameter_list|(
name|XMLParseException
name|e
parameter_list|)
block|{
name|Exception
name|ex
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
comment|// must be a parser exception; mine it for locator info and throw
comment|// a SAXParseException
name|LocatorImpl
name|locatorImpl
init|=
operator|new
name|LocatorImpl
argument_list|()
decl_stmt|;
name|locatorImpl
operator|.
name|setPublicId
argument_list|(
name|e
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
name|locatorImpl
operator|.
name|setSystemId
argument_list|(
name|e
operator|.
name|getExpandedSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|locatorImpl
operator|.
name|setLineNumber
argument_list|(
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|locatorImpl
operator|.
name|setColumnNumber
argument_list|(
name|e
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|locatorImpl
argument_list|)
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|SAXException
condition|)
block|{
comment|// why did we create an XMLParseException?
throw|throw
operator|(
name|SAXException
operator|)
name|ex
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Exception
name|ex
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
operator|(
name|SAXException
operator|)
name|ex
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// parse(String)
comment|/**      * parse      *      * @param inputSource      *      * @exception org.xml.sax.SAXException      * @exception java.io.IOException      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputSource
name|inputSource
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
comment|// parse document
try|try
block|{
name|XMLInputSource
name|xmlInputSource
init|=
operator|new
name|XMLInputSource
argument_list|(
name|inputSource
operator|.
name|getPublicId
argument_list|()
argument_list|,
name|inputSource
operator|.
name|getSystemId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|xmlInputSource
operator|.
name|setByteStream
argument_list|(
name|inputSource
operator|.
name|getByteStream
argument_list|()
argument_list|)
expr_stmt|;
name|xmlInputSource
operator|.
name|setCharacterStream
argument_list|(
name|inputSource
operator|.
name|getCharacterStream
argument_list|()
argument_list|)
expr_stmt|;
name|xmlInputSource
operator|.
name|setEncoding
argument_list|(
name|inputSource
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|parse
argument_list|(
name|xmlInputSource
argument_list|)
expr_stmt|;
block|}
comment|// wrap XNI exceptions as SAX exceptions
catch|catch
parameter_list|(
name|XMLParseException
name|e
parameter_list|)
block|{
name|Exception
name|ex
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
comment|// must be a parser exception; mine it for locator info and throw
comment|// a SAXParseException
name|LocatorImpl
name|locatorImpl
init|=
operator|new
name|LocatorImpl
argument_list|()
decl_stmt|;
name|locatorImpl
operator|.
name|setPublicId
argument_list|(
name|e
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
name|locatorImpl
operator|.
name|setSystemId
argument_list|(
name|e
operator|.
name|getExpandedSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|locatorImpl
operator|.
name|setLineNumber
argument_list|(
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|locatorImpl
operator|.
name|setColumnNumber
argument_list|(
name|e
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|locatorImpl
argument_list|)
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|SAXException
condition|)
block|{
comment|// why did we create an XMLParseException?
throw|throw
operator|(
name|SAXException
operator|)
name|ex
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e
parameter_list|)
block|{
name|Exception
name|ex
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
operator|(
name|SAXException
operator|)
name|ex
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// parse(InputSource)
comment|/**      * Sets the resolver used to resolve external entities. The EntityResolver      * interface supports resolution of public and system identifiers.      *      * @param resolver The new entity resolver. Passing a null value will      *                 uninstall the currently installed resolver.      */
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
try|try
block|{
name|XMLEntityResolver
name|xer
init|=
operator|(
name|XMLEntityResolver
operator|)
name|fConfiguration
operator|.
name|getProperty
argument_list|(
name|ENTITY_RESOLVER
argument_list|)
decl_stmt|;
if|if
condition|(
name|fUseEntityResolver2
operator|&&
name|resolver
operator|instanceof
name|EntityResolver2
condition|)
block|{
if|if
condition|(
name|xer
operator|instanceof
name|EntityResolver2Wrapper
condition|)
block|{
name|EntityResolver2Wrapper
name|er2w
init|=
operator|(
name|EntityResolver2Wrapper
operator|)
name|xer
decl_stmt|;
name|er2w
operator|.
name|setEntityResolver
argument_list|(
operator|(
name|EntityResolver2
operator|)
name|resolver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fConfiguration
operator|.
name|setProperty
argument_list|(
name|ENTITY_RESOLVER
argument_list|,
operator|new
name|EntityResolver2Wrapper
argument_list|(
operator|(
name|EntityResolver2
operator|)
name|resolver
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|xer
operator|instanceof
name|EntityResolverWrapper
condition|)
block|{
name|EntityResolverWrapper
name|erw
init|=
operator|(
name|EntityResolverWrapper
operator|)
name|xer
decl_stmt|;
name|erw
operator|.
name|setEntityResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fConfiguration
operator|.
name|setProperty
argument_list|(
name|ENTITY_RESOLVER
argument_list|,
operator|new
name|EntityResolverWrapper
argument_list|(
name|resolver
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
comment|// setEntityResolver(EntityResolver)
comment|/**      * Return the current entity resolver.      *      * @return The current entity resolver, or null if none      *         has been registered.      * @see #setEntityResolver      */
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
name|EntityResolver
name|entityResolver
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XMLEntityResolver
name|xmlEntityResolver
init|=
operator|(
name|XMLEntityResolver
operator|)
name|fConfiguration
operator|.
name|getProperty
argument_list|(
name|ENTITY_RESOLVER
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlEntityResolver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|xmlEntityResolver
operator|instanceof
name|EntityResolverWrapper
condition|)
block|{
name|entityResolver
operator|=
operator|(
operator|(
name|EntityResolverWrapper
operator|)
name|xmlEntityResolver
operator|)
operator|.
name|getEntityResolver
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlEntityResolver
operator|instanceof
name|EntityResolver2Wrapper
condition|)
block|{
name|entityResolver
operator|=
operator|(
operator|(
name|EntityResolver2Wrapper
operator|)
name|xmlEntityResolver
operator|)
operator|.
name|getEntityResolver
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
return|return
name|entityResolver
return|;
block|}
comment|// getEntityResolver():EntityResolver
comment|/**      * Allow an application to register an error event handler.      *      *<p>If the application does not register an error handler, all      * error events reported by the SAX parser will be silently      * ignored; however, normal processing may not continue.  It is      * highly recommended that all SAX applications implement an      * error handler to avoid unexpected bugs.</p>      *      *<p>Applications may register a new or different handler in the      * middle of a parse, and the SAX parser must begin using the new      * handler immediately.</p>      *      * @param errorHandler The error handler.      * @exception java.lang.NullPointerException If the handler      *            argument is null.      * @see #getErrorHandler      */
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|errorHandler
parameter_list|)
block|{
try|try
block|{
name|XMLErrorHandler
name|xeh
init|=
operator|(
name|XMLErrorHandler
operator|)
name|fConfiguration
operator|.
name|getProperty
argument_list|(
name|ERROR_HANDLER
argument_list|)
decl_stmt|;
if|if
condition|(
name|xeh
operator|instanceof
name|ErrorHandlerWrapper
condition|)
block|{
name|ErrorHandlerWrapper
name|ehw
init|=
operator|(
name|ErrorHandlerWrapper
operator|)
name|xeh
decl_stmt|;
name|ehw
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fConfiguration
operator|.
name|setProperty
argument_list|(
name|ERROR_HANDLER
argument_list|,
operator|new
name|ErrorHandlerWrapper
argument_list|(
name|errorHandler
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
comment|// setErrorHandler(ErrorHandler)
comment|/**      * Return the current error handler.      *      * @return The current error handler, or null if none      *         has been registered.      * @see #setErrorHandler      */
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
name|ErrorHandler
name|errorHandler
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XMLErrorHandler
name|xmlErrorHandler
init|=
operator|(
name|XMLErrorHandler
operator|)
name|fConfiguration
operator|.
name|getProperty
argument_list|(
name|ERROR_HANDLER
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlErrorHandler
operator|!=
literal|null
operator|&&
name|xmlErrorHandler
operator|instanceof
name|ErrorHandlerWrapper
condition|)
block|{
name|errorHandler
operator|=
operator|(
operator|(
name|ErrorHandlerWrapper
operator|)
name|xmlErrorHandler
operator|)
operator|.
name|getErrorHandler
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
return|return
name|errorHandler
return|;
block|}
comment|// getErrorHandler():ErrorHandler
comment|/**      * Set the state of any feature in a SAX2 parser.  The parser      * might not recognize the feature, and if it does recognize      * it, it might not be able to fulfill the request.      *      * @param featureId The unique identifier (URI) of the feature.      * @param state The requested state of the feature (true or false).      *      * @exception SAXNotRecognizedException If the      *            requested feature is not known.      * @exception SAXNotSupportedException If the      *            requested feature is known, but the requested      *            state is not supported.      */
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|featureId
parameter_list|,
name|boolean
name|state
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
try|try
block|{
comment|// http://xml.org/sax/features/use-entity-resolver2
comment|//   controls whether the methods of an object implementing
comment|//   org.xml.sax.ext.EntityResolver2 will be used by the parser.
comment|//
if|if
condition|(
name|featureId
operator|.
name|equals
argument_list|(
name|USE_ENTITY_RESOLVER2
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|!=
name|fUseEntityResolver2
condition|)
block|{
name|fUseEntityResolver2
operator|=
name|state
expr_stmt|;
comment|// Refresh EntityResolver wrapper.
name|setEntityResolver
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|//
comment|// Default handling
comment|//
name|fConfiguration
operator|.
name|setFeature
argument_list|(
name|featureId
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
name|String
name|identifier
init|=
name|e
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|XMLConfigurationException
operator|.
name|NOT_RECOGNIZED
condition|)
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"feature-not-recognized"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"feature-not-supported"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|// setFeature(String,boolean)
comment|/**      * Query the state of a feature.      *      * Query the current state of any feature in a SAX2 parser.  The      * parser might not recognize the feature.      *      * @param featureId The unique identifier (URI) of the feature      *                  being set.      * @return The current state of the feature.      * @exception org.xml.sax.SAXNotRecognizedException If the      *            requested feature is not known.      * @exception SAXNotSupportedException If the      *            requested feature is known but not supported.      */
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|featureId
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
try|try
block|{
comment|// http://xml.org/sax/features/use-entity-resolver2
comment|//   controls whether the methods of an object implementing
comment|//   org.xml.sax.ext.EntityResolver2 will be used by the parser.
comment|//
if|if
condition|(
name|featureId
operator|.
name|equals
argument_list|(
name|USE_ENTITY_RESOLVER2
argument_list|)
condition|)
block|{
return|return
name|fUseEntityResolver2
return|;
block|}
comment|//
comment|// Default handling
comment|//
return|return
name|fConfiguration
operator|.
name|getFeature
argument_list|(
name|featureId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
name|String
name|identifier
init|=
name|e
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|XMLConfigurationException
operator|.
name|NOT_RECOGNIZED
condition|)
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"feature-not-recognized"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"feature-not-supported"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|// getFeature(String):boolean
comment|/**      * Set the value of any property in a SAX2 parser.  The parser      * might not recognize the property, and if it does recognize      * it, it might not support the requested value.      *      * @param propertyId The unique identifier (URI) of the property      *                   being set.      * @param value The value to which the property is being set.      *      * @exception SAXNotRecognizedException If the      *            requested property is not known.      * @exception SAXNotSupportedException If the      *            requested property is known, but the requested      *            value is not supported.      */
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|propertyId
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
try|try
block|{
name|fConfiguration
operator|.
name|setProperty
argument_list|(
name|propertyId
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
name|String
name|identifier
init|=
name|e
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|XMLConfigurationException
operator|.
name|NOT_RECOGNIZED
condition|)
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"property-not-recognized"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"property-not-supported"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|// setProperty(String,Object)
comment|/**      * Query the value of a property.      *      * Return the current value of a property in a SAX2 parser.      * The parser might not recognize the property.      *      * @param propertyId The unique identifier (URI) of the property      *                   being set.      * @return The current value of the property.      * @exception org.xml.sax.SAXNotRecognizedException If the      *            requested property is not known.      * @exception SAXNotSupportedException If the      *            requested property is known but not supported.      */
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|propertyId
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|propertyId
operator|.
name|equals
argument_list|(
name|CURRENT_ELEMENT_NODE
argument_list|)
condition|)
block|{
name|boolean
name|deferred
init|=
literal|false
decl_stmt|;
try|try
block|{
name|deferred
operator|=
name|getFeature
argument_list|(
name|DEFER_NODE_EXPANSION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|deferred
condition|)
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
literal|"Current element node cannot be queried when node expansion is deferred."
argument_list|)
throw|;
block|}
return|return
operator|(
name|fCurrentNode
operator|!=
literal|null
operator|&&
name|fCurrentNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|)
condition|?
name|fCurrentNode
else|:
literal|null
return|;
block|}
try|try
block|{
return|return
name|fConfiguration
operator|.
name|getProperty
argument_list|(
name|propertyId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
name|String
name|identifier
init|=
name|e
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|XMLConfigurationException
operator|.
name|NOT_RECOGNIZED
condition|)
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"property-not-recognized"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|SAXMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|fConfiguration
operator|.
name|getLocale
argument_list|()
argument_list|,
literal|"property-not-supported"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|}
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|// getProperty(String):Object
comment|/**       * Returns this parser's XMLParserConfiguration.      */
specifier|public
name|XMLParserConfiguration
name|getXMLParserConfiguration
parameter_list|()
block|{
return|return
name|fConfiguration
return|;
block|}
comment|// getXMLParserConfiguration():XMLParserConfiguration
specifier|public
name|DocumentBuilder
name|newDocumentBuilder
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

begin_comment
comment|// class DOMParser
end_comment

end_unit

