begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2002,2004 The Apache Software Foundation.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_comment
comment|/**  * This class is duplicated for each subpackage so keep it in sync.  * It is package private and therefore is not exposed as part of any API.  *   * @xerces.internal  */
end_comment

begin_class
specifier|final
class|class
name|SecuritySupport
block|{
specifier|private
specifier|static
specifier|final
name|SecuritySupport
name|securitySupport
init|=
operator|new
name|SecuritySupport
argument_list|()
decl_stmt|;
comment|/**      * Return an instance of this class.      */
specifier|static
name|SecuritySupport
name|getInstance
parameter_list|()
block|{
return|return
name|securitySupport
return|;
block|}
name|ClassLoader
name|getContextClassLoader
parameter_list|()
block|{
return|return
operator|(
name|ClassLoader
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|ClassLoader
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cl
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{ }
return|return
name|cl
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|ClassLoader
name|getSystemClassLoader
parameter_list|()
block|{
return|return
operator|(
name|ClassLoader
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|ClassLoader
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cl
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{}
return|return
name|cl
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|ClassLoader
name|getParentClassLoader
parameter_list|(
specifier|final
name|ClassLoader
name|cl
parameter_list|)
block|{
return|return
operator|(
name|ClassLoader
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|ClassLoader
name|parent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parent
operator|=
name|cl
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{}
comment|// eliminate loops in case of the boot
comment|// ClassLoader returning itself as a parent
return|return
operator|(
name|parent
operator|==
name|cl
operator|)
condition|?
literal|null
else|:
name|parent
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|String
name|getSystemProperty
parameter_list|(
specifier|final
name|String
name|propName
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|FileInputStream
name|getFileInputStream
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
try|try
block|{
return|return
operator|(
name|FileInputStream
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|FileNotFoundException
operator|)
name|e
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
name|InputStream
name|getResourceAsStream
parameter_list|(
specifier|final
name|ClassLoader
name|cl
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|InputStream
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|InputStream
name|ris
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
name|ris
operator|=
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ris
operator|=
name|cl
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ris
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|boolean
name|getFileExists
parameter_list|(
specifier|final
name|File
name|f
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
name|long
name|getLastModified
parameter_list|(
specifier|final
name|File
name|f
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|private
name|SecuritySupport
parameter_list|()
block|{}
block|}
end_class

end_unit

