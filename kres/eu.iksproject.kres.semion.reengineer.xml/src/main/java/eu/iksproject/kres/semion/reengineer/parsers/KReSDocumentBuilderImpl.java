begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2000-2005 The Apache Software Foundation.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|dom
operator|.
name|DOMImplementationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|dom
operator|.
name|DOMMessageFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|validation
operator|.
name|ValidationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XMLSchemaValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|jaxp
operator|.
name|JAXPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|jaxp
operator|.
name|validation
operator|.
name|XSGrammarPoolContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLDocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLComponentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLDTDFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLParserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_comment
comment|/**  * @author Rajiv Mordani  * @author Edwin Goei  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|KReSDocumentBuilderImpl
extends|extends
name|DocumentBuilder
implements|implements
name|JAXPConstants
block|{
comment|/** Feature identifier: namespaces. */
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACES_FEATURE
init|=
name|Constants
operator|.
name|SAX_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|NAMESPACES_FEATURE
decl_stmt|;
comment|/** Feature identifier: include ignorable white space. */
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDE_IGNORABLE_WHITESPACE
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|INCLUDE_IGNORABLE_WHITESPACE
decl_stmt|;
comment|/** Feature identifier: create entiry ref nodes feature. */
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_ENTITY_REF_NODES_FEATURE
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|CREATE_ENTITY_REF_NODES_FEATURE
decl_stmt|;
comment|/** Feature identifier: include comments feature. */
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDE_COMMENTS_FEATURE
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|INCLUDE_COMMENTS_FEATURE
decl_stmt|;
comment|/** Feature identifier: create cdata nodes feature. */
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_CDATA_NODES_FEATURE
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|CREATE_CDATA_NODES_FEATURE
decl_stmt|;
comment|/** Feature identifier: XInclude processing */
specifier|private
specifier|static
specifier|final
name|String
name|XINCLUDE_FEATURE
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|XINCLUDE_FEATURE
decl_stmt|;
comment|/** feature identifier: XML Schema validation */
specifier|private
specifier|static
specifier|final
name|String
name|XMLSCHEMA_VALIDATION_FEATURE
init|=
name|Constants
operator|.
name|XERCES_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|SCHEMA_VALIDATION_FEATURE
decl_stmt|;
comment|/** Feature identifier: validation */
specifier|private
specifier|static
specifier|final
name|String
name|VALIDATION_FEATURE
init|=
name|Constants
operator|.
name|SAX_FEATURE_PREFIX
operator|+
name|Constants
operator|.
name|VALIDATION_FEATURE
decl_stmt|;
comment|/** Property identifier: security manager. */
specifier|private
specifier|static
specifier|final
name|String
name|SECURITY_MANAGER
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|SECURITY_MANAGER_PROPERTY
decl_stmt|;
specifier|private
name|KReSDOMParser
name|kReSdomParser
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|grammar
decl_stmt|;
specifier|private
name|XMLComponent
name|fSchemaValidator
decl_stmt|;
specifier|private
name|XMLComponentManager
name|fSchemaValidatorComponentManager
decl_stmt|;
specifier|private
name|ValidationManager
name|fSchemaValidationManager
decl_stmt|;
comment|/** Initial ErrorHandler */
specifier|private
specifier|final
name|ErrorHandler
name|fInitErrorHandler
decl_stmt|;
comment|/** Initial EntityResolver */
specifier|private
specifier|final
name|EntityResolver
name|fInitEntityResolver
decl_stmt|;
name|KReSDocumentBuilderImpl
parameter_list|(
name|KReSDocumentBuilderFactoryImpl
name|dbf
parameter_list|,
name|Hashtable
name|dbfAttrs
parameter_list|,
name|Hashtable
name|features
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
name|this
argument_list|(
name|dbf
argument_list|,
name|dbfAttrs
argument_list|,
name|features
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|KReSDocumentBuilderImpl
parameter_list|(
name|KReSDocumentBuilderFactoryImpl
name|dbf
parameter_list|,
name|Hashtable
name|dbfAttrs
parameter_list|,
name|Hashtable
name|features
parameter_list|,
name|boolean
name|secureProcessing
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
name|kReSdomParser
operator|=
operator|new
name|KReSDOMParser
argument_list|()
expr_stmt|;
comment|// If validating, provide a default ErrorHandler that prints
comment|// validation errors with a warning telling the user to set an
comment|// ErrorHandler
if|if
condition|(
name|dbf
operator|.
name|isValidating
argument_list|()
condition|)
block|{
name|fInitErrorHandler
operator|=
operator|new
name|DefaultValidationErrorHandler
argument_list|()
expr_stmt|;
name|setErrorHandler
argument_list|(
name|fInitErrorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fInitErrorHandler
operator|=
name|kReSdomParser
operator|.
name|getErrorHandler
argument_list|()
expr_stmt|;
block|}
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|VALIDATION_FEATURE
argument_list|,
name|dbf
operator|.
name|isValidating
argument_list|()
argument_list|)
expr_stmt|;
comment|// "namespaceAware" == SAX Namespaces feature
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|NAMESPACES_FEATURE
argument_list|,
name|dbf
operator|.
name|isNamespaceAware
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set various parameters obtained from DocumentBuilderFactory
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|INCLUDE_IGNORABLE_WHITESPACE
argument_list|,
operator|!
name|dbf
operator|.
name|isIgnoringElementContentWhitespace
argument_list|()
argument_list|)
expr_stmt|;
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|CREATE_ENTITY_REF_NODES_FEATURE
argument_list|,
operator|!
name|dbf
operator|.
name|isExpandEntityReferences
argument_list|()
argument_list|)
expr_stmt|;
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|INCLUDE_COMMENTS_FEATURE
argument_list|,
operator|!
name|dbf
operator|.
name|isIgnoringComments
argument_list|()
argument_list|)
expr_stmt|;
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|CREATE_CDATA_NODES_FEATURE
argument_list|,
operator|!
name|dbf
operator|.
name|isCoalescing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Avoid setting the XInclude processing feature if the value is false.
comment|// This will keep the configuration from throwing an exception if it
comment|// does not support XInclude.
if|if
condition|(
name|dbf
operator|.
name|isXIncludeAware
argument_list|()
condition|)
block|{
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|XINCLUDE_FEATURE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// If the secure processing feature is on set a security manager.
if|if
condition|(
name|secureProcessing
condition|)
block|{
name|kReSdomParser
operator|.
name|setProperty
argument_list|(
name|SECURITY_MANAGER
argument_list|,
operator|new
name|SecurityManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|grammar
operator|=
name|dbf
operator|.
name|getSchema
argument_list|()
expr_stmt|;
if|if
condition|(
name|grammar
operator|!=
literal|null
condition|)
block|{
name|XMLParserConfiguration
name|config
init|=
name|kReSdomParser
operator|.
name|getXMLParserConfiguration
argument_list|()
decl_stmt|;
name|XMLComponent
name|validatorComponent
init|=
literal|null
decl_stmt|;
comment|/** For Xerces grammars, use built-in schema validator. **/
if|if
condition|(
name|grammar
operator|instanceof
name|XSGrammarPoolContainer
condition|)
block|{
name|validatorComponent
operator|=
operator|new
name|XMLSchemaValidator
argument_list|()
expr_stmt|;
name|fSchemaValidationManager
operator|=
operator|new
name|ValidationManager
argument_list|()
expr_stmt|;
name|XMLDTDFilter
name|entityHandler
init|=
operator|new
name|UnparsedEntityHandler
argument_list|(
name|fSchemaValidationManager
argument_list|)
decl_stmt|;
name|config
operator|.
name|setDTDHandler
argument_list|(
name|entityHandler
argument_list|)
expr_stmt|;
name|entityHandler
operator|.
name|setDTDHandler
argument_list|(
name|kReSdomParser
argument_list|)
expr_stmt|;
name|kReSdomParser
operator|.
name|setDTDSource
argument_list|(
name|entityHandler
argument_list|)
expr_stmt|;
name|fSchemaValidatorComponentManager
operator|=
operator|new
name|SchemaValidatorConfiguration
argument_list|(
name|config
argument_list|,
operator|(
name|XSGrammarPoolContainer
operator|)
name|grammar
argument_list|,
name|fSchemaValidationManager
argument_list|)
expr_stmt|;
block|}
comment|/** For third party grammars, use the JAXP validator component. **/
else|else
block|{
name|validatorComponent
operator|=
operator|new
name|JAXPValidatorComponent
argument_list|(
name|grammar
operator|.
name|newValidatorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|fSchemaValidatorComponentManager
operator|=
name|config
expr_stmt|;
block|}
name|config
operator|.
name|addRecognizedFeatures
argument_list|(
name|validatorComponent
operator|.
name|getRecognizedFeatures
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|addRecognizedProperties
argument_list|(
name|validatorComponent
operator|.
name|getRecognizedProperties
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDocumentHandler
argument_list|(
operator|(
name|XMLDocumentHandler
operator|)
name|validatorComponent
argument_list|)
expr_stmt|;
operator|(
operator|(
name|XMLDocumentSource
operator|)
name|validatorComponent
operator|)
operator|.
name|setDocumentHandler
argument_list|(
name|kReSdomParser
argument_list|)
expr_stmt|;
name|kReSdomParser
operator|.
name|setDocumentSource
argument_list|(
operator|(
name|XMLDocumentSource
operator|)
name|validatorComponent
argument_list|)
expr_stmt|;
name|fSchemaValidator
operator|=
name|validatorComponent
expr_stmt|;
block|}
comment|// Set features
name|setFeatures
argument_list|(
name|features
argument_list|)
expr_stmt|;
comment|// Set attributes
name|setDocumentBuilderFactoryAttributes
argument_list|(
name|dbfAttrs
argument_list|)
expr_stmt|;
comment|// Initial EntityResolver
name|fInitEntityResolver
operator|=
name|kReSdomParser
operator|.
name|getEntityResolver
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setFeatures
parameter_list|(
name|Hashtable
name|features
parameter_list|)
throws|throws
name|SAXNotSupportedException
throws|,
name|SAXNotRecognizedException
block|{
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|features
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|feature
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|boolean
name|value
init|=
operator|(
operator|(
name|Boolean
operator|)
name|features
operator|.
name|get
argument_list|(
name|feature
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|feature
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Set any DocumentBuilderFactory attributes of our underlying kReSdomParser      *      * Note: code does not handle possible conflicts between kReSdomParser      * attribute names and JAXP specific attribute names,      * eg. DocumentBuilderFactory.setValidating()      */
specifier|private
name|void
name|setDocumentBuilderFactoryAttributes
parameter_list|(
name|Hashtable
name|dbfAttrs
parameter_list|)
throws|throws
name|SAXNotSupportedException
throws|,
name|SAXNotRecognizedException
block|{
if|if
condition|(
name|dbfAttrs
operator|==
literal|null
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|dbfAttrs
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|dbfAttrs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
comment|// Assume feature
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Boolean
operator|)
name|val
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Assume property
if|if
condition|(
name|JAXP_SCHEMA_LANGUAGE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// JAXP 1.2 support
comment|//None of the properties will take effect till the setValidating(true) has been called
if|if
condition|(
name|W3C_XML_SCHEMA
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|isValidating
argument_list|()
condition|)
block|{
name|kReSdomParser
operator|.
name|setFeature
argument_list|(
name|XMLSCHEMA_VALIDATION_FEATURE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// this should allow us not to emit DTD errors, as expected by the
comment|// spec when schema validation is enabled
name|kReSdomParser
operator|.
name|setProperty
argument_list|(
name|JAXP_SCHEMA_LANGUAGE
argument_list|,
name|W3C_XML_SCHEMA
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|JAXP_SCHEMA_SOURCE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|isValidating
argument_list|()
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|dbfAttrs
operator|.
name|get
argument_list|(
name|JAXP_SCHEMA_LANGUAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|W3C_XML_SCHEMA
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|kReSdomParser
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DOMMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|DOMMessageFormatter
operator|.
name|DOM_DOMAIN
argument_list|,
literal|"jaxp-order-not-supported"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|JAXP_SCHEMA_LANGUAGE
block|,
name|JAXP_SCHEMA_SOURCE
block|}
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// Let Xerces code handle the property
name|kReSdomParser
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Non-preferred: use the getDOMImplementation() method instead of this      * one to get a DOM Level 2 DOMImplementation object and then use DOM      * Level 2 methods to create a DOM Document object.      */
specifier|public
name|Document
name|newDocument
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|dom
operator|.
name|DocumentImpl
argument_list|()
return|;
block|}
specifier|public
name|DOMImplementation
name|getDOMImplementation
parameter_list|()
block|{
return|return
name|DOMImplementationImpl
operator|.
name|getDOMImplementation
argument_list|()
return|;
block|}
specifier|public
name|Document
name|parse
parameter_list|(
name|InputSource
name|is
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DOMMessageFormatter
operator|.
name|formatMessage
argument_list|(
name|DOMMessageFormatter
operator|.
name|DOM_DOMAIN
argument_list|,
literal|"jaxp-null-input-source"
argument_list|,
literal|null
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|fSchemaValidator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fSchemaValidationManager
operator|!=
literal|null
condition|)
block|{
name|fSchemaValidationManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|resetSchemaValidator
argument_list|()
expr_stmt|;
block|}
name|kReSdomParser
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|kReSdomParser
operator|.
name|getDocument
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isNamespaceAware
parameter_list|()
block|{
try|try
block|{
return|return
name|kReSdomParser
operator|.
name|getFeature
argument_list|(
name|NAMESPACES_FEATURE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|x
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isValidating
parameter_list|()
block|{
try|try
block|{
return|return
name|kReSdomParser
operator|.
name|getFeature
argument_list|(
name|VALIDATION_FEATURE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|x
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets the XInclude processing mode for this parser      * @return the state of XInclude processing mode      */
specifier|public
name|boolean
name|isXIncludeAware
parameter_list|()
block|{
try|try
block|{
return|return
name|kReSdomParser
operator|.
name|getFeature
argument_list|(
name|XINCLUDE_FEATURE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|exc
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|er
parameter_list|)
block|{
name|kReSdomParser
operator|.
name|setEntityResolver
argument_list|(
name|er
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|eh
parameter_list|)
block|{
name|kReSdomParser
operator|.
name|setErrorHandler
argument_list|(
name|eh
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|grammar
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|/** Restore the initial error handler. **/
if|if
condition|(
name|kReSdomParser
operator|.
name|getErrorHandler
argument_list|()
operator|!=
name|fInitErrorHandler
condition|)
block|{
name|kReSdomParser
operator|.
name|setErrorHandler
argument_list|(
name|fInitErrorHandler
argument_list|)
expr_stmt|;
block|}
comment|/** Restore the initial entity resolver. **/
if|if
condition|(
name|kReSdomParser
operator|.
name|getEntityResolver
argument_list|()
operator|!=
name|fInitEntityResolver
condition|)
block|{
name|kReSdomParser
operator|.
name|setEntityResolver
argument_list|(
name|fInitEntityResolver
argument_list|)
expr_stmt|;
block|}
block|}
comment|// package private
name|KReSDOMParser
name|getDOMParser
parameter_list|()
block|{
return|return
name|kReSdomParser
return|;
block|}
specifier|private
name|void
name|resetSchemaValidator
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|fSchemaValidator
operator|.
name|reset
argument_list|(
name|fSchemaValidatorComponentManager
argument_list|)
expr_stmt|;
block|}
comment|// This should never be thrown from the schema validator.
catch|catch
parameter_list|(
name|XMLConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

