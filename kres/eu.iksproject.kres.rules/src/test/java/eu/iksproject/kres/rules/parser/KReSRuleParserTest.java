begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|KReSRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|KReSRuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|KReSKB
import|;
end_import

begin_comment
comment|/**  *   * @author andrea.nuzzolese  *  */
end_comment

begin_class
specifier|public
class|class
name|KReSRuleParserTest
block|{
specifier|private
specifier|static
name|String
name|kReSRule
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|kReSRule
operator|=
literal|"ProvaParent =<http://www.semanticweb.org/ontologies/2010/6/ProvaParent.owl#> . "
operator|+
literal|"rule1[ has(ProvaParent:hasParent, ?x, ?y) . has(ProvaParent:hasBrother, ?y, ?z) -> "
operator|+
literal|"has(ProvaParent:hasUncle, ?x, ?z) ]"
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParser
parameter_list|()
block|{
try|try
block|{
name|KReSKB
name|kReSKB
init|=
name|KReSRuleParser
operator|.
name|parse
argument_list|(
name|kReSRule
argument_list|)
decl_stmt|;
if|if
condition|(
name|kReSKB
operator|!=
literal|null
condition|)
block|{
name|KReSRuleList
name|kReSRuleList
init|=
name|kReSKB
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
if|if
condition|(
name|kReSRuleList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RULE : "
operator|+
name|kReSRule
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RULE LIST IS NULL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"KB IS NULL"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

