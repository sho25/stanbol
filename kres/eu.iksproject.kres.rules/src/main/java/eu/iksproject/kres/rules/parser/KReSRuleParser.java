begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. KReSRuleParser.java */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|KReSRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|KReSRuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|KReSRuleExpressiveness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|URIResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|AtomList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|KReSKB
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|KReSRuleImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|ClassAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|ComparisonAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|ConcatAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|CreateLabelAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|DatavaluedPropertyAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|DifferentAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|EndsWithAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|GreaterThanAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|IndividualPropertyAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|IsBlankAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|KReSBlankNode
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|KReSResource
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|KReSTypedLiteral
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|KReSVariable
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|LengthAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|LessThanAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|LetAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|LocalNameAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|LowerCaseAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|NamespaceAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|NewNodeAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|NotAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|NumberAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|NumericFunctionAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|PropStringAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|SPARQLcAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|SPARQLdAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|SPARQLddAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|SameAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|StartsWithAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|StrAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|StringAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|StringFunctionAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|SubstringAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|SubtractionAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|SumAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|UnionAtom
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|atoms
operator|.
name|UpperCaseAtom
import|;
end_import

begin_class
specifier|public
class|class
name|KReSRuleParser
implements|implements
name|KReSRuleParserConstants
block|{
specifier|static
name|KReSKB
name|kReSKB
decl_stmt|;
specifier|public
specifier|static
name|KReSKB
name|parse
parameter_list|(
name|String
name|inString
parameter_list|)
block|{
block|{
name|kReSKB
operator|=
operator|new
name|KReSKB
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|inString
argument_list|)
decl_stmt|;
name|KReSRuleParser
name|parser
init|=
operator|new
name|KReSRuleParser
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|start
argument_list|( )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TokenMgrError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|kReSKB
return|;
block|}
block|}
specifier|private
specifier|static
name|URI
name|getSWRLArgument
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|Resource
name|rdfNode
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|argumentComposition
init|=
name|argument
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|argumentComposition
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|prefix
init|=
name|argumentComposition
index|[
literal|0
index|]
decl_stmt|;
name|String
name|resourceName
init|=
name|argumentComposition
index|[
literal|1
index|]
decl_stmt|;
name|String
name|namespaceURI
init|=
name|kReSKB
operator|.
name|getPrefixURI
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|rdfNode
operator|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
operator|.
name|createResource
argument_list|(
name|namespaceURI
operator|+
name|resourceName
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|rdfNode
operator|.
name|getURI
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|URI
name|getSWRLVariable
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|Resource
name|variableResource
init|=
literal|null
decl_stmt|;
name|String
name|variableString
init|=
name|argument
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|variableResource
operator|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
operator|.
name|createResource
argument_list|(
name|kReSKB
operator|.
name|getPrefixURI
argument_list|(
literal|"var"
argument_list|)
operator|+
name|variableString
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|variableResource
operator|.
name|getURI
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|final
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|ParseException
block|{
name|expression
argument_list|()
expr_stmt|;
name|expressionCont
argument_list|()
expr_stmt|;
block|}
specifier|final
specifier|public
name|void
name|expressionCont
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|expression
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
block|}
block|}
specifier|final
specifier|public
name|void
name|expression
parameter_list|()
throws|throws
name|ParseException
block|{
name|KReSRule
name|kReSRule
decl_stmt|;
name|prefix
argument_list|()
expr_stmt|;
name|expressionCont
argument_list|()
expr_stmt|;
block|}
specifier|final
specifier|public
name|void
name|prefix
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|nsPrefix
decl_stmt|;
name|Object
name|obj
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|VAR
case|:
name|nsPrefix
operator|=
name|getVariable
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EQUAL
case|:
name|obj
operator|=
name|equality
argument_list|()
expr_stmt|;
name|String
name|prefixURI
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
name|prefixURI
operator|=
name|prefixURI
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|prefixURI
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|kReSKB
operator|.
name|addPrefix
argument_list|(
name|nsPrefix
argument_list|,
name|prefixURI
argument_list|)
expr_stmt|;
break|break;
case|case
name|LQUAD
case|:
name|obj
operator|=
name|rule
argument_list|()
expr_stmt|;
name|AtomList
index|[]
name|atoms
init|=
operator|(
name|AtomList
index|[]
operator|)
name|obj
decl_stmt|;
name|String
name|varPrefix
init|=
name|kReSKB
operator|.
name|getPrefixURI
argument_list|(
literal|"var"
argument_list|)
decl_stmt|;
name|varPrefix
operator|=
name|varPrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|varPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|atoms
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|AtomList
name|body
init|=
name|atoms
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|body
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Iterator
argument_list|<
name|KReSRuleAtom
argument_list|>
name|it
init|=
name|body
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|KReSRuleAtom
name|atom
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|atom
operator|.
name|isSPARQLConstruct
argument_list|()
condition|)
block|{
name|KReSRule
name|kReSRule
init|=
operator|new
name|KReSRuleImpl
argument_list|(
name|varPrefix
operator|+
name|nsPrefix
argument_list|,
name|atoms
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|KReSRuleExpressiveness
operator|.
name|SPARQLConstruct
argument_list|)
decl_stmt|;
name|kReSKB
operator|.
name|addRule
argument_list|(
name|kReSRule
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atom
operator|.
name|isSPARQLDelete
argument_list|()
condition|)
block|{
name|KReSRule
name|kReSRule
init|=
operator|new
name|KReSRuleImpl
argument_list|(
name|varPrefix
operator|+
name|nsPrefix
argument_list|,
name|atoms
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|KReSRuleExpressiveness
operator|.
name|SPARQLDelete
argument_list|)
decl_stmt|;
name|kReSKB
operator|.
name|addRule
argument_list|(
name|kReSRule
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atom
operator|.
name|isSPARQLDeleteData
argument_list|()
condition|)
block|{
name|KReSRule
name|kReSRule
init|=
operator|new
name|KReSRuleImpl
argument_list|(
name|varPrefix
operator|+
name|nsPrefix
argument_list|,
name|atoms
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|KReSRuleExpressiveness
operator|.
name|SPARQLDeleteData
argument_list|)
decl_stmt|;
name|kReSKB
operator|.
name|addRule
argument_list|(
name|kReSRule
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|KReSRule
name|kReSRule
init|=
operator|new
name|KReSRuleImpl
argument_list|(
name|varPrefix
operator|+
name|nsPrefix
argument_list|,
name|atoms
index|[
literal|0
index|]
argument_list|,
name|atoms
index|[
literal|1
index|]
argument_list|,
name|KReSRuleExpressiveness
operator|.
name|KReSCore
argument_list|)
decl_stmt|;
name|kReSKB
operator|.
name|addRule
argument_list|(
name|kReSRule
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
case|case
name|FORWARD_CHAIN
case|:
name|jj_consume_token
argument_list|(
name|FORWARD_CHAIN
argument_list|)
expr_stmt|;
name|nsPrefix
operator|=
name|getVariable
argument_list|()
expr_stmt|;
name|obj
operator|=
name|rule
argument_list|()
expr_stmt|;
name|AtomList
index|[]
name|atoms
init|=
operator|(
name|AtomList
index|[]
operator|)
name|obj
decl_stmt|;
name|String
name|varPrefix
init|=
name|kReSKB
operator|.
name|getPrefixURI
argument_list|(
literal|"var"
argument_list|)
decl_stmt|;
name|varPrefix
operator|=
name|varPrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|varPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|KReSRule
name|kReSRule
init|=
operator|new
name|KReSRuleImpl
argument_list|(
name|varPrefix
operator|+
name|nsPrefix
argument_list|,
name|atoms
index|[
literal|0
index|]
argument_list|,
name|atoms
index|[
literal|1
index|]
argument_list|,
name|KReSRuleExpressiveness
operator|.
name|ForwardChaining
argument_list|)
decl_stmt|;
name|kReSKB
operator|.
name|addRule
argument_list|(
name|kReSRule
argument_list|)
expr_stmt|;
break|break;
case|case
name|REFLEXIVE
case|:
name|jj_consume_token
argument_list|(
name|REFLEXIVE
argument_list|)
expr_stmt|;
name|nsPrefix
operator|=
name|getVariable
argument_list|()
expr_stmt|;
name|obj
operator|=
name|rule
argument_list|()
expr_stmt|;
name|AtomList
index|[]
name|kReSAtoms
init|=
operator|(
name|AtomList
index|[]
operator|)
name|obj
decl_stmt|;
name|String
name|pref
init|=
name|kReSKB
operator|.
name|getPrefixURI
argument_list|(
literal|"var"
argument_list|)
decl_stmt|;
name|pref
operator|=
name|pref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pref
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|KReSRule
name|rule
init|=
operator|new
name|KReSRuleImpl
argument_list|(
name|pref
operator|+
name|nsPrefix
argument_list|,
name|kReSAtoms
index|[
literal|0
index|]
argument_list|,
name|kReSAtoms
index|[
literal|1
index|]
argument_list|,
name|KReSRuleExpressiveness
operator|.
name|Reflexive
argument_list|)
decl_stmt|;
name|kReSKB
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|String
name|equality
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|nsURI
decl_stmt|;
name|jj_consume_token
argument_list|(
name|EQUAL
argument_list|)
expr_stmt|;
name|nsURI
operator|=
name|getURI
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|nsURI
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|AtomList
index|[]
name|rule
parameter_list|()
throws|throws
name|ParseException
block|{
name|AtomList
index|[]
name|ruleAtoms
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LQUAD
argument_list|)
expr_stmt|;
name|ruleAtoms
operator|=
name|ruleDefinition
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RQUAD
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ruleAtoms
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|AtomList
index|[]
name|ruleDefinition
parameter_list|()
throws|throws
name|ParseException
block|{
name|AtomList
name|body
decl_stmt|;
name|AtomList
name|head
decl_stmt|;
name|Token
name|t
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LARROW
case|:
case|case
name|SAME
case|:
case|case
name|DIFFERENT
case|:
case|case
name|LESSTHAN
case|:
case|case
name|GREATERTHAN
case|:
case|case
name|IS
case|:
case|case
name|NEW_NODE
case|:
case|case
name|STARTS_WITH
case|:
case|case
name|ENDS_WITH
case|:
case|case
name|LET
case|:
case|case
name|HAS
case|:
case|case
name|VALUES
case|:
case|case
name|NOT
case|:
case|case
name|UNION
case|:
case|case
name|IS_BLANK
case|:
name|body
operator|=
name|atomList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LARROW
argument_list|)
expr_stmt|;
name|head
operator|=
name|atomList
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|AtomList
index|[]
block|{
name|body
block|,
name|head
block|}
return|;
block|}
break|break;
case|case
name|SPARQL_C
case|:
name|jj_consume_token
argument_list|(
name|SPARQL_C
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|SPARQL_STRING
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
name|KReSRuleAtom
name|sparqlAtom
init|=
operator|new
name|SPARQLcAtom
argument_list|(
name|t
operator|.
name|image
argument_list|)
decl_stmt|;
name|AtomList
name|atomList
init|=
operator|new
name|AtomList
argument_list|()
decl_stmt|;
name|atomList
operator|.
name|addToHead
argument_list|(
name|sparqlAtom
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|AtomList
index|[]
block|{
name|atomList
block|}
return|;
block|}
break|break;
case|case
name|SPARQL_D
case|:
name|jj_consume_token
argument_list|(
name|SPARQL_D
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|SPARQL_STRING
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
name|KReSRuleAtom
name|sparqlDAtom
init|=
operator|new
name|SPARQLdAtom
argument_list|(
name|t
operator|.
name|image
argument_list|)
decl_stmt|;
name|AtomList
name|atomDList
init|=
operator|new
name|AtomList
argument_list|()
decl_stmt|;
name|atomDList
operator|.
name|addToHead
argument_list|(
name|sparqlDAtom
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|AtomList
index|[]
block|{
name|atomDList
block|}
return|;
block|}
break|break;
case|case
name|SPARQL_DD
case|:
name|jj_consume_token
argument_list|(
name|SPARQL_DD
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|SPARQL_STRING
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
name|KReSRuleAtom
name|sparqlDDAtom
init|=
operator|new
name|SPARQLddAtom
argument_list|(
name|t
operator|.
name|image
argument_list|)
decl_stmt|;
name|AtomList
name|atomDDList
init|=
operator|new
name|AtomList
argument_list|()
decl_stmt|;
name|atomDDList
operator|.
name|addToHead
argument_list|(
name|sparqlDDAtom
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|AtomList
index|[]
block|{
name|atomDDList
block|}
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|AtomList
name|atomList
parameter_list|()
throws|throws
name|ParseException
block|{
name|AtomList
name|atomList
init|=
operator|new
name|AtomList
argument_list|()
decl_stmt|;
name|KReSRuleAtom
name|kReSAtom
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SAME
case|:
case|case
name|DIFFERENT
case|:
case|case
name|LESSTHAN
case|:
case|case
name|GREATERTHAN
case|:
case|case
name|IS
case|:
case|case
name|NEW_NODE
case|:
case|case
name|STARTS_WITH
case|:
case|case
name|ENDS_WITH
case|:
case|case
name|LET
case|:
case|case
name|HAS
case|:
case|case
name|VALUES
case|:
case|case
name|NOT
case|:
case|case
name|UNION
case|:
case|case
name|IS_BLANK
case|:
name|kReSAtom
operator|=
name|atom
argument_list|()
expr_stmt|;
name|atomList
operator|=
name|atomListRest
argument_list|()
expr_stmt|;
name|atomList
operator|.
name|addToHead
argument_list|(
name|kReSAtom
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|atomList
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|atomList
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|AtomList
name|atomListRest
parameter_list|()
throws|throws
name|ParseException
block|{
name|AtomList
name|atomList
init|=
operator|new
name|AtomList
argument_list|()
decl_stmt|;
name|KReSRuleAtom
name|kReSAtom
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|atomList
operator|=
name|atomList
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|atomList
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|atomList
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|KReSRuleAtom
name|atom
parameter_list|()
throws|throws
name|ParseException
block|{
name|KReSRuleAtom
name|kReSRuleAtom
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IS
case|:
name|kReSRuleAtom
operator|=
name|classAtom
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kReSRuleAtom
return|;
block|}
break|break;
case|case
name|HAS
case|:
name|kReSRuleAtom
operator|=
name|individualPropertyAtom
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kReSRuleAtom
return|;
block|}
break|break;
case|case
name|VALUES
case|:
name|kReSRuleAtom
operator|=
name|datavaluedPropertyAtom
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kReSRuleAtom
return|;
block|}
break|break;
case|case
name|LET
case|:
name|kReSRuleAtom
operator|=
name|letAtom
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kReSRuleAtom
return|;
block|}
break|break;
case|case
name|NEW_NODE
case|:
name|kReSRuleAtom
operator|=
name|newNodeAtom
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kReSRuleAtom
return|;
block|}
break|break;
case|case
name|SAME
case|:
case|case
name|DIFFERENT
case|:
case|case
name|LESSTHAN
case|:
case|case
name|GREATERTHAN
case|:
case|case
name|STARTS_WITH
case|:
case|case
name|ENDS_WITH
case|:
case|case
name|NOT
case|:
case|case
name|IS_BLANK
case|:
name|kReSRuleAtom
operator|=
name|comparisonAtom
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kReSRuleAtom
return|;
block|}
break|break;
case|case
name|UNION
case|:
name|kReSRuleAtom
operator|=
name|unionAtom
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kReSRuleAtom
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|KReSRuleAtom
name|unionAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|AtomList
name|atomList1
decl_stmt|;
name|AtomList
name|atomList2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|atomList1
operator|=
name|atomList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|atomList2
operator|=
name|atomList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|UnionAtom
argument_list|(
name|atomList1
argument_list|,
name|atomList2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|StringFunctionAtom
name|createLabelAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|stringFunctionAtom
decl_stmt|;
name|jj_consume_token
argument_list|(
name|CREATE_LABEL
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|stringFunctionAtom
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|CreateLabelAtom
argument_list|(
name|stringFunctionAtom
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|StringFunctionAtom
name|propStringAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|stringFunctionAtom1
decl_stmt|;
name|StringFunctionAtom
name|stringFunctionAtom2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|PROP
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|stringFunctionAtom1
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|stringFunctionAtom2
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|PropStringAtom
argument_list|(
name|stringFunctionAtom1
argument_list|,
name|stringFunctionAtom2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ComparisonAtom
name|endsWithAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|KReSRuleAtom
name|kReSRuleAtom
decl_stmt|;
name|StringFunctionAtom
name|arg
decl_stmt|;
name|StringFunctionAtom
name|stringFunctionAtom
decl_stmt|;
name|jj_consume_token
argument_list|(
name|ENDS_WITH
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|arg
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|stringFunctionAtom
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|EndsWithAtom
argument_list|(
name|arg
argument_list|,
name|stringFunctionAtom
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ComparisonAtom
name|startsWithAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|KReSRuleAtom
name|kReSRuleAtom
decl_stmt|;
name|StringFunctionAtom
name|arg
decl_stmt|;
name|StringFunctionAtom
name|stringFunctionAtom
decl_stmt|;
name|jj_consume_token
argument_list|(
name|STARTS_WITH
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|arg
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|stringFunctionAtom
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|StartsWithAtom
argument_list|(
name|arg
argument_list|,
name|stringFunctionAtom
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|StringFunctionAtom
name|stringFunctionAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|Object
name|obj
decl_stmt|;
name|StringFunctionAtom
name|stringFunctionAtom
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CONCAT
case|:
name|stringFunctionAtom
operator|=
name|concatAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|UPPERCASE
case|:
name|stringFunctionAtom
operator|=
name|upperCaseAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|LOWERCASE
case|:
name|stringFunctionAtom
operator|=
name|lowerCaseAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUBSTRING
case|:
name|stringFunctionAtom
operator|=
name|substringAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|NAMESPACE
case|:
name|stringFunctionAtom
operator|=
name|namespaceAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|LOCALNAME
case|:
name|stringFunctionAtom
operator|=
name|localnameAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|STR
case|:
name|stringFunctionAtom
operator|=
name|strAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|NOTEX
case|:
case|case
name|NUM
case|:
case|case
name|VAR
case|:
case|case
name|VARIABLE
case|:
case|case
name|URI
case|:
case|case
name|STRING
case|:
case|case
name|BNODE
case|:
name|stringFunctionAtom
operator|=
name|stringAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|PROP
case|:
name|stringFunctionAtom
operator|=
name|propStringAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|CREATE_LABEL
case|:
name|stringFunctionAtom
operator|=
name|createLabelAtom
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|stringFunctionAtom
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|StrAtom
name|strAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri
decl_stmt|;
name|jj_consume_token
argument_list|(
name|STR
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uri
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|StrAtom
argument_list|(
name|uri
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|NamespaceAtom
name|namespaceAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri
decl_stmt|;
name|jj_consume_token
argument_list|(
name|NAMESPACE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uri
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|NamespaceAtom
argument_list|(
name|uri
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|LocalNameAtom
name|localnameAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LOCALNAME
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uri
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|LocalNameAtom
argument_list|(
name|uri
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|StringAtom
name|stringAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|Object
name|obj
decl_stmt|;
name|StringFunctionAtom
name|stringFunctionAtom
decl_stmt|;
name|obj
operator|=
name|uObject
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|StringAtom
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ConcatAtom
name|concatAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|arg1
decl_stmt|;
name|StringFunctionAtom
name|arg2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|CONCAT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|arg1
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|arg2
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|ConcatAtom
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|UpperCaseAtom
name|upperCaseAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|arg
decl_stmt|;
name|jj_consume_token
argument_list|(
name|UPPERCASE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|arg
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|UpperCaseAtom
argument_list|(
name|arg
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|LowerCaseAtom
name|lowerCaseAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|arg
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LOWERCASE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|arg
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|LowerCaseAtom
argument_list|(
name|arg
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SubstringAtom
name|substringAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|arg
decl_stmt|;
name|NumericFunctionAtom
name|start
decl_stmt|;
name|NumericFunctionAtom
name|length
decl_stmt|;
name|jj_consume_token
argument_list|(
name|SUBSTRING
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|arg
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|start
operator|=
name|numericFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|length
operator|=
name|numericFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SubstringAtom
argument_list|(
name|arg
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|NumericFunctionAtom
name|numericFunctionAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|NumericFunctionAtom
name|numericFunctionAtom
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
name|numericFunctionAtom
operator|=
name|sumAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|MINUS
case|:
name|numericFunctionAtom
operator|=
name|subtractionAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|LENGTH
case|:
name|numericFunctionAtom
operator|=
name|lengthAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|NUM
case|:
case|case
name|VARIABLE
case|:
name|numericFunctionAtom
operator|=
name|numberAtom
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|numericFunctionAtom
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|LengthAtom
name|lengthAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|stringFunctionAtom
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LENGTH
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|stringFunctionAtom
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|LengthAtom
argument_list|(
name|stringFunctionAtom
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SumAtom
name|sumAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|NumericFunctionAtom
name|numericFunctionAtom1
decl_stmt|;
name|NumericFunctionAtom
name|numericFunctionAtom2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|numericFunctionAtom1
operator|=
name|numericFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|numericFunctionAtom2
operator|=
name|numericFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SumAtom
argument_list|(
name|numericFunctionAtom1
argument_list|,
name|numericFunctionAtom2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SubtractionAtom
name|subtractionAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|NumericFunctionAtom
name|numericFunctionAtom1
decl_stmt|;
name|NumericFunctionAtom
name|numericFunctionAtom2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|numericFunctionAtom1
operator|=
name|numericFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|numericFunctionAtom2
operator|=
name|numericFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SubtractionAtom
argument_list|(
name|numericFunctionAtom1
argument_list|,
name|numericFunctionAtom2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|NumericFunctionAtom
name|numberAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NUM
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|NUM
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARIABLE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|VARIABLE
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|NumberAtom
argument_list|(
name|t
operator|.
name|image
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ClassAtom
name|classAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri1
decl_stmt|;
name|URIResource
name|uri2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|IS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uri1
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|uri2
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|ClassAtom
argument_list|(
name|uri1
argument_list|,
name|uri2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|NewNodeAtom
name|newNodeAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|arg1
decl_stmt|;
name|Object
name|arg2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|NEW_NODE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|arg1
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|arg2
operator|=
name|dObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|NewNodeAtom
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|LetAtom
name|letAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri1
decl_stmt|;
name|StringFunctionAtom
name|fun
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LET
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uri1
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|fun
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|LetAtom
argument_list|(
name|uri1
argument_list|,
name|fun
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|IndividualPropertyAtom
name|individualPropertyAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri1
decl_stmt|;
name|URIResource
name|uri2
decl_stmt|;
name|URIResource
name|uri3
decl_stmt|;
name|jj_consume_token
argument_list|(
name|HAS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uri1
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|uri2
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|uri3
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|IndividualPropertyAtom
argument_list|(
name|uri1
argument_list|,
name|uri2
argument_list|,
name|uri3
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DatavaluedPropertyAtom
name|datavaluedPropertyAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri1
decl_stmt|;
name|URIResource
name|uri2
decl_stmt|;
name|Object
name|obj
decl_stmt|;
name|jj_consume_token
argument_list|(
name|VALUES
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uri1
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|uri2
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|obj
operator|=
name|dObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|DatavaluedPropertyAtom
argument_list|(
name|uri1
argument_list|,
name|uri2
argument_list|,
name|obj
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SameAtom
name|sameAsAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|stringFunctionAtom1
decl_stmt|;
name|StringFunctionAtom
name|stringFunctionAtom2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|SAME
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|stringFunctionAtom1
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|stringFunctionAtom2
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SameAtom
argument_list|(
name|stringFunctionAtom1
argument_list|,
name|stringFunctionAtom2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|LessThanAtom
name|lessThanAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|Object
name|obj1
decl_stmt|;
name|Object
name|obj2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LESSTHAN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|obj1
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|obj2
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|LessThanAtom
argument_list|(
name|obj1
argument_list|,
name|obj2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|GreaterThanAtom
name|greaterThanAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|Object
name|obj1
decl_stmt|;
name|Object
name|obj2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|GREATERTHAN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|obj1
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|obj2
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|GreaterThanAtom
argument_list|(
name|obj1
argument_list|,
name|obj2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DifferentAtom
name|differentFromAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|StringFunctionAtom
name|stringFunctionAtom1
decl_stmt|;
name|StringFunctionAtom
name|stringFunctionAtom2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DIFFERENT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|stringFunctionAtom1
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|stringFunctionAtom2
operator|=
name|stringFunctionAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|DifferentAtom
argument_list|(
name|stringFunctionAtom1
argument_list|,
name|stringFunctionAtom2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|URIResource
name|reference
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|uri1
decl_stmt|;
name|Token
name|colon
decl_stmt|;
name|String
name|uri3
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|URI
case|:
name|uri1
operator|=
name|getURI
argument_list|()
expr_stmt|;
name|uri1
operator|=
name|uri1
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|uri1
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSResource
argument_list|(
operator|new
name|URI
argument_list|(
name|uri1
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|VAR
case|:
name|uri1
operator|=
name|getVariable
argument_list|()
expr_stmt|;
name|colon
operator|=
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|uri3
operator|=
name|getVariable
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSResource
argument_list|(
name|getSWRLArgument
argument_list|(
name|uri1
operator|+
name|colon
operator|.
name|image
operator|+
name|uri3
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|URIResource
name|varReference
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|uri1
decl_stmt|;
name|Token
name|colon
decl_stmt|;
name|String
name|uri3
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|URI
case|:
name|uri1
operator|=
name|getURI
argument_list|()
expr_stmt|;
try|try
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSResource
argument_list|(
operator|new
name|URI
argument_list|(
name|uri1
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|VAR
case|:
name|uri1
operator|=
name|getVariable
argument_list|()
expr_stmt|;
name|colon
operator|=
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|uri3
operator|=
name|getVariable
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSResource
argument_list|(
name|getSWRLArgument
argument_list|(
name|uri1
operator|+
name|colon
operator|.
name|image
operator|+
name|uri3
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|getURI
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|URI
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
operator|.
name|image
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|getVariable
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|VAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
operator|.
name|image
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|getString
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
operator|.
name|image
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Integer
name|getInt
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|NUM
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|t
operator|.
name|image
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Object
name|uObject
parameter_list|()
throws|throws
name|ParseException
block|{
name|Object
name|obj
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOTEX
case|:
case|case
name|VARIABLE
case|:
case|case
name|BNODE
case|:
name|obj
operator|=
name|variable
argument_list|()
expr_stmt|;
break|break;
case|case
name|VAR
case|:
case|case
name|URI
case|:
name|obj
operator|=
name|reference
argument_list|()
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|obj
operator|=
name|getString
argument_list|()
expr_stmt|;
break|break;
case|case
name|NUM
case|:
name|obj
operator|=
name|getInt
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|obj
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|URIResource
name|iObject
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uri
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOTEX
case|:
case|case
name|VARIABLE
case|:
case|case
name|BNODE
case|:
name|uri
operator|=
name|variable
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|uri
return|;
block|}
break|break;
case|case
name|VAR
case|:
case|case
name|URI
case|:
name|uri
operator|=
name|reference
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|uri
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Object
name|dObject
parameter_list|()
throws|throws
name|ParseException
block|{
name|Object
name|variable
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NUM
case|:
case|case
name|STRING
case|:
name|variable
operator|=
name|literal
argument_list|()
expr_stmt|;
break|break;
case|case
name|NOTEX
case|:
case|case
name|VARIABLE
case|:
case|case
name|BNODE
case|:
name|variable
operator|=
name|variable
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|variable
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Object
name|literal
parameter_list|()
throws|throws
name|ParseException
block|{
name|Object
name|literal
decl_stmt|;
name|URIResource
name|typedLiteral
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STRING
case|:
name|literal
operator|=
name|getString
argument_list|()
expr_stmt|;
name|typedLiteral
operator|=
name|typedLiteral
argument_list|()
expr_stmt|;
break|break;
case|case
name|NUM
case|:
name|literal
operator|=
name|getInt
argument_list|()
expr_stmt|;
name|typedLiteral
operator|=
name|typedLiteral
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
if|if
condition|(
name|typedLiteral
operator|!=
literal|null
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSTypedLiteral
argument_list|(
name|literal
argument_list|,
name|typedLiteral
argument_list|)
return|;
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|literal
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|URIResource
name|typedLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|type
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|APOX
case|:
name|jj_consume_token
argument_list|(
name|APOX
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|APOX
argument_list|)
expr_stmt|;
name|type
operator|=
name|reference
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|type
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|URIResource
name|variable
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|String
name|var
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOTEX
case|:
name|jj_consume_token
argument_list|(
name|NOTEX
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|VARIABLE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
name|var
operator|=
name|t
operator|.
name|image
expr_stmt|;
name|var
operator|=
name|kReSKB
operator|.
name|getPrefixURI
argument_list|(
literal|"var"
argument_list|)
operator|+
name|var
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSVariable
argument_list|(
operator|new
name|URI
argument_list|(
name|var
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
block|}
break|break;
case|case
name|VARIABLE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|VARIABLE
argument_list|)
expr_stmt|;
name|var
operator|=
name|t
operator|.
name|image
expr_stmt|;
name|var
operator|=
name|kReSKB
operator|.
name|getPrefixURI
argument_list|(
literal|"var"
argument_list|)
operator|+
name|var
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSVariable
argument_list|(
operator|new
name|URI
argument_list|(
name|var
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
block|}
break|break;
case|case
name|BNODE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|BNODE
argument_list|)
expr_stmt|;
name|var
operator|=
name|t
operator|.
name|image
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|KReSBlankNode
argument_list|(
name|var
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ComparisonAtom
name|notAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|ComparisonAtom
name|comparisonAtom
decl_stmt|;
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|comparisonAtom
operator|=
name|comparisonAtom
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|NotAtom
argument_list|(
name|comparisonAtom
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ComparisonAtom
name|isBlankAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|URIResource
name|uriRes
decl_stmt|;
name|jj_consume_token
argument_list|(
name|IS_BLANK
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAR
argument_list|)
expr_stmt|;
name|uriRes
operator|=
name|iObject
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|IsBlankAtom
argument_list|(
name|uriRes
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ComparisonAtom
name|comparisonAtom
parameter_list|()
throws|throws
name|ParseException
block|{
name|ComparisonAtom
name|comparisonAtom
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SAME
case|:
name|comparisonAtom
operator|=
name|sameAsAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|LESSTHAN
case|:
name|comparisonAtom
operator|=
name|lessThanAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|GREATERTHAN
case|:
name|comparisonAtom
operator|=
name|greaterThanAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|DIFFERENT
case|:
name|comparisonAtom
operator|=
name|differentFromAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|comparisonAtom
operator|=
name|notAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|STARTS_WITH
case|:
name|comparisonAtom
operator|=
name|startsWithAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|ENDS_WITH
case|:
name|comparisonAtom
operator|=
name|endsWithAtom
argument_list|()
expr_stmt|;
break|break;
case|case
name|IS_BLANK
case|:
name|comparisonAtom
operator|=
name|isBlankAtom
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|comparisonAtom
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/** Generated Token Manager. */
specifier|public
name|KReSRuleParserTokenManager
name|token_source
decl_stmt|;
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
comment|/** Current token. */
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
specifier|public
name|Token
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|19
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
name|jj_la1_init_1
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x100
block|,
literal|0x80
block|,
literal|0x400
block|,
literal|0x46e1f820
block|,
literal|0x46e1f800
block|,
literal|0x100
block|,
literal|0x46e1f800
block|,
literal|0x891c0000
block|,
literal|0x30020000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000000
block|,
literal|0x8000000
block|,
literal|0x8000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000000
block|,
literal|0x40607800
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x4000
block|,
literal|0x20400
block|,
literal|0x2e8
block|,
literal|0x208
block|,
literal|0x0
block|,
literal|0x208
block|,
literal|0x5f0113
block|,
literal|0x50000
block|,
literal|0x50000
block|,
literal|0xa0000
block|,
literal|0xa0000
block|,
literal|0x5f0000
block|,
literal|0x4e0000
block|,
literal|0x550000
block|,
literal|0x110000
block|,
literal|0x4
block|,
literal|0x440000
block|,
literal|0x200
block|,}
expr_stmt|;
block|}
comment|/** Constructor with InputStream. */
specifier|public
name|KReSRuleParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor with InputStream and supplied encoding */
specifier|public
name|KReSRuleParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|KReSRuleParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Constructor. */
specifier|public
name|KReSRuleParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|KReSRuleParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
specifier|public
name|KReSRuleParser
parameter_list|(
name|KReSRuleParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|KReSRuleParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
comment|/** Get the next Token. */
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Generate ParseException. */
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|55
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|55
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
comment|/** Disable tracing. */
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
block|}
end_class

end_unit

