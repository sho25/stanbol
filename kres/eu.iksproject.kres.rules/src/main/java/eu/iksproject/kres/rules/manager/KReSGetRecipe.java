begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDeclarationAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  */
end_comment

begin_class
specifier|public
class|class
name|KReSGetRecipe
block|{
specifier|private
name|OWLOntology
name|owlmodel
decl_stmt|;
specifier|private
name|String
name|owlID
decl_stmt|;
specifier|private
name|String
name|owlIDrmi
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|private
name|OWLDataFactory
name|factory
decl_stmt|;
comment|/**     * Constructor, the input is a KReSRuleStore object.     *     * @param store {The KReSRuleStore where there are the added rules and recipes.}     */
specifier|public
name|KReSGetRecipe
parameter_list|(
name|RuleStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|owlmodel
operator|=
name|store
operator|.
name|getOntology
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"#"
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method returns the IRI of the named recipe with its sequence string      *      * @param recipename {It is the string name of the recipe}      * @return {Return an HashMap with the IRI as a key and the sequence of rules as value.}      */
specifier|public
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|getRecipe
parameter_list|(
name|String
name|recipename
parameter_list|)
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|recipe
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|indrecipe
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|recipename
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|indrecipe
argument_list|)
argument_list|)
condition|)
block|{
name|OWLDataProperty
name|prop
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|value
init|=
name|indrecipe
operator|.
name|getDataPropertyValues
argument_list|(
name|prop
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|recipe
operator|.
name|put
argument_list|(
name|indrecipe
operator|.
name|getIRI
argument_list|()
argument_list|,
name|value
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recipe
operator|.
name|put
argument_list|(
name|indrecipe
operator|.
name|getIRI
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipename
operator|+
literal|" doesn't exist."
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
name|recipe
return|;
block|}
comment|/**      * This method returns the IRI of the named recipe with its sequence string      *      * @param recipename {It is the IRI name of the recipe}      * @return {Return an HashMap with the IRI as a key and the sequence of rules as value.}      */
specifier|public
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|getRecipe
parameter_list|(
name|IRI
name|recipename
parameter_list|)
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|recipe
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|indrecipe
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipename
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|indrecipe
argument_list|)
argument_list|)
condition|)
block|{
name|OWLDataProperty
name|prop
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|value
init|=
name|indrecipe
operator|.
name|getDataPropertyValues
argument_list|(
name|prop
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|recipe
operator|.
name|put
argument_list|(
name|indrecipe
operator|.
name|getIRI
argument_list|()
argument_list|,
name|value
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recipe
operator|.
name|put
argument_list|(
name|indrecipe
operator|.
name|getIRI
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipename
operator|+
literal|" doesn't exist."
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
name|recipe
return|;
block|}
comment|/**      * This methods returns all the recipes with their sequence stored inside the ontology      *      * @return {Return an HashMap with the IRI as a key and the sequence of rules value.}      */
specifier|public
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|getAllRecipes
parameter_list|()
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|recipe
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|OWLDataProperty
name|prop
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|indaxiom
init|=
name|owlmodel
operator|.
name|getIndividualsInSignature
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|indaxiom
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLNamedIndividual
name|ax
init|=
name|indaxiom
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|value
init|=
name|ax
operator|.
name|getDataPropertyValues
argument_list|(
name|prop
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|recipe
operator|.
name|put
argument_list|(
name|ax
operator|.
name|getIRI
argument_list|()
argument_list|,
name|value
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|recipe
operator|)
return|;
block|}
comment|/**      * This methods returns all the recipes with their sequence stored inside the ontology      *      * @return {Return an HashMap with the IRI as a key and the sequence of rules value.}      */
specifier|public
name|Vector
argument_list|<
name|IRI
argument_list|>
name|getGeneralRecipes
parameter_list|()
block|{
name|Vector
argument_list|<
name|IRI
argument_list|>
name|recipe
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|OWLClass
name|recipeclas
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OWLIndividual
argument_list|>
name|indaxiom
init|=
name|recipeclas
operator|.
name|getIndividuals
argument_list|(
name|owlmodel
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|indaxiom
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLIndividual
name|axind
init|=
name|indaxiom
operator|.
name|next
argument_list|()
decl_stmt|;
name|recipe
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|axind
operator|.
name|toStringID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|recipe
operator|)
return|;
block|}
comment|/**      * This methods returns a map contains the count of the seuqnce compound of two rule      *      * @return {Return an HashMap with the IRI as a key and the sequence of rules value.}      */
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getBinSequenceRecipeCount
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|recipe
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getAllRecipes
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|IRI
argument_list|>
name|keys
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IRI
name|iri
init|=
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|sequence
init|=
name|map
operator|.
name|get
argument_list|(
name|iri
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|bin
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequence
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|bin
operator|=
name|sequence
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|" precedes "
operator|+
name|sequence
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|recipe
operator|.
name|containsKey
argument_list|(
name|bin
argument_list|)
condition|)
block|{
name|recipe
operator|.
name|put
argument_list|(
name|bin
argument_list|,
name|recipe
operator|.
name|get
argument_list|(
name|bin
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recipe
operator|.
name|put
argument_list|(
name|bin
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|recipe
operator|)
return|;
block|}
comment|/**      * To get the description of a recipe      * @param recipeName {A IRI contains the full recipe name}      * @return {A string contains the description}      */
specifier|public
name|String
name|getDescription
parameter_list|(
name|IRI
name|recipeName
parameter_list|)
block|{
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|lit
init|=
name|ontoind
operator|.
name|getDataPropertyValues
argument_list|(
name|description
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|string
init|=
name|lit
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|string
operator|!=
literal|null
condition|)
return|return
name|string
return|;
else|else
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * To get the description of a recipe      * @param recipeName {A string contains the recipe name}      * @return {A string contains the description}      */
specifier|public
name|String
name|getDescription
parameter_list|(
name|String
name|recipeName
parameter_list|)
block|{
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|recipeName
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|lit
init|=
name|ontoind
operator|.
name|getDataPropertyValues
argument_list|(
name|description
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|string
init|=
name|lit
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|string
operator|!=
literal|null
condition|)
return|return
name|string
return|;
else|else
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

