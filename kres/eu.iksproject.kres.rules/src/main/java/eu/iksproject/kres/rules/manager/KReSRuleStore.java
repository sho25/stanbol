begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|KReSONManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|KReSRule
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|util
operator|.
name|KReSRuleList
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|semion
operator|.
name|util
operator|.
name|RecipeList
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|KReSKB
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|parser
operator|.
name|KReSRuleParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLEntityRemover
import|;
end_import

begin_comment
comment|/**  * This class creates an OWLOntology object where to store rules and recipes.  *   * @author elvio  * @author andrea.nuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|RuleStore
operator|.
name|class
argument_list|)
specifier|public
class|class
name|KReSRuleStore
implements|implements
name|RuleStore
block|{
annotation|@
name|Reference
name|KReSONManager
name|onManager
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|""
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RULE_ONTOLOGY
init|=
literal|"rule.ontology"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RULE_ONTOLOGY_NAMESPACE
init|=
literal|"rule.ontology.namespace"
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KReSRuleStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|OWLOntology
name|owlmodel
decl_stmt|;
specifier|private
name|String
name|file
decl_stmt|;
specifier|private
name|String
name|alias
decl_stmt|;
specifier|private
name|RuleStore
name|ruleStore
decl_stmt|;
specifier|private
name|File
name|owlfile
decl_stmt|;
specifier|private
name|String
name|ruleOntologyNS
decl_stmt|;
specifier|private
name|KReSRuleParser
name|kReSRuleParser
decl_stmt|;
comment|/** 	 * This construct returns KReSRuleStore object with inside an ontology where 	 * to store the rules. 	 *  	 */
specifier|public
name|KReSRuleStore
parameter_list|()
block|{
comment|/* 		 * The constructor should be empty as some issue derives from a filled 		 * one. The old version can be invoked with KReSRuleStore(null) 		 */
block|}
comment|/** 	 * This construct returns an ontology where to store the rules. 	 *  	 * @param filepath 	 *            {Ontology file path previously stored.} 	 */
specifier|public
name|KReSRuleStore
parameter_list|(
name|String
name|filepath
parameter_list|)
block|{
if|if
condition|(
name|filepath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Properties
name|configProps
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|userdir
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
decl_stmt|;
name|String
name|respath
init|=
literal|"src/main/resources/"
decl_stmt|;
name|userdir
operator|=
name|userdir
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userdir
operator|.
name|lastIndexOf
argument_list|(
literal|"kres."
argument_list|)
operator|+
literal|5
argument_list|)
operator|+
literal|"rules/"
expr_stmt|;
name|String
name|filepath2
init|=
literal|"RuleOntology/rmi_config.owl"
decl_stmt|;
name|this
operator|.
name|file
operator|=
name|userdir
operator|+
name|respath
operator|+
name|filepath2
expr_stmt|;
name|this
operator|.
name|owlfile
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|owlmanager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|owlfile
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmodel
operator|=
name|owlmanager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|owlfile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|io
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|io
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmodel
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|file
operator|=
name|filepath
expr_stmt|;
name|this
operator|.
name|owlfile
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|owlfile
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|owlmanager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|owlmodel
operator|=
name|owlmanager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|owlfile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|oce
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|oce
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|oce
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmodel
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * This construct returns an ontology where to store the rules. 	 *  	 * @param owl 	 *            {OWLOntology object contains rules and recipe} 	 */
specifier|public
name|KReSRuleStore
parameter_list|(
name|OWLOntology
name|owl
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|owlmodel
operator|=
name|owl
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmodel
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** 	 * Get the owl ontology model. 	 *  	 * @return {An OWLOntology object where to store the rules and the recipes.} 	 */
annotation|@
name|Override
specifier|public
name|OWLOntology
name|getOntology
parameter_list|()
block|{
return|return
name|this
operator|.
name|owlmodel
return|;
block|}
comment|/** 	 * To set new OWLOntology with stored rules and recipes. 	 *  	 * @param owl 	 *            {OWLOntology with new changes.} 	 */
annotation|@
name|Override
specifier|public
name|void
name|setStore
parameter_list|(
name|OWLOntology
name|owl
parameter_list|)
block|{
name|this
operator|.
name|owlmodel
operator|=
name|owl
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Activated KReS Rule Store"
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|RULE_ONTOLOGY
argument_list|)
expr_stmt|;
name|this
operator|.
name|ruleOntologyNS
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|RULE_ONTOLOGY_NAMESPACE
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
operator|||
name|file
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// InputStream ontologyStream =
comment|// this.getClass().getResourceAsStream("/META-INF/conf/KReSOntologyRules.owl");
name|IRI
name|inputontology
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://ontologydesignpatterns.org/ont/iks/kres/rmi_config.owl"
argument_list|)
decl_stmt|;
comment|// if (inputontology == null) {
comment|// log.err("Input ontology is null");
comment|// }
try|try
block|{
name|owlmodel
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|inputontology
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot create the ontology "
operator|+
name|inputontology
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Rule Store: no rule ontology available."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|owlmodel
operator|!=
literal|null
condition|)
block|{
name|File
name|dirs
init|=
operator|new
name|File
argument_list|(
literal|"./KReSConf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirs
operator|.
name|exists
argument_list|()
condition|)
name|dirs
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|file
operator|=
literal|"./KReSConf/rmi_config.owl"
expr_stmt|;
name|FileOutputStream
name|fos
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|saveOntology
argument_list|(
name|owlmodel
argument_list|,
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyFormat
argument_list|(
name|owlmodel
argument_list|)
argument_list|,
name|fos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot save the RMI configuration ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot save the RMI configuration ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|IRI
name|pathIri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|owlmodel
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|pathIri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load the RMI configuration ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Rule Store: no rule ontology available."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deactivated KReS Rule Store"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|IRI
argument_list|>
name|listIRIRecipes
parameter_list|()
block|{
name|Set
argument_list|<
name|IRI
argument_list|>
name|recipeIRIs
init|=
literal|null
decl_stmt|;
name|String
name|ruleNS
init|=
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"#"
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|onManager
operator|.
name|getOwlFactory
argument_list|()
decl_stmt|;
name|OWLClass
name|recipeOWLClass
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ruleNS
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|recipeIndividuals
init|=
name|recipeOWLClass
operator|.
name|getIndividuals
argument_list|(
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
name|recipeIndividuals
operator|!=
literal|null
operator|&&
name|recipeIndividuals
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|recipeIRIs
operator|=
operator|new
name|HashSet
argument_list|<
name|IRI
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|OWLIndividual
name|recipeIndividual
range|:
name|recipeIndividuals
control|)
block|{
if|if
condition|(
name|recipeIndividual
operator|instanceof
name|OWLNamedIndividual
condition|)
block|{
name|recipeIRIs
operator|.
name|add
argument_list|(
operator|(
operator|(
name|OWLNamedIndividual
operator|)
name|recipeIndividual
operator|)
operator|.
name|getIRI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|recipeIRIs
return|;
block|}
annotation|@
name|Override
specifier|public
name|Recipe
name|getRecipe
parameter_list|(
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|NoSuchRecipeException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Called get recipe for id: "
operator|+
name|recipeIRI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Recipe
name|recipe
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|onManager
operator|!=
literal|null
operator|&&
name|recipeIRI
operator|!=
literal|null
condition|)
block|{
name|OWLDataFactory
name|factory
init|=
name|onManager
operator|.
name|getOwlFactory
argument_list|()
decl_stmt|;
name|OWLIndividual
name|recipeIndividual
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeIRI
argument_list|)
decl_stmt|;
if|if
condition|(
name|recipeIndividual
operator|!=
literal|null
condition|)
block|{
comment|// String ruleNS =
comment|// owlmodel.getOntologyID().toString().replace("<","").replace(">","")+"#";
comment|// OWLObjectProperty objectProperty =
comment|// factory.getOWLObjectProperty(IRI.create(ruleNS + "hasRule"));
name|String
name|ruleNS
init|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
decl_stmt|;
comment|/** 				 * First get the recipe description in the rule/recipe ontology. 				 */
name|OWLDataProperty
name|hasDescription
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ruleNS
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|recipeDescription
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|descriptions
init|=
name|recipeIndividual
operator|.
name|getDataPropertyValues
argument_list|(
name|hasDescription
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
for|for
control|(
name|OWLLiteral
name|description
range|:
name|descriptions
control|)
block|{
name|recipeDescription
operator|=
name|description
operator|.
name|getLiteral
argument_list|()
expr_stmt|;
block|}
comment|/** 				 * Then retrieve the rules associated to the recipe in the rule 				 * store. 				 */
name|OWLObjectProperty
name|objectProperty
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ruleNS
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|rules
init|=
name|recipeIndividual
operator|.
name|getObjectPropertyValues
argument_list|(
name|objectProperty
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
name|String
name|kReSRulesInKReSSyntax
init|=
literal|""
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"The recipe "
operator|+
name|recipeIRI
operator|.
name|toString
argument_list|()
operator|+
literal|" has "
operator|+
name|rules
operator|.
name|size
argument_list|()
operator|+
literal|" rules."
argument_list|)
expr_stmt|;
comment|/** 				 * Fetch the rule content expressed as a literal in KReSRule 				 * Syntax. 				 */
name|boolean
name|firstLoop
init|=
literal|true
decl_stmt|;
name|OWLDataProperty
name|hasBodyAndHead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ruleNS
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|OWLIndividual
name|rule
range|:
name|rules
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Getting rule : "
operator|+
name|rule
operator|.
name|toStringID
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|kReSRuleLiterals
init|=
name|rule
operator|.
name|getDataPropertyValues
argument_list|(
name|hasBodyAndHead
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|firstLoop
condition|)
block|{
name|kReSRulesInKReSSyntax
operator|+=
literal|" . "
expr_stmt|;
block|}
else|else
block|{
name|firstLoop
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|OWLLiteral
name|kReSRuleLiteral
range|:
name|kReSRuleLiterals
control|)
block|{
name|String
name|ruleTmp
init|=
name|kReSRuleLiteral
operator|.
name|getLiteral
argument_list|()
operator|.
name|replace
argument_list|(
literal|"&lt;"
argument_list|,
literal|"<"
argument_list|)
decl_stmt|;
name|ruleTmp
operator|=
name|ruleTmp
operator|.
name|replace
argument_list|(
literal|"&gt;"
argument_list|,
literal|">"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Rule is: "
operator|+
name|ruleTmp
argument_list|)
expr_stmt|;
name|kReSRulesInKReSSyntax
operator|+=
name|ruleTmp
expr_stmt|;
block|}
block|}
comment|/** 				 * Create the Recipe object. 				 */
name|log
operator|.
name|debug
argument_list|(
literal|"Recipe in KReS Syntax : "
operator|+
name|kReSRulesInKReSSyntax
argument_list|)
expr_stmt|;
name|KReSRuleList
name|ruleList
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|kReSRulesInKReSSyntax
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ruleList
operator|=
name|generateKnowledgeBase
argument_list|(
name|kReSRulesInKReSSyntax
argument_list|)
expr_stmt|;
block|}
name|recipe
operator|=
operator|new
name|RecipeImpl
argument_list|(
name|recipeIRI
argument_list|,
name|recipeDescription
argument_list|,
name|ruleList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchRecipeException
argument_list|(
name|recipeIRI
argument_list|)
throw|;
block|}
block|}
return|return
name|recipe
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecipeList
name|listRecipes
parameter_list|()
block|{
name|RecipeList
name|recipies
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|IRI
argument_list|>
name|recipeIRIs
init|=
name|listIRIRecipes
argument_list|()
decl_stmt|;
if|if
condition|(
name|recipeIRIs
operator|!=
literal|null
operator|&&
name|recipeIRIs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|recipies
operator|=
operator|new
name|RecipeList
argument_list|()
expr_stmt|;
for|for
control|(
name|IRI
name|recipeIRI
range|:
name|recipeIRIs
control|)
block|{
try|try
block|{
name|recipies
operator|.
name|add
argument_list|(
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Recipe missing: "
operator|+
name|recipeIRI
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|recipies
return|;
block|}
comment|/** 	 * To get the file path usde to load the ontology. 	 *  	 * @return {A string contains the complete file path.} 	 */
annotation|@
name|Override
specifier|public
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|this
operator|.
name|file
return|;
block|}
comment|/** 	 * To save some change to the ontology loaded in the store. 	 */
annotation|@
name|Override
specifier|public
name|void
name|saveOntology
parameter_list|()
block|{
try|try
block|{
name|FileOutputStream
name|fos
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|dirs
init|=
operator|new
name|File
argument_list|(
literal|"./KReSConf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirs
operator|.
name|exists
argument_list|()
condition|)
name|dirs
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|file
operator|=
literal|"./KReSConf/rmi_config.owl"
expr_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|saveOntology
argument_list|(
name|owlmodel
argument_list|,
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyFormat
argument_list|(
name|owlmodel
argument_list|)
argument_list|,
name|fos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot store the ontology "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot store the ontology "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|saveOntology
argument_list|(
name|owlmodel
argument_list|,
name|fos
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot store the ontology "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot store the ontology "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRuleStoreNamespace
parameter_list|()
block|{
return|return
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
operator|+
literal|"#"
return|;
block|}
comment|/* 	 * Moved form KReSAddRecipe class. The KReSAddRecipe should not be used 	 * anymore. 	 */
annotation|@
name|Override
specifier|public
name|boolean
name|addRecipe
parameter_list|(
name|IRI
name|recipeIRI
parameter_list|,
name|String
name|recipeDescription
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Adding recipe "
operator|+
name|recipeIRI
operator|+
literal|" ["
operator|+
name|recipeDescription
operator|+
literal|"]"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|owlmanager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|String
name|owlIDrmi
init|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeIRI
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
decl_stmt|;
if|if
condition|(
operator|(
name|recipeIRI
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|// Add the recipe istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|// Add description
if|if
condition|(
operator|(
name|recipeDescription
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|recipeDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|recipeDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The recipe with name "
operator|+
name|recipeIRI
operator|+
literal|" already exists. Please check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The recipe with name and the set of rules cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/** 	 *  	 * @param recipeIRI 	 *            the IRI of the recipe 	 * @param kReSRule 	 *            the rule in KReSRule syntax 	 */
annotation|@
name|Override
specifier|public
name|Recipe
name|addRuleToRecipe
parameter_list|(
name|String
name|recipeID
parameter_list|,
name|String
name|kReSRuleInKReSSyntax
parameter_list|)
throws|throws
name|NoSuchRecipeException
block|{
name|Recipe
name|recipe
init|=
name|getRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipeID
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addRuleToRecipe
argument_list|(
name|recipe
argument_list|,
name|kReSRuleInKReSSyntax
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param recipe 	 *            the recipe 	 * @param kReSRule 	 *            the rule in KReSRule syntax 	 *  	 * @return the recipe we the new rule. 	 */
annotation|@
name|Override
specifier|public
name|Recipe
name|addRuleToRecipe
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|String
name|kReSRuleInKReSSyntax
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding rule to recipe "
operator|+
name|recipe
argument_list|)
expr_stmt|;
comment|/** 		 * Get the OWLDataFactory. 		 */
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
comment|/** 		 * Add the rule to the recipe in the rule ontology managed by the 		 * RuleStore. First we define the object property hasRule and then we 		 * add the literal that contains the rule in KReSRule Syntax to the 		 * recipe individual. 		 */
name|String
name|ruleNS
init|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
decl_stmt|;
name|OWLObjectProperty
name|hasRule
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ruleNS
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|hasBodyAndHead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ruleNS
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
comment|/** 		 * The IRI of the recipe is fetched from the recipe object itself. From 		 * that IRI is obtained the recipe owl individual. 		 */
name|IRI
name|recipeIRI
init|=
name|recipe
operator|.
name|getRecipeID
argument_list|()
decl_stmt|;
name|OWLNamedIndividual
name|reipeIndividual
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeIRI
argument_list|)
decl_stmt|;
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
comment|/** 		 * Finally also the in-memory representation of the Recipe passed as 		 * input is modified. 		 */
name|KReSKB
name|kReSKB
init|=
name|KReSRuleParser
operator|.
name|parse
argument_list|(
name|kReSRuleInKReSSyntax
argument_list|)
decl_stmt|;
name|KReSRuleList
name|ruleList
init|=
name|kReSKB
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
for|for
control|(
name|KReSRule
name|rule
range|:
name|ruleList
control|)
block|{
comment|/** 			 * The rule must be added to the ontology, so 1. an IRI is created 			 * from its name 2. the KReS syntax is added to the rule as a 			 * literal through the hasBobyAndHe data property. 3. the rule is 			 * associated to the recipe by means of the hasRule object property, 			 * so that the triple<a_recipe hasRule a_rule> is added to the rule 			 * ontology. 			 *  			 */
name|IRI
name|ruleIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|ruleNS
operator|+
name|rule
operator|.
name|getRuleName
argument_list|()
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ruleIndividual
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|ruleIRI
argument_list|)
decl_stmt|;
name|OWLAxiom
name|hasBodyAndHeadAxiom
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|hasBodyAndHead
argument_list|,
name|ruleIndividual
argument_list|,
name|rule
operator|.
name|toKReSSyntax
argument_list|()
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|hasBodyAndHeadAxiom
argument_list|)
expr_stmt|;
name|OWLAxiom
name|hasRuleAxiom
init|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasRule
argument_list|,
name|reipeIndividual
argument_list|,
name|ruleIndividual
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|hasRuleAxiom
argument_list|)
expr_stmt|;
comment|/** 			 * The KReSRule is added to the Recipe in-memory object. 			 */
name|recipe
operator|.
name|addKReSRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
return|return
name|recipe
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createRecipe
parameter_list|(
name|String
name|recipeID
parameter_list|,
name|String
name|rulesInKReSSyntax
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Create recipe "
operator|+
name|recipeID
operator|+
literal|" with rules in kres sytnax "
operator|+
name|rulesInKReSSyntax
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|KReSKB
name|kb
init|=
name|KReSRuleParser
operator|.
name|parse
argument_list|(
name|rulesInKReSSyntax
argument_list|)
decl_stmt|;
name|KReSRuleList
name|rules
init|=
name|kb
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|KReSAddRule
name|addRule
init|=
operator|new
name|KReSAddRule
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|IRI
argument_list|>
name|ruleVectorIRIs
init|=
operator|new
name|Vector
argument_list|<
name|IRI
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Rules are "
operator|+
name|rules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|KReSRule
name|rule
range|:
name|rules
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating rule "
operator|+
name|rule
operator|.
name|getRuleName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|kReSSyntax
init|=
name|rule
operator|.
name|toKReSSyntax
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Rule in KReS Syntax : "
operator|+
name|kReSSyntax
argument_list|)
expr_stmt|;
name|addRule
operator|.
name|addRule
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
operator|.
name|getRuleName
argument_list|()
argument_list|)
argument_list|,
name|kReSSyntax
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ruleVectorIRIs
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
operator|.
name|getRuleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ruleVectorIRIs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding rules: "
operator|+
name|ruleVectorIRIs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KReSAddRecipe
name|addRecipe
init|=
operator|new
name|KReSAddRecipe
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|addRecipe
operator|.
name|addRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipeID
argument_list|)
argument_list|,
name|ruleVectorIRIs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|KReSRuleList
name|generateKnowledgeBase
parameter_list|(
name|String
name|kReSRulesInKReSSyntax
parameter_list|)
block|{
name|KReSKB
name|kb
init|=
name|KReSRuleParser
operator|.
name|parse
argument_list|(
name|kReSRulesInKReSSyntax
argument_list|)
decl_stmt|;
return|return
name|kb
operator|.
name|getkReSRuleList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRecipe
parameter_list|(
name|Recipe
name|recipe
parameter_list|)
block|{
name|OWLOntologyManager
name|mng
init|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mng
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
comment|//Create the remover to be used to delete the recipe from the ontology.
name|OWLEntityRemover
name|remover
init|=
operator|new
name|OWLEntityRemover
argument_list|(
name|mng
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|owlmodel
argument_list|)
argument_list|)
decl_stmt|;
comment|//Create the recipe axiom
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|)
decl_stmt|;
comment|//Remove the recipe
name|ontoind
operator|.
name|accept
argument_list|(
name|remover
argument_list|)
expr_stmt|;
name|mng
operator|.
name|applyChanges
argument_list|(
name|remover
operator|.
name|getChanges
argument_list|()
argument_list|)
expr_stmt|;
name|remover
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//Check if the recipe ahs been removed
if|if
condition|(
name|owlmodel
operator|.
name|containsIndividualInSignature
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRecipe
parameter_list|(
name|IRI
name|recipeIRI
parameter_list|)
block|{
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
return|return
name|removeRecipe
argument_list|(
name|recipe
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception cougth: "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRule
parameter_list|(
name|KReSRule
name|rule
parameter_list|)
block|{
name|OWLOntologyManager
name|mng
init|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mng
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|String
name|ruleNS
init|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
decl_stmt|;
comment|//Create the remover to be used to delete the rule from the ontology.
name|OWLEntityRemover
name|remover
init|=
operator|new
name|OWLEntityRemover
argument_list|(
name|mng
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|owlmodel
argument_list|)
argument_list|)
decl_stmt|;
comment|//Create the rule axiom
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
name|ruleNS
operator|+
name|rule
operator|.
name|getRuleName
argument_list|()
operator|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//Remove the rule
name|ontoind
operator|.
name|accept
argument_list|(
name|remover
argument_list|)
expr_stmt|;
name|mng
operator|.
name|applyChanges
argument_list|(
name|remover
operator|.
name|getChanges
argument_list|()
argument_list|)
expr_stmt|;
name|remover
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//Check if the recipe ahs been removed
if|if
condition|(
name|owlmodel
operator|.
name|containsIndividualInSignature
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
operator|(
name|ruleNS
operator|+
name|rule
operator|.
name|getRuleName
argument_list|()
operator|)
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

