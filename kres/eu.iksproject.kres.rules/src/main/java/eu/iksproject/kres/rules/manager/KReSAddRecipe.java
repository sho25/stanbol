begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  * This class will add new recipe to the KReSRuleStore used as input.<br/>  * The KReSRuleStore object used as input is not changed and to get the new modified KReSRuleStore there is the method getStore().<br/>  * If a recipe with a same name or IRI is already inside the KReSRuleStore an error is lunched and the process stopped.<br/>  *   */
end_comment

begin_class
specifier|public
class|class
name|KReSAddRecipe
block|{
specifier|private
name|OWLOntology
name|owlmodel
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|private
name|OWLDataFactory
name|factory
decl_stmt|;
specifier|private
name|String
name|owlIDrmi
decl_stmt|;
specifier|private
name|String
name|owlID
decl_stmt|;
specifier|private
name|RuleStore
name|storeaux
decl_stmt|;
comment|/**      * To create a list of imported ontlogy to be added as import declarations      *      * @param inowl {Input ontology where to get the import declarations}      * @return {A list of declarations}      */
specifier|private
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|createImportList
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|,
name|OWLOntology
name|toadd
parameter_list|)
block|{
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|importedonto
init|=
name|inowl
operator|.
name|getDirectImports
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|auxfactory
init|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedonto
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|importedonto
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxfactory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|OWLImportsDeclaration
argument_list|>
name|importedontob
init|=
name|inowl
operator|.
name|getImportsDeclarations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|additions
operator|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
expr_stmt|;
name|auxfactory
operator|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
while|while
condition|(
name|importedontob
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLImportsDeclaration
name|auxontob
init|=
name|importedontob
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxontob
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|additions
return|;
block|}
comment|/**      * To clone ontology with all its axioms and imports declaration      *      * @param inowl {The onotlogy to be cloned}      * @return {An ontology with the same characteristics}      */
specifier|private
name|void
name|cloneOntology
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|)
block|{
comment|//Clone the targetontology
try|try
block|{
name|this
operator|.
name|owlmodel
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|inowl
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
comment|//Add axioms
name|owlmanager
operator|.
name|addAxioms
argument_list|(
name|owlmodel
argument_list|,
name|inowl
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add import declaration
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|inowl
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Constructor, the input is a KReSRuleStore object.<br/>     * N.B. To get the new KReSRuleStore object there is the method getStore();<br/>     * @param store {The KReSRuleStore where to add the recipe.}     */
specifier|public
name|KReSAddRecipe
parameter_list|(
name|RuleStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|storeaux
operator|=
name|store
expr_stmt|;
comment|//cloneOntology(storeaux.getOntology());
name|this
operator|.
name|owlmanager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlmodel
operator|=
name|storeaux
operator|.
name|getOntology
argument_list|()
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"#"
expr_stmt|;
block|}
comment|/**     * Constructor, the input is a KReSRuleStore object and a string contains the base iri of the resource.<br/>     * N.B. To get the new KReSRuleStore object there is the method getStore();<br/>     * @param store {The KReSRuleStore where to add the recipe.}     * @param owlid {The base iri of resource}     */
specifier|public
name|KReSAddRecipe
parameter_list|(
name|RuleStore
name|store
parameter_list|,
name|String
name|owlid
parameter_list|)
block|{
name|this
operator|.
name|storeaux
operator|=
name|store
expr_stmt|;
name|cloneOntology
argument_list|(
name|storeaux
operator|.
name|getOntology
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlid
expr_stmt|;
block|}
comment|/**     * Method to add a Recipe. The inputs are: a recipe name string that doesn't exist in the ontology, a string vector with the IRI of each rule and eventualy a description of the recipe.     *     * @param recipeName {A string variable contains a name}     * @param rules {A string vector variable contains the IRI of each rule}     * @param recipeDescription {A briefly description of the rule}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRecipe
parameter_list|(
name|String
name|recipeName
parameter_list|,
name|Vector
argument_list|<
name|IRI
argument_list|>
name|rules
parameter_list|,
name|String
name|recipeDescription
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLClass
name|kresrule
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|recipeName
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|sequence
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|hasrule
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|start
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"startWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|end
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"endWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|precedes
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.ontologydesignpatterns.org/cp/owl/sequence.owl#directlyPrecedes"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|objectPropAssertion
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|recipeName
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeName
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|rules
operator|!=
literal|null
operator|)
operator|||
operator|!
name|rules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//start and end
name|OWLNamedIndividual
name|ind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|firstElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|start
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|end
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|//Add the sequence string
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|sequence
argument_list|,
name|ontoind
argument_list|,
name|rules
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
comment|//Add description
if|if
condition|(
operator|(
name|recipeDescription
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|recipeDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
comment|//Add single rule
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rules
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|r
operator|++
control|)
block|{
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
comment|//Add precedes
name|OWLNamedIndividual
name|indf
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|indf
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|precedes
argument_list|,
name|ind
argument_list|,
name|indf
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|indf
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
comment|//Add last element
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipeName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name and the set of rules cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a simple Recipe without rules. The inputs are: a recipe name string that doesn't exist in the ontology and eventualy a description of the recipe.     *     * @param recipeName {A string variable contains a name}     * @param recipeDescription {A briefly description of the rule}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addSimpleRecipe
parameter_list|(
name|String
name|recipeName
parameter_list|,
name|String
name|recipeDescription
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|recipeName
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
decl_stmt|;
if|if
condition|(
operator|(
name|recipeName
operator|!=
literal|null
operator|||
operator|!
name|recipeName
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//Add description
if|if
condition|(
operator|(
name|recipeDescription
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|recipeDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipeName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name and the set of rules cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a simple Recipe without rules. The inputs are: a recipe name string that doesn't exist in the ontology and eventualy a description of the recipe.     *     * @param recipeIRI {An IRI contains the full recipe name}     * @param recipeDescription {A briefly description of the rule}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addSimpleRecipe
parameter_list|(
name|IRI
name|recipeIRI
parameter_list|,
name|String
name|recipeDescription
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeIRI
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
decl_stmt|;
if|if
condition|(
operator|(
name|recipeIRI
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//Add description
if|if
condition|(
operator|(
name|recipeDescription
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|recipeDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipeIRI
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name and the set of rules cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a Recipe. The inputs are: a recipe name string that doesn't exist in the ontology, a string vector with the IRI of each rule and eventualy a description of the recipe.     *     * @param recipeName {An IRI variable contains the complete recipe name}     * @param rules {A string vector variable contains the IRI of each rule}     * @param recipeDescription {A briefly description of the rule}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRecipe
parameter_list|(
name|IRI
name|recipeName
parameter_list|,
name|Vector
argument_list|<
name|IRI
argument_list|>
name|rules
parameter_list|,
name|String
name|recipeDescription
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLClass
name|kresrule
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|sequence
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|hasrule
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|start
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"startWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|end
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"endWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|precedes
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.ontologydesignpatterns.org/cp/owl/sequence.owl#directlyPrecedes"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|objectPropAssertion
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|recipeName
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeName
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|rules
operator|!=
literal|null
operator|)
operator|||
operator|!
name|rules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//start and end
name|OWLNamedIndividual
name|ind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|firstElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|start
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|end
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|//Add the sequence string
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|sequence
argument_list|,
name|ontoind
argument_list|,
name|rules
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
comment|//Add description
if|if
condition|(
operator|(
name|recipeDescription
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|recipeDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
comment|//Add single rule
comment|/*               * BUGFIX - previously the check was done on rules.size()-1.              * The right code is rules.size(). Moreover is need also a control "if(r+1>(rules.size()-1)) break;" because the last rule has not successive rules.              *               */
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rules
operator|.
name|size
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
comment|//Add precedes
if|if
condition|(
name|r
operator|+
literal|1
operator|>
operator|(
name|rules
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
break|break;
name|OWLNamedIndividual
name|indf
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|indf
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|precedes
argument_list|,
name|ind
argument_list|,
name|indf
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|indf
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
comment|//Add last element
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipeName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name and the set of rules cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a Recipe. The inputs are two HashMap with the key the recipe name and the value is a vector of IRI contains the rule's sequence; the second map contains the description.     *     * @param recipeMap {An HashMap variable contains string recipe name as key and an IRI vector contains the rules of the sequence as value}     * @param recipeDescriptionMap {An HashMap variable contains string recipe name as key and the recipe's description as value}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRecipeMap
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Vector
argument_list|<
name|IRI
argument_list|>
argument_list|>
name|recipeMap
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|recipeDescriptionMap
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLClass
name|kresrule
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|sequence
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|hasrule
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|start
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"startWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|end
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"endWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|precedes
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.ontologydesignpatterns.org/cp/owl/sequence.owl#directlyPrecedes"
argument_list|)
argument_list|)
decl_stmt|;
name|Object
index|[]
name|keys
init|=
name|recipeMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|String
name|recipeDescription
init|=
literal|""
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|objectPropAssertion
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|keys
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|String
name|recipeName
init|=
operator|(
name|String
operator|)
name|keys
index|[
name|k
index|]
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|recipeName
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|IRI
argument_list|>
name|rules
init|=
name|recipeMap
operator|.
name|get
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|recipeDescriptionMap
operator|!=
literal|null
operator|)
condition|)
if|if
condition|(
operator|!
name|recipeDescriptionMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|recipeDescription
operator|=
name|recipeDescriptionMap
operator|.
name|get
argument_list|(
name|recipeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recipeDescription
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|recipeName
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeName
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|rules
operator|!=
literal|null
operator|)
operator|||
operator|!
name|rules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//start and end
name|OWLNamedIndividual
name|ind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|firstElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|start
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|end
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|//Add the sequence string
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|sequence
argument_list|,
name|ontoind
argument_list|,
name|rules
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
comment|//Add description
if|if
condition|(
operator|(
name|recipeDescription
operator|!=
literal|null
operator|)
condition|)
if|if
condition|(
operator|!
name|recipeDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|recipeDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
comment|//Add single rule
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rules
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|r
operator|++
control|)
block|{
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsIndividualInSignature
argument_list|(
name|ind
operator|.
name|getIRI
argument_list|()
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
comment|//Add precedes
name|OWLNamedIndividual
name|indf
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|indf
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|precedes
argument_list|,
name|ind
argument_list|,
name|indf
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|indf
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
comment|//Add last element
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipeName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name and the set of rules cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
if|if
condition|(
name|ok
condition|)
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a Recipe. The inputs are two HashMap with the key the recipe IRI name and the value is a vector IRI contains the rule's sequence; the second map contains the description.     *     * @param recipeMap {An HashMap variable contains the recipe IRI name as key and an IRI vector contains the rules of the sequence as value}     * @param recipeDescriptionMap {An HashMap variable contains the recipe IRI name as key and the recipe's description as value}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRecipeMapIRI
parameter_list|(
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|Vector
argument_list|<
name|IRI
argument_list|>
argument_list|>
name|recipeMap
parameter_list|,
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|recipeDescriptionMap
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLClass
name|kresrule
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|sequence
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|hasrule
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|start
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"startWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|end
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"endWith"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|precedes
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.ontologydesignpatterns.org/cp/owl/sequence.owl#directlyPrecedes"
argument_list|)
argument_list|)
decl_stmt|;
name|Object
index|[]
name|keys
init|=
name|recipeMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|String
name|recipeDescription
init|=
literal|""
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|objectPropAssertion
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|keys
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|IRI
name|recipeName
init|=
operator|(
name|IRI
operator|)
name|keys
index|[
name|k
index|]
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|IRI
argument_list|>
name|rules
init|=
name|recipeMap
operator|.
name|get
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|recipeDescriptionMap
operator|!=
literal|null
operator|)
condition|)
if|if
condition|(
operator|!
name|recipeDescriptionMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|recipeDescription
operator|=
name|recipeDescriptionMap
operator|.
name|get
argument_list|(
name|recipeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recipeDescription
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|recipeName
operator|!=
literal|null
operator|)
operator|||
operator|!
name|recipeName
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|rules
operator|!=
literal|null
operator|)
operator|||
operator|!
name|rules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//start and end
name|OWLNamedIndividual
name|ind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|firstElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|start
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|end
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|//Add the sequence string
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|sequence
argument_list|,
name|ontoind
argument_list|,
name|rules
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
comment|//Add description
if|if
condition|(
operator|(
name|recipeDescription
operator|!=
literal|null
operator|)
condition|)
if|if
condition|(
operator|!
name|recipeDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|recipeDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
comment|//Add single rule
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rules
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|r
operator|++
control|)
block|{
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsIndividualInSignature
argument_list|(
name|ind
operator|.
name|getIRI
argument_list|()
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
comment|//Add precedes
name|OWLNamedIndividual
name|indf
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|r
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|indf
argument_list|)
argument_list|)
condition|)
block|{
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|precedes
argument_list|,
name|ind
argument_list|,
name|indf
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|indf
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
comment|//Add last element
name|ind
operator|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rules
operator|.
name|lastElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|kresrule
argument_list|,
name|ind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule to the recipes
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|hasrule
argument_list|,
name|ontoind
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with IRI "
operator|+
name|ind
operator|.
name|getIRI
argument_list|()
operator|+
literal|" is not inside the ontology. Pleas check its IRI."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name "
operator|+
name|recipeName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The recipe with name and the set of rules cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
if|if
condition|(
name|ok
condition|)
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**      * Get the KReSRuleStore filled with rules and recipes     *      * @return {A KReSRuleStore object with the stored rules and recipes.}      */
specifier|public
name|RuleStore
name|getStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|storeaux
return|;
block|}
block|}
end_class

end_unit

