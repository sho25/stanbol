begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. KReSRuleParserConstants.java */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|parser
package|;
end_package

begin_comment
comment|/**  * Token literal values and constants.  * Generated by org.javacc.parser.OtherFilesGen#start()  */
end_comment

begin_interface
specifier|public
interface|interface
name|KReSRuleParserConstants
block|{
comment|/** End of File. */
name|int
name|EOF
init|=
literal|0
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LARROW
init|=
literal|5
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|COLON
init|=
literal|6
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|EQUAL
init|=
literal|7
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|AND
init|=
literal|8
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|COMMA
init|=
literal|9
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|SAME
init|=
literal|10
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|DIFFERENT
init|=
literal|11
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|IS
init|=
literal|12
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|HAS
init|=
literal|13
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|RANGE
init|=
literal|14
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|VALUES
init|=
literal|15
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LPAR
init|=
literal|16
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|RPAR
init|=
literal|17
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|DQUOT
init|=
literal|18
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LQUAD
init|=
literal|19
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|RQUAD
init|=
literal|20
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|NUM
init|=
literal|21
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|VAR
init|=
literal|22
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|VARIABLE
init|=
literal|23
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|URI
init|=
literal|24
decl_stmt|;
comment|/** Lexical state. */
name|int
name|DEFAULT
init|=
literal|0
decl_stmt|;
comment|/** Literal token values. */
name|String
index|[]
name|tokenImage
init|=
block|{
literal|"<EOF>"
block|,
literal|"\" \""
block|,
literal|"\"\\r\""
block|,
literal|"\"\\t\""
block|,
literal|"\"\\n\""
block|,
literal|"\"->\""
block|,
literal|"\":\""
block|,
literal|"\"=\""
block|,
literal|"\".\""
block|,
literal|"\",\""
block|,
literal|"\"same\""
block|,
literal|"\"different\""
block|,
literal|"\"is\""
block|,
literal|"\"has\""
block|,
literal|"\"range\""
block|,
literal|"\"values\""
block|,
literal|"\"(\""
block|,
literal|"\")\""
block|,
literal|"\"\\\"\""
block|,
literal|"\"[\""
block|,
literal|"\"]\""
block|,
literal|"<NUM>"
block|,
literal|"<VAR>"
block|,
literal|"<VARIABLE>"
block|,
literal|"<URI>"
block|,   }
decl_stmt|;
block|}
end_interface

end_unit

