begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|KReSRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|KReSRuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_comment
comment|/**  * The RecipeImpl is a concrete implementation of the Recipe interface.  * A Recipe is a collection identified by an URI of rules. Each rules of the recipe is also identified by an URI.  * Rules are expressed both in SWRL and in KReS rules syntax.  *   * @author andrea.nuzzolese  *  */
end_comment

begin_class
specifier|public
class|class
name|RecipeImpl
extends|extends
name|Observable
implements|implements
name|Recipe
block|{
specifier|private
name|IRI
name|recipeID
decl_stmt|;
specifier|private
name|String
name|recipeDescription
decl_stmt|;
specifier|private
name|KReSRuleList
name|kReSRuleList
decl_stmt|;
comment|/** 	 *  	 * Create a new {@code RecipeImpl} from a set of rule expressed in KReS rule syntax. 	 *  	 *  	 * @param recipeID 	 * @param recipeDescription 	 * @param kReSRuleList 	 */
specifier|public
name|RecipeImpl
parameter_list|(
name|IRI
name|recipeID
parameter_list|,
name|String
name|recipeDescription
parameter_list|,
name|KReSRuleList
name|kReSRuleList
parameter_list|)
block|{
name|this
operator|.
name|recipeID
operator|=
name|recipeID
expr_stmt|;
name|this
operator|.
name|recipeDescription
operator|=
name|recipeDescription
expr_stmt|;
name|this
operator|.
name|kReSRuleList
operator|=
name|kReSRuleList
expr_stmt|;
block|}
specifier|public
name|KReSRuleList
name|getkReSRuleList
parameter_list|()
block|{
return|return
name|kReSRuleList
return|;
block|}
specifier|public
name|IRI
name|getRecipeID
parameter_list|()
block|{
return|return
name|recipeID
return|;
block|}
specifier|public
name|String
name|getRecipeDescription
parameter_list|()
block|{
return|return
name|recipeDescription
return|;
block|}
specifier|public
name|Model
name|getRecipeAsRDFModel
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|KReSRule
name|getRule
parameter_list|(
name|String
name|ruleURI
parameter_list|)
block|{
comment|//return new SWRLToKReSRule(ruleModel).parse(ruleURI);
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getNSPrefixString
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsPrefix
init|=
name|model
operator|.
name|getNsPrefixMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|prefixSet
init|=
name|nsPrefix
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|prefixSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|sparqlPrefix
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|uri
init|=
name|nsPrefix
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|uri
operator|=
name|uri
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|sparqlPrefix
operator|+=
literal|"PREFIX "
operator|+
name|prefix
operator|+
literal|":<"
operator|+
operator|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|">"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sparqlPrefix
return|;
block|}
specifier|public
name|String
index|[]
name|toSPARQL
parameter_list|()
block|{
name|String
index|[]
name|sparqlStrings
init|=
operator|new
name|String
index|[
name|kReSRuleList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|sparqlStrings
index|[
name|i
index|]
operator|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|sparqlStrings
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRulesInKReSSyntax
parameter_list|()
block|{
name|String
name|kReSSyntax
init|=
literal|""
decl_stmt|;
name|boolean
name|firstLoop
init|=
literal|true
decl_stmt|;
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
if|if
condition|(
operator|!
name|firstLoop
condition|)
block|{
name|kReSSyntax
operator|+=
literal|" . "
expr_stmt|;
block|}
else|else
block|{
name|firstLoop
operator|=
literal|false
expr_stmt|;
block|}
name|kReSSyntax
operator|+=
name|kReSRule
operator|.
name|toKReSSyntax
argument_list|()
expr_stmt|;
block|}
return|return
name|kReSSyntax
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addKReSRule
parameter_list|(
name|KReSRule
name|kReSRule
parameter_list|)
block|{
if|if
condition|(
name|kReSRuleList
operator|==
literal|null
condition|)
block|{
name|kReSRuleList
operator|=
operator|new
name|KReSRuleList
argument_list|()
expr_stmt|;
block|}
name|kReSRuleList
operator|.
name|add
argument_list|(
name|kReSRule
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

