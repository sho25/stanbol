begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|ClerezzaOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owlapi
operator|.
name|trasformation
operator|.
name|JenaToOwlConvert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|api
operator|.
name|ConsistentRefactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|api
operator|.
name|InconcistencyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|api
operator|.
name|Reasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|util
operator|.
name|URIGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|impl
operator|.
name|RefactorerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_comment
comment|/**  * Default implementation of a {@link ConsistentRefactorer}.  *   * @author alessandro  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|ConsistentRefactorer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ConsistentRefactorerImpl
extends|extends
name|RefactorerImpl
implements|implements
name|ConsistentRefactorer
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
name|Reasoner
name|kReSReasoner
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the ConsistentRefactorerImpl instances do need to be      * configured! YOU NEED TO USE      * {@link #ConsistentRefactorerImpl(WeightedTcProvider, Serializer, TcManager, ONManager, SemionManager, RuleStore, Reasoner, Dictionary)}      * or its overloads, to parse the configuration and then initialise the rule store if running outside an      * OSGI environment.      */
specifier|public
name|ConsistentRefactorerImpl
parameter_list|()
block|{      }
comment|/**      * Basic constructor to be used if outside of an OSGi environment. Invokes default constructor.      *       * @param weightedTcProvider      * @param serializer      * @param tcManager      * @param onManager      * @param semionManager      * @param ruleStore      * @param kReSReasoner      * @param configuration      */
specifier|public
name|ConsistentRefactorerImpl
parameter_list|(
name|WeightedTcProvider
name|weightedTcProvider
parameter_list|,
name|Serializer
name|serializer
parameter_list|,
name|TcManager
name|tcManager
parameter_list|,
name|ONManager
name|onManager
parameter_list|,
name|RuleStore
name|ruleStore
parameter_list|,
name|Reasoner
name|kReSReasoner
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|weightedTcProvider
argument_list|,
name|serializer
argument_list|,
name|tcManager
argument_list|,
name|onManager
argument_list|,
name|ruleStore
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|kReSReasoner
operator|=
name|kReSReasoner
expr_stmt|;
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Nothing different to do wrt the superclass (may change if new parameters are given).
name|super
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|consistentOntologyRefactoring
parameter_list|(
name|IRI
name|refactoredOntologyIRI
parameter_list|,
name|IRI
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
throws|,
name|InconcistencyException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
name|ClerezzaOntologyStorage
name|ontologyStorage
init|=
name|onManager
operator|.
name|getOntologyStore
argument_list|()
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|RuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|String
name|fingerPrint
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Rule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|OWLOntology
name|refactoredDataSet
init|=
name|ontologyStorage
operator|.
name|sparqlConstruct
argument_list|(
name|sparql
argument_list|,
name|datasetURI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|refactoredDataSet
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|fpOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|fingerPrint
operator|+=
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|""
argument_list|,
name|fpOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to store refactored ontology in memory. Consistency checking cannot be performed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to reload refactored ontology. Consistency checking cannot be performed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|refactoredOntologyIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|"urn://"
argument_list|,
name|fingerPrint
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|ontologyManager
argument_list|)
decl_stmt|;
try|try
block|{
name|refactoredOntology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ontologyManager
argument_list|,
name|refactoredOntologyIRI
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kReSReasoner
operator|.
name|consistencyCheck
argument_list|(
name|kReSReasoner
operator|.
name|getReasoner
argument_list|(
name|refactoredOntology
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconcistencyException
argument_list|(
literal|"Semion Refactorer : the refactored data set seems to be inconsistent"
argument_list|)
throw|;
block|}
else|else
block|{
name|ontologyStorage
operator|.
name|store
argument_list|(
name|refactoredOntology
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to merge refactored ontology. Consistency checking cannot be performed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|consistentOntologyRefactoring
parameter_list|(
name|OWLOntology
name|inputOntology
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
throws|,
name|InconcistencyException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
name|JenaToOwlConvert
name|jenaToOwlConvert
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|jenaToOwlConvert
operator|.
name|ModelOwlToJenaConvert
argument_list|(
name|inputOntology
argument_list|,
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|RuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
for|for
control|(
name|Rule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|Query
name|sparqlQuery
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|sparql
argument_list|)
decl_stmt|;
name|QueryExecution
name|qexec
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|sparqlQuery
argument_list|,
name|ontModel
argument_list|)
decl_stmt|;
name|Model
name|refactoredModel
init|=
name|qexec
operator|.
name|execConstruct
argument_list|()
decl_stmt|;
name|OWLOntology
name|refactoredDataSet
init|=
name|jenaToOwlConvert
operator|.
name|ModelJenaToOwlConvert
argument_list|(
name|refactoredModel
argument_list|,
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|refactoredDataSet
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to store refactored ontology in memory. Consistency checking cannot be performed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to reload refactored ontology. Consistency checking cannot be performed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|ontologyManager
argument_list|)
decl_stmt|;
try|try
block|{
name|IRI
name|defaultOntologyIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iksproject.eu/semion/autoGeneratedOntology"
argument_list|)
decl_stmt|;
name|refactoredOntology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ontologyManager
argument_list|,
name|defaultOntologyIRI
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kReSReasoner
operator|.
name|consistencyCheck
argument_list|(
name|kReSReasoner
operator|.
name|getReasoner
argument_list|(
name|refactoredOntology
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconcistencyException
argument_list|(
literal|"Semion Refactorer : the refactored data set seems to be inconsistent"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to merge refactored ontology. Consistency checking cannot be performed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|refactoredOntology
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Here we also need to unset the reasoner.
name|this
operator|.
name|kReSReasoner
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

