begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|Refactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_comment
comment|/**  * A special {@link Refactorer} which includes methods for ensuring/checking consistency in refactored  * ontologies.  *   * @author alessandro  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|ConsistentRefactorer
extends|extends
name|Refactorer
block|{
comment|/**      * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetURI}      * is the {@link IRI} of an IKS ontology and the {@code recipe} is the recipe that needs to be applied to      * ontology in order to perform the refactoring. After the refactoring a consistency check is invoked on      * the data set.      *       * @param refactoredDataSetURI      *            {@link IRI}      * @param datasetURI      *            {@link IRI}      * @param recipeIRI      *            {@link IRI}      * @throws RefactoringException      * @throws NoSuchRecipeException      * @throws InconcistencyException      */
specifier|public
name|void
name|consistentOntologyRefactoring
parameter_list|(
name|IRI
name|refactoredOntologyIRI
parameter_list|,
name|IRI
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
throws|,
name|InconcistencyException
function_decl|;
comment|/**      * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetURI}      * is the URI of an RDF graph in KReS and the {@code recipe} is the recipe that needs to be applied to RDF      * graph in order to obtain the refactoring. After the refactoring a consistency check is invoked on the      * data set.      *       * @param datasetURI      *            {@link UriRef}      * @param recipe      *            {@link UriRef}      * @return the refactored {@link MGraph}      * @throws InconcistencyException      * @throws NoSuchRecipeException      * @throws RefactoringException      */
specifier|public
name|OWLOntology
name|consistentOntologyRefactoring
parameter_list|(
name|OWLOntology
name|inputOntology
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
throws|,
name|InconcistencyException
function_decl|;
block|}
end_interface

end_unit

