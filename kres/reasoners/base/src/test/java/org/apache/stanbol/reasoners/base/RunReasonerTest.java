begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
operator|.
name|CreateReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
operator|.
name|RunReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|HermiT
operator|.
name|Reasoner
operator|.
name|ReasonerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|OWLReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredOntologyGenerator
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  */
end_comment

begin_class
specifier|public
class|class
name|RunReasonerTest
block|{
specifier|public
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|public
name|OWLOntology
name|owl
decl_stmt|;
specifier|public
name|RunReasonerTest
parameter_list|()
throws|throws
name|OWLOntologyCreationException
block|{
name|this
operator|.
name|owlmanager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|owl
operator|=
name|owlmanager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|File
argument_list|(
literal|"./src/main/resources/TestFile/ProvaParent.owl"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{     }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{     }
comment|/**      * Test of runClassifyInference method, of class RunReasoner.      */
annotation|@
name|Test
specifier|public
name|void
name|testRunClassifyInference_arg0
parameter_list|()
throws|throws
name|OWLOntologyCreationException
block|{
name|OWLOntology
name|inf
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|owl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
decl_stmt|;
name|CreateReasoner
name|reasoner
init|=
operator|new
name|CreateReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|RunReasoner
name|instance
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasoner
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|inf
operator|=
name|instance
operator|.
name|runClassifyInference
argument_list|(
name|inf
argument_list|)
expr_stmt|;
name|CreateReasoner
name|reasonerforcheck
init|=
operator|new
name|CreateReasoner
argument_list|(
name|inf
argument_list|)
decl_stmt|;
name|RunReasoner
name|run
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasonerforcheck
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|":::::::::::::::: consistency check "
operator|+
name|run
operator|.
name|isConsistent
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ax
init|=
name|inf
operator|.
name|getAxiomCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|inf
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|ax
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur with runClassifyInference of KReSCreateReasoner."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test of runClassifyInference method, of class RunReasoner.      */
annotation|@
name|Test
specifier|public
name|void
name|testRunClassifyInference
parameter_list|()
throws|throws
name|OWLOntologyCreationException
block|{
name|int
name|contin
init|=
name|owl
operator|.
name|getAxiomCount
argument_list|()
decl_stmt|;
name|CreateReasoner
name|reasoner
init|=
operator|new
name|CreateReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|RunReasoner
name|instance
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasoner
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|owl
operator|=
name|instance
operator|.
name|runClassifyInference
argument_list|(
name|owl
argument_list|)
expr_stmt|;
name|CreateReasoner
name|reasonerforcheck
init|=
operator|new
name|CreateReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|RunReasoner
name|run
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasonerforcheck
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|":::::::::::::::: consistency check "
operator|+
name|run
operator|.
name|isConsistent
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ax
init|=
name|owl
operator|.
name|getAxiomCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|owl
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
name|ax
operator|>
name|contin
operator|)
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur with runClassifyInference of KReSCreateReasoner."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test of isConsistence method, of class RunReasoner.      */
annotation|@
name|Test
specifier|public
name|void
name|testIsConsistence
parameter_list|()
block|{
name|OWLReasoner
name|expris
init|=
operator|(
operator|new
name|ReasonerFactory
argument_list|()
operator|)
operator|.
name|createReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|expris
operator|.
name|prepareReasoner
argument_list|()
expr_stmt|;
name|CreateReasoner
name|reasoner
init|=
operator|new
name|CreateReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|RunReasoner
name|instance
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasoner
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|expResult
init|=
name|expris
operator|.
name|isConsistent
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|instance
operator|.
name|isConsistent
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|assertEquals
argument_list|(
name|expResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur with isConsistence of KReSCreateReasoner."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test of runGeneralInference method, of class RunReasoner.      */
annotation|@
name|Test
specifier|public
name|void
name|testRunGeneralInference_0args
parameter_list|()
block|{
name|CreateReasoner
name|reasoner
init|=
operator|new
name|CreateReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|RunReasoner
name|instance
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasoner
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|OWLOntology
name|result
init|=
name|instance
operator|.
name|runGeneralInference
argument_list|()
decl_stmt|;
name|CreateReasoner
name|reasonerforcheck
init|=
operator|new
name|CreateReasoner
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|RunReasoner
name|run
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasonerforcheck
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|":::::::::::::::: consistency check "
operator|+
name|run
operator|.
name|isConsistent
argument_list|()
argument_list|)
expr_stmt|;
name|OWLReasoner
name|expris
init|=
operator|(
operator|new
name|ReasonerFactory
argument_list|()
operator|)
operator|.
name|createReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|expris
operator|.
name|prepareReasoner
argument_list|()
expr_stmt|;
name|InferredOntologyGenerator
name|iogpellet
init|=
operator|new
name|InferredOntologyGenerator
argument_list|(
name|expris
argument_list|)
decl_stmt|;
name|iogpellet
operator|.
name|fillOntology
argument_list|(
name|owlmanager
argument_list|,
name|owl
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|setx
init|=
name|owl
operator|.
name|getAxioms
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLAxiom
argument_list|>
name|iter
init|=
name|setx
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLAxiom
name|axiom
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|axiom
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Equivalent"
argument_list|)
condition|)
block|{
name|owl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|removeAxiom
argument_list|(
name|owl
argument_list|,
name|axiom
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|owl
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur with RunGeneralInference of KReSCreateReasoner."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test of runGeneralInference method, of class RunReasoner.      */
annotation|@
name|Test
specifier|public
name|void
name|testRunGeneralInference_OWLOntology
parameter_list|()
throws|throws
name|OWLOntologyCreationException
block|{
name|OWLOntology
name|newmodel
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|owl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
decl_stmt|;
name|CreateReasoner
name|reasoner
init|=
operator|new
name|CreateReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|RunReasoner
name|instance
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasoner
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|OWLOntology
name|result
init|=
name|instance
operator|.
name|runGeneralInference
argument_list|(
name|newmodel
argument_list|)
decl_stmt|;
name|CreateReasoner
name|reasonerforcheck
init|=
operator|new
name|CreateReasoner
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|RunReasoner
name|run
init|=
operator|new
name|RunReasoner
argument_list|(
name|reasonerforcheck
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|":::::::::::::::: consistency check "
operator|+
name|run
operator|.
name|isConsistent
argument_list|()
argument_list|)
expr_stmt|;
name|OWLReasoner
name|expris
init|=
operator|(
operator|new
name|ReasonerFactory
argument_list|()
operator|)
operator|.
name|createReasoner
argument_list|(
name|owl
argument_list|)
decl_stmt|;
name|expris
operator|.
name|prepareReasoner
argument_list|()
expr_stmt|;
name|InferredOntologyGenerator
name|iogpellet
init|=
operator|new
name|InferredOntologyGenerator
argument_list|(
name|expris
argument_list|)
decl_stmt|;
name|iogpellet
operator|.
name|fillOntology
argument_list|(
name|owlmanager
argument_list|,
name|owl
argument_list|)
expr_stmt|;
name|OWLOntology
name|expResult
init|=
name|owl
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur with RunGeneralInference with new ontology of KReSCreateReasoner."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

