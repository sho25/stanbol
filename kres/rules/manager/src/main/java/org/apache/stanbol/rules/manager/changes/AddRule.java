begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_comment
comment|/**  * This class will add new rule to the KReSRuleStore used as input.<br/>  * The KReSRuleStore object used as input is not changed and to get the new modified KReSRuleStore there is the method getStore().<br/>  * If a rule with a same name or IRI is already inside the KReSRuleStore an error is lunched and the process stopped.  *  */
end_comment

begin_class
specifier|public
class|class
name|AddRule
block|{
specifier|private
name|OWLOntology
name|owlmodel
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|private
name|OWLDataFactory
name|factory
decl_stmt|;
specifier|private
name|String
name|owlID
decl_stmt|;
specifier|private
name|String
name|owlIDrmi
decl_stmt|;
specifier|private
name|RuleStore
name|storeaux
decl_stmt|;
comment|/**      * To create a list of imported ontlogy to be added as import declarations      *      * @param inowl {Input ontology where to get the import declarations}      * @return {A list of declarations}      */
specifier|private
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|createImportList
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|,
name|OWLOntology
name|toadd
parameter_list|)
block|{
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|importedonto
init|=
name|inowl
operator|.
name|getDirectImports
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|auxfactory
init|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedonto
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|importedonto
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxfactory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|OWLImportsDeclaration
argument_list|>
name|importedontob
init|=
name|inowl
operator|.
name|getImportsDeclarations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|additions
operator|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
expr_stmt|;
name|auxfactory
operator|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
while|while
condition|(
name|importedontob
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLImportsDeclaration
name|auxontob
init|=
name|importedontob
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxontob
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|additions
return|;
block|}
comment|/**      * To clone ontology with all its axioms and imports declaration      *      * @param inowl {The onotlogy to be cloned}      * @return {An ontology with the same characteristics}      */
specifier|private
name|void
name|cloneOntology
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|)
block|{
comment|//Clone the targetontology
try|try
block|{
name|this
operator|.
name|owlmodel
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|inowl
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
comment|//Add axioms
name|owlmanager
operator|.
name|addAxioms
argument_list|(
name|owlmodel
argument_list|,
name|inowl
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add import declaration
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|inowl
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Constructor, the input is a KReSRuleStore object.<br/>     * N.B. To get the new KReSRuleStore object there is the method getStore().     * @param store {The KReSRuleStore where to add the rule.}     */
specifier|public
name|AddRule
parameter_list|(
name|RuleStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|storeaux
operator|=
name|store
expr_stmt|;
name|cloneOntology
argument_list|(
name|storeaux
operator|.
name|getOntology
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"#"
expr_stmt|;
block|}
comment|/**     * Constructor, the input is a KReSRuleStore object and a string contains the base iri of the resource.<br/>     * N.B. To get the new KReSRuleStore object there is the method getStore().     * @param owlid {The base iri of resource}     * @param store {The KReSRuleStore where to add the rule.}     */
specifier|public
name|AddRule
parameter_list|(
name|RuleStore
name|store
parameter_list|,
name|String
name|owlid
parameter_list|)
block|{
name|this
operator|.
name|storeaux
operator|=
name|store
expr_stmt|;
comment|//cloneOntology(storeaux.getOntology());
name|this
operator|.
name|owlmanager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlmodel
operator|=
name|storeaux
operator|.
name|getOntology
argument_list|()
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlid
expr_stmt|;
block|}
comment|/**     * Method to add a Rule. The inputs are: a rule name string that doesn't exist in the ontology, a rule body->head string and eventualy a description of the rule     *     * @param ruleName {A string variable contains a name}     * @param ruleBodyHead {A string variable contains the body and head of the rule}     * @param ruleDescription {A briefly description of the rule}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRule
parameter_list|(
name|String
name|ruleName
parameter_list|,
name|String
name|ruleBodyHead
parameter_list|,
name|String
name|ruleDescription
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|ruleName
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|bodyhead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|ruleName
operator|!=
literal|null
operator|)
operator|||
operator|!
name|ruleName
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|ruleBodyHead
operator|!=
literal|null
operator|)
operator|||
operator|!
name|ruleBodyHead
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//Add the rule Body and Head
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|bodyhead
argument_list|,
name|ontoind
argument_list|,
name|ruleBodyHead
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ruleDescription
operator|!=
literal|null
operator|)
condition|)
if|if
condition|(
operator|!
name|ruleDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|ruleDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
block|}
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|ruleName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name and the body-head string cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a Rule. The inputs are: a rule name IRI that doesn't exist in the ontology, a rule body->head string and eventualy a description of the rule     *     * @param ruleName {An IRI variable contains the complete name}     * @param ruleBodyHead {A string variable contains the body and head of the rule}     * @param ruleDescription {A briefly description of the rule}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRule
parameter_list|(
name|IRI
name|ruleName
parameter_list|,
name|String
name|ruleBodyHead
parameter_list|,
name|String
name|ruleDescription
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|ruleName
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|bodyhead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|ruleName
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|ruleName
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|ruleBodyHead
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|ruleBodyHead
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"entriamo "
operator|+
name|ruleName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//Add the rule Body and Head
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|bodyhead
argument_list|,
name|ontoind
argument_list|,
name|ruleBodyHead
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
if|if
condition|(
name|ruleDescription
operator|!=
literal|null
condition|)
if|if
condition|(
operator|!
name|ruleDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|ruleDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
block|}
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|ruleName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name and the body-head string cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a Rule. The inputs are two HashMap with the key the rule name and the value are the Body -> Head string a rule description.     *     * @param ruleBodyHeadMap {An HashMap variable contains string rule name as key and the body and head as value}     * @param ruleDescriptionMap {An HashMap variable contains string rule name as key and the rule's description as value}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRuleMap
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ruleBodyHeadMap
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ruleDescriptionMap
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|bodyhead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
name|Object
index|[]
name|keys
init|=
name|ruleBodyHeadMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|String
name|ruleDescription
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|keys
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|String
name|ruleName
init|=
operator|(
name|String
operator|)
name|keys
index|[
name|k
index|]
decl_stmt|;
name|String
name|ruleBodyHead
init|=
name|ruleBodyHeadMap
operator|.
name|get
argument_list|(
name|ruleName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ruleDescriptionMap
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|ruleDescriptionMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ruleDescription
operator|=
name|ruleDescriptionMap
operator|.
name|get
argument_list|(
name|ruleName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ruleDescription
operator|=
literal|""
expr_stmt|;
block|}
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|ruleName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|ruleName
operator|!=
literal|null
operator|)
operator|||
operator|!
name|ruleName
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|ruleBodyHead
operator|!=
literal|null
operator|)
operator|||
operator|!
name|ruleBodyHead
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//Add the rule Body and Head
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|bodyhead
argument_list|,
name|ontoind
argument_list|,
name|ruleBodyHead
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ruleDescription
operator|!=
literal|null
operator|)
condition|)
if|if
condition|(
operator|!
name|ruleDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|ruleDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
block|}
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|ruleName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name and the body-head string cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
if|if
condition|(
name|ok
condition|)
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**     * Method to add a Rule. The inputs are two HashMap with the key the rule name and the value are the Body -> Head string a rule description.     *     * @param ruleBodyHeadMap {An HashMap variable contains string rule name as key and the body and head as value}     * @param ruleDescriptionMap {An HashMap variable contains string rule name as key and the rule's description as value}     * @return {A boolean that is true if the operation is ok}     */
specifier|public
name|boolean
name|addRuleMapIRI
parameter_list|(
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|ruleBodyHeadMap
parameter_list|,
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|ruleDescriptionMap
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|bodyhead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|IRI
argument_list|>
name|keys
init|=
name|ruleBodyHeadMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|ruleDescription
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IRI
name|ruleName
init|=
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|ruleBodyHead
init|=
name|ruleBodyHeadMap
operator|.
name|get
argument_list|(
name|ruleName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ruleDescriptionMap
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|ruleDescriptionMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ruleDescription
operator|=
name|ruleDescriptionMap
operator|.
name|get
argument_list|(
name|ruleName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ruleDescription
operator|=
literal|""
expr_stmt|;
block|}
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|ruleName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|ruleName
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|ruleName
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|ruleBodyHead
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|ruleBodyHead
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
comment|//Add the rule istance
name|OWLClassAssertionAxiom
name|classAssertion
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|classAssertion
argument_list|)
expr_stmt|;
comment|//Add the rule Body and Head
name|OWLDataPropertyAssertionAxiom
name|dataPropAssertion
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|bodyhead
argument_list|,
name|ontoind
argument_list|,
name|ruleBodyHead
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ruleDescription
operator|!=
literal|null
operator|)
condition|)
if|if
condition|(
operator|!
name|ruleDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Add the rule description
name|dataPropAssertion
operator|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|description
argument_list|,
name|ontoind
argument_list|,
name|ruleDescription
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|owlmodel
argument_list|,
name|dataPropAssertion
argument_list|)
expr_stmt|;
block|}
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|ruleName
operator|+
literal|" already exists. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name and the body-head string cannot be empity or null."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
if|if
condition|(
name|ok
condition|)
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
comment|/**      * Get the KReSRuleStore filled with rules and recipes     *      * @return {A KReSRuleStore object with the stored rules and recipes.}      */
specifier|public
name|RuleStore
name|getStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|storeaux
return|;
block|}
block|}
end_class

end_unit

