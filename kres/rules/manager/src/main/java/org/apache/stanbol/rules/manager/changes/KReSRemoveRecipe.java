begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLEntityRemover
import|;
end_import

begin_comment
comment|/**  * This class will remove a recipe from the KReSRuleStore used as input.<br/>  * The KReSRuleStore object used as input is not changed and to get the new modified KReSRuleStore there is the method getStore().<br/>  * If the recipe name or IRI is not already inside the KReSRuleStore an error is lunched and the process stopped.  *  */
end_comment

begin_class
specifier|public
class|class
name|KReSRemoveRecipe
block|{
specifier|private
name|OWLOntology
name|owlmodel
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|private
name|OWLDataFactory
name|factory
decl_stmt|;
specifier|private
name|String
name|owlIDrmi
decl_stmt|;
specifier|private
name|String
name|owlID
decl_stmt|;
specifier|public
name|RuleStore
name|storeaux
decl_stmt|;
comment|/**      * To create a list of imported ontlogy to be added as import declarations      *      * @param inowl {Input ontology where to get the import declarations}      * @return {A list of declarations}      */
specifier|private
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|createImportList
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|,
name|OWLOntology
name|toadd
parameter_list|)
block|{
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|importedonto
init|=
name|inowl
operator|.
name|getDirectImports
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|auxfactory
init|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedonto
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|importedonto
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxfactory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|OWLImportsDeclaration
argument_list|>
name|importedontob
init|=
name|inowl
operator|.
name|getImportsDeclarations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|additions
operator|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
expr_stmt|;
name|auxfactory
operator|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
while|while
condition|(
name|importedontob
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLImportsDeclaration
name|auxontob
init|=
name|importedontob
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxontob
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|additions
return|;
block|}
comment|/**      * To clone ontology with all its axioms and imports declaration      *      * @param inowl {The onotlogy to be cloned}      * @return {An ontology with the same characteristics}      */
specifier|private
name|void
name|cloneOntology
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|)
block|{
comment|//Clone the targetontology
try|try
block|{
name|this
operator|.
name|owlmodel
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|inowl
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
comment|//Add axioms
name|owlmanager
operator|.
name|addAxioms
argument_list|(
name|owlmodel
argument_list|,
name|inowl
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add import declaration
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|inowl
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Constructor, the input is a KReSRuleStore object.<br/>     * N.B. To get the new KReSRuleStore object there is the method getStore().     * @param store {The KReSRuleStore where there are the added rules and recipes.}     */
specifier|public
name|KReSRemoveRecipe
parameter_list|(
name|RuleStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|storeaux
operator|=
name|store
expr_stmt|;
name|cloneOntology
argument_list|(
name|store
operator|.
name|getOntology
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"#"
expr_stmt|;
block|}
comment|/**     * Constructor, the input is a KReSRuleStore object and a string contains the base iri of the resource.<br/>     *     * @param store {The KReSRuleStore where there are the added rules and recipes.}     * @param owlid {The base iri of resource}     */
specifier|public
name|KReSRemoveRecipe
parameter_list|(
name|RuleStore
name|store
parameter_list|,
name|String
name|owlid
parameter_list|)
block|{
name|this
operator|.
name|storeaux
operator|=
name|store
expr_stmt|;
name|cloneOntology
argument_list|(
name|storeaux
operator|.
name|getOntology
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlid
expr_stmt|;
block|}
comment|/**     * To remove a recipe with a given name.     *     * @param recipeName {The recipe string name.}     * @return {Return true is the process finished without errors.}     */
specifier|public
name|boolean
name|removeRecipe
parameter_list|(
name|String
name|recipeName
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|recipeName
argument_list|)
argument_list|)
decl_stmt|;
name|OWLEntityRemover
name|remover
init|=
operator|new
name|OWLEntityRemover
argument_list|(
name|owlmanager
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|owlmodel
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|precedes
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.ontologydesignpatterns.org/cp/owl/sequence.owl#directlyPrecedes"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|objectPropAssertion
decl_stmt|;
name|KReSGetRecipe
name|getrecipe
init|=
operator|new
name|KReSGetRecipe
argument_list|(
name|storeaux
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getrecipe
operator|.
name|getRecipe
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
name|String
index|[]
name|sequence
init|=
name|map
operator|.
name|get
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|recipeName
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|IRI
argument_list|>
name|ruleseq
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|seq
range|:
name|sequence
control|)
block|{
if|if
condition|(
operator|!
name|seq
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ruleseq
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|seq
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|count
init|=
name|getrecipe
operator|.
name|getBinSequenceRecipeCount
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|binseq
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|String
name|bs
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ruleseq
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|bs
operator|=
name|ruleseq
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" precedes "
operator|+
name|ruleseq
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|containsKey
argument_list|(
name|bs
argument_list|)
condition|)
block|{
if|if
condition|(
name|count
operator|.
name|get
argument_list|(
name|bs
argument_list|)
operator|==
literal|1
condition|)
block|{
name|binseq
operator|.
name|add
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
name|ontoind
operator|.
name|accept
argument_list|(
name|remover
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|remover
operator|.
name|getChanges
argument_list|()
argument_list|)
expr_stmt|;
name|remover
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Some error occurs during deletion."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|binseq
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|iris
init|=
name|binseq
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|" precedes "
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoindA
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|iris
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoindB
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|iris
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|precedes
argument_list|,
name|ontoindA
argument_list|,
name|ontoindB
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|objectPropAssertion
argument_list|)
condition|)
block|{
name|owlmanager
operator|.
name|removeAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|objectPropAssertion
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Some error occurs during deletion."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|recipeName
operator|+
literal|" is not inside the ontology. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
return|return
name|ok
return|;
block|}
comment|/**     * To remove a recipe with a given IRI.     *     * @param recipeName {The complete recipe IRI.}     * @return {Return true is the process finished without errors.}     */
specifier|public
name|boolean
name|removeRecipe
parameter_list|(
name|IRI
name|recipeName
parameter_list|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"Recipe"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
name|OWLEntityRemover
name|remover
init|=
operator|new
name|OWLEntityRemover
argument_list|(
name|owlmanager
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|owlmodel
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|precedes
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.ontologydesignpatterns.org/cp/owl/sequence.owl#directlyPrecedes"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|objectPropAssertion
decl_stmt|;
name|KReSGetRecipe
name|getrecipe
init|=
operator|new
name|KReSGetRecipe
argument_list|(
name|storeaux
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getrecipe
operator|.
name|getRecipe
argument_list|(
name|recipeName
argument_list|)
decl_stmt|;
name|String
index|[]
name|sequence
init|=
name|map
operator|.
name|get
argument_list|(
name|recipeName
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|IRI
argument_list|>
name|ruleseq
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|seq
range|:
name|sequence
control|)
block|{
if|if
condition|(
operator|!
name|seq
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ruleseq
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|seq
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|count
init|=
name|getrecipe
operator|.
name|getBinSequenceRecipeCount
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|binseq
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|String
name|bs
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ruleseq
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|bs
operator|=
name|ruleseq
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" precedes "
operator|+
name|ruleseq
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|containsKey
argument_list|(
name|bs
argument_list|)
condition|)
block|{
if|if
condition|(
name|count
operator|.
name|get
argument_list|(
name|bs
argument_list|)
operator|==
literal|1
condition|)
block|{
name|binseq
operator|.
name|add
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
name|ontoind
operator|.
name|accept
argument_list|(
name|remover
argument_list|)
expr_stmt|;
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|remover
operator|.
name|getChanges
argument_list|()
argument_list|)
expr_stmt|;
name|remover
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Some error occurs during deletion."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|binseq
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|binseq
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|iris
init|=
name|binseq
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|" precedes "
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoindA
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|iris
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoindB
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|iris
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|objectPropAssertion
operator|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|precedes
argument_list|,
name|ontoindA
argument_list|,
name|ontoindB
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|objectPropAssertion
argument_list|)
condition|)
block|{
name|owlmanager
operator|.
name|removeAxiom
argument_list|(
name|owlmodel
argument_list|,
name|objectPropAssertion
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|objectPropAssertion
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Some error occurs during deletion."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
block|}
block|}
block|}
else|else
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|recipeName
operator|+
literal|" is not inside the ontology. Pleas check the name."
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ok
operator|)
return|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|this
operator|.
name|storeaux
operator|.
name|setStore
argument_list|(
name|owlmodel
argument_list|)
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
comment|/**      * Get the KReSRuleStore filled with rules and recipes     *      * @return {A KReSRuleStore object with the stored rules and recipes.}      */
specifier|public
name|RuleStore
name|getStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|storeaux
return|;
block|}
block|}
end_class

end_unit

