begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|EnumeratedClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Bag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|CollectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|SWRL
import|;
end_import

begin_class
specifier|public
class|class
name|KReSRuleParser
block|{
specifier|public
specifier|static
name|String
name|ruleNS
init|=
literal|"http://www.prova.org/rules.rdf#"
decl_stmt|;
specifier|private
name|Model
name|sourceModel
decl_stmt|;
specifier|private
name|Model
name|destinationModel
decl_stmt|;
specifier|private
name|OntModel
name|ruleOntology
decl_stmt|;
specifier|public
name|KReSRuleParser
parameter_list|(
name|Model
name|sourceModel
parameter_list|,
name|Model
name|destinationModel
parameter_list|,
name|Model
name|ruleOntology
parameter_list|)
block|{
name|this
operator|.
name|sourceModel
operator|=
name|sourceModel
expr_stmt|;
name|this
operator|.
name|destinationModel
operator|=
name|destinationModel
expr_stmt|;
name|this
operator|.
name|ruleOntology
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_MEM
argument_list|,
name|ruleOntology
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KReSRuleParser
parameter_list|(
name|OntModel
name|inputOntology
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixMap
parameter_list|,
name|Model
name|ruleOntology
parameter_list|)
block|{
name|this
operator|.
name|sourceModel
operator|=
name|inputOntology
expr_stmt|;
name|this
operator|.
name|ruleOntology
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_MEM
argument_list|,
name|ruleOntology
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|prefixMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|prefixMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ruleOntology
operator|.
name|setNsPrefix
argument_list|(
name|key
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|KReSRuleParser
parameter_list|(
name|OntModel
name|inputOntology
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixMap
parameter_list|)
block|{
name|this
operator|.
name|sourceModel
operator|=
name|inputOntology
expr_stmt|;
name|this
operator|.
name|ruleOntology
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_MEM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ruleOntology
operator|.
name|setNsPrefix
argument_list|(
literal|"owl"
argument_list|,
literal|"http://www.w3.org/2002/07/owl#"
argument_list|)
expr_stmt|;
name|ruleOntology
operator|.
name|setNsPrefix
argument_list|(
literal|"rdf"
argument_list|,
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#"
argument_list|)
expr_stmt|;
name|ruleOntology
operator|.
name|setNsPrefix
argument_list|(
literal|"rdfs"
argument_list|,
literal|"http://www.w3.org/2000/01/rdf-schema#"
argument_list|)
expr_stmt|;
name|ruleOntology
operator|.
name|setNsPrefix
argument_list|(
literal|"swrl"
argument_list|,
literal|"http://www.w3.org/2003/11/swrl#"
argument_list|)
expr_stmt|;
name|ruleOntology
operator|.
name|setNsPrefix
argument_list|(
literal|"rule"
argument_list|,
name|ruleNS
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|prefixMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|prefixMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ruleOntology
operator|.
name|setNsPrefix
argument_list|(
name|key
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Resource
name|parse
parameter_list|(
name|String
name|ruleName
parameter_list|,
name|String
name|ruleString
parameter_list|)
block|{
name|Resource
name|imp
init|=
literal|null
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"INPUT"
argument_list|)
expr_stmt|;
comment|//inputOntology.write(System.out);
name|String
index|[]
name|ruleSplit
init|=
name|ruleString
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ruleSplit
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|imp
operator|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|ruleNS
operator|+
name|ruleName
argument_list|,
name|SWRL
operator|.
name|Imp
argument_list|)
expr_stmt|;
comment|//rule divided into body and head
name|String
name|bodyString
init|=
name|ruleSplit
index|[
literal|0
index|]
decl_stmt|;
name|String
name|headString
init|=
name|ruleSplit
index|[
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BODY : "
operator|+
name|bodyString
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HEAD : "
operator|+
name|headString
argument_list|)
expr_stmt|;
comment|//RDFList list = createList(bodyString);
name|imp
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|body
argument_list|,
name|createList
argument_list|(
name|bodyString
argument_list|)
argument_list|)
expr_stmt|;
name|imp
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|head
argument_list|,
name|createList
argument_list|(
name|headString
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ruleSplit
operator|=
name|ruleString
operator|.
name|split
argument_list|(
literal|"<-"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ruleSplit
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|imp
operator|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|ruleNS
operator|+
name|ruleName
argument_list|,
name|SWRL
operator|.
name|Imp
argument_list|)
expr_stmt|;
comment|//rule divided into body and head
name|String
name|headString
init|=
name|ruleSplit
index|[
literal|0
index|]
decl_stmt|;
name|String
name|bodyString
init|=
name|ruleSplit
index|[
literal|1
index|]
decl_stmt|;
name|RDFList
name|list
init|=
name|createList
argument_list|(
name|bodyString
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|imp
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|head
argument_list|,
name|list
operator|.
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|=
name|createList
argument_list|(
name|headString
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|imp
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|body
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|imp
return|;
block|}
specifier|public
name|OntModel
name|getRuleOntology
parameter_list|()
block|{
return|return
name|ruleOntology
return|;
block|}
specifier|private
name|RDFNode
name|getSWRLArgument
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|RDFNode
name|rdfNode
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|argumentComposition
init|=
name|argument
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|argumentComposition
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|prefix
init|=
name|argumentComposition
index|[
literal|0
index|]
decl_stmt|;
name|String
name|resourceName
init|=
name|argumentComposition
index|[
literal|1
index|]
decl_stmt|;
name|String
name|namespaceURI
init|=
name|ruleOntology
operator|.
name|getNsPrefixURI
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|rdfNode
operator|=
name|sourceModel
operator|.
name|getResource
argument_list|(
name|namespaceURI
operator|+
name|resourceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rdfNode
operator|==
literal|null
condition|)
block|{
name|rdfNode
operator|=
name|destinationModel
operator|.
name|getResource
argument_list|(
name|namespaceURI
operator|+
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|argument
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|Model
name|tmpModel
init|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
decl_stmt|;
name|rdfNode
operator|=
name|tmpModel
operator|.
name|createLiteral
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
return|return
name|rdfNode
return|;
block|}
specifier|private
name|Resource
name|getSWRLVariable
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|Resource
name|variableResource
init|=
literal|null
decl_stmt|;
name|String
name|variableString
init|=
name|argument
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|StmtIterator
name|stmtIterator
init|=
name|ruleOntology
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|SWRL
operator|.
name|Variable
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|variable
init|=
name|ruleNS
operator|+
name|variableString
decl_stmt|;
while|while
condition|(
name|stmtIterator
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|Statement
name|statement
init|=
name|stmtIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|variableResource
operator|=
name|statement
operator|.
name|getSubject
argument_list|()
expr_stmt|;
if|if
condition|(
name|variableResource
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|variable
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|variableResource
operator|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|variable
argument_list|,
name|SWRL
operator|.
name|Variable
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"LA CREO"
argument_list|)
expr_stmt|;
block|}
return|return
name|variableResource
return|;
block|}
specifier|private
name|Resource
name|createSameAsAtom
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|openPar
parameter_list|,
name|int
name|closePar
parameter_list|)
block|{
name|Resource
name|sameASAtom
init|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|SWRL
operator|.
name|SameIndividualAtom
argument_list|)
decl_stmt|;
name|String
name|argumentString
init|=
name|token
operator|.
name|substring
argument_list|(
name|openPar
operator|+
literal|1
argument_list|,
name|closePar
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT STRING : "
operator|+
name|argumentString
argument_list|)
expr_stmt|;
name|String
index|[]
name|arguments
init|=
name|argumentString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|arguments
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|argument
init|=
name|arguments
index|[
name|j
index|]
decl_stmt|;
name|argument
operator|=
name|argument
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT : "
operator|+
name|argument
argument_list|)
expr_stmt|;
name|RDFNode
name|argRes
decl_stmt|;
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|argRes
operator|=
name|getSWRLVariable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argRes
operator|=
name|getSWRLArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|j
condition|)
block|{
case|case
literal|0
case|:
name|sameASAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument1
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|sameASAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument2
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|sameASAtom
return|;
block|}
specifier|private
name|Resource
name|createDifferentAtom
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|openPar
parameter_list|,
name|int
name|closePar
parameter_list|)
block|{
name|Resource
name|differentIndividualAtom
init|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|SWRL
operator|.
name|DifferentIndividualsAtom
argument_list|)
decl_stmt|;
name|String
name|argumentString
init|=
name|token
operator|.
name|substring
argument_list|(
name|openPar
operator|+
literal|1
argument_list|,
name|closePar
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT STRING : "
operator|+
name|argumentString
argument_list|)
expr_stmt|;
name|String
index|[]
name|arguments
init|=
name|argumentString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|arguments
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|argument
init|=
name|arguments
index|[
name|j
index|]
decl_stmt|;
name|argument
operator|=
name|argument
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT : "
operator|+
name|argument
argument_list|)
expr_stmt|;
name|RDFNode
name|argRes
decl_stmt|;
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|argRes
operator|=
name|getSWRLVariable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argRes
operator|=
name|getSWRLArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|j
condition|)
block|{
case|case
literal|0
case|:
name|differentIndividualAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument1
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|differentIndividualAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument2
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|differentIndividualAtom
return|;
block|}
specifier|private
name|Resource
name|createClassAtom
parameter_list|(
name|OntResource
name|ontResource
parameter_list|,
name|String
name|token
parameter_list|,
name|int
name|openPar
parameter_list|,
name|int
name|closePar
parameter_list|)
block|{
name|Resource
name|classAtom
init|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|SWRL
operator|.
name|ClassAtom
argument_list|)
decl_stmt|;
name|String
name|argumentString
init|=
name|token
operator|.
name|substring
argument_list|(
name|openPar
operator|+
literal|1
argument_list|,
name|closePar
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT STRING : "
operator|+
name|argumentString
argument_list|)
expr_stmt|;
name|classAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|classPredicate
argument_list|,
name|ontResource
argument_list|)
expr_stmt|;
name|String
index|[]
name|arguments
init|=
name|argumentString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|argument
init|=
name|arguments
index|[
literal|0
index|]
decl_stmt|;
name|argument
operator|=
name|argument
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT : "
operator|+
name|argument
argument_list|)
expr_stmt|;
name|RDFNode
name|argRes
decl_stmt|;
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|argRes
operator|=
name|getSWRLVariable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argRes
operator|=
name|getSWRLArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
name|classAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument1
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
block|}
return|return
name|classAtom
return|;
block|}
specifier|private
name|Resource
name|createIndividualAtom
parameter_list|(
name|OntResource
name|ontResource
parameter_list|,
name|String
name|token
parameter_list|,
name|int
name|openPar
parameter_list|,
name|int
name|closePar
parameter_list|)
block|{
name|Resource
name|individualPropertyAtom
init|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|SWRL
operator|.
name|IndividualPropertyAtom
argument_list|)
decl_stmt|;
name|String
name|argumentString
init|=
name|token
operator|.
name|substring
argument_list|(
name|openPar
operator|+
literal|1
argument_list|,
name|closePar
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT STRING INDIVIDUAL PROPERTY ATOM: "
operator|+
name|argumentString
argument_list|)
expr_stmt|;
name|individualPropertyAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|propertyPredicate
argument_list|,
name|ontResource
argument_list|)
expr_stmt|;
name|String
index|[]
name|arguments
init|=
name|argumentString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|arguments
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|argument
init|=
name|arguments
index|[
name|j
index|]
decl_stmt|;
name|argument
operator|=
name|argument
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT : "
operator|+
name|argument
argument_list|)
expr_stmt|;
name|RDFNode
name|argRes
decl_stmt|;
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|argRes
operator|=
name|getSWRLVariable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argRes
operator|=
name|getSWRLArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|j
condition|)
block|{
case|case
literal|0
case|:
name|individualPropertyAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument1
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|individualPropertyAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument2
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|individualPropertyAtom
return|;
block|}
specifier|private
name|Resource
name|createDatavaluedPropertyAtom
parameter_list|(
name|OntResource
name|ontResource
parameter_list|,
name|String
name|token
parameter_list|,
name|int
name|openPar
parameter_list|,
name|int
name|closePar
parameter_list|)
block|{
name|Resource
name|databaluedPropertyAtom
init|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|SWRL
operator|.
name|DatavaluedPropertyAtom
argument_list|)
decl_stmt|;
name|String
name|argumentString
init|=
name|token
operator|.
name|substring
argument_list|(
name|openPar
operator|+
literal|1
argument_list|,
name|closePar
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT STRING : "
operator|+
name|argumentString
argument_list|)
expr_stmt|;
name|databaluedPropertyAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|propertyPredicate
argument_list|,
name|ontResource
argument_list|)
expr_stmt|;
name|String
index|[]
name|arguments
init|=
name|argumentString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|arguments
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|argument
init|=
name|arguments
index|[
name|j
index|]
decl_stmt|;
name|argument
operator|=
name|argument
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT : "
operator|+
name|argument
argument_list|)
expr_stmt|;
name|RDFNode
name|argRes
decl_stmt|;
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|argRes
operator|=
name|getSWRLVariable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argRes
operator|=
name|getSWRLArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|j
condition|)
block|{
case|case
literal|0
case|:
name|databaluedPropertyAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument1
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|databaluedPropertyAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument2
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|databaluedPropertyAtom
return|;
block|}
specifier|private
name|Resource
name|createDataRangeAtom
parameter_list|(
name|OntResource
name|ontResource
parameter_list|,
name|String
name|token
parameter_list|,
name|int
name|openPar
parameter_list|,
name|int
name|closePar
parameter_list|)
block|{
name|Resource
name|dataRangeAtom
init|=
name|ruleOntology
operator|.
name|createResource
argument_list|(
name|SWRL
operator|.
name|DataRangeAtom
argument_list|)
decl_stmt|;
name|String
name|argumentString
init|=
name|token
operator|.
name|substring
argument_list|(
name|openPar
operator|+
literal|1
argument_list|,
name|closePar
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT STRING : "
operator|+
name|argumentString
argument_list|)
expr_stmt|;
name|dataRangeAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|propertyPredicate
argument_list|,
name|ontResource
argument_list|)
expr_stmt|;
name|String
index|[]
name|arguments
init|=
name|argumentString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|argument
init|=
name|arguments
index|[
literal|0
index|]
decl_stmt|;
name|argument
operator|=
name|argument
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARGUMENT : "
operator|+
name|argument
argument_list|)
expr_stmt|;
name|RDFNode
name|argRes
decl_stmt|;
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|argRes
operator|=
name|getSWRLVariable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argRes
operator|=
name|getSWRLArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
name|dataRangeAtom
operator|.
name|addProperty
argument_list|(
name|SWRL
operator|.
name|argument1
argument_list|,
name|argRes
argument_list|)
expr_stmt|;
block|}
return|return
name|dataRangeAtom
return|;
block|}
specifier|private
name|RDFList
name|createList
parameter_list|(
name|String
name|atomString
parameter_list|)
block|{
name|RDFList
name|list
init|=
name|ruleOntology
operator|.
name|createList
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokenArray
init|=
name|atomString
operator|.
name|split
argument_list|(
literal|" AND "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokenArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|tokenArray
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
name|token
init|=
name|tokenArray
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|openPar
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
name|int
name|closePar
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
decl_stmt|;
name|String
name|atom
init|=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|openPar
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ATOM : "
operator|+
name|atom
argument_list|)
expr_stmt|;
name|Resource
name|atomResource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|atom
operator|.
name|equals
argument_list|(
literal|"same"
argument_list|)
condition|)
block|{
name|atomResource
operator|=
name|createSameAsAtom
argument_list|(
name|token
argument_list|,
name|openPar
argument_list|,
name|closePar
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atom
operator|.
name|equals
argument_list|(
literal|"different"
argument_list|)
condition|)
block|{
name|atomResource
operator|=
name|createDifferentAtom
argument_list|(
name|token
argument_list|,
name|openPar
argument_list|,
name|closePar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|atomComponents
init|=
name|atom
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomComponents
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|atomNSPrefix
init|=
name|atomComponents
index|[
literal|0
index|]
decl_stmt|;
name|String
name|atomName
init|=
name|atomComponents
index|[
literal|1
index|]
decl_stmt|;
name|OntResource
name|ontResource
init|=
literal|null
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"atomNSPrefix : "
operator|+
name|atomNSPrefix
argument_list|)
expr_stmt|;
comment|//ruleOntology.write(System.out);
name|String
name|namespaceURI
init|=
name|ruleOntology
operator|.
name|getNsPrefixURI
argument_list|(
name|atomNSPrefix
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEMION RULE PARSER : ontology "
operator|+
name|namespaceURI
operator|.
name|replace
argument_list|(
literal|"#"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|OntModel
name|ontModelExternal
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_MEM
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ontModelExternal
operator|.
name|read
argument_list|(
name|namespaceURI
operator|.
name|replace
argument_list|(
literal|"#"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ontResource
operator|=
name|ontModelExternal
operator|.
name|getOntResource
argument_list|(
name|namespaceURI
operator|+
name|atomName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NAME ATOOOOM: "
operator|+
name|namespaceURI
operator|+
name|atomName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontResource
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"QUIIIIIIIIIIIIIIII"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontResource
operator|.
name|isClass
argument_list|()
condition|)
block|{
name|atomResource
operator|=
name|createClassAtom
argument_list|(
name|ontResource
argument_list|,
name|token
argument_list|,
name|openPar
argument_list|,
name|closePar
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ontResource
operator|.
name|getURI
argument_list|()
operator|+
literal|" CLASS "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontResource
operator|.
name|isObjectProperty
argument_list|()
condition|)
block|{
name|atomResource
operator|=
name|createIndividualAtom
argument_list|(
name|ontResource
argument_list|,
name|token
argument_list|,
name|openPar
argument_list|,
name|closePar
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ontResource
operator|.
name|getURI
argument_list|()
operator|+
literal|" OBJECT PROPERTY"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontResource
operator|.
name|isDatatypeProperty
argument_list|()
condition|)
block|{
name|atomResource
operator|=
name|createDatavaluedPropertyAtom
argument_list|(
name|ontResource
argument_list|,
name|token
argument_list|,
name|openPar
argument_list|,
name|closePar
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ontResource
operator|.
name|getURI
argument_list|()
operator|+
literal|" OBJECT DATATYPE PROPERTY"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ontResource
operator|.
name|isDataRange
argument_list|()
condition|)
block|{
name|atomResource
operator|=
name|createDataRangeAtom
argument_list|(
name|ontResource
argument_list|,
name|token
argument_list|,
name|openPar
argument_list|,
name|closePar
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ontResource
operator|.
name|getURI
argument_list|()
operator|+
literal|" DATA RANGE"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ontResource
operator|.
name|isProperty
argument_list|()
condition|)
block|{
name|atomResource
operator|=
name|createIndividualAtom
argument_list|(
name|ontResource
argument_list|,
name|token
argument_list|,
name|openPar
argument_list|,
name|closePar
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ontResource
operator|.
name|getURI
argument_list|()
operator|+
literal|" PROPERTY"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ontResource
operator|.
name|getURI
argument_list|()
operator|+
literal|" nil"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SONO UNA MINCHIA"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|atomResource
operator|!=
literal|null
condition|)
block|{
name|list
operator|=
name|list
operator|.
name|cons
argument_list|(
name|atomResource
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ENTRO QUI "
operator|+
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

