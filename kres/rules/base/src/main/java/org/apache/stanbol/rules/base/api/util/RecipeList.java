begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_class
specifier|public
class|class
name|RecipeList
implements|implements
name|Collection
argument_list|<
name|Recipe
argument_list|>
block|{
specifier|private
name|Recipe
index|[]
name|recipes
decl_stmt|;
specifier|public
name|RecipeList
parameter_list|()
block|{ 		 	}
specifier|public
name|boolean
name|add
parameter_list|(
name|Recipe
name|recipe
parameter_list|)
block|{
if|if
condition|(
name|recipes
operator|==
literal|null
condition|)
block|{
name|recipes
operator|=
operator|new
name|Recipe
index|[
literal|1
index|]
expr_stmt|;
name|recipes
index|[
literal|0
index|]
operator|=
name|recipe
expr_stmt|;
block|}
else|else
block|{
name|Recipe
index|[]
name|recipesCopy
init|=
operator|new
name|Recipe
index|[
name|recipes
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|recipes
argument_list|,
literal|0
argument_list|,
name|recipesCopy
argument_list|,
literal|0
argument_list|,
name|recipes
operator|.
name|length
argument_list|)
expr_stmt|;
name|recipesCopy
index|[
name|recipesCopy
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|recipe
expr_stmt|;
name|recipes
operator|=
name|recipesCopy
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Recipe
argument_list|>
name|c
parameter_list|)
block|{
name|Recipe
index|[]
name|collectionOfRecipes
init|=
operator|new
name|Recipe
index|[
name|c
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|collectionOfRecipes
operator|=
name|c
operator|.
name|toArray
argument_list|(
name|collectionOfRecipes
argument_list|)
expr_stmt|;
if|if
condition|(
name|recipes
operator|==
literal|null
condition|)
block|{
name|recipes
operator|=
name|collectionOfRecipes
expr_stmt|;
block|}
else|else
block|{
name|Recipe
index|[]
name|recipesCopy
init|=
operator|new
name|Recipe
index|[
name|recipes
operator|.
name|length
operator|+
name|collectionOfRecipes
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|recipes
argument_list|,
literal|0
argument_list|,
name|recipesCopy
argument_list|,
literal|0
argument_list|,
name|recipes
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|collectionOfRecipes
argument_list|,
literal|0
argument_list|,
name|recipesCopy
argument_list|,
name|recipes
operator|.
name|length
argument_list|,
name|collectionOfRecipes
operator|.
name|length
argument_list|)
expr_stmt|;
name|recipes
operator|=
name|recipesCopy
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
for|for
control|(
name|Recipe
name|recipe
range|:
name|recipes
control|)
block|{
if|if
condition|(
name|recipe
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
for|for
control|(
name|Recipe
name|recipe
range|:
name|recipes
control|)
block|{
if|if
condition|(
operator|!
name|recipe
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|recipes
operator|==
literal|null
operator|||
operator|(
name|recipes
operator|.
name|length
operator|==
literal|1
operator|&&
name|recipes
index|[
literal|0
index|]
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|Iterator
argument_list|<
name|Recipe
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|RecipeIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recipes
operator|.
name|length
operator|&&
operator|!
name|removed
condition|;
name|i
operator|++
control|)
block|{
name|Recipe
name|recipe
init|=
name|recipes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|recipe
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|Recipe
index|[]
name|recipesCopy
init|=
operator|new
name|Recipe
index|[
name|recipes
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|recipes
argument_list|,
literal|0
argument_list|,
name|recipesCopy
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|recipes
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|recipesCopy
argument_list|,
literal|0
argument_list|,
name|recipesCopy
operator|.
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|recipes
operator|=
name|recipesCopy
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|removed
return|;
block|}
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recipes
operator|.
name|length
operator|&&
operator|!
name|removed
condition|;
name|i
operator|++
control|)
block|{
name|Recipe
name|recipe
init|=
name|recipes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|recipe
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|Recipe
index|[]
name|recipesCopy
init|=
operator|new
name|Recipe
index|[
name|recipes
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|recipes
argument_list|,
literal|0
argument_list|,
name|recipesCopy
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|recipes
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|recipesCopy
argument_list|,
literal|0
argument_list|,
name|recipesCopy
operator|.
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|recipes
operator|=
name|recipesCopy
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|Recipe
index|[]
name|recipesCopy
init|=
literal|null
decl_stmt|;
name|Recipe
index|[]
name|recipesTMP
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Recipe
condition|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
if|if
condition|(
name|recipesCopy
operator|==
literal|null
condition|)
block|{
name|recipesCopy
operator|=
operator|new
name|Recipe
index|[
literal|1
index|]
expr_stmt|;
name|recipesCopy
index|[
literal|0
index|]
operator|=
operator|(
name|Recipe
operator|)
name|o
expr_stmt|;
block|}
else|else
block|{
name|recipesTMP
operator|=
operator|new
name|Recipe
index|[
name|recipesCopy
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|recipesCopy
argument_list|,
literal|0
argument_list|,
name|recipesTMP
argument_list|,
literal|0
argument_list|,
name|recipesCopy
operator|.
name|length
argument_list|)
expr_stmt|;
name|recipesTMP
index|[
name|recipesTMP
operator|.
name|length
operator|-
literal|1
index|]
operator|=
operator|(
name|Recipe
operator|)
name|o
expr_stmt|;
name|recipesCopy
operator|=
name|recipesTMP
expr_stmt|;
block|}
block|}
block|}
block|}
name|recipes
operator|=
name|recipesCopy
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|recipes
operator|.
name|length
operator|-
literal|1
return|;
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|recipes
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
operator|(
name|T
index|[]
operator|)
name|recipes
return|;
block|}
block|}
end_class

end_unit

