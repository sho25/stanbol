begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|DuplicateSessionIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|ClerezzaOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owlapi
operator|.
name|trasformation
operator|.
name|JenaToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owlapi
operator|.
name|trasformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreatePropertyURIStringFromLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreateStandardLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreateURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|Refactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|util
operator|.
name|URIGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Syntax
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|Reasoner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|function
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|pfunction
operator|.
name|PropertyFunctionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|update
operator|.
name|UpdateAction
import|;
end_import

begin_comment
comment|/**  * The RefactorerImpl is the concrete implementation of the Refactorer interface defined in the KReS APIs. A  * SemionRefacter is able to perform ontology refactorings and mappings.  *   * @author andrea.nuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|Refactorer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RefactorerImpl
implements|implements
name|Refactorer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|_AUTO_GENERATED_ONTOLOGY_IRI_DEFAULT
init|=
literal|"http://kres.iksproject.eu/semion/autoGeneratedOntology"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_HOST_NAME_AND_PORT_DEFAULT
init|=
literal|"localhost:8080"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_REFACTORING_SCOPE_DEFAULT
init|=
literal|"refactoring"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_REFACTORING_SESSION_ID_DEFAULT
init|=
literal|"http://kres.iksproject.eu/session/refactoring"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_REFACTORING_SPACE_DEFAULT
init|=
literal|"http://kres.iksproject.eu/space/refactoring"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_AUTO_GENERATED_ONTOLOGY_IRI_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_GENERATED_ONTOLOGY_IRI
init|=
literal|"org.apache.stanbol.reengineer.default"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_HOST_NAME_AND_PORT_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|HOST_NAME_AND_PORT
init|=
literal|"host.name.port"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|_REFACTORING_SCOPE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REFACTORING_SCOPE
init|=
literal|"org.apache.stanbol.ontologymanager.scope.refactoring"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_REFACTORING_SESSION_ID_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REFACTORING_SESSION_ID
init|=
literal|"org.apache.stanbol.ontlogymanager.session.refactoring"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_REFACTORING_SPACE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REFACTORING_SPACE
init|=
literal|"org.apache.stanbol.reengineer.space.refactoring"
decl_stmt|;
specifier|private
name|IRI
name|defaultRefactoringIRI
decl_stmt|;
specifier|private
name|IRI
name|kReSSessionID
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|IRI
name|refactoringScopeIRI
decl_stmt|;
specifier|private
name|IRI
name|refactoringSpaceIRI
decl_stmt|;
specifier|private
name|OntologyScope
name|scope
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|ONManager
name|onManager
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|RuleStore
name|ruleStore
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|TcManager
name|tcManager
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|WeightedTcProvider
name|weightedTcProvider
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the RefactorerImpl instances do need to be configured! YOU      * NEED TO USE      * {@link #RefactorerImpl(WeightedTcProvider, Serializer, TcManager, ONManager, SemionManager, RuleStore, Reasoner, Dictionary)}      * or its overloads, to parse the configuration and then initialise the rule store if running outside a      * OSGI environment.      */
specifier|public
name|RefactorerImpl
parameter_list|()
block|{      }
comment|/**      * Basic constructor to be used if outside of an OSGi environment. Invokes default constructor.      *       * @param weightedTcProvider      * @param serializer      * @param tcManager      * @param onManager      * @param semionManager      * @param ruleStore      * @param kReSReasoner      * @param configuration      */
specifier|public
name|RefactorerImpl
parameter_list|(
name|WeightedTcProvider
name|weightedTcProvider
parameter_list|,
name|Serializer
name|serializer
parameter_list|,
name|TcManager
name|tcManager
parameter_list|,
name|ONManager
name|onManager
parameter_list|,
comment|/* SemionManager semionManager, */
name|RuleStore
name|ruleStore
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|weightedTcProvider
operator|=
name|weightedTcProvider
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
name|tcManager
expr_stmt|;
name|this
operator|.
name|onManager
operator|=
name|onManager
expr_stmt|;
comment|// this.semionManager = semionManager;
name|this
operator|.
name|ruleStore
operator|=
name|ruleStore
expr_stmt|;
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|getClass
argument_list|()
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|String
name|refactoringSessionID
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|REFACTORING_SESSION_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|refactoringSessionID
operator|==
literal|null
condition|)
name|refactoringSessionID
operator|=
name|_REFACTORING_SESSION_ID_DEFAULT
expr_stmt|;
name|String
name|refactoringScopeID
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|REFACTORING_SCOPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|refactoringScopeID
operator|==
literal|null
condition|)
name|refactoringScopeID
operator|=
name|_REFACTORING_SCOPE_DEFAULT
expr_stmt|;
name|String
name|refactoringSpaceID
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|REFACTORING_SPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|refactoringSpaceID
operator|==
literal|null
condition|)
name|refactoringSpaceID
operator|=
name|_REFACTORING_SPACE_DEFAULT
expr_stmt|;
name|String
name|defaultRefactoringID
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|AUTO_GENERATED_ONTOLOGY_IRI
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultRefactoringID
operator|==
literal|null
condition|)
name|defaultRefactoringID
operator|=
name|_AUTO_GENERATED_ONTOLOGY_IRI_DEFAULT
expr_stmt|;
name|String
name|hostPort
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|HOST_NAME_AND_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostPort
operator|==
literal|null
condition|)
name|hostPort
operator|=
name|_HOST_NAME_AND_PORT_DEFAULT
expr_stmt|;
name|kReSSessionID
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|refactoringSessionID
argument_list|)
expr_stmt|;
name|refactoringScopeIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|hostPort
operator|+
literal|"/kres/ontology/"
operator|+
name|refactoringScopeID
argument_list|)
expr_stmt|;
name|refactoringSpaceIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|refactoringSpaceID
argument_list|)
expr_stmt|;
name|defaultRefactoringIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|defaultRefactoringID
argument_list|)
expr_stmt|;
name|SessionManager
name|kReSSessionManager
init|=
name|onManager
operator|.
name|getSessionManager
argument_list|()
decl_stmt|;
name|Session
name|kReSSession
init|=
name|kReSSessionManager
operator|.
name|getSession
argument_list|(
name|kReSSessionID
argument_list|)
decl_stmt|;
if|if
condition|(
name|kReSSession
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|kReSSession
operator|=
name|kReSSessionManager
operator|.
name|createSession
argument_list|(
name|kReSSessionID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateSessionIDException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : a KReS session for reengineering seems already existing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|kReSSessionID
operator|=
name|kReSSession
operator|.
name|getID
argument_list|()
expr_stmt|;
name|OntologyScopeFactory
name|ontologyScopeFactory
init|=
name|onManager
operator|.
name|getOntologyScopeFactory
argument_list|()
decl_stmt|;
name|ScopeRegistry
name|scopeRegistry
init|=
name|onManager
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologySpaceFactory
name|ontologySpaceFactory
init|=
name|onManager
operator|.
name|getOntologySpaceFactory
argument_list|()
decl_stmt|;
name|scope
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Semion DBExtractor : created scope with IRI "
operator|+
name|REFACTORING_SCOPE
argument_list|)
expr_stmt|;
name|scope
operator|=
name|ontologyScopeFactory
operator|.
name|createOntologyScope
argument_list|(
name|refactoringScopeIRI
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|scopeRegistry
operator|.
name|registerScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateIDException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Semion DBExtractor : already existing scope for IRI "
operator|+
name|REFACTORING_SCOPE
argument_list|)
expr_stmt|;
name|scope
operator|=
name|onManager
operator|.
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|refactoringScopeIRI
argument_list|)
expr_stmt|;
block|}
name|scope
operator|.
name|addSessionSpace
argument_list|(
name|ontologySpaceFactory
operator|.
name|createSessionOntologySpace
argument_list|(
name|refactoringSpaceIRI
argument_list|)
argument_list|,
name|kReSSession
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|scopeRegistry
operator|.
name|setScopeActive
argument_list|(
name|refactoringScopeIRI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// semionManager.registerRefactorer(this);
name|PropertyFunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#createURI"
argument_list|,
name|CreateURI
operator|.
name|class
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#createLabel"
argument_list|,
name|CreateStandardLabel
operator|.
name|class
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#propString"
argument_list|,
name|CreatePropertyURIStringFromLabel
operator|.
name|class
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Activated KReS Semion Refactorer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|getClass
argument_list|()
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
name|SessionManager
name|kReSSessionManager
init|=
name|onManager
operator|.
name|getSessionManager
argument_list|()
decl_stmt|;
name|kReSSessionManager
operator|.
name|destroySession
argument_list|(
name|kReSSessionID
argument_list|)
expr_stmt|;
comment|// semionManager.unregisterRefactorer();
name|this
operator|.
name|weightedTcProvider
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|onManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ruleStore
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|getRefactoredDataSet
parameter_list|(
name|UriRef
name|uriRef
parameter_list|)
block|{
return|return
name|weightedTcProvider
operator|.
name|getMGraph
argument_list|(
name|uriRef
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ontologyRefactoring
parameter_list|(
name|IRI
name|refactoredOntologyIRI
parameter_list|,
name|IRI
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
name|ClerezzaOntologyStorage
name|ontologyStorage
init|=
name|onManager
operator|.
name|getOntologyStore
argument_list|()
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|RuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|String
name|fingerPrint
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Rule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|OWLOntology
name|refactoredDataSet
init|=
name|ontologyStorage
operator|.
name|sparqlConstruct
argument_list|(
name|sparql
argument_list|,
name|datasetURI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|refactoredDataSet
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|fpOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|fingerPrint
operator|+=
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|""
argument_list|,
name|fpOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|refactoredOntologyIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|"urn://"
argument_list|,
name|fingerPrint
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|ontologyManager
argument_list|)
decl_stmt|;
try|try
block|{
name|refactoredOntology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ontologyManager
argument_list|,
name|refactoredOntologyIRI
argument_list|)
expr_stmt|;
name|ontologyStorage
operator|.
name|store
argument_list|(
name|refactoredOntology
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|ontologyRefactoring
parameter_list|(
name|OWLOntology
name|inputOntology
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
comment|// JenaToOwlConvert jenaToOwlConvert = new JenaToOwlConvert();
comment|// OntModel ontModel =
comment|// jenaToOwlConvert.ModelOwlToJenaConvert(inputOntology, "RDF/XML");
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|RuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"RULE LIST SIZE : "
operator|+
name|kReSRuleList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager2
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|MGraph
name|unionMGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|MGraph
name|mGraph
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|inputOntology
argument_list|)
decl_stmt|;
for|for
control|(
name|Rule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SPARQL : "
operator|+
name|sparql
argument_list|)
expr_stmt|;
name|Graph
name|constructedGraph
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|kReSRule
operator|.
name|getExpressiveness
argument_list|()
condition|)
block|{
case|case
name|KReSCore
case|:
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|ForwardChaining
case|:
name|ForwardChainingRefactoringGraph
name|forwardChainingRefactoringGraph
init|=
name|forwardChainingOperation
argument_list|(
name|sparql
argument_list|,
name|mGraph
argument_list|)
decl_stmt|;
name|constructedGraph
operator|=
name|forwardChainingRefactoringGraph
operator|.
name|getOutputGraph
argument_list|()
expr_stmt|;
name|mGraph
operator|=
name|forwardChainingRefactoringGraph
operator|.
name|getInputGraph
argument_list|()
expr_stmt|;
break|break;
case|case
name|Reflexive
case|:
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLConstruct
case|:
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLDelete
case|:
name|constructedGraph
operator|=
name|sparqlUpdateOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLDeleteData
case|:
name|constructedGraph
operator|=
name|sparqlUpdateOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|constructedGraph
operator|!=
literal|null
condition|)
block|{
name|unionMGraph
operator|.
name|addAll
argument_list|(
name|constructedGraph
argument_list|)
expr_stmt|;
block|}
block|}
name|refactoredOntology
operator|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaMGraphToOWLOntology
argument_list|(
name|unionMGraph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|refactoredOntology
return|;
block|}
block|}
specifier|private
name|Graph
name|kReSCoreOperation
parameter_list|(
name|String
name|query
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
comment|/*          *           * Graph constructedGraph = null; try { ConstructQuery constructQuery = (ConstructQuery)          * QueryParser.getInstance() .parse(query); constructedGraph = tcManager.executeSparqlQuery(          * constructQuery, mGraph);          *           * } catch (ParseException e) { log.error(e.getMessage()); } catch (NoQueryEngineException e) {          * log.error(e.getMessage()); }          *           * return constructedGraph;          */
name|Model
name|model
init|=
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaModel
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
name|Query
name|sparqlQuery
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|query
argument_list|,
name|Syntax
operator|.
name|syntaxARQ
argument_list|)
decl_stmt|;
name|QueryExecution
name|qexec
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|sparqlQuery
argument_list|,
name|model
argument_list|)
decl_stmt|;
return|return
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaMGraph
argument_list|(
name|qexec
operator|.
name|execConstruct
argument_list|()
argument_list|)
operator|.
name|getGraph
argument_list|()
return|;
block|}
specifier|private
name|ForwardChainingRefactoringGraph
name|forwardChainingOperation
parameter_list|(
name|String
name|query
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
name|Graph
name|graph
init|=
name|kReSCoreOperation
argument_list|(
name|query
argument_list|,
name|mGraph
argument_list|)
decl_stmt|;
name|mGraph
operator|.
name|addAll
argument_list|(
name|graph
argument_list|)
expr_stmt|;
return|return
operator|new
name|ForwardChainingRefactoringGraph
argument_list|(
name|mGraph
argument_list|,
name|graph
argument_list|)
return|;
block|}
specifier|private
name|Graph
name|sparqlUpdateOperation
parameter_list|(
name|String
name|query
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
name|Model
name|model
init|=
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaModel
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
name|UpdateAction
operator|.
name|parseExecute
argument_list|(
name|query
argument_list|,
name|model
argument_list|)
expr_stmt|;
return|return
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaMGraph
argument_list|(
name|model
argument_list|)
operator|.
name|getGraph
argument_list|()
return|;
block|}
block|}
end_class

begin_class
class|class
name|ForwardChainingRefactoringGraph
block|{
specifier|private
name|MGraph
name|inputGraph
decl_stmt|;
specifier|private
name|Graph
name|outputGraph
decl_stmt|;
specifier|public
name|ForwardChainingRefactoringGraph
parameter_list|(
name|MGraph
name|inputGraph
parameter_list|,
name|Graph
name|outputGraph
parameter_list|)
block|{
name|this
operator|.
name|inputGraph
operator|=
name|inputGraph
expr_stmt|;
name|this
operator|.
name|outputGraph
operator|=
name|outputGraph
expr_stmt|;
block|}
specifier|public
name|MGraph
name|getInputGraph
parameter_list|()
block|{
return|return
name|inputGraph
return|;
block|}
specifier|public
name|Graph
name|getOutputGraph
parameter_list|()
block|{
return|return
name|outputGraph
return|;
block|}
block|}
end_class

end_unit

