begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|trasformation
package|;
end_package

begin_comment
comment|/**  *  * @author elvio  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|trasformation
operator|.
name|JenaToOwlConvert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|AnnotationProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAnnotationAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAnnotationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDatatype
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|DatatypeProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|iterator
operator|.
name|ExtendedIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDeclarationAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividualAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_class
specifier|public
class|class
name|ConversionTester
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RDFXML
init|=
literal|"RDF/XML"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|_BASE
init|=
literal|"http://example.org/dummy"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URI
name|CLAZZ
init|=
name|URI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"#"
operator|+
literal|"Peanut"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URI
name|SUBJECT
init|=
name|URI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"#"
operator|+
literal|"Lucy"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URI
name|OP
init|=
name|URI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"#"
operator|+
literal|"hasSibling"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URI
name|DP
init|=
name|URI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"#"
operator|+
literal|"hasAge"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URI
name|label
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://www.w3.org/2000/01/rdf-schema#label"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|clazzlabel
init|=
literal|"Peanut"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URI
name|DATATYPE
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema#int"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URI
name|OBJECT
init|=
name|URI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"#"
operator|+
literal|"Linus"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testAxiomOwlToJenaResource
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ont
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ont
operator|=
name|mgr
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Can not create ontology"
argument_list|)
expr_stmt|;
block|}
name|OWLDataFactory
name|factory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|StmtIterator
name|resource
init|=
literal|null
decl_stmt|;
name|OWLClass
name|cls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CLAZZ
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|dp
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|DP
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|op
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|OP
argument_list|)
argument_list|)
decl_stmt|;
name|OWLAnnotationProperty
name|oa
init|=
name|factory
operator|.
name|getOWLAnnotationProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|OWLAnnotation
name|oav
init|=
name|factory
operator|.
name|getOWLAnnotation
argument_list|(
name|oa
argument_list|,
name|factory
operator|.
name|getOWLStringLiteral
argument_list|(
name|clazzlabel
argument_list|,
literal|"en"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDatatype
name|dt
init|=
name|factory
operator|.
name|getOWLDatatype
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|DATATYPE
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|sub
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|SUBJECT
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|obj
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|OBJECT
argument_list|)
argument_list|)
decl_stmt|;
name|OWLLiteral
name|literal1
init|=
name|factory
operator|.
name|getOWLTypedLiteral
argument_list|(
name|VALUE
argument_list|,
name|dt
argument_list|)
decl_stmt|;
name|OWLDeclarationAxiom
name|daxiomcls
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|cls
argument_list|)
decl_stmt|;
comment|//Classe
name|OWLDeclarationAxiom
name|daxiomop
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|op
argument_list|)
decl_stmt|;
comment|//obj prop
name|OWLDeclarationAxiom
name|daxiomdp
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|dp
argument_list|)
decl_stmt|;
comment|//data prop
name|OWLDeclarationAxiom
name|daxiomsub
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|sub
argument_list|)
decl_stmt|;
comment|//subject
name|OWLDeclarationAxiom
name|daxiomobj
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|obj
argument_list|)
decl_stmt|;
comment|//object
name|OWLClassAssertionAxiom
name|axiomsub
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|cls
argument_list|,
name|sub
argument_list|)
decl_stmt|;
comment|//Istanza
name|OWLClassAssertionAxiom
name|axiomobj
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|cls
argument_list|,
name|obj
argument_list|)
decl_stmt|;
comment|//Istanza
name|OWLObjectPropertyAssertionAxiom
name|axiomop
init|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|op
argument_list|,
name|sub
argument_list|,
name|obj
argument_list|)
decl_stmt|;
comment|//Obj prop tra individui
name|OWLDataPropertyAssertionAxiom
name|axiomvalue
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|dp
argument_list|,
name|obj
argument_list|,
name|literal1
argument_list|)
decl_stmt|;
comment|//Dataprop all'istanza;
name|OWLAnnotationAssertionAxiom
name|axioman
init|=
name|factory
operator|.
name|getOWLAnnotationAssertionAxiom
argument_list|(
name|cls
operator|.
name|getIRI
argument_list|()
argument_list|,
name|oav
argument_list|)
decl_stmt|;
comment|//Annotazione
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomcls
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomop
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomdp
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomsub
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomobj
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomsub
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomobj
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomop
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomvalue
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axioman
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|setaxiom
init|=
name|ont
operator|.
name|getAxioms
argument_list|()
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|j2o
operator|.
name|AxiomOwlToJenaResource
argument_list|(
name|setaxiom
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors occur"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|statment
init|=
literal|"[http://www.w3.org/2000/01/rdf-schema#label, http://www.w3.org/2000/01/rdf-schema#range, http://www.w3.org/2000/01/rdf-schema#Literal] "
operator|+
literal|"[http://example.org/dummy#hasAge, http://www.w3.org/1999/02/22-rdf-syntax-ns#type, http://www.w3.org/2002/07/owl#DatatypeProperty] "
operator|+
literal|"[http://example.org/dummy#Linus, http://example.org/dummy#hasAge, \"8\"^^http://www.w3.org/2001/XMLSchema#int] "
operator|+
literal|"[http://example.org/dummy#Linus, http://www.w3.org/1999/02/22-rdf-syntax-ns#type, http://example.org/dummy#Peanut] "
operator|+
literal|"[http://example.org/dummy#hasSibling, http://www.w3.org/1999/02/22-rdf-syntax-ns#type, http://www.w3.org/2002/07/owl#ObjectProperty] "
operator|+
literal|"[http://example.org/dummy#Lucy, http://example.org/dummy#hasSibling, http://example.org/dummy#Linus] "
operator|+
literal|"[http://example.org/dummy#Lucy, http://www.w3.org/1999/02/22-rdf-syntax-ns#type, http://example.org/dummy#Peanut] "
operator|+
literal|"[http://www.w3.org/2000/01/rdf-schema#label, http://www.w3.org/1999/02/22-rdf-syntax-ns#type, http://www.w3.org/2002/07/owl#AnnotationProperty] "
operator|+
literal|"[http://example.org/dummy#Peanut, http://www.w3.org/2000/01/rdf-schema#label, \"Peanut\"@en] "
operator|+
literal|"[http://example.org/dummy#Peanut, http://www.w3.org/1999/02/22-rdf-syntax-ns#type, http://www.w3.org/2002/07/owl#Class]"
decl_stmt|;
name|int
name|size
init|=
name|setaxiom
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resource
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|stm
init|=
name|resource
operator|.
name|nextStatement
argument_list|()
decl_stmt|;
name|Resource
name|jsubj
init|=
name|stm
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|jsubj
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|OP
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|jsubj
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|DP
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|jsubj
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|CLAZZ
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|jsubj
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|OBJECT
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|jsubj
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|SUBJECT
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|jsubj
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|label
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|statment
operator|.
name|contains
argument_list|(
name|stm
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|size
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAnnotationPropJenaToOwl
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|AnnotationProperty
name|jp
init|=
name|model
operator|.
name|createAnnotationProperty
argument_list|(
name|label
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|OWLAnnotationProperty
name|wp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wp
operator|=
name|j2o
operator|.
name|AnnotationPropJenaToOwl
argument_list|(
name|jp
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|wp
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors occur"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|wp
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jp
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|wp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAnnotationPropOwlToJena
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLAnnotationProperty
name|wp
init|=
name|factory
operator|.
name|getOWLAnnotationProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|AnnotationProperty
name|jp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jp
operator|=
name|j2o
operator|.
name|AnnotationPropOwlToJena
argument_list|(
name|wp
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|jp
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors occur"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|wp
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jp
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|jp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testClassJenaToOwl
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|OntClass
name|jc
init|=
name|model
operator|.
name|createClass
argument_list|(
name|CLAZZ
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|OWLClass
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
name|j2o
operator|.
name|ClassJenaToOwl
argument_list|(
name|jc
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|wc
operator|==
literal|null
condition|)
name|fail
argument_list|(
literal|"Some problems accours"
argument_list|)
expr_stmt|;
else|else
block|{
name|assertEquals
argument_list|(
name|wc
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testClassOwlToJena
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLClass
name|c
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CLAZZ
argument_list|)
argument_list|)
decl_stmt|;
name|OntClass
name|jc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jc
operator|=
name|j2o
operator|.
name|ClassOwlToJena
argument_list|(
name|c
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|jc
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some problem accours"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|jc
operator|.
name|getURI
argument_list|()
argument_list|,
name|c
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caught"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|jc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDataPropJenaToOwl
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|DatatypeProperty
name|jp
init|=
name|model
operator|.
name|createDatatypeProperty
argument_list|(
name|DP
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|wp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wp
operator|=
name|j2o
operator|.
name|DataPropJenaToOwl
argument_list|(
name|jp
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|wp
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some problem accours"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|wp
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jp
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|wp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDataPropOwlToJena
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLDataProperty
name|dp
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|DP
argument_list|)
argument_list|)
decl_stmt|;
name|DatatypeProperty
name|jdp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jdp
operator|=
name|j2o
operator|.
name|DataPropOwlToJena
argument_list|(
name|dp
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|jdp
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors accour"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|jdp
operator|.
name|getURI
argument_list|()
argument_list|,
name|dp
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caught"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|jdp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testModelJenaToOwlConvert
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|String
name|dul
init|=
literal|"http://www.loa-cnr.it/ontologies/DUL.owl"
decl_stmt|;
name|OWLOntology
name|owl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|model
operator|.
name|read
argument_list|(
name|dul
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Could not load ontology"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|owl
operator|=
name|j2o
operator|.
name|ModelJenaToOwlConvert
argument_list|(
name|model
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|owl
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors occur"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExtendedIterator
argument_list|<
name|OntClass
argument_list|>
name|jenaclass
init|=
name|model
operator|.
name|listNamedClasses
argument_list|()
decl_stmt|;
name|int
name|jenaclassset
init|=
name|jenaclass
operator|.
name|toSet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|jenaclass
operator|=
name|model
operator|.
name|listNamedClasses
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|owlclass
init|=
name|owl
operator|.
name|getClassesInSignature
argument_list|()
decl_stmt|;
name|int
name|countclass
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|jenaclass
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
name|owlclass
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|jenaclass
operator|.
name|next
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
name|countclass
operator|++
expr_stmt|;
if|if
condition|(
name|countclass
operator|==
name|jenaclassset
condition|)
name|assertEquals
argument_list|(
name|countclass
argument_list|,
name|jenaclassset
argument_list|)
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"Error in number of classes"
argument_list|)
expr_stmt|;
name|ExtendedIterator
argument_list|<
name|ObjectProperty
argument_list|>
name|jenaprop
init|=
name|model
operator|.
name|listObjectProperties
argument_list|()
decl_stmt|;
name|int
name|jenapropset
init|=
name|jenaprop
operator|.
name|toSet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|jenaprop
operator|=
name|model
operator|.
name|listObjectProperties
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|OWLObjectProperty
argument_list|>
name|owlprop
init|=
name|owl
operator|.
name|getObjectPropertiesInSignature
argument_list|()
decl_stmt|;
name|int
name|countprop
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|jenaprop
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
name|owlprop
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|jenaprop
operator|.
name|next
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
name|countprop
operator|++
expr_stmt|;
if|if
condition|(
name|countprop
operator|==
name|jenapropset
condition|)
name|assertEquals
argument_list|(
name|countprop
argument_list|,
name|jenapropset
argument_list|)
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"Error in number of object properties"
argument_list|)
expr_stmt|;
name|ExtendedIterator
argument_list|<
name|DatatypeProperty
argument_list|>
name|jenadata
init|=
name|model
operator|.
name|listDatatypeProperties
argument_list|()
decl_stmt|;
name|int
name|jenadataset
init|=
name|jenadata
operator|.
name|toSet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|jenadata
operator|=
name|model
operator|.
name|listDatatypeProperties
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|OWLDataProperty
argument_list|>
name|owldata
init|=
name|owl
operator|.
name|getDataPropertiesInSignature
argument_list|()
decl_stmt|;
name|int
name|countdata
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|jenadata
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
name|owldata
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|jenadata
operator|.
name|next
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
name|countdata
operator|++
expr_stmt|;
if|if
condition|(
name|countdata
operator|==
name|jenadataset
condition|)
name|assertEquals
argument_list|(
name|countdata
argument_list|,
name|jenadataset
argument_list|)
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"Error in number of data properties"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|owl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testModelOwlToJenaConvert
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgrf
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mgrf
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|String
name|dul
init|=
literal|"http://www.loa-cnr.it/ontologies/DUL.owl"
decl_stmt|;
name|OWLOntology
name|owl
init|=
literal|null
decl_stmt|;
name|OntModel
name|jena
init|=
literal|null
decl_stmt|;
try|try
block|{
name|owl
operator|=
name|mgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|dul
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Could not load ontology"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|jena
operator|=
name|j2o
operator|.
name|ModelOwlToJenaConvert
argument_list|(
name|owl
argument_list|,
literal|"RDF/XML"
argument_list|)
expr_stmt|;
if|if
condition|(
name|jena
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors occur"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExtendedIterator
argument_list|<
name|OntClass
argument_list|>
name|jenaclass
init|=
name|jena
operator|.
name|listNamedClasses
argument_list|()
decl_stmt|;
name|int
name|jenaclassset
init|=
name|jenaclass
operator|.
name|toSet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|jenaclass
operator|=
name|jena
operator|.
name|listNamedClasses
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|OWLClass
argument_list|>
name|owlclass
init|=
name|owl
operator|.
name|getClassesInSignature
argument_list|()
decl_stmt|;
name|int
name|countclass
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|jenaclass
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
name|owlclass
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|jenaclass
operator|.
name|next
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
name|countclass
operator|++
expr_stmt|;
if|if
condition|(
name|countclass
operator|==
name|jenaclassset
condition|)
name|assertEquals
argument_list|(
name|countclass
argument_list|,
name|jenaclassset
argument_list|)
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"Error in number of classes"
argument_list|)
expr_stmt|;
name|ExtendedIterator
argument_list|<
name|ObjectProperty
argument_list|>
name|jenaprop
init|=
name|jena
operator|.
name|listObjectProperties
argument_list|()
decl_stmt|;
name|int
name|jenapropset
init|=
name|jenaprop
operator|.
name|toSet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|jenaprop
operator|=
name|jena
operator|.
name|listObjectProperties
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|OWLObjectProperty
argument_list|>
name|owlprop
init|=
name|owl
operator|.
name|getObjectPropertiesInSignature
argument_list|()
decl_stmt|;
name|int
name|countprop
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|jenaprop
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
name|owlprop
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|jenaprop
operator|.
name|next
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
name|countprop
operator|++
expr_stmt|;
if|if
condition|(
name|countprop
operator|==
name|jenapropset
condition|)
name|assertEquals
argument_list|(
name|countprop
argument_list|,
name|jenapropset
argument_list|)
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"Error in number of object properties"
argument_list|)
expr_stmt|;
name|ExtendedIterator
argument_list|<
name|DatatypeProperty
argument_list|>
name|jenadata
init|=
name|jena
operator|.
name|listDatatypeProperties
argument_list|()
decl_stmt|;
name|int
name|jenadataset
init|=
name|jenadata
operator|.
name|toSet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|jenadata
operator|=
name|jena
operator|.
name|listDatatypeProperties
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|OWLDataProperty
argument_list|>
name|owldata
init|=
name|owl
operator|.
name|getDataPropertiesInSignature
argument_list|()
decl_stmt|;
name|int
name|countdata
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|jenadata
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
name|owldata
operator|.
name|contains
argument_list|(
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|jenadata
operator|.
name|next
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
name|countdata
operator|++
expr_stmt|;
if|if
condition|(
name|countdata
operator|==
name|jenadataset
condition|)
name|assertEquals
argument_list|(
name|countdata
argument_list|,
name|jenadataset
argument_list|)
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"Error in number of data properties"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|jena
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testObjPropJenaToOwl
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|ObjectProperty
name|jp
init|=
name|model
operator|.
name|createObjectProperty
argument_list|(
name|OP
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|wp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wp
operator|=
name|j2o
operator|.
name|ObjPropJenaToOwl
argument_list|(
name|jp
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|wp
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors occurs"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|wp
operator|.
name|getIRI
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jp
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|wp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testObjPropOwlToJena
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLObjectProperty
name|op
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|OP
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectProperty
name|jop
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jop
operator|=
name|j2o
operator|.
name|ObjPropOwlToJena
argument_list|(
name|op
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|jop
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errore occurs"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|jop
operator|.
name|getURI
argument_list|()
argument_list|,
name|op
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caught"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|jop
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testResourceJenaToOwlAxiom
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|OntClass
name|jenaclass
init|=
name|model
operator|.
name|createClass
argument_list|(
name|CLAZZ
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectProperty
name|jenaobprop
init|=
name|model
operator|.
name|createObjectProperty
argument_list|(
name|OP
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DatatypeProperty
name|jenadataprop
init|=
name|model
operator|.
name|createDatatypeProperty
argument_list|(
name|DP
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Individual
name|jenasub
init|=
name|model
operator|.
name|createIndividual
argument_list|(
name|SUBJECT
operator|.
name|toString
argument_list|()
argument_list|,
name|jenaclass
argument_list|)
decl_stmt|;
name|Individual
name|jenaobj
init|=
name|model
operator|.
name|createIndividual
argument_list|(
name|OBJECT
operator|.
name|toString
argument_list|()
argument_list|,
name|jenaclass
argument_list|)
decl_stmt|;
name|AnnotationProperty
name|jenaanno
init|=
name|model
operator|.
name|createAnnotationProperty
argument_list|(
name|label
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Literal
name|value
init|=
name|model
operator|.
name|createTypedLiteral
argument_list|(
name|VALUE
argument_list|,
name|DATATYPE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|add
argument_list|(
name|jenasub
argument_list|,
name|jenaobprop
argument_list|,
name|jenaobj
argument_list|)
expr_stmt|;
name|model
operator|.
name|add
argument_list|(
name|jenasub
argument_list|,
name|jenadataprop
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|model
operator|.
name|add
argument_list|(
name|jenasub
argument_list|,
name|jenaanno
argument_list|,
literal|"Lucy"
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|owlaxiom
init|=
literal|null
decl_stmt|;
try|try
block|{
name|owlaxiom
operator|=
name|j2o
operator|.
name|ResourceJenaToOwlAxiom
argument_list|(
name|jenasub
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|owlaxiom
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors occur"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StmtIterator
name|str
init|=
name|model
operator|.
name|listStatements
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|str
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|stm
init|=
name|str
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|subject
init|=
name|stm
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|SUBJECT
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|subject
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
name|owlaxiom
operator|.
name|size
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|count
argument_list|,
name|owlaxiom
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The number of axioms don't match the number of statement"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|owlaxiom
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testEntityOwlToJenaResource
parameter_list|()
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ont
init|=
literal|null
decl_stmt|;
name|StmtIterator
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ont
operator|=
name|mgr
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Could not load ontology"
argument_list|)
expr_stmt|;
block|}
name|OWLDataFactory
name|factory
init|=
name|mgr
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLClass
name|cls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|CLAZZ
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|dp
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|DP
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|op
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|OP
argument_list|)
argument_list|)
decl_stmt|;
name|OWLAnnotationProperty
name|oa
init|=
name|factory
operator|.
name|getOWLAnnotationProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|OWLAnnotation
name|oav
init|=
name|factory
operator|.
name|getOWLAnnotation
argument_list|(
name|oa
argument_list|,
name|factory
operator|.
name|getOWLStringLiteral
argument_list|(
name|clazzlabel
argument_list|,
literal|"en"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDatatype
name|dt
init|=
name|factory
operator|.
name|getOWLDatatype
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|DATATYPE
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|sub
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|SUBJECT
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|obj
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|OBJECT
argument_list|)
argument_list|)
decl_stmt|;
name|OWLLiteral
name|literal1
init|=
name|factory
operator|.
name|getOWLTypedLiteral
argument_list|(
name|VALUE
argument_list|,
name|dt
argument_list|)
decl_stmt|;
name|OWLDeclarationAxiom
name|daxiomcls
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|cls
argument_list|)
decl_stmt|;
comment|//Classe
name|OWLDeclarationAxiom
name|daxiomop
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|op
argument_list|)
decl_stmt|;
comment|//obj prop
name|OWLDeclarationAxiom
name|daxiomdp
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|dp
argument_list|)
decl_stmt|;
comment|//data prop
name|OWLDeclarationAxiom
name|daxiomsub
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|sub
argument_list|)
decl_stmt|;
comment|//subject
name|OWLDeclarationAxiom
name|daxiomobj
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|obj
argument_list|)
decl_stmt|;
comment|//object
name|OWLClassAssertionAxiom
name|axiomsub
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|cls
argument_list|,
name|sub
argument_list|)
decl_stmt|;
comment|//Istanza
name|OWLClassAssertionAxiom
name|axiomobj
init|=
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|cls
argument_list|,
name|obj
argument_list|)
decl_stmt|;
comment|//Istanza
name|OWLObjectPropertyAssertionAxiom
name|axiomop
init|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|op
argument_list|,
name|sub
argument_list|,
name|obj
argument_list|)
decl_stmt|;
comment|//Obj prop tra individui
name|OWLDataPropertyAssertionAxiom
name|axiomvalue
init|=
name|factory
operator|.
name|getOWLDataPropertyAssertionAxiom
argument_list|(
name|dp
argument_list|,
name|sub
argument_list|,
name|literal1
argument_list|)
decl_stmt|;
comment|//Dataprop all'istanza;
name|OWLAnnotationAssertionAxiom
name|axioman
init|=
name|factory
operator|.
name|getOWLAnnotationAssertionAxiom
argument_list|(
name|cls
operator|.
name|getIRI
argument_list|()
argument_list|,
name|oav
argument_list|)
decl_stmt|;
comment|//Annotazione
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomcls
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomop
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomdp
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomsub
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|daxiomobj
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomsub
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomobj
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomop
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiomvalue
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axioman
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OWLIndividualAxiom
argument_list|>
name|ind
init|=
name|ont
operator|.
name|getAxioms
argument_list|(
name|sub
argument_list|)
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|j2o
operator|.
name|EntityOwlToJenaResource
argument_list|(
name|daxiomsub
operator|.
name|getEntity
argument_list|()
argument_list|,
name|ont
argument_list|,
name|RDFXML
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Some errors accour"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|cont
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resource
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|stm
init|=
name|resource
operator|.
name|nextStatement
argument_list|()
decl_stmt|;
name|IRI
name|subres
init|=
name|IRI
operator|.
name|create
argument_list|(
name|stm
operator|.
name|getSubject
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|"<"
operator|+
name|subres
operator|+
literal|">"
operator|)
operator|.
name|equals
argument_list|(
name|daxiomsub
operator|.
name|getEntity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|cont
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ind
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|cont
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception caugth"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

