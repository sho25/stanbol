begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_comment
comment|/**  * An interface providing the basic, implementation-independent storage  * functions for OWL ontologies.  *   * @author alessandro  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|OntologyStorage
block|{
comment|/** 	 * Clears the ontology storage system of all it content. 	 */
specifier|public
name|void
name|clear
parameter_list|()
function_decl|;
comment|/** 	 * Removes every occurrence of the ontology identified by {@code ontologyId} 	 * from the storage system. 	 *  	 * @param ontologyId 	 *            the IRI that identifies the ontology to be deleted. 	 */
specifier|public
name|void
name|delete
parameter_list|(
name|IRI
name|ontologyId
parameter_list|)
function_decl|;
comment|/** 	 * Removes every occurrence of the ontologies identified by {@code 	 * ontologyIds} from the storage system. 	 *  	 * @param ontologyId 	 *            the IRIs that identify the ontologies to be deleted. 	 */
specifier|public
name|void
name|deleteAll
parameter_list|(
name|Set
argument_list|<
name|IRI
argument_list|>
name|ontologyIds
parameter_list|)
function_decl|;
comment|/** 	 * Obtains an {@code OWLOntology} representation of the ontology logically 	 * identified by {@code ontologyId}. How the ontology is fetched is at the 	 * discretion of implementations, which may arbitrarily try to physically 	 * dereference the IRI or use it as an identifier to retrieve the ontlology 	 * from a triplestore. 	 *  	 * @param ontologyId 	 *            the<i<logical</i> identifier of the ontology. 	 * @return an {@code OWLOntology} representation of the ontology. 	 */
specifier|public
name|OWLOntology
name|load
parameter_list|(
name|IRI
name|ontologyId
parameter_list|)
function_decl|;
comment|/** 	 * Saves the {@code OWLOntology} object to a persistence space. 	 *  	 * @param o 	 *            the ontology to be stored. 	 */
specifier|public
name|void
name|store
parameter_list|(
name|OWLOntology
name|o
parameter_list|)
function_decl|;
specifier|public
name|void
name|store
parameter_list|(
name|OWLOntology
name|o
parameter_list|,
name|IRI
name|ontologyID
parameter_list|)
function_decl|;
specifier|public
name|OWLOntology
name|sparqlConstruct
parameter_list|(
name|String
name|sparql
parameter_list|,
name|String
name|datasetURI
parameter_list|)
function_decl|;
specifier|public
name|Set
argument_list|<
name|IRI
argument_list|>
name|listGraphs
parameter_list|()
function_decl|;
specifier|public
name|OWLOntology
name|getGraph
parameter_list|(
name|IRI
name|ontologyID
parameter_list|)
throws|throws
name|NoSuchStoreException
function_decl|;
block|}
end_interface

end_unit

