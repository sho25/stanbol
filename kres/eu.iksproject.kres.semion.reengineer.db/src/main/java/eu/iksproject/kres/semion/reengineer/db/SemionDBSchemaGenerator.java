begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|reengineer
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|settings
operator|.
name|ConnectionSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|util
operator|.
name|SemionUriRefGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|ontologies
operator|.
name|DBS_L1_OWL
import|;
end_import

begin_comment
comment|/**  * The {@code SemionDBSchemaGenerator} is responsible of the generation of the RDF of the schema of a relational database.  *   * @author andrea.nuzzolese  *  */
end_comment

begin_class
specifier|public
class|class
name|SemionDBSchemaGenerator
extends|extends
name|SemionUriRefGenerator
implements|implements
name|Serializable
block|{
specifier|private
name|String
name|graphNS
decl_stmt|;
specifier|private
name|IRI
name|outputIRI
decl_stmt|;
specifier|private
name|ConnectionSettings
name|connectionSettings
decl_stmt|;
comment|/** 	 * Creates a new standard {@code SemionDBSchemaGenerator}  	 */
specifier|public
name|SemionDBSchemaGenerator
parameter_list|()
block|{ 		 	}
comment|/** 	 * Creates a new {@code SemionDBSchemaGenerator} that can generate the RDF of the database's schema. The database is available 	 * thanks to the {@code connectionSettings} passed as input. The URI of the RDF will be that one passed as actual parameter to the 	 * formal parameter {@code databaseURI}. 	 *  	 * @param databaseURI {@link String} 	 * @param connectionSettings {@link ConnectionSettings} 	 */
specifier|public
name|SemionDBSchemaGenerator
parameter_list|(
name|IRI
name|outputIRI
parameter_list|,
name|ConnectionSettings
name|connectionSettings
parameter_list|)
block|{
name|this
operator|.
name|connectionSettings
operator|=
name|connectionSettings
expr_stmt|;
name|this
operator|.
name|outputIRI
operator|=
name|outputIRI
expr_stmt|;
block|}
comment|/** 	 * Performs the generation of the RDF of the database schema. The RDF graph is added to the {@link MGraph} passed as input. 	 *   	 *  	 * @param mGraph {@link MGraph} 	 * @return the {@link MGraph} containing the database schema into RDF. 	 */
specifier|public
name|OWLOntology
name|getSchema
parameter_list|(
name|OWLOntologyManager
name|manager
parameter_list|,
name|OWLDataFactory
name|factory
parameter_list|)
block|{
name|Connection
name|con
init|=
name|openConnection
argument_list|(
name|connectionSettings
argument_list|)
decl_stmt|;
comment|/* 		Model schemaModel = ModelFactory.createDefaultModel(); 		schemaModel.setNsPrefixes(DBS_L1.getModel().getNsPrefixMap());		 		schemaModel.setNsPrefix("dbSchema", namespace); 		schemaModel.setNsPrefix("xsd", "http://www.w3.org/2001/XMLSchema#"); 		schemaModel.setNsPrefix("dbs", DBS_L1.NS); 		*/
name|OWLOntology
name|schemaOntology
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outputIRI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|schemaOntology
operator|=
name|manager
operator|.
name|createOntology
argument_list|(
name|outputIRI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|schemaOntology
operator|=
name|manager
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|graphNS
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|graphNS
operator|+=
literal|"#"
expr_stmt|;
block|}
name|IRI
name|databaseConnectionInfoIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
literal|"DBConnectionSettings"
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|databaseConnectionInfo
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|DatabaseConnection
argument_list|,
name|databaseConnectionInfoIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|databaseConnectionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasName
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
literal|"database_"
operator|+
name|outputIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasPhysicalName
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
name|connectionSettings
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasJDBCDriver
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
name|connectionSettings
operator|.
name|getJDBCDriver
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasJDBCDns
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
name|getConnectionUrl
argument_list|(
name|connectionSettings
operator|.
name|getUrl
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getServerName
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getPortNumber
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasUsername
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
name|connectionSettings
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasPassword
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
name|connectionSettings
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DatabaseMetaData
name|md
decl_stmt|;
try|try
block|{
name|md
operator|=
name|con
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|md
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"%"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rdfs
init|=
literal|"http://www.w3.org/2000/01/rdf-schema#"
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|rs
operator|.
name|next
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|String
name|table
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TABLE : "
operator|+
name|table
argument_list|)
expr_stmt|;
name|IRI
name|tableResourceIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
literal|"table_"
operator|+
name|table
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|tableResource
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|Table
argument_list|,
name|tableResourceIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|tableResource
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasName
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
literal|"table_"
operator|+
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isTableOf
argument_list|,
name|tableResourceIRI
argument_list|,
name|databaseConnectionInfoIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isDumped
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|RDFS_LABEL
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasTable
argument_list|,
name|databaseConnectionInfoIRI
argument_list|,
name|tableResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|catalog
init|=
name|con
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
name|ResultSet
name|fk
init|=
name|md
operator|.
name|getImportedKeys
argument_list|(
name|catalog
argument_list|,
literal|null
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|ResultSet
name|pk
init|=
name|md
operator|.
name|getPrimaryKeys
argument_list|(
name|catalog
argument_list|,
literal|null
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|ResultSet
name|columnsRs
init|=
name|md
operator|.
name|getColumns
argument_list|(
name|catalog
argument_list|,
literal|null
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|columnsRs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
name|columnsRs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
decl_stmt|;
name|String
name|columnType
init|=
name|columnsRs
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
decl_stmt|;
name|String
name|columnNullable
init|=
name|columnsRs
operator|.
name|getString
argument_list|(
literal|"NULLABLE"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COLUMN NAME : "
operator|+
name|columnName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COLUMN TYPE : "
operator|+
name|columnType
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COLUMN NULLABLE : "
operator|+
name|columnNullable
argument_list|)
expr_stmt|;
name|boolean
name|nullable
init|=
literal|true
decl_stmt|;
try|try
block|{
name|int
name|nullableInt
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|columnNullable
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|nullable
operator|=
name|nullableInt
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|nullable
operator|=
literal|true
expr_stmt|;
block|}
name|IRI
name|colummIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
name|table
operator|+
literal|"-column_"
operator|+
name|columnName
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|columm
decl_stmt|;
if|if
condition|(
name|nullable
condition|)
block|{
name|columm
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|NullableColumn
argument_list|,
name|colummIRI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columm
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|NotNullableColumn
argument_list|,
name|colummIRI
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|columm
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnType
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasSQLType
argument_list|,
name|colummIRI
argument_list|,
name|columnType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnName
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasName
argument_list|,
name|colummIRI
argument_list|,
name|table
operator|+
literal|"-column_"
operator|+
name|columnName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isColumnOf
argument_list|,
name|colummIRI
argument_list|,
name|tableResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|RDFS_LABEL
argument_list|,
name|colummIRI
argument_list|,
name|columnName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isColumnOf
argument_list|,
name|tableResourceIRI
argument_list|,
name|colummIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TablePKRelations
argument_list|>
name|relationTable
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TablePKRelations
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|fk
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|fkTableName
init|=
name|fk
operator|.
name|getString
argument_list|(
literal|"FKTABLE_NAME"
argument_list|)
decl_stmt|;
name|String
name|fkColumnName
init|=
name|fk
operator|.
name|getString
argument_list|(
literal|"FKCOLUMN_NAME"
argument_list|)
decl_stmt|;
name|String
name|pkTableName
init|=
name|fk
operator|.
name|getString
argument_list|(
literal|"PKTABLE_NAME"
argument_list|)
decl_stmt|;
name|String
name|pkColumnName
init|=
name|fk
operator|.
name|getString
argument_list|(
literal|"PKCOLUMN_NAME"
argument_list|)
decl_stmt|;
name|IRI
name|foreignKeyResourceIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
name|table
operator|+
literal|"_fk_"
operator|+
name|fkColumnName
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|foreignKeyResource
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|ForeignKey
argument_list|,
name|foreignKeyResourceIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|foreignKeyResource
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JOIN ON COLUMN "
operator|+
name|pkColumnName
argument_list|)
expr_stmt|;
name|IRI
name|columnIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
name|table
operator|+
literal|"-column_"
operator|+
name|fkColumnName
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasForeignKeyMember
argument_list|,
name|foreignKeyResourceIRI
argument_list|,
name|columnIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isForeignKeyMemberOf
argument_list|,
name|columnIRI
argument_list|,
name|foreignKeyResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IRI
name|joinColumnIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
name|pkTableName
operator|+
literal|"-column_"
operator|+
name|pkColumnName
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|joinColumn
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|NotNullableColumn
argument_list|,
name|joinColumnIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|joinColumn
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|joinsOn
argument_list|,
name|columnIRI
argument_list|,
name|joinColumnIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasForeignKey
argument_list|,
name|tableResourceIRI
argument_list|,
name|foreignKeyResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isForeignKeyOf
argument_list|,
name|foreignKeyResourceIRI
argument_list|,
name|tableResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|fkSequence
init|=
name|fk
operator|.
name|getInt
argument_list|(
literal|"KEY_SEQ"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fkTableName
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getExportedKeys(): fkTableName="
operator|+
name|fkTableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fkColumnName
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getExportedKeys(): fkColumnName="
operator|+
name|fkColumnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pkTableName
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getExportedKeys(): pkTableName="
operator|+
name|pkTableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pkColumnName
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getExportedKeys(): pkColumnName="
operator|+
name|pkColumnName
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getExportedKeys(): fkSequence="
operator|+
name|fkSequence
argument_list|)
expr_stmt|;
name|TablePKRelations
name|tableRelations
init|=
name|relationTable
operator|.
name|remove
argument_list|(
name|fkTableName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pkTableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableRelations
operator|==
literal|null
condition|)
block|{
name|tableRelations
operator|=
operator|new
name|TablePKRelations
argument_list|(
name|fkTableName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|pkTableName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tableRelations NOT NULL "
operator|+
name|tableRelations
operator|.
name|getPkTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fkArrayList
init|=
name|tableRelations
operator|.
name|getFkColumns
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|pkArrayList
init|=
name|tableRelations
operator|.
name|getPkColumns
argument_list|()
decl_stmt|;
name|fkArrayList
operator|.
name|add
argument_list|(
name|fkColumnName
argument_list|)
expr_stmt|;
name|pkArrayList
operator|.
name|add
argument_list|(
name|pkColumnName
argument_list|)
expr_stmt|;
name|tableRelations
operator|.
name|setFkColumns
argument_list|(
name|fkArrayList
argument_list|)
expr_stmt|;
name|tableRelations
operator|.
name|setPkColumns
argument_list|(
name|pkArrayList
argument_list|)
expr_stmt|;
name|relationTable
operator|.
name|put
argument_list|(
name|fkTableName
argument_list|,
name|tableRelations
argument_list|)
expr_stmt|;
block|}
name|fk
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|pk
operator|.
name|next
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|colPk
init|=
name|pk
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|IRI
name|primaryKeyIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
name|table
operator|+
literal|"_pk_"
operator|+
name|colPk
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|primaryKey
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|PrimaryKey
argument_list|,
name|primaryKeyIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|primaryKey
argument_list|)
argument_list|)
expr_stmt|;
name|IRI
name|columnIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
name|table
operator|+
literal|"-column_"
operator|+
name|colPk
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasPrimaryKeyMember
argument_list|,
name|primaryKeyIRI
argument_list|,
name|columnIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isPrimaryKeyMemberOf
argument_list|,
name|columnIRI
argument_list|,
name|primaryKeyIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|hasPrimaryKey
argument_list|,
name|tableResourceIRI
argument_list|,
name|primaryKeyIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|DBS_L1_OWL
operator|.
name|isPrimaryKeyOf
argument_list|,
name|primaryKeyIRI
argument_list|,
name|tableResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pk
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|schemaOntology
return|;
block|}
comment|/* 	public Model getSchemaL1(){ 		 		Connection con = openConnection(connectionSettings); 		 		Model schemaModel = ModelFactory.createDefaultModel(); 		 		schemaModel.setNsPrefixes(DBS_L1.getModel().getNsPrefixMap());		 		schemaModel.setNsPrefix("dbSchema", namespace); 		schemaModel.setNsPrefix("xsd", "http://www.w3.org/2001/XMLSchema#"); 		schemaModel.setNsPrefix("dbs", DBS_L1.NS); 		 		Resource database = schemaModel.createResource(namespace+databaseURI, DBS_L1.DatabaseConnection); 		database.addLiteral(DBS_L1.hasName, "database_"+databaseURI); 		database.addProperty(DBS_L1.hasPhysicalName, connectionSettings.getDatabaseName()); 		database.addProperty(DBS_L1.hasJDBCDriver, connectionSettings.getJDBCDriver()); 		database.addProperty(DBS_L1.hasJDBCDns, getConnectionUrl(connectionSettings.getUrl(), connectionSettings.getServerName(), connectionSettings.getPortNumber(), connectionSettings.getDatabaseName())); 		database.addProperty(DBS_L1.hasUsername, connectionSettings.getUserName()); 		database.addProperty(DBS_L1.hasPassword, connectionSettings.getPassword()); 		 		 		 		 		DatabaseMetaData md; 		try { 			md = con.getMetaData(); 			 			ResultSet rs = md.getTables(null, null, "%", null); 			 			String rdfs = "http://www.w3.org/2000/01/rdf-schema#"; 			 			for(int k=0; rs.next(); k++) { 		    	String table = rs.getString(3); 		    	System.out.println("TABLE : "+table); 		    	 		    	Resource tableResource = schemaModel.createResource(namespace+"table_"+table, DBS_L1.Table); 		    	tableResource.addLiteral(DBS_L1.hasName, "table_"+table); 		    	tableResource.addProperty(DBS_L1.isTableOf, database); 		    	tableResource.addLiteral(DBS_L1.isDumped, false); 		    	tableResource.addLiteral(RDFS.label, table); 		    	database.addProperty(DBS_L1.hasTable, tableResource); 		    	 		    	String catalog = con.getCatalog(); 		    	 		    	ResultSet fk = md.getImportedKeys(catalog, null, table); 		    	 		    	ResultSet pk = md.getPrimaryKeys(catalog, null, table); 		    	 		    	ResultSet columnsRs = md.getColumns(catalog, null, table, null); 		    	 		    	 		    	 		    	while(columnsRs.next()){ 		    		String columnName = columnsRs.getString("COLUMN_NAME"); 		    		String columnType = columnsRs.getString("TYPE_NAME"); 		    		String columnNullable = columnsRs.getString("NULLABLE"); 		    		System.out.println("COLUMN NAME : "+columnName); 		    		System.out.println("COLUMN TYPE : "+columnType); 		    		System.out.println("COLUMN NULLABLE : "+columnNullable); 		    		 		    		boolean nullable = true; 		    		try{ 		    			int nullableInt = Integer.valueOf(columnNullable).intValue(); 		    			 		    			nullable = nullableInt == 0 ? false : true; 		    			 		    			 		    		} catch (NumberFormatException e) { 						nullable = true; 					} 		    		 		    		Resource columm; 		    		if(nullable){ 		    			columm = schemaModel.createResource(namespace+table+"-column_"+columnName, DBS_L1.NullableColumn); 		    		} 		    		else{ 		    			columm = schemaModel.createResource(namespace+table+"-column_"+columnName, DBS_L1.NotNullableColumn); 		    		} 		    		 		    		if(columnType != null){ 		    			columm.addLiteral(DBS_L1.hasSQLType, columnType); 		    		} 		    		if(columnName != null){ 		    			columm.addLiteral(DBS_L1.hasName, table+"-column_"+columnName); 		    		} 		    		columm.addProperty(DBS_L1.isColumnOf, tableResource); 		    		 		    		columm.addLiteral(RDFS.label, columnName); 		    		 		    		//asserisco l'inversa di isFieldOf 		    		tableResource.addProperty(DBS_L1.hasColumn, columm); 		    		 		    	} 		    	 		    	 		    	Hashtable<String, TablePKRelations> relationTable = new Hashtable<String, TablePKRelations>(); 		    	 		    	while (fk.next()) { 		    		String fkTableName = fk.getString("FKTABLE_NAME"); 		    		String fkColumnName = fk.getString("FKCOLUMN_NAME"); 		    		String pkTableName = fk.getString("PKTABLE_NAME"); 		    		String pkColumnName = fk.getString("PKCOLUMN_NAME"); 		    		 		    		Resource foreignKeyResource = schemaModel.createResource(namespace+table+"_fk_"+fkColumnName, DBS_L1.ForeignKey); 		    		 		    		 		    		System.out.println("JOIN ON COLUMN "+pkColumnName); 		    		Resource column = schemaModel.createResource(namespace+table+"-column_"+fkColumnName); 		    		foreignKeyResource.addProperty(DBS_L1.hasForeignKeyMember, column); 		    		column.addProperty(DBS_L1.isForeignKeyMemberOf, foreignKeyResource); 		    		 		    		column.addProperty(DBS_L1.joinsOn, schemaModel.createResource(namespace+pkTableName+"-column_"+pkColumnName, DBS_L1.NotNullableColumn)); 		    		 		    		tableResource.addProperty(DBS_L1.hasForeignKey, foreignKeyResource); 		    		foreignKeyResource.addProperty(DBS_L1.isForeignKeyOf, tableResource); 		    		 		    		int fkSequence = fk.getInt("KEY_SEQ"); 	    	       	if(fkTableName != null){ 	    	    	   System.out.println("getExportedKeys(): fkTableName="+fkTableName); 	    	       	} 	    	       	if(fkColumnName != null){ 	    	    	   System.out.println("getExportedKeys(): fkColumnName="+fkColumnName); 	    	       	} 	    	       	if(pkTableName != null){ 	    	       		System.out.println("getExportedKeys(): pkTableName="+pkTableName); 	    	       	} 	    	       	if(pkColumnName != null){ 	    	       		System.out.println("getExportedKeys(): pkColumnName="+pkColumnName); 	    	       	} 	    	       	System.out.println("getExportedKeys(): fkSequence="+fkSequence); 	    	       	 	    	       	 	    	       	TablePKRelations tableRelations = relationTable.remove(fkTableName); 	    	       	System.out.println(); 	    	       	System.out.println(pkTableName); 	    	       	if(tableRelations == null){ 	    	       		tableRelations = new TablePKRelations(fkTableName, new ArrayList<String>(), new ArrayList<String>(), pkTableName); 	    	       		System.out.println("NULL"); 	    	       	} 	    	       	else{ 	    	       		System.out.println("tableRelations NOT NULL "+tableRelations.getPkTable()); 	    	       	} 	    	       	System.out.println(); 	    	       	System.out.println(); 	    	       	 	    	       	ArrayList<String> fkArrayList = tableRelations.getFkColumns(); 	    	       	ArrayList<String> pkArrayList = tableRelations.getPkColumns(); 	    	       	fkArrayList.add(fkColumnName); 	    	       	pkArrayList.add(pkColumnName); 	    	       	 	    	       	tableRelations.setFkColumns(fkArrayList); 	    	       	tableRelations.setPkColumns(pkArrayList); 	    	       	 	    	       	relationTable.put(fkTableName, tableRelations); 	    	       	 		    	} 		    	 		    	 		    	fk.close(); 		    	 		    	for(int i=0; pk.next(); i++){ 		    		String colPk = pk.getString(4); 		    		 		    		Resource primaryKey = schemaModel.createResource(namespace+table+"_pk_"+colPk, DBS_L1.PrimaryKey); 		    		 		    		Resource column = schemaModel.createResource(namespace+table+"-column_"+colPk); 		    		 		    		primaryKey.addProperty(DBS_L1.hasPrimaryKeyMember, column); 		    		column.addProperty(DBS_L1.isPrimaryKeyMemberOf, primaryKey); 		    		 		    		tableResource.addProperty(DBS_L1.hasPrimaryKey, primaryKey); 		    		primaryKey.addProperty(DBS_L1.isPrimaryKeyOf, tableResource); 		    	} 		    	 		    	 		    	 		    	pk.close(); 		    	 		    	 			} 			 		} catch (SQLException e) { 			// TODO Auto-generated catch block 			e.printStackTrace(); 		} 		 		 		 		return schemaModel; 	} 	 	*/
specifier|private
name|String
name|getConnectionUrl
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|serverName
parameter_list|,
name|String
name|portNumber
parameter_list|,
name|String
name|databaseName
parameter_list|)
block|{
return|return
name|url
operator|+
name|serverName
operator|+
literal|":"
operator|+
name|portNumber
operator|+
literal|"/"
operator|+
name|databaseName
return|;
block|}
specifier|private
name|Connection
name|openConnection
parameter_list|(
name|ConnectionSettings
name|connectionSettings
parameter_list|)
block|{
name|Connection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|connectionSettings
operator|.
name|getJDBCDriver
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getConnectionUrl
argument_list|(
name|connectionSettings
operator|.
name|getUrl
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getServerName
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getPortNumber
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|getConnectionUrl
argument_list|(
name|connectionSettings
operator|.
name|getUrl
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getServerName
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getPortNumber
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
argument_list|,
name|connectionSettings
operator|.
name|getUserName
argument_list|()
argument_list|,
name|connectionSettings
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|con
return|;
block|}
specifier|private
name|void
name|closeConnection
parameter_list|(
name|Connection
name|con
parameter_list|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

