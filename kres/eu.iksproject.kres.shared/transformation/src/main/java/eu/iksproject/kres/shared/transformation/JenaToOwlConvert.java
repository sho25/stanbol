begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|shared
operator|.
name|transformation
package|;
end_package

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|AnnotationProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|DatatypeProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|coode
operator|.
name|owlapi
operator|.
name|turtle
operator|.
name|TurtleOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAnnotationAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAnnotationAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAnnotationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataPropertyAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDatatype
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDatatypeDefinitionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDeclarationAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividualAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectPropertyAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  * @author andrea.nuzzolese  */
end_comment

begin_class
specifier|public
class|class
name|JenaToOwlConvert
block|{
specifier|private
name|boolean
name|available
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|availablemain
init|=
literal|true
decl_stmt|;
specifier|public
name|JenaToOwlConvert
parameter_list|()
block|{}
comment|////////////////////////////////////////////////////////////////////////////////
comment|//////////////////////////////FUNCTIONS/////////////////////////////////////////
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts an ontology object from Jena to OWLapi  *  * @param jenamodel {An OntModel object}  * @param format {only in "RDF/XML"}  * @return {An OWLOntology  that is an owl object}  */
specifier|public
specifier|synchronized
name|OWLOntology
name|ModelJenaToOwlConvert
parameter_list|(
name|Model
name|jenamodel
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|availablemain
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ModelJenaToOwlConvert::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|availablemain
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|format
operator|.
name|equals
argument_list|(
literal|"RDF/XML"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The only format supported is RDF/XML. Please check the format!"
argument_list|)
expr_stmt|;
name|availablemain
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|jenamodel
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|owlmanager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|owlmodel
init|=
name|owlmanager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|availablemain
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|owlmodel
return|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ModelJenaToOwlConvert::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**  * This function converts an ontology object from Jena to OWLapi  *  * @param jenamodel {An OntModel object}  * @param format {only in "RDF/XML"}  * @return {An OWLOntology  that is an owl object}  */
specifier|public
specifier|synchronized
name|OWLOntology
name|ModelJenaToOwlConvert
parameter_list|(
name|IRI
name|ontologyIRI
parameter_list|,
name|Model
name|jenamodel
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|availablemain
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ModelJenaToOwlConvert::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|availablemain
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|format
operator|.
name|equals
argument_list|(
literal|"RDF/XML"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The only format supported is RDF/XML. Please check the format!"
argument_list|)
expr_stmt|;
name|availablemain
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|jenamodel
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|owlmanager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|owlmanager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|owlmanager
argument_list|)
decl_stmt|;
name|OWLOntology
name|ontology
init|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|owlmanager
argument_list|,
name|ontologyIRI
argument_list|)
decl_stmt|;
name|availablemain
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|ontology
return|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ModelJenaToOwlConvert::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts an ontology object from OWLapi to Jena  *  * @param owlmodel {An OWLOntology object}  * @param format {RDF/XML or TURTLE}  * @return {An OntModel that is a Jena object}  */
specifier|public
specifier|synchronized
name|OntModel
name|ModelOwlToJenaConvert
parameter_list|(
name|OWLOntology
name|owlmodel
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|availablemain
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ModelOwlToJenaConvert::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|availablemain
operator|=
literal|false
expr_stmt|;
name|OWLOntologyID
name|id
decl_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|owlmanager
init|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
name|format
operator|=
name|format
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"TURTLE"
argument_list|)
operator|||
name|format
operator|.
name|equals
argument_list|(
literal|"RDF/XML"
argument_list|)
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"TURTLE"
argument_list|)
condition|)
name|owlmanager
operator|.
name|setOntologyFormat
argument_list|(
name|owlmodel
argument_list|,
operator|new
name|TurtleOntologyFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|equals
argument_list|(
literal|"RDF/XML"
argument_list|)
condition|)
name|owlmanager
operator|.
name|setOntologyFormat
argument_list|(
name|owlmodel
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntologyFormat
name|owlformat
init|=
name|owlmanager
operator|.
name|getOntologyFormat
argument_list|(
name|owlmodel
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|saveOntology
argument_list|(
name|owlmodel
argument_list|,
name|owlformat
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|id
operator|=
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
expr_stmt|;
name|jenamodel
operator|.
name|read
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|id
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|availablemain
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|jenamodel
return|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The only format supported is RDF/XML or TURTLE. Please check the format!"
argument_list|)
expr_stmt|;
name|availablemain
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|eos
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ModelOwlToJenaConvert::: "
argument_list|)
expr_stmt|;
name|eos
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts every statments relative to a resource in an a set of OWLAxiom objects  *  * @param jenadata {A resource in the form (S,P,O), it could be any kind of resource (a class, a data property, an object property and an instance) except a litteral}  * @param format {The format of the ontology, i.e. "RDF/XML"}  * @return {A set of axiom in the form of Set<OWLAxiom>}  */
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|ResourceJenaToOwlAxiom
parameter_list|(
name|Resource
name|jenadata
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ResourceJenaToOwlAxiom::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|StmtIterator
name|prop
init|=
name|jenadata
operator|.
name|listProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|prop
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|stat
init|=
name|prop
operator|.
name|nextStatement
argument_list|()
decl_stmt|;
name|model
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|RDFNode
name|obj
init|=
name|stat
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|isResource
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|obj
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
name|StmtIterator
name|aux
init|=
operator|(
operator|(
name|Resource
operator|)
name|obj
operator|)
operator|.
name|listProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|aux
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|stataux
init|=
name|aux
operator|.
name|nextStatement
argument_list|()
decl_stmt|;
name|model
operator|.
name|add
argument_list|(
name|stataux
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|OWLOntology
name|owlmodel
init|=
name|ModelJenaToOwlConvert
argument_list|(
name|model
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|owlmodel
operator|.
name|getAxioms
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ResourceJenaToOwlAxiom::: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a set of OWLAxiom in an iterator over jena statements  *  * @param axioms  {A set of aximos}  * @param format {RDF/XML or TURTLE}  * @return {An iterator over statments}  */
specifier|public
specifier|synchronized
name|StmtIterator
name|AxiomOwlToJenaResource
parameter_list|(
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|axioms
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"AxiomOwlToJenaResource::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontology
init|=
name|manager
operator|.
name|createOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.semanticweb.org/owlapi/ontologies/ontology"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OWLAxiom
argument_list|>
name|axiom
init|=
name|axioms
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|axiom
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|axiom
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelOwlToJenaConvert
argument_list|(
name|ontology
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|jenamodel
operator|.
name|listStatements
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"AxiomOwlToJenaResource::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts any thingths relatives to an OWL entity in an iterator over Jena statement  *  * @param entity {It could be a class, an object property or a data property}  * @param owlmodel {OWLOntology model where to retrieve information about the entity}  * @param format {RDF/XML or TURTLE}  * @return {An iterator over jena statement}  */
specifier|public
specifier|synchronized
name|StmtIterator
name|EntityOwlToJenaResource
parameter_list|(
name|OWLEntity
name|entity
parameter_list|,
name|OWLOntology
name|owlmodel
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"EntityOwlToJenaResource::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontology
init|=
name|manager
operator|.
name|createOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.semanticweb.org/owlapi/ontologies/ontology"
argument_list|)
argument_list|)
decl_stmt|;
comment|//If the entity is a class
if|if
condition|(
name|entity
operator|.
name|isOWLClass
argument_list|()
condition|)
block|{
name|OWLClass
name|owldata
init|=
name|entity
operator|.
name|asOWLClass
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLClassAxiom
argument_list|>
name|entityaxiom
init|=
name|owlmodel
operator|.
name|getAxioms
argument_list|(
name|owldata
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityaxiom
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|entityaxiom
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OWLAnnotationAssertionAxiom
argument_list|>
name|annotations
init|=
name|entity
operator|.
name|getAnnotationAssertionAxioms
argument_list|(
name|owlmodel
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|annotations
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|annotations
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//If the entity is a data property
if|if
condition|(
name|entity
operator|.
name|isOWLDataProperty
argument_list|()
condition|)
block|{
name|OWLDataProperty
name|owldata
init|=
name|entity
operator|.
name|asOWLDataProperty
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLDataPropertyAxiom
argument_list|>
name|entityaxiom
init|=
name|owlmodel
operator|.
name|getAxioms
argument_list|(
name|owldata
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityaxiom
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|entityaxiom
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OWLAnnotationAssertionAxiom
argument_list|>
name|annotations
init|=
name|entity
operator|.
name|getAnnotationAssertionAxioms
argument_list|(
name|owlmodel
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|annotations
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|annotations
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//If the entity is an object property
if|if
condition|(
name|entity
operator|.
name|isOWLObjectProperty
argument_list|()
condition|)
block|{
name|OWLObjectProperty
name|owldata
init|=
name|entity
operator|.
name|asOWLObjectProperty
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLObjectPropertyAxiom
argument_list|>
name|entityaxiom
init|=
name|owlmodel
operator|.
name|getAxioms
argument_list|(
name|owldata
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityaxiom
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|entityaxiom
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OWLAnnotationAssertionAxiom
argument_list|>
name|annotations
init|=
name|entity
operator|.
name|getAnnotationAssertionAxioms
argument_list|(
name|owlmodel
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|annotations
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|annotations
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//If the entity is a data type
if|if
condition|(
name|entity
operator|.
name|isOWLDatatype
argument_list|()
condition|)
block|{
name|OWLDatatype
name|owldata
init|=
name|entity
operator|.
name|asOWLDatatype
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLDatatypeDefinitionAxiom
argument_list|>
name|entityaxiom
init|=
name|owlmodel
operator|.
name|getAxioms
argument_list|(
name|owldata
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityaxiom
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|entityaxiom
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OWLAnnotationAssertionAxiom
argument_list|>
name|annotations
init|=
name|entity
operator|.
name|getAnnotationAssertionAxioms
argument_list|(
name|owlmodel
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|annotations
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|annotations
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//If the entity is an individual
if|if
condition|(
name|entity
operator|.
name|isOWLNamedIndividual
argument_list|()
condition|)
block|{
name|OWLNamedIndividual
name|owldata
init|=
name|entity
operator|.
name|asOWLNamedIndividual
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLIndividualAxiom
argument_list|>
name|entityaxiom
init|=
name|owlmodel
operator|.
name|getAxioms
argument_list|(
name|owldata
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityaxiom
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|entityaxiom
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OWLAnnotationAssertionAxiom
argument_list|>
name|annotations
init|=
name|entity
operator|.
name|getAnnotationAssertionAxioms
argument_list|(
name|owlmodel
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|annotations
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|annotations
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//If the entity is an annotations property
if|if
condition|(
name|entity
operator|.
name|isOWLAnnotationProperty
argument_list|()
condition|)
block|{
name|OWLAnnotationProperty
name|owldata
init|=
name|entity
operator|.
name|asOWLAnnotationProperty
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLAnnotationAxiom
argument_list|>
name|entityaxiom
init|=
name|owlmodel
operator|.
name|getAxioms
argument_list|(
name|owldata
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityaxiom
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|entityaxiom
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OWLAnnotationAssertionAxiom
argument_list|>
name|annotations
init|=
name|entity
operator|.
name|getAnnotationAssertionAxioms
argument_list|(
name|owlmodel
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|annotations
operator|.
name|hasNext
argument_list|()
condition|)
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|annotations
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OntModel
name|ontmodel
init|=
name|ModelOwlToJenaConvert
argument_list|(
name|ontology
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|StmtIterator
name|statement
init|=
name|ontmodel
operator|.
name|listStatements
argument_list|()
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|statement
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"EntityOwlToJenaResource::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a single OntClass of Jena to an OWLClass of OWLAPI  *  * @param jenadata {Jena class object}  * @param format {RDF/XML}  * @return {An OWLclass}  */
specifier|public
specifier|synchronized
name|OWLClass
name|ClassJenaToOwl
parameter_list|(
name|OntClass
name|jenadata
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ClassJenaToOwl::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|createClass
argument_list|(
name|jenadata
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntology
name|owlmodel
init|=
name|ModelJenaToOwlConvert
argument_list|(
name|model
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|owlmodel
operator|.
name|getClassesInSignature
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ClassJenaToOwl::: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a single OWLClass of OWLAPI to an OntClass of Jena  *  * @param data {An OWLClass}  * @param format {RDF/XML or TURTLE}  * @return {An OntClass}  */
specifier|public
specifier|synchronized
name|OntClass
name|ClassOwlToJena
parameter_list|(
name|OWLClass
name|data
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ClassOwlToJena::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontology
init|=
name|manager
operator|.
name|createOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.semanticweb.org/owlapi/ontologies/ontology"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|manager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLDeclarationAxiom
name|declarationAxiom
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|declarationAxiom
argument_list|)
expr_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelOwlToJenaConvert
argument_list|(
name|ontology
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|jenamodel
operator|.
name|getOntClass
argument_list|(
name|data
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ClassOwlToJena::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a single ObjectProperty of Jena to an OWLObjectProperty of OWLAPI  *  * @param jenadata {Jena ObjectProperty object}  * @param format {RDF/XML}  * @return {An OWLObjectProperty}  */
specifier|public
specifier|synchronized
name|OWLObjectProperty
name|ObjPropJenaToOwl
parameter_list|(
name|ObjectProperty
name|jenadata
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ClassOwlToJena::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|createObjectProperty
argument_list|(
name|jenadata
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntology
name|owlmodel
init|=
name|ModelJenaToOwlConvert
argument_list|(
name|model
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|owlmodel
operator|.
name|getObjectPropertiesInSignature
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ClassOwlToJena::: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a single OWLObjectProperty of owl to an ObjectProperty of Jena  *  * @param data {An OWLObjectProperty object}  * @param format {RDF/XML or TURTLE}  * @return {An ObjectProperty}  */
specifier|public
specifier|synchronized
name|ObjectProperty
name|ObjPropOwlToJena
parameter_list|(
name|OWLObjectProperty
name|data
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ObjPropOwlToJena::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontology
init|=
name|manager
operator|.
name|createOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.semanticweb.org/owlapi/ontologies/ontology"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|manager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLDeclarationAxiom
name|declarationAxiom
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|declarationAxiom
argument_list|)
expr_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelOwlToJenaConvert
argument_list|(
name|ontology
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|jenamodel
operator|.
name|getObjectProperty
argument_list|(
name|data
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"ObjPropOwlToJena::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a DatatypeProperty of Jena to and OWLDataProperty of owl  *  * @param jenadata {Jena DatatypeProperty object}  * @param format {RDF/XML}  * @return {An OWLDataProperty}  */
specifier|public
specifier|synchronized
name|OWLDataProperty
name|DataPropJenaToOwl
parameter_list|(
name|DatatypeProperty
name|jenadata
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"DataPropJenaToOwl::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|createDatatypeProperty
argument_list|(
name|jenadata
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntology
name|owlmodel
init|=
name|ModelJenaToOwlConvert
argument_list|(
name|model
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|owlmodel
operator|.
name|getDataPropertiesInSignature
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"DataPropJenaToOwl::: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a single OWLDataProperty of OWL to DatatypeProperty of Jena  *  * @param data {An OWLDataProperty object}  * @param format {RDF/XML or TURTLE}  * @return {A DatatypeProperty object}  */
specifier|public
specifier|synchronized
name|DatatypeProperty
name|DataPropOwlToJena
parameter_list|(
name|OWLDataProperty
name|data
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"DataPropOwlToJena::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontology
init|=
name|manager
operator|.
name|createOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.semanticweb.org/owlapi/ontologies/ontology"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|manager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLDeclarationAxiom
name|declarationAxiom
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|declarationAxiom
argument_list|)
expr_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelOwlToJenaConvert
argument_list|(
name|ontology
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|jenamodel
operator|.
name|getDatatypeProperty
argument_list|(
name|data
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"DataPropOwlToJena::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a single AnnotationProperty of Jena to an OWLAnnotationProperty of OWL  *  * @param jenadata {Jena DatatypeProperty object}  * @param format {RDF/XML}  * @return {An OWLAnnotationProperty object}  */
specifier|public
specifier|synchronized
name|OWLAnnotationProperty
name|AnnotationPropJenaToOwl
parameter_list|(
name|AnnotationProperty
name|jenadata
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"AnnotationPropJenaToOwl::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OntModel
name|model
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|createAnnotationProperty
argument_list|(
name|jenadata
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntology
name|owlmodel
init|=
name|ModelJenaToOwlConvert
argument_list|(
name|model
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|owlmodel
operator|.
name|getAnnotationPropertiesInSignature
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"AnnotationPropJenaToOwl::: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
comment|/**  * This function converts a single OWLAnnotationProperty of OWL to an AnnotationProperty of Jena  *  * @param data {An OWLAnnotationProperty object}  * @param format {RDF/XML or TURTLE}  * @return {An AnnotationProperty object}   */
specifier|public
specifier|synchronized
name|AnnotationProperty
name|AnnotationPropOwlToJena
parameter_list|(
name|OWLAnnotationProperty
name|data
parameter_list|,
name|String
name|format
parameter_list|)
block|{
while|while
condition|(
name|available
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"AnnotationPropOwlToJena::: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|available
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontology
init|=
name|manager
operator|.
name|createOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://www.semanticweb.org/owlapi/ontologies/ontology"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|manager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLDeclarationAxiom
name|declarationAxiom
init|=
name|factory
operator|.
name|getOWLDeclarationAxiom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|ontology
argument_list|,
name|declarationAxiom
argument_list|)
expr_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelOwlToJenaConvert
argument_list|(
name|ontology
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|jenamodel
operator|.
name|getAnnotationProperty
argument_list|(
name|data
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|eoc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"AnnotationPropOwlToJena::: "
argument_list|)
expr_stmt|;
name|eoc
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////////
block|}
end_class

end_unit

