begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|DatatypeProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_class
specifier|public
class|class
name|GraphSynchronizer
block|{
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GraphSynchronizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ResourceManager
name|resourceManager
decl_stmt|;
specifier|private
name|OntModel
name|model
decl_stmt|;
specifier|private
name|String
name|graphURI
decl_stmt|;
specifier|public
name|GraphSynchronizer
parameter_list|(
name|ResourceManager
name|resourceManager
parameter_list|,
name|Model
name|model
parameter_list|,
name|String
name|graphURI
parameter_list|)
block|{
name|this
operator|.
name|resourceManager
operator|=
name|resourceManager
expr_stmt|;
name|this
operator|.
name|model
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|this
operator|.
name|graphURI
operator|=
name|graphURI
expr_stmt|;
block|}
specifier|public
name|void
name|synchronize
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Synchronizing: "
operator|+
name|graphURI
argument_list|)
expr_stmt|;
comment|// Remove ontology so that every resource is unregistered
name|resourceManager
operator|.
name|registerOntology
argument_list|(
name|graphURI
argument_list|)
expr_stmt|;
name|synchronizeClasses
argument_list|()
expr_stmt|;
name|synchronizeObjectProperties
argument_list|()
expr_stmt|;
name|synchronizeDataProperties
argument_list|()
expr_stmt|;
name|synchronizeIndividuals
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|synchronizeIndividuals
parameter_list|()
block|{
name|List
argument_list|<
name|Individual
argument_list|>
name|individuals
init|=
name|model
operator|.
name|listIndividuals
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|Individual
name|individual
range|:
name|individuals
control|)
block|{
name|String
name|individualURI
init|=
name|individual
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|individualURI
operator|==
literal|null
condition|)
continue|continue;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyURI
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource not found:"
operator|+
name|individualURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerIndividual
argument_list|(
name|graphURI
argument_list|,
name|individualURI
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Resource registered:"
operator|+
name|individualURI
operator|+
literal|"on ontology "
operator|+
name|graphURI
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|graphURI
operator|.
name|equals
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Resource already registered: "
operator|+
name|individualURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource found on another ontology (This case will be handled later)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|synchronizeDataProperties
parameter_list|()
block|{
name|List
argument_list|<
name|DatatypeProperty
argument_list|>
name|dataProperties
init|=
name|model
operator|.
name|listDatatypeProperties
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|DatatypeProperty
name|dataProperty
range|:
name|dataProperties
control|)
block|{
name|String
name|propertyURI
init|=
name|dataProperty
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyURI
operator|==
literal|null
condition|)
continue|continue;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyURI
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource not found:"
operator|+
name|propertyURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerDatatypeProperty
argument_list|(
name|graphURI
argument_list|,
name|propertyURI
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Resource registered:"
operator|+
name|propertyURI
operator|+
literal|"on ontology "
operator|+
name|graphURI
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|graphURI
operator|.
name|equals
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Resource already registered: "
operator|+
name|propertyURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource found on another ontology (This case will be handled later)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|synchronizeObjectProperties
parameter_list|()
block|{
name|List
argument_list|<
name|ObjectProperty
argument_list|>
name|objectProperties
init|=
name|model
operator|.
name|listObjectProperties
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectProperty
name|objectProperty
range|:
name|objectProperties
control|)
block|{
name|String
name|propertyURI
init|=
name|objectProperty
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyURI
operator|==
literal|null
condition|)
continue|continue;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|propertyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyURI
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource not found:"
operator|+
name|propertyURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerObjectProperty
argument_list|(
name|graphURI
argument_list|,
name|propertyURI
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Resource registered:"
operator|+
name|propertyURI
operator|+
literal|"on ontology "
operator|+
name|graphURI
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|graphURI
operator|.
name|equals
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Resource already registered: "
operator|+
name|propertyURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource found on another ontology (This case will be handled later)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|synchronizeClasses
parameter_list|()
block|{
name|List
argument_list|<
name|OntClass
argument_list|>
name|classes
init|=
name|model
operator|.
name|listClasses
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|OntClass
name|klass
range|:
name|classes
control|)
block|{
name|String
name|classURI
init|=
name|klass
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|classURI
operator|==
literal|null
condition|)
continue|continue;
name|String
name|ontologyURI
init|=
name|resourceManager
operator|.
name|resolveOntologyURIFromResourceURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyURI
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource not found:"
operator|+
name|classURI
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|registerClass
argument_list|(
name|graphURI
argument_list|,
name|classURI
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Resource registered:"
operator|+
name|classURI
operator|+
literal|"on ontology "
operator|+
name|graphURI
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|graphURI
operator|.
name|equals
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Resource already registered: "
operator|+
name|classURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource found on another ontology (This case will be handled later)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

