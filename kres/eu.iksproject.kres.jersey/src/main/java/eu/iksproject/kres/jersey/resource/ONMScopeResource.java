begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|jersey
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|CONFLICT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NO_CONTENT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|coode
operator|.
name|owlapi
operator|.
name|turtle
operator|.
name|TurtleOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|KReSONManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|UnmodifiableOntologySpaceException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|jersey
operator|.
name|util
operator|.
name|OntologyRenderUtils
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|io
operator|.
name|OntologyRegistryIRISource
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ontology/{scopeid}"
argument_list|)
specifier|public
class|class
name|ONMScopeResource
extends|extends
name|NavigationMixin
block|{
comment|/* 	 * Placeholder for the KReSONManager to be fetched from the servlet context. 	 */
specifier|protected
name|KReSONManager
name|onm
decl_stmt|;
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|public
name|ONMScopeResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|servletContext
operator|=
name|servletContext
expr_stmt|;
name|onm
operator|=
operator|(
name|KReSONManager
operator|)
name|this
operator|.
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|KReSONManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|onm
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"[KReS] :: No KReS Ontology Network Manager provided by Servlet Context. Instantiating now..."
argument_list|)
expr_stmt|;
name|onm
operator|=
operator|new
name|ONManager
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|DELETE
specifier|public
name|void
name|deregisterScope
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologyScope
name|scope
init|=
name|reg
operator|.
name|getScope
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return;
name|reg
operator|.
name|deregisterScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"application/rdf+xml"
argument_list|)
specifier|public
name|Response
name|getTopOntology
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologyScope
name|scope
init|=
name|reg
operator|.
name|getScope
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
literal|404
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|OntologySpace
name|cs
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
name|OWLOntology
name|ont
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
name|ont
operator|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|getTopOntology
argument_list|()
expr_stmt|;
if|if
condition|(
name|ont
operator|==
literal|null
condition|)
name|ont
operator|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|getTopOntology
argument_list|()
expr_stmt|;
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|OntologyRenderUtils
operator|.
name|renderOntology
argument_list|(
name|ont
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|onm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e1
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
comment|// OWLOntologyManager tmpmgr = OWLManager.createOWLOntologyManager();
comment|// StringDocumentTarget tgt = new StringDocumentTarget();
comment|// try {
comment|// tmpmgr.saveOntology(ont, new RDFXMLOntologyFormat(), tgt);
comment|// } catch (OWLOntologyStorageException e) {
comment|// e.printStackTrace();
comment|// return Response.status(INTERNAL_SERVER_ERROR).build();
comment|// }
return|return
name|Response
operator|.
name|ok
argument_list|(
name|s
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/turtle"
argument_list|)
specifier|public
name|Response
name|getTopOntologyT
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologyScope
name|scope
init|=
name|reg
operator|.
name|getScope
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
name|OntologySpace
name|cs
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
name|OWLOntology
name|ont
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
name|ont
operator|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|getTopOntology
argument_list|()
expr_stmt|;
if|if
condition|(
name|ont
operator|==
literal|null
condition|)
name|ont
operator|=
name|scope
operator|.
name|getCoreSpace
argument_list|()
operator|.
name|getTopOntology
argument_list|()
expr_stmt|;
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|OntologyRenderUtils
operator|.
name|renderOntology
argument_list|(
name|ont
argument_list|,
operator|new
name|TurtleOntologyFormat
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|onm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e1
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
comment|// OWLOntologyManager tmpmgr = OWLManager.createOWLOntologyManager();
comment|// StringDocumentTarget tgt = new StringDocumentTarget();
comment|// try {
comment|// tmpmgr.saveOntology(ont, new TurtleOntologyFormat(), tgt);
comment|// } catch (OWLOntologyStorageException e) {
comment|// e.printStackTrace();
comment|// return Response.status(INTERNAL_SERVER_ERROR).build();
comment|// }
return|return
name|Response
operator|.
name|ok
argument_list|(
name|s
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
comment|// @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|Response
name|loadCustomOntology
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"location"
argument_list|)
name|String
name|physIri
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"registry"
argument_list|)
name|boolean
name|asRegistry
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|String
name|res
init|=
literal|""
decl_stmt|;
name|IRI
name|scopeiri
init|=
literal|null
decl_stmt|;
name|IRI
name|ontoiri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scopeiri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ontoiri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|physIri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Malformed IRI, throw bad request.
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
if|if
condition|(
name|reg
operator|.
name|containsScope
argument_list|(
name|scopeiri
argument_list|)
condition|)
block|{
name|res
operator|=
literal|"Ok, scope is there"
expr_stmt|;
name|OntologyScope
name|scope
init|=
name|reg
operator|.
name|getScope
argument_list|(
name|scopeiri
argument_list|)
decl_stmt|;
try|try
block|{
name|OntologyInputSource
name|src
init|=
operator|new
name|RootOntologyIRISource
argument_list|(
name|ontoiri
argument_list|)
decl_stmt|;
name|OntologySpace
name|space
init|=
name|scope
operator|.
name|getCustomSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|space
operator|==
literal|null
condition|)
block|{
name|space
operator|=
name|onm
operator|.
name|getOntologySpaceFactory
argument_list|()
operator|.
name|createCustomOntologySpace
argument_list|(
name|scopeiri
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|scope
operator|.
name|setCustomSpace
argument_list|(
name|space
argument_list|)
expr_stmt|;
comment|// space.setUp();
block|}
else|else
name|space
operator|.
name|addOntology
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnmodifiableOntologySpaceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
else|else
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|res
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** 	 * At least one between corereg and coreont must be present. Registry iris 	 * supersede ontology iris. 	 *  	 * @param scopeid 	 * @param coreRegistry 	 *            a. If it is a well-formed IRI it supersedes 	 *<code>coreOntology</code>. 	 * @param coreOntology 	 * @param customRegistry 	 *            a. If it is a well-formed IRI it supersedes 	 *<code>customOntology</code>. 	 * @param customOntology 	 * @param activate 	 *            if true, the new scope will be activated upon creation. 	 * @param uriInfo 	 * @param headers 	 * @return 	 */
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|registerScope
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"scopeid"
argument_list|)
name|String
name|scopeid
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"corereg"
argument_list|)
name|String
name|coreRegistry
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"coreont"
argument_list|)
name|String
name|coreOntology
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"customreg"
argument_list|)
name|String
name|customRegistry
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"customont"
argument_list|)
name|String
name|customOntology
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"activate"
argument_list|)
name|String
name|activate
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologyScopeFactory
name|f
init|=
name|onm
operator|.
name|getOntologyScopeFactory
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GOT PUT"
argument_list|)
expr_stmt|;
name|OntologyScope
name|scope
decl_stmt|;
name|OntologyInputSource
name|coreSrc
init|=
literal|null
decl_stmt|,
name|custSrc
init|=
literal|null
decl_stmt|;
comment|// First thing, check the core source.
try|try
block|{
name|coreSrc
operator|=
operator|new
name|OntologyRegistryIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|coreRegistry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// Bad or not supplied core registry, try the ontology.
try|try
block|{
name|coreSrc
operator|=
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|coreOntology
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// If this fails too, throw a bad request.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1.1"
argument_list|)
expr_stmt|;
name|e2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e2
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
comment|// Don't bother if no custom was supplied at all...
if|if
condition|(
name|customOntology
operator|!=
literal|null
operator|||
name|customRegistry
operator|!=
literal|null
condition|)
block|{
comment|// ...but if it was, be prepared to throw exceptions.
try|try
block|{
name|custSrc
operator|=
operator|new
name|OntologyRegistryIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|customRegistry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// Bad or not supplied custom registry, try the ontology.
try|try
block|{
name|custSrc
operator|=
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|customOntology
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// If this fails too, throw a bad request.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1.2"
argument_list|)
expr_stmt|;
name|e2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e2
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
block|}
comment|// If we weren't able to build core source, throw bad request.
if|if
condition|(
name|coreSrc
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1.3"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
comment|// Now the creation.
try|try
block|{
name|IRI
name|scopeId
init|=
name|IRI
operator|.
name|create
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Invoke the appropriate factory method depending on the
comment|// availability of a custom source.
name|scope
operator|=
operator|(
name|custSrc
operator|!=
literal|null
operator|)
condition|?
name|f
operator|.
name|createOntologyScope
argument_list|(
name|scopeId
argument_list|,
name|coreSrc
argument_list|,
name|custSrc
argument_list|)
else|:
name|f
operator|.
name|createOntologyScope
argument_list|(
name|scopeId
argument_list|,
name|coreSrc
argument_list|)
expr_stmt|;
comment|// Setup and register the scope. If no custom space was set, it will
comment|// still be open for modification.
name|scope
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|reg
operator|.
name|registerScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|boolean
name|activateBool
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|activate
operator|!=
literal|null
operator|&&
operator|!
name|activate
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|activateBool
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|activate
argument_list|)
expr_stmt|;
block|}
name|reg
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
name|activateBool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateIDException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|CONFLICT
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

