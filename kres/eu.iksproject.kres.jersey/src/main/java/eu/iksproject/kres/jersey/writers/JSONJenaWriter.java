begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|jersey
operator|.
name|writers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|JenaRuntime
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFErrorHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ResIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_class
specifier|public
class|class
name|JSONJenaWriter
implements|implements
name|RDFWriter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JSONJenaWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|protected
specifier|final
name|String
name|propBase
init|=
literal|"http://jena.hpl.hp.com/json/properties/"
decl_stmt|;
specifier|private
name|String
name|lineSeparator
init|=
name|JenaRuntime
operator|.
name|getLineSeparator
argument_list|()
decl_stmt|;
specifier|private
name|RDFErrorHandler
name|errorHandler
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|writerPropertyMap
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|baseURIref
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|baseURIrefHash
init|=
literal|null
decl_stmt|;
specifier|private
name|Writer
name|out
init|=
literal|null
decl_stmt|;
specifier|public
name|RDFErrorHandler
name|setErrorHandler
parameter_list|(
name|RDFErrorHandler
name|errHandler
parameter_list|)
block|{
name|RDFErrorHandler
name|old
init|=
name|errorHandler
decl_stmt|;
name|errorHandler
operator|=
name|errHandler
expr_stmt|;
return|return
name|old
return|;
block|}
specifier|public
name|Object
name|setProperty
parameter_list|(
name|String
name|propName
parameter_list|,
name|Object
name|propValue
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|propValue
operator|instanceof
name|String
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"JSON.setProperty: Property for '"
operator|+
name|propName
operator|+
literal|"' is not a string"
argument_list|)
expr_stmt|;
name|propValue
operator|=
name|propValue
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// Store absolute name of property
name|propName
operator|=
name|absolutePropName
argument_list|(
name|propName
argument_list|)
expr_stmt|;
if|if
condition|(
name|writerPropertyMap
operator|==
literal|null
condition|)
name|writerPropertyMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|Object
name|oldValue
init|=
name|writerPropertyMap
operator|.
name|get
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|writerPropertyMap
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
specifier|protected
name|String
name|absolutePropName
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
if|if
condition|(
name|propName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|JSONJenaWriter
operator|.
name|propBase
operator|+
name|propName
return|;
return|return
name|propName
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Model
name|model
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|base
parameter_list|)
block|{
try|try
block|{
name|Writer
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|output
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|model
argument_list|,
name|w
argument_list|,
name|base
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to create UTF-8 writer"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Model
name|baseModel
parameter_list|,
name|Writer
name|_out
parameter_list|,
name|String
name|base
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|_out
operator|instanceof
name|BufferedWriter
operator|)
condition|)
name|_out
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|_out
argument_list|)
expr_stmt|;
name|out
operator|=
name|_out
expr_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|baseURIref
operator|=
name|base
expr_stmt|;
if|if
condition|(
operator|!
name|base
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
operator|&&
operator|!
name|isOpaque
argument_list|(
name|base
argument_list|)
condition|)
name|baseURIrefHash
operator|=
name|baseURIref
operator|+
literal|"#"
expr_stmt|;
block|}
try|try
block|{
name|processModel
argument_list|(
name|baseModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IOError writing model."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isOpaque
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
operator|.
name|isOpaque
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|void
name|processModel
parameter_list|(
name|Model
name|baseModel
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLine
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|ResIterator
name|subjectIterator
init|=
name|baseModel
operator|.
name|listSubjects
argument_list|()
decl_stmt|;
while|while
condition|(
name|subjectIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|writeLine
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|Resource
name|subjectResource
init|=
name|subjectIterator
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|processSubject
argument_list|(
name|subjectResource
argument_list|)
expr_stmt|;
block|}
name|writeLine
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processSubject
parameter_list|(
name|Resource
name|subjectResource
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
literal|"  \""
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectResource
operator|.
name|isAnon
argument_list|()
condition|)
block|{
name|write
argument_list|(
literal|"_:"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|escape
argument_list|(
name|subjectResource
operator|.
name|asNode
argument_list|()
operator|.
name|getBlankNodeId
argument_list|()
operator|.
name|getLabelString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
name|escape
argument_list|(
name|subjectResource
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writeLine
argument_list|(
literal|"\" : {"
argument_list|)
expr_stmt|;
name|processProperties
argument_list|(
name|subjectResource
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"  }"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processProperties
parameter_list|(
name|Resource
name|subjectResource
parameter_list|)
throws|throws
name|IOException
block|{
name|HashSet
argument_list|<
name|Property
argument_list|>
name|propertiesToProcess
init|=
operator|new
name|HashSet
argument_list|<
name|Property
argument_list|>
argument_list|()
decl_stmt|;
name|StmtIterator
name|allPropertiesIterator
init|=
name|subjectResource
operator|.
name|listProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|allPropertiesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|statement
init|=
name|allPropertiesIterator
operator|.
name|nextStatement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|propertiesToProcess
operator|.
name|contains
argument_list|(
name|statement
operator|.
name|getPredicate
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
condition|)
block|{
name|propertiesToProcess
operator|.
name|add
argument_list|(
name|statement
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|processed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Property
name|property
range|:
name|propertiesToProcess
control|)
block|{
name|write
argument_list|(
literal|"    \""
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|escape
argument_list|(
name|property
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"\" : [ "
argument_list|)
expr_stmt|;
name|StmtIterator
name|propertyIterator
init|=
name|subjectResource
operator|.
name|listProperties
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|boolean
name|moreThanOneValue
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|propertyIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|propertyStatement
init|=
name|propertyIterator
operator|.
name|nextStatement
argument_list|()
decl_stmt|;
name|boolean
name|moreValues
init|=
name|propertyIterator
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|moreValues
condition|)
block|{
name|moreThanOneValue
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|moreThanOneValue
condition|)
block|{
name|writeLine
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"      "
argument_list|)
expr_stmt|;
block|}
name|processProperty
argument_list|(
name|propertyStatement
argument_list|)
expr_stmt|;
if|if
condition|(
name|moreValues
condition|)
block|{
name|write
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|moreThanOneValue
condition|)
block|{
name|writeLine
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|processed
operator|++
expr_stmt|;
if|if
condition|(
name|processed
operator|<
name|propertiesToProcess
operator|.
name|size
argument_list|()
condition|)
block|{
name|write
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|writeLine
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processProperty
parameter_list|(
name|Statement
name|property
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
literal|"{ \"value\" : \""
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|getObject
argument_list|()
operator|.
name|isURIResource
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
operator|(
name|Resource
operator|)
name|property
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|write
argument_list|(
name|escape
argument_list|(
name|r
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"\", \"type\" : \"uri\""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|getObject
argument_list|()
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Literal
name|l
init|=
operator|(
name|Literal
operator|)
name|property
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|write
argument_list|(
name|escape
argument_list|(
name|l
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"\", \"type\" : \"literal\""
argument_list|)
expr_stmt|;
name|String
name|languageValue
init|=
name|l
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
if|if
condition|(
name|languageValue
operator|!=
literal|null
operator|&&
operator|!
name|languageValue
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|", \"lang\" : \""
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|languageValue
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|dataTypeValue
init|=
name|l
operator|.
name|getDatatypeURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataTypeValue
operator|!=
literal|null
operator|&&
operator|!
name|dataTypeValue
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|", \"datatype\" : \""
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|escape
argument_list|(
name|dataTypeValue
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|getObject
argument_list|()
operator|.
name|isAnon
argument_list|()
condition|)
block|{
name|write
argument_list|(
literal|"_:"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|escape
argument_list|(
name|property
operator|.
name|getObject
argument_list|()
operator|.
name|asNode
argument_list|()
operator|.
name|getBlankNodeId
argument_list|()
operator|.
name|getLabelString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"\", \"type\" : \"bnode\""
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|escape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\\""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'/'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\/"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\b'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\b"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\f'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\f"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\n'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\r'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\t'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\\t"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|writeLine
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|lineSeparator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|write
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

