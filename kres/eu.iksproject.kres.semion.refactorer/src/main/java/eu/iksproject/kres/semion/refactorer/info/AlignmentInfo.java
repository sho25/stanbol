begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|refactorer
operator|.
name|info
package|;
end_package

begin_comment
comment|/**  * The AlignmentInfo is an utility class for monitoring the progress of a refactoring process performed by one of the concrete  * SemionRefactorers.  * @author andrea.nuzzolese  *  */
end_comment

begin_class
specifier|public
class|class
name|AlignmentInfo
block|{
specifier|private
name|int
name|algimentJobDone
decl_stmt|;
specifier|private
name|int
name|algimentJobDonePerc
decl_stmt|;
specifier|private
name|String
name|operation
decl_stmt|;
specifier|private
name|int
name|totalJobRequest
decl_stmt|;
specifier|private
name|int
name|scale
decl_stmt|;
comment|/** 	 * Create a new {@code AlignmentInfo}. The {@code scale} identifies the reference scale in order to calculate the progress percentage, 	 * while the {@code totalJobRequest} is the total amount of work required to complete the refactoring task. 	 *  	 * @param scale {@code int} 	 * @param totalJobRequest {@code int} 	 */
specifier|public
name|AlignmentInfo
parameter_list|(
name|int
name|scale
parameter_list|,
name|int
name|totalJobRequest
parameter_list|)
block|{
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|totalJobRequest
operator|=
name|totalJobRequest
expr_stmt|;
name|algimentJobDone
operator|=
literal|0
expr_stmt|;
name|algimentJobDonePerc
operator|=
literal|0
expr_stmt|;
block|}
comment|/** 	 * Sets the job done by the refactoring task to the value passed as input. 	 *  	 * @param algimentJobDone {@code int} 	 */
specifier|public
name|void
name|setJobDone
parameter_list|(
name|int
name|algimentJobDone
parameter_list|)
block|{
name|this
operator|.
name|algimentJobDone
operator|=
name|algimentJobDone
expr_stmt|;
name|this
operator|.
name|algimentJobDonePerc
operator|=
operator|(
name|this
operator|.
name|algimentJobDone
operator|*
name|scale
operator|)
operator|/
name|totalJobRequest
expr_stmt|;
block|}
comment|/** 	 * Increments the job done by the value passed as input. 	 *  	 * @param plusJobDone {@code int} 	 */
specifier|public
name|void
name|addJobDone
parameter_list|(
name|int
name|plusJobDone
parameter_list|)
block|{
name|this
operator|.
name|setJobDone
argument_list|(
name|algimentJobDone
operator|+
name|plusJobDone
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Sets the operation description that is currently performed by the refactoring task. 	 *  	 * @param operation {@link String} 	 */
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
comment|/** 	 * Gets the operation description that is currently performed by the refactoring task. 	 *  	 * @return the operation name - {@link String}. 	 */
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
comment|/** 	 * Gets the total job done during by a refactoring task as {@code int}. 	 *  	 * @return the total done during by a refactoring task. 	 */
specifier|public
name|int
name|getAlgimentJobDone
parameter_list|()
block|{
return|return
name|algimentJobDone
return|;
block|}
comment|/** 	 * Gets the total job done during by a refactoring task in percentage value respect to the scale setted. 	 *  	 * @return the total job done during by a refactoring task in percentage value respect to the scale setted. 	 */
specifier|public
name|int
name|getAlgimentJobDonePerc
parameter_list|()
block|{
return|return
name|algimentJobDonePerc
return|;
block|}
block|}
end_class

end_unit

