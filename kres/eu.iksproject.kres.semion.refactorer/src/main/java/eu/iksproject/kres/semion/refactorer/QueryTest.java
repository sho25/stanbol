begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|refactorer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|FileManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|KReSRule
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|util
operator|.
name|KReSRuleList
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|KReSKB
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|rules
operator|.
name|parser
operator|.
name|KReSRuleParser
import|;
end_import

begin_class
specifier|public
class|class
name|QueryTest
block|{
specifier|public
name|void
name|query
parameter_list|(
name|String
name|ruleText
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PROVA"
argument_list|)
expr_stmt|;
name|Model
name|model
init|=
name|FileManager
operator|.
name|get
argument_list|()
operator|.
name|loadModel
argument_list|(
literal|"/Users/mac/weather.owl"
argument_list|)
decl_stmt|;
name|KReSKB
name|kReSKB
init|=
name|KReSRuleParser
operator|.
name|parse
argument_list|(
name|ruleText
argument_list|)
decl_stmt|;
name|KReSRuleList
name|kReSRuleList
init|=
name|kReSKB
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RULE LIST SIZE : "
operator|+
name|kReSRuleList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PROVA"
argument_list|)
expr_stmt|;
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SPARQL : "
operator|+
name|sparql
argument_list|)
expr_stmt|;
name|Query
name|sparqlQuery
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|sparql
argument_list|)
decl_stmt|;
name|QueryExecution
name|qexec
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|sparqlQuery
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|Model
name|refactoredModel
init|=
name|qexec
operator|.
name|execConstruct
argument_list|()
decl_stmt|;
name|refactoredModel
operator|.
name|write
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|wrapPoints
parameter_list|(
name|String
name|ruleText
parameter_list|)
block|{
name|String
index|[]
name|points
init|=
name|ruleText
operator|.
name|split
argument_list|(
literal|" . "
argument_list|)
decl_stmt|;
name|ruleText
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|String
name|point
range|:
name|points
control|)
block|{
name|ruleText
operator|+=
name|point
operator|+
literal|" . "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ruleText
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|/*String ruleText = "oxml =<http://ontologydesignpatterns.org/ont/iks/oxml.owl#> . schema =<http://kres.iks-project.eu/weather/san_francisco/schema#> . ami_context =<http://iks/ami-case/context#> . ami_content =<http://iks/ami-case/content#> . composite =<http://www.topbraid.org/2007/05/composite.owl#> . " + 				"weatherRule[has(oxml:hasElementDeclaration, ?x, schema:weather) . " + 				"has(composite:child, ?x, ?y) . " + 				"has(oxml:hasElementDeclaration, ?y, schema:weather-conditions) . " + 				"has(oxml:hasXMLAttribute,  ?y,  ?cond) . " + 				"values(oxml:nodeValue, ?cond, ?condition) . " + 				"has(oxml:hasXMLAttribute,  ?x,  ?z) . " + 				"has(oxml:hasAttributeDeclaration, ?z, schema:weather_time-layout) . " + 				"has(oxml:nodeValue, ?z, ?time) . " + 				"has(composite:child, ?time, ?timeStartEl) . " + 				"has(composite:child, ?time, ?timeEndEl) . " + 				"has(oxml:hasElementDeclaration, ?timeStartEl, schema:start-valid-time) . " + 				"has(oxml:hasElementDeclaration, ?timeEndEl, schema:end-valid-time) . " + 				"values(oxml:nodeValue, ?timeStartEl, ?startTime) . " + 				"values(oxml:nodeValue, ?timeEndEl, ?endTime) . " + 				"-> " + 				"is(ami_content:Weather, ?x) . " + 				"is(ami_content:WeatherCondition, ?y) . " + 				"has(ami_content:condition, ?x, ?y) . " + 				"values(ami_context:description, ?y, ?condition) . " + 				"has(ami_content:startTime, ?x, ?startTime) . " + 				"has(ami_content:endTime, ?x, ?endTime)]"; 				*/
name|String
name|ruleText
init|=
literal|"oxml =<http://ontologydesignpatterns.org/ont/iks/oxml.owl#> . schema =<http://kres.iks-project.eu/weather/san_francisco/schema#> . ami_context =<http://iks/ami-case/context#> . ami_content =<http://iks/ami-case/content#> . composite =<http://www.topbraid.org/2007/05/composite.owl#> . locationRule[is(oxml:XMLElement, ?x) . has(oxml:hasElementDeclaration, ?x, schema:location) . has(composite:child, ?x, ?y) . has(oxml:hasElementDeclaration, ?y, schema:location-key) . values(oxml:nodeValue, ?y, ?z) -> is(ami_context:Location, ?x) . values(ami_context:description, ?x, ?z)] . weatherRule[has(oxml:hasElementDeclaration, ?x, schema:weather) . has(composite:child, ?x, ?y) . has(oxml:hasElementDeclaration, ?y, schema:weather-conditions) . has(oxml:hasXMLAttribute,  ?y,  ?cond) . values(oxml:nodeValue, ?cond, ?condition) . has(oxml:hasXMLAttribute,  ?x,  ?z) . has(oxml:hasAttributeDeclaration, ?z, schema:weather_time-layout) . has(oxml:nodeValue, ?z, ?time) . has(composite:child, ?time, ?timeStartEl) . has(composite:child, ?time, ?timeEndEl) . has(oxml:hasElementDeclaration, ?timeStartEl, schema:start-valid-time) . has(oxml:hasElementDeclaration, ?timeEndEl, schema:end-valid-time) . values(oxml:nodeValue, ?timeStartEl, ?startTime) . values(oxml:nodeValue, ?timeEndEl, ?endTime) . -> is(ami_content:Weather, ?x) . is(ami_content:WeatherCondition, ?y) . has(ami_content:condition, ?x, ?y) . values(ami_context:description, ?y, ?condition) . has(ami_content:startTime, ?x, ?startTime) . has(ami_content:endTime, ?x, ?endTime)] . locationWeatherRule[has(oxml:hasElementDeclaration, ?x, schema:data) . has(composite:child, ?x, ?location) . has(composite:child, ?x, ?parameter) . has(oxml:hasElementDeclaration, ?location, schema:location) . has(oxml:hasElementDeclaration, ?parameter, schema:parameters) . has(composite:child, ?parameter, ?weather) . has(oxml:hasElementDeclaration, ?weather, schema:weather) -> has(ami_content:place, ?weather, ?location) ]"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ruleText
argument_list|)
expr_stmt|;
name|QueryTest
name|queryTest
init|=
operator|new
name|QueryTest
argument_list|()
decl_stmt|;
name|queryTest
operator|.
name|wrapPoints
argument_list|(
name|ruleText
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

