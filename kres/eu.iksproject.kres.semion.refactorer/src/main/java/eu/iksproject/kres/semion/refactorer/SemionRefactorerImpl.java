begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|semion
operator|.
name|refactorer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|ConstructQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|KReSONManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|session
operator|.
name|DuplicateSessionIDException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|session
operator|.
name|KReSSession
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|session
operator|.
name|KReSSessionManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|reasoners
operator|.
name|InconcistencyException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|reasoners
operator|.
name|KReSReasoner
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|KReSRule
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|util
operator|.
name|KReSRuleList
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|rules
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|semion
operator|.
name|SemionManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|semion
operator|.
name|SemionRefactorer
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|semion
operator|.
name|SemionRefactoringException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|semion
operator|.
name|util
operator|.
name|URIGenerator
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|storage
operator|.
name|OntologyStorage
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|shared
operator|.
name|transformation
operator|.
name|JenaToOwlConvert
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|shared
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_comment
comment|/**   * The SemionRefactorerImpl is the concrete implementation of the SemionRefactorer interface defined in the KReS APIs.  * A SemionRefacter is able to perform ontology refactorings and mappings.  *   * @author andrea.nuzzolese  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|SemionRefactorer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SemionRefactorerImpl
implements|implements
name|SemionRefactorer
block|{
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"localhost:8080"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|HOST_NAME_AND_PORT
init|=
literal|"host.name.port"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"http://kres.iksproject.eu/session/refactoring"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REFACTORING_SESSION_ID
init|=
literal|"eu.iksproject.kres.session.refactoring"
decl_stmt|;
annotation|@
name|Property
argument_list|(
literal|"refactoring"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REFACTORING_SCOPE
init|=
literal|"eu.iksproject.kres.scope.refactoring"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"http://kres.iksproject.eu/space/refactoring"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REFACTORING_SPACE
init|=
literal|"eu.iksproject.kres.space.refactoring"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"http://kres.iksproject.eu/semion/autoGeneratedOntology"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_GENERATED_ONTOLOGY_IRI
init|=
literal|"eu.iksproject.kres.semion.default"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|WeightedTcProvider
name|weightedTcProvider
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|TcManager
name|tcManager
decl_stmt|;
annotation|@
name|Reference
name|KReSONManager
name|onManager
decl_stmt|;
annotation|@
name|Reference
name|SemionManager
name|semionManager
decl_stmt|;
annotation|@
name|Reference
name|RuleStore
name|ruleStore
decl_stmt|;
annotation|@
name|Reference
name|KReSReasoner
name|kReSReasoner
decl_stmt|;
specifier|private
name|IRI
name|kReSSessionID
decl_stmt|;
specifier|private
name|OntologyScope
name|scope
decl_stmt|;
specifier|private
name|IRI
name|refactoringScopeIRI
decl_stmt|;
specifier|private
name|IRI
name|refactoringSpaceIRI
decl_stmt|;
specifier|private
name|IRI
name|defaultRefactoringIRI
decl_stmt|;
specifier|public
name|SemionRefactorerImpl
parameter_list|()
block|{ 		 	}
annotation|@
name|Override
specifier|public
name|void
name|ontologyRefactoring
parameter_list|(
name|IRI
name|refactoredOntologyIRI
parameter_list|,
name|IRI
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|SemionRefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
name|OntologyStorage
name|ontologyStorage
init|=
name|onManager
operator|.
name|getOntologyStore
argument_list|()
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|KReSRuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|String
name|fingerPrint
init|=
literal|""
decl_stmt|;
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|OWLOntology
name|refactoredDataSet
init|=
name|ontologyStorage
operator|.
name|sparqlConstruct
argument_list|(
name|sparql
argument_list|,
name|datasetURI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|refactoredDataSet
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|fpOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|fingerPrint
operator|+=
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|""
argument_list|,
name|fpOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|refactoredOntologyIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|"urn://"
argument_list|,
name|fingerPrint
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|ontologyManager
argument_list|)
decl_stmt|;
try|try
block|{
name|refactoredOntology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ontologyManager
argument_list|,
name|refactoredOntologyIRI
argument_list|)
expr_stmt|;
name|ontologyStorage
operator|.
name|store
argument_list|(
name|refactoredOntology
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemionRefactoringException
argument_list|()
throw|;
block|}
block|}
comment|/* 	public void consistentOntologyRefactoring(IRI refactoredOntologyIRI, IRI datasetURI, IRI recipeIRI) throws SemionRefactoringException, NoSuchRecipeException, InconcistencyException { 		 		 		 		OWLOntology refactoredOntology = null; 		 		OntologyStorage ontologyStorage = onManager.getOntologyStore(); 		 		OWLOntology owlOntology = ontologyStorage.load(datasetURI); 		 		JenaToOwlConvert jenaToOwlConvert = new JenaToOwlConvert(); 		 		OntModel ontModel = jenaToOwlConvert.ModelOwlToJenaConvert(owlOntology, "RDF/XML"); 		 		Recipe recipe; 		try { 			recipe = ruleStore.getRecipe(recipeIRI); 			 			KReSRuleList kReSRuleList = recipe.getkReSRuleList(); 			 			OWLOntologyManager ontologyManager = OWLManager.createOWLOntologyManager(); 			 			for(KReSRule kReSRule : kReSRuleList){ 				String sparql = kReSRule.toSPARQL(); 				 				Query sparqlQuery = QueryFactory.create(sparql); 				QueryExecution qexec = QueryExecutionFactory.create(sparqlQuery, ontModel) ; 				Model refactoredModel = qexec.execConstruct(); 			 				 				OWLOntology refactoredDataSet = jenaToOwlConvert.ModelJenaToOwlConvert(refactoredModel, "RDF/XML"); 				 				ByteArrayOutputStream out = new ByteArrayOutputStream(); 				try { 					ontologyManager.saveOntology(refactoredDataSet, new RDFXMLOntologyFormat(), out); 				} catch (OWLOntologyStorageException e) { 					// TODO Auto-generated catch block 					e.printStackTrace(); 				} 				 				ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray()); 				 				try { 					ontologyManager.loadOntologyFromOntologyDocument(in); 				} catch (OWLOntologyCreationException e) { 					// TODO Auto-generated catch block 					e.printStackTrace(); 				} 				 			} 			 			OWLOntologyMerger merger = new OWLOntologyMerger(ontologyManager); 			 			try { 				refactoredOntology = merger.createMergedOntology(ontologyManager, refactoredOntologyIRI); 			 			 				if(!kReSReasoner.consistencyCheck(kReSReasoner.getReasoner(refactoredOntology))){ 					throw new InconcistencyException("Semion Refactorer : the refactored data set seems to be inconsistent"); 				} 				else{ 					ontologyStorage.store(refactoredOntology); 				} 			} catch (OWLOntologyCreationException e) { 				// TODO Auto-generated catch block 				e.printStackTrace(); 			} 			 				 			 		} catch (NoSuchRecipeException e1) { 			log.error("SemionRefactorer : No Such recipe in the KReS Rule Store", e1); 			throw e1; 		} 		 		if(refactoredOntology == null){ 			throw new SemionRefactoringException(); 		} 		 	}*/
annotation|@
name|Override
specifier|public
name|void
name|consistentOntologyRefactoring
parameter_list|(
name|IRI
name|refactoredOntologyIRI
parameter_list|,
name|IRI
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|SemionRefactoringException
throws|,
name|NoSuchRecipeException
throws|,
name|InconcistencyException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
name|OntologyStorage
name|ontologyStorage
init|=
name|onManager
operator|.
name|getOntologyStore
argument_list|()
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|KReSRuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|String
name|fingerPrint
init|=
literal|""
decl_stmt|;
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|OWLOntology
name|refactoredDataSet
init|=
name|ontologyStorage
operator|.
name|sparqlConstruct
argument_list|(
name|sparql
argument_list|,
name|datasetURI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|refactoredDataSet
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|fpOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|fingerPrint
operator|+=
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|""
argument_list|,
name|fpOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|refactoredOntologyIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|"urn://"
argument_list|,
name|fingerPrint
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|ontologyManager
argument_list|)
decl_stmt|;
try|try
block|{
name|refactoredOntology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ontologyManager
argument_list|,
name|refactoredOntologyIRI
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kReSReasoner
operator|.
name|consistencyCheck
argument_list|(
name|kReSReasoner
operator|.
name|getReasoner
argument_list|(
name|refactoredOntology
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconcistencyException
argument_list|(
literal|"Semion Refactorer : the refactored data set seems to be inconsistent"
argument_list|)
throw|;
block|}
else|else
block|{
name|ontologyStorage
operator|.
name|store
argument_list|(
name|refactoredOntology
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemionRefactoringException
argument_list|()
throw|;
block|}
comment|/* 		UriRef uriRef = new UriRef(refactoredDataSetURI); 		 		MGraph mGraph = weightedTcProvider.createMGraph(datasetURI); 		 		Set<IRI> ruleIRIs = kReSRuleManager.getRecipe(recipeIRI); 		 		for(IRI ruleIRI : ruleIRIs){ 			KReSRule kReSRule = kReSRuleManager.getRule(ruleIRI); 			 			String sparql = kReSRule.toSPARQL(); 			 			Query query; 			try { 				query = QueryParser.getInstance().parse(sparql); 				MGraph dataset = weightedTcProvider.getMGraph(datasetURI); 				mGraph.addAll((SimpleGraph) tcManager.executeSparqlQuery(query, dataset)); 				 			} catch (ParseException e) { 				// TODO Auto-generated catch block 				e.printStackTrace(); 			} 		} 		 		ByteArrayOutputStream out = new ByteArrayOutputStream(); 		 		SerializingProvider serializingProvider = new JenaSerializerProvider(); 		 		serializingProvider.serialize(out, mGraph, SupportedFormat.RDF_XML); 		 		ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray()); 		 		OWLOntologyManager owlOntologyManager = onManager.getOwlCacheManager(); 		 		OWLOntology owlmodel; 		try { 			owlmodel = owlOntologyManager.loadOntologyFromOntologyDocument(in); 			if(kReSReasoner.consistencyCheck(kReSReasoner.getReasoner(owlmodel))){ 				return uriRef; 			} 			else{ 				throw new InconcistencyException("Semion Refactorer : the refactored data set seems to be inconsistent"); 			} 		} catch (OWLOntologyCreationException e) { 			throw new InconcistencyException("Semion Refactorer : the refactored data set seems to be invalid"); 		} 		*/
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|getRefactoredDataSet
parameter_list|(
name|UriRef
name|uriRef
parameter_list|)
block|{
return|return
name|weightedTcProvider
operator|.
name|getMGraph
argument_list|(
name|uriRef
argument_list|)
return|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|String
name|refactoringSessionID
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|REFACTORING_SESSION_ID
argument_list|)
decl_stmt|;
name|String
name|refactoringScopeID
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|REFACTORING_SCOPE
argument_list|)
decl_stmt|;
name|String
name|refactoringSpaceID
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|REFACTORING_SPACE
argument_list|)
decl_stmt|;
name|String
name|defaultRefactoringID
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|AUTO_GENERATED_ONTOLOGY_IRI
argument_list|)
decl_stmt|;
name|String
name|hostPort
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|HOST_NAME_AND_PORT
argument_list|)
decl_stmt|;
name|kReSSessionID
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|refactoringSessionID
argument_list|)
expr_stmt|;
name|refactoringScopeIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|hostPort
operator|+
literal|"/kres/ontology/"
operator|+
name|refactoringScopeID
argument_list|)
expr_stmt|;
name|refactoringSpaceIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|refactoringSpaceID
argument_list|)
expr_stmt|;
name|defaultRefactoringIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|defaultRefactoringID
argument_list|)
expr_stmt|;
name|KReSSessionManager
name|kReSSessionManager
init|=
name|onManager
operator|.
name|getSessionManager
argument_list|()
decl_stmt|;
name|KReSSession
name|kReSSession
init|=
name|kReSSessionManager
operator|.
name|getSession
argument_list|(
name|kReSSessionID
argument_list|)
decl_stmt|;
if|if
condition|(
name|kReSSession
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|kReSSession
operator|=
name|kReSSessionManager
operator|.
name|createSession
argument_list|(
name|kReSSessionID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateSessionIDException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : a KReS session for reengineering seems already existing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|kReSSessionID
operator|=
name|kReSSession
operator|.
name|getID
argument_list|()
expr_stmt|;
name|OntologyScopeFactory
name|ontologyScopeFactory
init|=
name|onManager
operator|.
name|getOntologyScopeFactory
argument_list|()
decl_stmt|;
name|ScopeRegistry
name|scopeRegistry
init|=
name|onManager
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologySpaceFactory
name|ontologySpaceFactory
init|=
name|onManager
operator|.
name|getOntologySpaceFactory
argument_list|()
decl_stmt|;
name|scope
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Semion DBExtractor : created scope with IRI "
operator|+
name|REFACTORING_SCOPE
argument_list|)
expr_stmt|;
name|scope
operator|=
name|ontologyScopeFactory
operator|.
name|createOntologyScope
argument_list|(
name|refactoringScopeIRI
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|scopeRegistry
operator|.
name|registerScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateIDException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Semion DBExtractor : already existing scope for IRI "
operator|+
name|REFACTORING_SCOPE
argument_list|)
expr_stmt|;
name|scope
operator|=
name|onManager
operator|.
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|refactoringScopeIRI
argument_list|)
expr_stmt|;
block|}
name|scope
operator|.
name|addSessionSpace
argument_list|(
name|ontologySpaceFactory
operator|.
name|createSessionOntologySpace
argument_list|(
name|refactoringSpaceIRI
argument_list|)
argument_list|,
name|kReSSession
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|scopeRegistry
operator|.
name|setScopeActive
argument_list|(
name|refactoringScopeIRI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|semionManager
operator|.
name|registerRefactorer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Activated KReS Semion Refactorer"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|KReSSessionManager
name|kReSSessionManager
init|=
name|onManager
operator|.
name|getSessionManager
argument_list|()
decl_stmt|;
name|kReSSessionManager
operator|.
name|destroySession
argument_list|(
name|kReSSessionID
argument_list|)
expr_stmt|;
name|semionManager
operator|.
name|unregisterRefactorer
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Dectivated KReS Semion Refactorer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|consistentOntologyRefactoring
parameter_list|(
name|OWLOntology
name|inputOntology
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|SemionRefactoringException
throws|,
name|NoSuchRecipeException
throws|,
name|InconcistencyException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
name|JenaToOwlConvert
name|jenaToOwlConvert
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|jenaToOwlConvert
operator|.
name|ModelOwlToJenaConvert
argument_list|(
name|inputOntology
argument_list|,
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|KReSRuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|Query
name|sparqlQuery
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|sparql
argument_list|)
decl_stmt|;
name|QueryExecution
name|qexec
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|sparqlQuery
argument_list|,
name|ontModel
argument_list|)
decl_stmt|;
name|Model
name|refactoredModel
init|=
name|qexec
operator|.
name|execConstruct
argument_list|()
decl_stmt|;
name|OWLOntology
name|refactoredDataSet
init|=
name|jenaToOwlConvert
operator|.
name|ModelJenaToOwlConvert
argument_list|(
name|refactoredModel
argument_list|,
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|refactoredDataSet
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|ontologyManager
argument_list|)
decl_stmt|;
try|try
block|{
name|IRI
name|defaultOntologyIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iksproject.eu/semion/autoGeneratedOntology"
argument_list|)
decl_stmt|;
name|refactoredOntology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ontologyManager
argument_list|,
name|defaultOntologyIRI
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kReSReasoner
operator|.
name|consistencyCheck
argument_list|(
name|kReSReasoner
operator|.
name|getReasoner
argument_list|(
name|refactoredOntology
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconcistencyException
argument_list|(
literal|"Semion Refactorer : the refactored data set seems to be inconsistent"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemionRefactoringException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|refactoredOntology
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|ontologyRefactoring
parameter_list|(
name|OWLOntology
name|inputOntology
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|SemionRefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
comment|//JenaToOwlConvert jenaToOwlConvert = new JenaToOwlConvert();
comment|//OntModel ontModel = jenaToOwlConvert.ModelOwlToJenaConvert(inputOntology, "RDF/XML");
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|KReSRuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"RULE LIST SIZE : "
operator|+
name|kReSRuleList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager2
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|MGraph
name|unionMGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|MGraph
name|mGraph
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|inputOntology
argument_list|)
decl_stmt|;
for|for
control|(
name|KReSRule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SPARQL : "
operator|+
name|sparql
argument_list|)
expr_stmt|;
comment|//Query sparqlQuery = QueryFactory.create(sparql);
comment|//QueryExecution qexec = QueryExecutionFactory.create(sparqlQuery, ontModel) ;
comment|//Model refactoredModel = qexec.execConstruct();
name|ConstructQuery
name|constructQuery
decl_stmt|;
try|try
block|{
name|constructQuery
operator|=
operator|(
name|ConstructQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|sparql
argument_list|)
expr_stmt|;
name|Graph
name|constructedGraph
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|constructQuery
argument_list|,
name|mGraph
argument_list|)
decl_stmt|;
name|unionMGraph
operator|.
name|addAll
argument_list|(
name|constructedGraph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|/*OWLOntology refactoredDataSet = jenaToOwlConvert.ModelJenaToOwlConvert(refactoredModel, "RDF/XML"); 				 				ByteArrayOutputStream out = new ByteArrayOutputStream(); 				try { 					ontologyManager.saveOntology(refactoredDataSet, new RDFXMLOntologyFormat(), out); 				} catch (OWLOntologyStorageException e) { 					// TODO Auto-generated catch block 					e.printStackTrace(); 				} 				 				ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray()); 				 				try { 					ontologyManager2.loadOntologyFromOntologyDocument(in); 				} catch (OWLOntologyCreationException e) { 					// TODO Auto-generated catch block 					e.printStackTrace(); 				} 				*/
block|}
comment|/*OWLOntologyMerger merger = new OWLOntologyMerger(ontologyManager2); 			 			try { 				IRI defaultOntologyIRI = IRI.create("http://kres.iksproject.eu/semion/autoGeneratedOntology"); 				refactoredOntology = merger.createMergedOntology(ontologyManager, defaultOntologyIRI); 				 			} catch (OWLOntologyCreationException e) { 				// TODO Auto-generated catch block 				e.printStackTrace(); 			}*/
name|refactoredOntology
operator|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaMGraphToOWLOntology
argument_list|(
name|unionMGraph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemionRefactoringException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|refactoredOntology
return|;
block|}
block|}
block|}
end_class

end_unit

