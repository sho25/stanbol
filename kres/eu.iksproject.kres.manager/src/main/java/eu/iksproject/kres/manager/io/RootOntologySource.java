begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_comment
comment|/**  * An input source that provides the supplied OWL ontology straight away. The  * physical IRI is either obtained from the default document IRI in the  * ontology, or supplied manually using the appropriate constructor (e.g.  * retrieved from the ontology manager that actually loaded the ontology).  *   * @author alessandro  *   */
end_comment

begin_class
specifier|public
class|class
name|RootOntologySource
extends|extends
name|AbstractOntologyInputSource
block|{
specifier|public
name|RootOntologySource
parameter_list|(
name|OWLOntology
name|rootOntology
parameter_list|)
block|{
name|this
operator|.
name|rootOntology
operator|=
name|rootOntology
expr_stmt|;
try|try
block|{
name|physicalIri
operator|=
name|rootOntology
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getDefaultDocumentIRI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ontology might be anonymous, no physical IRI then...
block|}
block|}
specifier|public
name|RootOntologySource
parameter_list|(
name|OWLOntology
name|rootOntology
parameter_list|,
name|IRI
name|phyicalIRI
parameter_list|)
block|{
name|this
operator|.
name|rootOntology
operator|=
name|rootOntology
expr_stmt|;
name|this
operator|.
name|physicalIri
operator|=
name|phyicalIRI
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 * @see eu.iksproject.kres.manager.io.AbstractOntologyInputSource#toString() 	 */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ROOT_ONT<"
operator|+
name|rootOntology
operator|.
name|getOntologyID
argument_list|()
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

