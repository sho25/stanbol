begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|FileDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|IRIDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|OWLOntologyDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StreamDocumentSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|KReSONManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|NoSuchScopeException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyIndex
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|session
operator|.
name|KReSSessionManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|storage
operator|.
name|OntologyStorage
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyIndexImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScopeFactoryImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologySpaceFactoryImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|ontology
operator|.
name|ScopeRegistryImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|registry
operator|.
name|model
operator|.
name|impl
operator|.
name|RegistryLoader
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|session
operator|.
name|KReSSessionManagerImpl
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|session
operator|.
name|ScopeSessionSynchronizer
import|;
end_import

begin_comment
comment|/**  * The running context of a KReS Ontology Network Manager instance. From this  * object it is possible to obtain factories, indices, registries and what have  * you.  *   * @author alessandro  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|KReSONManager
operator|.
name|class
argument_list|)
comment|// @Property(name="service.ranking",intValue=5)
specifier|public
class|class
name|ONManager
implements|implements
name|KReSONManager
block|{
comment|// @Property(value = "/ontology")
specifier|public
specifier|static
specifier|final
name|String
name|ALIAS_PROPERTY
init|=
literal|"eu.iksproject.kres.manager.ontologyNetworkManager.alias"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|""
argument_list|)
specifier|public
specifier|static
name|String
name|CONFIG_FILE_PATH
init|=
literal|"eu.iksproject.kres.manager.ontologyNetworkManager.config_ont"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"http://kres.iksproject.eu/"
argument_list|)
specifier|public
specifier|static
name|String
name|KRES_NAMESPACE
init|=
literal|"kres.namespace"
decl_stmt|;
specifier|private
specifier|static
name|ONManager
name|me
init|=
operator|new
name|ONManager
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|ONManager
name|get
parameter_list|()
block|{
return|return
name|me
return|;
block|}
specifier|private
name|ComponentContext
name|ce
decl_stmt|;
specifier|public
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|OntologyIndex
name|oIndex
decl_stmt|;
specifier|private
name|OntologyScopeFactory
name|ontologyScopeFactory
decl_stmt|;
specifier|private
name|OntologySpaceFactory
name|ontologySpaceFactory
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlCacheManager
decl_stmt|;
specifier|private
name|OWLDataFactory
name|owlFactory
decl_stmt|;
specifier|private
name|RegistryLoader
name|registryLoader
decl_stmt|;
specifier|private
name|ScopeRegistry
name|scopeRegistry
decl_stmt|;
specifier|private
name|KReSSessionManager
name|sessionManager
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|OntologyStorage
name|storage
decl_stmt|;
comment|/* 	 * The identifiers (not yet parsed as IRIs) of the ontology scopes that 	 * should be activated. 	 */
specifier|private
name|String
index|[]
name|toActivate
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
comment|/** 	 * Instantiates all the default providers. 	 *  	 * TODO : Felix component constraints prevent this constructor from being 	 * private, find a way around... 	 */
specifier|public
name|ONManager
parameter_list|()
block|{
name|owlFactory
operator|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
name|owlCacheManager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
comment|// These may require the OWL cache manager
name|ontologyScopeFactory
operator|=
operator|new
name|OntologyScopeFactoryImpl
argument_list|()
expr_stmt|;
name|ontologySpaceFactory
operator|=
operator|new
name|OntologySpaceFactoryImpl
argument_list|()
expr_stmt|;
comment|// These depend on one another
name|scopeRegistry
operator|=
operator|new
name|ScopeRegistryImpl
argument_list|()
expr_stmt|;
name|oIndex
operator|=
operator|new
name|OntologyIndexImpl
argument_list|(
name|scopeRegistry
argument_list|)
expr_stmt|;
name|ontologyScopeFactory
operator|.
name|addScopeEventListener
argument_list|(
name|oIndex
argument_list|)
expr_stmt|;
comment|// This requires the OWL cache manager
name|registryLoader
operator|=
operator|new
name|RegistryLoader
argument_list|()
expr_stmt|;
comment|// TODO : assign dynamically in case the FISE persistence store is not
comment|// available.
comment|// storage = new FISEPersistenceStorage();
name|sessionManager
operator|=
operator|new
name|KReSSessionManagerImpl
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iks-project.eu/"
argument_list|)
argument_list|)
expr_stmt|;
name|sessionManager
operator|.
name|addSessionListener
argument_list|(
name|ScopeSessionSynchronizer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"KReS :: activating main component..."
argument_list|)
expr_stmt|;
name|me
operator|=
name|this
expr_stmt|;
name|this
operator|.
name|ce
operator|=
name|ce
expr_stmt|;
name|ScopeRegistry
name|reg
init|=
name|get
argument_list|()
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OntologyScope
argument_list|>
name|scopez
init|=
name|reg
operator|.
name|getRegisteredScopes
argument_list|()
decl_stmt|;
name|String
name|path
init|=
operator|(
name|String
operator|)
name|ce
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|CONFIG_FILE_PATH
argument_list|)
decl_stmt|;
comment|// CONFIG_FILE_PATH can be a path or a URI. Try to make up for both
name|OWLOntology
name|oConf
init|=
literal|null
decl_stmt|;
name|OWLOntologyManager
name|tempMgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntologyDocumentSource
name|oConfSrc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Replace path with default path
name|path
operator|=
literal|"/META-INF/conf/onm.owl"
expr_stmt|;
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|oConfSrc
operator|=
operator|new
name|StreamDocumentSource
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|iri
operator|.
name|isAbsolute
argument_list|()
condition|)
name|oConfSrc
operator|=
operator|new
name|IRIDocumentSource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|oConfSrc
operator|=
operator|new
name|FileDocumentSource
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oConfSrc
operator|==
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"KReS :: [NONFATAL] No ONM configuration file found at path "
operator|+
name|path
operator|+
literal|". Starting with blank scope set."
argument_list|)
expr_stmt|;
else|else
try|try
block|{
name|oConf
operator|=
name|tempMgr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|oConfSrc
argument_list|)
expr_stmt|;
comment|// The OWLOntologyManager is brand new, it's impossible for it
comment|// to throw an OWLOntologyAlreadyExistsException ...
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: [NONFATAL] Invalid ONM configuration file found at path "
operator|+
name|path
operator|+
literal|". Starting with blank scope set."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oConf
operator|!=
literal|null
condition|)
name|toActivate
operator|=
name|ConfigurationManagement
operator|.
name|getScopesToActivate
argument_list|(
name|oConf
argument_list|)
expr_stmt|;
else|else
name|toActivate
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|String
name|token
range|:
name|toActivate
control|)
block|{
try|try
block|{
name|IRI
name|scopeId
init|=
name|IRI
operator|.
name|create
argument_list|(
name|token
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|reg
operator|.
name|setScopeActive
argument_list|(
name|scopeId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"KReS :: Ontology scope "
operator|+
name|token
operator|+
literal|" activated."
argument_list|)
expr_stmt|;
name|scopez
operator|.
name|remove
argument_list|(
name|reg
operator|.
name|getScope
argument_list|(
name|scopeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchScopeException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"KReS :: Tried to activate unavailable scope "
operator|+
name|token
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: Exception caught while activating scope "
operator|+
name|token
operator|+
literal|" . Skipping."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// Stop deactivating other scopes
comment|// for (OntologyScope scope : scopez) {
comment|// IRI scopeId = scope.getID();
comment|// try {
comment|// if (reg.isScopeActive(scopeId)) {
comment|// reg.setScopeActive(scopeId, false);
comment|// System.out.println("KReS :: Ontology scope " + scopeId
comment|// + " " + " deactivated.");
comment|// }
comment|// } catch (NoSuchScopeException ex) {
comment|// // Shouldn't happen because we already have the scope handle,
comment|// // however exceptions could be thrown erroneously...
comment|// System.err
comment|// .println("KReS :: Tried to deactivate unavailable scope "
comment|// + scopeId + ".");
comment|// } catch (Exception ex) {
comment|// System.err.println("Exception caught while deactivating scope "
comment|// + scope.getID() + " " + ex.getClass());
comment|// continue;
comment|// }
comment|// }
name|log
operator|.
name|debug
argument_list|(
literal|"KReS :: main component activated."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"KReS :: deactivating main component..."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKReSNamespace
parameter_list|()
block|{
name|String
name|ns
init|=
operator|(
name|String
operator|)
name|ce
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|KRES_NAMESPACE
argument_list|)
decl_stmt|;
return|return
name|ns
return|;
block|}
specifier|public
name|OntologyIndex
name|getOntologyIndex
parameter_list|()
block|{
return|return
name|oIndex
return|;
block|}
comment|/** 	 * Returns the ontology scope factory that was created along with the 	 * manager context. 	 *  	 * @return the ontology scope factory 	 */
specifier|public
name|OntologyScopeFactory
name|getOntologyScopeFactory
parameter_list|()
block|{
return|return
name|ontologyScopeFactory
return|;
block|}
comment|/** 	 * Returns the ontology space factory that was created along with the 	 * manager context. 	 *  	 * @return the ontology space factory 	 */
specifier|public
name|OntologySpaceFactory
name|getOntologySpaceFactory
parameter_list|()
block|{
return|return
name|ontologySpaceFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntologyStorage
name|getOntologyStore
parameter_list|()
block|{
return|return
name|storage
return|;
block|}
specifier|public
name|OWLOntologyManager
name|getOwlCacheManager
parameter_list|()
block|{
comment|// return OWLManager.createOWLOntologyManager();
return|return
name|owlCacheManager
return|;
block|}
comment|/** 	 * Returns a factory object that can be used for obtaining OWL API objects. 	 *  	 * @return the default OWL data factory 	 */
specifier|public
name|OWLDataFactory
name|getOwlFactory
parameter_list|()
block|{
return|return
name|owlFactory
return|;
block|}
comment|/** 	 * Returns the default ontology registry loader. 	 *  	 * @return the default ontology registry loader 	 */
specifier|public
name|RegistryLoader
name|getRegistryLoader
parameter_list|()
block|{
return|return
name|registryLoader
return|;
block|}
comment|/** 	 * Returns the unique ontology scope registry for this context. 	 *  	 * @return the ontology scope registry 	 */
specifier|public
name|ScopeRegistry
name|getScopeRegistry
parameter_list|()
block|{
return|return
name|scopeRegistry
return|;
block|}
specifier|public
name|KReSSessionManager
name|getSessionManager
parameter_list|()
block|{
return|return
name|sessionManager
return|;
block|}
specifier|public
name|String
index|[]
name|getUrisToActivate
parameter_list|()
block|{
return|return
name|toActivate
return|;
block|}
block|}
end_class

end_unit

