begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|ontology
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|ScopeEventListener
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|ONManager
import|;
end_import

begin_comment
comment|/**  * Utility class that instantiates default implementations of ontology scope.  *   * @author alessandro  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyScopeFactoryImpl
implements|implements
name|OntologyScopeFactory
block|{
specifier|private
name|Set
argument_list|<
name|ScopeEventListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|ScopeEventListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ScopeRegistry
name|registry
decl_stmt|;
specifier|protected
name|OntologySpaceFactory
name|spaceFactory
decl_stmt|;
specifier|public
name|OntologyScopeFactoryImpl
parameter_list|(
name|ScopeRegistry
name|registry
parameter_list|,
name|OntologySpaceFactory
name|spaceFactory
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|spaceFactory
operator|=
name|spaceFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addScopeEventListener
parameter_list|(
name|ScopeEventListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearScopeEventListeners
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OntologyScope
name|createOntologyScope
parameter_list|(
name|IRI
name|scopeID
parameter_list|,
name|OntologyInputSource
name|coreSource
parameter_list|)
throws|throws
name|DuplicateIDException
block|{
return|return
name|createOntologyScope
argument_list|(
name|scopeID
argument_list|,
name|coreSource
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntologyScope
name|createOntologyScope
parameter_list|(
name|IRI
name|scopeID
parameter_list|,
name|OntologyInputSource
name|coreSource
parameter_list|,
name|OntologyInputSource
name|customSource
parameter_list|)
throws|throws
name|DuplicateIDException
block|{
if|if
condition|(
name|registry
operator|.
name|containsScope
argument_list|(
name|scopeID
argument_list|)
condition|)
throw|throw
operator|new
name|DuplicateIDException
argument_list|(
name|scopeID
argument_list|,
literal|"Scope registry already contains ontology scope with ID "
operator|+
name|scopeID
argument_list|)
throw|;
name|OntologyScope
name|scope
init|=
operator|new
name|OntologyScopeImpl
argument_list|(
name|scopeID
argument_list|,
name|spaceFactory
argument_list|,
name|coreSource
argument_list|,
name|customSource
argument_list|)
decl_stmt|;
comment|// scope.addOntologyScopeListener(ONManager.get().getOntologyIndex());
comment|// TODO : manage scopes with null core ontologies
name|fireScopeCreated
argument_list|(
name|scope
argument_list|)
expr_stmt|;
return|return
name|scope
return|;
block|}
specifier|protected
name|void
name|fireScopeCreated
parameter_list|(
name|OntologyScope
name|scope
parameter_list|)
block|{
for|for
control|(
name|ScopeEventListener
name|l
range|:
name|listeners
control|)
name|l
operator|.
name|scopeCreated
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ScopeEventListener
argument_list|>
name|getScopeEventListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeScopeEventListener
parameter_list|(
name|ScopeEventListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

