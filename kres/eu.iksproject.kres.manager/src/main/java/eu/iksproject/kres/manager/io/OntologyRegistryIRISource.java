begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|stlab
operator|.
name|xd
operator|.
name|registry
operator|.
name|models
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|stlab
operator|.
name|xd
operator|.
name|registry
operator|.
name|models
operator|.
name|RegistryItem
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|io
operator|.
name|AbstractOntologyInputSource
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|io
operator|.
name|OntologyInputSource
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|api
operator|.
name|manager
operator|.
name|registry
operator|.
name|KReSRegistryLoader
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|kres
operator|.
name|manager
operator|.
name|util
operator|.
name|OntologyUtils
import|;
end_import

begin_comment
comment|/**  * An input source that provides a single ontology that imports all the imported  * ontology libraries found in the ontology registry obtained by dereferencing a  * supplied IRI.  *   * @author alessandro  *   */
end_comment

begin_class
specifier|public
class|class
name|OntologyRegistryIRISource
extends|extends
name|AbstractOntologyInputSource
block|{
specifier|protected
name|IRI
name|registryIRI
init|=
literal|null
decl_stmt|;
specifier|public
name|OntologyRegistryIRISource
parameter_list|(
name|IRI
name|registryIRI
parameter_list|,
name|OWLOntologyManager
name|ontologyManager
parameter_list|,
name|KReSRegistryLoader
name|loader
parameter_list|)
block|{
name|this
argument_list|(
name|registryIRI
argument_list|,
name|ontologyManager
argument_list|,
name|loader
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a new ontology input source by providing a new root ontology that 	 * imports the entire network addressed by the ontology registry at the 	 * supplied IRI. 	 *  	 * @param registryIRI 	 */
specifier|public
name|OntologyRegistryIRISource
parameter_list|(
name|IRI
name|registryIRI
parameter_list|,
name|OWLOntologyManager
name|ontologyManager
parameter_list|,
name|KReSRegistryLoader
name|loader
parameter_list|,
name|OntologyInputSource
name|parentSrc
parameter_list|)
block|{
name|this
operator|.
name|registryIRI
operator|=
name|registryIRI
expr_stmt|;
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|subtrees
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Registry
name|reg
range|:
name|loader
operator|.
name|loadRegistriesEager
argument_list|(
name|registryIRI
argument_list|)
control|)
block|{
for|for
control|(
name|RegistryItem
name|ri
range|:
name|reg
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|ri
operator|.
name|isLibrary
argument_list|()
condition|)
try|try
block|{
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|adds
init|=
name|loader
operator|.
name|gatherOntologies
argument_list|(
name|ri
argument_list|,
name|ontologyManager
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|subtrees
operator|.
name|addAll
argument_list|(
name|adds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// Chettefreca
continue|continue;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"KReS : [NONFATAL] Failed to load ontology library "
operator|+
name|ri
operator|.
name|getName
argument_list|()
operator|+
literal|". Skipping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// If we can't load this library at all, scrap it.
comment|// TODO : not entirely convinced of this step.
continue|continue;
block|}
block|}
block|}
comment|// We always construct a new root now, even if there's just one subtree.
comment|// Set<OWLOntology> subtrees = mgr.getOntologies();
comment|// if (subtrees.size() == 1)
comment|// rootOntology = subtrees.iterator().next();
comment|// else
try|try
block|{
if|if
condition|(
name|parentSrc
operator|!=
literal|null
condition|)
name|rootOntology
operator|=
name|OntologyUtils
operator|.
name|buildImportTree
argument_list|(
name|parentSrc
argument_list|,
name|subtrees
argument_list|,
name|ontologyManager
argument_list|)
expr_stmt|;
else|else
name|rootOntology
operator|=
name|OntologyUtils
operator|.
name|buildImportTree
argument_list|(
name|subtrees
argument_list|,
name|ontologyManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"KReS :: Failed to build import tree for registry source "
operator|+
name|registryIRI
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * This method always return null. The ontology that imports the whole 	 * network is created in-memory, therefore it has no physical IRI. 	 */
annotation|@
name|Override
specifier|public
name|IRI
name|getPhysicalIRI
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 * This method always return false. The ontology that imports the whole 	 * network is created in-memory, therefore it has no physical IRI. 	 */
annotation|@
name|Override
specifier|public
name|boolean
name|hasPhysicalIRI
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see eu.iksproject.kres.manager.io.AbstractOntologyInputSource#toString() 	 */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"REGISTRY_IRI<"
operator|+
name|registryIRI
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

