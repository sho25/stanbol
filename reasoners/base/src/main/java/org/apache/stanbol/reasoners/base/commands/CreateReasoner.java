begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|HermiT
operator|.
name|Reasoner
operator|.
name|ReasonerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|owllink
operator|.
name|OWLlinkHTTPXMLReasonerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|owllink
operator|.
name|OWLlinkReasonerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|OWLReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|OWLReasonerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|SimpleConfiguration
import|;
end_import

begin_comment
comment|/**  * This class create an OWLReasoner. The used reasoner is HermiT but alternatively can be used an online reasoner.  *   */
end_comment

begin_class
specifier|public
class|class
name|CreateReasoner
block|{
specifier|private
name|OWLReasoner
name|reasoner
decl_stmt|;
comment|/**      * To create an HermiT OWLReasoner object with the input ontology.      *      * @param owl {An OWLOntology object where to perform the inferences.}      */
specifier|public
name|CreateReasoner
parameter_list|(
name|OWLOntology
name|owl
parameter_list|)
block|{
comment|//ConsoleProgressMonitor progressMonitor = new ConsoleProgressMonitor();
name|OWLReasonerConfiguration
name|config
init|=
operator|new
name|SimpleConfiguration
argument_list|()
decl_stmt|;
name|ReasonerFactory
name|risfactory
init|=
operator|new
name|ReasonerFactory
argument_list|()
decl_stmt|;
name|this
operator|.
name|reasoner
operator|=
name|risfactory
operator|.
name|createReasoner
argument_list|(
name|owl
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * To create an HermiT OWLReasoner object with the input ontology.      *      * @param owl {An OWLOntology object where to perform the inferences.}      * @param owlrc {An OWLReasonerConfiguration object contains particular configuration to set the resaoner.}      */
specifier|public
name|CreateReasoner
parameter_list|(
name|OWLOntology
name|owl
parameter_list|,
name|OWLReasonerConfiguration
name|owlrc
parameter_list|)
block|{
name|ReasonerFactory
name|risfactory
init|=
operator|new
name|ReasonerFactory
argument_list|()
decl_stmt|;
name|this
operator|.
name|reasoner
operator|=
name|risfactory
operator|.
name|createReasoner
argument_list|(
name|owl
argument_list|,
name|owlrc
argument_list|)
expr_stmt|;
block|}
comment|/**      * To create an OWLReasoner object by using online reasoner with the input ontology.      *      * @param owl {An OWLOntology object where to perform the inferences.}      * @param reasonerurl {The url of the reasoner server end-point.}      */
specifier|public
name|CreateReasoner
parameter_list|(
name|OWLOntology
name|owl
parameter_list|,
name|URL
name|reasonerurl
parameter_list|)
block|{
name|OWLlinkReasonerConfiguration
name|reasonerConfiguration
init|=
operator|new
name|OWLlinkReasonerConfiguration
argument_list|(
name|reasonerurl
argument_list|)
decl_stmt|;
name|OWLlinkHTTPXMLReasonerFactory
name|factory
init|=
operator|new
name|OWLlinkHTTPXMLReasonerFactory
argument_list|()
decl_stmt|;
name|this
operator|.
name|reasoner
operator|=
name|factory
operator|.
name|createNonBufferingReasoner
argument_list|(
name|owl
argument_list|,
name|reasonerConfiguration
argument_list|)
expr_stmt|;
block|}
comment|/**      * To get the created resoner.      *      * @return {An OWLReasoner object with the ontology inside.}      */
specifier|public
name|OWLReasoner
name|getReasoner
parameter_list|()
block|{
return|return
name|this
operator|.
name|reasoner
return|;
block|}
block|}
end_class

end_unit

