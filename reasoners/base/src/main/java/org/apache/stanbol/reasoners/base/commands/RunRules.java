begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|OWLReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|InferredOntologyGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|transformation
operator|.
name|JenaToOwlConvert
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RunRules
block|{
specifier|private
name|OWLOntology
name|targetontology
decl_stmt|;
specifier|private
name|OWLReasoner
name|reasoner
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|private
name|OWLOntology
name|originalowl
decl_stmt|;
comment|/**      * To create a list of imported ontlogy to be added as import declarations      *      * @param inowl {Input ontology where to get the import declarations}      * @return {A list of declarations}      */
specifier|private
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|createImportList
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|,
name|OWLOntology
name|toadd
parameter_list|)
block|{
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|importedonto
init|=
name|inowl
operator|.
name|getDirectImports
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|auxfactory
init|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedonto
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|importedonto
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxfactory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|OWLImportsDeclaration
argument_list|>
name|importedontob
init|=
name|inowl
operator|.
name|getImportsDeclarations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|additions
operator|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
expr_stmt|;
name|auxfactory
operator|=
name|inowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
while|while
condition|(
name|importedontob
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLImportsDeclaration
name|auxontob
init|=
name|importedontob
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|toadd
argument_list|,
name|auxontob
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|additions
return|;
block|}
comment|/**      * To clone ontology with all its axioms and imports declaration      *      * @param inowl {The onotlogy to be cloned}      * @return {An ontology with the same characteristics}      */
specifier|private
name|void
name|cloneOntology
parameter_list|(
name|OWLOntology
name|inowl
parameter_list|)
block|{
comment|//Clone the targetontology
try|try
block|{
name|this
operator|.
name|originalowl
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|inowl
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|manager
init|=
name|this
operator|.
name|originalowl
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
comment|//Add axioms
name|manager
operator|.
name|addAxioms
argument_list|(
name|this
operator|.
name|originalowl
argument_list|,
name|inowl
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add import declaration
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|inowl
argument_list|,
name|originalowl
argument_list|)
decl_stmt|;
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|manager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|ex
parameter_list|)
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|RunRules
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Constructor where inputs are the OWLOntology models contains the rules and the target ontology where to perform the reasoning (HermiT).      *      * @param SWRLruleOntology {The OWLOntology contains the SWRL rules.}      * @param targetOntology {The OWLOntology model where to perform the SWRL rule reasoner.}      */
specifier|public
name|RunRules
parameter_list|(
name|OWLOntology
name|SWRLruleOntology
parameter_list|,
name|OWLOntology
name|targetOntology
parameter_list|)
block|{
name|cloneOntology
argument_list|(
name|targetOntology
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetontology
operator|=
name|targetOntology
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|originalowl
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
comment|//Add SWRL to the model
name|owlmanager
operator|.
name|addAxioms
argument_list|(
name|originalowl
argument_list|,
name|SWRLruleOntology
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|SWRLruleOntology
argument_list|,
name|originalowl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|additions
operator|.
name|isEmpty
argument_list|()
condition|)
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
comment|//Create the reasoner
name|this
operator|.
name|reasoner
operator|=
operator|(
operator|new
name|CreateReasoner
argument_list|(
name|originalowl
argument_list|)
operator|)
operator|.
name|getReasoner
argument_list|()
expr_stmt|;
comment|//Prepare the reasoner
name|this
operator|.
name|reasoner
operator|.
name|prepareReasoner
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor where the inputs are the OWLOntology models contains the rules, the target ontology where to perform the reasoning and the url of reasoner server end-point.      *      * @param SWRLruleOntology {The OWLOntology contains the SWRL rules.}      * @param targetOntology {The OWLOntology model where to perform the SWRL rule reasoner.}      * @param reasonerurl {The url of reasoner server end-point.}      */
specifier|public
name|RunRules
parameter_list|(
name|OWLOntology
name|SWRLruleOntology
parameter_list|,
name|OWLOntology
name|targetOntology
parameter_list|,
name|URL
name|reasonerurl
parameter_list|)
block|{
name|cloneOntology
argument_list|(
name|targetOntology
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetontology
operator|=
name|targetOntology
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|originalowl
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
comment|//Add SWRL to the model
name|owlmanager
operator|.
name|addAxioms
argument_list|(
name|originalowl
argument_list|,
name|SWRLruleOntology
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|SWRLruleOntology
argument_list|,
name|originalowl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|additions
operator|.
name|isEmpty
argument_list|()
condition|)
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
comment|//Create the reasoner
name|this
operator|.
name|reasoner
operator|=
operator|(
operator|new
name|CreateReasoner
argument_list|(
name|originalowl
argument_list|,
name|reasonerurl
argument_list|)
operator|)
operator|.
name|getReasoner
argument_list|()
expr_stmt|;
comment|//Prepare the reasoner
name|this
operator|.
name|reasoner
operator|.
name|prepareReasoner
argument_list|()
expr_stmt|;
block|}
comment|/**      * Construct where the inputs are the: Model of type jena.rdf.model.Model that contains the SWRL rules and a target OWLOntology where to perform the reasoning.      *      * @param SWRLruleOntology {The Jena Model contains the SWRL rules.}      * @param targetOntology {The OWLOntology model where to perform the SWRL rule reasoner.}      */
specifier|public
name|RunRules
parameter_list|(
name|Model
name|SWRLruleOntology
parameter_list|,
name|OWLOntology
name|targetOntology
parameter_list|)
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|jenamodel
operator|.
name|add
argument_list|(
name|SWRLruleOntology
argument_list|)
expr_stmt|;
name|OWLOntology
name|swrlowlmodel
init|=
name|j2o
operator|.
name|ModelJenaToOwlConvert
argument_list|(
name|jenamodel
argument_list|,
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|cloneOntology
argument_list|(
name|targetOntology
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetontology
operator|=
name|targetOntology
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|originalowl
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
comment|//Add SWRL to the model
name|owlmanager
operator|.
name|addAxioms
argument_list|(
name|originalowl
argument_list|,
name|swrlowlmodel
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|swrlowlmodel
argument_list|,
name|originalowl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|additions
operator|.
name|isEmpty
argument_list|()
condition|)
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
comment|//Create the reasoner
name|this
operator|.
name|reasoner
operator|=
operator|(
operator|new
name|CreateReasoner
argument_list|(
name|originalowl
argument_list|)
operator|)
operator|.
name|getReasoner
argument_list|()
expr_stmt|;
comment|//Prepare the reasoner
name|this
operator|.
name|reasoner
operator|.
name|prepareReasoner
argument_list|()
expr_stmt|;
block|}
comment|/**      * Construct where the inputs are the: Model of type jena.rdf.model.Model that contains the SWRL rules and a target OWLOntology where to perform the reasoning.      *      * @param SWRLruleOntology {The Jena Model contains the SWRL rules.}      * @param targetOntology {The OWLOntology model where to perform the SWRL rule reasoner.}      * @param reasonerurl {The url of the the reasoner server end-point.}      */
specifier|public
name|RunRules
parameter_list|(
name|Model
name|SWRLruleOntology
parameter_list|,
name|OWLOntology
name|targetOntology
parameter_list|,
name|URL
name|reasonerurl
parameter_list|)
block|{
name|JenaToOwlConvert
name|j2o
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
name|OntModel
name|jenamodel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|()
decl_stmt|;
name|jenamodel
operator|.
name|add
argument_list|(
name|SWRLruleOntology
argument_list|)
expr_stmt|;
name|OWLOntology
name|swrlowlmodel
init|=
name|j2o
operator|.
name|ModelJenaToOwlConvert
argument_list|(
name|jenamodel
argument_list|,
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|cloneOntology
argument_list|(
name|targetOntology
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetontology
operator|=
name|targetOntology
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|originalowl
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
comment|//Add SWRL to the model
name|owlmanager
operator|.
name|addAxioms
argument_list|(
name|originalowl
argument_list|,
name|swrlowlmodel
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
name|createImportList
argument_list|(
name|swrlowlmodel
argument_list|,
name|originalowl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|additions
operator|.
name|isEmpty
argument_list|()
condition|)
name|owlmanager
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
comment|//Create the reasoner
name|this
operator|.
name|reasoner
operator|=
operator|(
operator|new
name|CreateReasoner
argument_list|(
name|originalowl
argument_list|,
name|reasonerurl
argument_list|)
operator|)
operator|.
name|getReasoner
argument_list|()
expr_stmt|;
comment|//Prepare the reasoner
name|this
operator|.
name|reasoner
operator|.
name|prepareReasoner
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method will run the reasoner and then save the inferred axioms with old axioms in a new ontology      *      * @param newmodel {The OWLOntology model where to save the inference.}      * @return {An OWLOntology object contains the ontology and the inferred axioms.}      */
specifier|public
name|OWLOntology
name|runRulesReasoner
parameter_list|(
name|OWLOntology
name|newmodel
parameter_list|)
block|{
name|InferredOntologyGenerator
name|iogpellet
init|=
operator|new
name|InferredOntologyGenerator
argument_list|(
name|reasoner
argument_list|)
decl_stmt|;
name|iogpellet
operator|.
name|fillOntology
argument_list|(
name|owlmanager
argument_list|,
name|newmodel
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|setx
init|=
name|newmodel
operator|.
name|getAxioms
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLAxiom
argument_list|>
name|iter
init|=
name|setx
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLAxiom
name|axiom
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|axiom
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Equivalent"
argument_list|)
condition|)
block|{
name|newmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|removeAxiom
argument_list|(
name|newmodel
argument_list|,
name|axiom
argument_list|)
expr_stmt|;
block|}
block|}
name|additions
operator|=
name|createImportList
argument_list|(
name|targetontology
argument_list|,
name|newmodel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|additions
operator|.
name|isEmpty
argument_list|()
condition|)
name|newmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
return|return
name|newmodel
return|;
block|}
comment|/**      * This method will run the reasoner and then save the inferred axion in the  OWLOntology      *      * @return {An OWLOntology object contains the ontology and the inferred axioms.}      */
specifier|public
name|OWLOntology
name|runRulesReasoner
parameter_list|()
block|{
comment|//Create inferred axiom
name|InferredOntologyGenerator
name|ioghermit
init|=
operator|new
name|InferredOntologyGenerator
argument_list|(
name|reasoner
argument_list|)
decl_stmt|;
name|ioghermit
operator|.
name|fillOntology
argument_list|(
name|owlmanager
argument_list|,
name|targetontology
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|setx
init|=
name|targetontology
operator|.
name|getAxioms
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLAxiom
argument_list|>
name|iter
init|=
name|setx
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLAxiom
name|axiom
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|axiom
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Equivalent"
argument_list|)
condition|)
block|{
name|targetontology
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|removeAxiom
argument_list|(
name|targetontology
argument_list|,
name|axiom
argument_list|)
expr_stmt|;
block|}
block|}
comment|//            OWLDataProperty noprop = newmodel.getOWLOntologyManager().getOWLDataFactory().getOWLDataProperty(IRI.create("http://www.w3.org/2002/07/owl#topDataProperty"));
comment|//            OWLEquivalentDataPropertiesAxiom nopropax = newmodel.getOWLOntologyManager().getOWLDataFactory().getOWLEquivalentDataPropertiesAxiom(noprop);
comment|//            newmodel.getOWLOntologyManager().removeAxiom(newmodel, nopropax);
return|return
name|targetontology
return|;
block|}
block|}
end_class

end_unit

