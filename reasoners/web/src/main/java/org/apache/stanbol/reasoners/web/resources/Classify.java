begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|SessionOntologySpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|ClerezzaOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
operator|.
name|CreateReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
operator|.
name|RunReasoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
operator|.
name|RunRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|KB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|RuleStoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
operator|.
name|RuleParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StringDocumentTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|reasoner
operator|.
name|InconsistentOntologyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataParam
import|;
end_import

begin_comment
comment|/**  *   * @author elvio  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/reasoners/classify"
argument_list|)
specifier|public
class|class
name|Classify
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|RuleStore
name|kresRuleStore
decl_stmt|;
specifier|private
name|OWLOntology
name|inputowl
decl_stmt|;
specifier|protected
name|ONManager
name|onm
decl_stmt|;
specifier|protected
name|ClerezzaOntologyStorage
name|storage
decl_stmt|;
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * To get the RuleStoreImpl where are stored the rules and the recipes      *       * @param servletContext      *            {To get the context where the REST service is running.}      */
specifier|public
name|Classify
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|servletContext
operator|=
name|servletContext
expr_stmt|;
comment|// Retrieve the rule store
name|this
operator|.
name|kresRuleStore
operator|=
operator|(
name|RuleStore
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RuleStore
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
comment|// Retrieve the ontology network manager
name|this
operator|.
name|onm
operator|=
operator|(
name|ONManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ONManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|storage
operator|=
operator|(
name|ClerezzaOntologyStorage
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ClerezzaOntologyStorage
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|kresRuleStore
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No KReSRuleStore with stored rules and recipes found in servlet context. Instantiating manually with default values..."
argument_list|)
expr_stmt|;
name|this
operator|.
name|kresRuleStore
operator|=
operator|new
name|RuleStoreImpl
argument_list|(
name|onm
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"PATH TO OWL FILE LOADED: "
operator|+
name|kresRuleStore
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *       * @param owl      *            {OWLOntology object contains a single recipe}      * @return {An Set<SWRLRule> that contains the SWRL rule.}      */
specifier|private
name|Set
argument_list|<
name|SWRLRule
argument_list|>
name|fromRecipeToModel
parameter_list|(
name|OWLOntology
name|owl
parameter_list|)
throws|throws
name|NoSuchRecipeException
block|{
comment|// FIXME: why the heck is this method re-instantiating a rule store?!?
name|RuleStore
name|store
init|=
operator|new
name|RuleStoreImpl
argument_list|(
name|onm
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|owl
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|owl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|IRI
name|recipeclass
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#Recipe"
argument_list|)
decl_stmt|;
name|OWLClass
name|claz
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|recipeclass
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|axioms
init|=
name|owl
operator|.
name|getReferencingAxioms
argument_list|(
name|claz
argument_list|)
decl_stmt|;
name|IRI
name|recipeiri
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OWLAxiom
name|axiom
range|:
name|axioms
control|)
block|{
if|if
condition|(
name|axiom
operator|instanceof
name|OWLClassAssertionAxiom
condition|)
block|{
name|OWLClassAssertionAxiom
name|caa
init|=
operator|(
name|OWLClassAssertionAxiom
operator|)
name|axiom
decl_stmt|;
name|recipeiri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|caa
operator|.
name|getIndividual
argument_list|()
operator|.
name|toStringID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recipeiri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchRecipeException
argument_list|(
literal|null
argument_list|)
throw|;
block|}
name|OWLIndividual
name|recipeIndividual
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeiri
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|objectProperty
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|rules
init|=
name|recipeIndividual
operator|.
name|getObjectPropertyValues
argument_list|(
name|objectProperty
argument_list|,
name|store
operator|.
name|getOntology
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|kReSRules
init|=
literal|""
decl_stmt|;
for|for
control|(
name|OWLIndividual
name|rule
range|:
name|rules
control|)
block|{
name|OWLDataProperty
name|hasBodyAndHead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|kReSRuleLiterals
init|=
name|rule
operator|.
name|getDataPropertyValues
argument_list|(
name|hasBodyAndHead
argument_list|,
name|store
operator|.
name|getOntology
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OWLLiteral
name|kReSRuleLiteral
range|:
name|kReSRuleLiterals
control|)
block|{
name|kReSRules
operator|+=
name|kReSRuleLiteral
operator|.
name|getLiteral
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
expr_stmt|;
block|}
block|}
name|KB
name|kReSKB
init|=
name|RuleParserImpl
operator|.
name|parse
argument_list|(
name|kReSRules
argument_list|)
decl_stmt|;
name|RuleList
name|listrules
init|=
name|kReSKB
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Rule
argument_list|>
name|iterule
init|=
name|listrules
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SWRLRule
argument_list|>
name|swrlrules
init|=
operator|new
name|HashSet
argument_list|<
name|SWRLRule
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterule
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Rule
name|singlerule
init|=
name|iterule
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Resource resource = singlerule.toSWRL(jenamodel);<-- FIXME This method does not work properly
name|swrlrules
operator|.
name|add
argument_list|(
name|singlerule
operator|.
name|toSWRL
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|swrlrules
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|APPLICATION_FORM_URLENCODED
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|}
argument_list|)
specifier|public
name|Response
name|classify
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"session"
argument_list|)
name|String
name|session
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"scope"
argument_list|)
name|String
name|scope
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|)
block|{
return|return
name|ontologyClassify
argument_list|(
name|session
argument_list|,
name|scope
argument_list|,
name|recipe
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * To run a classifying reasoner on a RDF input File or IRI on the base of a Scope (or an ontology) and a      * recipe. Can be used either HermiT or an owl-link server reasoner end-point      *       * @param session      *            {A string contains the session IRI used to classify the input.}      * @param scope      *            {A string contains either a specific scope's ontology or the scope IRI used to classify the      *            input.}      * @param recipe      *            {A string contains the recipe IRI from the service      *            http://localhost:port/kres/recipe/recipeName.}      * @Param file {A file in a RDF (eihter RDF/XML or owl) to be classified.}      * @Param input_graph {A string contains the IRI of RDF (either RDF/XML or OWL) to be classified.}      * @Param owllink_endpoint {A string contains the ressoner server end-point URL.}      * @return Return:<br/>      *         200 The ontology is retrieved, containing only class axioms<br/>      *         400 To run the session is needed the scope<br/>      *         404 No data is retrieved<br/>      *         409 Too much RDF inputs<br/>      *         500 Some error occurred      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MULTIPART_FORM_DATA
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|}
argument_list|)
specifier|public
name|Response
name|ontologyClassify
parameter_list|(
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"session"
argument_list|)
name|String
name|session
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"scope"
argument_list|)
name|String
name|scope
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"input-graph"
argument_list|)
name|String
name|input_graph
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"file"
argument_list|)
name|File
name|file
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"owllink-endpoint"
argument_list|)
name|String
name|owllink_endpoint
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|(
name|session
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|scope
operator|==
literal|null
operator|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unspecified scope parameter for session {} , cannot classify."
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Check for input conflict. Only one input at once is allowed
if|if
condition|(
operator|(
name|file
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|input_graph
operator|!=
literal|null
operator|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Parameters file and input-graph are mutually exclusive and cannot be specified together."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|CONFLICT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Load input file or graph
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
name|this
operator|.
name|inputowl
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|input_graph
operator|!=
literal|null
condition|)
name|this
operator|.
name|inputowl
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|input_graph
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputowl
operator|==
literal|null
operator|&&
operator|(
name|session
operator|==
literal|null
operator|||
name|scope
operator|==
literal|null
operator|)
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
if|if
condition|(
name|inputowl
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
name|this
operator|.
name|inputowl
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|()
expr_stmt|;
else|else
block|{
name|this
operator|.
name|inputowl
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Create list to add ontologies as imported
name|OWLOntologyManager
name|mgr
init|=
name|inputowl
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|inputowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
comment|// Load ontologies from scope, RDF input and recipe
comment|// Try to resolve scope IRI
if|if
condition|(
operator|(
name|scope
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|session
operator|==
literal|null
operator|)
condition|)
try|try
block|{
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|scope
argument_list|)
decl_stmt|;
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologyScope
name|ontoscope
init|=
name|reg
operator|.
name|getScope
argument_list|(
name|iri
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|importscope
init|=
name|ontoscope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|getOntologies
argument_list|(
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OntologySpace
argument_list|>
name|importsession
init|=
name|ontoscope
operator|.
name|getSessionSpaces
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Add ontology as import form scope, if it is anonymus we
comment|// try to add single axioms.
while|while
condition|(
name|importscope
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|importscope
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|auxonto
operator|.
name|getOntologyID
argument_list|()
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|inputowl
argument_list|,
name|factory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mgr
operator|.
name|addAxioms
argument_list|(
name|inputowl
argument_list|,
name|auxonto
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add ontology form sessions
while|while
condition|(
name|importsession
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|sessionontos
init|=
name|importsession
operator|.
name|next
argument_list|()
operator|.
name|getOntologies
argument_list|(
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sessionontos
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|sessionontos
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|auxonto
operator|.
name|getOntologyID
argument_list|()
operator|.
name|isAnonymous
argument_list|()
condition|)
block|{
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|inputowl
argument_list|,
name|factory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mgr
operator|.
name|addAxioms
argument_list|(
name|inputowl
argument_list|,
name|auxonto
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
comment|// Get Ontologies from session
if|if
condition|(
operator|(
name|session
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|scope
operator|!=
literal|null
operator|)
condition|)
try|try
block|{
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|scope
argument_list|)
decl_stmt|;
name|ScopeRegistry
name|reg
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologyScope
name|ontoscope
init|=
name|reg
operator|.
name|getScope
argument_list|(
name|iri
argument_list|)
decl_stmt|;
name|SessionOntologySpace
name|sos
init|=
name|ontoscope
operator|.
name|getSessionSpace
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|session
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|OWLOntology
name|a
range|:
name|ontoscope
operator|.
name|getCustomSpace
argument_list|()
operator|.
name|getOntologies
argument_list|(
literal|true
argument_list|)
control|)
name|mgr
operator|.
name|addAxioms
argument_list|(
name|inputowl
argument_list|,
name|a
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLOntology
name|a
range|:
name|sos
operator|.
name|getOntologyManager
argument_list|()
operator|.
name|getOntologies
argument_list|()
control|)
name|mgr
operator|.
name|addAxioms
argument_list|(
name|inputowl
argument_list|,
name|a
operator|.
name|getAxioms
argument_list|()
argument_list|)
expr_stmt|;
name|inputowl
operator|=
name|mgr
operator|.
name|getOntology
argument_list|(
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
comment|// After gathered the all ontology as imported now we apply the
comment|// changes
if|if
condition|(
name|additions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|mgr
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
name|inputowl
operator|=
name|mgr
operator|.
name|getOntology
argument_list|(
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run HermiT if the reasonerURL is null;
if|if
condition|(
name|owllink_endpoint
operator|==
literal|null
condition|)
block|{
comment|/**                  * If we run hermit, we must remove all datatype assertions from the ontology. Non default                  * datatypes, such http://dbpedia.org/datatype/hour would break the process                  */
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|removeThese
init|=
operator|new
name|HashSet
argument_list|<
name|OWLAxiom
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLAxiom
name|axiom
range|:
name|inputowl
operator|.
name|getAxioms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|axiom
operator|.
name|getDatatypesInSignature
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeThese
operator|.
name|add
argument_list|(
name|axiom
argument_list|)
expr_stmt|;
block|}
block|}
name|inputowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|removeAxioms
argument_list|(
name|inputowl
argument_list|,
name|removeThese
argument_list|)
expr_stmt|;
name|inputowl
operator|=
name|inputowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntology
argument_list|(
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|recipe
operator|!=
literal|null
condition|)
block|{
name|OWLOntologyManager
name|mngr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|recipeowl
init|=
name|mngr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
decl_stmt|;
comment|// OWLOntology rulesOntology = mngr.createOntology();
name|Set
argument_list|<
name|SWRLRule
argument_list|>
name|swrlRules
init|=
name|fromRecipeToModel
argument_list|(
name|recipeowl
argument_list|)
decl_stmt|;
name|inputowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|addAxioms
argument_list|(
name|inputowl
argument_list|,
name|swrlRules
argument_list|)
expr_stmt|;
name|inputowl
operator|=
name|inputowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntology
argument_list|(
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// FIXME : quick dirty fix (hack?)
name|StringDocumentTarget
name|tgt
init|=
operator|new
name|StringDocumentTarget
argument_list|()
decl_stmt|;
name|inputowl
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|saveOntology
argument_list|(
name|inputowl
argument_list|,
name|tgt
argument_list|)
expr_stmt|;
name|inputowl
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|tgt
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the reasoner for the classification
name|CreateReasoner
name|newreasoner
init|=
operator|new
name|CreateReasoner
argument_list|(
name|inputowl
argument_list|)
decl_stmt|;
comment|// Prepare and start the reasoner to classify ontology resources.
name|RunReasoner
name|reasoner
init|=
operator|new
name|RunReasoner
argument_list|(
name|newreasoner
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a new OWLOntology model where to put the inferred axioms
name|OWLOntology
name|output
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Initial input axioms count
name|int
name|startax
init|=
name|output
operator|.
name|getAxiomCount
argument_list|()
decl_stmt|;
comment|// Run the classification
name|output
operator|=
name|reasoner
operator|.
name|runClassifyInference
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|// End output axioms count
name|int
name|endax
init|=
name|output
operator|.
name|getAxiomCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|endax
operator|-
name|startax
operator|)
operator|>
literal|0
condition|)
block|{
comment|// Some inference is retrieved
return|return
name|Response
operator|.
name|ok
argument_list|(
name|output
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// No data is retrieved
return|return
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InconsistentOntologyException
name|exc
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot classify inconsistent ontology "
operator|+
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|,
name|exc
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|PRECONDITION_FAILED
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// If there is an owl-link server end-point specified in the form
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|recipe
operator|!=
literal|null
condition|)
block|{
name|OWLOntologyManager
name|mngr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|recipeowl
init|=
name|mngr
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntology
name|rulesOntology
init|=
name|mngr
operator|.
name|createOntology
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SWRLRule
argument_list|>
name|swrlRules
init|=
name|fromRecipeToModel
argument_list|(
name|recipeowl
argument_list|)
decl_stmt|;
name|mngr
operator|.
name|addAxioms
argument_list|(
name|rulesOntology
argument_list|,
name|swrlRules
argument_list|)
expr_stmt|;
name|rulesOntology
operator|=
name|mngr
operator|.
name|getOntology
argument_list|(
name|rulesOntology
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a reasoner to run rules contained in the
comment|// recipe by using the server and-point
name|RunRules
name|rulereasoner
init|=
operator|new
name|RunRules
argument_list|(
name|rulesOntology
argument_list|,
name|inputowl
argument_list|,
operator|new
name|URL
argument_list|(
name|owllink_endpoint
argument_list|)
argument_list|)
decl_stmt|;
comment|// Run the rule reasoner to the input RDF with the added
comment|// top-ontology
name|inputowl
operator|=
name|rulereasoner
operator|.
name|runRulesReasoner
argument_list|()
expr_stmt|;
block|}
comment|// Create the reasoner for the consistency check by using
comment|// the server and-point
name|CreateReasoner
name|newreasoner
init|=
operator|new
name|CreateReasoner
argument_list|(
name|inputowl
argument_list|,
operator|new
name|URL
argument_list|(
name|owllink_endpoint
argument_list|)
argument_list|)
decl_stmt|;
comment|// Prepare and start the reasoner to classify ontology's
comment|// resources
name|RunReasoner
name|reasoner
init|=
operator|new
name|RunReasoner
argument_list|(
name|newreasoner
operator|.
name|getReasoner
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a new OWLOntology model where to put the inferred
comment|// axioms
name|OWLOntology
name|output
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Initial input axioms count
name|int
name|startax
init|=
name|output
operator|.
name|getAxiomCount
argument_list|()
decl_stmt|;
comment|// Run the classification
name|output
operator|=
name|reasoner
operator|.
name|runClassifyInference
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|// End output axioms count
name|int
name|endax
init|=
name|output
operator|.
name|getAxiomCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|endax
operator|-
name|startax
operator|)
operator|>
literal|0
condition|)
block|{
comment|// Some inference is retrieved
return|return
name|Response
operator|.
name|ok
argument_list|(
name|output
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// No data is retrieved
return|return
name|Response
operator|.
name|status
argument_list|(
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InconsistentOntologyException
name|exc
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot classify ionconsistent ontology "
operator|+
name|inputowl
operator|.
name|getOntologyID
argument_list|()
argument_list|,
name|exc
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|PRECONDITION_FAILED
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getView
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|,
name|TEXT_HTML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

