begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|LockableMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|transformation
operator|.
name|JenaToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|jena
operator|.
name|JenaReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|owlapi
operator|.
name|OWLApiReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|InconsistentInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningServiceInputManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningServiceInputProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|UnsupportedTaskException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Rule
import|;
end_import

begin_comment
comment|/**  * This class executes the reasoning process, by delegating the actual work on the given {@see ReasoningService}.  * It can be used on real-time operations and as background {@see Job}  *   * Actually this class supports OWLApi and Jena based services.   * TODO In the future we may want to remove specific dependencies on service implementation from the executor.  *   * @author enridaga  */
end_comment

begin_class
specifier|public
class|class
name|ReasoningServiceExecutor
implements|implements
name|Job
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
specifier|private
name|ReasoningServiceInputManager
name|inmgr
decl_stmt|;
specifier|private
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|service
decl_stmt|;
specifier|private
name|String
name|task
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
decl_stmt|;
specifier|private
name|String
name|targetGraph
decl_stmt|;
comment|// This task is not dinamically provided by the service, since it work on a
comment|// specific method
comment|// (isConsistent())
specifier|public
specifier|static
name|String
name|TASK_CHECK
init|=
literal|"check"
decl_stmt|;
specifier|public
name|ReasoningServiceExecutor
parameter_list|(
name|TcManager
name|tcManager
parameter_list|,
name|ReasoningServiceInputManager
name|inmgr
parameter_list|,
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|service
parameter_list|,
name|String
name|task
parameter_list|,
name|String
name|targetGraph
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|tcManager
operator|=
name|tcManager
expr_stmt|;
name|this
operator|.
name|inmgr
operator|=
name|inmgr
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|targetGraph
operator|=
name|targetGraph
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
comment|/** 	 * Execute a JenaReasoningService 	 *  	 * TODO: Add parameter to decide if the output graph must be deleted if 	 * exists 	 *  	 * @param s 	 * @param input 	 * @param rules 	 * @return 	 * @throws ReasoningServiceException  	 * @throws UnsupportedTaskException  	 */
specifier|private
name|ReasoningServiceResult
argument_list|<
name|Model
argument_list|>
name|executeJenaReasoningService
parameter_list|(
name|String
name|task
parameter_list|,
name|JenaReasoningService
name|s
parameter_list|,
name|Model
name|input
parameter_list|,
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
parameter_list|,
name|String
name|targetGraphID
parameter_list|,
name|boolean
name|filtered
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|ReasoningServiceException
throws|,
name|UnsupportedTaskException
block|{
comment|// Check task: this is managed directly by the endpoint
if|if
condition|(
name|task
operator|.
name|equals
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Task is '{}'"
argument_list|,
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|is
init|=
name|s
operator|.
name|isConsistent
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReasoningServiceResult
argument_list|<
name|Model
argument_list|>
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|,
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ReasoningServiceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error thrown: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|Set
argument_list|<
name|Statement
argument_list|>
name|result
init|=
name|s
operator|.
name|runTask
argument_list|(
name|task
argument_list|,
name|input
argument_list|,
name|rules
argument_list|,
name|filtered
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Result is null"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Result is null."
argument_list|)
throw|;
block|}
name|Model
name|outputModel
init|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
decl_stmt|;
name|outputModel
operator|.
name|add
argument_list|(
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|Statement
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// If target is null, then get back results, elsewhere put it in
comment|// target graph
name|log
operator|.
name|debug
argument_list|(
literal|"Prepare output"
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetGraphID
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Returning {} statements"
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReasoningServiceResult
argument_list|<
name|Model
argument_list|>
argument_list|(
name|task
argument_list|,
literal|true
argument_list|,
name|outputModel
argument_list|)
return|;
block|}
else|else
block|{
name|save
argument_list|(
name|outputModel
argument_list|,
name|targetGraphID
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReasoningServiceResult
argument_list|<
name|Model
argument_list|>
argument_list|(
name|task
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ReasoningServiceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error thrown: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InconsistentInputException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The input is not consistent"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReasoningServiceResult
argument_list|<
name|Model
argument_list|>
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedTaskException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error thrown: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReasoningServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Executes the OWLApiReasoingService 	 *  	 * @param task 	 * @param s 	 * @param input 	 * @param rules 	 * @param targetGraphID 	 * @param parameters 	 * @return 	 * @throws InconsistentInputException  	 * @throws ReasoningServiceException  	 * @throws UnsupportedTaskException  	 */
specifier|private
name|ReasoningServiceResult
argument_list|<
name|OWLOntology
argument_list|>
name|executeOWLApiReasoningService
parameter_list|(
name|String
name|task
parameter_list|,
name|OWLApiReasoningService
name|s
parameter_list|,
name|OWLOntology
name|input
parameter_list|,
name|List
argument_list|<
name|SWRLRule
argument_list|>
name|rules
parameter_list|,
name|String
name|targetGraphID
parameter_list|,
name|boolean
name|filtered
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|InconsistentInputException
throws|,
name|ReasoningServiceException
throws|,
name|UnsupportedTaskException
block|{
comment|// Check task: this is managed directly by the endpoint
if|if
condition|(
name|task
operator|.
name|equals
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Task is '{}'"
argument_list|,
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|is
init|=
name|s
operator|.
name|isConsistent
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReasoningServiceResult
argument_list|<
name|OWLOntology
argument_list|>
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|,
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ReasoningServiceException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// We get the manager from the input ontology
comment|// XXX We must be aware of this.
name|OWLOntologyManager
name|manager
init|=
name|input
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
try|try
block|{
name|OWLOntology
name|output
init|=
name|manager
operator|.
name|createOntology
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|axioms
init|=
name|s
operator|.
name|runTask
argument_list|(
name|task
argument_list|,
name|input
argument_list|,
name|rules
argument_list|,
name|filtered
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Prepare output: {} axioms"
argument_list|,
name|axioms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addAxioms
argument_list|(
name|output
argument_list|,
name|axioms
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetGraphID
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ReasoningServiceResult
argument_list|<
name|OWLOntology
argument_list|>
argument_list|(
name|task
argument_list|,
literal|true
argument_list|,
name|manager
operator|.
name|getOntology
argument_list|(
name|output
operator|.
name|getOntologyID
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|save
argument_list|(
name|output
argument_list|,
name|targetGraphID
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReasoningServiceResult
argument_list|<
name|OWLOntology
argument_list|>
argument_list|(
name|task
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InconsistentInputException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The input is not consistent"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReasoningServiceException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error! \n"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReasoningServiceException
argument_list|(
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedTaskException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error! \n"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error! \n"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReasoningServiceException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * To save data in the triple store. 	 *  	 * @param data 	 * @param targetGraphID 	 * @throws IOException  	 */
specifier|protected
name|void
name|save
parameter_list|(
name|Object
name|data
parameter_list|,
name|String
name|targetGraphID
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Attempt saving in target graph {}"
argument_list|,
name|targetGraphID
argument_list|)
expr_stmt|;
specifier|final
name|long
name|startSave
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LockableMGraph
name|mGraph
decl_stmt|;
name|UriRef
name|graphUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|targetGraphID
argument_list|)
decl_stmt|;
comment|// tcManager must be synchronized
synchronized|synchronized
init|(
name|tcManager
init|)
block|{
try|try
block|{
comment|// Check whether the graph already exists
name|mGraph
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|graphUriRef
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|e
parameter_list|)
block|{
name|mGraph
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|graphUriRef
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We lock the graph before proceed
name|Lock
name|writeLock
init|=
name|mGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|boolean
name|saved
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|data
operator|instanceof
name|Model
condition|)
block|{
name|MGraph
name|m
init|=
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaMGraph
argument_list|(
operator|(
name|Model
operator|)
name|data
argument_list|)
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|saved
operator|=
name|mGraph
operator|.
name|addAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|OWLOntology
condition|)
block|{
name|MGraph
name|m
init|=
operator|(
name|MGraph
operator|)
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
operator|(
name|OWLOntology
operator|)
name|data
argument_list|)
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|saved
operator|=
name|mGraph
operator|.
name|addAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|saved
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot save the result in clerezza!"
argument_list|)
throw|;
specifier|final
name|long
name|endSave
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Saved in time: {}ms"
argument_list|,
operator|(
name|endSave
operator|-
name|startSave
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * General method for execution, delegates to specific implementations. 	 *  	 * @param task 	 * @param service 	 * @param targetGraphID 	 * @param parameters 	 * @return 	 * @throws ReasoningServiceException 	 * @throws UnsupportedTaskException 	 * @throws InconsistentInputException 	 */
specifier|private
name|ReasoningServiceResult
argument_list|<
name|?
argument_list|>
name|execute
parameter_list|(
name|String
name|task
parameter_list|,
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|service
parameter_list|,
name|String
name|targetGraphID
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|ReasoningServiceException
throws|,
name|UnsupportedTaskException
throws|,
name|InconsistentInputException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"[start] Execution: {}"
argument_list|,
name|service
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"-----------------------------------------------------"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"execute()"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> task: {}"
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> service: {}"
argument_list|,
name|service
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> target: {}"
argument_list|,
name|targetGraphID
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> parameters:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> {}: {}"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">>> value: {}"
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"> input providers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ReasoningServiceInputProvider
name|p
range|:
name|inmgr
operator|.
name|getProviders
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">> {}"
argument_list|,
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"-----------------------------------------------------"
argument_list|)
expr_stmt|;
block|}
name|ReasoningServiceResult
argument_list|<
name|?
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
comment|/**          * TODO Switch this into the ReasoningService implementation          */
if|if
condition|(
name|service
operator|instanceof
name|JenaReasoningService
condition|)
block|{
name|Model
name|input
init|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|inmgr
init|)
block|{
name|Iterator
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
name|inmgr
operator|.
name|getInputData
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|statements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|input
operator|.
name|add
argument_list|(
name|statements
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|inmgr
init|)
block|{
name|Iterator
argument_list|<
name|Rule
argument_list|>
name|rulesI
init|=
name|inmgr
operator|.
name|getInputData
argument_list|(
name|Rule
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|rulesI
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Rule
name|o
init|=
name|rulesI
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Rule: {}"
argument_list|,
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|rules
operator|==
literal|null
condition|)
block|{
name|rules
operator|=
operator|new
name|ArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Input size is {} statements"
argument_list|,
name|input
operator|.
name|listStatements
argument_list|()
operator|.
name|toSet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|executeJenaReasoningService
argument_list|(
name|task
argument_list|,
operator|(
name|JenaReasoningService
operator|)
name|service
argument_list|,
name|input
argument_list|,
name|rules
argument_list|,
name|targetGraphID
argument_list|,
literal|true
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|OWLApiReasoningService
condition|)
block|{
name|OWLOntology
name|input
decl_stmt|;
try|try
block|{
name|input
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReasoningServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|inmgr
init|)
block|{
name|Iterator
argument_list|<
name|OWLAxiom
argument_list|>
name|statements
init|=
name|inmgr
operator|.
name|getInputData
argument_list|(
name|OWLAxiom
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|statements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|input
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|addAxiom
argument_list|(
name|input
argument_list|,
name|statements
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// FIXME Please check if this is really necessary!!!
name|input
operator|=
name|input
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntology
argument_list|(
name|input
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SWRLRule
argument_list|>
name|rules
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|inmgr
init|)
block|{
name|Iterator
argument_list|<
name|SWRLRule
argument_list|>
name|rulesI
init|=
name|inmgr
operator|.
name|getInputData
argument_list|(
name|SWRLRule
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|rulesI
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|rules
operator|==
literal|null
condition|)
block|{
name|rules
operator|=
operator|new
name|ArrayList
argument_list|<
name|SWRLRule
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|rulesI
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Input size is {} statements"
argument_list|,
name|input
operator|.
name|getAxiomCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|executeOWLApiReasoningService
argument_list|(
name|task
argument_list|,
operator|(
name|OWLApiReasoningService
operator|)
name|service
argument_list|,
name|input
argument_list|,
name|rules
argument_list|,
name|targetGraphID
argument_list|,
literal|true
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Service implementation not supported!"
argument_list|)
throw|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"[end] In time: {}ms"
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReasoningServiceResult
argument_list|<
name|?
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|execute
argument_list|(
name|task
argument_list|,
name|service
argument_list|,
name|targetGraph
argument_list|,
name|parameters
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|buildResultLocation
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
return|return
literal|"reasoners/jobs/"
operator|+
name|jobId
return|;
block|}
block|}
end_class

end_unit

