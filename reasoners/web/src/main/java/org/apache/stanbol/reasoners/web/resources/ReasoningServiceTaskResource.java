begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|form
operator|.
name|FormFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|form
operator|.
name|MultiPartBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|scope
operator|.
name|ScopeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|servicesapi
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|jena
operator|.
name|JenaReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|owlapi
operator|.
name|OWLApiReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningServiceInputManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningServicesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|UnboundReasoningServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|annotations
operator|.
name|Documentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|input
operator|.
name|impl
operator|.
name|SimpleInputManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|input
operator|.
name|provider
operator|.
name|impl
operator|.
name|ByteArrayInputProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|input
operator|.
name|provider
operator|.
name|impl
operator|.
name|OntologyManagerInputProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|input
operator|.
name|provider
operator|.
name|impl
operator|.
name|RecipeInputProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|input
operator|.
name|provider
operator|.
name|impl
operator|.
name|UrlInputProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|utils
operator|.
name|ReasoningServiceExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|utils
operator|.
name|ReasoningServiceResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|utils
operator|.
name|ResponseTaskBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapterManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Endpoint for reasoning services. Services can be invoked using the service name and task in the request  * path. The related active SCR service is selected, then the concrete execution is delegated to a {@see  * ReasoningServiceExecutor}.  *   * Two different kind of implementation of {@see ReasoningService} are supported: {@see JenaReasoningService}  * and {@see OWLApiReasonngService}.  *   * This class includes methods to prepare the input and dispatch the output (back to the client in the  * requested format or saved in the triple store).  *   * Support for long term operations is provided by adding /job to the request URI.  *   */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Object
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/reasoners/{service}/{task: [^/]+}{job: (/job)?}"
argument_list|)
specifier|public
class|class
name|ReasoningServiceTaskResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|//    private ServletContext context;
specifier|private
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|service
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
decl_stmt|;
specifier|private
name|FormFile
name|file
init|=
literal|null
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|TcManager
name|tcManager
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|ScopeManager
name|onm
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|SessionManager
name|sessionManager
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|RuleStore
name|ruleStore
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|RuleAdapterManager
name|adapterManager
decl_stmt|;
specifier|private
name|boolean
name|job
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|jobLocation
init|=
literal|""
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|ReasoningServicesManager
name|reasoningServicesManager
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|JobManager
name|jobManager
decl_stmt|;
annotation|@
name|Context
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
annotation|@
name|Context
specifier|private
name|Form
name|form
init|=
literal|null
decl_stmt|;
annotation|@
name|Context
specifier|private
name|HttpHeaders
name|headers
decl_stmt|;
specifier|private
name|String
name|taskID
decl_stmt|;
comment|/**      * Constructor      *       */
specifier|public
name|ReasoningServiceTaskResource
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
name|String
name|serviceID
parameter_list|,
name|String
name|taskIDstr
parameter_list|,
name|String
name|jobFlag
parameter_list|)
block|{
name|this
operator|.
name|taskID
operator|=
name|taskIDstr
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Called service {} to perform task {}"
argument_list|,
name|serviceID
argument_list|,
name|taskID
argument_list|)
expr_stmt|;
comment|// Parameters for customized reasoning services
name|this
operator|.
name|parameters
operator|=
name|prepareParameters
argument_list|()
expr_stmt|;
comment|// Check if method is allowed
comment|// FIXME Supported methods are only GET and POST, but also PUT comes here, why?
comment|//        String[] supported = {"GET", "POST"};
comment|//        if (!Arrays.asList(supported).contains(this.httpContext.getRequest().getMethod())) {
comment|//            throw new WebApplicationException(405);
comment|//        }
comment|// Retrieve the service
try|try
block|{
name|service
operator|=
name|getService
argument_list|(
name|serviceID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnboundReasoningServiceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Service not found: {}"
argument_list|,
name|serviceID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Service retrieved"
argument_list|)
expr_stmt|;
comment|// Check if the task is allowed
if|if
condition|(
name|this
operator|.
name|service
operator|.
name|supportsTask
argument_list|(
name|taskID
argument_list|)
operator|||
name|taskID
operator|.
name|equals
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|)
condition|)
block|{
comment|// Ok
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unsupported task (not found): {}"
argument_list|,
name|taskID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Unsupported task (not found): "
operator|+
name|taskID
argument_list|)
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
comment|// Check for the job parameter
if|if
condition|(
operator|!
name|jobFlag
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Job param is {}"
argument_list|,
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobFlag
operator|.
name|equals
argument_list|(
literal|"/job"
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ask for background job"
argument_list|)
expr_stmt|;
name|this
operator|.
name|job
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed request"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
comment|// Now we check if the service implementation is supported
if|if
condition|(
name|getCurrentService
argument_list|()
operator|instanceof
name|JenaReasoningService
condition|)
block|{}
elseif|else
if|if
condition|(
name|getCurrentService
argument_list|()
operator|instanceof
name|OWLApiReasoningService
condition|)
block|{}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"This implementation of ReasoningService is not supported: {}"
argument_list|,
name|getCurrentService
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"This implementation of ReasoningService is not supported: "
operator|+
name|getCurrentService
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Implementation is supported"
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @return      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|prepareParameters
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Preparing parameters..."
argument_list|)
expr_stmt|;
comment|// Parameters for a GET request and POST
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|queryParameters
init|=
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"... {} query parameters found"
argument_list|,
name|queryParameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
range|:
name|queryParameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" param: {} "
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/*              * XXX               * It looks like that param values here are not urldecoded              * This is odd because the not on the method says exactly the opposite.              * @see getQueryParameters()              */
for|for
control|(
name|String
name|s
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
try|try
block|{
name|s
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|s
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"   value {}"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|v
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|// Parameters for a POST request with content-type
comment|// application/x-www-form-urlencoded
if|if
condition|(
name|form
operator|!=
literal|null
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|formParameters
init|=
name|form
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"... {} form urlencoded parameters found"
argument_list|,
name|formParameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|formParameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Parameters prepared"
argument_list|)
expr_stmt|;
return|return
name|parameters
return|;
block|}
comment|/**      * This is an alias of the get method.      *       * @param url      * @param targetGraphID      * @return      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|APPLICATION_FORM_URLENCODED
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|TEXT_HTML
block|,
literal|"text/plain"
block|,
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
literal|"text/turtle"
block|,
literal|"text/n3"
block|}
argument_list|)
specifier|public
name|Response
name|post
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"service"
argument_list|)
name|String
name|serviceID
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"task"
argument_list|)
name|String
name|taskID
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"job"
argument_list|)
name|String
name|jobFlg
parameter_list|)
block|{
name|prepare
argument_list|(
name|serviceID
argument_list|,
name|taskID
argument_list|,
name|jobFlg
argument_list|)
expr_stmt|;
return|return
name|processRequest
argument_list|()
return|;
block|}
specifier|private
name|Response
name|processRequest
parameter_list|()
block|{
if|if
condition|(
name|job
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Processing in background"
argument_list|)
expr_stmt|;
return|return
name|processBackgroundRequest
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Processing in foreground"
argument_list|)
expr_stmt|;
return|return
name|processRealTimeRequest
argument_list|()
return|;
block|}
block|}
comment|/**      * Get the inferences from input URL. If url param is null, get the HTML description of this service/task      *       * @param url      * @return      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|TEXT_HTML
block|,
literal|"text/plain"
block|,
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
literal|"text/turtle"
block|,
literal|"text/n3"
block|}
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"target"
argument_list|)
name|String
name|targetGraphID
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"service"
argument_list|)
name|String
name|serviceID
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"task"
argument_list|)
name|String
name|taskID
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"job"
argument_list|)
name|String
name|jobFlg
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Called GET serviceID {} taskID {}"
argument_list|,
name|serviceID
argument_list|,
name|taskID
argument_list|)
expr_stmt|;
name|prepare
argument_list|(
name|serviceID
argument_list|,
name|taskID
argument_list|,
name|jobFlg
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Called GET with parameters: {} "
argument_list|,
name|parameters
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameters
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|processRequest
argument_list|()
return|;
block|}
comment|/**      * Process a background request. This service use the Stanbol Commons Jobs API to start a background job.      * Returns 201 on success, with HTTP header Location pointing to the Job resource.      *       * @return      */
specifier|private
name|Response
name|processBackgroundRequest
parameter_list|()
block|{
comment|// If parameters is empty it's a bad request...
if|if
condition|(
name|this
operator|.
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot start job without input parameters... sending BAD REQUEST"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|String
name|target
init|=
name|getTarget
argument_list|()
decl_stmt|;
comment|// Setup the input
name|ReasoningServiceInputManager
name|imngr
init|=
name|prepareInput
argument_list|()
decl_stmt|;
comment|// The service executor
name|ReasoningServiceExecutor
name|executor
init|=
operator|new
name|ReasoningServiceExecutor
argument_list|(
name|tcManager
argument_list|,
name|imngr
argument_list|,
name|getCurrentService
argument_list|()
argument_list|,
name|getCurrentTask
argument_list|()
argument_list|,
name|target
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|String
name|jid
init|=
name|getJobManager
argument_list|()
operator|.
name|execute
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
literal|"jobs/"
operator|+
name|jid
argument_list|)
decl_stmt|;
name|this
operator|.
name|jobLocation
operator|=
name|location
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|/**          * If everything went well, we return 201 Created We include the header Location: with the Job URL          */
name|Viewable
name|view
init|=
operator|new
name|Viewable
argument_list|(
literal|"created"
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|location
argument_list|)
operator|.
name|entity
argument_list|(
name|view
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Process a real-time operation. Returns 200 when the process is ready, 500 if some error occurs      *       * @return      */
specifier|private
name|Response
name|processRealTimeRequest
parameter_list|()
block|{
comment|// If all parameters are missing we produce the service/task welcome
comment|// page
if|if
condition|(
name|this
operator|.
name|parameters
operator|.
name|isEmpty
argument_list|()
operator|&&
name|file
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"no parameters no input file, show default index page"
argument_list|)
expr_stmt|;
comment|// return Response.ok(new Viewable("index", this)).build();
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
name|String
name|target
init|=
name|getTarget
argument_list|()
decl_stmt|;
comment|// Setup the input
name|ReasoningServiceInputManager
name|imngr
init|=
name|prepareInput
argument_list|()
decl_stmt|;
comment|// The service executor
name|ReasoningServiceExecutor
name|executor
init|=
operator|new
name|ReasoningServiceExecutor
argument_list|(
name|tcManager
argument_list|,
name|imngr
argument_list|,
name|getCurrentService
argument_list|()
argument_list|,
name|getCurrentTask
argument_list|()
argument_list|,
name|target
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|ReasoningServiceResult
argument_list|<
name|?
argument_list|>
name|result
init|=
name|executor
operator|.
name|call
argument_list|()
decl_stmt|;
return|return
operator|new
name|ResponseTaskBuilder
argument_list|(
operator|new
name|ReasoningTaskResult
argument_list|(
name|uriInfo
argument_list|,
name|headers
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get the target graph, or null if no target graph have been given      *       * @return      */
specifier|private
name|String
name|getTarget
parameter_list|()
block|{
name|String
name|target
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|get
argument_list|(
literal|"target"
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|parameters
operator|.
name|get
argument_list|(
literal|"target"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|target
operator|=
name|parameters
operator|.
name|get
argument_list|(
literal|"target"
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// Parameter exists with empty string value
name|log
operator|.
name|error
argument_list|(
literal|"Parameter 'target' must have a value!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Parameter exists with empty value
name|log
operator|.
name|error
argument_list|(
literal|"Parameter 'target' must have a value!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
return|return
name|target
return|;
block|}
comment|/**      * To catch additional parameters in case of a POST with content-type multipart/form-data, we need to      * access the {@link FormDataMultiPart} representation of the input.      *       * @param data      * @return      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MULTIPART_FORM_DATA
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|TEXT_HTML
block|,
literal|"text/plain"
block|,
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
literal|"text/turtle"
block|,
literal|"text/n3"
block|}
argument_list|)
specifier|public
name|Response
name|post
parameter_list|(
name|MultiPartBody
name|data
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"service"
argument_list|)
name|String
name|serviceID
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"task"
argument_list|)
name|String
name|taskID
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"job"
argument_list|)
name|String
name|jobFlg
parameter_list|)
block|{
name|prepare
argument_list|(
name|serviceID
argument_list|,
name|taskID
argument_list|,
name|jobFlg
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Called POST post(MultiPartBody data, ...)"
argument_list|)
expr_stmt|;
comment|// In this case we setup the parameter from a multipart request
if|if
condition|(
name|data
operator|.
name|getFormFileParameterValues
argument_list|(
literal|"file"
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|file
operator|=
name|data
operator|.
name|getFormFileParameterValues
argument_list|(
literal|"file"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No files in multipart body"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|data
operator|.
name|getTextParameterNames
argument_list|()
control|)
block|{
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|data
operator|.
name|getTextParameterValues
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" parameters: {}"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|//        // Then add the file
comment|//        if (file != null) {
comment|//            List<String> values = new ArrayList<String>();
comment|//            try {
comment|//                if (file.canRead()&& file.exists()) {
comment|//                    values.add(file.toURI().toURL().toString());
comment|//                } else {
comment|//                    log.error("Bad request");
comment|//                    log.error(" file is: {}", file);
comment|//                    throw new WebApplicationException(Response.Status.BAD_REQUEST);
comment|//                }
comment|//            } catch (MalformedURLException e) {
comment|//                // This should never happen
comment|//                throw new WebApplicationException();
comment|//            }
comment|//            this.parameters.put("file", values);
comment|//        }
return|return
name|processRequest
argument_list|()
return|;
block|}
comment|/**      * Binds the request parameters to a list of {@see ReasoningServiceInputProvider}s, and fed a {@see      * SimpleInputManager}. TODO In the future we may want to decouple this process from this      * resource/submodule.      *       * @return      */
specifier|private
name|ReasoningServiceInputManager
name|prepareInput
parameter_list|()
block|{
name|ReasoningServiceInputManager
name|inmgr
init|=
operator|new
name|SimpleInputManager
argument_list|()
decl_stmt|;
name|String
name|scope
init|=
literal|null
decl_stmt|;
name|String
name|session
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|inmgr
operator|.
name|addInputProvider
argument_list|(
operator|new
name|ByteArrayInputProvider
argument_list|(
name|file
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We keep only the first value
comment|// XXX (make sense support multiple values?)
name|inmgr
operator|.
name|addInputProvider
argument_list|(
operator|new
name|UrlInputProvider
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We remove it form the additional parameter list
name|this
operator|.
name|parameters
operator|.
name|remove
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Parameter exists with no value
name|log
operator|.
name|error
argument_list|(
literal|"Parameter 'url' must have a value!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
comment|//            else if (entry.getKey().equals("file")) {
comment|//                if (!entry.getValue().isEmpty()) {
comment|//                    // We keep only the first value
comment|//                    // FIXME We create the file once again...
comment|//                    String fv = entry.getValue().iterator().next();
comment|//                    log.debug("File value is: {}", fv);
comment|//                    inmgr.addInputProvider(new FileInputProvider(new File(URI.create(fv))));
comment|//                    // We remove it form the additional parameter list
comment|//                    this.parameters.remove("url");
comment|//                } else {
comment|//                    // Parameter exists with no value
comment|//                    log.error("Parameter 'url' must have a value!");
comment|//                    throw new WebApplicationException(Response.Status.BAD_REQUEST);
comment|//                }
comment|//            }
elseif|else
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"scope"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scope
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Parameter exists with no value
name|log
operator|.
name|error
argument_list|(
literal|"Parameter 'scope' must have a value!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"session"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|session
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Parameter exists with no value
name|log
operator|.
name|error
argument_list|(
literal|"Parameter 'session' must have a value!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"recipe"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inmgr
operator|.
name|addInputProvider
argument_list|(
operator|new
name|RecipeInputProvider
argument_list|(
name|ruleStore
argument_list|,
name|adapterManager
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We remove it form the additional parameter list
name|this
operator|.
name|parameters
operator|.
name|remove
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Parameter exists with no value
name|log
operator|.
name|error
argument_list|(
literal|"Parameter 'recipe' must have a value!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|inmgr
operator|.
name|addInputProvider
argument_list|(
operator|new
name|OntologyManagerInputProvider
argument_list|(
name|onm
argument_list|,
name|sessionManager
argument_list|,
name|scope
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameters
operator|.
name|remove
argument_list|(
literal|"scope"
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameters
operator|.
name|remove
argument_list|(
literal|"session"
argument_list|)
expr_stmt|;
block|}
return|return
name|inmgr
return|;
block|}
comment|/**      * The actual path, to be used in the template.      *       * @return      */
specifier|public
name|String
name|getCurrentPath
parameter_list|()
block|{
return|return
name|uriInfo
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[\\/]*$"
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**      * The selected service      *       * @return      */
specifier|public
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|getCurrentService
parameter_list|()
block|{
return|return
name|this
operator|.
name|service
return|;
block|}
comment|/**      * The selected task      *       * @return      */
specifier|public
name|String
name|getCurrentTask
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskID
return|;
block|}
comment|/**      * If this resource created a job, this field contains the location to be rendered in the viewable.      *       * @return      */
specifier|public
name|String
name|getJobLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|jobLocation
return|;
block|}
comment|/**      * The list of supported tasks. We include CHECK, which is managed directly by the endpoint.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSupportedTasks
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|)
expr_stmt|;
name|supported
operator|.
name|addAll
argument_list|(
name|getCurrentService
argument_list|()
operator|.
name|getSupportedTasks
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|supported
return|;
block|}
comment|/**      * To retrieve the service using the service manager      *       * @param servicePath      * @return      * @throws UnboundReasoningServiceException      */
specifier|private
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|getService
parameter_list|(
name|String
name|servicePath
parameter_list|)
throws|throws
name|UnboundReasoningServiceException
block|{
return|return
name|getServicesManager
argument_list|()
operator|.
name|get
argument_list|(
name|servicePath
argument_list|)
return|;
block|}
comment|/**      * Get the service manager from the context      *       * @return      */
specifier|private
name|ReasoningServicesManager
name|getServicesManager
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"(getServicesManager()) "
argument_list|)
expr_stmt|;
return|return
name|reasoningServicesManager
return|;
block|}
comment|/**      * Gets the list of active services      *       * @return      */
specifier|public
name|Set
argument_list|<
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getActiveServices
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"(getActiveServices()) There are {} reasoning services"
argument_list|,
name|getServicesManager
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getServicesManager
argument_list|()
operator|.
name|asUnmodifiableSet
argument_list|()
return|;
block|}
comment|/**      * Gets the job manager      *       * @return      */
specifier|private
name|JobManager
name|getJobManager
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"(getJobManager()) "
argument_list|)
expr_stmt|;
return|return
name|jobManager
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServiceDescription
parameter_list|()
block|{
return|return
name|getServiceDescription
argument_list|(
name|service
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServiceDescription
parameter_list|(
name|ReasoningService
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|service
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|serviceC
init|=
name|service
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|String
name|name
decl_stmt|;
try|try
block|{
name|name
operator|=
name|serviceC
operator|.
name|getAnnotation
argument_list|(
name|Documentation
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The service {} is not documented: missing name"
argument_list|,
name|serviceC
argument_list|)
expr_stmt|;
name|name
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|description
decl_stmt|;
try|try
block|{
name|description
operator|=
name|serviceC
operator|.
name|getAnnotation
argument_list|(
name|Documentation
operator|.
name|class
argument_list|)
operator|.
name|description
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The service {} is not documented: missing description"
argument_list|,
name|serviceC
argument_list|)
expr_stmt|;
name|description
operator|=
literal|""
expr_stmt|;
block|}
comment|// String file = serviceC.getAnnotation(Documentation.class).file();
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|serviceProperties
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|serviceProperties
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|description
argument_list|)
expr_stmt|;
comment|// serviceProperties.put("file", file);
name|serviceProperties
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|service
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|serviceProperties
return|;
block|}
specifier|public
class|class
name|ReasoningTaskResult
extends|extends
name|ResultData
implements|implements
name|ReasoningResult
block|{
specifier|private
name|Object
name|result
decl_stmt|;
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
specifier|private
name|HttpHeaders
name|headers
decl_stmt|;
specifier|public
name|ReasoningTaskResult
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|this
operator|.
name|uriInfo
operator|=
name|uriInfo
expr_stmt|;
block|}
specifier|public
name|void
name|setResult
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
specifier|public
name|Object
name|getResult
parameter_list|()
block|{
return|return
name|this
operator|.
name|result
return|;
block|}
specifier|public
name|HttpHeaders
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
specifier|public
name|UriInfo
name|getUriInfo
parameter_list|()
block|{
return|return
name|uriInfo
return|;
block|}
block|}
block|}
end_class

end_unit

