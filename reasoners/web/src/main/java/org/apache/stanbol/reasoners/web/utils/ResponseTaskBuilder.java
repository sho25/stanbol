begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|web
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|coode
operator|.
name|owlapi
operator|.
name|manchesterowlsyntax
operator|.
name|ManchesterOWLSyntaxOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|StreamDocumentTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|uk
operator|.
name|ac
operator|.
name|manchester
operator|.
name|cs
operator|.
name|owl
operator|.
name|owlapi
operator|.
name|mansyntaxrenderer
operator|.
name|ManchesterOWLSyntaxOntologyStorer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_comment
comment|/**  * Builds a response according to the reasoning output.  *   * @author enridaga  *  */
end_comment

begin_class
specifier|public
class|class
name|ResponseTaskBuilder
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|UriInfo
name|info
decl_stmt|;
specifier|private
name|ServletContext
name|context
decl_stmt|;
specifier|private
name|HttpHeaders
name|headers
decl_stmt|;
specifier|public
name|ResponseTaskBuilder
parameter_list|(
name|UriInfo
name|info
parameter_list|,
name|ServletContext
name|context
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
comment|/**      * This is special, in case of task CHECK      *       * @param output      * @return      */
specifier|private
name|Response
name|build
parameter_list|(
name|boolean
name|result
parameter_list|)
block|{
return|return
name|buildCheckResponse
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
name|Response
name|build
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Process the given object (result content output),      * returning an HTML representation or delegating the rendering to jersey writers.      *       * @param object      * @return      */
specifier|private
name|Response
name|build
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|isHTML
argument_list|()
condition|)
block|{
name|OutputStream
name|out
init|=
name|stream
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"result"
argument_list|,
operator|new
name|ReasoningPrettyResultResource
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|out
argument_list|)
argument_list|)
argument_list|,
name|TEXT_HTML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|object
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * This supports OWLOntology and jena Model objects.      * In the case of Jena the reuslt is printed as Turtle,       * in case of OWLApi the result is in Manchester syntax (more readable).      *       * FIXME: Both should return the same format      *       * @param object      * @return      */
specifier|private
name|OutputStream
name|stream
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|OWLOntology
condition|)
block|{
name|OWLOntology
name|o
init|=
operator|(
name|OWLOntology
operator|)
name|object
decl_stmt|;
name|ManchesterOWLSyntaxOntologyStorer
name|mosos
init|=
operator|new
name|ManchesterOWLSyntaxOntologyStorer
argument_list|()
decl_stmt|;
try|try
block|{
name|mosos
operator|.
name|storeOntology
argument_list|(
name|o
operator|.
name|getOWLOntologyManager
argument_list|()
argument_list|,
name|o
argument_list|,
operator|new
name|StreamDocumentTarget
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|ManchesterOWLSyntaxOntologyFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot stream the ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Model
condition|)
block|{
name|Model
name|m
init|=
operator|(
name|Model
operator|)
name|object
decl_stmt|;
comment|// FIXME Both should return the same format
name|m
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|"TURTLE"
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**      * Check if the client needs a serialization of the output or a human      * readable form (HTML)      *       * @param headers      * @return      */
specifier|private
name|boolean
name|isHTML
parameter_list|()
block|{
comment|// We only want to state if HTML format is the preferred format
comment|// requested
name|Set
argument_list|<
name|String
argument_list|>
name|htmlformats
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|htmlformats
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rdfformats
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|formats
init|=
block|{
name|TEXT_HTML
block|,
literal|"text/plain"
block|,
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
literal|"text/turtle"
block|,
literal|"text/n3"
block|}
decl_stmt|;
name|rdfformats
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|formats
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|mediaTypes
init|=
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|t
range|:
name|mediaTypes
control|)
block|{
name|String
name|strty
init|=
name|t
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Acceptable is {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|htmlformats
operator|.
name|contains
argument_list|(
name|strty
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Requested format is HTML {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|rdfformats
operator|.
name|contains
argument_list|(
name|strty
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Requested format is RDF {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Default behavior? Should never happen!
return|return
literal|true
return|;
block|}
comment|/**      * To build the Response for any CHECK task execution      *       * @param isConsistent      * @return      */
specifier|private
name|Response
name|buildCheckResponse
parameter_list|(
name|boolean
name|isConsistent
parameter_list|)
block|{
if|if
condition|(
name|isHTML
argument_list|()
condition|)
block|{
if|if
condition|(
name|isConsistent
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The input is consistent"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"result"
argument_list|,
operator|new
name|ReasoningPrettyResultResource
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
literal|"The input is consistent :)"
argument_list|)
argument_list|)
argument_list|,
name|TEXT_HTML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The input is not consistent"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
operator|.
name|entity
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"result"
argument_list|,
operator|new
name|ReasoningPrettyResultResource
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
literal|"The input is NOT consistent :("
argument_list|)
argument_list|)
argument_list|)
operator|.
name|type
argument_list|(
name|TEXT_HTML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isConsistent
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The input is consistent"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"The input is consistent :)"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The input is not consistent"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
comment|/**      * Builds a response according to the given {@see ReasoningServiceResult}      *       * @param result      * @return      */
specifier|public
name|Response
name|build
parameter_list|(
name|ReasoningServiceResult
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|result
parameter_list|)
block|{
comment|// If task is CHECK
if|if
condition|(
name|result
operator|.
name|getTask
argument_list|()
operator|.
name|equals
argument_list|(
name|ReasoningServiceExecutor
operator|.
name|TASK_CHECK
argument_list|)
condition|)
block|{
return|return
name|build
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// Elsewhere, if some data is provided, serialize result
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|build
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|build
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

