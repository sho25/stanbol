begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|rowset
operator|.
name|spi
operator|.
name|SyncResolver
import|;
end_import

begin_comment
comment|/**  * Interface to be used by Reasoning services. This interface defines also default task to be implemented by  * all reasoning services: * CLASSIFY : Should return only rdfs:subClassOf and rdf:type statements * ENRICH :  * Should return all inferences  *   * The consistency check task must be managed separately, since it has a different return type (boolean).  *   * TODO In the future we may want to extend the consistency check concept, by supporting tasks which can be of  * this type. For example, we would need a service to provide several validity check as additional tasks.  *   * M => Model type; R => Rule type; S => Statement type  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|ReasoningService
parameter_list|<
name|M
parameter_list|,
name|R
parameter_list|,
name|S
parameter_list|>
block|{
comment|/**      * Default tasks, to be supported by all implementations      */
specifier|public
interface|interface
name|Tasks
block|{
specifier|public
specifier|final
specifier|static
name|String
name|CLASSIFY
init|=
literal|"classify"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ENRICH
init|=
literal|"enrich"
decl_stmt|;
specifier|final
specifier|static
name|String
index|[]
name|_TASKS
init|=
block|{
name|CLASSIFY
block|,
name|ENRICH
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_TASKS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|_TASKS
argument_list|)
decl_stmt|;
block|}
specifier|public
specifier|abstract
name|Class
argument_list|<
name|M
argument_list|>
name|getModelType
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Class
argument_list|<
name|R
argument_list|>
name|getRuleType
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Class
argument_list|<
name|S
argument_list|>
name|getStatementType
parameter_list|()
function_decl|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_PATH
init|=
literal|"org.apache.stanbol.reasoners.servicesapi.path"
decl_stmt|;
comment|/**      * The path that must be bound to this service      *       * @return      */
specifier|public
name|String
name|getPath
parameter_list|()
function_decl|;
comment|/**      * The implementation should check whether the data is consistent or not. The meaning of 'consistency'      * depends on the implementation.      *       * @param data      * @param rules      * @return      * @throws ReasoningServiceException      */
specifier|public
specifier|abstract
name|boolean
name|isConsistent
parameter_list|(
name|M
name|data
parameter_list|,
name|List
argument_list|<
name|R
argument_list|>
name|rules
parameter_list|)
throws|throws
name|ReasoningServiceException
function_decl|;
comment|/**      * The implementation should check whether the data is consistent or not. The meaning of 'consistency'      * depends on the implementation.      *       * @param data      * @return      * @throws ReasoningServiceException      */
specifier|public
specifier|abstract
name|boolean
name|isConsistent
parameter_list|(
name|M
name|data
parameter_list|)
throws|throws
name|ReasoningServiceException
function_decl|;
comment|/**      * Execute the specified task.      *       * @param taskID      *            // The identifier of the task to execute      * @param data      *            // The input data      * @param rules      *            // The rules to add to the reasoner (can be null)      * @param filtered      *            // Whether to return only inferences (default should be 'false')      * @param parameters      *            // Additional parameters, for custom implementations (can be null)      * @return      * @throws UnsupportedTaskException      * @throws ReasoningServiceException      * @throws InconsistentInputException      */
specifier|public
specifier|abstract
name|Set
argument_list|<
name|S
argument_list|>
name|runTask
parameter_list|(
name|String
name|taskID
parameter_list|,
name|M
name|data
parameter_list|,
name|List
argument_list|<
name|R
argument_list|>
name|rules
parameter_list|,
name|boolean
name|filtered
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|UnsupportedTaskException
throws|,
name|ReasoningServiceException
throws|,
name|InconsistentInputException
function_decl|;
comment|/**      * Execute the specified task with no additional configuration (keep defaults)      *       * @param taskID      *            // The identifier of the task to execute      * @param data      *            // The input data      *       * @return      * @throws UnsupportedTaskException      * @throws ReasoningServiceException      * @throws InconsistentInputException      */
specifier|public
specifier|abstract
name|Set
argument_list|<
name|S
argument_list|>
name|runTask
parameter_list|(
name|String
name|taskID
parameter_list|,
name|M
name|data
parameter_list|)
throws|throws
name|UnsupportedTaskException
throws|,
name|ReasoningServiceException
throws|,
name|InconsistentInputException
function_decl|;
specifier|public
specifier|abstract
name|List
argument_list|<
name|String
argument_list|>
name|getSupportedTasks
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|supportsTask
parameter_list|(
name|String
name|taskID
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

