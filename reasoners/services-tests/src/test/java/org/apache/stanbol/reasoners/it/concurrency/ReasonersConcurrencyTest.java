begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|it
operator|.
name|concurrency
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HeaderElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|test
operator|.
name|ReasonersTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * To test background jobs with parallel client requests.  *   */
end_comment

begin_class
specifier|public
class|class
name|ReasonersConcurrencyTest
extends|extends
name|ReasonersTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_URL
init|=
literal|"http://xmlns.com/foaf/spec/index.rdf"
decl_stmt|;
comment|// The number of jobs to start is = (services * tasks * SCALE)
comment|// Increase this to multiply the number of calls
specifier|private
specifier|static
specifier|final
name|int
name|SCALE
init|=
literal|1
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReasonersConcurrencyTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|int
name|counter
init|=
literal|0
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|executor
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timeout while waiting for termination"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Done {} calls"
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Execute a set of http calls to start jobs.      * Then ping the jobs until they are done.      *       * Both starts and pings are executed as set of parallel threads.      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|basicConcurrencyTest
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"basicConcurrencyTest()"
argument_list|)
expr_stmt|;
comment|// We start in parallel a set of background jobs
name|List
argument_list|<
name|JobClient
argument_list|>
name|tasks
init|=
name|buildStarters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Result
argument_list|>
argument_list|>
name|futures
init|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Result
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|String
name|location
init|=
name|future
operator|.
name|get
argument_list|()
operator|.
name|assertResult
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|getFirstHeader
argument_list|(
literal|"Location"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"job created: {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|// We ping in parallel all jobs.
comment|// On each iteration, we prepare a new set of calls only on jobs
comment|// which are not terminated
name|List
argument_list|<
name|String
argument_list|>
name|done
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|done
operator|.
name|size
argument_list|()
operator|<
name|locations
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
comment|// List of calls
name|tasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|JobClient
argument_list|>
argument_list|()
expr_stmt|;
comment|// Prepare a Pinger on each unfinished job
for|for
control|(
name|String
name|l
range|:
name|locations
control|)
block|{
if|if
condition|(
operator|!
name|done
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|Pinger
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Invoke all unfinished jobs in parallel
name|futures
operator|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
comment|// Query each response
for|for
control|(
name|Future
argument_list|<
name|Result
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|PingerResult
name|pr
init|=
operator|(
name|PingerResult
operator|)
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|pr
operator|.
name|assertResult
argument_list|()
operator|.
name|getContentString
argument_list|()
decl_stmt|;
comment|// Explore JSON here
name|log
operator|.
name|info
argument_list|(
literal|"Content:\n\n{}\n\n"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|pr
operator|.
name|location
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|JobInfo
operator|.
name|FINISHED
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"{} is done!"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"{} is still working ... "
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Builds a list of calls which start jobs.      * By default, returns a JobCLient for each service on each task.      * Do this SCALE times.      *       * @return      */
specifier|private
name|List
argument_list|<
name|JobClient
argument_list|>
name|buildStarters
parameter_list|()
block|{
name|List
argument_list|<
name|JobClient
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|JobClient
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SCALE
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|String
name|s
range|:
name|allServices
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|t
range|:
name|TASKS
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|Starter
argument_list|(
name|s
argument_list|,
name|t
argument_list|,
literal|"url"
argument_list|,
name|TEST_URL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tasks
return|;
block|}
comment|/***********************************************************      * Utility classes& methods      ***********************************************************/
specifier|private
specifier|abstract
class|class
name|JobClient
implements|implements
name|Callable
argument_list|<
name|Result
argument_list|>
block|{
specifier|abstract
name|URI
name|uri
parameter_list|(
name|String
name|queryString
parameter_list|)
function_decl|;
specifier|private
name|List
argument_list|<
name|Header
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<
name|Header
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|addHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|headers
operator|.
name|add
argument_list|(
operator|new
name|BasicHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HttpResponse
name|get
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|get
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|protected
name|HttpResponse
name|get
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpClient
name|client
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|HttpGet
name|request
init|=
operator|new
name|HttpGet
argument_list|()
decl_stmt|;
name|request
operator|.
name|setURI
argument_list|(
name|uri
argument_list|(
name|buildQuerystring
argument_list|(
name|params
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sending request[{}]: {} "
argument_list|,
name|counter
argument_list|,
name|request
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Increment global counter
name|counter
operator|++
expr_stmt|;
return|return
name|client
operator|.
name|execute
argument_list|(
name|request
argument_list|)
return|;
block|}
specifier|protected
name|String
name|buildQuerystring
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
block|{
name|StringBuilder
name|qsb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|=
name|i
operator|+
literal|2
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|qsb
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qsb
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|qsb
operator|.
name|append
argument_list|(
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|qsb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|qsb
operator|.
name|append
argument_list|(
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|qsb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|Pinger
extends|extends
name|JobClient
block|{
name|String
name|location
init|=
literal|null
decl_stmt|;
name|Pinger
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
name|URI
name|uri
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
name|location
operator|+
name|queryString
argument_list|)
return|;
block|}
specifier|public
name|PingerResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We ping the Job service with mime type application/json
name|this
operator|.
name|addHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
return|return
operator|new
name|PingerResult
argument_list|(
name|location
argument_list|,
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|Starter
extends|extends
name|JobClient
block|{
name|String
name|service
init|=
literal|null
decl_stmt|;
name|String
name|task
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|queryString
init|=
literal|null
decl_stmt|;
name|Starter
parameter_list|(
name|String
name|service
parameter_list|,
name|String
name|task
parameter_list|,
name|String
modifier|...
name|queryParameters
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|queryString
operator|=
name|queryParameters
expr_stmt|;
block|}
name|URI
name|uri
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
name|ReasonersConcurrencyTest
operator|.
name|this
operator|.
name|builder
operator|.
name|buildUrl
argument_list|(
name|REASONERS_PATH
operator|+
name|service
operator|+
name|task
operator|+
literal|"/job"
operator|+
name|queryString
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StarterResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|StarterResult
argument_list|(
name|get
argument_list|(
name|queryString
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|abstract
class|class
name|Result
block|{
specifier|protected
name|HttpResponse
name|response
init|=
literal|null
decl_stmt|;
name|Result
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
specifier|abstract
name|Result
name|assertResult
parameter_list|()
function_decl|;
specifier|public
name|HttpResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
specifier|public
name|String
name|getContentString
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|this
operator|.
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|PingerResult
extends|extends
name|Result
block|{
specifier|private
name|String
name|location
init|=
literal|null
decl_stmt|;
name|PingerResult
parameter_list|(
name|String
name|location
parameter_list|,
name|HttpResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
name|String
name|location
parameter_list|()
block|{
return|return
name|location
return|;
block|}
comment|/**          * We assert that:           * - The job must exists (response code 200)           * - The Content-type header returns JSON           */
annotation|@
name|Override
specifier|public
name|Result
name|assertResult
parameter_list|()
block|{
name|assertNotNull
argument_list|(
literal|"Response cannot be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Result of a ping request must be 200 (Job must exists)"
argument_list|,
literal|200
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Content type must be application/json"
argument_list|,
literal|"application/json"
argument_list|,
name|response
operator|.
name|getFirstHeader
argument_list|(
literal|"Content-type"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|private
class|class
name|StarterResult
extends|extends
name|Result
block|{
name|StarterResult
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|assertResult
parameter_list|()
block|{
name|assertNotNull
argument_list|(
literal|"Response cannot be null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|// Response of a start request must be 201
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Response must contain the Location header
name|assertNotNull
argument_list|(
name|response
operator|.
name|getFirstHeader
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The location header must be unique
name|assertTrue
argument_list|(
name|response
operator|.
name|getHeaders
argument_list|(
literal|"Location"
argument_list|)
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// The location value must be a valid URL
try|try
block|{
name|URI
operator|.
name|create
argument_list|(
name|response
operator|.
name|getFirstHeader
argument_list|(
literal|"Location"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Malformed url in location header"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

