begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|it
operator|.
name|offline
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MultipartEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|FileBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|RequestDocumentor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|stanbol
operator|.
name|StanbolTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|test
operator|.
name|ReasonersTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * All these tests are based on POST with content-type multipart/form-data.  *   * A file is sent to the service. This file does not contain owl:imports.  *   */
end_comment

begin_class
specifier|public
class|class
name|ReasonersOfflineTest
extends|extends
name|ReasonersTestBase
block|{
specifier|protected
specifier|static
name|String
name|fileName
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|String
name|inconsistentFileName
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|fileParam
init|=
literal|"file"
decl_stmt|;
specifier|protected
specifier|static
name|File
name|file
init|=
literal|null
decl_stmt|;
specifier|protected
name|MultipartEntity
name|multiPart
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepare
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|fileName
operator|=
name|ReasonersOfflineTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"foaf.rdf"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|inconsistentFileName
operator|=
name|ReasonersOfflineTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"inconsistent-types.rdf"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// This is shared among all tests
name|file
operator|=
operator|new
name|File
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setupMultipart
parameter_list|()
block|{
name|FileBody
name|bin
init|=
operator|new
name|FileBody
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|multiPart
operator|=
operator|new
name|MultipartEntity
argument_list|()
expr_stmt|;
name|multiPart
operator|.
name|addPart
argument_list|(
name|fileParam
argument_list|,
name|bin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMethodNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// POST is not allowed on the base path
comment|// No urlencoded
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|REASONERS_PATH
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-type"
argument_list|,
literal|"application/x-www-form-urlencoded"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|405
argument_list|)
expr_stmt|;
comment|// No multipart
name|executor
operator|.
name|execute
argument_list|(
name|buildMultipartRequest
argument_list|(
name|REASONERS_PATH
argument_list|,
name|multiPart
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|405
argument_list|)
expr_stmt|;
comment|// PUT is not allowed on services
name|List
argument_list|<
name|String
argument_list|>
name|sl
init|=
name|allServices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sl
control|)
block|{
for|for
control|(
name|String
name|t
range|:
name|TASKS
control|)
block|{
name|String
name|url
init|=
name|builder
operator|.
name|buildUrl
argument_list|(
name|REASONERS_PATH
operator|+
name|s
operator|+
name|t
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPut
argument_list|(
name|url
argument_list|)
argument_list|)
operator|.
name|withContent
argument_list|(
literal|"Nothing"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|405
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"PUT requests are not supported by {}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotAcceptable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Same for all requests to services without a defined task
name|List
argument_list|<
name|String
argument_list|>
name|sl
init|=
name|allServices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sl
control|)
block|{
for|for
control|(
name|String
name|t
range|:
name|TASKS
control|)
block|{
name|String
name|url
init|=
name|REASONERS_PATH
operator|+
name|s
operator|+
name|t
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|url
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"NOT/ACCEPTABLE"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|406
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"PUT requests are not supported by {}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServiceNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|REASONERS_PATH
operator|+
literal|"/service-not-found"
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|url
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|404
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Correct answer on unsupported service: {}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTaskNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sl
init|=
name|allServices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sl
control|)
block|{
name|String
name|url
init|=
name|REASONERS_PATH
operator|+
name|s
operator|+
literal|"/task-not-found"
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|url
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|404
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Correct answer on unsupported task: {}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultipartOwlEnrichTurtle
parameter_list|()
throws|throws
name|ParseException
throws|,
name|ClientProtocolException
throws|,
name|IOException
block|{
name|executor
operator|.
name|execute
argument_list|(
name|buildMultipartRequest
argument_list|(
literal|"/reasoners/owl/enrich"
argument_list|,
name|multiPart
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/turtle"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
literal|"application/turtle"
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"<http://www.w3.org/2002/07/owl#disjointWith>"
argument_list|,
literal|"<http://www.w3.org/2002/07/owl#sameAs>"
argument_list|,
literal|"<http://www.w3.org/2002/07/owl#intersectionOf>"
argument_list|,
literal|" a "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultipartRdfsEnrichN3
parameter_list|()
throws|throws
name|ParseException
throws|,
name|ClientProtocolException
throws|,
name|IOException
block|{
name|executor
operator|.
name|execute
argument_list|(
name|buildMultipartRequest
argument_list|(
literal|"/reasoners/rdfs/enrich"
argument_list|,
name|multiPart
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/n3"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
literal|"text/n3"
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"<http://xmlns.com/foaf/0.1/>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultipartOwlminiEnrichRDFXML
parameter_list|()
throws|throws
name|ParseException
throws|,
name|ClientProtocolException
throws|,
name|IOException
block|{
name|executor
operator|.
name|execute
argument_list|(
name|buildMultipartRequest
argument_list|(
literal|"/reasoners/owlmini/enrich"
argument_list|,
name|multiPart
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/rdf+xml"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
literal|"application/rdf+xml"
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"rdf:RDF"
argument_list|,
literal|"rdf:Description"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema#time"
argument_list|,
literal|"http://www.w3.org/2000/01/rdf-schema#subClassOf"
argument_list|,
literal|"http://www.w3.org/2002/07/owl#equivalentClass"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultipartConsistency200
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|services
init|=
block|{
literal|"/owl"
block|,
literal|"/owlmini"
block|}
decl_stmt|;
comment|// Consistent
for|for
control|(
name|String
name|s
range|:
name|services
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|buildMultipartRequest
argument_list|(
literal|"/reasoners"
operator|+
name|s
operator|+
literal|"/check"
argument_list|,
name|multiPart
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultipartConsistency409
parameter_list|()
throws|throws
name|Exception
block|{
name|FileBody
name|bin
init|=
operator|new
name|FileBody
argument_list|(
operator|new
name|File
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|inconsistentFileName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|MultipartEntity
name|incMultiPart
init|=
operator|new
name|MultipartEntity
argument_list|()
decl_stmt|;
name|incMultiPart
operator|.
name|addPart
argument_list|(
name|fileParam
argument_list|,
name|bin
argument_list|)
expr_stmt|;
name|String
index|[]
name|services
init|=
block|{
literal|"/owl"
block|,
literal|"/owlmini"
block|}
decl_stmt|;
comment|// Not consistent
for|for
control|(
name|String
name|s
range|:
name|services
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|buildMultipartRequest
argument_list|(
literal|"/reasoners"
operator|+
name|s
operator|+
literal|"/check"
argument_list|,
name|incMultiPart
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|409
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * We test here all acceptable return types      */
annotation|@
name|Test
specifier|public
name|void
name|testOutputFormats
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"testOutputFormats()"
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|formats
init|=
block|{
comment|// Each group of 3 elements is: Accept header, Expected content-type,
comment|// Expected regexp
literal|"text/html"
block|,
literal|"text/html"
block|,
literal|".*Reasoners: Result.*"
block|,
literal|"application/rdf+xml"
block|,
literal|"application/rdf+xml"
block|,
literal|"rdf:RDF"
block|,
comment|/* FIXME This is not supported by the OWLApi JAX-RS writer                                   "text/n3",                                   "text/n3",                                   "<.*www.w3.org/2000/01/rdf-schema.*>", */
literal|"application/turtle"
block|,
literal|"application/turtle"
block|,
literal|"<.*www.w3.org/2000/01/rdf-schema.*>"
block|,
comment|/* FIXME This is not supported by the OWLApi JAX-RS writer                                   "text/plain",                                   "text/plain",                                   "<.*www.w3.org/2000/01/rdf-schema.*>" */
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sl
init|=
name|allServices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sl
control|)
block|{
for|for
control|(
name|String
name|t
range|:
name|TASKS
control|)
block|{
name|String
name|url
init|=
name|REASONERS_PATH
operator|+
name|s
operator|+
name|t
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formats
operator|.
name|length
condition|;
name|i
operator|+=
literal|3
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|buildMultipartRequest
argument_list|(
name|url
argument_list|,
name|multiPart
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|formats
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
name|formats
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Only if task is not CHECK
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
literal|"/check"
argument_list|)
condition|)
block|{
comment|// FIXME
comment|// Check should not support these formats or it should return something compatible
comment|// Now returns the sentence
name|executor
operator|.
name|assertContentContains
argument_list|(
literal|"The input is consistent"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executor
operator|.
name|assertContentRegexp
argument_list|(
name|formats
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Service {} supports return type {}"
argument_list|,
name|url
argument_list|,
name|formats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

