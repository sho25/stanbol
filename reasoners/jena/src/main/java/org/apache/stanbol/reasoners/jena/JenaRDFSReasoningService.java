begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|jena
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|annotations
operator|.
name|Documentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|ReasonerRegistry
import|;
end_import

begin_comment
comment|/**  * RDFS reasoning service.  *   *   *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Documentation
argument_list|(
name|name
operator|=
literal|"Jena RDFS"
argument_list|,
name|description
operator|=
literal|"This service use the Jena RDFS reasoner."
argument_list|)
specifier|public
class|class
name|JenaRDFSReasoningService
extends|extends
name|AbstractJenaReasoningService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|_DEFAULT_PATH
init|=
literal|"rdfs"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ReasoningService
operator|.
name|SERVICE_PATH
argument_list|,
name|value
operator|=
name|_DEFAULT_PATH
argument_list|)
specifier|private
name|String
name|path
decl_stmt|;
specifier|public
name|JenaRDFSReasoningService
parameter_list|()
block|{
name|super
argument_list|(
name|ReasonerRegistry
operator|.
name|getRDFSReasoner
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ReasoningService
operator|.
name|SERVICE_PATH
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

