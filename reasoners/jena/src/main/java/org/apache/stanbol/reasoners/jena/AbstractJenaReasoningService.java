begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|jena
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|jena
operator|.
name|filters
operator|.
name|PropertyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|InconsistentInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|ReasoningServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|servicesapi
operator|.
name|UnsupportedTaskException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|InfModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|InfGraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|Reasoner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|ValidityReport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|ValidityReport
operator|.
name|Report
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|FBRuleReasoner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|GenericRuleReasoner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of the {@see JenaReasoningService} interface  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJenaReasoningService
implements|implements
name|JenaReasoningService
block|{
specifier|private
name|Reasoner
name|reasoner
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractJenaReasoningService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This constructor sets the given reasoner instance as the default shared one.      *       * @param reasoner      */
specifier|protected
name|AbstractJenaReasoningService
parameter_list|(
name|Reasoner
name|reasoner
parameter_list|)
block|{
name|this
operator|.
name|reasoner
operator|=
name|reasoner
expr_stmt|;
block|}
comment|/**      * Gets the Jena reasoner instance (to be used by subclasses)      *       * @return      */
specifier|protected
name|Reasoner
name|getReasoner
parameter_list|()
block|{
return|return
name|reasoner
return|;
block|}
comment|/**      * Generic method to perform inferences      */
annotation|@
name|Override
specifier|public
name|InfModel
name|run
parameter_list|(
name|Model
name|data
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Called run(Model data)"
argument_list|)
expr_stmt|;
name|InfGraph
name|inferredGraph
init|=
name|this
operator|.
name|reasoner
operator|.
name|bind
argument_list|(
name|data
operator|.
name|getGraph
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ModelFactory
operator|.
name|createInfModel
argument_list|(
name|inferredGraph
argument_list|)
return|;
block|}
comment|/**      * This method performs inferences creating a new specialized reasoner, which extends the capabilities of      * the default one and adds the given rule set.      *       * @param data      * @param rules      * @return      */
annotation|@
name|Override
specifier|public
name|InfModel
name|run
parameter_list|(
name|Model
name|data
parameter_list|,
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
parameter_list|)
block|{
name|InfGraph
name|inferredGraph
init|=
name|customReasoner
argument_list|(
name|rules
argument_list|)
operator|.
name|bind
argument_list|(
name|data
operator|.
name|getGraph
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ModelFactory
operator|.
name|createInfModel
argument_list|(
name|inferredGraph
argument_list|)
return|;
block|}
comment|/**      * This method provides the default implementation for executing one of the default tasks.      *       * TODO: Add support for the filtered parameter on task 'classify'; TODO: The task 'classify' should also      * return rdfs:subClassOf statements.      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Statement
argument_list|>
name|runTask
parameter_list|(
name|String
name|taskID
parameter_list|,
name|Model
name|data
parameter_list|,
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
parameter_list|,
name|boolean
name|filtered
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|UnsupportedTaskException
throws|,
name|ReasoningServiceException
throws|,
name|InconsistentInputException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Called runTask(String taskID,Model data,List<Rule> rules,boolean filtered,Map<String,List<String>> parameters)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskID
operator|.
name|equals
argument_list|(
name|ReasoningService
operator|.
name|Tasks
operator|.
name|CLASSIFY
argument_list|)
condition|)
block|{
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
return|return
name|classify
argument_list|(
name|data
argument_list|,
name|rules
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|classify
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|taskID
operator|.
name|equals
argument_list|(
name|ReasoningService
operator|.
name|Tasks
operator|.
name|ENRICH
argument_list|)
condition|)
block|{
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
return|return
name|enrich
argument_list|(
name|data
argument_list|,
name|rules
argument_list|,
name|filtered
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|enrich
argument_list|(
name|data
argument_list|,
name|filtered
argument_list|)
return|;
block|}
block|}
else|else
throw|throw
operator|new
name|UnsupportedTaskException
argument_list|()
throw|;
block|}
comment|/**      * This method provides the default implementation for executing one of the default tasks with no      * additional arguments.      *       * TODO: Add support for the filtered parameter on task 'classify'; TODO: The task 'classify' should also      * return rdfs:subClassOf statements.      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Statement
argument_list|>
name|runTask
parameter_list|(
name|String
name|taskID
parameter_list|,
name|Model
name|data
parameter_list|)
throws|throws
name|UnsupportedTaskException
throws|,
name|ReasoningServiceException
throws|,
name|InconsistentInputException
block|{
if|if
condition|(
name|taskID
operator|.
name|equals
argument_list|(
name|ReasoningService
operator|.
name|Tasks
operator|.
name|CLASSIFY
argument_list|)
condition|)
block|{
return|return
name|classify
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|taskID
operator|.
name|equals
argument_list|(
name|ReasoningService
operator|.
name|Tasks
operator|.
name|ENRICH
argument_list|)
condition|)
block|{
return|return
name|enrich
argument_list|(
name|data
argument_list|)
return|;
block|}
else|else
throw|throw
operator|new
name|UnsupportedTaskException
argument_list|()
throw|;
block|}
comment|/**      * This method is called to build a custom reasoner to be used with a given rule set. Subclasses may want      * to specialize the default behavior, which simply merge the standard rule set with the given list      *       * Note: to customized the default reasoner instance, we need to create a new instance, to avoid to keep      * the configuration changes in the standard shared instance. This is not much efficient, because we      * create a new reasoner for each call which includes a specified rule set.      *       * In the future, we may want to implement a way to deploy customized shared reasoning services, based on      * a specific recipe.      *       * @param rules      * @return      */
specifier|protected
name|Reasoner
name|customReasoner
parameter_list|(
name|List
argument_list|<
name|Rule
argument_list|>
name|customRules
parameter_list|)
block|{
name|List
argument_list|<
name|Rule
argument_list|>
name|standardRules
init|=
operator|(
operator|(
name|FBRuleReasoner
operator|)
name|this
operator|.
name|reasoner
operator|)
operator|.
name|getRules
argument_list|()
decl_stmt|;
name|standardRules
operator|.
name|addAll
argument_list|(
name|customRules
argument_list|)
expr_stmt|;
return|return
operator|new
name|GenericRuleReasoner
argument_list|(
name|standardRules
argument_list|)
return|;
block|}
comment|/**      * Default implementation for task {@see ReasoningService.Tasks.CLASSIFY}. Classification: 1) Perform      * reasoning 2) Returns only rdf:type statements.      *       * This is a default implementation of task {@see ReasoningService.Tasks.CLASSIFY}. Subclasses may want to      * change it.      *       * TODO: This method should also return rdfs:subClassOf statements      *       * @param data      * @return      */
specifier|protected
name|Set
argument_list|<
name|Statement
argument_list|>
name|classify
parameter_list|(
name|Model
name|data
parameter_list|)
block|{
return|return
name|run
argument_list|(
name|data
argument_list|)
operator|.
name|listStatements
argument_list|()
operator|.
name|filterKeep
argument_list|(
operator|new
name|PropertyFilter
argument_list|(
name|RDF
operator|.
name|type
argument_list|)
argument_list|)
operator|.
name|toSet
argument_list|()
return|;
block|}
comment|/**      *       * Classification: 1) Perform reasoning on a reasoner customized with the given rule set 2) Returns only      * rdf:type statements      *       * This is a default implementation of task {@see ReasoningService.Tasks.CLASSIFY}. Subclasses may want to      * change it.      *       * TODO: This method should also return rdfs:subClassOf statements      *       * @param data      * @param rules      * @return      */
specifier|protected
name|Set
argument_list|<
name|Statement
argument_list|>
name|classify
parameter_list|(
name|Model
name|data
parameter_list|,
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
parameter_list|)
block|{
return|return
name|run
argument_list|(
name|data
argument_list|,
name|rules
argument_list|)
operator|.
name|listStatements
argument_list|()
operator|.
name|filterKeep
argument_list|(
operator|new
name|PropertyFilter
argument_list|(
name|RDF
operator|.
name|type
argument_list|)
argument_list|)
operator|.
name|toSet
argument_list|()
return|;
block|}
comment|/**      * Enriching: 1) Perform reasoning 2) Returns all the statements (filtered = false) or only inferred ones      * (filtered = true)      *       * This is a default implementation of task {@see ReasoningService.Tasks.ENRICH}. Subclasses may want to      * change it.      *       * @param data      * @param rules      * @return      */
specifier|protected
name|Set
argument_list|<
name|Statement
argument_list|>
name|enrich
parameter_list|(
name|Model
name|data
parameter_list|,
name|boolean
name|filtered
parameter_list|)
block|{
name|Set
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
name|run
argument_list|(
name|data
argument_list|)
operator|.
name|listStatements
argument_list|()
operator|.
name|toSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|filtered
condition|)
block|{
return|return
name|prune
argument_list|(
name|data
operator|.
name|listStatements
argument_list|()
operator|.
name|toSet
argument_list|()
argument_list|,
name|statements
argument_list|)
return|;
block|}
return|return
name|statements
return|;
block|}
comment|/**      * Removes the statements in the first set from the second set      *       * @param input      * @param statements      * @return      */
specifier|protected
specifier|final
name|Set
argument_list|<
name|Statement
argument_list|>
name|prune
parameter_list|(
name|Set
argument_list|<
name|Statement
argument_list|>
name|first
parameter_list|,
name|Set
argument_list|<
name|Statement
argument_list|>
name|second
parameter_list|)
block|{
name|Set
argument_list|<
name|Statement
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|Statement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Statement
name|s
range|:
name|second
control|)
block|{
if|if
condition|(
name|first
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|remove
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|second
operator|.
name|removeAll
argument_list|(
name|remove
argument_list|)
expr_stmt|;
return|return
name|second
return|;
block|}
comment|/**      * Enriching: 1) Perform reasoning 2) Returns the inferred statements only. This is the same as      * enrich(data, true)      *       * This is a default implementation of task {@see ReasoningService.Tasks.ENRICH}. Subclasses may want to      * change it.      *       * @param data      * @return      */
specifier|public
name|Set
argument_list|<
name|Statement
argument_list|>
name|enrich
parameter_list|(
name|Model
name|data
parameter_list|)
block|{
return|return
name|enrich
argument_list|(
name|data
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Enriching: 1) Perform reasoning on a reasoner customized with the given rule set 2) Returns all the      * statements (filtered = false) or only inferred ones (filtered = true)      *       * This is a default implementation of task {@see ReasoningService.Tasks.ENRICH} when a set of rules is      * given. Subclasses may want to change it.      *       * @param data      * @param rules      * @param filtered      * @return      */
specifier|protected
name|Set
argument_list|<
name|Statement
argument_list|>
name|enrich
parameter_list|(
name|Model
name|data
parameter_list|,
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
parameter_list|,
name|boolean
name|filtered
parameter_list|)
block|{
name|Set
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
name|run
argument_list|(
name|data
argument_list|,
name|rules
argument_list|)
operator|.
name|listStatements
argument_list|()
operator|.
name|toSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|filtered
condition|)
block|{
return|return
name|prune
argument_list|(
name|data
operator|.
name|listStatements
argument_list|()
operator|.
name|toSet
argument_list|()
argument_list|,
name|statements
argument_list|)
return|;
block|}
return|return
name|statements
return|;
block|}
comment|/**      * Enriching: 1) Perform reasoning on a reasoner customized with the given rule set 2) Returns the      * inferred statements only. This is the same as enrich(data, rules, true)      *       * This is a default implementation of task {@see ReasoningService.Tasks.ENRICH} when a set of rules is      * given. Subclasses may want to change it.      *       * @param data      * @param rules      * @return      */
specifier|protected
name|Set
argument_list|<
name|Statement
argument_list|>
name|enrich
parameter_list|(
name|Model
name|data
parameter_list|,
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
parameter_list|)
block|{
return|return
name|enrich
argument_list|(
name|data
argument_list|,
name|rules
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Consistency check: whether this RDF is consistent or not      *       * @param data      * @return      */
annotation|@
name|Override
specifier|public
name|boolean
name|isConsistent
parameter_list|(
name|Model
name|data
parameter_list|)
block|{
return|return
name|isConsistent
argument_list|(
name|run
argument_list|(
name|data
argument_list|)
operator|.
name|validate
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Consistency check: whether this RDF is consistent or not      *       * We decide to apply a strict meaning of consistency. The alternative would be to use isValid() method,      * which tolerates classes that can't be instantiated      *       * @param data      * @param rules      * @return      */
annotation|@
name|Override
specifier|public
name|boolean
name|isConsistent
parameter_list|(
name|Model
name|data
parameter_list|,
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
parameter_list|)
block|{
return|return
name|isConsistent
argument_list|(
name|run
argument_list|(
name|data
argument_list|,
name|rules
argument_list|)
operator|.
name|validate
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This internal method implements the logic of consistency.      *       * We decide to apply a strict meaning of consistency. The alternative would be to use isValid() method,      * which tolerates classes that can't be instantiated.      *       * Subclasses may want to change this behavior.      *       * @param report      * @return      */
specifier|protected
name|boolean
name|isConsistent
parameter_list|(
name|ValidityReport
name|report
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Report
argument_list|>
name|it
init|=
name|report
operator|.
name|getReports
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Report: {}"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|report
operator|.
name|isClean
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Model
argument_list|>
name|getModelType
parameter_list|()
block|{
return|return
name|Model
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Rule
argument_list|>
name|getRuleType
parameter_list|()
block|{
return|return
name|Rule
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Statement
argument_list|>
name|getStatementType
parameter_list|()
block|{
return|return
name|Statement
operator|.
name|class
return|;
block|}
comment|/**      * Subclasses may want to extend this      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSupportedTasks
parameter_list|()
block|{
return|return
name|ReasoningService
operator|.
name|Tasks
operator|.
name|DEFAULT_TASKS
return|;
block|}
comment|/**      * Subclasses may need to change this      */
specifier|public
name|boolean
name|supportsTask
parameter_list|(
name|String
name|taskID
parameter_list|)
block|{
return|return
name|getSupportedTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|taskID
argument_list|)
return|;
block|}
empty_stmt|;
block|}
end_class

end_unit

