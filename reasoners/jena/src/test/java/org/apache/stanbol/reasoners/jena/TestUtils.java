begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|jena
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|StmtIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|PrintUtil
import|;
end_import

begin_class
specifier|public
class|class
name|TestUtils
block|{
comment|/** 	 * utility to print lists of statements 	 *  	 * @param model 	 * @param resource 	 * @param property 	 * @return 	 */
specifier|public
specifier|static
name|String
name|printStatements
parameter_list|(
name|Model
name|model
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|Property
name|property
parameter_list|)
block|{
name|Resource
name|value
init|=
literal|null
decl_stmt|;
name|String
name|output
init|=
literal|""
decl_stmt|;
name|StmtIterator
name|iterator
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
operator|&&
name|property
operator|==
literal|null
operator|&&
name|value
operator|==
literal|null
condition|)
block|{
name|iterator
operator|=
name|model
operator|.
name|listStatements
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|=
name|model
operator|.
name|listStatements
argument_list|(
name|resource
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Statement
name|stmt
init|=
name|iterator
operator|.
name|nextStatement
argument_list|()
decl_stmt|;
name|output
operator|+=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|" "
operator|+
name|PrintUtil
operator|.
name|print
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
comment|/** 	 * Check whether a set of expected statements are present in the result set. 	 * Returns a set of expected statements which are NOT present in the result. 	 *  	 * @param result 	 * @param expected 	 * @return 	 */
specifier|public
specifier|static
name|Set
argument_list|<
name|Statement
argument_list|>
name|expectedStatementsCheck
parameter_list|(
name|Set
argument_list|<
name|Statement
argument_list|>
name|inferred
parameter_list|,
name|Set
argument_list|<
name|Statement
argument_list|>
name|expected
parameter_list|)
block|{
name|Set
argument_list|<
name|Statement
argument_list|>
name|notInInferred
init|=
operator|new
name|HashSet
argument_list|<
name|Statement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Statement
name|stat
range|:
name|expected
control|)
block|{
if|if
condition|(
operator|!
name|inferred
operator|.
name|contains
argument_list|(
name|stat
argument_list|)
condition|)
block|{
name|notInInferred
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|notInInferred
return|;
block|}
comment|/** 	 * This utility gets a jena rules file content string and parse it to return 	 * a List of Rule objects 	 *  	 * @param source 	 * @return 	 */
specifier|public
specifier|static
name|List
argument_list|<
name|Rule
argument_list|>
name|parseRuleStringAsFile
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|source
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Rule
operator|.
name|Parser
name|parser
init|=
name|Rule
operator|.
name|rulesParserFromReader
argument_list|(
name|br
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
init|=
name|Rule
operator|.
name|parseRules
argument_list|(
name|parser
argument_list|)
decl_stmt|;
return|return
name|rules
return|;
block|}
block|}
end_class

end_unit

