begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|jena
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|InfModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDFS
import|;
end_import

begin_comment
comment|/**  * Tests specific for the JenaRDFSReasoningService implementation  *   */
end_comment

begin_class
specifier|public
class|class
name|JenaRDFSReasoningServiceTest
block|{
specifier|private
name|JenaReasoningService
name|reasoningService
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JenaRDFSReasoningServiceTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** 	 * We prepare some static variables to be used in tests 	 */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
comment|// The single instance
name|reasoningService
operator|=
operator|new
name|JenaRDFSReasoningService
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Tests rdfs:subClassOf inference with RDFSReasoner 	 */
annotation|@
name|Test
specifier|public
name|void
name|testRDFSSubclassOf
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing rdfs:subClassOf inference with RDFS reasoner"
argument_list|)
expr_stmt|;
comment|// Prepare data
name|TestData
operator|.
name|alexdma
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|TestData
operator|.
name|foaf_Person
argument_list|)
expr_stmt|;
comment|// Setup input for the reasoner
name|Model
name|input
init|=
name|ModelFactory
operator|.
name|createUnion
argument_list|(
name|TestData
operator|.
name|foaf
argument_list|,
name|TestData
operator|.
name|alexdma
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
comment|// Is alexdma foaf:Agent?
name|InfModel
name|inferred
init|=
name|reasoningService
operator|.
name|run
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Statement
name|isAgent
init|=
name|TestData
operator|.
name|model
operator|.
name|createStatement
argument_list|(
name|TestData
operator|.
name|alexdma
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|TestData
operator|.
name|foaf_Agent
argument_list|)
decl_stmt|;
comment|//		log.info("Statements: {}",
comment|//				TestUtils.printStatements(inferred, TestData.alexdma, RDF.type));
name|log
operator|.
name|info
argument_list|(
literal|"Is any foaf:Person is also a foaf:Agent...(true)? {}"
argument_list|,
name|inferred
operator|.
name|contains
argument_list|(
name|isAgent
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inferred
operator|.
name|contains
argument_list|(
name|isAgent
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset resource to be clean for other tests
name|TestData
operator|.
name|alexdma
operator|.
name|removeProperties
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRDFSRange
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing rdfs:range inference with RDFS reasoner"
argument_list|)
expr_stmt|;
comment|// Prepare data
name|TestData
operator|.
name|alexdma
operator|.
name|addProperty
argument_list|(
name|TestData
operator|.
name|foaf_knows
argument_list|,
name|TestData
operator|.
name|enridaga
argument_list|)
expr_stmt|;
comment|// Setup input for the reasoner
name|Model
name|input
init|=
name|ModelFactory
operator|.
name|createUnion
argument_list|(
name|TestData
operator|.
name|foaf
argument_list|,
name|TestData
operator|.
name|alexdma
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
comment|// Is enridaga a foaf:Person?
name|InfModel
name|inferred
init|=
name|reasoningService
operator|.
name|run
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Statement
name|isPerson
init|=
name|TestData
operator|.
name|model
operator|.
name|createStatement
argument_list|(
name|TestData
operator|.
name|enridaga
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|TestData
operator|.
name|foaf_Person
argument_list|)
decl_stmt|;
comment|//		log.info("Statements: {}", TestUtils.printStatements(inferred,
comment|//				TestData.enridaga, RDF.type));
name|log
operator|.
name|info
argument_list|(
literal|"Is any rdfs:range of foaf:knows a foaf:Person...(true)? {}"
argument_list|,
name|inferred
operator|.
name|contains
argument_list|(
name|isPerson
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inferred
operator|.
name|contains
argument_list|(
name|isPerson
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset resource to be clean for other tests
name|TestData
operator|.
name|alexdma
operator|.
name|removeProperties
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRDFSDomain
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing rdfs:domain inference with RDFS reasoner"
argument_list|)
expr_stmt|;
comment|// Prepare data
name|TestData
operator|.
name|alexdma
operator|.
name|addProperty
argument_list|(
name|TestData
operator|.
name|foaf_knows
argument_list|,
name|TestData
operator|.
name|enridaga
argument_list|)
expr_stmt|;
comment|// Setup input for the reasoner
name|Model
name|input
init|=
name|ModelFactory
operator|.
name|createUnion
argument_list|(
name|TestData
operator|.
name|foaf
argument_list|,
name|TestData
operator|.
name|alexdma
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
comment|// Is alexdma a foaf:Person?
name|InfModel
name|inferred
init|=
name|reasoningService
operator|.
name|run
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Statement
name|isPerson
init|=
name|TestData
operator|.
name|model
operator|.
name|createStatement
argument_list|(
name|TestData
operator|.
name|alexdma
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|TestData
operator|.
name|foaf_Person
argument_list|)
decl_stmt|;
comment|//		log.info("Statements: {}", TestUtils.printStatements(inferred,
comment|//				TestData.enridaga, RDF.type));
name|log
operator|.
name|info
argument_list|(
literal|"Is any rdfs:domain of foaf:knows a foaf:Person...(true)? {}"
argument_list|,
name|inferred
operator|.
name|contains
argument_list|(
name|isPerson
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inferred
operator|.
name|contains
argument_list|(
name|isPerson
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset resource to be clean for other tests
name|TestData
operator|.
name|alexdma
operator|.
name|removeProperties
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRDFSSubPropertyOf
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing rdfs:subPropertyOf inference with RDFS reasoner"
argument_list|)
expr_stmt|;
comment|// We invent a property to extend foaf:knows
name|Property
name|collegueOf
init|=
name|TestData
operator|.
name|model
operator|.
name|createProperty
argument_list|(
name|TestData
operator|.
name|TEST_NS
operator|+
literal|"collegueOf"
argument_list|)
decl_stmt|;
name|collegueOf
operator|.
name|addProperty
argument_list|(
name|RDFS
operator|.
name|subPropertyOf
argument_list|,
name|TestData
operator|.
name|foaf_knows
argument_list|)
expr_stmt|;
comment|// Prepare data
name|TestData
operator|.
name|alexdma
operator|.
name|addProperty
argument_list|(
name|collegueOf
argument_list|,
name|TestData
operator|.
name|enridaga
argument_list|)
expr_stmt|;
comment|// Setup input for the reasoner
name|Model
name|input
init|=
name|ModelFactory
operator|.
name|createUnion
argument_list|(
name|TestData
operator|.
name|foaf
argument_list|,
name|TestData
operator|.
name|alexdma
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
comment|// Does alexdma know enridaga?
name|InfModel
name|inferred
init|=
name|reasoningService
operator|.
name|run
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Statement
name|knowsHim
init|=
name|TestData
operator|.
name|model
operator|.
name|createStatement
argument_list|(
name|TestData
operator|.
name|alexdma
argument_list|,
name|TestData
operator|.
name|foaf_knows
argument_list|,
name|TestData
operator|.
name|enridaga
argument_list|)
decl_stmt|;
comment|// log.info("Statements: {}", TestUtils.printStatements(inferred,
comment|//		TestData.enridaga, RDF.type));
name|log
operator|.
name|info
argument_list|(
literal|"Does alexdma foaf:knows enridaga?...(true)? {}"
argument_list|,
name|inferred
operator|.
name|contains
argument_list|(
name|knowsHim
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inferred
operator|.
name|contains
argument_list|(
name|knowsHim
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset resource to be clean for other tests
name|TestData
operator|.
name|alexdma
operator|.
name|removeProperties
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

