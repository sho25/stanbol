begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|intcheck
operator|.
name|reasoners
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ONManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|ClerezzaOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|base
operator|.
name|commands
operator|.
name|RunRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|KB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|RuleStoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
operator|.
name|RuleParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AxiomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/classify/demo"
argument_list|)
specifier|public
class|class
name|ClassifyDemo
block|{
specifier|private
name|RuleStore
name|kresRuleStore
decl_stmt|;
specifier|protected
name|ONManager
name|onm
decl_stmt|;
specifier|protected
name|ClerezzaOntologyStorage
name|storage
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|ClassifyDemo
parameter_list|()
block|{     	       }
comment|/**     * To get the RuleStoreImpl where are stored the rules and the recipes     *     * @param servletContext     *            {To get the context where the REST service is running.}     */
specifier|public
name|ClassifyDemo
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|kresRuleStore
operator|=
operator|(
name|RuleStoreImpl
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|RuleStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|onm
operator|=
operator|(
name|ONManager
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|ONManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|onm
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No KReSONManager in servlet context. Instantiating manually..."
argument_list|)
expr_stmt|;
name|onm
operator|=
operator|new
name|ONManagerImpl
argument_list|(
operator|new
name|TcManager
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storage
operator|=
name|onm
operator|.
name|getOntologyStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|storage
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No OntologyStorage in servlet context. Instantiating manually..."
argument_list|)
expr_stmt|;
name|storage
operator|=
operator|new
name|ClerezzaOntologyStorage
argument_list|(
operator|new
name|TcManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kresRuleStore
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No KReSRuleStore with stored rules and recipes found in servlet context. Instantiating manually with default values..."
argument_list|)
expr_stmt|;
name|this
operator|.
name|kresRuleStore
operator|=
operator|new
name|RuleStoreImpl
argument_list|(
name|onm
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"PATH TO OWL FILE LOADED: "
operator|+
name|kresRuleStore
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|ontologyClassify
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"scope"
argument_list|)
name|String
name|scope
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"rule"
argument_list|)
name|String
name|rule
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
comment|//System.out.println(":::::: START");
specifier|final
name|OWLOntologyManager
name|man
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
specifier|final
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|OWLOntology
name|ontology
init|=
name|man
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|scope
operator|+
literal|"/all"
argument_list|)
argument_list|)
decl_stmt|;
comment|//System.out.println(":::::: RECUPERATO LO SCOPE COME ONTOLOGIA "+ontology.getAxiomCount());
if|if
condition|(
name|rule
operator|!=
literal|null
condition|)
block|{
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontologyRule
init|=
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|)
decl_stmt|;
name|OWLOntology
name|ruleOntology
init|=
name|manager
operator|.
name|createOntology
argument_list|()
decl_stmt|;
name|String
name|ind
init|=
name|rule
operator|.
name|substring
argument_list|(
name|rule
operator|.
name|lastIndexOf
argument_list|(
literal|"http"
argument_list|)
argument_list|,
name|rule
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|ind
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|bodyhead
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|literal
init|=
name|ontoind
operator|.
name|getDataPropertyValues
argument_list|(
name|bodyhead
argument_list|,
name|ontologyRule
argument_list|)
decl_stmt|;
name|KB
name|kReSKB
init|=
name|RuleParserImpl
operator|.
name|parse
argument_list|(
name|literal
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.println(":::::: RECUPERO LA REGOLA IN KB");
name|RuleList
name|ruleList
init|=
name|kReSKB
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Rule
argument_list|>
name|ruleiter
init|=
name|ruleList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ruleiter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Rule
name|myrule
init|=
name|ruleiter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SWRLRule
name|swrlRule
init|=
name|myrule
operator|.
name|toSWRL
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|ruleOntology
argument_list|,
name|swrlRule
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println(":::::: CREO le swrlRule e le metto in ruleOntology "+ruleOntology.getAxiomCount());
comment|//Faccio eseguire il reasoner e ritorno il risultato.
if|if
condition|(
name|ruleOntology
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println("::: PRIMA DEL REASONER :::");
name|RunRules
name|reasoner
init|=
operator|new
name|RunRules
argument_list|(
name|ruleOntology
argument_list|,
name|ontology
argument_list|)
decl_stmt|;
comment|//System.out.println("AVVIO REASONER");
name|OWLOntology
name|reasonerresult
init|=
name|reasoner
operator|.
name|runRulesReasoner
argument_list|()
decl_stmt|;
comment|//System.out.println("REASONER FINITO");
return|return
name|Response
operator|.
name|ok
argument_list|(
name|reasonerresult
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
literal|204
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
literal|204
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|OWLOntologyManager
name|man
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|ont
decl_stmt|;
try|try
block|{
name|ont
operator|=
name|man
operator|.
name|createOntology
argument_list|()
expr_stmt|;
name|OWLOntology
name|ontology
init|=
name|man
operator|.
name|loadOntology
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
literal|"http://dbpedia.org/resource/Sony_Music_Entertainment"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLAxiom
argument_list|>
name|axioms
init|=
name|ontology
operator|.
name|getAxioms
argument_list|()
decl_stmt|;
for|for
control|(
name|OWLAxiom
name|axiom
range|:
name|axioms
control|)
block|{
if|if
condition|(
operator|!
name|axiom
operator|.
name|isOfType
argument_list|(
name|AxiomType
operator|.
name|DATA_PROPERTY_ASSERTION
argument_list|)
condition|)
block|{
name|man
operator|.
name|addAxiom
argument_list|(
name|ont
argument_list|,
name|axiom
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
literal|"/Users/mac/Desktop/Sony_Music_Entertainment.rdf"
argument_list|)
argument_list|)
decl_stmt|;
name|man
operator|.
name|saveOntology
argument_list|(
name|ont
argument_list|,
name|fos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

