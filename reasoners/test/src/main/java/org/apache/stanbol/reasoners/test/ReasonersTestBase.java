begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reasoners
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MultipartEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|stanbol
operator|.
name|StanbolTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Mini framework for writing services tests for running services  *   * @author enridaga  *  */
end_comment

begin_class
specifier|public
class|class
name|ReasonersTestBase
extends|extends
name|StanbolTestBase
block|{
specifier|protected
specifier|final
name|String
name|REASONERS_PATH
init|=
literal|"/reasoners"
decl_stmt|;
specifier|protected
specifier|final
name|String
name|JOBS_PATH
init|=
literal|"/jobs"
decl_stmt|;
specifier|protected
specifier|final
name|String
index|[]
name|SERVICES
init|=
block|{
literal|"/owl"
block|,
literal|"/owlmini"
block|,
literal|"/rdfs"
block|}
decl_stmt|;
specifier|protected
specifier|final
name|String
index|[]
name|TASKS
init|=
block|{
literal|"/check"
block|,
literal|"/classify"
block|,
literal|"/enrich"
block|}
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|Request
name|buildMultipartRequest
parameter_list|(
name|String
name|path
parameter_list|,
name|MultipartEntity
name|multiPart
parameter_list|)
block|{
name|HttpPost
name|httpPost
init|=
operator|new
name|HttpPost
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|httpPost
operator|.
name|setEntity
argument_list|(
name|multiPart
argument_list|)
expr_stmt|;
comment|/**          * In case of Multipart requests, we must __NOT__ set the content-type header to multipart/form-data.          * If we do it, we have a 400 response (bad request).          */
return|return
name|this
operator|.
name|builder
operator|.
name|buildOtherRequest
argument_list|(
name|httpPost
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|allServices
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sl
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sl
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SERVICES
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sl
return|;
block|}
comment|/**       * Create a job, returns the location of the job.      * We also assert that:      * - response status code is 201      * - Location header do exists, and is unique (no multiple values allowed)      * - The value of the Location header muyst be a valid URI      *       * @param request      * @return      * @throws Exception      */
specifier|protected
name|String
name|createJob
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpClient
name|client
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|HttpResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|request
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
comment|// Response status code must be 201 Created
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Job location must be in the Location: http header
comment|// Location header must exists and must be unique
name|assertTrue
argument_list|(
name|response
operator|.
name|getHeaders
argument_list|(
literal|"Location"
argument_list|)
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Analyze the location header
name|Header
name|locationHeader
init|=
name|response
operator|.
name|getFirstHeader
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|locationHeader
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Location must be a valid URI
name|URI
name|locationURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|location
argument_list|)
decl_stmt|;
comment|// We do *not* check here if the body of the response contains a description
return|return
name|locationURI
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**       * Create the job and check for its status until it is complete      *       * @param request      * @throws Exception      */
specifier|protected
name|void
name|executeAndPingSingleJob
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Executing: {}"
argument_list|,
name|request
operator|.
name|getRequest
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|createJob
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Job location is {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|// Get the result and ping the jId
name|pingSingleJob
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**       * Check for the status of a job, pinging it each 0.5s until it is ready.      * It does **not** invoke the result.      * Asks for the application/json representation of the job.      *       * We assert that:      * - The job must exists (response code 200)      * - The Content-type header returns JSON      * - The content contains valid JSON      *       * @param location      * @throws Exception      */
specifier|protected
name|void
name|pingSingleJob
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Start pinging {} ... "
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|boolean
name|waiting
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|waiting
condition|)
block|{
name|Request
name|req
init|=
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpGet
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|req
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Ping method: {}"
argument_list|,
name|req
operator|.
name|getRequest
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Ping location: {}"
argument_list|,
name|req
operator|.
name|getRequest
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|getRequest
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"headers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Header
name|h
range|:
name|req
operator|.
name|getRequest
argument_list|()
operator|.
name|getAllHeaders
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"{}: {}"
argument_list|,
name|h
operator|.
name|getName
argument_list|()
argument_list|,
name|h
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Request line:\n\n {} \n\n"
argument_list|,
name|req
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestLine
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|content
init|=
name|executor
operator|.
name|execute
argument_list|(
name|req
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"JSON content:\n\n {} \n\n"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|JobInfo
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... still working (wait for 0.5s)"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|waiting
operator|=
literal|false
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... done!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"An error occurred"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

