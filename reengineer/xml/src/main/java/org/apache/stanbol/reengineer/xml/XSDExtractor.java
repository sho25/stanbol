begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|ReengineeringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|ReengineerUriRefGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|xml
operator|.
name|vocab
operator|.
name|XSD_OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|dom
operator|.
name|PSVIDocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|dv
operator|.
name|DatatypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|dv
operator|.
name|xs
operator|.
name|XSSimpleTypeDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSAnnotationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSAttributeGroupDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSAttributeUseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSComplexTypeDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSElementDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSModelGroupImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSModelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|XSParticleDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|xs
operator|.
name|util
operator|.
name|XSObjectListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|ElementPSVI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|StringList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSComplexTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSElementDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSModelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSNamedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSObjectList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSParticle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|XSTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xs
operator|.
name|datatypes
operator|.
name|ObjectList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectPropertyAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|traversal
operator|.
name|DocumentTraversal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|traversal
operator|.
name|NodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|traversal
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|traversal
operator|.
name|TreeWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|XSDExtractor
extends|extends
name|ReengineerUriRefGenerator
block|{
specifier|public
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|XSDExtractor
parameter_list|()
block|{}
specifier|private
name|void
name|addComplexType
parameter_list|(
name|String
name|schemaNS
parameter_list|,
name|OWLOntologyManager
name|manager
parameter_list|,
name|OWLDataFactory
name|factory
parameter_list|,
name|OWLOntology
name|schemaOntology
parameter_list|,
name|IRI
name|complexType
parameter_list|,
name|XSComplexTypeDecl
name|xsComplexTypeDefinition
parameter_list|)
block|{
name|String
name|name
init|=
name|xsComplexTypeDefinition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|OWLDataPropertyAssertionAxiom
name|hasName
init|=
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|complexType
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|hasName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XSAttributeGroupDecl
name|xsAttributeGroupDecl
init|=
name|xsComplexTypeDefinition
operator|.
name|getAttrGrp
argument_list|()
decl_stmt|;
if|if
condition|(
name|xsAttributeGroupDecl
operator|!=
literal|null
condition|)
block|{
name|String
name|attrGroupName
init|=
name|xsAttributeGroupDecl
operator|.
name|getName
argument_list|()
decl_stmt|;
name|IRI
name|attrGroupIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|attrGroupName
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|attrGroup
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|AttributeGroup
argument_list|,
name|attrGroupIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|attrGroup
argument_list|)
argument_list|)
expr_stmt|;
name|XSObjectList
name|xsObjectList
init|=
name|xsAttributeGroupDecl
operator|.
name|getAttributeUses
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|xsObjectList
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|XSAttributeUseImpl
name|xsAttributeUseImpl
init|=
operator|(
name|XSAttributeUseImpl
operator|)
name|xsObjectList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attrName
init|=
name|xsAttributeUseImpl
operator|.
name|getAttrDeclaration
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|IRI
name|attrResourceIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|attrGroupName
operator|+
literal|"_"
operator|+
name|attrName
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|attrResource
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Attribute
argument_list|,
name|attrResourceIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|attrResource
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|attrResourceIRI
argument_list|,
name|attrName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|required
argument_list|,
name|attrResourceIRI
argument_list|,
name|xsAttributeUseImpl
operator|.
name|getRequired
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IRI
name|simpleTypeIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|xsAttributeUseImpl
operator|.
name|getAttrDeclaration
argument_list|()
operator|.
name|getTypeDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|simpleType
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|SimpleType
argument_list|,
name|simpleTypeIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|simpleType
argument_list|)
argument_list|)
expr_stmt|;
comment|// ADD SIMPLE TYPE DEFINITION TO THE RDF
name|addSimpleType
argument_list|(
name|schemaNS
argument_list|,
name|manager
argument_list|,
name|factory
argument_list|,
name|schemaOntology
argument_list|,
name|simpleTypeIRI
argument_list|,
operator|(
name|XSSimpleTypeDecl
operator|)
name|xsAttributeUseImpl
operator|.
name|getAttrDeclaration
argument_list|()
operator|.
name|getTypeDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|type
argument_list|,
name|attrResourceIRI
argument_list|,
name|simpleTypeIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasAttributeUse
argument_list|,
name|attrGroupIRI
argument_list|,
name|attrResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|XSObjectList
name|xsObjectList
init|=
name|xsComplexTypeDefinition
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|xsObjectList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|xsObjectList
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|XSAnnotationImpl
name|xsAnnotationImpl
init|=
operator|(
name|XSAnnotationImpl
operator|)
name|xsObjectList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|annotationString
init|=
name|xsAnnotationImpl
operator|.
name|getAnnotationString
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotationString
operator|!=
literal|null
condition|)
block|{
name|IRI
name|annotatioIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_annotation_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|annotation
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Annotation
argument_list|,
name|annotatioIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|annotation
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"DOCUMENTATION : "
operator|+
name|xsAnnotationImpl
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|annotatioIRI
argument_list|,
name|annotationString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasAnnotation
argument_list|,
name|complexType
argument_list|,
name|annotatioIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|short
name|prohibitedSubstitution
init|=
name|xsComplexTypeDefinition
operator|.
name|getProhibitedSubstitutions
argument_list|()
decl_stmt|;
comment|// Derivation restriction
if|if
condition|(
name|prohibitedSubstitution
operator|==
name|XSConstants
operator|.
name|DERIVATION_RESTRICTION
condition|)
block|{
comment|// Prohibited restriction
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasProhibitedSubstitutions
argument_list|,
name|complexType
argument_list|,
name|XSD_OWL
operator|.
name|PROHIBITED_RESTRICTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prohibitedSubstitution
operator|==
name|XSConstants
operator|.
name|DERIVATION_EXTENSION
condition|)
block|{
comment|// Prohibited extension
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasProhibitedSubstitutions
argument_list|,
name|complexType
argument_list|,
name|XSD_OWL
operator|.
name|PROHIBITED_EXTENSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prohibitedSubstitution
operator|==
name|XSConstants
operator|.
name|DERIVATION_NONE
condition|)
block|{
comment|// Prohibited none
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasProhibitedSubstitutions
argument_list|,
name|complexType
argument_list|,
name|XSD_OWL
operator|.
name|PROHIBITED_NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Abstract
name|boolean
name|abstractProperty
init|=
name|xsComplexTypeDefinition
operator|.
name|getAbstract
argument_list|()
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|abstractProperty
argument_list|,
name|complexType
argument_list|,
name|abstractProperty
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Final value
name|short
name|finalValue
init|=
name|xsComplexTypeDefinition
operator|.
name|getFinal
argument_list|()
decl_stmt|;
if|if
condition|(
name|finalValue
operator|==
name|XSConstants
operator|.
name|DERIVATION_EXTENSION
condition|)
block|{
comment|// Derivation extension
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasFinal
argument_list|,
name|complexType
argument_list|,
name|XSD_OWL
operator|.
name|DERIVATION_EXTENSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalValue
operator|==
name|XSConstants
operator|.
name|DERIVATION_RESTRICTION
condition|)
block|{
comment|// Derivation restriction
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasFinal
argument_list|,
name|complexType
argument_list|,
name|XSD_OWL
operator|.
name|DERIVATION_RESTRICTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalValue
operator|==
name|XSConstants
operator|.
name|DERIVATION_NONE
condition|)
block|{
comment|// Derivation none
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasFinal
argument_list|,
name|complexType
argument_list|,
name|XSD_OWL
operator|.
name|DERIVATION_NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XSParticle
name|xsParticle
init|=
name|xsComplexTypeDefinition
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|short
name|contentType
init|=
name|xsComplexTypeDefinition
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
name|XSComplexTypeDefinition
operator|.
name|CONTENTTYPE_EMPTY
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"CONTENTTYPE_EMPTY"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contentType
operator|==
name|XSComplexTypeDefinition
operator|.
name|CONTENTTYPE_ELEMENT
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"CONTENTTYPE_ELEMENT"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contentType
operator|==
name|XSComplexTypeDefinition
operator|.
name|CONTENTTYPE_MIXED
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"CONTENTTYPE_MIXED"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contentType
operator|==
name|XSComplexTypeDefinition
operator|.
name|CONTENTTYPE_SIMPLE
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"CONTENTTYPE_SIMPLE"
argument_list|)
expr_stmt|;
block|}
name|XSObjectList
name|objectList
init|=
name|xsComplexTypeDefinition
operator|.
name|getAttributeUses
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"XSOBJECT SIZE: "
operator|+
name|objectList
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|objectList
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|XSAttributeUseImpl
name|xsAttributeUseImpl
init|=
operator|(
name|XSAttributeUseImpl
operator|)
name|objectList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attrName
init|=
name|xsAttributeUseImpl
operator|.
name|getAttrDeclaration
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|IRI
name|attrResourceIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_"
operator|+
name|attrName
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|attrResource
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Attribute
argument_list|,
name|attrResourceIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|attrResource
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|attrResourceIRI
argument_list|,
name|attrName
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|required
argument_list|,
name|attrResourceIRI
argument_list|,
name|xsAttributeUseImpl
operator|.
name|getRequired
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IRI
name|simpleTypeIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|xsAttributeUseImpl
operator|.
name|getAttrDeclaration
argument_list|()
operator|.
name|getTypeDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|simpleType
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|SimpleType
argument_list|,
name|simpleTypeIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|simpleType
argument_list|)
argument_list|)
expr_stmt|;
comment|// ADD SIMPLE TYPE DEFINITION TO THE RDF
name|addSimpleType
argument_list|(
name|schemaNS
argument_list|,
name|manager
argument_list|,
name|factory
argument_list|,
name|schemaOntology
argument_list|,
name|simpleTypeIRI
argument_list|,
operator|(
name|XSSimpleTypeDecl
operator|)
name|xsAttributeUseImpl
operator|.
name|getAttrDeclaration
argument_list|()
operator|.
name|getTypeDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|type
argument_list|,
name|attrResourceIRI
argument_list|,
name|simpleTypeIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"ATTRIBUTE USES REQUIRED "
operator|+
name|xsAttributeUseImpl
operator|.
name|getAttrDeclaration
argument_list|()
operator|.
name|getTypeDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasAttributeUse
argument_list|,
name|complexType
argument_list|,
name|attrResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xsParticle
operator|!=
literal|null
condition|)
block|{
name|int
name|maxOccurs
init|=
name|xsParticle
operator|.
name|getMaxOccurs
argument_list|()
decl_stmt|;
name|int
name|minOccurs
init|=
name|xsParticle
operator|.
name|getMinOccurs
argument_list|()
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|maxOccurs
argument_list|,
name|complexType
argument_list|,
name|maxOccurs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|minOccurs
argument_list|,
name|complexType
argument_list|,
name|minOccurs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|XSTerm
name|xsTerm
init|=
name|xsParticle
operator|.
name|getTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|xsTerm
operator|instanceof
name|XSModelGroupImpl
condition|)
block|{
name|XSModelGroupImpl
name|xsModelGroup
init|=
operator|(
name|XSModelGroupImpl
operator|)
name|xsTerm
decl_stmt|;
name|XSObjectList
name|list
init|=
name|xsModelGroup
operator|.
name|getParticles
argument_list|()
decl_stmt|;
name|IRI
name|particleIRI
init|=
literal|null
decl_stmt|;
name|OWLClassAssertionAxiom
name|particle
init|=
literal|null
decl_stmt|;
name|short
name|compositor
init|=
name|xsModelGroup
operator|.
name|getCompositor
argument_list|()
decl_stmt|;
if|if
condition|(
name|compositor
operator|==
name|XSModelGroup
operator|.
name|COMPOSITOR_ALL
condition|)
block|{
name|particleIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_all"
argument_list|)
expr_stmt|;
name|particle
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|All
argument_list|,
name|particleIRI
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compositor
operator|==
name|XSModelGroup
operator|.
name|COMPOSITOR_CHOICE
condition|)
block|{
name|particleIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_choice"
argument_list|)
expr_stmt|;
name|particle
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Choice
argument_list|,
name|particleIRI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|particleIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_sequence"
argument_list|)
expr_stmt|;
name|particle
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Sequence
argument_list|,
name|particleIRI
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|particle
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|particle
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasCompositor
argument_list|,
name|complexType
argument_list|,
name|particleIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|list
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|XSParticleDecl
name|xsParticleDecl
init|=
operator|(
name|XSParticleDecl
operator|)
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|XSTerm
name|xsParticleTerm
init|=
name|xsParticleDecl
operator|.
name|getTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|xsParticleTerm
operator|instanceof
name|XSElementDecl
condition|)
block|{
name|XSElementDecl
name|xsElementDecl
init|=
operator|(
name|XSElementDecl
operator|)
name|xsParticleTerm
decl_stmt|;
name|String
name|particleName
init|=
name|xsParticleDecl
operator|.
name|getTerm
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|IRI
name|elementParticleIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|particleName
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|elementParticle
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Element
argument_list|,
name|elementParticleIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|elementParticle
argument_list|)
argument_list|)
expr_stmt|;
name|XSTypeDefinition
name|xsTypeDefinition
init|=
name|xsElementDecl
operator|.
name|getTypeDefinition
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|schemaNS
operator|+
name|xsTypeDefinition
operator|.
name|getName
argument_list|()
decl_stmt|;
name|XSTypeDefinition
name|baseTypeDefinition
init|=
name|xsTypeDefinition
operator|.
name|getBaseType
argument_list|()
decl_stmt|;
name|short
name|baseType
init|=
name|baseTypeDefinition
operator|.
name|getTypeCategory
argument_list|()
decl_stmt|;
name|IRI
name|typeResourceIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|typeResource
decl_stmt|;
if|if
condition|(
name|baseType
operator|==
name|XSTypeDefinition
operator|.
name|SIMPLE_TYPE
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SIMPLE TYPE"
argument_list|)
expr_stmt|;
name|typeResource
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|SimpleType
argument_list|,
name|typeResourceIRI
argument_list|)
expr_stmt|;
name|addSimpleType
argument_list|(
name|schemaNS
argument_list|,
name|manager
argument_list|,
name|factory
argument_list|,
name|schemaOntology
argument_list|,
name|typeResourceIRI
argument_list|,
operator|(
name|XSSimpleTypeDecl
operator|)
name|baseTypeDefinition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"COMPLEX TYPE"
argument_list|)
expr_stmt|;
name|typeResource
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|ComplexType
argument_list|,
name|typeResourceIRI
argument_list|)
expr_stmt|;
name|addComplexType
argument_list|(
name|schemaNS
argument_list|,
name|manager
argument_list|,
name|factory
argument_list|,
name|schemaOntology
argument_list|,
name|typeResourceIRI
argument_list|,
operator|(
name|XSComplexTypeDecl
operator|)
name|baseTypeDefinition
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|typeResource
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|type
argument_list|,
name|elementParticleIRI
argument_list|,
name|typeResourceIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"OBJ "
operator|+
name|xsElementDecl
operator|.
name|getTypeDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"COMPOSITOR : "
operator|+
name|xsModelGroup
operator|.
name|getCompositor
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"COMPOSITOR_SEQUENCE : "
operator|+
name|XSModelGroup
operator|.
name|COMPOSITOR_SEQUENCE
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"TERM: "
operator|+
name|xsTerm
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"NO PARTICLE"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addSimpleType
parameter_list|(
name|String
name|schemaNS
parameter_list|,
name|OWLOntologyManager
name|manager
parameter_list|,
name|OWLDataFactory
name|factory
parameter_list|,
name|OWLOntology
name|schemaOntology
parameter_list|,
name|IRI
name|simpleType
parameter_list|,
name|XSSimpleTypeDecl
name|xsSimpleTypeDefinition
parameter_list|)
block|{
comment|// NAME
name|String
name|name
init|=
name|xsSimpleTypeDefinition
operator|.
name|getName
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"NAME OF SIMPLE TYPE : "
operator|+
name|name
argument_list|)
expr_stmt|;
comment|// add name literal to the simple type declaration
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|simpleType
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// FINAL
name|short
name|finalValue
init|=
name|xsSimpleTypeDefinition
operator|.
name|getFinal
argument_list|()
decl_stmt|;
if|if
condition|(
name|finalValue
operator|==
name|XSConstants
operator|.
name|DERIVATION_EXTENSION
condition|)
block|{
comment|// Derivation extension
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|simpleType
argument_list|,
name|XSD_OWL
operator|.
name|DERIVATION_EXTENSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalValue
operator|==
name|XSConstants
operator|.
name|DERIVATION_RESTRICTION
condition|)
block|{
comment|// Derivation restriction
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|simpleType
argument_list|,
name|XSD_OWL
operator|.
name|DERIVATION_RESTRICTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalValue
operator|==
name|XSConstants
operator|.
name|DERIVATION_NONE
condition|)
block|{
comment|// Derivation none
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|simpleType
argument_list|,
name|XSD_OWL
operator|.
name|DERIVATION_NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ObjectList
name|objectList
init|=
name|xsSimpleTypeDefinition
operator|.
name|getActualEnumeration
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectList
operator|!=
literal|null
operator|&&
name|objectList
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|IRI
name|enumerationIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_enumeration"
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|enumeration
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Enumeration
argument_list|,
name|enumerationIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|enumeration
argument_list|)
argument_list|)
expr_stmt|;
comment|// add value property to enumeration UriRef
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|objectList
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|simpleType
argument_list|,
name|objectList
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add triple asserting that a simple type has an enumeration
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasEnumeration
argument_list|,
name|simpleType
argument_list|,
name|enumerationIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IRI
name|option
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Whitepace
comment|/*              * This line, sometimes, generates an exception when trying to get simple type definition for              * white space. However, even if there is the exception, the line returns a zero value. In this              * case, the WS_PRESERVE option is set in the catch block.              */
name|short
name|whitespace
init|=
name|xsSimpleTypeDefinition
operator|.
name|getWhitespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|whitespace
operator|==
name|XSSimpleTypeDecl
operator|.
name|WS_COLLAPSE
condition|)
name|option
operator|=
name|XSD_OWL
operator|.
name|COLLAPSE
expr_stmt|;
comment|// Collapse
elseif|else
if|if
condition|(
name|whitespace
operator|==
name|XSSimpleTypeDecl
operator|.
name|WS_PRESERVE
condition|)
name|option
operator|=
name|XSD_OWL
operator|.
name|PRESERVE
expr_stmt|;
comment|// Preserve
elseif|else
if|if
condition|(
name|whitespace
operator|==
name|XSSimpleTypeDecl
operator|.
name|WS_REPLACE
condition|)
name|option
operator|=
name|XSD_OWL
operator|.
name|REPLACE
expr_stmt|;
comment|// Replace
name|log
operator|.
name|debug
argument_list|(
literal|"Whitespace facet value for XSD simple type definition is {}."
argument_list|,
name|whitespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeException
name|e
parameter_list|)
block|{
comment|// Exception fallback is to preserve the simple type definition.
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to obtain whitespace facet value for simple type definition. Defaulting to WS_PRESERVE."
operator|+
literal|"\n\tOriginal message follows :: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|option
operator|=
name|XSD_OWL
operator|.
name|PRESERVE
expr_stmt|;
block|}
finally|finally
block|{
name|OWLAxiom
name|axiom
init|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasWhitespace
argument_list|,
name|simpleType
argument_list|,
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|axiom
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ADD BASE TYPE
name|XSTypeDefinition
name|baseTypeDefinition
init|=
name|xsSimpleTypeDefinition
operator|.
name|getBaseType
argument_list|()
decl_stmt|;
name|String
name|baseTypeNS
init|=
name|baseTypeDefinition
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|String
name|baseTypeName
init|=
name|baseTypeDefinition
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// add base type
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|base
argument_list|,
name|simpleType
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|baseTypeNS
operator|+
literal|"#"
operator|+
name|baseTypeName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ADD MAX ECLUSIVE VALUE
name|Object
name|obj
init|=
name|xsSimpleTypeDefinition
operator|.
name|getMaxExclusiveValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|IRI
name|maxExclusiveIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_maxEclusive"
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|maxExclusive
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|MaxEclusive
argument_list|,
name|maxExclusiveIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|maxExclusive
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|maxExclusiveIRI
argument_list|,
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ADD MIN ECLUSIVE VALUE
name|obj
operator|=
name|xsSimpleTypeDefinition
operator|.
name|getMinExclusiveValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|IRI
name|minExclusiveIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_minEclusive"
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|minExclusive
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|MinEclusive
argument_list|,
name|minExclusiveIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|minExclusive
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|minExclusiveIRI
argument_list|,
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ADD MAX INCLUSIVE VALUE
name|obj
operator|=
name|xsSimpleTypeDefinition
operator|.
name|getMaxInclusiveValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|IRI
name|maxInclusiveIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_maxInclusive"
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|maxInclusive
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|MaxInclusive
argument_list|,
name|maxInclusiveIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|maxInclusiveIRI
argument_list|,
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ADD MIN INCLUSIVE VALUE
name|obj
operator|=
name|xsSimpleTypeDefinition
operator|.
name|getMinInclusiveValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|IRI
name|minInclusiveIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_minInclusive"
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|minInclusive
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|MinInclusive
argument_list|,
name|minInclusiveIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|minInclusive
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|minInclusiveIRI
argument_list|,
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ADD PATTERNS
name|StringList
name|stringList
init|=
name|xsSimpleTypeDefinition
operator|.
name|getLexicalPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|stringList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|stringList
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|IRI
name|patternIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|name
operator|+
literal|"_pattern_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|pattern
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Pattern
argument_list|,
name|patternIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|patternIRI
argument_list|,
name|stringList
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|schemaOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|value
argument_list|,
name|simpleType
argument_list|,
name|patternIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|XSObjectListImpl
name|xsObjectListImpl
init|=
name|xsSimpleTypeDefinition
operator|.
name|patternAnnotations
decl_stmt|;
if|if
condition|(
name|xsObjectListImpl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|xsObjectListImpl
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|XSObject
name|xsObject
init|=
name|xsObjectListImpl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"PATTERN : "
operator|+
name|xsObject
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|OWLOntology
name|getOntologySchema
parameter_list|(
name|String
name|graphNS
parameter_list|,
name|IRI
name|outputIRI
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|ReengineeringException
block|{
if|if
condition|(
name|dataSource
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Data source cannot be null."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|graphNS
operator|.
name|endsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|graphNS
operator|+=
literal|"#"
expr_stmt|;
block|}
name|OWLOntology
name|dataSourceSchemaOntology
init|=
literal|null
decl_stmt|;
operator|new
name|DocumentTraversal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TreeWalker
name|createTreeWalker
parameter_list|(
name|Node
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|NodeFilter
name|arg2
parameter_list|,
name|boolean
name|arg3
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeIterator
name|createNodeIterator
parameter_list|(
name|Node
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|NodeFilter
name|arg2
parameter_list|,
name|boolean
name|arg3
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|PSVIDocumentImpl
name|psviDocumentImpl
init|=
operator|new
name|PSVIDocumentImpl
argument_list|()
decl_stmt|;
name|XSSimpleTypeDecl
name|m
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"XSD output IRI : "
operator|+
name|outputIRI
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|outputIRI
operator|!=
literal|null
condition|)
name|dataSourceSchemaOntology
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|outputIRI
argument_list|)
expr_stmt|;
else|else
name|dataSourceSchemaOntology
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReengineeringException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|dataSourceSchemaOntology
operator|!=
literal|null
condition|)
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|id
init|=
literal|"http://apache.org/xml/properties/dom/document-class-name"
decl_stmt|;
name|Object
name|value
init|=
literal|"org.apache.xerces.dom.PSVIDocumentImpl"
decl_stmt|;
try|try
block|{
name|dbf
operator|.
name|setAttribute
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setValidating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setAttribute
argument_list|(
literal|"http://apache.org/xml/features/validation/schema"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set parser property"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|DocumentBuilder
name|db
decl_stmt|;
name|Document
name|document
decl_stmt|;
try|try
block|{
name|db
operator|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
comment|// FIXME hack for unit tests, this should have a configurable offline mode!!!
name|db
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|systemId
operator|.
name|endsWith
argument_list|(
literal|"DWML.xsd"
argument_list|)
condition|)
block|{
name|InputStream
name|dtdStream
init|=
name|XSDExtractor
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/xml/DWML.xsd"
argument_list|)
decl_stmt|;
return|return
operator|new
name|InputSource
argument_list|(
name|dtdStream
argument_list|)
return|;
block|}
comment|// else
comment|// if (systemId.endsWith("ndfd_data.xsd"))
comment|// {
comment|// InputStream dtdStream = XSDExtractor.class
comment|// .getResourceAsStream("/xml/ndfd_data.xsd");
comment|// return new InputSource(dtdStream);
comment|// }
comment|// else
comment|// if (systemId.endsWith("meta_data.xsd"))
comment|// {
comment|// InputStream dtdStream = XSDExtractor.class
comment|// .getResourceAsStream("/xml/meta_data.xsd");
comment|// return new InputSource(dtdStream);
comment|// }
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|document
operator|=
name|db
operator|.
name|parse
argument_list|(
operator|(
name|InputStream
operator|)
name|dataSource
operator|.
name|getDataSource
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Root is : "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|ElementPSVI
name|rootPsvi
init|=
operator|(
name|ElementPSVI
operator|)
name|root
decl_stmt|;
name|XSModelImpl
name|xsModel
init|=
operator|(
name|XSModelImpl
operator|)
name|rootPsvi
operator|.
name|getSchemaInformation
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Schema model : "
operator|+
name|xsModel
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|XSNamedMap
name|xsNamedMap
init|=
name|xsModel
operator|.
name|getComponents
argument_list|(
name|XSConstants
operator|.
name|ELEMENT_DECLARATION
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|xsNamedMap
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|XSObject
name|xsObject
init|=
name|xsNamedMap
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|xsObject
operator|instanceof
name|XSElementDeclaration
condition|)
block|{
name|XSElementDeclaration
name|xsElementDeclaration
init|=
operator|(
name|XSElementDeclaration
operator|)
name|xsObject
decl_stmt|;
name|String
name|name
init|=
name|xsElementDeclaration
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|IRI
name|elementIndividual
init|=
name|IRI
operator|.
name|create
argument_list|(
name|graphNS
operator|+
name|name
argument_list|)
decl_stmt|;
name|OWLClassAssertionAxiom
name|element
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|Element
argument_list|,
name|elementIndividual
argument_list|)
decl_stmt|;
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|OWLDataPropertyAssertionAxiom
name|data
init|=
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|name
argument_list|,
name|elementIndividual
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|boolValue
init|=
name|xsElementDeclaration
operator|.
name|getAbstract
argument_list|()
decl_stmt|;
name|data
operator|=
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|abstractProperty
argument_list|,
name|elementIndividual
argument_list|,
name|boolValue
argument_list|)
expr_stmt|;
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|XSTypeDefinition
name|xsTypeDefinition
init|=
name|xsElementDeclaration
operator|.
name|getTypeDefinition
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|graphNS
operator|+
name|xsTypeDefinition
operator|.
name|getName
argument_list|()
decl_stmt|;
name|XSTypeDefinition
name|baseTypeDefinition
init|=
name|xsTypeDefinition
operator|.
name|getBaseType
argument_list|()
decl_stmt|;
name|short
name|baseType
init|=
name|baseTypeDefinition
operator|.
name|getTypeCategory
argument_list|()
decl_stmt|;
name|OWLClassAssertionAxiom
name|typeResource
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"SIMPLE TYPE PRINT "
operator|+
name|XSTypeDefinition
operator|.
name|SIMPLE_TYPE
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"COMPLEX TYPE PRINT "
operator|+
name|XSTypeDefinition
operator|.
name|COMPLEX_TYPE
argument_list|)
expr_stmt|;
name|IRI
name|typeIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseType
operator|==
name|XSTypeDefinition
operator|.
name|SIMPLE_TYPE
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SIMPLE TYPE"
argument_list|)
expr_stmt|;
name|typeResource
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|SimpleType
argument_list|,
name|typeIRI
argument_list|)
expr_stmt|;
name|addSimpleType
argument_list|(
name|graphNS
argument_list|,
name|ontologyManager
argument_list|,
name|factory
argument_list|,
name|dataSourceSchemaOntology
argument_list|,
name|typeIRI
argument_list|,
operator|(
name|XSSimpleTypeDecl
operator|)
name|xsTypeDefinition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"COMPLEX TYPE"
argument_list|)
expr_stmt|;
name|typeResource
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|ComplexType
argument_list|,
name|typeIRI
argument_list|)
expr_stmt|;
name|addComplexType
argument_list|(
name|graphNS
argument_list|,
name|ontologyManager
argument_list|,
name|factory
argument_list|,
name|dataSourceSchemaOntology
argument_list|,
name|typeIRI
argument_list|,
operator|(
name|XSComplexTypeDecl
operator|)
name|xsTypeDefinition
argument_list|)
expr_stmt|;
block|}
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|typeResource
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the type property to the element declaration
name|log
operator|.
name|debug
argument_list|(
literal|"---- graph NS : "
operator|+
name|graphNS
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"---- type IRI : "
operator|+
name|typeIRI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|hasType
init|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|type
argument_list|,
name|elementIndividual
argument_list|,
name|typeIRI
argument_list|)
decl_stmt|;
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|hasType
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the scope property to the element declaration
name|short
name|scope
init|=
name|xsElementDeclaration
operator|.
name|getScope
argument_list|()
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|scopeAxiom
decl_stmt|;
if|if
condition|(
name|scope
operator|==
name|XSConstants
operator|.
name|SCOPE_ABSENT
condition|)
block|{
comment|// Scope absent
name|scopeAxiom
operator|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasScope
argument_list|,
name|elementIndividual
argument_list|,
name|XSD_OWL
operator|.
name|ScopeAbsent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scope
operator|==
name|XSConstants
operator|.
name|SCOPE_LOCAL
condition|)
block|{
name|scopeAxiom
operator|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasScope
argument_list|,
name|elementIndividual
argument_list|,
name|XSD_OWL
operator|.
name|ScopeLocal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopeAxiom
operator|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasScope
argument_list|,
name|elementIndividual
argument_list|,
name|XSD_OWL
operator|.
name|ScopeGlobal
argument_list|)
expr_stmt|;
block|}
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|scopeAxiom
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the constraint type property to the element declaration
name|short
name|constraingType
init|=
name|xsElementDeclaration
operator|.
name|getConstraintType
argument_list|()
decl_stmt|;
name|OWLObjectPropertyAssertionAxiom
name|constraintAxiom
decl_stmt|;
if|if
condition|(
name|constraingType
operator|==
name|XSConstants
operator|.
name|VC_NONE
condition|)
block|{
comment|// Value constraint none
name|constraintAxiom
operator|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasConstraintType
argument_list|,
name|elementIndividual
argument_list|,
name|XSD_OWL
operator|.
name|VC_NONE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|constraingType
operator|==
name|XSConstants
operator|.
name|VC_DEFAULT
condition|)
block|{
name|constraintAxiom
operator|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasConstraintType
argument_list|,
name|elementIndividual
argument_list|,
name|XSD_OWL
operator|.
name|VC_DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Value constraint fixed
name|constraintAxiom
operator|=
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|hasConstraintType
argument_list|,
name|elementIndividual
argument_list|,
name|XSD_OWL
operator|.
name|VC_FIXED
argument_list|)
expr_stmt|;
block|}
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|constraintAxiom
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the constraint value literal to the element delcaration
name|String
name|contstraintValue
init|=
name|xsElementDeclaration
operator|.
name|getConstraintValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|contstraintValue
operator|!=
literal|null
condition|)
block|{
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataSourceSchemaOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|constraint
argument_list|,
name|elementIndividual
argument_list|,
name|contstraintValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dataSourceSchemaOntology
return|;
block|}
block|}
end_class

end_unit

