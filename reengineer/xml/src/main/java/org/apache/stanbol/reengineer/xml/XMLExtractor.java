begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|DuplicateIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|io
operator|.
name|RootOntologyIRISource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScopeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologySpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|ScopeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|session
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|Reengineer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|ReengineerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|Reengineer_OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|ReengineeringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|ReengineerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|ReengineerUriRefGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|UnsupportedReengineerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|xml
operator|.
name|vocab
operator|.
name|XML_OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|xml
operator|.
name|vocab
operator|.
name|XSD_OWL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClassAssertionAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLImportsDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologySetProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * The {@code XMLExtractor} extends of the {@link XSDExtractor} that implements the {@link Reengineer} for XML  * data sources.  *   * @author andrea.nuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|Reengineer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XMLExtractor
extends|extends
name|ReengineerUriRefGenerator
implements|implements
name|Reengineer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|_HOST_NAME_AND_PORT_DEFAULT
init|=
literal|"localhost:8080"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_REENGINEERING_SCOPE_DEFAULT
init|=
literal|"xml_reengineering"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_XML_REENGINEERING_SESSION_SPACE_DEFAULT
init|=
literal|"/xml-reengineering-session-space"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_HOST_NAME_AND_PORT_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|HOST_NAME_AND_PORT
init|=
literal|"host.name.port"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_REENGINEERING_SCOPE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REENGINEERING_SCOPE
init|=
literal|"xml.reengineering.scope"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|_XML_REENGINEERING_SESSION_SPACE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|XML_REENGINEERING_SESSION_SPACE
init|=
literal|"http://kres.iks-project.eu/space/reengineering/db"
decl_stmt|;
specifier|private
name|IRI
name|kReSSessionID
decl_stmt|;
specifier|public
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
name|ONManager
name|onManager
decl_stmt|;
annotation|@
name|Reference
name|ReengineerManager
name|reengineeringManager
decl_stmt|;
specifier|private
name|OntologyScope
name|scope
decl_stmt|;
specifier|private
name|IRI
name|scopeIRI
decl_stmt|;
specifier|private
name|IRI
name|spaceIRI
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the XMLExtractor instances do need to be configured! YOU NEED      * TO USE {@link #XMLExtractor(ONManager)} or its overloads, to parse the configuration and then      * initialise the rule store if running outside a OSGI environment.      */
specifier|public
name|XMLExtractor
parameter_list|()
block|{      }
specifier|public
name|XMLExtractor
parameter_list|(
name|ReengineerManager
name|reengineeringManager
parameter_list|,
name|ONManager
name|onManager
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|reengineeringManager
operator|=
name|reengineeringManager
expr_stmt|;
name|this
operator|.
name|onManager
operator|=
name|onManager
expr_stmt|;
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|XMLExtractor
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|String
name|scopeID
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|REENGINEERING_SCOPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scopeID
operator|==
literal|null
condition|)
name|scopeID
operator|=
name|_REENGINEERING_SCOPE_DEFAULT
expr_stmt|;
name|String
name|hostPort
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|HOST_NAME_AND_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostPort
operator|==
literal|null
condition|)
name|hostPort
operator|=
name|_HOST_NAME_AND_PORT_DEFAULT
expr_stmt|;
comment|// TODO: Manage the other properties
name|spaceIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|XML_REENGINEERING_SESSION_SPACE
argument_list|)
expr_stmt|;
name|scopeIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|hostPort
operator|+
literal|"/kres/ontology/"
operator|+
name|scopeID
argument_list|)
expr_stmt|;
name|reengineeringManager
operator|.
name|bindReengineer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|SessionManager
name|kReSSessionManager
init|=
name|onManager
operator|.
name|getSessionManager
argument_list|()
decl_stmt|;
name|Session
name|kReSSession
init|=
name|kReSSessionManager
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|kReSSessionID
operator|=
name|kReSSession
operator|.
name|getID
argument_list|()
expr_stmt|;
name|OntologyScopeFactory
name|ontologyScopeFactory
init|=
name|onManager
operator|.
name|getOntologyScopeFactory
argument_list|()
decl_stmt|;
name|ScopeRegistry
name|scopeRegistry
init|=
name|onManager
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
name|OntologySpaceFactory
name|ontologySpaceFactory
init|=
name|onManager
operator|.
name|getOntologySpaceFactory
argument_list|()
decl_stmt|;
name|scope
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Semion XMLEtractor : created scope with IRI "
operator|+
name|REENGINEERING_SCOPE
argument_list|)
expr_stmt|;
name|IRI
name|iri
init|=
name|IRI
operator|.
name|create
argument_list|(
name|XML_OWL
operator|.
name|URI
argument_list|)
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|owlOntology
init|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|iri
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created OWL Ontology "
operator|+
name|iri
argument_list|)
expr_stmt|;
name|scope
operator|=
name|ontologyScopeFactory
operator|.
name|createOntologyScope
argument_list|(
name|scopeIRI
argument_list|,
operator|new
name|RootOntologyIRISource
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|XML_OWL
operator|.
name|URI
argument_list|)
argument_list|)
comment|/* new OntologyInputSourceOXML() */
argument_list|)
expr_stmt|;
comment|// scope.setUp();
name|scopeRegistry
operator|.
name|registerScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateIDException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Semion DBExtractor : already existing scope for IRI "
operator|+
name|REENGINEERING_SCOPE
argument_list|)
expr_stmt|;
name|scope
operator|=
name|onManager
operator|.
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|scopeIRI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Semion XMLExtractor : No OntologyInputSource for ONManager."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|scope
operator|.
name|addSessionSpace
argument_list|(
name|ontologySpaceFactory
operator|.
name|createSessionOntologySpace
argument_list|(
name|spaceIRI
argument_list|)
argument_list|,
name|kReSSession
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|scopeRegistry
operator|.
name|setScopeActive
argument_list|(
name|scopeIRI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Activated KReS Semion RDB Reengineer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canPerformReengineering
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
if|if
condition|(
name|dataSource
operator|.
name|getDataSourceType
argument_list|()
operator|==
name|ReengineerType
operator|.
name|XML
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canPerformReengineering
parameter_list|(
name|int
name|dataSourceType
parameter_list|)
block|{
if|if
condition|(
name|dataSourceType
operator|==
name|getReengineerType
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canPerformReengineering
parameter_list|(
name|OWLOntology
name|schemaOntology
parameter_list|)
block|{
name|OWLDataFactory
name|factory
init|=
name|onManager
operator|.
name|getOwlFactory
argument_list|()
decl_stmt|;
name|OWLClass
name|dataSourceClass
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|Reengineer_OWL
operator|.
name|DataSource
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|individuals
init|=
name|dataSourceClass
operator|.
name|getIndividuals
argument_list|(
name|schemaOntology
argument_list|)
decl_stmt|;
name|int
name|hasDataSourceType
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|individuals
operator|!=
literal|null
operator|&&
name|individuals
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|OWLIndividual
name|individual
range|:
name|individuals
control|)
block|{
name|OWLDataProperty
name|hasDataSourceTypeProperty
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|Reengineer_OWL
operator|.
name|hasDataSourceType
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|values
init|=
name|individual
operator|.
name|getDataPropertyValues
argument_list|(
name|hasDataSourceTypeProperty
argument_list|,
name|schemaOntology
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|OWLLiteral
name|value
range|:
name|values
control|)
block|{
try|try
block|{
name|Integer
name|valueInteger
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|getLiteral
argument_list|()
argument_list|)
decl_stmt|;
name|hasDataSourceType
operator|=
name|valueInteger
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{                          }
block|}
block|}
block|}
block|}
if|if
condition|(
name|hasDataSourceType
operator|==
name|getReengineerType
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canPerformReengineering
parameter_list|(
name|String
name|dataSourceType
parameter_list|)
throws|throws
name|UnsupportedReengineerException
block|{
return|return
name|canPerformReengineering
argument_list|(
name|ReengineerType
operator|.
name|getType
argument_list|(
name|dataSourceType
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|IRI
name|createElementResource
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|schemaNS
parameter_list|,
name|Element
name|element
parameter_list|,
name|String
name|parentName
parameter_list|,
name|Integer
name|id
parameter_list|,
name|OWLOntologyManager
name|manager
parameter_list|,
name|OWLDataFactory
name|factory
parameter_list|,
name|OWLOntology
name|dataOntology
parameter_list|)
block|{
name|IRI
name|elementResourceIRI
decl_stmt|;
name|OWLClassAssertionAxiom
name|elementResource
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|elementResourceIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|ns
operator|+
literal|"root"
argument_list|)
expr_stmt|;
name|elementResource
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|XMLElement
argument_list|,
name|elementResourceIRI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|elementResourceIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|ns
operator|+
name|parentName
operator|+
literal|"_"
operator|+
name|element
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"_"
operator|+
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|elementResource
operator|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|XMLElement
argument_list|,
name|elementResourceIRI
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataOntology
argument_list|,
name|elementResource
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|schemaElementName
init|=
name|element
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|IRI
name|elementDeclarationIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|schemaElementName
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|hasElementDeclaration
argument_list|,
name|elementResourceIRI
argument_list|,
name|elementDeclarationIRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|namedNodeMap
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|namedNodeMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|namedNodeMap
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|namedNodeMap
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attributeName
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|attributeValue
init|=
name|node
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|String
index|[]
name|elementNames
init|=
name|elementResourceIRI
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|String
name|elementLocalName
decl_stmt|;
if|if
condition|(
name|elementNames
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|elementLocalName
operator|=
name|elementNames
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|elementLocalName
operator|=
name|elementNames
index|[
literal|0
index|]
expr_stmt|;
block|}
name|IRI
name|xmlAttributeIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|ns
operator|+
name|elementLocalName
operator|+
name|attributeName
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Attribute: "
operator|+
name|ns
operator|+
name|elementLocalName
operator|+
name|attributeName
argument_list|)
expr_stmt|;
name|OWLClassAssertionAxiom
name|xmlAttribute
init|=
name|createOWLClassAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|XMLAttribute
argument_list|,
name|xmlAttributeIRI
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|dataOntology
argument_list|,
name|xmlAttribute
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|nodeName
argument_list|,
name|xmlAttributeIRI
argument_list|,
name|attributeName
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|nodeValue
argument_list|,
name|xmlAttributeIRI
argument_list|,
name|attributeValue
argument_list|)
argument_list|)
expr_stmt|;
name|IRI
name|attributeDeclarationIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|schemaNS
operator|+
name|schemaElementName
operator|+
literal|"_"
operator|+
name|attributeName
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|hasAttributeDeclaration
argument_list|,
name|xmlAttributeIRI
argument_list|,
name|attributeDeclarationIRI
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|hasXMLAttribute
argument_list|,
name|elementResourceIRI
argument_list|,
name|xmlAttributeIRI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|elementResourceIRI
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|dataReengineering
parameter_list|(
name|String
name|graphNS
parameter_list|,
name|IRI
name|outputIRI
parameter_list|,
name|DataSource
name|dataSource
parameter_list|,
specifier|final
name|OWLOntology
name|schemaOntology
parameter_list|)
throws|throws
name|ReengineeringException
block|{
name|OWLOntology
name|ontology
init|=
literal|null
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting XML Reengineering"
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|onManager
operator|.
name|getOwlCacheManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|onManager
operator|.
name|getOwlFactory
argument_list|()
decl_stmt|;
name|IRI
name|schemaOntologyIRI
init|=
name|schemaOntology
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|;
name|OWLOntology
name|localDataOntology
init|=
literal|null
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"XML output IRI: "
operator|+
name|outputIRI
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaOntology
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|outputIRI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|localDataOntology
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|outputIRI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ReengineeringException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|localDataOntology
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReengineeringException
argument_list|()
throw|;
block|}
block|}
specifier|final
name|OWLOntology
name|dataOntology
init|=
name|localDataOntology
decl_stmt|;
name|OWLImportsDeclaration
name|importsDeclaration
init|=
name|factory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|XML_OWL
operator|.
name|URI
argument_list|)
argument_list|)
decl_stmt|;
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddImport
argument_list|(
name|dataOntology
argument_list|,
name|importsDeclaration
argument_list|)
argument_list|)
expr_stmt|;
name|graphNS
operator|=
name|graphNS
operator|.
name|replace
argument_list|(
literal|"#"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|schemaNS
init|=
name|graphNS
operator|+
literal|"/schema#"
decl_stmt|;
name|String
name|dataNS
init|=
name|graphNS
operator|+
literal|"#"
decl_stmt|;
name|OWLClass
name|dataSourceOwlClass
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|Reengineer_OWL
operator|.
name|DataSource
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|individuals
init|=
name|dataSourceOwlClass
operator|.
name|getIndividuals
argument_list|(
name|schemaOntology
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|InputStream
name|xmlStream
init|=
operator|(
name|InputStream
operator|)
name|dataSource
operator|.
name|getDataSource
argument_list|()
decl_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|xmlStream
argument_list|)
decl_stmt|;
name|Element
name|documentElement
init|=
name|dom
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|documentElement
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|IRI
name|rootElementIRI
init|=
name|createElementResource
argument_list|(
name|dataNS
argument_list|,
name|schemaNS
argument_list|,
name|documentElement
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ontologyManager
argument_list|,
name|factory
argument_list|,
name|dataOntology
argument_list|)
decl_stmt|;
name|iterateChildren
argument_list|(
name|dataNS
argument_list|,
name|schemaNS
argument_list|,
name|rootElementIRI
argument_list|,
name|documentElement
argument_list|,
name|ontologyManager
argument_list|,
name|factory
argument_list|,
name|dataOntology
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|OWLOntologyManager
name|man
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntologySetProvider
name|provider
init|=
operator|new
name|OWLOntologySetProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|getOntologies
parameter_list|()
block|{
name|Set
argument_list|<
name|OWLOntology
argument_list|>
name|ontologies
init|=
operator|new
name|HashSet
argument_list|<
name|OWLOntology
argument_list|>
argument_list|()
decl_stmt|;
name|ontologies
operator|.
name|add
argument_list|(
name|schemaOntology
argument_list|)
expr_stmt|;
name|ontologies
operator|.
name|add
argument_list|(
name|dataOntology
argument_list|)
expr_stmt|;
return|return
name|ontologies
return|;
block|}
block|}
decl_stmt|;
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|provider
argument_list|)
decl_stmt|;
try|try
block|{
name|ontology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|man
argument_list|,
name|outputIRI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ontology
return|;
block|}
specifier|private
name|OWLOntology
name|dataReengineering
parameter_list|(
name|String
name|graphNS
parameter_list|,
name|IRI
name|outputIRI
parameter_list|,
name|Document
name|dom
parameter_list|,
name|OWLOntology
name|schemaOntology
parameter_list|)
throws|throws
name|ReengineeringException
block|{
name|OWLOntologyManager
name|ontologyManager
init|=
name|onManager
operator|.
name|getOwlCacheManager
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|onManager
operator|.
name|getOwlFactory
argument_list|()
decl_stmt|;
name|IRI
name|schemaOntologyIRI
init|=
name|schemaOntology
operator|.
name|getOntologyID
argument_list|()
operator|.
name|getOntologyIRI
argument_list|()
decl_stmt|;
name|OWLOntology
name|dataOntology
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaOntology
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|outputIRI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dataOntology
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|(
name|outputIRI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReengineeringException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|dataOntology
operator|=
name|ontologyManager
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReengineeringException
argument_list|()
throw|;
block|}
block|}
name|OWLImportsDeclaration
name|importsDeclaration
init|=
name|factory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|schemaOntologyIRI
argument_list|)
decl_stmt|;
name|ontologyManager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddImport
argument_list|(
name|dataOntology
argument_list|,
name|importsDeclaration
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|schemaNS
init|=
name|graphNS
operator|+
literal|"/schema#"
decl_stmt|;
name|String
name|dataNS
init|=
name|graphNS
operator|+
literal|"#"
decl_stmt|;
name|OWLClass
name|dataSourceOwlClass
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|Reengineer_OWL
operator|.
name|DataSource
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|individuals
init|=
name|dataSourceOwlClass
operator|.
name|getIndividuals
argument_list|(
name|schemaOntology
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|Element
name|documentElement
init|=
name|dom
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|documentElement
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|IRI
name|rootElementIRI
init|=
name|createElementResource
argument_list|(
name|dataNS
argument_list|,
name|schemaNS
argument_list|,
name|documentElement
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ontologyManager
argument_list|,
name|factory
argument_list|,
name|dataOntology
argument_list|)
decl_stmt|;
name|iterateChildren
argument_list|(
name|dataNS
argument_list|,
name|schemaNS
argument_list|,
name|rootElementIRI
argument_list|,
name|documentElement
argument_list|,
name|ontologyManager
argument_list|,
name|factory
argument_list|,
name|dataOntology
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dataOntology
return|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|XMLExtractor
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
name|reengineeringManager
operator|.
name|unbindReengineer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReengineerType
parameter_list|()
block|{
return|return
name|ReengineerType
operator|.
name|XML
return|;
block|}
specifier|private
name|OntologyScope
name|getScope
parameter_list|()
block|{
name|OntologyScope
name|ontologyScope
init|=
literal|null
decl_stmt|;
name|ScopeRegistry
name|scopeRegistry
init|=
name|onManager
operator|.
name|getScopeRegistry
argument_list|()
decl_stmt|;
if|if
condition|(
name|scopeRegistry
operator|.
name|isScopeActive
argument_list|(
name|scopeIRI
argument_list|)
condition|)
block|{
name|ontologyScope
operator|=
name|scopeRegistry
operator|.
name|getScope
argument_list|(
name|scopeIRI
argument_list|)
expr_stmt|;
block|}
return|return
name|ontologyScope
return|;
block|}
specifier|private
name|void
name|iterateChildren
parameter_list|(
name|String
name|dataNS
parameter_list|,
name|String
name|schemaNS
parameter_list|,
name|IRI
name|parentResource
parameter_list|,
name|Node
name|parentElement
parameter_list|,
name|OWLOntologyManager
name|manager
parameter_list|,
name|OWLDataFactory
name|factory
parameter_list|,
name|OWLOntology
name|dataOntology
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|parentElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|children
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|String
index|[]
name|parentNames
init|=
name|parentResource
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|String
name|parentLocalName
decl_stmt|;
if|if
condition|(
name|parentNames
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|parentLocalName
operator|=
name|parentNames
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|parentLocalName
operator|=
name|parentNames
index|[
literal|0
index|]
expr_stmt|;
block|}
name|IRI
name|childResource
init|=
name|createElementResource
argument_list|(
name|dataNS
argument_list|,
name|schemaNS
argument_list|,
operator|(
name|Element
operator|)
name|child
argument_list|,
name|parentLocalName
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|manager
argument_list|,
name|factory
argument_list|,
name|dataOntology
argument_list|)
decl_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|child
argument_list|,
name|parentResource
argument_list|,
name|childResource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLObjectPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XSD_OWL
operator|.
name|parent
argument_list|,
name|childResource
argument_list|,
name|parentResource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iterateChildren
argument_list|(
name|dataNS
argument_list|,
name|schemaNS
argument_list|,
name|childResource
argument_list|,
name|child
argument_list|,
name|manager
argument_list|,
name|factory
argument_list|,
name|dataOntology
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|textContent
init|=
name|child
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|textContent
operator|!=
literal|null
condition|)
block|{
name|textContent
operator|=
name|textContent
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|textContent
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"VALUE : "
operator|+
name|textContent
argument_list|)
expr_stmt|;
name|manager
operator|.
name|applyChange
argument_list|(
operator|new
name|AddAxiom
argument_list|(
name|dataOntology
argument_list|,
name|createOWLDataPropertyAssertionAxiom
argument_list|(
name|factory
argument_list|,
name|XML_OWL
operator|.
name|nodeValue
argument_list|,
name|parentResource
argument_list|,
name|textContent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|reengineering
parameter_list|(
name|String
name|graphNS
parameter_list|,
name|IRI
name|outputIRI
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|ReengineeringException
block|{
name|InputStream
name|dataSourceAsStream
init|=
operator|(
name|InputStream
operator|)
name|dataSource
operator|.
name|getDataSource
argument_list|()
decl_stmt|;
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|dataSourceAsStream
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|stringBuilder1
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|stringBuilder2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|OutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|stringBuilder1
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
name|stringBuilder2
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|stringBuilder1
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|arg0
argument_list|)
expr_stmt|;
name|stringBuilder2
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|arg0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|String
name|line
init|=
literal|""
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ByteArrayOutputStream
name|buff1
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|buff1
operator|.
name|write
argument_list|(
name|stringBuilder1
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ByteArrayOutputStream
name|buff2
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|buff2
operator|.
name|write
argument_list|(
name|stringBuilder2
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|DataSource
name|ds1
init|=
operator|new
name|DataSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getDataSource
parameter_list|()
block|{
name|ByteArrayInputStream
name|byteArr
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buff1
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|byteArr
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDataSourceType
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
name|ReengineerType
operator|.
name|XML
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|DataSource
name|ds2
init|=
operator|new
name|DataSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getDataSource
parameter_list|()
block|{
name|ByteArrayInputStream
name|byteArr
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buff2
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|byteArr
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDataSourceType
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
name|ReengineerType
operator|.
name|XML
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|OWLOntology
name|schemaOntology
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"XML outputIRI : "
operator|+
name|outputIRI
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputIRI
operator|!=
literal|null
operator|&&
operator|!
name|outputIRI
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|IRI
name|schemaIRI
init|=
name|IRI
operator|.
name|create
argument_list|(
name|outputIRI
operator|.
name|toString
argument_list|()
operator|+
literal|"/schema"
argument_list|)
decl_stmt|;
name|schemaOntology
operator|=
name|schemaReengineering
argument_list|(
name|graphNS
operator|+
literal|"/schema"
argument_list|,
name|schemaIRI
argument_list|,
name|ds1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schemaOntology
operator|=
name|schemaReengineering
argument_list|(
name|graphNS
operator|+
literal|"/schema"
argument_list|,
literal|null
argument_list|,
name|ds1
argument_list|)
expr_stmt|;
block|}
name|OWLOntology
name|ontology
init|=
name|dataReengineering
argument_list|(
name|graphNS
argument_list|,
name|outputIRI
argument_list|,
name|ds2
argument_list|,
name|schemaOntology
argument_list|)
decl_stmt|;
comment|// // NO WAY!
comment|// try {
comment|// onManager.getOwlCacheManager().saveOntology(ontology, System.out);
comment|// } catch (OWLOntologyStorageException e) {
comment|// // TODO Auto-generated catch block
comment|// e.printStackTrace();
comment|// }
return|return
name|ontology
return|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|schemaReengineering
parameter_list|(
name|String
name|graphNS
parameter_list|,
name|IRI
name|outputIRI
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
block|{
name|XSDExtractor
name|xsdExtractor
init|=
operator|new
name|XSDExtractor
argument_list|(
name|onManager
argument_list|)
decl_stmt|;
return|return
name|xsdExtractor
operator|.
name|getOntologySchema
argument_list|(
name|graphNS
argument_list|,
name|outputIRI
argument_list|,
name|dataSource
argument_list|)
return|;
block|}
block|}
end_class

end_unit

