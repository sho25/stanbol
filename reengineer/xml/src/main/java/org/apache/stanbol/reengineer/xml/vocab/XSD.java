begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|xml
operator|.
name|vocab
package|;
end_package

begin_comment
comment|/* CVS $Id: XSD.java 1085994 2011-03-27 17:30:29Z alexdma $ */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_comment
comment|/**  * Vocabulary definitions from http://ontologydesignpatterns.org/ont/iks/xsd.owl   * @author andrea.nuzzolese  */
end_comment

begin_class
specifier|public
class|class
name|XSD
block|{
comment|/**<p>The namespace of the vocabulary as a string</p> */
specifier|public
specifier|static
specifier|final
name|String
name|NS
init|=
literal|"http://ontologydesignpatterns.org/ont/iks/xsd.owl#"
decl_stmt|;
comment|/**<p>The namespace of the vocabulary as a string</p>      *  @see #NS */
specifier|public
specifier|static
name|String
name|getURI
parameter_list|()
block|{
return|return
name|NS
return|;
block|}
comment|/**<p>The namespace of the vocabulary as a resource</p> */
comment|//public static final UriRef NAMESPACE = m_model.createUriRef( NS );
specifier|public
specifier|static
specifier|final
name|UriRef
name|Annotation
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Annotation"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Any
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Any"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|AnyAttribute
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"AnyAttribute"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Appinfo
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Appinfo"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Attribute
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Attribute"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|AttributeGroup
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"AttributeGroup"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Choice
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Choice"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|ComplexContent
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"ComplexContent"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|ComplexType
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"ComplexType"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Documentation
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Documentation"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Element
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Element"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Enumeration
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Enumeration"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Extension
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Extension"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Field
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Field"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|FractionDigits
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"FractionDigits"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Group
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Group"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|HasFacet
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"HasFacet"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|HasFacetAndPropertyhasProperty
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"HasFacetAndPropertyhasProperty"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Import
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Import"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Key
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Key"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|List
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"List"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MaxEclusive
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"MaxEclusive"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MinEclusive
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"MinEclusive"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MaxInclusive
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"MaxInclusive"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MinInclusive
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"MinInclusive"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|MinLength
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"MinLength"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Notation
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Notation"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Pattern
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Pattern"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|All
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"All"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Restriction
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Restriction"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Schema
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Schema"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Selector
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Selector"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Sequence
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Sequence"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|SimpleType
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"SimpleType"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|Union
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Union"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|WhiteSpace
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"WhiteSpace"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|ScopeAbsent
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Absent"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|ScopeLocal
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Local"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|ScopeGlobal
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"Global"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|VC_NONE
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"VC_NONE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|VC_DEFAULT
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"VC_DEFAULT"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|VC_FIXED
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"VC_FIXED"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|DERIVATION_EXTENSION
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"DERIVATION_EXTENSION"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|DERIVATION_RESTRICTION
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"DERIVATION_RESTRICTION"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|DERIVATION_NONE
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"DERIVATION_NONE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|PROHIBITED_EXTENSION
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"PROHIBITED_EXTENSION"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|PROHIBITED_RESTRICTION
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"PROHIBITED_RESTRICTION"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|PROHIBITED_NONE
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"PROHIBITED_NONE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|COLLAPSE
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"COLLAPSE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|PRESERVE
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"PRESERVE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|REPLACE
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"REPLACE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|abstractProperty
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"abstract"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|name
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"name"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|type
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"type"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasScope
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasScope"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasConstraintType
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasConstraintType"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasFinal
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasFinal"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|constraint
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"constraint"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|maxOccurs
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"maxOccurs"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|minOccurs
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"minOccurs"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasProhibitedSubstitutions
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasProhibitedSubstitutions"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|required
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"required"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasParticle
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasParticle"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasCompositor
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasCompositor"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|value
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"value"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasEnumeration
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasEnumeration"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasWhitespace
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasWhitespace"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|base
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"base"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasAnnotation
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasAnnotation"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasPattern
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasPattern"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|hasAttributeUse
init|=
operator|new
name|UriRef
argument_list|(
name|NS
operator|+
literal|"hasAttributeUse"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|child
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://www.topbraid.org/2007/05/composite.owl#child"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UriRef
name|parent
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://www.topbraid.org/2007/05/composite.owl#parent"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

