begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|backend
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ReferenceConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ValueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
operator|.
name|PatternType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_comment
comment|/**  * Abstract super class for all Entityhub related {@link RDFBackend}  * implementations. This implements the whole {@link RDFBackend} interface by  * forwarding requests to the abstract methods<ul>  *<li> {@link #getRepresentation(String)}: Lookup of Representations by ID  *<li> {@link #query(FieldQuery)}: Used to query entities for property value  * pairs.  *</ul>  * In addition two further methods are defined to create {@link FieldQuery field queries} and  * o lookup the {@link ValueFactory} instance needed to create URIs and  * Literals.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBackend
implements|implements
name|RDFBackend
argument_list|<
name|Object
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_SELECT
init|=
literal|1000
decl_stmt|;
comment|//select a maximum of 1000 values per query
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_RESULTS
init|=
literal|100000
decl_stmt|;
comment|//select a maximum of 100k entities
specifier|private
specifier|static
specifier|final
name|int
name|LRU_CACHE_SIZE
init|=
literal|1000
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|lru
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
argument_list|(
name|LRU_CACHE_SIZE
operator|+
literal|1
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|LRU_CACHE_SIZE
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Locally add Representations.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|local
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * EnumMap to avoid instantiations of URIs for the limited set of      * DataTypes      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|DataTypeEnum
argument_list|,
name|URI
argument_list|>
name|dataTypeURIs
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|DataTypeEnum
argument_list|,
name|URI
argument_list|>
name|uris
init|=
operator|new
name|EnumMap
argument_list|<
name|DataTypeEnum
argument_list|,
name|URI
argument_list|>
argument_list|(
name|DataTypeEnum
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|DataTypeEnum
name|type
range|:
name|DataTypeEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|uris
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|type
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dataTypeURIs
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|uris
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YardBackend
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ValueConverterFactory
name|valueConverter
decl_stmt|;
specifier|public
name|AbstractBackend
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractBackend
parameter_list|(
name|ValueConverterFactory
name|valueConverter
parameter_list|)
block|{
if|if
condition|(
name|valueConverter
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|valueConverter
operator|=
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|valueConverter
operator|=
name|valueConverter
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|ValueFactory
name|getValueFactory
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Representation
name|getRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|EntityhubException
function_decl|;
specifier|protected
specifier|abstract
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|EntityhubException
function_decl|;
specifier|protected
specifier|abstract
name|FieldQuery
name|createQuery
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|supportsThreading
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ThreadPoolExecutor
name|getThreadPool
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|)
block|{
return|return
name|getValueFactory
argument_list|()
operator|.
name|createText
argument_list|(
name|content
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|,
name|Locale
name|language
parameter_list|,
name|URI
name|type
parameter_list|)
block|{
name|DataTypeEnum
name|dataType
init|=
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|DataTypeEnum
operator|.
name|getDataType
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|DataTypeEnum
operator|.
name|String
operator|==
name|dataType
operator|||
name|DataTypeEnum
operator|.
name|Text
operator|==
name|dataType
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Literals with a Lanugage MUST not have NULL,"
operator|+
name|DataTypeEnum
operator|.
name|String
operator|.
name|getShortName
argument_list|()
operator|+
literal|" or "
operator|+
name|DataTypeEnum
operator|.
name|Text
operator|.
name|getShortName
argument_list|()
operator|+
literal|" assigned as type!"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|getValueFactory
argument_list|()
operator|.
name|createText
argument_list|(
name|content
argument_list|,
name|language
operator|.
name|getLanguage
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|//create a typed literal
if|if
condition|(
name|dataType
operator|==
literal|null
condition|)
block|{
comment|//the parsed type is an unknown data type
return|return
name|content
return|;
comment|//return an string
block|}
else|else
block|{
name|Object
name|converted
init|=
name|valueConverter
operator|.
name|convert
argument_list|(
name|content
argument_list|,
name|dataType
operator|.
name|getUri
argument_list|()
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to convert content '{}' to dataType '{}'"
argument_list|,
name|converted
argument_list|,
name|dataType
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
else|else
block|{
return|return
name|converted
return|;
block|}
block|}
block|}
else|else
block|{
comment|//language is null and type is null
return|return
name|getValueFactory
argument_list|()
operator|.
name|createText
argument_list|(
name|content
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|createURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|getValueFactory
argument_list|()
operator|.
name|createReference
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Locale
name|getLiteralLanguage
parameter_list|(
name|Object
name|n
parameter_list|)
block|{
name|String
name|language
decl_stmt|;
try|try
block|{
name|language
operator|=
operator|(
operator|(
name|Text
operator|)
name|n
operator|)
operator|.
name|getLanguage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
comment|//TODO check if Locales should be create created like that
return|return
operator|new
name|Locale
argument_list|(
name|language
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getLiteralType
parameter_list|(
name|Object
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Set
argument_list|<
name|DataTypeEnum
argument_list|>
name|types
init|=
name|DataTypeEnum
operator|.
name|getPrimaryDataTypes
argument_list|(
name|n
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|dataTypeURIs
operator|.
name|get
argument_list|(
name|DataTypeEnum
operator|.
name|String
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|dataTypeURIs
operator|.
name|get
argument_list|(
name|types
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBlank
parameter_list|(
name|Object
name|n
parameter_list|)
block|{
comment|//The entityhub does not use blank nodes
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLiteral
parameter_list|(
name|Object
name|n
parameter_list|)
block|{
return|return
operator|!
operator|(
name|n
operator|instanceof
name|Reference
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isURI
parameter_list|(
name|Object
name|n
parameter_list|)
block|{
return|return
name|n
operator|instanceof
name|Reference
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|listObjects
parameter_list|(
name|Object
name|subject
parameter_list|,
name|Object
name|property
parameter_list|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|results
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
name|results
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//Here the assumption is the the LD Path program will request
comment|//a lot of properties for a very low numbers of Entities
comment|// .. there fore we keep here representations within an LRU cache
name|Representation
name|r
init|=
name|getCached
argument_list|(
name|subject
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|r
operator|=
name|getRepresentation
argument_list|(
name|subject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|toLRU
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|results
operator|=
name|ModelUtils
operator|.
name|asCollection
argument_list|(
name|r
operator|.
name|get
argument_list|(
name|property
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|properties
init|=
name|r
operator|.
name|getFieldNames
argument_list|()
init|;
name|properties
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|ModelUtils
operator|.
name|addToCollection
argument_list|(
name|r
operator|.
name|get
argument_list|(
name|properties
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|results
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|listSubjects
parameter_list|(
name|Object
name|property
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|FieldQuery
name|query
init|=
name|createQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isURI
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|property
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|object
decl_stmt|;
name|TextConstraint
name|constraint
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|getLanguage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|constraint
operator|=
operator|new
name|TextConstraint
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|PatternType
operator|.
name|none
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraint
operator|=
operator|new
name|TextConstraint
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|PatternType
operator|.
name|none
argument_list|,
literal|true
argument_list|,
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setConstraint
argument_list|(
name|property
operator|.
name|toString
argument_list|()
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|DataTypeEnum
argument_list|>
name|dataTypes
init|=
name|DataTypeEnum
operator|.
name|getPrimaryDataTypes
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataTypes
operator|==
literal|null
operator|||
name|dataTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|property
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ValueConstraint
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|dataTypes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataTypeEnum
name|type
range|:
name|dataTypes
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setConstraint
argument_list|(
name|property
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ValueConstraint
argument_list|(
name|object
argument_list|,
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|setLimit
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|DEFAULT_MAX_SELECT
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to query for resources with value '"
operator|+
name|object
operator|+
literal|"' on property '"
operator|+
name|property
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|references
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|references
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|//assuming that a single result is a likely case
name|references
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|(
name|Object
operator|)
name|getValueFactory
argument_list|()
operator|.
name|createReference
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|references
operator|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|result
range|:
name|results
control|)
block|{
name|references
operator|.
name|add
argument_list|(
name|getValueFactory
argument_list|()
operator|.
name|createReference
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>=
name|DEFAULT_MAX_SELECT
operator|&&
name|references
operator|.
name|size
argument_list|()
operator|<=
name|DEFAULT_MAX_RESULTS
operator|-
name|DEFAULT_MAX_SELECT
condition|)
block|{
name|offset
operator|=
name|offset
operator|+
name|results
operator|.
name|size
argument_list|()
expr_stmt|;
name|query
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
try|try
block|{
name|results
operator|=
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to query for resources with value '"
operator|+
name|object
operator|+
literal|"' on property '"
operator|+
name|property
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|result
range|:
name|results
control|)
block|{
name|references
operator|.
name|add
argument_list|(
name|getValueFactory
argument_list|()
operator|.
name|createReference
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|references
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|stringValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
comment|//The Entityhub requires that the toString method returns the lexical form
return|return
name|node
operator|==
literal|null
condition|?
literal|null
else|:
name|node
operator|instanceof
name|Text
condition|?
operator|(
operator|(
name|Text
operator|)
name|node
operator|)
operator|.
name|getText
argument_list|()
else|:
name|node
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|booleanValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Boolean
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BigInteger
name|integerValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Integer
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|intValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Int
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|longValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Long
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|floatValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Float
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|doubleValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Double
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BigDecimal
name|decimalValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Decimal
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|dateTimeValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|DateTime
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|dateValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Date
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|timeValue
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|DataTypeEnum
operator|.
name|Time
argument_list|,
name|node
argument_list|)
return|;
block|}
comment|/**      * Internal utility to save a lot of code lines for checking on<code>null</code>      * for conversions and throwing an {@link IllegalArgumentException} is so.      * @param<T> the generic return type      * @param type the dataType      * @param vf the valueFactory      * @param value the value to convert      * @return the converted value      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|convert
parameter_list|(
name|DataTypeEnum
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|T
name|converted
decl_stmt|;
name|Object
name|convertedObject
init|=
name|valueConverter
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|type
operator|.
name|getUri
argument_list|()
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|converted
operator|=
operator|(
name|T
operator|)
name|convertedObject
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|//this is something unexpected ... fail cleanly
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Convert value for Node'"
operator|+
name|value
operator|+
literal|"' has not the expected java type "
operator|+
name|type
operator|.
name|getJavaType
argument_list|()
operator|+
literal|"(for type '"
operator|+
name|type
operator|.
name|getShortName
argument_list|()
operator|+
literal|"') but '"
operator|+
name|convertedObject
operator|.
name|getClass
argument_list|()
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|converted
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to convert value '"
operator|+
name|value
operator|+
literal|"' to dataType '"
operator|+
name|type
operator|.
name|getShortName
argument_list|()
operator|+
literal|"' (java: "
operator|+
name|type
operator|.
name|getJavaType
argument_list|()
operator|+
literal|")!"
argument_list|)
throw|;
block|}
return|return
name|converted
return|;
block|}
comment|/*      * Utility methods for managing the local cache      */
comment|/**      * Adds an retrieved Representation to the LRU cache      * @param r      */
specifier|private
name|void
name|toLRU
parameter_list|(
name|Representation
name|r
parameter_list|)
block|{
name|lru
operator|.
name|put
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a Representation already available in-memory to this RDFBackend.      * This allows to prevent re-loading of Representations while executing      * LDPath programs.<p>      * Usually this is used if using Representations selected by a Query as      * context for LDPath program executions.      * @param r      */
specifier|public
name|void
name|addLocal
parameter_list|(
name|Representation
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|local
operator|.
name|put
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|lru
operator|.
name|remove
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//else ignore
block|}
comment|/**      * Removes a Representation form the local cache      * @param id the ID of the represetnation to remove      */
specifier|public
name|void
name|removeLocal
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|local
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|lru
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Tries to get an {@link Representation} form {@link #local} or {@link #lru}      * @param id the ID      * @return the {@link Representation} or<code>null</code> if not cached      */
specifier|private
name|Representation
name|getCached
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Representation
name|r
init|=
name|local
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|r
operator|==
literal|null
condition|?
name|lru
operator|.
name|get
argument_list|(
name|id
argument_list|)
else|:
name|r
return|;
block|}
block|}
end_class

end_unit

