begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|standalone
operator|.
name|StandaloneEmbeddedSolrServerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|YardBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|LDPathTestBase
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LDPathTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The SolrYard used for the tests      */
specifier|protected
specifier|static
name|SolrYard
name|yard
decl_stmt|;
specifier|protected
specifier|static
name|YardBackend
name|backend
decl_stmt|;
comment|/**      * The SolrDirectoryManager also tested within this unit test      */
specifier|public
specifier|static
specifier|final
name|String
name|TEST_YARD_ID
init|=
literal|"dbpedia"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_SOLR_CORE_NAME
init|=
literal|"dbpedia"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_SOLR_CORE_CONFIGURATION
init|=
literal|"dbpedia_43k"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_INDEX_REL_PATH
init|=
name|File
operator|.
name|separatorChar
operator|+
literal|"target"
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|ManagedSolrServer
operator|.
name|DEFAULT_SOLR_DATA_DIR
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DBPEDIA
init|=
literal|"http://dbpedia.org/resource/"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get the working directory
comment|// use property substitution to test this feature!
name|String
name|prefix
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|==
literal|null
condition|?
literal|"."
else|:
literal|"${basedir}"
decl_stmt|;
name|String
name|solrServerDir
init|=
name|prefix
operator|+
name|TEST_INDEX_REL_PATH
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test Solr Server Directory: {}"
argument_list|,
name|solrServerDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ManagedSolrServer
operator|.
name|MANAGED_SOLR_DIR_PROPERTY
argument_list|,
name|solrServerDir
argument_list|)
expr_stmt|;
name|SolrYardConfig
name|config
init|=
operator|new
name|SolrYardConfig
argument_list|(
name|TEST_YARD_ID
argument_list|,
name|TEST_SOLR_CORE_NAME
argument_list|)
decl_stmt|;
name|config
operator|.
name|setAllowInitialisation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|setIndexConfigurationName
argument_list|(
name|TEST_SOLR_CORE_CONFIGURATION
argument_list|)
expr_stmt|;
comment|//the dbpedia default data
name|config
operator|.
name|setAllowInitialisation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//init from datafile provider
name|config
operator|.
name|setName
argument_list|(
literal|"DBpedia.org default data"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDescription
argument_list|(
literal|"Data used for the LDPath setup"
argument_list|)
expr_stmt|;
comment|// create the Yard used for the tests
name|IndexReference
name|solrIndexRef
init|=
name|IndexReference
operator|.
name|parse
argument_list|(
name|config
operator|.
name|getSolrServerLocation
argument_list|()
argument_list|)
decl_stmt|;
name|SolrServer
name|server
init|=
name|StandaloneEmbeddedSolrServerProvider
operator|.
name|getInstance
argument_list|()
operator|.
name|getSolrServer
argument_list|(
name|solrIndexRef
argument_list|,
name|config
operator|.
name|getIndexConfigurationName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to initialise SolrServer for testing"
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|yard
operator|=
operator|new
name|SolrYard
argument_list|(
name|server
argument_list|,
name|config
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|backend
operator|=
operator|new
name|YardBackend
argument_list|(
name|yard
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|yard
operator|.
name|close
argument_list|()
expr_stmt|;
name|yard
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|Collection
argument_list|<
name|String
argument_list|>
name|checkContexts
parameter_list|()
function_decl|;
comment|/**      * Tests that the yard is setup correctly by checking for the      * {@link Representation}s of the ids returned by {@link #checkContexts()}.      *<p>      * This methods should make is more easy to detect if a failure of a test      * is because of a wrong setup of the Yard.       * @throws Exception       */
annotation|@
name|Test
specifier|public
name|void
name|testSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"check Setup"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|context
range|:
name|checkContexts
argument_list|()
control|)
block|{
name|Representation
name|rep
init|=
name|yard
operator|.
name|getRepresentation
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> check Entity {}"
argument_list|,
name|rep
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rep
operator|.
name|getId
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Data for Entity {}: \n {}"
argument_list|,
name|rep
operator|.
name|getId
argument_list|()
argument_list|,
name|ModelUtils
operator|.
name|getRepresentationInfo
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"   ... check completed"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility method that checks the results of an LDPath execution against       * a map whit expected results       * @param result the results of the execution      * @param expected the expected results      * @throws IllegalStateException if the parsed expected results are<code>null</code>      */
specifier|protected
specifier|final
name|void
name|assertLDPathResult
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The expected LDPath execution results MUST NOT be NULL. This"
operator|+
literal|"indicated an ERROR in the implementation of the Unit Test and NOT in the tested Component!"
argument_list|)
throw|;
block|}
name|assertNotNull
argument_list|(
literal|"The result of the LDPath execution MUST NOT be NULL "
operator|+
literal|"(entity: %s)"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedClone
init|=
name|cloneExpected
argument_list|(
name|expected
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|result
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"{}: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|expectedValues
init|=
name|expectedClone
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Current field '"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"' is not expected (expected: "
operator|+
name|expectedClone
operator|.
name|keySet
argument_list|()
operator|+
literal|"!"
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|removeAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing expected Result '"
operator|+
name|expectedValues
operator|+
literal|"' (present: '"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"'"
argument_list|,
name|expectedValues
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing expected Field '"
operator|+
name|expectedClone
operator|.
name|keySet
argument_list|()
operator|+
literal|"' (present: '"
operator|+
name|result
operator|.
name|keySet
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|expectedClone
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a clone of expected results. This is necessary because assertion of      * results does remove found fields and results and checks at the end for      * empty collections of expected results of the field and an empty map with      * the expected fields.      * @param expected the expected results      * @return the clone      */
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|cloneExpected
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|expected
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedClone
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedEntries
range|:
name|expected
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|expectedClone
operator|.
name|put
argument_list|(
name|expectedEntries
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|(
name|expectedEntries
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expectedClone
return|;
block|}
block|}
end_class

end_unit

