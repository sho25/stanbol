begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|LDPathUtils
operator|.
name|getReader
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|impl
operator|.
name|LDPathTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|transformer
operator|.
name|ValueConverterTransformerAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_class
specifier|public
class|class
name|EntityhubLDPathTest
extends|extends
name|LDPathTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityhubLDPathTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ValueFactory
name|vf
init|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTEXT_LONDON
init|=
name|DBPEDIA
operator|+
literal|"London"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATA_TYPE_TEST_PROGRAM
decl_stmt|;
static|static
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"@prefix eh :<http://www.iks-project.eu/ontology/rick/model/>;"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"@prefix dct :<http://purl.org/dc/terms/>;"
argument_list|)
expr_stmt|;
comment|//this test that even when selecting strings the language is preserved
name|builder
operator|.
name|append
argument_list|(
literal|"name = rdfs:label :: xsd:string;"
argument_list|)
expr_stmt|;
comment|//this tests support for natural language texts as used by the entityhub
name|builder
operator|.
name|append
argument_list|(
literal|"comment = rdfs:comment :: eh:text;"
argument_list|)
expr_stmt|;
comment|//this tests that Reference is used for URIs
name|builder
operator|.
name|append
argument_list|(
literal|"categories = dct:subject :: xsd:anyURI;"
argument_list|)
expr_stmt|;
comment|//this tests support for Reference as used by the entityhub
name|builder
operator|.
name|append
argument_list|(
literal|"type = rdf:type :: eh:ref;"
argument_list|)
expr_stmt|;
name|DATA_TYPE_TEST_PROGRAM
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/**      * This expects {@link Text} and {@link Reference} instances as results      * of the execution.      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|EXPECTED_RESULTS_LONDON
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"London"
argument_list|,
literal|"en"
argument_list|)
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
literal|"London"
argument_list|,
literal|"de"
argument_list|)
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
literal|"Londres"
argument_list|,
literal|"pt"
argument_list|)
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
literal|"Londra"
argument_list|,
literal|"tr"
argument_list|)
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
literal|"Лондон"
argument_list|,
literal|"ru"
argument_list|)
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
literal|"伦敦"
argument_list|,
literal|"zh"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"comment"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"London is the capital of England and the United Kingdom, "
operator|+
literal|"the largest metropolitan area in the United Kingdom and the "
operator|+
literal|"largest urban zone in the European Union by most measures. "
operator|+
literal|"London has been a major settlement for two millennia, its "
operator|+
literal|"history going back to its founding by the Romans, who called "
operator|+
literal|"it Londinium. London's core, the ancient City of London, "
operator|+
literal|"largely retains its square-mile mediaeval boundaries."
argument_list|,
literal|"en"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: LDPath uses String to represent anyUri
name|expected
operator|.
name|put
argument_list|(
literal|"categories"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Reference
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:London"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:British_capitals"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:Populated_places_established_in_the_1st_century"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:Staple_ports"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:Articles_including_recorded_pronunciations_%28UK_English%29"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:Capitals_in_Europe"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:Host_cities_of_the_Commonwealth_Games"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:Host_cities_of_the_Summer_Olympic_Games"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/resource/Category:Port_cities_and_towns_in_the_United_Kingdom"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Reference
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://www.w3.org/2002/07/owl#Thing"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://www.opengis.net/gml/_Feature"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/ontology/Settlement"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/ontology/PopulatedPlace"
argument_list|)
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://dbpedia.org/ontology/Place"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EXPECTED_RESULTS_LONDON
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|checkContexts
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|CONTEXT_LONDON
argument_list|)
return|;
block|}
comment|/**      * Tests that the {@link LDPathUtils#createAndInitLDPath(RDFBackend, ValueFactory)}      * correctly registers the {@link ValueConverterTransformerAdapter} for      * {@link DataTypeEnum#Reference}, {@link DataTypeEnum#Text},      * {@link DataTypeEnum#AnyUri} and {@link DataTypeEnum#String}.      */
annotation|@
name|Test
specifier|public
name|void
name|testTransformers
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityhubLDPath
name|ldPath
init|=
operator|new
name|EntityhubLDPath
argument_list|(
name|backend
argument_list|)
decl_stmt|;
name|Program
argument_list|<
name|Object
argument_list|>
name|program
init|=
name|ldPath
operator|.
name|parseProgram
argument_list|(
name|getReader
argument_list|(
name|DATA_TYPE_TEST_PROGRAM
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The Program MUST NOT be NULL"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|program
operator|.
name|execute
argument_list|(
name|backend
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
name|CONTEXT_LONDON
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Results for {}:\n{}"
argument_list|,
name|CONTEXT_LONDON
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Assert LDPath Result for {}:"
argument_list|,
name|CONTEXT_LONDON
argument_list|)
expr_stmt|;
name|assertLDPathResult
argument_list|(
name|result
argument_list|,
name|EXPECTED_RESULTS_LONDON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReprentationMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityhubLDPath
name|ldPath
init|=
operator|new
name|EntityhubLDPath
argument_list|(
name|backend
argument_list|)
decl_stmt|;
name|Program
argument_list|<
name|Object
argument_list|>
name|program
init|=
name|ldPath
operator|.
name|parseProgram
argument_list|(
name|getReader
argument_list|(
name|DATA_TYPE_TEST_PROGRAM
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The Program MUST NOT be NULL"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Representation
name|result
init|=
name|ldPath
operator|.
name|execute
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|CONTEXT_LONDON
argument_list|)
argument_list|,
name|program
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The id of the Representation '"
operator|+
name|result
operator|.
name|getId
argument_list|()
operator|+
literal|"' is not the same as the parsed Context '"
operator|+
name|CONTEXT_LONDON
operator|+
literal|"'!"
argument_list|,
name|CONTEXT_LONDON
argument_list|,
name|result
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|entryIt
init|=
name|cloneExpected
argument_list|(
name|EXPECTED_RESULTS_LONDON
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
init|=
name|entryIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|valueIt
init|=
name|result
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The result is missing the expected field '"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|valueIt
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|ModelUtils
operator|.
name|asCollection
argument_list|(
name|valueIt
argument_list|)
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|removeAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The following expected values "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"' are missing (present: "
operator|+
name|values
operator|+
literal|")!"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

