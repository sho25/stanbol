begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|site
operator|.
name|managed
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|site
operator|.
name|SiteConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ManagedEntityState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|MappingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ManagedSiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedSiteConfigurationImpl
extends|extends
name|SiteConfigurationImpl
implements|implements
name|ManagedSiteConfiguration
block|{
specifier|public
name|ManagedSiteConfigurationImpl
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//set the defaults for managed sites to active and confirmed
if|if
condition|(
name|getDefaultManagedEntityState
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setDefaultManagedEntityState
argument_list|(
name|ManagedEntityState
operator|.
name|active
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDefaultMappedEntityState
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setDefaultMappedEntityState
argument_list|(
name|MappingState
operator|.
name|confirmed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getYardId
parameter_list|()
block|{
name|Object
name|id
init|=
name|config
operator|.
name|get
argument_list|(
name|YARD_ID
argument_list|)
decl_stmt|;
return|return
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|getId
argument_list|()
else|:
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *       * @param id      * @throws UnsupportedOperationException in case this configuration is {@link #readonly}      * @see #getCacheId()      */
specifier|public
specifier|final
name|void
name|getYardId
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|YARD_ID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|YARD_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

