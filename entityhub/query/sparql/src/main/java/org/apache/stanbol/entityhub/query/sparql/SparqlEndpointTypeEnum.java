begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
package|;
end_package

begin_enum
specifier|public
enum|enum
name|SparqlEndpointTypeEnum
block|{
name|Standard
block|,
name|Virtuoso
argument_list|(
literal|true
argument_list|)
block|,
name|LARQ
block|,
name|ARQ
block|,
name|Sesame
argument_list|(
literal|true
argument_list|)
block|;
name|boolean
name|supportsSparql11SubSelect
decl_stmt|;
comment|/**      * Default feature set (SPARQL 1.0)      */
name|SparqlEndpointTypeEnum
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allows to enable SPARQL 1.1 features      *       * @param supportsSparql11SubSelect      */
name|SparqlEndpointTypeEnum
parameter_list|(
name|boolean
name|supportsSparql11SubSelect
parameter_list|)
block|{
name|this
operator|.
name|supportsSparql11SubSelect
operator|=
name|supportsSparql11SubSelect
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|supportsSubSelect
parameter_list|()
block|{
return|return
name|supportsSparql11SubSelect
return|;
block|}
block|}
end_enum

end_unit

