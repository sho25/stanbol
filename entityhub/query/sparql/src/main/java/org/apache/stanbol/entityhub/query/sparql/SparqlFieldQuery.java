begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|FieldQueryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_comment
comment|/**  * Adds the "selected field" to "SPARQL variable name" mapping  *   * @author Rupert Westenthaler  *   */
end_comment

begin_class
specifier|public
class|class
name|SparqlFieldQuery
extends|extends
name|FieldQueryImpl
implements|implements
name|FieldQuery
implements|,
name|Cloneable
block|{
comment|/**      * String used as prefix for variables generated for fields      */
specifier|protected
specifier|static
specifier|final
name|String
name|FIELD_VAR_PREFIX
init|=
literal|"v_"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_VAR_NAME
init|=
literal|"id"
decl_stmt|;
specifier|protected
name|int
name|varNum
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field2VarMappings
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|unmodField2VarMappings
decl_stmt|;
specifier|protected
name|SparqlEndpointTypeEnum
name|endpointType
decl_stmt|;
specifier|protected
name|SparqlFieldQuery
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SparqlFieldQuery
parameter_list|(
name|SparqlEndpointTypeEnum
name|endpointType
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|endpointType
operator|=
name|endpointType
operator|!=
literal|null
condition|?
name|endpointType
else|:
name|SparqlEndpointTypeEnum
operator|.
name|Standard
expr_stmt|;
name|varNum
operator|=
literal|0
expr_stmt|;
name|field2VarMappings
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|unmodField2VarMappings
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|field2VarMappings
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|SparqlEndpointTypeEnum
name|getSparqlEndpointType
parameter_list|()
block|{
return|return
name|endpointType
return|;
block|}
specifier|public
specifier|final
name|void
name|setSparqlEndpointType
parameter_list|(
name|SparqlEndpointTypeEnum
name|endpointType
parameter_list|)
block|{
name|this
operator|.
name|endpointType
operator|=
name|endpointType
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.entityhub.core.query.FieldQueryImpl#addSelectedField (java.lang.String)      */
annotation|@
name|Override
specifier|public
name|void
name|addSelectedField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
operator|.
name|addSelectedField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field2VarMappings
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|getFieldVar
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.entityhub.core.query.FieldQueryImpl#addSelectedFields (java.util.Collection)      */
annotation|@
name|Override
specifier|public
name|void
name|addSelectedFields
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|super
operator|.
name|addSelectedFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|field2VarMappings
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|getFieldVar
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.entityhub.core.query.FieldQueryImpl#removeSelectedField (java.lang.String)      */
annotation|@
name|Override
specifier|public
name|void
name|removeSelectedField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
operator|.
name|removeSelectedField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field2VarMappings
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.entityhub.core.query.FieldQueryImpl#removeSelectedFields (java.util.Collection)      */
annotation|@
name|Override
specifier|public
name|void
name|removeSelectedFields
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|super
operator|.
name|removeSelectedFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|field2VarMappings
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the variable name for a selected field      *       * @param field      *            the selected field      * @return the variable name or<code>null</code> if the parsed field is not selected.      */
specifier|public
name|String
name|getVariableName
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|field2VarMappings
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**      * Getter for the unmodifiable field name to variable name mapping.      *       * @return      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFieldVariableMappings
parameter_list|()
block|{
return|return
name|unmodField2VarMappings
return|;
block|}
specifier|private
name|String
name|getFieldVar
parameter_list|()
block|{
name|varNum
operator|++
expr_stmt|;
return|return
name|FIELD_VAR_PREFIX
operator|+
name|varNum
return|;
block|}
specifier|public
name|String
name|getRootVariableName
parameter_list|()
block|{
return|return
name|ROOT_VAR_NAME
return|;
block|}
comment|/**      * Clones the query (including the field to var name mapping)      */
annotation|@
name|Override
specifier|public
name|SparqlFieldQuery
name|clone
parameter_list|()
block|{
return|return
name|clone
argument_list|(
operator|new
name|SparqlFieldQuery
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * can be used by sub-classes to implement {@link #clone()}         * @param emptyClone an empty instance of the sub class      * @return the parsed instance set will the state of this class. NOTE:      * state of sub-classes need still to be set      */
specifier|protected
specifier|final
parameter_list|<
name|T
extends|extends
name|SparqlFieldQuery
parameter_list|>
name|T
name|clone
parameter_list|(
name|T
name|emptyClone
parameter_list|)
block|{
name|T
name|clone
init|=
name|super
operator|.
name|copyTo
argument_list|(
name|emptyClone
argument_list|)
decl_stmt|;
comment|// Note: this uses the public API. However the field->ar mapping might
comment|// still
comment|// be different if any removeSelectedField(..) method was used on this
comment|// instance. Because of that manually set the map and the value of the
comment|// int.
comment|// clone.field2VarMappings.clear(); //clear is not necessary, because
comment|// the keys are equals!
name|clone
operator|.
name|field2VarMappings
operator|.
name|putAll
argument_list|(
name|field2VarMappings
argument_list|)
expr_stmt|;
name|clone
operator|.
name|varNum
operator|=
name|varNum
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|field2VarMappings
operator|.
name|hashCode
argument_list|()
operator|+
name|varNum
operator|+
name|endpointType
operator|.
name|ordinal
argument_list|()
return|;
block|}
comment|/**      * Removes also the field to var name mappings      *       * @see org.apache.stanbol.entityhub.core.query.FieldQueryImpl#removeAllSelectedFields()      */
annotation|@
name|Override
specifier|public
name|void
name|removeAllSelectedFields
parameter_list|()
block|{
name|super
operator|.
name|removeAllSelectedFields
argument_list|()
expr_stmt|;
name|field2VarMappings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|varNum
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|&&
name|obj
operator|instanceof
name|SparqlFieldQuery
operator|&&
operator|(
operator|(
name|SparqlFieldQuery
operator|)
name|obj
operator|)
operator|.
name|field2VarMappings
operator|.
name|equals
argument_list|(
name|field2VarMappings
argument_list|)
operator|&&
operator|(
operator|(
name|SparqlFieldQuery
operator|)
name|obj
operator|)
operator|.
name|varNum
operator|==
name|varNum
operator|&&
operator|(
operator|(
name|SparqlFieldQuery
operator|)
name|obj
operator|)
operator|.
name|endpointType
operator|==
name|endpointType
return|;
block|}
comment|/**      * Getter for the SPARQL SELECT representation of this FieldQuery      *       * @return the SPARQL SELECT query      */
specifier|public
name|String
name|toSparqlSelect
parameter_list|(
name|boolean
name|includeFields
parameter_list|)
block|{
return|return
name|SparqlQueryUtils
operator|.
name|createSparqlSelectQuery
argument_list|(
name|this
argument_list|,
name|includeFields
argument_list|,
name|endpointType
argument_list|)
return|;
block|}
comment|/**      * Getter for the SPARQL CONSTRUCT representation of this FieldQuery      *       * @return the SPARQL CONSTRUCT query      */
specifier|public
name|String
name|toSparqlConstruct
parameter_list|()
block|{
return|return
name|SparqlQueryUtils
operator|.
name|createSparqlConstructQuery
argument_list|(
name|this
argument_list|,
name|endpointType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" field->variable mappings: "
operator|+
name|field2VarMappings
return|;
block|}
specifier|public
name|SparqlFieldQuery
name|createFieldQuery
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

