begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlEndpointTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_comment
comment|/**  * Moved to {@link org.apache.stanbol.entityhub.query.sparql.SparqlFieldQuery}  *   * @author Rupert Westenthaler  * @see org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
specifier|final
class|class
name|SparqlQueryUtils
block|{
comment|/**      * Restrict instantiation      */
specifier|private
name|SparqlQueryUtils
parameter_list|()
block|{}
comment|/**      * {@link IRI} constant for {@link RdfResourceEnum#queryResult}      *       * @see ClerezzaQueryUtils#FIELD_QUERY_RESULT      */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|IRI
name|FIELD_QUERY_RESULT
init|=
name|ClerezzaQueryUtils
operator|.
name|FIELD_QUERY_RESULT
decl_stmt|;
comment|/**      * {@link IRI} constant for {@link RdfResourceEnum#QueryResultSet}      *       * @see ClerezzaQueryUtils#FIELD_QUERY_RESULT_SET      */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|IRI
name|FIELD_QUERY_RESULT_SET
init|=
operator|new
name|IRI
argument_list|(
name|RdfResourceEnum
operator|.
name|QueryResultSet
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Use {@link org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils}      * and {@link SparqlEndpointTypeEnum} instead      *      * @see SparqlEndpointTypeEnum      */
annotation|@
name|Deprecated
specifier|public
specifier|static
enum|enum
name|EndpointTypeEnum
block|{
name|Standard
block|,
name|Virtuoso
argument_list|(
literal|true
argument_list|)
block|,
name|LARQ
block|,
name|ARQ
block|,
comment|/**          * Added to keep compatibility to {@link SparqlEndpointTypeEnum#Sesame}          */
name|Sesame
argument_list|(
literal|true
argument_list|)
block|;
name|boolean
name|supportsSparql11SubSelect
decl_stmt|;
comment|/**          * Default feature set (SPARQL 1.0)          */
name|EndpointTypeEnum
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * Allows to enable SPARQL 1.1 features          *           * @param supportsSparql11SubSelect          */
name|EndpointTypeEnum
parameter_list|(
name|boolean
name|supportsSparql11SubSelect
parameter_list|)
block|{
name|this
operator|.
name|supportsSparql11SubSelect
operator|=
name|supportsSparql11SubSelect
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|supportsSubSelect
parameter_list|()
block|{
return|return
name|supportsSparql11SubSelect
return|;
block|}
block|}
comment|/**      * Creates a SPARWL CONSTRUCT query that creates triples for all the selected fields of representations in      * the result set.      *<p>      * In addition the query also constructs<code>entityhub-query:ieldQueryResultSet      * entityhub-query:fieldQueryResult ?representation</code> triples that can be used to create an iterator      * over the results of the query      *       * @param query      *            the field query      * @param endpointType      *            The type of the Endpoint (used to write optimized queries for endpoint type specific      *            extensions      * @param additionalFields      *            This allows to parse additional fields that are optionally selected in the data set and      *            added to the CONSTRUCT part of the query      * @return the SPARQL CONSTRUCT Query      * @see org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils#createSparqlConstructQuery(org.apache.stanbol.entityhub.query.sparql.SparqlFieldQuery, SparqlEndpointTypeEnum, String...)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|createSparqlConstructQuery
parameter_list|(
name|SparqlFieldQuery
name|query
parameter_list|,
name|EndpointTypeEnum
name|endpointType
parameter_list|,
name|String
modifier|...
name|additionalFields
parameter_list|)
block|{
name|SparqlEndpointTypeEnum
name|type
init|=
name|endpointType
operator|==
literal|null
condition|?
literal|null
else|:
name|SparqlEndpointTypeEnum
operator|.
name|valueOf
argument_list|(
name|endpointType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlQueryUtils
operator|.
name|createSparqlConstructQuery
argument_list|(
name|query
argument_list|,
name|type
argument_list|,
name|additionalFields
argument_list|)
return|;
block|}
comment|/**      * Creates a SPARWL CONSTRUCT query that creates triples for all the selected fields of representations in      * the result set.      *<p>      * In addition the query also constructs<code>entityhub-query:ieldQueryResultSet      * entityhub-query:fieldQueryResult ?representation</code> triples that can be used to create an iterator      * over the results of the query      *       * @param query      *            the field query      * @param limit      *            if a value> 0 is parsed, than this value overwrites the limit defined by the query.      * @param endpointType      *            The type of the Endpoint (used to write optimized queries for endpoint type specific      *            extensions      * @param additionalFields      *            This allows to parse additional fields that are optionally selected in the data set and      *            added to the CONSTRUCT part of the query      * @return the SPARQL CONSTRUCT Query      * @see org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils#createSparqlConstructQuery(org.apache.stanbol.entityhub.query.sparql.SparqlFieldQuery, int, SparqlEndpointTypeEnum, String...)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|createSparqlConstructQuery
parameter_list|(
name|SparqlFieldQuery
name|query
parameter_list|,
name|int
name|limit
parameter_list|,
name|EndpointTypeEnum
name|endpointType
parameter_list|,
name|String
modifier|...
name|additionalFields
parameter_list|)
block|{
name|SparqlEndpointTypeEnum
name|type
init|=
name|endpointType
operator|==
literal|null
condition|?
literal|null
else|:
name|SparqlEndpointTypeEnum
operator|.
name|valueOf
argument_list|(
name|endpointType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlQueryUtils
operator|.
name|createSparqlConstructQuery
argument_list|(
name|query
argument_list|,
name|limit
argument_list|,
name|type
argument_list|,
name|additionalFields
argument_list|)
return|;
block|}
comment|/**      * Creates the SPARQL representation of the parse field query.      *       * @param query      *            A field query implementation that additionally supports a field to variable mapping      * @param endpointType      *            The type of the Endpoint (used to write optimized queries for endpoint type specific      *            extensions      * @return the SPARQL query as String      * @see org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils#createSparqlSelectQuery(org.apache.stanbol.entityhub.query.sparql.SparqlFieldQuery, SparqlEndpointTypeEnum)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|createSparqlSelectQuery
parameter_list|(
name|SparqlFieldQuery
name|query
parameter_list|,
name|EndpointTypeEnum
name|endpointType
parameter_list|)
block|{
name|SparqlEndpointTypeEnum
name|type
init|=
name|endpointType
operator|==
literal|null
condition|?
literal|null
else|:
name|SparqlEndpointTypeEnum
operator|.
name|valueOf
argument_list|(
name|endpointType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlQueryUtils
operator|.
name|createSparqlSelectQuery
argument_list|(
name|query
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Creates the SPARQL representation of the parse field query.      *       * @param query      *            A field query implementation that additionally supports a field to variable mapping      * @param limit      *            If> 0, than the limit parsed by the query is overriden by this value      * @param endpointType      *            The type of the Endpoint (used to write optimized queries for endpoint type specific      *            extensions      * @return the SPARQL query as String      * @see org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils#createSparqlSelectQuery(org.apache.stanbol.entityhub.query.sparql.SparqlFieldQuery, int, SparqlEndpointTypeEnum)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|createSparqlSelectQuery
parameter_list|(
name|SparqlFieldQuery
name|query
parameter_list|,
name|int
name|limit
parameter_list|,
name|EndpointTypeEnum
name|endpointType
parameter_list|)
block|{
name|SparqlEndpointTypeEnum
name|type
init|=
name|endpointType
operator|==
literal|null
condition|?
literal|null
else|:
name|SparqlEndpointTypeEnum
operator|.
name|valueOf
argument_list|(
name|endpointType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlQueryUtils
operator|.
name|createSparqlSelectQuery
argument_list|(
name|query
argument_list|,
name|limit
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Creates the SPARQL representation of the parse field query.      *       * @param query      *            A field query implementation that additionally supports a field to variable mapping      * @param includeFields      *            if<code>false</code> only the root is selected (selected fields are ignored)      * @param endpointType      *            The type of the Endpoint (used to write optimized queries for endpoint type specific      *            extensions      * @return the SPARQL query as String      * @see org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils#createSparqlSelectQuery(org.apache.stanbol.entityhub.query.sparql.SparqlFieldQuery, boolean, SparqlEndpointTypeEnum)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|createSparqlSelectQuery
parameter_list|(
name|SparqlFieldQuery
name|query
parameter_list|,
name|boolean
name|includeFields
parameter_list|,
name|EndpointTypeEnum
name|endpointType
parameter_list|)
block|{
name|SparqlEndpointTypeEnum
name|type
init|=
name|endpointType
operator|==
literal|null
condition|?
literal|null
else|:
name|SparqlEndpointTypeEnum
operator|.
name|valueOf
argument_list|(
name|endpointType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlQueryUtils
operator|.
name|createSparqlSelectQuery
argument_list|(
name|query
argument_list|,
name|includeFields
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Creates the SPARQL representation of the parse field query.      *       * @param query      *            A field query implementation that additionally supports a field to variable mapping      * @param includeFields      *            if<code>false</code> only the root is selected (selected fields are ignored)      * @param limit      *            if> 0 than the limit defined by the query is overridden by the parsed value      * @param endpointType      *            The type of the Endpoint (used to write optimized queries for endpoint type specific      *            extensions      * @return the SPARQL query as String      * @see org.apache.stanbol.entityhub.query.sparql.SparqlQueryUtils#createSparqlSelectQuery(org.apache.stanbol.entityhub.query.sparql.SparqlFieldQuery, boolean, int, SparqlEndpointTypeEnum)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|createSparqlSelectQuery
parameter_list|(
name|SparqlFieldQuery
name|query
parameter_list|,
name|boolean
name|includeFields
parameter_list|,
name|int
name|limit
parameter_list|,
name|EndpointTypeEnum
name|endpointType
parameter_list|)
block|{
name|SparqlEndpointTypeEnum
name|type
init|=
name|endpointType
operator|==
literal|null
condition|?
literal|null
else|:
name|SparqlEndpointTypeEnum
operator|.
name|valueOf
argument_list|(
name|endpointType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlQueryUtils
operator|.
name|createSparqlSelectQuery
argument_list|(
name|query
argument_list|,
name|includeFields
argument_list|,
name|limit
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * @param query      * @param resultGraph      * @return      * @see ClerezzaQueryUtils#parseQueryResultsFromGraph(Graph)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Iterator
argument_list|<
name|RdfRepresentation
argument_list|>
name|parseQueryResultsFromGraph
parameter_list|(
specifier|final
name|Graph
name|resultGraph
parameter_list|)
block|{
return|return
name|ClerezzaQueryUtils
operator|.
name|parseQueryResultsFromGraph
argument_list|(
name|resultGraph
argument_list|)
return|;
block|}
block|}
end_class

end_unit

