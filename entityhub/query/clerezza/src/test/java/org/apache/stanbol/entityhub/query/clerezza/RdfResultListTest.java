begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|FieldQueryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RdfResultListTest
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RdfResultListTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Providing a sorted Iteration over query results stored in an RDF      * graph is not something trivial. Therefore this test      */
annotation|@
name|Test
specifier|public
name|void
name|testRdfResultSorting
parameter_list|()
block|{
name|SortedMap
argument_list|<
name|Double
argument_list|,
name|RdfRepresentation
argument_list|>
name|sorted
init|=
operator|new
name|TreeMap
argument_list|<
name|Double
argument_list|,
name|RdfRepresentation
argument_list|>
argument_list|()
decl_stmt|;
name|MGraph
name|resultGraph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
name|RdfValueFactory
name|vf
init|=
operator|new
name|RdfValueFactory
argument_list|(
name|resultGraph
argument_list|)
decl_stmt|;
name|UriRef
name|resultListNode
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|QueryResultSet
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|resultProperty
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|queryResult
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Double
name|rank
decl_stmt|;
do|do
block|{
comment|//avoid duplicate keys
name|rank
operator|=
name|Math
operator|.
name|random
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|sorted
operator|.
name|containsKey
argument_list|(
name|rank
argument_list|)
condition|)
do|;
name|RdfRepresentation
name|r
init|=
name|vf
operator|.
name|createRepresentation
argument_list|(
literal|"urn:sortTest:rep."
operator|+
name|i
argument_list|)
decl_stmt|;
comment|//link the representation with the query result set
name|resultGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|resultListNode
argument_list|,
name|resultProperty
argument_list|,
name|r
operator|.
name|getNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|set
argument_list|(
name|RdfResourceEnum
operator|.
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|,
name|rank
argument_list|)
expr_stmt|;
name|sorted
operator|.
name|put
argument_list|(
name|rank
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|RdfQueryResultList
name|resultList
init|=
operator|new
name|RdfQueryResultList
argument_list|(
operator|new
name|FieldQueryImpl
argument_list|()
argument_list|,
name|resultGraph
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"---DEBUG Sorting ---"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Representation
argument_list|>
name|it
init|=
name|resultList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Representation
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{}: {}"
argument_list|,
name|r
operator|.
name|getFirst
argument_list|(
name|RdfResourceEnum
operator|.
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"---ASSERT Sorting ---"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Representation
argument_list|>
name|it
init|=
name|resultList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Representation
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|lastkey
init|=
name|sorted
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|Representation
name|last
init|=
name|sorted
operator|.
name|get
argument_list|(
name|lastkey
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"score: "
operator|+
name|r
operator|.
name|getFirst
argument_list|(
name|RdfResourceEnum
operator|.
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|)
operator|+
literal|" of Representation "
operator|+
name|r
operator|.
name|getId
argument_list|()
operator|+
literal|" is not as expected "
operator|+
name|last
operator|.
name|getFirst
argument_list|(
name|RdfResourceEnum
operator|.
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|)
operator|+
literal|" of Representation "
operator|+
name|last
operator|.
name|getId
argument_list|()
operator|+
literal|"!"
argument_list|,
name|r
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|sorted
operator|.
name|remove
argument_list|(
name|lastkey
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sorted
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

