begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|web
operator|.
name|writer
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|clerezza
operator|.
name|RdfQueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|web
operator|.
name|ModelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|web
operator|.
name|fieldquery
operator|.
name|FieldQueryToJsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ClerezzaModelWriter
implements|implements
name|ModelWriter
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClerezzaModelWriter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * {@link MediaType} instance for {@link SupportedFormat#TURTLE}      */
specifier|public
specifier|static
specifier|final
name|MediaType
name|TURTLE_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
decl_stmt|;
comment|/**      * {@link MediaType} instance for<code>application/ld+json</code>      */
specifier|public
specifier|static
specifier|final
name|MediaType
name|JSONLD_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"application/ld+json"
argument_list|)
decl_stmt|;
comment|/**      * {@link MediaType} instance for {@link SupportedFormat#N3}      */
specifier|public
specifier|static
specifier|final
name|MediaType
name|N3_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|N3
argument_list|)
decl_stmt|;
comment|/**      * {@link MediaType} instance for {@link SupportedFormat#RDF_JSON}      */
specifier|public
specifier|static
specifier|final
name|MediaType
name|RDF_JSON_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|RDF_JSON
argument_list|)
decl_stmt|;
comment|/**      * {@link MediaType} instance for {@link SupportedFormat#RDF_XML}      */
specifier|public
specifier|static
specifier|final
name|MediaType
name|RDF_XML_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
decl_stmt|;
comment|/**      * {@link MediaType} instance for {@link SupportedFormat#X_TURTLE}      */
specifier|public
specifier|static
specifier|final
name|MediaType
name|X_TURTLE_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|X_TURTLE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|N_TRIPLE_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|)
decl_stmt|;
comment|/**      * Read-only list of the supported RDF formats      */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_RDF_TYPES
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TURTLE_TYPE
argument_list|,
name|JSONLD_TYPE
argument_list|,
name|N3_TYPE
argument_list|,
name|N_TRIPLE_TYPE
argument_list|,
name|RDF_JSON_TYPE
argument_list|,
name|RDF_XML_TYPE
argument_list|,
name|X_TURTLE_TYPE
argument_list|)
argument_list|)
decl_stmt|;
comment|//some Concepts and Relations we use to represent Entities
specifier|private
specifier|final
specifier|static
name|UriRef
name|FOAF_DOCUMENT
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|foaf
operator|+
literal|"Document"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|UriRef
name|FOAF_PRIMARY_TOPIC
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|foaf
operator|+
literal|"primaryTopic"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|UriRef
name|FOAF_PRIMARY_TOPIC_OF
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|foaf
operator|+
literal|"isPrimaryTopicOf"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|UriRef
name|SIGN_SITE
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|site
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
comment|//    private final static UriRef ENTITY_TYPE = new UriRef(RdfResourceEnum.Entity.getUri());
specifier|private
specifier|final
specifier|static
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * The URI used for the query result list (static for all responses)      */
specifier|private
specifier|static
specifier|final
name|UriRef
name|QUERY_RESULT_LIST
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|QueryResultSet
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The property used for all results      */
specifier|private
specifier|static
specifier|final
name|UriRef
name|QUERY_RESULT
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|queryResult
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The property used for the JSON serialised FieldQuery (STANBOL-298)      */
specifier|private
specifier|static
specifier|final
name|UriRef
name|FIELD_QUERY
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|query
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * This Serializer only supports UTF-8      */
specifier|public
specifier|static
specifier|final
name|String
name|CHARSET
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|/**      * The literal factory used (currently {@link LiteralFactory#getInstance()},      * but we might use a custom one for Stanbol therefore it is better to      * have it as a field       */
specifier|static
specifier|final
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * The Clerezza {@link Serializer} service      */
annotation|@
name|Reference
specifier|protected
name|Serializer
name|ser
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|)
specifier|protected
name|NamespacePrefixService
name|nsPrefixService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Representation
argument_list|>
name|getNativeType
parameter_list|()
block|{
return|return
name|RdfRepresentation
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
parameter_list|()
block|{
return|return
name|SUPPORTED_RDF_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|MediaType
name|getBestMediaType
parameter_list|(
name|MediaType
name|mediaType
parameter_list|)
block|{
for|for
control|(
name|MediaType
name|supported
range|:
name|SUPPORTED_RDF_TYPES
control|)
block|{
if|if
condition|(
name|supported
operator|.
name|isCompatible
argument_list|(
name|mediaType
argument_list|)
condition|)
block|{
return|return
name|supported
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Representation
name|rep
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|WebApplicationException
throws|,
name|IOException
block|{
name|writeRdf
argument_list|(
name|toRDF
argument_list|(
name|rep
argument_list|)
argument_list|,
name|out
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|WebApplicationException
throws|,
name|IOException
block|{
name|writeRdf
argument_list|(
name|toRDF
argument_list|(
name|entity
argument_list|)
argument_list|,
name|out
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|QueryResultList
argument_list|<
name|?
argument_list|>
name|result
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|WebApplicationException
throws|,
name|IOException
block|{
name|MGraph
name|queryRdf
init|=
name|toRDF
argument_list|(
name|result
argument_list|)
decl_stmt|;
comment|//we need also to the JSON formatted FieldQuery as a literal to the
comment|//RDF data.
name|FieldQuery
name|query
init|=
name|result
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JSONObject
name|fieldQueryJson
init|=
name|FieldQueryToJsonUtils
operator|.
name|toJSON
argument_list|(
name|query
argument_list|,
name|nsPrefixService
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldQueryJson
operator|!=
literal|null
condition|)
block|{
comment|//add the triple with the fieldQuery
name|queryRdf
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|QUERY_RESULT_LIST
argument_list|,
name|FIELD_QUERY
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|fieldQueryJson
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to serialize Fieldquery '%s' to JSON! "
operator|+
literal|"Query response will not contain the serialized query."
argument_list|,
name|query
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//now serialise the data
name|writeRdf
argument_list|(
name|queryRdf
argument_list|,
name|out
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param tc      * @param out      * @param mediaType      */
specifier|private
name|void
name|writeRdf
parameter_list|(
name|TripleCollection
name|tc
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
name|String
name|charset
init|=
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
name|ModelWriter
operator|.
name|DEFAULT_CHARSET
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|CHARSET
operator|.
name|equalsIgnoreCase
argument_list|(
name|charset
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported Charset {} requested (will use {})!"
argument_list|,
name|charset
argument_list|,
name|CHARSET
argument_list|)
expr_stmt|;
block|}
name|ser
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|tc
argument_list|,
operator|new
name|StringBuilder
argument_list|(
name|mediaType
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|mediaType
operator|.
name|getSubtype
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MGraph
name|toRDF
parameter_list|(
name|Representation
name|representation
parameter_list|)
block|{
name|MGraph
name|graph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|representation
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
specifier|private
name|void
name|addRDFTo
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|Representation
name|representation
parameter_list|)
block|{
name|graph
operator|.
name|addAll
argument_list|(
name|valueFactory
operator|.
name|toRdfRepresentation
argument_list|(
name|representation
argument_list|)
operator|.
name|getRdfGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TripleCollection
name|toRDF
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|MGraph
name|graph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|entity
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
specifier|private
name|void
name|addRDFTo
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|Entity
name|entity
parameter_list|)
block|{
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|entity
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
comment|//now add some triples that represent the Sign
name|addEntityTriplesToGraph
argument_list|(
name|graph
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the Triples that represent the Sign to the parsed graph. Note that      * this method does not add triples for the representation. However it adds      * the triple (sign,singRepresentation,representation)      *      * @param graph the graph to add the triples      * @param sign the sign      */
specifier|private
name|void
name|addEntityTriplesToGraph
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|Entity
name|sign
parameter_list|)
block|{
name|UriRef
name|id
init|=
operator|new
name|UriRef
argument_list|(
name|sign
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|metaId
init|=
operator|new
name|UriRef
argument_list|(
name|sign
operator|.
name|getMetadata
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//add the FOAF triples between metadata and content
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|id
argument_list|,
name|FOAF_PRIMARY_TOPIC_OF
argument_list|,
name|metaId
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|metaId
argument_list|,
name|FOAF_PRIMARY_TOPIC
argument_list|,
name|metaId
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|metaId
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|FOAF_DOCUMENT
argument_list|)
argument_list|)
expr_stmt|;
comment|//add the site to the metadata
comment|//TODO: this should be the HTTP URI and not the id of the referenced site
name|TypedLiteral
name|siteName
init|=
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|sign
operator|.
name|getSite
argument_list|()
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|metaId
argument_list|,
name|SIGN_SITE
argument_list|,
name|siteName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MGraph
name|toRDF
parameter_list|(
name|QueryResultList
argument_list|<
name|?
argument_list|>
name|resultList
parameter_list|)
block|{
specifier|final
name|MGraph
name|resultGraph
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|resultList
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|resultGraph
operator|=
operator|new
name|IndexedMGraph
argument_list|()
expr_stmt|;
comment|//create a new Graph
for|for
control|(
name|Object
name|result
range|:
name|resultList
control|)
block|{
comment|//add a triple to each reference in the result set
name|resultGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|QUERY_RESULT_LIST
argument_list|,
name|QUERY_RESULT
argument_list|,
operator|new
name|UriRef
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//first determine the type of the resultList
specifier|final
name|boolean
name|isSignType
decl_stmt|;
if|if
condition|(
name|Representation
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|isSignType
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Representation
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|isSignType
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|//incompatible type -> throw an Exception
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed type "
operator|+
name|type
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
comment|//special treatment for RdfQueryResultList for increased performance
if|if
condition|(
name|resultList
operator|instanceof
name|RdfQueryResultList
condition|)
block|{
name|resultGraph
operator|=
operator|(
operator|(
name|RdfQueryResultList
operator|)
name|resultList
operator|)
operator|.
name|getResultGraph
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSignType
condition|)
block|{
comment|//if we build a ResultList for Signs, that we need to do more things
comment|//first remove all triples representing results
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|resultTripleIt
init|=
name|resultGraph
operator|.
name|filter
argument_list|(
name|QUERY_RESULT_LIST
argument_list|,
name|QUERY_RESULT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultTripleIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resultTripleIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|resultTripleIt
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|//now add the Sign specific triples and add result triples
comment|//to the Sign IDs
for|for
control|(
name|Object
name|result
range|:
name|resultList
control|)
block|{
name|UriRef
name|signId
init|=
operator|new
name|UriRef
argument_list|(
operator|(
operator|(
name|Entity
operator|)
name|result
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|addEntityTriplesToGraph
argument_list|(
name|resultGraph
argument_list|,
operator|(
name|Entity
operator|)
name|result
argument_list|)
expr_stmt|;
name|resultGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|QUERY_RESULT_LIST
argument_list|,
name|QUERY_RESULT
argument_list|,
name|signId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//any other implementation of the QueryResultList interface
name|resultGraph
operator|=
operator|new
name|IndexedMGraph
argument_list|()
expr_stmt|;
comment|//create a new graph
if|if
condition|(
name|Representation
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|Object
name|result
range|:
name|resultList
control|)
block|{
name|UriRef
name|resultId
decl_stmt|;
if|if
condition|(
operator|!
name|isSignType
condition|)
block|{
name|addRDFTo
argument_list|(
name|resultGraph
argument_list|,
operator|(
name|Representation
operator|)
name|result
argument_list|)
expr_stmt|;
name|resultId
operator|=
operator|new
name|UriRef
argument_list|(
operator|(
operator|(
name|Representation
operator|)
name|result
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addRDFTo
argument_list|(
name|resultGraph
argument_list|,
operator|(
name|Entity
operator|)
name|result
argument_list|)
expr_stmt|;
name|resultId
operator|=
operator|new
name|UriRef
argument_list|(
operator|(
operator|(
name|Entity
operator|)
name|result
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Note: In case of Representation this Triple points to
comment|//      the representation. In case of Signs it points to
comment|//      the sign.
name|resultGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|QUERY_RESULT_LIST
argument_list|,
name|QUERY_RESULT
argument_list|,
name|resultId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|resultGraph
return|;
block|}
block|}
end_class

end_unit

