begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedParsingFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|MessageBodyReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|MessageBodyReaderUtils
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides support for reading Representation form Requests. This implementation  * supports all RDF supports as well as {@link MediaType#APPLICATION_FORM_URLENCODED}  * - in case the data are sent from an HTML form - and   * {@link MediaType#MULTIPART_FORM_DATA} - mime encoded data.  * In case of an  HTML form the encoding need to be specified by the parameter  * "encoding" for the entity data the parameters "entity" or "content" can be  * used.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Provider
annotation|@
name|Consumes
argument_list|(
block|{
comment|//First the data types directly supported for parsing representations
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|SupportedFormat
operator|.
name|N3
block|,
name|SupportedFormat
operator|.
name|N_TRIPLE
block|,
name|SupportedFormat
operator|.
name|RDF_XML
block|,
name|SupportedFormat
operator|.
name|TURTLE
block|,
name|SupportedFormat
operator|.
name|X_TURTLE
block|,
name|SupportedFormat
operator|.
name|RDF_JSON
block|,
comment|//finally this also supports sending the data as form and mime multipart
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
block|,
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
block|}
argument_list|)
specifier|public
class|class
name|RepresentationReader
implements|implements
name|MessageBodyReader
argument_list|<
name|Set
argument_list|<
name|Representation
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepresentationReader
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Context
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|supportedMediaTypes
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|DEFAULT_ACCEPTED_MEDIA_TYPE
init|=
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//ensure everything is lower case
name|types
operator|.
name|add
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|SupportedFormat
operator|.
name|N3
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|SupportedFormat
operator|.
name|N_TRIPLE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|SupportedFormat
operator|.
name|RDF_JSON
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|SupportedFormat
operator|.
name|RDF_XML
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|SupportedFormat
operator|.
name|X_TURTLE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|supportedMediaTypes
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
name|boolean
name|typeOK
decl_stmt|;
name|String
name|mediaTypeWithoutParameter
init|=
name|mediaType
operator|.
name|getType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|'/'
operator|+
name|mediaType
operator|.
name|getSubtype
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"isreadable: [genericType: {}| mediaType {}]"
argument_list|,
name|genericType
argument_list|,
name|mediaTypeWithoutParameter
argument_list|)
expr_stmt|;
comment|//first check the parsed type
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
operator|&&
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|//both the raw type MUST BE compatible with Set and the
comment|//generic type MUST BE compatible with Representation
comment|//e.g to support method declarations like
comment|// public<T extends Collection> store(T<? extends Representation> representations){...}
name|typeOK
operator|=
name|JerseyUtils
operator|.
name|testType
argument_list|(
name|Set
operator|.
name|class
argument_list|,
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
operator|&&
name|JerseyUtils
operator|.
name|testType
argument_list|(
name|Representation
operator|.
name|class
argument_list|,
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|genericType
operator|instanceof
name|Class
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|typeOK
operator|=
name|Set
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|genericType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//No Idea what that means
name|typeOK
operator|=
literal|false
expr_stmt|;
block|}
comment|//second the media type
name|boolean
name|mediaTypeOK
init|=
operator|(
comment|//the MimeTypes of Representations
name|supportedMediaTypes
operator|.
name|contains
argument_list|(
name|mediaTypeWithoutParameter
argument_list|)
operator|||
comment|//as well as URL encoded
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
operator|.
name|equals
argument_list|(
name|mediaTypeWithoutParameter
argument_list|)
operator|||
comment|//and mime multipart
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
operator|.
name|equals
argument_list|(
name|mediaTypeWithoutParameter
argument_list|)
operator|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> java-type: {}, media-type {}"
argument_list|,
name|typeOK
argument_list|,
name|mediaTypeOK
argument_list|)
expr_stmt|;
return|return
name|typeOK
operator|&&
name|mediaTypeOK
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Representation
argument_list|>
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|Set
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
name|InputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
comment|//(1) get the charset and the acceptedMediaType
name|String
name|charset
init|=
literal|"UTF-8"
decl_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"charset"
argument_list|)
condition|)
block|{
name|charset
operator|=
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
expr_stmt|;
block|}
name|MediaType
name|acceptedMediaType
init|=
name|getAcceptedMediaType
argument_list|(
name|httpHeaders
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"readFrom: mediaType {} | accepted {} | charset {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|mediaType
block|,
name|acceptedMediaType
block|,
name|charset
block|}
argument_list|)
expr_stmt|;
comment|// (2) read the Content from the request (this needs to deal with
comment|//    MediaType.APPLICATION_FORM_URLENCODED_TYPE and
comment|//    MediaType.MULTIPART_FORM_DATA_TYPE requests!
name|RequestData
name|content
decl_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED_TYPE
argument_list|)
condition|)
block|{
try|try
block|{
name|content
operator|=
name|MessageBodyReaderUtils
operator|.
name|formForm
argument_list|(
name|entityStream
argument_list|,
name|charset
argument_list|,
literal|"encoding"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"entity"
argument_list|,
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|content
operator|.
name|getMediaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Missing parameter %s used to specify the media type"
operator|+
literal|"(supported values: %s"
argument_list|,
literal|"encoding"
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSupported
argument_list|(
name|content
operator|.
name|getMediaType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported Content-Type specified by parameter "
operator|+
literal|"encoding=%s (supported: %s)"
argument_list|,
name|content
operator|.
name|getMediaType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|mediaType
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"read from MimeMultipart"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RequestData
argument_list|>
name|contents
decl_stmt|;
try|try
block|{
name|contents
operator|=
name|MessageBodyReaderUtils
operator|.
name|fromMultipart
argument_list|(
name|entityStream
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|contents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Request does not contain any Mime BodyParts."
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|contents
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|//print warnings about ignored parts
name|log
operator|.
name|warn
argument_list|(
literal|"{} Request contains more than one Parts: others than "
operator|+
literal|"the first will be ignored"
argument_list|,
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|contents
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RequestData
name|ignored
init|=
name|contents
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"  ignore Content {}: Name {}| MediaType {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|i
operator|+
literal|1
block|,
name|ignored
operator|.
name|getName
argument_list|()
block|,
name|ignored
operator|.
name|getMediaType
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|content
operator|=
name|contents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|.
name|getMediaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"MediaType not specified for mime body part for file %s. "
operator|+
literal|"The media type must be one of the supported values: %s"
argument_list|,
name|content
operator|.
name|getName
argument_list|()
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSupported
argument_list|(
name|content
operator|.
name|getMediaType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported Content-Type %s specified for mime body part "
operator|+
literal|"for file %s (supported: %s)"
argument_list|,
name|content
operator|.
name|getMediaType
argument_list|()
argument_list|,
name|content
operator|.
name|getName
argument_list|()
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|content
operator|=
operator|new
name|RequestData
argument_list|(
name|mediaType
argument_list|,
literal|null
argument_list|,
name|entityStream
argument_list|)
expr_stmt|;
block|}
return|return
name|parseFromContent
argument_list|(
name|content
argument_list|,
name|acceptedMediaType
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Representation
argument_list|>
name|parseFromContent
parameter_list|(
name|RequestData
name|content
parameter_list|,
name|MediaType
name|acceptedMediaType
parameter_list|)
block|{
comment|// (3) Parse the Representtion(s) form the entity stream
if|if
condition|(
name|content
operator|.
name|getMediaType
argument_list|()
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
condition|)
block|{
comment|//parse from json
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Parsing of JSON not yet implemented :("
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|isSupported
argument_list|(
name|content
operator|.
name|getMediaType
argument_list|()
argument_list|)
condition|)
block|{
comment|//from RDF serialisation
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Representation
argument_list|>
name|representations
init|=
operator|new
name|HashSet
argument_list|<
name|Representation
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|processed
init|=
operator|new
name|HashSet
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
decl_stmt|;
name|Parser
name|parser
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
decl_stmt|;
name|MGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|graph
argument_list|,
name|content
operator|.
name|getEntityStream
argument_list|()
argument_list|,
name|content
operator|.
name|getMediaType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedParsingFormatException
name|e
parameter_list|)
block|{
comment|//String acceptedMediaType = httpHeaders.getFirst("Accept");
comment|//throw an internal server Error, because we check in
comment|//isReadable(..) for supported types and still we get here a
comment|//unsupported format -> therefore it looks like an configuration
comment|//error the server (e.g. a missing Bundle with the required bundle)
name|String
name|message
init|=
literal|"Unable to create the Parser for the supported format"
operator|+
name|content
operator|.
name|getMediaType
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Unable to create the Parser for the supported format "
operator|+
name|content
operator|.
name|getMediaType
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|st
init|=
name|graph
operator|.
name|iterator
argument_list|()
init|;
name|st
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NonLiteral
name|resource
init|=
name|st
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|instanceof
name|UriRef
operator|&&
name|processed
operator|.
name|add
argument_list|(
name|resource
argument_list|)
condition|)
block|{
comment|//build a new representation
name|representations
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createRdfRepresentation
argument_list|(
operator|(
name|UriRef
operator|)
name|resource
argument_list|,
name|graph
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|representations
return|;
block|}
else|else
block|{
comment|//unsupported media type
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Parsed Content-Type '%s' is not one of the supported %s"
argument_list|,
name|content
operator|.
name|getMediaType
argument_list|()
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Bad Request: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Internally used to get the accepted media type used when returning      * {@link WebApplicationException}s.      * @param httpHeaders      * @param acceptedMediaType      * @return      */
specifier|private
specifier|static
name|MediaType
name|getAcceptedMediaType
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|MediaType
name|acceptedMediaType
decl_stmt|;
name|String
name|acceptedMediaTypeString
init|=
name|httpHeaders
operator|.
name|getFirst
argument_list|(
literal|"Accept"
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedMediaTypeString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|acceptedMediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|acceptedMediaTypeString
argument_list|)
expr_stmt|;
if|if
condition|(
name|acceptedMediaType
operator|.
name|isWildcardType
argument_list|()
condition|)
block|{
name|acceptedMediaType
operator|=
name|DEFAULT_ACCEPTED_MEDIA_TYPE
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|acceptedMediaType
operator|=
name|DEFAULT_ACCEPTED_MEDIA_TYPE
expr_stmt|;
block|}
block|}
else|else
block|{
name|acceptedMediaType
operator|=
name|DEFAULT_ACCEPTED_MEDIA_TYPE
expr_stmt|;
block|}
return|return
name|acceptedMediaType
return|;
block|}
comment|/**      * Converts the type and the subtype of the parsed media type to the      * string representation as stored in {@link #supportedMediaTypes} and than      * checks if the parsed media type is contained in this list.      * @param mediaType the MediaType instance to check      * @return<code>true</code> if the parsed media type is not       *<code>null</code> and supported.       */
specifier|private
name|boolean
name|isSupported
parameter_list|(
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|mediaType
operator|==
literal|null
condition|?
literal|false
else|:
name|supportedMediaTypes
operator|.
name|contains
argument_list|(
name|mediaType
operator|.
name|getType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|'/'
operator|+
name|mediaType
operator|.
name|getSubtype
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

