begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_comment
comment|/**  * The ModelWirter extension point allows to have native serialiszation support  * for specific Entityhub model implementation.<p>  * See   *<a href="https://issues.apache.org/jira/browse/STANBOL-1237">STANBOL-1237</a>  * for details.  * @author Rupert Westenthaler  *  */
end_comment

begin_interface
specifier|public
interface|interface
name|ModelWriter
block|{
comment|/**      * The default charset used by the Entityhub is<code>UTF-8</code>      */
name|String
name|DEFAULT_CHARSET
init|=
literal|"UTF-8"
decl_stmt|;
comment|/**      * The default MediaType is {@link MediaType#APPLICATION_JSON} with the      * {@link #DEFAULT_CHARSET}.      */
name|MediaType
name|DEFAULT_MEDIA_TYPE
init|=
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|.
name|withCharset
argument_list|(
name|DEFAULT_CHARSET
argument_list|)
decl_stmt|;
comment|/**      * Class of the native type of this ModelWriter      * @return the native type      */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Representation
argument_list|>
name|getNativeType
parameter_list|()
function_decl|;
comment|/**      * The list of supported MediaTypes in the order of preference      * @return the supported mediaTypes      */
specifier|public
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
parameter_list|()
function_decl|;
comment|/**      * Getter for the best fitting {@link MediaType} for the parsed one. This      * Method is intended to let the ModelWriter choose the best fitting type      * in case the parsed {@link MediaType} uses a wildcard type or sub-type.       * @param mediaType a wildcard mediaType      * @return the selected mediaType or<code>null<code> if none was found.      */
specifier|public
name|MediaType
name|getBestMediaType
parameter_list|(
name|MediaType
name|mediaType
parameter_list|)
function_decl|;
comment|/**      * Writes the parsed {@link Representation} to the stream      * @param rep the {@link Representation}      * @param out the stream      * @param mediaType the {@link MediaType}      * @throws WebApplicationException If the parsed Representation can not be      * serialized for some reasons      * @throws IOException on any Error while writing to the stream      */
specifier|public
name|void
name|write
parameter_list|(
name|Representation
name|rep
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|WebApplicationException
throws|,
name|IOException
function_decl|;
comment|/**      * Writes the parsed {@link Entity} to the stream      * @param entity the {@link Entity} to serialize      * @param out the stream      * @param mediaType the {@link MediaType}      * @throws WebApplicationException If the parsed Entity can not be      * serialized for some reasons      * @throws IOException on any Error while writing to the stream      */
specifier|public
name|void
name|write
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|WebApplicationException
throws|,
name|IOException
function_decl|;
comment|/**      * Writes {@link QueryResultList} to the stream      * @param result the {@link QueryResultList} containing {@link String},      * {@link Entity} or {@link Representation} instances. Also empty results      * lists need to be supported.      * @param out the stream      * @param mediaType the {@link MediaType}      * @throws WebApplicationException If the parsed query result list can not be      * serialized for some reasons      * @throws IOException on any Error while writing to the stream      */
specifier|public
name|void
name|write
parameter_list|(
name|QueryResultList
argument_list|<
name|?
argument_list|>
name|result
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|WebApplicationException
throws|,
name|IOException
function_decl|;
block|}
end_interface

end_unit

