begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|BodyPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMultipart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|util
operator|.
name|ByteArrayDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utilities for implementing {@link MessageBodyReader}.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MessageBodyReaderUtils
block|{
specifier|private
name|MessageBodyReaderUtils
parameter_list|()
block|{
comment|/*do not instantiate Util classes */
block|}
empty_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MessageBodyReaderUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Returns content parsed as {@link MediaType#APPLICATION_FORM_URLENCODED}.      * It assumes that the encoding and the content is defined by own parameters.      * For the content this method allows to parse several parameters. The first      * existing one is used to get the content. The parameter actually used to      * retrieve the content will be available via {@link RequestData#getName()}.<p>      * This Method will load the content several time into memory and should      * not be used for big contents. However this should be fine in cases      * data are parsed as {@link MediaType#APPLICATION_FORM_URLENCODED}<p>      * This Method is necessary because within {@link MessageBodyReader} one      * can not use the {@link FormParam} annotations because only the       * {@link InputStream} is parsed to the       * {@link MessageBodyReader#readFrom(Class, Type, java.lang.annotation.Annotation[], MediaType, javax.ws.rs.core.MultivaluedMap, InputStream)}      * method<p>      * To test this Method with curl use:      *<code><pre>      * curl -v -X POST --data-urlencode "{encodingParam}=application/rdf+xml"       *                 --data-urlencode "{contentParam}@{datafile}"       *                  {serviceURL}      *</pre></code>      * Note that between {contentParam} and the datafile MUST NOT be a '='!      * @param formData the data of the form as stream      * @param charset the charset used for the form data      * @param encodingParam the parameter name used to parse the encoding      * @param contentParams the list of parameters used for the content. The first      * existing parameter is used to parse the content. Additional ones are      * ignored.      * @return The parsed content (MediaType and InputStream)      * @throws IOException On any exception while reading from the parsed stream.      * @throws UnsupportedEncodingException if the parsed charset is not supported      *    by this plattform      * @throws IllegalArgumentException In case of a {@link Status#BAD_REQUEST}      */
specifier|public
specifier|static
name|RequestData
name|formForm
parameter_list|(
name|InputStream
name|formData
parameter_list|,
name|String
name|charset
parameter_list|,
name|String
name|encodingParam
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|contentParams
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedEncodingException
throws|,
name|IllegalArgumentException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|JerseyUtils
operator|.
name|parseForm
argument_list|(
name|formData
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Read from Form:"
argument_list|)
expr_stmt|;
name|MediaType
name|mediaType
decl_stmt|;
if|if
condition|(
name|encodingParam
operator|!=
literal|null
condition|)
block|{
name|String
name|mediaTypeString
init|=
name|params
operator|.
name|get
argument_list|(
name|encodingParam
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> encoding: {}={}"
argument_list|,
name|encodingParam
argument_list|,
name|mediaTypeString
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaTypeString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|mediaTypeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Illegal formatted Content-Type %s parsed by parameter %s"
argument_list|,
name|encodingParam
argument_list|,
name|mediaTypeString
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|mediaType
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> encoding: no encoding prameter set"
argument_list|)
expr_stmt|;
name|mediaType
operator|=
literal|null
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"<- mediaType = {}"
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
name|InputStream
name|entityStream
init|=
literal|null
decl_stmt|;
name|String
name|contentParam
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|contentParamIterator
init|=
name|contentParams
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityStream
operator|==
literal|null
operator|&&
name|contentParamIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|contentParam
operator|=
name|contentParamIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|content
init|=
name|params
operator|.
name|get
argument_list|(
name|contentParam
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> content: {}={}"
argument_list|,
name|contentParam
argument_list|,
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|entityStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entityStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No content found for any of the following parameters %s"
argument_list|,
name|contentParams
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|RequestData
argument_list|(
name|mediaType
argument_list|,
name|contentParam
argument_list|,
name|entityStream
argument_list|)
return|;
block|}
comment|/**      * Returns content parsed from {@link MediaType#MULTIPART_FORM_DATA}.      * It iterates over all {@link BodyPart}s and tries to create {@link RequestData}      * instances. In case the {@link BodyPart#getContentType()} is not present or      * can not be parsed, the {@link RequestData#getMediaType()} is set to       *<code>null</code>. If {@link BodyPart#getInputStream()} is not defined an      * {@link IllegalArgumentException} is thrown. The {@link BodyPart#getFileName()}      * is used for {@link RequestData#getName()}. The ordering of the returned      * Content instances is the same as within the {@link MimeMultipart} instance      * parsed from the input stream.<p>      * This Method does NOT load the data into memory, but returns directly the      * {@link InputStream}s as returned by the {@link BodyPart}s. Therefore      * it is saved to be used with big attachments.<p>      * This Method is necessary because within {@link MessageBodyReader} one      * can not use the usual annotations as used within Resources. so this method      * allows to access the data directly from the parameters available from the      * {@link MessageBodyReader#readFrom(Class, Type, java.lang.annotation.Annotation[], MediaType, javax.ws.rs.core.MultivaluedMap, InputStream)}      * method<p>      * To test this Method with curl use:      *<code><pre>      * curl -v -X POST -F "content=@{dataFile};type={mimeType}"       *      {serviceURL}      *</pre></code>      * Note that between {contentParam} and the datafile MUST NOT be a '='!      * @param mimeData the mime encoded data      * @param mediaType the mediaType (parsed to the {@link ByteArrayDataSource}      * constructor)      * @return the contents parsed from the {@link BodyPart}s      * @throws IOException an any Exception while reading the stream or       * {@link MessagingException} exceptions other than {@link ParseException}s      * @throws IllegalArgumentException If a {@link InputStream} is not available      * for any {@link BodyPart} or on {@link ParseException}s while reading the      * MimeData from the stream.      */
specifier|public
specifier|static
name|List
argument_list|<
name|RequestData
argument_list|>
name|fromMultipart
parameter_list|(
name|InputStream
name|mimeData
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|ByteArrayDataSource
name|ds
init|=
operator|new
name|ByteArrayDataSource
argument_list|(
name|mimeData
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RequestData
argument_list|>
name|contents
init|=
operator|new
name|ArrayList
argument_list|<
name|RequestData
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|MimeMultipart
name|data
init|=
operator|new
name|MimeMultipart
argument_list|(
name|ds
argument_list|)
decl_stmt|;
comment|//For now search the first bodypart that fits and only debug the others
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BodyPart
name|bp
init|=
name|data
operator|.
name|getBodyPart
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|bp
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|MediaType
name|mt
decl_stmt|;
try|try
block|{
name|mt
operator|=
name|bp
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
condition|?
name|MediaType
operator|.
name|valueOf
argument_list|(
name|bp
operator|.
name|getContentType
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse MediaType form Mime Bodypart %s: "
operator|+
literal|" fileName %s | Disposition %s | Description %s"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|fileName
argument_list|,
name|bp
operator|.
name|getDisposition
argument_list|()
argument_list|,
name|bp
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|mt
operator|=
literal|null
expr_stmt|;
block|}
name|InputStream
name|stream
init|=
name|bp
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get InputStream for Mime Bodypart %s: "
operator|+
literal|"mediaType %s fileName %s | Disposition %s | Description %s"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|fileName
argument_list|,
name|bp
operator|.
name|getDisposition
argument_list|()
argument_list|,
name|bp
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|contents
operator|.
name|add
argument_list|(
operator|new
name|RequestData
argument_list|(
name|mt
argument_list|,
name|bp
operator|.
name|getFileName
argument_list|()
argument_list|,
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse data from %s request"
argument_list|,
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while reading "
operator|+
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
operator|+
literal|" request"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|contents
return|;
block|}
comment|/**      * Simple class that holds the MediaType, Name and the content as       * {@link InputStream}.      * @author Rupert Westenthaler      *      */
specifier|public
specifier|static
class|class
name|RequestData
block|{
specifier|private
specifier|final
name|MediaType
name|mediaType
decl_stmt|;
specifier|private
specifier|final
name|InputStream
name|entityStream
decl_stmt|;
specifier|private
specifier|final
name|String
name|contentName
decl_stmt|;
specifier|public
name|RequestData
parameter_list|(
name|MediaType
name|mediaType
parameter_list|,
name|String
name|contentName
parameter_list|,
name|InputStream
name|entityStream
parameter_list|)
block|{
if|if
condition|(
name|entityStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Inputstream MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mediaType
operator|=
name|mediaType
expr_stmt|;
name|this
operator|.
name|entityStream
operator|=
name|entityStream
expr_stmt|;
name|this
operator|.
name|contentName
operator|=
name|contentName
expr_stmt|;
block|}
comment|/**          * The media type or<code>null</code> if not known          * @return the mediaType          */
specifier|public
name|MediaType
name|getMediaType
parameter_list|()
block|{
return|return
name|mediaType
return|;
block|}
comment|/**          * The stream with the data          * @return the entityStream          */
specifier|public
name|InputStream
name|getEntityStream
parameter_list|()
block|{
return|return
name|entityStream
return|;
block|}
comment|/**          * The name of the content (e.g. the parameter used to parse the content          * or the filename provided by the {@link BodyPart}) or<code>null</code>          * if not present. The documentation of methods returning instances of           * this class should document what is used as name.          * @return the contentName          */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|contentName
return|;
block|}
block|}
block|}
end_class

end_unit

