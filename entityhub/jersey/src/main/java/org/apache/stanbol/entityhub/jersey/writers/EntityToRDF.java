begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|writers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|FOAF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_comment
comment|/**  * Encodes an Entity into an single RDF graph by<ul>  *<li> adding the {@link Entity#getRepresentation()}  *<li> adding the {@link Entity#getMetadata()}  *<li> creating a foaf:primaryTopic link between the metadata and the representation  *<li> creating a foaf:isPromaryTopic link between the representation and the metadata  *<li> adding the foaf:Document type to the metadata.  *</ul>  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|final
class|class
name|EntityToRDF
block|{
specifier|private
name|EntityToRDF
parameter_list|()
block|{
comment|/* do not create instances of utility classes */
block|}
specifier|private
specifier|static
name|UriRef
name|FOAF_DOCUMENT
init|=
name|FOAF
operator|.
name|Document
decl_stmt|;
specifier|private
specifier|static
name|UriRef
name|FOAF_PRIMARY_TOPIC
init|=
name|FOAF
operator|.
name|primaryTopic
decl_stmt|;
specifier|private
specifier|static
name|UriRef
name|FOAF_PRIMARY_TOPIC_OF
init|=
name|FOAF
operator|.
name|isPrimaryTopicOf
decl_stmt|;
specifier|private
specifier|static
name|UriRef
name|signSite
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|site
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|UriRef
name|ENTITY_TYPE
init|=
operator|new
name|UriRef
argument_list|(
name|RdfResourceEnum
operator|.
name|Entity
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|static
name|MGraph
name|toRDF
parameter_list|(
name|Representation
name|representation
parameter_list|)
block|{
name|MGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|representation
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
specifier|static
name|void
name|addRDFTo
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|Representation
name|representation
parameter_list|)
block|{
name|graph
operator|.
name|addAll
argument_list|(
name|valueFactory
operator|.
name|toRdfRepresentation
argument_list|(
name|representation
argument_list|)
operator|.
name|getRdfGraph
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|TripleCollection
name|toRDF
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|MGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|entity
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
specifier|static
name|void
name|addRDFTo
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|Entity
name|entity
parameter_list|)
block|{
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|addRDFTo
argument_list|(
name|graph
argument_list|,
name|entity
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
comment|//now add some triples that represent the Sign
name|addEntityTriplesToGraph
argument_list|(
name|graph
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the Triples that represent the Sign to the parsed graph. Note that      * this method does not add triples for the representation. However it adds      * the triple (sign,singRepresentation,representation)      *      * @param graph the graph to add the triples      * @param sign the sign      */
specifier|static
name|void
name|addEntityTriplesToGraph
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|Entity
name|sign
parameter_list|)
block|{
name|UriRef
name|id
init|=
operator|new
name|UriRef
argument_list|(
name|sign
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|metaId
init|=
operator|new
name|UriRef
argument_list|(
name|sign
operator|.
name|getMetadata
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//add the FOAF triples between metadata and content
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|id
argument_list|,
name|FOAF_PRIMARY_TOPIC_OF
argument_list|,
name|metaId
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|metaId
argument_list|,
name|FOAF_PRIMARY_TOPIC
argument_list|,
name|metaId
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|metaId
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|FOAF_DOCUMENT
argument_list|)
argument_list|)
expr_stmt|;
comment|//add the site to the metadata
comment|//TODO: this should be the HTTP URI and not the id of the referenced site
name|TypedLiteral
name|siteName
init|=
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|sign
operator|.
name|getSite
argument_list|()
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|metaId
argument_list|,
name|EntityToRDF
operator|.
name|signSite
argument_list|,
name|siteName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

