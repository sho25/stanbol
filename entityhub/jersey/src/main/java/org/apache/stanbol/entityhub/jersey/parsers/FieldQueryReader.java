begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|RangeConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ReferenceConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ValueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|Constraint
operator|.
name|ConstraintType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
operator|.
name|PatternType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|FieldQueryReader
implements|implements
name|MessageBodyReader
argument_list|<
name|FieldQuery
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FieldQueryReader
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"isReadable type {}, mediaType {}"
argument_list|,
name|type
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
return|return
name|FieldQuery
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
comment|//&& mediaType.isCompatible(MediaType.APPLICATION_JSON_TYPE);
block|}
annotation|@
name|Override
specifier|public
name|FieldQuery
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|FieldQuery
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
name|InputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|String
name|queryString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|entityStream
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Parsed QueryString: \n{}"
argument_list|,
name|queryString
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|fromJSON
argument_list|(
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
argument_list|,
name|queryString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|String
name|acceptedMediaType
init|=
name|httpHeaders
operator|.
name|getFirst
argument_list|(
literal|"Accept"
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse FieldQuery from parsed Data."
argument_list|,
name|e
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|FieldQuery
name|fromJSON
parameter_list|(
name|FieldQueryFactory
name|queryFactory
parameter_list|,
name|String
name|jsonQueryString
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|jsonQueryString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed JSON object MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|JSONObject
name|jQuery
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonQueryString
argument_list|)
decl_stmt|;
name|FieldQuery
name|query
init|=
name|queryFactory
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|jQuery
operator|.
name|has
argument_list|(
literal|"constraints"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed JSON object MUST contain the required key \"constraints\""
argument_list|)
throw|;
block|}
name|JSONArray
name|constraints
init|=
name|jQuery
operator|.
name|getJSONArray
argument_list|(
literal|"constraints"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|constraints
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|jConstraint
init|=
name|constraints
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|jConstraint
operator|.
name|has
argument_list|(
literal|"field"
argument_list|)
condition|)
block|{
name|String
name|field
init|=
name|jConstraint
operator|.
name|getString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
comment|//check if there is already a constraint for that field
if|if
condition|(
name|field
operator|==
literal|null
operator|||
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The value of the key \"field\" MUST NOT be NULL nor emtpy!"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Constraint:\n %s"
argument_list|,
name|jConstraint
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|isConstrained
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple constraints for field %s in parsed FieldQuery!"
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" - all Constraints:\n"
argument_list|,
name|constraints
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" - ignore Constraint:\n %s"
argument_list|,
name|jConstraint
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Constraint
name|constraint
init|=
name|parseConstraint
argument_list|(
name|jConstraint
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraint
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|field
argument_list|,
name|parseConstraint
argument_list|(
name|jConstraint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// log unparseable constraint (specific warning already
comment|// given by the parseConstraint method
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" - ignore Constraint:\n %s"
argument_list|,
name|jConstraint
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//no field defined -> ignroe and write warning!
name|log
operator|.
name|warn
argument_list|(
literal|"Earch Constraint of a FieldQuery MUST define the key \"field\"!"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Constraint:\n %s"
argument_list|,
name|jConstraint
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//parse selected fields
name|JSONArray
name|selected
init|=
name|jQuery
operator|.
name|optJSONArray
argument_list|(
literal|"selected"
argument_list|)
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selected
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|selectedField
init|=
name|selected
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedField
operator|!=
literal|null
operator|&&
operator|!
name|selectedField
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|addSelectedField
argument_list|(
name|selectedField
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//else no selected fields -> funny but maybe someone do need only the ids
comment|//parse limit and offset
if|if
condition|(
name|jQuery
operator|.
name|has
argument_list|(
literal|"limit"
argument_list|)
operator|&&
operator|!
name|jQuery
operator|.
name|isNull
argument_list|(
literal|"limit"
argument_list|)
condition|)
block|{
name|query
operator|.
name|setLimit
argument_list|(
name|jQuery
operator|.
name|getInt
argument_list|(
literal|"limit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jQuery
operator|.
name|has
argument_list|(
literal|"offset"
argument_list|)
operator|&&
operator|!
name|jQuery
operator|.
name|isNull
argument_list|(
literal|"offset"
argument_list|)
condition|)
block|{
name|query
operator|.
name|setOffset
argument_list|(
name|jQuery
operator|.
name|getInt
argument_list|(
literal|"offset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|private
specifier|static
name|Constraint
name|parseConstraint
parameter_list|(
name|JSONObject
name|jConstraint
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|jConstraint
operator|.
name|has
argument_list|(
literal|"type"
argument_list|)
operator|&&
operator|!
name|jConstraint
operator|.
name|isNull
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|jConstraint
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
comment|//Event that internally "reference" is not part of the
comment|//ConstraintType enum it is still present in the serialisation
comment|//ant the Java API (see ReferenceConstraint class)
comment|//Value constraints with the dataType Reference and AnyURI are
comment|//considered to represent reference constraints
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"reference"
argument_list|)
condition|)
block|{
return|return
name|parseReferenceConstraint
argument_list|(
name|jConstraint
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ConstraintType
operator|.
name|value
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|parseValueConstraint
argument_list|(
name|jConstraint
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ConstraintType
operator|.
name|text
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|parseTextConstraint
argument_list|(
name|jConstraint
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ConstraintType
operator|.
name|range
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|parseRangeConstraint
argument_list|(
name|jConstraint
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unknown Constraint Type %s. Supported values are %s"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"reference"
argument_list|,
name|ConstraintType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Earch Constraint MUST HAVE the \"type\" key set to one of the values %s"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"reference"
argument_list|,
name|ConstraintType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @param jConstraint      * @return      * @throws JSONException      */
specifier|private
specifier|static
name|Constraint
name|parseRangeConstraint
parameter_list|(
name|JSONObject
name|jConstraint
parameter_list|)
throws|throws
name|JSONException
block|{
name|Constraint
name|constraint
decl_stmt|;
name|boolean
name|inclusive
decl_stmt|;
if|if
condition|(
name|jConstraint
operator|.
name|has
argument_list|(
literal|"inclusive"
argument_list|)
condition|)
block|{
name|inclusive
operator|=
name|jConstraint
operator|.
name|getBoolean
argument_list|(
literal|"inclusive"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"RangeConstraint does not define the field \"inclusive\". Use false as default!"
argument_list|)
expr_stmt|;
name|inclusive
operator|=
literal|false
expr_stmt|;
block|}
name|Object
name|upperBound
init|=
name|jConstraint
operator|.
name|opt
argument_list|(
literal|"upperBound"
argument_list|)
decl_stmt|;
name|Object
name|lowerBound
init|=
name|jConstraint
operator|.
name|opt
argument_list|(
literal|"lowerBound"
argument_list|)
decl_stmt|;
if|if
condition|(
name|upperBound
operator|==
literal|null
operator|&&
name|lowerBound
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Range Constraint does not define an \"upperBound\" nor an \"lowerBound\"! At least MUST BE parsed for a valid RangeConstraint."
argument_list|)
expr_stmt|;
name|constraint
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|constraint
operator|=
operator|new
name|RangeConstraint
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|inclusive
argument_list|)
expr_stmt|;
block|}
return|return
name|constraint
return|;
block|}
comment|/**      * @param jConstraint      * @return      * @throws JSONException      */
specifier|private
specifier|static
name|Constraint
name|parseTextConstraint
parameter_list|(
name|JSONObject
name|jConstraint
parameter_list|)
throws|throws
name|JSONException
block|{
name|Constraint
name|constraint
decl_stmt|;
name|boolean
name|caseSensitive
init|=
name|jConstraint
operator|.
name|optBoolean
argument_list|(
literal|"caseSensitive"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//parse patternType
name|PatternType
name|patternType
decl_stmt|;
name|String
name|jPatternType
init|=
name|jConstraint
operator|.
name|optString
argument_list|(
literal|"patternType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jPatternType
operator|==
literal|null
condition|)
block|{
name|patternType
operator|=
name|PatternType
operator|.
name|none
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|patternType
operator|=
name|PatternType
operator|.
name|valueOf
argument_list|(
name|jPatternType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Encountered unknown patternType for TextConstraint! Will use default value %s (allowed values are: %s)"
argument_list|,
name|jPatternType
argument_list|,
name|PatternType
operator|.
name|none
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|PatternType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|patternType
operator|=
name|PatternType
operator|.
name|none
expr_stmt|;
block|}
block|}
comment|//parse languages
name|Collection
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
name|JSONArray
name|jLanguages
init|=
name|jConstraint
operator|.
name|optJSONArray
argument_list|(
literal|"languages"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jLanguages
operator|!=
literal|null
operator|&&
name|jLanguages
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|languages
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|jLanguages
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jLanguages
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|lang
init|=
name|jLanguages
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
operator|!
name|lang
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languages
operator|.
name|add
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|languages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languages
operator|=
literal|null
expr_stmt|;
comment|//if no one was successfully added set the list back to null
block|}
block|}
else|else
block|{
name|languages
operator|=
literal|null
expr_stmt|;
block|}
comment|//parse text and create constraint
if|if
condition|(
name|jConstraint
operator|.
name|has
argument_list|(
literal|"text"
argument_list|)
operator|&&
operator|!
name|jConstraint
operator|.
name|isNull
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|constraint
operator|=
operator|new
name|TextConstraint
argument_list|(
name|jConstraint
operator|.
name|getString
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|patternType
argument_list|,
name|caseSensitive
argument_list|,
name|languages
operator|==
literal|null
condition|?
literal|null
else|:
name|languages
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|languages
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Parsed TextConstraint doese not define the required field \"text\"!"
argument_list|)
expr_stmt|;
name|constraint
operator|=
literal|null
expr_stmt|;
block|}
name|TextConstraint
name|textConstraint
init|=
operator|(
name|TextConstraint
operator|)
name|constraint
decl_stmt|;
if|if
condition|(
name|textConstraint
operator|.
name|getLanguages
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|textConstraint
operator|.
name|getLanguages
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jConstraint
operator|.
name|put
argument_list|(
literal|"languages"
argument_list|,
operator|new
name|JSONArray
argument_list|(
name|textConstraint
operator|.
name|getLanguages
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jConstraint
operator|.
name|put
argument_list|(
literal|"patternType"
argument_list|,
name|textConstraint
operator|.
name|getPatternType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|textConstraint
operator|.
name|getText
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|textConstraint
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jConstraint
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
name|textConstraint
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|constraint
return|;
block|}
comment|/**      * @param jConstraint      * @return      * @throws JSONException      */
specifier|private
specifier|static
name|Constraint
name|parseValueConstraint
parameter_list|(
name|JSONObject
name|jConstraint
parameter_list|)
throws|throws
name|JSONException
block|{
name|Constraint
name|constraint
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|dataTypes
decl_stmt|;
name|JSONArray
name|jDataTypes
init|=
name|jConstraint
operator|.
name|optJSONArray
argument_list|(
literal|"dataTypes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jDataTypes
operator|!=
literal|null
operator|&&
name|jDataTypes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dataTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|jDataTypes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jDataTypes
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dataType
init|=
name|jDataTypes
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataType
operator|!=
literal|null
operator|&&
operator|!
name|dataType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataTypes
operator|.
name|add
argument_list|(
name|dataType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataTypes
operator|=
literal|null
expr_stmt|;
comment|//if no one was successfully added set the list back to null
block|}
block|}
else|else
block|{
name|dataTypes
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|jConstraint
operator|.
name|has
argument_list|(
literal|"value"
argument_list|)
operator|&&
operator|!
name|jConstraint
operator|.
name|isNull
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|constraint
operator|=
operator|new
name|ValueConstraint
argument_list|(
name|jConstraint
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|dataTypes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Parsed ValueConstraint doese not define the required field \"value\"!"
argument_list|)
expr_stmt|;
name|constraint
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|constraint
return|;
block|}
comment|/**      * @param jConstraint      * @return      * @throws JSONException      */
specifier|private
specifier|static
name|Constraint
name|parseReferenceConstraint
parameter_list|(
name|JSONObject
name|jConstraint
parameter_list|)
throws|throws
name|JSONException
block|{
name|Constraint
name|constraint
decl_stmt|;
if|if
condition|(
name|jConstraint
operator|.
name|has
argument_list|(
literal|"value"
argument_list|)
operator|&&
operator|!
name|jConstraint
operator|.
name|isNull
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|constraint
operator|=
operator|new
name|ReferenceConstraint
argument_list|(
name|jConstraint
operator|.
name|getString
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Parsed ValueConstraint doese not define the required field \"value\"!"
argument_list|)
expr_stmt|;
name|constraint
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|constraint
return|;
block|}
block|}
end_class

end_unit

