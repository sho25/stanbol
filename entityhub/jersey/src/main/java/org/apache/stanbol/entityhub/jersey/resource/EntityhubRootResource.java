begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/entityhub"
argument_list|)
specifier|public
class|class
name|EntityhubRootResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityhubRootResource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * used to extract the mediaType for the response based on the Accept      * header of the request.      */
specifier|private
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|ENTITY_SUPPORTED_MEDIA_TYPE_INCL_HTML
decl_stmt|;
static|static
block|{
name|ENTITY_SUPPORTED_MEDIA_TYPE_INCL_HTML
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|)
expr_stmt|;
name|ENTITY_SUPPORTED_MEDIA_TYPE_INCL_HTML
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
block|}
comment|/**      * The default search field for /find queries is the entityhub-maodel:label      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FIND_FIELD
init|=
name|RdfResourceEnum
operator|.
name|label
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The default number of maximal results of searched sites.      */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FIND_RESULT_LIMIT
init|=
literal|5
decl_stmt|;
comment|/**      * The default result fields for /find queries is the entityhub-maodel:label and the      * entityhub-maodel:description.      */
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|DEFAULT_FIND_SELECTED_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|RdfResourceEnum
operator|.
name|label
operator|.
name|getUri
argument_list|()
argument_list|,
name|RdfResourceEnum
operator|.
name|description
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ServletContext
name|context
decl_stmt|;
comment|// bind the job manager by looking it up from the servlet request context
specifier|public
name|EntityhubRootResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|get
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"entity"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|,
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|getSymbol
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|symbolId
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"GET /entity Request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> id: "
operator|+
name|symbolId
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept: "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|ENTITY_SUPPORTED_MEDIA_TYPE_INCL_HTML
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedMediaType
operator|.
name|isCompatible
argument_list|(
name|TEXT_HTML_TYPE
argument_list|)
operator|&&
name|symbolId
operator|==
literal|null
condition|)
block|{
comment|//return HTML docu
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"entity"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|symbolId
operator|==
literal|null
operator|||
name|symbolId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: how to parse an error message
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Entity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|entityhub
operator|.
name|getEntity
argument_list|(
name|symbolId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|NOT_FOUND
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"lookup"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|,
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|lookupSymbol
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|reference
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"create"
argument_list|)
name|boolean
name|create
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"GET /lookup Request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> id: "
operator|+
name|reference
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> create   : "
operator|+
name|create
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept: "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|ENTITY_SUPPORTED_MEDIA_TYPE_INCL_HTML
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedMediaType
operator|.
name|isCompatible
argument_list|(
name|TEXT_HTML_TYPE
argument_list|)
operator|&&
name|reference
operator|==
literal|null
condition|)
block|{
comment|//return docu
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"lookup"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|reference
operator|==
literal|null
operator|||
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: how to parse an error message
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Entity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|entityhub
operator|.
name|lookupLocalEntity
argument_list|(
name|reference
argument_list|,
name|create
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No symbol found for '"
operator|+
name|reference
operator|+
literal|"'."
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"entity/"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|createEntity
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
name|Set
argument_list|<
name|Representation
argument_list|>
name|parsed
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
comment|//Set<Representation> representations = Collections.emptySet();
comment|//log.info("Test: "+test);
name|log
operator|.
name|info
argument_list|(
literal|"Headers: "
operator|+
name|headers
operator|.
name|getRequestHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Entity: "
operator|+
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Representations : "
operator|+
name|parsed
argument_list|)
expr_stmt|;
return|return
name|updateOrCreateEntity
argument_list|(
name|id
argument_list|,
name|parsed
argument_list|,
literal|true
argument_list|,
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"entity/"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|updateEntity
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
name|Set
argument_list|<
name|Representation
argument_list|>
name|parsed
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
comment|//Set<Representation> representations = Collections.emptySet();
comment|//log.info("Test: "+test);
name|log
operator|.
name|info
argument_list|(
literal|"Headers: "
operator|+
name|headers
operator|.
name|getRequestHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Entity: "
operator|+
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Representations : "
operator|+
name|parsed
argument_list|)
expr_stmt|;
return|return
name|updateOrCreateEntity
argument_list|(
name|id
argument_list|,
name|parsed
argument_list|,
literal|false
argument_list|,
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"entity"
argument_list|)
specifier|public
name|Response
name|deleteEntity
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|MediaType
name|accepted
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The Request does"
operator|+
literal|"not provide the id of the Entity to delete (parameter 'id')."
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Entity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|entityhub
operator|.
name|delete
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"An Entity with the"
operator|+
literal|"parsed id "
operator|+
name|id
operator|+
literal|" is not managed by the Entityhub"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|accepted
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * Implements the creation/update of Representations within the Entityhub.      * @param id the id of the resource to create or update. If not       *<code>null</code> all parsed Representations with other      * ids will be ignored.      * @param parsed the parsed representation(s)      * @param createState create or update request      * @param accepted the accepted media type for the response      * @return the created/updated representation as response      */
specifier|private
name|Response
name|updateOrCreateEntity
parameter_list|(
name|String
name|id
parameter_list|,
name|Set
argument_list|<
name|Representation
argument_list|>
name|parsed
parameter_list|,
name|boolean
name|createState
parameter_list|,
name|MediaType
name|accepted
parameter_list|)
block|{
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityhub
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The Entityhub is currently unavailable."
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//(1) if an id is parsed we need to filter parsed Representations
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Representation
argument_list|>
name|it
init|=
name|parsed
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Representation
name|rep
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|aboutId
init|=
name|ModelUtils
operator|.
name|getAboutRepresentation
argument_list|(
name|rep
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|id
operator|.
name|equals
argument_list|(
name|rep
operator|.
name|getId
argument_list|()
argument_list|)
operator|||
name|id
operator|.
name|equals
argument_list|(
name|aboutId
argument_list|)
operator|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|//not the Entity nor the metadata of the parsed ID
block|}
block|}
block|}
comment|//First check if all parsed Representation can be created/updated
for|for
control|(
name|Representation
name|representation
range|:
name|parsed
control|)
block|{
name|boolean
name|exists
decl_stmt|;
try|try
block|{
name|exists
operator|=
name|entityhub
operator|.
name|isRepresentation
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception while checking the existance "
operator|+
literal|"of an Entity with id  %s in the Entityhub."
argument_list|,
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to %s Entity %s because of"
operator|+
literal|"an Error while checking the current version of that"
operator|+
literal|"Entity within the Entityhub (Message: %s)"
argument_list|,
name|createState
condition|?
literal|"create"
else|:
literal|"update"
argument_list|,
name|representation
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|createState
operator|==
name|exists
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to %s an Entity that %s exist"
argument_list|,
name|createState
condition|?
literal|"create"
else|:
literal|"update"
argument_list|,
name|exists
condition|?
literal|"does already"
else|:
literal|"does not"
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|//store the Representations
comment|//If someone parses data for more than a single Entity, but does not
comment|//provide an ID for the Entity to update, this will update/create all
comment|//the parsed entity. However the response can only return a single
comment|//Entity!
comment|//This can not be changed easily as long as there are no local URIs
comment|//for remote Entiteis as suggested by
comment|// http://incubator.apache.org/stanbol/docs/trunk/entityhub/entityhubandlinkeddata.html
name|Map
argument_list|<
name|String
argument_list|,
name|Entity
argument_list|>
name|updated
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Representation
name|representation
range|:
name|parsed
control|)
block|{
try|try
block|{
name|Entity
name|entity
init|=
name|entityhub
operator|.
name|store
argument_list|(
name|representation
argument_list|)
decl_stmt|;
name|updated
operator|.
name|put
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception while %s representation %s"
operator|+
literal|"in the Entityhub."
argument_list|,
name|createState
condition|?
literal|"create"
else|:
literal|"update"
argument_list|,
name|representation
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//create the response for the Entity
comment|// for now directly return the added entity. one could also
comment|// consider returning a seeOther (303) with the get URI for the
comment|// created/updated entity
if|if
condition|(
name|updated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No (valid) data parsed
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_MODIFIED
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|Entity
name|entity
init|=
name|updated
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|createState
condition|)
block|{
return|return
name|Response
operator|.
name|created
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePathBuilder
argument_list|()
operator|.
name|queryParam
argument_list|(
literal|"id"
argument_list|,
literal|"{entityId}"
argument_list|)
operator|.
name|build
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|//return Response.noContent().build();
comment|//As alternative return the modified entity
return|return
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|accepted
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//            if (updated.size() == 1){
comment|//                return Response.status(createState? Status.CREATED:Status.OK)
comment|//                .entity(updated.values().iterator().next())
comment|//                .header(HttpHeaders.ACCEPT, accepted).build();
comment|//            } else { //implement serializer for list of Entitis!
comment|//                return Response.status(createState? Status.CREATED:Status.OK)
comment|//                .entity(updated.values())
comment|//                .header(HttpHeaders.ACCEPT, accepted).build();
comment|//            }
block|}
comment|//return Response.seeOther(uriInfo.getAbsolutePath()).build();
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|,
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|findEntityByGet
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
name|Integer
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
name|Integer
name|offset
parameter_list|,
comment|// TODO: Jersey supports parsing multiple values in Collections.
comment|// Use this feature here instead of using this hand crafted
comment|// solution!
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"select"
argument_list|)
name|String
name|select
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|findEntity
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|language
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|,
name|select
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|,
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|findEntity
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
name|Integer
name|limit
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
name|Integer
name|offset
parameter_list|,
comment|// TODO: Jersey supports parsing multiple values in Collections.
comment|// Use this feature here instead of using this hand crafted
comment|// solution!
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"select"
argument_list|)
name|String
name|select
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"/find Request"
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|ENTITY_SUPPORTED_MEDIA_TYPE_INCL_HTML
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|acceptedMediaType
operator|.
name|isCompatible
argument_list|(
name|TEXT_HTML_TYPE
argument_list|)
condition|)
block|{
comment|//return HTML docu
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"find"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The name must not be null nor empty for find requests. Missing parameter name.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|field
operator|==
literal|null
operator|||
name|field
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|field
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|FieldQuery
name|query
init|=
name|JerseyUtils
operator|.
name|createFieldQueryForFindRequest
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|language
argument_list|,
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<
literal|1
condition|?
name|DEFAULT_FIND_RESULT_LIMIT
else|:
name|limit
argument_list|,
name|offset
argument_list|)
decl_stmt|;
comment|// For the Entityhub we support to select additional fields for results
comment|// of find requests. For the Sites and {site} endpoint this is currently
comment|// deactivated because of very bad performance with OPTIONAL graph patterns
comment|// in SPARQL queries.
name|Collection
argument_list|<
name|String
argument_list|>
name|additionalSelectedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|select
operator|==
literal|null
operator|||
name|select
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|additionalSelectedFields
operator|.
name|addAll
argument_list|(
name|DEFAULT_FIND_SELECTED_FIELDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|selected
range|:
name|select
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
block|{
if|if
condition|(
name|selected
operator|!=
literal|null
operator|&&
operator|!
name|selected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|additionalSelectedFields
operator|.
name|add
argument_list|(
name|selected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|query
operator|.
name|addSelectedFields
argument_list|(
name|additionalSelectedFields
argument_list|)
expr_stmt|;
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
name|acceptedMediaType
argument_list|)
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
specifier|public
name|Response
name|getQueryDocumentation
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"query"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Allows to parse any kind of {@link FieldQuery} in its JSON Representation.      *<p>      * TODO: as soon as the entityhub supports multiple query types this need to be refactored. The idea is      * that this dynamically detects query types and than redirects them to the referenced site      * implementation.      *       * @param query The field query in JSON format      * @param headers the header information of the request      * @return the results of the query      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
comment|//@Consumes( {APPLICATION_FORM_URLENCODED + ";qs=1.0", MULTIPART_FORM_DATA + ";qs=0.9"})
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Response
name|queryEntities
parameter_list|(
comment|/*@FormParam("query")*/
name|FieldQuery
name|query
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|JerseyUtils
operator|.
name|QUERY_RESULT_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
operator|&&
name|MediaType
operator|.
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
return|return
name|getQueryDocumentation
argument_list|()
return|;
block|}
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
name|acceptedMediaType
argument_list|)
return|;
block|}
comment|/**      * Executes the query parsed by {@link #queryEntities(String, File, HttpHeaders)}      * or created based {@link #findEntity(String, String, String, String, HttpHeaders)      * @param query The query to execute      * @param headers The headers used to determine the media types      * @return the response (results of error)      */
specifier|private
name|Response
name|executeQuery
parameter_list|(
name|FieldQuery
name|query
parameter_list|,
name|MediaType
name|acceptedMediaType
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|entityhub
operator|.
name|find
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception while performing the FieldQuery on the EntityHub"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Query:\n"
operator|+
name|query
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/*--------------------------------------------------------------------------      * Methods for EntityMappings      *--------------------------------------------------------------------------      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"mapping"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|,
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|getMapping
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|reference
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"get mapping for request> id : {}> accept: {}"
argument_list|,
name|reference
argument_list|,
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|REPRESENTATION_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
operator|||
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//if HTML -> print the docu of the restfull service
if|if
condition|(
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"mapping"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The mapping id (URI) is missing.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Entity
name|mapping
decl_stmt|;
try|try
block|{
name|mapping
operator|=
name|entityhub
operator|.
name|getMappingById
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"error while getting the mapping for {}"
argument_list|,
name|reference
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No mapping found for '"
operator|+
name|reference
operator|+
literal|"'.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|mapping
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// see NOTE to RESTful Service Documentation in the header
comment|//    @GET
comment|//    @Path("/entity")
comment|//    @Produces(MediaType.TEXT_HTML)
comment|//    public Response getEntityMappingPage() {
comment|//        return Response.ok(new Viewable("entity", this))
comment|//        .header(HttpHeaders.CONTENT_TYPE, TEXT_HTML+"; charset=utf-8").build();
comment|//    }
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"mapping/entity"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|,
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|getEntityMapping
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|entity
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getEntityMapping() POST Request> entity: {}> accept: {}"
argument_list|,
name|entity
argument_list|,
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|REPRESENTATION_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//if HTML -> print the docu of the restfull service
if|if
condition|(
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"mapping_entity"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No entity given. Missing parameter id.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Entity
name|mapping
decl_stmt|;
try|try
block|{
name|mapping
operator|=
name|entityhub
operator|.
name|getMappingBySource
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No mapping found for entity '"
operator|+
name|entity
operator|+
literal|"'.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|mapping
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// see NOTE to RESTful Service Documentation in the header
comment|//    @GET
comment|//    @Path("mapping/symbol")
comment|//    @Produces(MediaType.TEXT_HTML)
comment|//    public Response getSymbolMappingPage() {
comment|//        return Response.ok(new Viewable("symbol", this))
comment|//        .header(HttpHeaders.CONTENT_TYPE, TEXT_HTML+"; charset=utf-8").build();
comment|//    }
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"mapping/symbol"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|,
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|getSymbolMappings
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|symbol
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getSymbolMappings() POST Request> symbol: {}> accept: {}"
argument_list|,
name|symbol
argument_list|,
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|REPRESENTATION_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbol
operator|==
literal|null
operator|||
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//if HTML -> print the docu of the restfull service
if|if
condition|(
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"mapping_symbol"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No symbol given. Missing parameter id.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|Entityhub
name|entityhub
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Entityhub
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Entity
argument_list|>
name|mappings
decl_stmt|;
try|try
block|{
name|mappings
operator|=
name|entityhub
operator|.
name|getMappingsByTarget
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|mappings
operator|==
literal|null
operator|||
name|mappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No mapping found for symbol '"
operator|+
name|symbol
operator|+
literal|"'.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO: Implement Support for list of Signs, Representations and Strings
comment|// For now use a pseudo QueryResultList
name|QueryResultList
argument_list|<
name|Entity
argument_list|>
name|mappingResultList
init|=
operator|new
name|QueryResultListImpl
argument_list|<
name|Entity
argument_list|>
argument_list|(
literal|null
argument_list|,
name|mappings
argument_list|,
name|Entity
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|mappingResultList
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

