begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
operator|.
name|REPRESENTATION_SUPPORTED_MEDIA_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
operator|.
name|createFieldQueryForFindRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
operator|.
name|getAcceptableMediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|parsers
operator|.
name|FieldQueryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_comment
comment|/**  * Resource to provide a REST API for the {@link ReferencedSiteManager}  *<p/>  * TODO: add description  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/entityhub/site/{site}"
argument_list|)
specifier|public
class|class
name|ReferencedSiteRootResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RDF_MEDIA_TYPES
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SupportedFormat
operator|.
name|N3
argument_list|,
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|,
name|SupportedFormat
operator|.
name|X_TURTLE
argument_list|,
name|SupportedFormat
operator|.
name|RDF_JSON
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The relative path used to publish the license.      */
specifier|public
specifier|static
specifier|final
name|String
name|LICENSE_PATH
init|=
literal|"license"
decl_stmt|;
comment|/**      * The name of the resource used for Licenses of no {@link License#getUrl()}       * is present      */
specifier|private
specifier|static
specifier|final
name|String
name|LICENSE_NAME
init|=
literal|"LICENSE"
decl_stmt|;
comment|/**      * The Field used for find requests if not specified TODO: This will be replaced by the EntitySearch. With      * this search the Site is responsible to decide what properties to use for label based searches.      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FIND_FIELD
init|=
name|RDFS
operator|.
name|label
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
comment|/**      * The Field used as default as selected fields for find requests TODO: Make configurable via the      * {@link ConfiguredSite} interface! NOTE: This feature is deactivated, because OPTIONAL selects do have      * very weak performance when using SPARQL endpoints      */
comment|// private static final Collection<String> DEFAULT_FIND_SELECTED_FIELDS =
comment|// Arrays.asList(RDFS.comment.getUnicodeString());
comment|/**      * The default number of maximal results.      */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FIND_RESULT_LIMIT
init|=
literal|5
decl_stmt|;
specifier|private
name|ReferencedSite
name|site
decl_stmt|;
specifier|public
name|ReferencedSiteRootResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"site"
argument_list|)
name|String
name|siteId
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"<init> with site {}"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
name|ReferencedSiteManager
name|referencedSiteManager
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|ReferencedSiteManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|siteId
operator|==
literal|null
operator|||
name|siteId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing path parameter site={}"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
name|site
operator|=
name|referencedSiteManager
operator|.
name|getReferencedSite
argument_list|(
name|siteId
argument_list|)
expr_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Site {} not found (no referenced site with that ID is present within the Entityhub"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getHtmlInfo
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Provides metadata about this referenced site as representation      * @param headers the request headers used to get the requested {@link MediaType}      * @param uriInfo used to get the URI of the current request      * @return the response      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|}
argument_list|)
specifier|public
name|Response
name|getInfo
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|REPRESENTATION_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|site2Representation
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|value
operator|=
name|ReferencedSiteRootResource
operator|.
name|LICENSE_PATH
operator|+
literal|"/{name}"
argument_list|)
specifier|public
name|Response
name|getLicenseInfo
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|)
block|{
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//return all
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|LICENSE_NAME
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|numberString
init|=
name|name
operator|.
name|substring
argument_list|(
name|LICENSE_NAME
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|numberString
operator|=
literal|"0"
expr_stmt|;
block|}
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
comment|//license0 is the first one
if|if
condition|(
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLicenses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|License
name|license
range|:
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLicenses
argument_list|()
control|)
block|{
if|if
condition|(
name|license
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
operator|.
name|equals
argument_list|(
name|numberString
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|license2Representation
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|license
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No License found.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Cool URI handler for Signs.      *       * @param id      *            The id of the entity (required)      * @param headers      *            the request headers used to get the requested {@link MediaType}      * @return a redirection to either a browser view, the RDF meta data or the raw binary content      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entity"
argument_list|)
specifier|public
name|Response
name|getEntityById
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"site/{}/entity Request"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> id       : "
operator|+
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept   : "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> mediaType: "
operator|+
name|headers
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"entity"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No or empty ID was parsed. Missing parameter id.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"handle Request for Entity {} of Site {}"
argument_list|,
name|id
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Entity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|site
operator|.
name|getEntity
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReferencedSiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ReferencedSiteException while accessing Site "
operator|+
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (id="
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO: How to parse an ErrorMessage?
comment|// create an Response with the the Error?
name|log
operator|.
name|info
argument_list|(
literal|" ... Entity {} not found on referenced site {}"
argument_list|,
name|id
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Entity '"
operator|+
name|id
operator|+
literal|"' not found on referenced site '"
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|"'\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
specifier|public
name|Response
name|findEntitybyGet
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
comment|// @QueryParam(value="select") String select,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"-1"
argument_list|)
name|int
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"0"
argument_list|)
name|int
name|offset
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|findEntity
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|language
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
specifier|public
name|Response
name|findEntity
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
comment|// @FormParam(value="select") String select,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
name|Integer
name|limit
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
name|Integer
name|offset
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"site/{}/find Request"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|QUERY_RESULT_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"find"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The name must not be null nor empty for find requests. Missing parameter name.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|// process the optional search field parameter
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|field
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
block|}
return|return
name|executeQuery
argument_list|(
name|createFieldQueryForFindRequest
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|language
argument_list|,
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<
literal|1
condition|?
name|DEFAULT_FIND_RESULT_LIMIT
else|:
name|limit
argument_list|,
name|offset
argument_list|)
argument_list|,
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Allows to parse any kind of {@link FieldQuery} in its JSON Representation.       * Note that the maximum number of results (limit) and the offset of the       *<p>      * TODO: as soon as the entityhub supports multiple query types this need to be refactored. The idea is      * that this dynamically detects query types and than redirects them to the referenced site      * implementation.      * @param query The field query as parsed by {@link FieldQueryReader}      * @param headers the header information of the request      * @return the results of the query      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Response
name|queryEntities
parameter_list|(
name|FieldQuery
name|query
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getQueryDocumentation
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"query"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Executes the query parsed by {@link #queryEntities(String, File, HttpHeaders)} or created based      * {@link #findEntity(String, String, String, int, int, HttpHeaders)}      *       * @param query      *            The query to execute      * @param headers      *            The headers used to determine the media types      * @return the response (results of error)      */
specifier|private
name|Response
name|executeQuery
parameter_list|(
name|FieldQuery
name|query
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
throws|throws
name|WebApplicationException
block|{
try|try
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|site
operator|.
name|find
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReferencedSiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ReferencedSiteException while accessing Site "
operator|+
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (id="
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/**      * Transforms a site to a Representation that can be serialised       * @param context      * @return      */
specifier|private
name|Representation
name|site2Representation
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|RdfRepresentation
name|rep
init|=
name|valueFactory
operator|.
name|createRepresentation
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|NamespaceEnum
operator|.
name|entityhubModel
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"localMode"
argument_list|,
name|site
operator|.
name|supportsLocalMode
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"supportsSearch"
argument_list|,
name|site
operator|.
name|supportsSearch
argument_list|()
argument_list|)
expr_stmt|;
name|SiteConfiguration
name|config
init|=
name|site
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|namespace
operator|+
literal|"ReferencedSite"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"description"
argument_list|,
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCacheStrategy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"cacheStrategy"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|namespace
operator|+
literal|"cacheStrategy-"
operator|+
name|config
operator|.
name|getCacheStrategy
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add the accessUri and queryUri
if|if
condition|(
name|config
operator|.
name|getAccessUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"accessUri"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|config
operator|.
name|getAccessUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getQueryUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"queryUri"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|config
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getAttribution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"attributionName"
argument_list|,
name|config
operator|.
name|getAttribution
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getAttributionUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"attributionURL"
argument_list|,
name|config
operator|.
name|getAttributionUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//add the licenses
if|if
condition|(
name|config
operator|.
name|getLicenses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|config
operator|.
name|getLicenses
argument_list|()
control|)
block|{
name|String
name|licenseUrl
decl_stmt|;
if|if
condition|(
name|license
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|licenseUrl
operator|=
name|license
operator|.
name|getUrl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|licenseUrl
operator|=
name|id
operator|+
operator|(
operator|!
name|id
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
else|:
literal|""
operator|)
operator|+
name|LICENSE_PATH
operator|+
literal|'/'
operator|+
name|LICENSE_NAME
operator|+
operator|(
name|count
operator|>
literal|0
condition|?
name|count
else|:
literal|""
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|//if defined add the name to dc:license
if|if
condition|(
name|license
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|licenseUrl
argument_list|)
expr_stmt|;
block|}
comment|//link to the license via cc:license
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|licenseUrl
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getEntityPrefixes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|config
operator|.
name|getEntityPrefixes
argument_list|()
control|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"entityPrefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//all entities are allowed/processed
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"entityPrefix"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
return|return
name|rep
return|;
block|}
specifier|private
name|Representation
name|license2Representation
parameter_list|(
name|String
name|id
parameter_list|,
name|License
name|license
parameter_list|)
block|{
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|RdfRepresentation
name|rep
init|=
name|valueFactory
operator|.
name|createRepresentation
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|license
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"title"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|license
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"description"
argument_list|,
name|license
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"licenseUrl"
argument_list|,
name|license
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|?
name|id
else|:
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rep
return|;
block|}
block|}
end_class

end_unit

