begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|PUT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|N_TRIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|utils
operator|.
name|MediaTypeUtil
operator|.
name|getAcceptableMediaType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
operator|.
name|REPRESENTATION_SUPPORTED_MEDIA_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
operator|.
name|createFieldQueryForFindRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|LDPathHelper
operator|.
name|getLDPathParseExceptionMessage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|LDPathHelper
operator|.
name|handleLDPathRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|LDPathHelper
operator|.
name|prepareQueryLDPathProgram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|LDPathHelper
operator|.
name|transformQueryResults
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|parsers
operator|.
name|FieldQueryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|EntityhubLDPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|SiteBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|query
operator|.
name|LDPathSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ManagedSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ManagedSiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|AdaptingIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|builtins
operator|.
name|GE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|ldviewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|research
operator|.
name|ws
operator|.
name|wadl
operator|.
name|HTTPMethods
import|;
end_import

begin_comment
comment|/**  * Resource to provide a REST API for the {@link SiteManager}  *<p/>  * TODO: add description  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/entityhub/site/{site}"
argument_list|)
specifier|public
class|class
name|ReferencedSiteRootResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RDF_MEDIA_TYPES
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SupportedFormat
operator|.
name|N3
argument_list|,
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|,
name|SupportedFormat
operator|.
name|X_TURTLE
argument_list|,
name|SupportedFormat
operator|.
name|RDF_JSON
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The relative path used to publish the license.      */
specifier|public
specifier|static
specifier|final
name|String
name|LICENSE_PATH
init|=
literal|"license"
decl_stmt|;
comment|/**      * The name of the resource used for Licenses of no {@link License#getUrl()}       * is present      */
specifier|private
specifier|static
specifier|final
name|String
name|LICENSE_NAME
init|=
literal|"LICENSE"
decl_stmt|;
comment|/**      * The Field used for find requests if not specified TODO: This will be replaced by the EntitySearch. With      * this search the Site is responsible to decide what properties to use for label based searches.      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FIND_FIELD
init|=
name|RDFS
operator|.
name|label
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
comment|/**      * The Field used as default as selected fields for find requests TODO: Make configurable via the      * {@link ConfiguredSite} interface! NOTE: This feature is deactivated, because OPTIONAL selects do have      * very weak performance when using SPARQL endpoints      */
comment|// private static final Collection<String> DEFAULT_FIND_SELECTED_FIELDS =
comment|// Arrays.asList(RDFS.comment.getUnicodeString());
comment|/**      * The default number of maximal results.      */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FIND_RESULT_LIMIT
init|=
literal|5
decl_stmt|;
specifier|private
name|Site
name|site
decl_stmt|;
specifier|public
name|ReferencedSiteRootResource
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"site"
argument_list|)
name|String
name|siteId
parameter_list|,
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"<init> with site {}"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
name|SiteManager
name|referencedSiteManager
init|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SiteManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|siteId
operator|==
literal|null
operator|||
name|siteId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing path parameter site={}"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
name|site
operator|=
name|referencedSiteManager
operator|.
name|getSite
argument_list|(
name|siteId
argument_list|)
expr_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Site {} not found (no referenced site with that ID is present within the Entityhub"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
if|if
condition|(
name|site
operator|instanceof
name|ManagedSite
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   ... init ManagedSite"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getHtmlInfo
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Provides metadata about this referenced site as representation      * @param headers the request headers used to get the requested {@link MediaType}      * @param uriInfo used to get the URI of the current request      * @return the response      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|APPLICATION_JSON
block|,
name|RDF_XML
block|,
name|N3
block|,
name|TURTLE
block|,
name|X_TURTLE
block|,
name|RDF_JSON
block|,
name|N_TRIPLE
block|}
argument_list|)
specifier|public
name|Response
name|getInfo
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|MediaType
name|acceptedMediaType
init|=
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|REPRESENTATION_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|site2Representation
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|value
operator|=
name|ReferencedSiteRootResource
operator|.
name|LICENSE_PATH
operator|+
literal|"/{name}"
argument_list|)
specifier|public
name|Response
name|getLicenseInfo
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|)
block|{
name|MediaType
name|acceptedMediaType
init|=
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//return all
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|LICENSE_NAME
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|numberString
init|=
name|name
operator|.
name|substring
argument_list|(
name|LICENSE_NAME
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|numberString
operator|=
literal|"0"
expr_stmt|;
block|}
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
comment|//license0 is the first one
if|if
condition|(
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLicenses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|License
name|license
range|:
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLicenses
argument_list|()
control|)
block|{
if|if
condition|(
name|license
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
operator|.
name|equals
argument_list|(
name|numberString
argument_list|)
condition|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|license2Representation
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|license
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No License found.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/entity"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightEntity
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
if|if
condition|(
name|site
operator|instanceof
name|ManagedSite
condition|)
block|{
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|,
name|OPTIONS
argument_list|,
name|GET
argument_list|,
name|POST
argument_list|,
name|PUT
argument_list|,
name|DELETE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|,
name|OPTIONS
argument_list|,
name|GET
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Cool URI handler for Signs.      *       * @param id      *            The id of the entity (required)      * @param headers      *            the request headers used to get the requested {@link MediaType}      * @return a redirection to either a browser view, the RDF meta data or the raw binary content      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entity"
argument_list|)
specifier|public
name|Response
name|getEntityById
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"site/{}/entity Request"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> id       : "
operator|+
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> accept   : "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"> mediaType: "
operator|+
name|headers
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"entity"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No or empty ID was parsed. Missing parameter id.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"handle Request for Entity {} of Site {}"
argument_list|,
name|id
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Entity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|site
operator|.
name|getEntity
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ReferencedSiteException while accessing Site "
operator|+
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (id="
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO: How to parse an ErrorMessage?
comment|// create an Response with the the Error?
name|log
operator|.
name|debug
argument_list|(
literal|" ... Entity {} not found on referenced site {}"
argument_list|,
name|id
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Entity '"
operator|+
name|id
operator|+
literal|"' not found on referenced site '"
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|"'\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"entity/"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|createEntity
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"update"
argument_list|)
name|boolean
name|allowUpdate
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|parsed
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
comment|//Set<Representation> representations = Collections.emptySet();
comment|//log.info("Test: "+test);
name|log
operator|.
name|info
argument_list|(
literal|"Headers: "
operator|+
name|headers
operator|.
name|getRequestHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Entity: "
operator|+
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Representations : {} parsed"
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updateOrCreateEntity
argument_list|(
name|id
argument_list|,
name|parsed
argument_list|,
name|HttpMethod
operator|.
name|POST
argument_list|,
literal|true
argument_list|,
name|allowUpdate
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"entity/"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
specifier|public
name|Response
name|updateEntity
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"create"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
name|boolean
name|allowCreate
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|parsed
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
comment|//Set<Representation> representations = Collections.emptySet();
comment|//log.info("Test: "+test);
name|log
operator|.
name|info
argument_list|(
literal|"Headers: "
operator|+
name|headers
operator|.
name|getRequestHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Entity: "
operator|+
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Representations : {} parsed"
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updateOrCreateEntity
argument_list|(
name|id
argument_list|,
name|parsed
argument_list|,
name|HttpMethod
operator|.
name|PUT
argument_list|,
name|allowCreate
argument_list|,
literal|true
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|private
name|Response
name|updateOrCreateEntity
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|parsed
parameter_list|,
name|String
name|requestMethod
parameter_list|,
name|boolean
name|create
parameter_list|,
name|boolean
name|update
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MediaType
name|accepted
init|=
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|ManagedSite
name|managedSite
decl_stmt|;
if|if
condition|(
name|site
operator|instanceof
name|ManagedSite
condition|)
block|{
name|managedSite
operator|=
operator|(
name|ManagedSite
operator|)
name|site
expr_stmt|;
block|}
else|else
block|{
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The Site '%s' is not managed and does not support "
operator|+
literal|"create/update nor delete operations"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|//(1) if an id is parsed we need to ignore all other representations
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|Representation
name|r
init|=
name|parsed
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Parsed RDF data do not contain any "
operator|+
literal|"Information about the parsed id '%s'"
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|parsed
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|id
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|//First check if all parsed Representation can be created/updated
if|if
condition|(
operator|!
operator|(
name|create
operator|&&
name|update
operator|)
condition|)
block|{
comment|//if both create and update are enabled skip this
name|log
operator|.
name|debug
argument_list|(
literal|"   ... validate parsed Representation state (create: {}| update: {})"
argument_list|,
name|create
argument_list|,
name|update
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|entry
range|:
name|parsed
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|exists
decl_stmt|;
try|try
block|{
name|exists
operator|=
name|managedSite
operator|.
name|getEntity
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception while checking the existance "
operator|+
literal|"of an Entity with id  %s in the Entityhub."
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to process Entity %s because of"
operator|+
literal|"an Error while checking the current version of that"
operator|+
literal|"Entity within the Entityhub (Message: %s)"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
operator|(
name|exists
operator|&&
operator|!
name|update
operator|)
operator|||
operator|(
operator|!
name|exists
operator|&&
operator|!
name|create
operator|)
condition|)
block|{
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to %s an Entity %s becuase it %s and %s is deactivated. "
operator|+
literal|" You might want to set the '%s' parameter to TRUE in your Request"
argument_list|,
name|exists
condition|?
literal|"update"
else|:
literal|"create"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|exists
condition|?
literal|"does already exists "
else|:
literal|"does not"
argument_list|,
name|exists
condition|?
literal|"updateing existing"
else|:
literal|"creating new"
argument_list|,
name|exists
condition|?
literal|"does already"
else|:
literal|"does not exists"
argument_list|,
name|exists
condition|?
literal|"update"
else|:
literal|"create"
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
name|long
name|validateCompleted
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"   ... validate request data {}ms"
argument_list|,
name|validateCompleted
operator|-
name|start
argument_list|)
expr_stmt|;
try|try
block|{
name|managedSite
operator|.
name|store
argument_list|(
name|parsed
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ManagedSiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception while storing parsed Representations "
operator|+
literal|"in the ManagedSite %s"
argument_list|,
name|managedSite
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unable to store parsed Entities to ManagedSite "
operator|+
name|managedSite
operator|.
name|getId
argument_list|()
operator|+
literal|" because of an error (Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
name|ResponseBuilder
name|builder
decl_stmt|;
if|if
condition|(
name|create
operator|&&
name|parsed
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|createdId
init|=
name|parsed
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|created
init|=
name|uriInfo
operator|.
name|getRequestUriBuilder
argument_list|()
operator|.
name|queryParam
argument_list|(
literal|"id"
argument_list|,
name|createdId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|=
name|Response
operator|.
name|created
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|builder
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|=
name|Response
operator|.
name|noContent
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"   ... create/update {} entities in {}ms"
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|validateCompleted
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"entity/"
argument_list|)
specifier|public
name|Response
name|deleteEntity
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|MediaType
name|accepted
init|=
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|ManagedSite
name|managedSite
decl_stmt|;
if|if
condition|(
name|site
operator|instanceof
name|ManagedSite
condition|)
block|{
name|managedSite
operator|=
operator|(
name|ManagedSite
operator|)
name|site
expr_stmt|;
block|}
else|else
block|{
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The Site '%s' is not managed and does not support "
operator|+
literal|"create/update nor delete operations"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The Request does"
operator|+
literal|"not provide the id of the Entity to delete (parameter 'id')."
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
name|ResponseBuilder
name|builder
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|managedSite
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|builder
operator|=
name|Response
operator|.
name|noContent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|managedSite
operator|.
name|getEntity
argument_list|(
name|id
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|managedSite
operator|.
name|delete
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|builder
operator|=
name|Response
operator|.
name|noContent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No Entity with the parsed Id '"
operator|+
name|id
operator|+
literal|"' is present on the ManagedSite '"
operator|+
name|managedSite
operator|.
name|getId
argument_list|()
operator|+
literal|"'!"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Exception while deleting '"
operator|+
name|id
operator|+
literal|"' from ManagedSite '"
operator|+
name|managedSite
operator|.
name|getId
argument_list|()
operator|+
literal|"'!"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|builder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|message
operator|+
literal|' '
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|accepted
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|builder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightFind
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
specifier|public
name|Response
name|findEntitybyGet
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
comment|// @QueryParam(value="select") String select,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"-1"
argument_list|)
name|int
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"0"
argument_list|)
name|int
name|offset
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"ldpath"
argument_list|)
name|String
name|ldpath
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|findEntity
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|language
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|,
name|ldpath
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
specifier|public
name|Response
name|findEntity
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
comment|// @FormParam(value="select") String select,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
name|Integer
name|limit
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
name|Integer
name|offset
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"ldpath"
argument_list|)
name|String
name|ldpath
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"site/{}/find Request"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|QUERY_RESULT_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"find"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"The name must not be null nor empty for find requests. Missing parameter name.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|field
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
block|}
return|return
name|executeQuery
argument_list|(
name|createFieldQueryForFindRequest
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|language
argument_list|,
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<
literal|1
condition|?
name|DEFAULT_FIND_RESULT_LIMIT
else|:
name|limit
argument_list|,
name|offset
argument_list|,
name|ldpath
argument_list|)
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightQuery
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Allows to parse any kind of {@link FieldQuery} in its JSON Representation.       * Note that the maximum number of results (limit) and the offset of the       *<p>      * TODO: as soon as the entityhub supports multiple query types this need to be refactored. The idea is      * that this dynamically detects query types and than redirects them to the referenced site      * implementation.      * @param query The field query as parsed by {@link FieldQueryReader}      * @param headers the header information of the request      * @return the results of the query      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|APPLICATION_JSON
block|}
argument_list|)
specifier|public
name|Response
name|queryEntities
parameter_list|(
name|FieldQuery
name|query
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|getQueryDocumentation
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"query"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Executes the query parsed by {@link #queryEntities(String, File, HttpHeaders)} or created based      * {@link #findEntity(String, String, String, int, int, HttpHeaders)}      *       * @param query      *            The query to execute      * @param headers the request headers      * @return the response (results of error)      */
specifier|private
name|Response
name|executeQuery
parameter_list|(
name|FieldQuery
name|query
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|WebApplicationException
block|{
name|MediaType
name|mediaType
init|=
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|,
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|LDPathSelect
operator|&&
operator|(
operator|(
name|LDPathSelect
operator|)
name|query
operator|)
operator|.
name|getLDPathSelect
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//use the LDPath variant to process this query
return|return
name|executeLDPathQuery
argument_list|(
name|query
argument_list|,
operator|(
operator|(
name|LDPathSelect
operator|)
name|query
operator|)
operator|.
name|getLDPathSelect
argument_list|()
argument_list|,
name|mediaType
argument_list|,
name|headers
argument_list|)
return|;
block|}
else|else
block|{
comment|//use the default query execution
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|site
operator|.
name|find
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to Query Site '%s' (message: %s)"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|mediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * Execute a Query that uses LDPath to process results.      * @param query the query      * @param mediaType the mediaType for the response      * @param headers the http headers of the request      * @return the response      */
specifier|private
name|Response
name|executeLDPathQuery
parameter_list|(
name|FieldQuery
name|query
parameter_list|,
name|String
name|ldpathProgramString
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|result
decl_stmt|;
name|ValueFactory
name|vf
init|=
operator|new
name|RdfValueFactory
argument_list|(
operator|new
name|IndexedMGraph
argument_list|()
argument_list|)
decl_stmt|;
name|SiteBackend
name|backend
init|=
operator|new
name|SiteBackend
argument_list|(
name|site
argument_list|,
name|vf
argument_list|)
decl_stmt|;
name|EntityhubLDPath
name|ldPath
init|=
operator|new
name|EntityhubLDPath
argument_list|(
name|backend
argument_list|,
name|vf
argument_list|)
decl_stmt|;
comment|//copy the selected fields, because we might need to delete some during
comment|//the preparation phase
name|Set
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|query
operator|.
name|getSelectedFields
argument_list|()
argument_list|)
decl_stmt|;
comment|//first prepare (only execute the query if the parameters are valid)
name|Program
argument_list|<
name|Object
argument_list|>
name|program
decl_stmt|;
try|try
block|{
name|program
operator|=
name|prepareQueryLDPathProgram
argument_list|(
name|ldpathProgramString
argument_list|,
name|selectedFields
argument_list|,
name|backend
argument_list|,
name|ldPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse LDPath program used as select for Query:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"FieldQuery: \n {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"LDPath: \n {}"
argument_list|,
operator|(
operator|(
name|LDPathSelect
operator|)
name|query
operator|)
operator|.
name|getLDPathSelect
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
operator|(
literal|"Unable to parse LDPath program (Messages: "
operator|+
name|getLDPathParseExceptionMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|")!\n"
operator|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|mediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"parsed LDPath program is not compatible with parsed Query!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|mediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//2. execute the query
name|Iterator
argument_list|<
name|Representation
argument_list|>
name|resultIt
decl_stmt|;
try|try
block|{
comment|// we need to adapt from Entity to Representation
name|resultIt
operator|=
operator|new
name|AdaptingIterator
argument_list|<
name|Entity
argument_list|,
name|Representation
argument_list|>
argument_list|(
name|site
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|AdaptingIterator
operator|.
name|Adapter
argument_list|<
name|Entity
argument_list|,
name|Representation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Representation
name|adapt
parameter_list|(
name|Entity
name|value
parameter_list|,
name|Class
argument_list|<
name|Representation
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|value
operator|.
name|getRepresentation
argument_list|()
return|;
block|}
block|}
argument_list|,
name|Representation
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to Query Site '%s' (message: %s)"
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|mediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//process the results
name|Collection
argument_list|<
name|Representation
argument_list|>
name|transformedResults
init|=
name|transformQueryResults
argument_list|(
name|resultIt
argument_list|,
name|program
argument_list|,
name|selectedFields
argument_list|,
name|ldPath
argument_list|,
name|backend
argument_list|,
name|vf
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|QueryResultListImpl
argument_list|<
name|Representation
argument_list|>
argument_list|(
name|query
argument_list|,
name|transformedResults
argument_list|,
name|Representation
operator|.
name|class
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/*      * LDPath support      */
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/ldpath"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightLDPath
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|,
name|OPTIONS
argument_list|,
name|GET
argument_list|,
name|POST
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/ldpath"
argument_list|)
specifier|public
name|Response
name|handleLDPathGet
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"context"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|contexts
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"ldpath"
argument_list|)
name|String
name|ldpath
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|handleLDPathPost
argument_list|(
name|contexts
argument_list|,
name|ldpath
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/ldpath"
argument_list|)
specifier|public
name|Response
name|handleLDPathPost
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"context"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|contexts
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"ldpath"
argument_list|)
name|String
name|ldpath
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|handleLDPathRequest
argument_list|(
name|this
argument_list|,
operator|new
name|SiteBackend
argument_list|(
name|site
argument_list|)
argument_list|,
name|ldpath
argument_list|,
name|contexts
argument_list|,
name|headers
argument_list|,
name|servletContext
argument_list|)
return|;
block|}
comment|/*      * Referenced Site Metadata      */
comment|/**      * Transforms a site to a Representation that can be serialised       * @param context      * @return      */
specifier|private
name|Representation
name|site2Representation
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|RdfRepresentation
name|rep
init|=
name|valueFactory
operator|.
name|createRepresentation
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|NamespaceEnum
operator|.
name|entityhub
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"localMode"
argument_list|,
name|site
operator|.
name|supportsLocalMode
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"supportsSearch"
argument_list|,
name|site
operator|.
name|supportsSearch
argument_list|()
argument_list|)
expr_stmt|;
name|SiteConfiguration
name|config
init|=
name|site
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|namespace
operator|+
literal|"ReferencedSite"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"description"
argument_list|,
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getAttribution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"attributionName"
argument_list|,
name|config
operator|.
name|getAttribution
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getAttributionUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"attributionURL"
argument_list|,
name|config
operator|.
name|getAttributionUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//add the licenses
if|if
condition|(
name|config
operator|.
name|getLicenses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|config
operator|.
name|getLicenses
argument_list|()
control|)
block|{
name|String
name|licenseUrl
decl_stmt|;
if|if
condition|(
name|license
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|licenseUrl
operator|=
name|license
operator|.
name|getUrl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|licenseUrl
operator|=
name|id
operator|+
operator|(
operator|!
name|id
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
else|:
literal|""
operator|)
operator|+
name|LICENSE_PATH
operator|+
literal|'/'
operator|+
name|LICENSE_NAME
operator|+
operator|(
name|count
operator|>
literal|0
condition|?
name|count
else|:
literal|""
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|//if defined add the name to dc:license
if|if
condition|(
name|license
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|licenseUrl
argument_list|)
expr_stmt|;
block|}
comment|//link to the license via cc:license
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|licenseUrl
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getEntityPrefixes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|config
operator|.
name|getEntityPrefixes
argument_list|()
control|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"entityPrefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//all entities are allowed/processed
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"entityPrefix"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|instanceof
name|ReferencedSiteConfiguration
condition|)
block|{
name|ReferencedSiteConfiguration
name|refConfig
init|=
operator|(
name|ReferencedSiteConfiguration
operator|)
name|config
decl_stmt|;
if|if
condition|(
name|refConfig
operator|.
name|getCacheStrategy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"cacheStrategy"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|namespace
operator|+
literal|"cacheStrategy-"
operator|+
name|refConfig
operator|.
name|getCacheStrategy
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add the accessUri and queryUri
if|if
condition|(
name|refConfig
operator|.
name|getAccessUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"accessUri"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|refConfig
operator|.
name|getAccessUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|refConfig
operator|.
name|getQueryUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"queryUri"
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|refConfig
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rep
return|;
block|}
specifier|private
name|Representation
name|license2Representation
parameter_list|(
name|String
name|id
parameter_list|,
name|License
name|license
parameter_list|)
block|{
name|RdfValueFactory
name|valueFactory
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|RdfRepresentation
name|rep
init|=
name|valueFactory
operator|.
name|createRepresentation
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|license
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"title"
argument_list|,
name|license
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|license
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"description"
argument_list|,
name|license
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"licenseUrl"
argument_list|,
name|license
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|?
name|id
else|:
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rep
return|;
block|}
specifier|public
name|boolean
name|isManagedSite
parameter_list|()
block|{
return|return
name|site
operator|instanceof
name|ManagedSite
return|;
block|}
specifier|public
name|Site
name|getSite
parameter_list|()
block|{
return|return
name|site
return|;
block|}
block|}
end_class

end_unit

