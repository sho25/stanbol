begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|FieldQueryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|parsers
operator|.
name|JSONToFieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
operator|.
name|JerseyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
operator|.
name|PatternType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ConfiguredSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Resource to provide a REST API for the {@link ReferencedSiteManager}  *<p/>  * TODO: add description  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/site/{site}"
argument_list|)
specifier|public
class|class
name|ReferencedSiteRootResource
extends|extends
name|NavigationMixin
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RDF_MEDIA_TYPES
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SupportedFormat
operator|.
name|N3
argument_list|,
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|,
name|SupportedFormat
operator|.
name|X_TURTLE
argument_list|,
name|SupportedFormat
operator|.
name|RDF_JSON
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * The Field used for find requests if not specified      * TODO: This will be replaced by the EntitySearch. With this search the      *       Site is responsible to decide what properties to use for label      *       based searches.      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FIND_FIELD
init|=
name|RDFS
operator|.
name|label
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
comment|/**      * The Field used as default as selected fields for find requests      * TODO: Make configurable via the {@link ConfiguredSite} interface!      */
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|DEFAULT_FIND_SELECTED_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|RDFS
operator|.
name|comment
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The default number of maximal results.      */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FIND_RESULT_LIMIT
init|=
literal|5
decl_stmt|;
specifier|protected
name|Serializer
name|serializer
decl_stmt|;
specifier|protected
name|ReferencedSite
name|site
decl_stmt|;
specifier|public
name|ReferencedSiteRootResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"site"
argument_list|)
name|String
name|siteId
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... init ReferencedSiteRootResource for Site {}"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
name|ReferencedSiteManager
name|referencedSiteManager
init|=
operator|(
name|ReferencedSiteManager
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|ReferencedSiteManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|serializer
operator|=
operator|(
name|Serializer
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|referencedSiteManager
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing referencedSiteManager={}"
argument_list|,
name|referencedSiteManager
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
if|if
condition|(
name|siteId
operator|==
literal|null
operator|||
name|siteId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Missing path parameter site={}"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
name|site
operator|=
name|referencedSiteManager
operator|.
name|getReferencedSite
argument_list|(
name|siteId
argument_list|)
expr_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Site {} not found (No referenced site with that ID is present within the Entityhub"
argument_list|,
name|siteId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|String
name|getInfo
parameter_list|()
block|{
return|return
literal|"<html><head>"
operator|+
name|site
operator|.
name|getName
argument_list|()
operator|+
literal|"</head><body>"
operator|+
literal|"<h1>Referenced Site "
operator|+
name|site
operator|.
name|getName
argument_list|()
operator|+
literal|":</h1></body></html>"
return|;
block|}
comment|/**      * Cool URI handler for Signs.      *      * @param siteId A specific {@link ReferencedSite} to search the parsed id or      *<code>null</code> to search all referenced sites for the requested      * entity id. The {@link ReferencedSite#getId()} property is used to map      * the path to the site!      * @param id The id of the entity (required)      * @param headers the request headers used to get the requested {@link MediaType}      * @return a redirection to either a browser view, the RDF meta data or the      *         raw binary content      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entity"
argument_list|)
specifier|public
name|Response
name|getSignById
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"id"
argument_list|)
name|String
name|id
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"site/"
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|"/entity Request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> id       : "
operator|+
name|id
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept   : "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> mediaType: "
operator|+
name|headers
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No or emptpy ID was parsd as query parameter (id={})"
argument_list|,
name|id
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"handle Request for Entity {} of Site {}"
argument_list|,
name|id
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Sign
name|sign
decl_stmt|;
try|try
block|{
name|sign
operator|=
name|site
operator|.
name|getSign
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReferencedSiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ReferencedSiteException while accessing Site "
operator|+
name|site
operator|.
name|getName
argument_list|()
operator|+
literal|" (id="
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|sign
operator|!=
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|sign
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|//TODO: How to parse an ErrorMessage?
comment|// create an Response with the the Error?
name|log
operator|.
name|info
argument_list|(
literal|" ... Entity {} not found on referenced site {}"
argument_list|,
name|id
argument_list|,
name|site
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
specifier|public
name|Response
name|findEntitybyGet
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
comment|//@QueryParam(value="select") String select,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"-1"
argument_list|)
name|int
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"0"
argument_list|)
name|int
name|offset
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
return|return
name|findEntity
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|language
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/find"
argument_list|)
specifier|public
name|Response
name|findEntity
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"lang"
argument_list|)
name|String
name|language
parameter_list|,
comment|//@FormParam(value="select") String select,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"limit"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"-1"
argument_list|)
name|int
name|limit
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"offset"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|value
operator|=
literal|"0"
argument_list|)
name|int
name|offset
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"site/"
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|"/find Request"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> name  : "
operator|+
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> lang  : "
operator|+
name|language
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> limit : "
operator|+
name|limit
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> offset: "
operator|+
name|offset
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> accept: "
operator|+
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"/find Request with invalied name={}!"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|name
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|field
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
operator|=
name|DEFAULT_FIND_FIELD
expr_stmt|;
block|}
block|}
name|FieldQuery
name|query
init|=
operator|new
name|FieldQueryImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|field
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|name
argument_list|,
name|PatternType
operator|.
name|wildcard
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|field
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|name
argument_list|,
name|PatternType
operator|.
name|wildcard
argument_list|,
literal|false
argument_list|,
name|language
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|selectedFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|//select also the field used to find entities
comment|//        if(select == null ||select.isEmpty()){
comment|//            selectedFields.addAll(DEFAULT_FIND_SELECTED_FIELDS);
comment|//        } else {
comment|//            for(String selected : select.trim().split(" ")){
comment|//                if(selected != null&& !selected.isEmpty()){
comment|//                    selectedFields.add(selected);
comment|//                }
comment|//            }
comment|//        }
name|query
operator|.
name|addSelectedFields
argument_list|(
name|selectedFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<
literal|1
condition|)
block|{
name|limit
operator|=
name|DEFAULT_FIND_RESULT_LIMIT
expr_stmt|;
block|}
name|query
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|site
operator|.
name|find
argument_list|(
name|query
argument_list|)
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReferencedSiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ReferencedSiteException while accessing Site "
operator|+
name|site
operator|.
name|getName
argument_list|()
operator|+
literal|" (id="
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/**      * Allows to parse any kind of {@link FieldQuery} in its JSON Representation.      * Note that the maximum number of results (limit) and the offset of the      * first result (offset) are parsed as seperate parameters and are not      * part of the field query as in the java API.<p>      * TODO: as soon as the entityhub supports multiple query types this need      *       to be refactored. The idea is that this dynamically detects query      *       types and than redirects them to the referenced site implementation.      * @param query The field query in JSON format      * @param limit the maximum number of results starting at offset      * @param offset the offset of the first result      * @param headers the header information of the request      * @return the results of the query      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/query"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
name|APPLICATION_FORM_URLENCODED
operator|+
literal|";qs=1.0"
block|,
name|MULTIPART_FORM_DATA
operator|+
literal|";qs=0.9"
block|}
argument_list|)
specifier|public
name|Response
name|queryEntities
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"query"
argument_list|)
name|String
name|query
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"query"
argument_list|)
name|File
name|file
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|&&
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Query Requests MUST define the \"query\" parameter"
argument_list|)
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|FieldQuery
name|fieldQuery
init|=
literal|null
decl_stmt|;
name|JSONException
name|exception
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fieldQuery
operator|=
name|JSONToFieldQuery
operator|.
name|fromJSON
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unable to parse FieldQuery from \"application/x-www-form-urlencoded\" encoded query string "
operator|+
name|query
argument_list|)
expr_stmt|;
name|fieldQuery
operator|=
literal|null
expr_stmt|;
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|//else no query via application/x-www-form-urlencoded parsed
if|if
condition|(
name|fieldQuery
operator|==
literal|null
operator|&&
name|file
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|query
operator|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fieldQuery
operator|=
name|JSONToFieldQuery
operator|.
name|fromJSON
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unable to parse FieldQuery from \"multipart/form-data\" encoded query string "
operator|+
name|query
argument_list|)
expr_stmt|;
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|//fieldquery already initialised or no query via multipart/form-data parsed
if|if
condition|(
name|fieldQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse FieldQuery for the parsed query\n"
operator|+
name|query
argument_list|,
name|exception
argument_list|)
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|site
operator|.
name|find
argument_list|(
name|fieldQuery
argument_list|)
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ReferencedSiteException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ReferencedSiteException while accessing Site "
operator|+
name|site
operator|.
name|getName
argument_list|()
operator|+
literal|" (id="
operator|+
name|site
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

