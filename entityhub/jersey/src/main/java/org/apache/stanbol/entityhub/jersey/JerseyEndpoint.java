begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|References
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|ServletContainer
import|;
end_import

begin_comment
comment|/**  * Jersey-based RESTful endpoint for the Entityhub  *  * This OSGi component serves as a bridge between the OSGi context and the  * Servlet context available to JAX-RS resources.  *  * NOTE: Original Code taken from the FISE  * @author Rupert Westenthaler  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|References
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"entityhub"
argument_list|,
name|referenceInterface
operator|=
name|Entityhub
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindEntityhub"
argument_list|,
name|unbind
operator|=
literal|"unbindEntityhub"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|)
block|,
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"referencedSiteManager"
argument_list|,
name|referenceInterface
operator|=
name|ReferencedSiteManager
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindReferencedSiteManager"
argument_list|,
name|unbind
operator|=
literal|"unbindReferencedSiteManager"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|)
block|,
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"serializer"
argument_list|,
name|referenceInterface
operator|=
name|Serializer
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindSerializer"
argument_list|,
name|unbind
operator|=
literal|"unbindSerializer"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|JerseyEndpoint
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"/entityhub"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|ALIAS_PROPERTY
init|=
literal|"org.apache.stanbol.entityhub.jersey.alias"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"/entityhub/static"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STATIC_RESOURCES_URL_ROOT_PROPERTY
init|=
literal|"org.apache.stanbol.entityhub.jersey.static.url"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"/entityhub/META-INF/static"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|STATIC_RESOURCES_CLASSPATH_PROPERTY
init|=
literal|"org.apache.stanbol.entityhub.jersey.static.classpath"
decl_stmt|;
comment|//@Property(value = "/META-INF/templates")
comment|//public static final String FREEMARKER_TEMPLATE_CLASSPATH_PROPERTY = "org.apache.stanbol.entityhub.jersey.templates.classpath";
comment|//    @Reference
comment|//    private TcManager tcManager;
comment|/**      * Dynamically adds the {@link Entityhub} to the {@link ServletContext}      */
specifier|protected
name|void
name|bindEntityhub
parameter_list|(
name|Entityhub
name|entityhub
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"add "
operator|+
name|entityhub
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" to ServletContext"
argument_list|)
expr_stmt|;
name|addManagedAttribute
argument_list|(
name|Entityhub
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|entityhub
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dynamically removes the {@link Entityhub} to the {@link ServletContext}      */
specifier|protected
name|void
name|unbindEntityhub
parameter_list|(
name|Entityhub
name|entityhub
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"remove"
operator|+
name|entityhub
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" from ServletContext"
argument_list|)
expr_stmt|;
name|removeManagedAttribute
argument_list|(
name|Entityhub
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dynamically adds the {@link ReferencedSiteManager} to the {@link ServletContext}      */
specifier|protected
name|void
name|bindReferencedSiteManager
parameter_list|(
name|ReferencedSiteManager
name|referencedSiteManager
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"add "
operator|+
name|referencedSiteManager
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" to ServletContext"
argument_list|)
expr_stmt|;
name|addManagedAttribute
argument_list|(
name|ReferencedSiteManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|referencedSiteManager
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dynamically removes the {@link ReferencedSiteManager} to the {@link ServletContext}      */
specifier|protected
name|void
name|unbindReferencedSiteManager
parameter_list|(
name|ReferencedSiteManager
name|referencedSiteManager
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"remove "
operator|+
name|referencedSiteManager
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" from ServletContext"
argument_list|)
expr_stmt|;
name|removeManagedAttribute
argument_list|(
name|ReferencedSiteManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dynamically adds the {@link Serializer} to the {@link ServletContext}      */
specifier|protected
name|void
name|bindSerializer
parameter_list|(
name|Serializer
name|serializer
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"add "
operator|+
name|serializer
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" to ServletContext"
argument_list|)
expr_stmt|;
name|addManagedAttribute
argument_list|(
name|Serializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dynamically removes the {@link Serializer} to the {@link ServletContext}      */
specifier|protected
name|void
name|unbindSerializer
parameter_list|(
name|Serializer
name|serializer
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"remove"
operator|+
name|serializer
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" from ServletContext"
argument_list|)
expr_stmt|;
name|removeManagedAttribute
argument_list|(
name|Serializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internally manages the attributes currently added to the {@link ServletContext}.      * This is necessary because Properties can bind/unbind even when this      * Component is not activated (e.g. between construction and       * {@link #activate(ComponentContext)} is called). Therefore the      * {@link #servletContext} might still be<code>null</code>       */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|managedAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Adds a managed Attribute and to the {@link #servletContext} if not<code>null</code>      * @param key the key      * @param value the value      * @throws IllegalArgumentException if the key is<code>null</code>      */
specifier|private
name|void
name|addManagedAttribute
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
comment|//throw Exception to find bugs early!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The key for Managed Attributes MUST NOT be NULL"
argument_list|)
throw|;
block|}
comment|//use local copy to avoid NullPointers in multi thread environments
name|ServletContext
name|servletContext
init|=
name|this
operator|.
name|servletContext
decl_stmt|;
synchronized|synchronized
init|(
name|managedAttributes
init|)
block|{
name|managedAttributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|servletContext
operator|!=
literal|null
condition|)
block|{
name|servletContext
operator|.
name|setAttribute
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes a managed Attribute and to the {@link #servletContext} if not<code>null</code>      * @param key the key to remove      * @throws IllegalArgumentException if the key is<code>null</code>      */
specifier|private
name|void
name|removeManagedAttribute
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
comment|//throw Exception to find bugs early!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The key for Managed Attributes MUST NOT be NULL"
argument_list|)
throw|;
block|}
comment|//use local copy to avoid NullPointers in multi thread environments
name|ServletContext
name|servletContext
init|=
name|this
operator|.
name|servletContext
decl_stmt|;
synchronized|synchronized
init|(
name|managedAttributes
init|)
block|{
if|if
condition|(
name|managedAttributes
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
name|servletContext
operator|!=
literal|null
condition|)
block|{
name|servletContext
operator|.
name|removeAttribute
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|managedAttributes
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds all currently managed Attributes to the parsed {@link ServletContext}.      * Used in {@link #activate(ComponentContext)} to initialise the new      * servlet context with previously added      * managed attributes.      * @param servletContext the context to add the managed attributes      */
specifier|private
name|void
name|addManagedAttributes
parameter_list|(
name|ServletContext
name|servletContext
parameter_list|)
block|{
if|if
condition|(
name|servletContext
operator|==
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|managedAttributes
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|managedEntry
range|:
name|managedAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|servletContext
operator|.
name|setAttribute
argument_list|(
name|managedEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|managedEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes all currently managed Attributes from the parsed {@link ServletContext}.      * Used in {@link #deactivate(ComponentContext)} to reset the servlet context.      * @param servletContext the context to add the managed attributes      */
specifier|private
name|void
name|removeManagedAttributes
parameter_list|(
name|ServletContext
name|servletContext
parameter_list|)
block|{
if|if
condition|(
name|servletContext
operator|==
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|managedAttributes
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|managedEntry
range|:
name|managedAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|servletContext
operator|.
name|removeAttribute
argument_list|(
name|managedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Reference
specifier|private
name|HttpService
name|httpService
decl_stmt|;
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getInitParams
parameter_list|()
block|{
comment|// pass configuration for Jersey resource
comment|// TODO: make the list of enabled JAX-RS resources and providers
comment|// configurable using an OSGi service
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initParams
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|initParams
operator|.
name|put
argument_list|(
literal|"javax.ws.rs.Application"
argument_list|,
name|JerseyEndpointApplication
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// make jersey automatically turn resources into Viewable models and
comment|// hence lookup matching freemarker templates
comment|//initParams.put("com.sun.jersey.config.feature.ImplicitViewables","true");
return|return
name|initParams
return|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
throws|,
name|NamespaceException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activate "
operator|+
name|JerseyEndpoint
operator|.
name|class
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
comment|// register the JAX-RS resources as a servlet under configurable alias
name|ServletContainer
name|container
init|=
operator|new
name|ServletContainer
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ALIAS_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|staticUrlRoot
init|=
operator|(
name|String
operator|)
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|STATIC_RESOURCES_URL_ROOT_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|staticClasspath
init|=
operator|(
name|String
operator|)
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|STATIC_RESOURCES_CLASSPATH_PROPERTY
argument_list|)
decl_stmt|;
comment|//String freemakerTemplates = (String) ctx.getProperties().get(
comment|//        FREEMARKER_TEMPLATE_CLASSPATH_PROPERTY);
name|log
operator|.
name|info
argument_list|(
literal|"Registering servlets with HTTP service "
operator|+
name|httpService
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|httpService
operator|.
name|registerServlet
argument_list|(
name|alias
argument_list|,
name|container
argument_list|,
name|getInitParams
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerResources
argument_list|(
name|staticUrlRoot
argument_list|,
name|staticClasspath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
comment|// This is now done dynamically based on there activation/deactivation
name|servletContext
operator|=
name|container
operator|.
name|getServletContext
argument_list|()
expr_stmt|;
name|servletContext
operator|.
name|setAttribute
argument_list|(
name|BundleContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ctx
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|servletContext
operator|.
name|setAttribute
argument_list|(
name|STATIC_RESOURCES_URL_ROOT_PROPERTY
argument_list|,
name|staticUrlRoot
argument_list|)
expr_stmt|;
comment|// References (such as entityhub and ReferencedSiteManager) are no
comment|// longer statically forwarded to JAX-RS components.
comment|//But still we need to add all managed attributes that where added
comment|//prior to activating Jersey
name|addManagedAttributes
argument_list|(
name|servletContext
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Jersey servlet registered at {}"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deactivating jersey bundle"
argument_list|)
expr_stmt|;
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ALIAS_PROPERTY
argument_list|)
decl_stmt|;
name|httpService
operator|.
name|unregister
argument_list|(
name|alias
argument_list|)
expr_stmt|;
comment|//clean up managed Attributes
comment|// ... just to make sure that they are no longer referenced by this
comment|//     object even if an other component keep the context!
name|removeManagedAttributes
argument_list|(
name|servletContext
argument_list|)
expr_stmt|;
name|servletContext
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

