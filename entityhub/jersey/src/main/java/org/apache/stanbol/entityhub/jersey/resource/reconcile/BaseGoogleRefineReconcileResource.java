begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
operator|.
name|reconcile
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
operator|.
name|resultScore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|utils
operator|.
name|MediaTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|grefine
operator|.
name|ReconcileProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|grefine
operator|.
name|ReconcileQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|grefine
operator|.
name|ReconcileValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|grefine
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|SpecialFieldEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ReferenceConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|SimilarityConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|TextConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ValueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ValueConstraint
operator|.
name|MODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|ldviewable
operator|.
name|Viewable
import|;
end_import

begin_comment
comment|/**  * Implementation of the<a href="http://code.google.com/p/google-refine/wiki/ReconciliationServiceApi">  * Google Refine Reconciliation API</a>  * This base class is used to support this API for the Entityhub, ReferencedSites  * and the ReferencedSiteManager.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseGoogleRefineReconcileResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseGoogleRefineReconcileResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_FIELD
init|=
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_FIELD
init|=
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|SELECTED_FIELDS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NAME_FIELD
argument_list|,
name|TYPE_FIELD
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|JSONObject
argument_list|>
name|resultScoreComparator
init|=
operator|new
name|Comparator
argument_list|<
name|JSONObject
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|JSONObject
name|o1
parameter_list|,
name|JSONObject
name|o2
parameter_list|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|o2
operator|.
name|getDouble
argument_list|(
literal|"score"
argument_list|)
argument_list|,
name|o1
operator|.
name|getDouble
argument_list|(
literal|"score"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|protected
name|BaseGoogleRefineReconcileResource
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|OPTIONS
specifier|public
specifier|final
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
specifier|public
specifier|final
name|Response
name|queryPOST
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"query"
argument_list|)
name|String
name|query
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"queries"
argument_list|)
name|String
name|queries
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"callback"
argument_list|)
name|String
name|callback
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|header
parameter_list|)
throws|throws
name|WebApplicationException
block|{
return|return
name|query
argument_list|(
name|query
argument_list|,
name|queries
argument_list|,
name|callback
argument_list|,
name|header
argument_list|)
return|;
block|}
annotation|@
name|GET
specifier|public
specifier|final
name|Response
name|query
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"query"
argument_list|)
name|String
name|query
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"queries"
argument_list|)
name|String
name|queries
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"callback"
argument_list|)
name|String
name|callback
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|header
parameter_list|)
throws|throws
name|WebApplicationException
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"callback: {}"
argument_list|,
name|callback
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|sendMetadata
argument_list|(
name|callback
argument_list|,
name|header
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|JSONObject
name|jResult
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"query: {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
try|try
block|{
name|jResult
operator|=
name|reconcile
argument_list|(
name|ReconcileQuery
operator|.
name|parseQuery
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while writing Reconcilation results (%s: %s)"
argument_list|,
name|JSONException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while searching on %s (%s: %s)"
argument_list|,
name|getSiteName
argument_list|()
argument_list|,
name|SiteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|queries
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"multi-query: {}"
argument_list|,
name|queries
argument_list|)
expr_stmt|;
try|try
block|{
name|jResult
operator|=
name|reoncile
argument_list|(
name|ReconcileQuery
operator|.
name|parseQueries
argument_list|(
name|queries
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while writing Reconcilation results (%s: %s)"
argument_list|,
name|JSONException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EntityhubException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while searching on %s (%s: %s)"
argument_list|,
name|getSiteName
argument_list|()
argument_list|,
name|SiteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|MediaTypeUtil
operator|.
name|isAcceptableMediaType
argument_list|(
name|header
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|)
condition|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|header
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"One of the 'query' or 'querues' or 'callback=jsonp' parameter MUST BE present!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
comment|//return the results and enable Cors
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|jResult
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|CorsHelper
operator|.
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|header
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|JSONObject
name|reoncile
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ReconcileQuery
argument_list|>
name|parsedQueries
parameter_list|)
throws|throws
name|JSONException
throws|,
name|EntityhubException
block|{
name|JSONObject
name|container
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ReconcileQuery
argument_list|>
name|query
range|:
name|parsedQueries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|container
operator|.
name|put
argument_list|(
name|query
operator|.
name|getKey
argument_list|()
argument_list|,
name|reconcile
argument_list|(
name|query
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
specifier|private
name|JSONObject
name|reconcile
parameter_list|(
name|ReconcileQuery
name|rQuery
parameter_list|)
throws|throws
name|JSONException
throws|,
name|EntityhubException
block|{
name|FieldQuery
name|query
init|=
name|createFieldQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|addSelectedFields
argument_list|(
name|SELECTED_FIELDS
argument_list|)
expr_stmt|;
name|addNameConstraint
argument_list|(
name|rQuery
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|addTypeConstraint
argument_list|(
name|rQuery
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|addPropertyConstraints
argument_list|(
name|rQuery
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLimit
argument_list|(
name|query
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|results
init|=
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JSONObject
argument_list|>
name|jResultList
init|=
operator|new
name|ArrayList
argument_list|<
name|JSONObject
argument_list|>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//we need to know the highest score to normalise between [0..1]
name|double
name|maxQueryScore
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Representation
name|r
range|:
name|results
control|)
block|{
if|if
condition|(
name|maxQueryScore
operator|<
literal|0
condition|)
block|{
name|maxQueryScore
operator|=
name|r
operator|.
name|getFirst
argument_list|(
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|,
name|Number
operator|.
name|class
argument_list|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
name|JSONObject
name|jResult
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jResult
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|similarity
init|=
literal|0.0
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|//the name returned for the entity
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|labels
init|=
name|r
operator|.
name|getText
argument_list|(
name|NAME_FIELD
argument_list|)
init|;
name|labels
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|label
init|=
name|labels
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|getText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|rQuery
operator|.
name|getQuery
argument_list|()
argument_list|)
condition|)
block|{
name|name
operator|=
name|label
operator|.
name|getText
argument_list|()
expr_stmt|;
name|similarity
operator|=
literal|1.0
expr_stmt|;
break|break;
block|}
name|double
name|curSimilarity
init|=
name|Utils
operator|.
name|levenshtein
argument_list|(
name|rQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|label
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|similarity
operator|<
name|curSimilarity
condition|)
block|{
name|name
operator|=
name|label
operator|.
name|getText
argument_list|()
expr_stmt|;
name|similarity
operator|=
name|curSimilarity
expr_stmt|;
block|}
block|}
comment|//set the selected name
name|jResult
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|types
init|=
name|r
operator|.
name|getReferences
argument_list|(
name|TYPE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|jResult
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
operator|new
name|JSONArray
argument_list|(
name|ModelUtils
operator|.
name|asCollection
argument_list|(
name|types
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|normalisedScore
init|=
name|r
operator|.
name|getFirst
argument_list|(
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|,
name|Number
operator|.
name|class
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|normalisedScore
operator|=
name|normalisedScore
operator|*
name|similarity
operator|/
name|maxQueryScore
expr_stmt|;
name|jResult
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|normalisedScore
argument_list|)
expr_stmt|;
name|jResult
operator|.
name|put
argument_list|(
literal|"match"
argument_list|,
name|similarity
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|jResultList
operator|.
name|add
argument_list|(
name|jResult
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else no results ... nothing todo
comment|//sort results based on score
name|Collections
operator|.
name|sort
argument_list|(
name|jResultList
argument_list|,
name|resultScoreComparator
argument_list|)
expr_stmt|;
name|JSONObject
name|jResultContainer
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jResultContainer
operator|.
name|put
argument_list|(
literal|"result"
argument_list|,
operator|new
name|JSONArray
argument_list|(
name|jResultList
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jResultContainer
return|;
block|}
comment|/**      * @param query      * @return      * @throws SiteException      */
specifier|protected
specifier|abstract
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|performQuery
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|EntityhubException
function_decl|;
comment|/**      * Getter for the name of the Site as used for logging      * @return      */
specifier|protected
specifier|abstract
name|String
name|getSiteName
parameter_list|()
function_decl|;
comment|/**      * Creates a new FieldQuery      * @return      */
specifier|protected
specifier|abstract
name|FieldQuery
name|createFieldQuery
parameter_list|()
function_decl|;
comment|/**      * @param rQuery      * @param query      */
specifier|private
name|void
name|addPropertyConstraints
parameter_list|(
name|ReconcileQuery
name|rQuery
parameter_list|,
name|FieldQuery
name|query
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|texts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// keep order for texts
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|//hold all references for @references special property
name|HashSet
argument_list|<
name|String
argument_list|>
name|references
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//holds all texts for @fullText special property
name|List
argument_list|<
name|String
argument_list|>
name|fullText
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//holds the context for the @similarity special property
name|StringBuilder
name|similarityContext
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//the field used for the @similarity special property
name|HashSet
argument_list|<
name|String
argument_list|>
name|similarityFields
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReconcileProperty
argument_list|,
name|Collection
argument_list|<
name|ReconcileValue
argument_list|>
argument_list|>
name|propertyEntry
range|:
name|rQuery
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|ReconcileProperty
name|property
init|=
name|propertyEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// collect the properties
for|for
control|(
name|ReconcileValue
name|value
range|:
name|propertyEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|value
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|texts
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//handle supported special properties
if|if
condition|(
name|property
operator|.
name|isSpecial
argument_list|()
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"references"
argument_list|)
condition|)
block|{
comment|//Note that multiple "references" properties might be present
comment|//if Users do parse parameters - so we need to collect all values
if|if
condition|(
name|property
operator|.
name|getParameter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"parameters are not supported for @references -> ignore '{}'"
argument_list|,
name|property
operator|.
name|getParameter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No URI values present for parsed @references property! (values: "
operator|+
name|propertyEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|references
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"fulltext"
argument_list|)
condition|)
block|{
comment|//Note that multiple "fullText" properties might be present
comment|//if Users do parse parameters - so we need to collect all values
if|if
condition|(
name|property
operator|.
name|getParameter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"parameters are not supported for @fullText -> ignore '{}'"
argument_list|,
name|property
operator|.
name|getParameter
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|text
range|:
name|texts
control|)
block|{
comment|//add the values
name|fullText
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"similarity"
argument_list|)
condition|)
block|{
name|similarityFields
operator|.
name|add
argument_list|(
name|property
operator|.
name|getParameter
argument_list|()
operator|!=
literal|null
condition|?
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|property
operator|.
name|getParameter
argument_list|()
argument_list|)
else|:
name|SpecialFieldEnum
operator|.
name|fullText
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
comment|//the default
for|for
control|(
name|String
name|text
range|:
name|texts
control|)
block|{
comment|//Append the text values to the context
name|similarityContext
operator|.
name|append
argument_list|(
name|text
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//TODO: implement LDPATH support
name|log
operator|.
name|warn
argument_list|(
literal|"ignore unsupported special property {}"
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//no special property
comment|// add the Constraint to the FieldQuery
comment|// TODO: how to deal with values of different types
comment|//  * currently References> Text> Datatype. First present value
comment|//    is used
comment|//  * non Reference | Text | Datatype values are ignored
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only references -> create reference constraint
name|query
operator|.
name|setConstraint
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|!=
name|propertyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Only some of the parsed values of the field {} contain"
operator|+
literal|"references -> will ignore values with missing references"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|texts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// NOTE: This will use OR over all texts. To enforce AND one
comment|// would need to parse a single string with all values e.g. by
comment|// using StringUtils.join(texts," ")
name|query
operator|.
name|setConstraint
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|texts
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|!=
name|propertyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Only some of the parsed values of the field {} are"
operator|+
literal|"of type String -> will ignore non-string values"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ValueConstraint
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//else no values ... ignore property
block|}
comment|//clean up
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|texts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|//now add constraints for the collected special properties
if|if
condition|(
operator|!
name|references
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//add references constraint
name|ReferenceConstraint
name|refConstraint
init|=
operator|new
name|ReferenceConstraint
argument_list|(
name|references
argument_list|,
name|MODE
operator|.
name|all
argument_list|)
decl_stmt|;
name|query
operator|.
name|setConstraint
argument_list|(
name|SpecialFieldEnum
operator|.
name|references
operator|.
name|getUri
argument_list|()
argument_list|,
name|refConstraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fullText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TextConstraint
name|textConstraint
init|=
operator|new
name|TextConstraint
argument_list|(
name|fullText
argument_list|)
decl_stmt|;
name|query
operator|.
name|setConstraint
argument_list|(
name|SpecialFieldEnum
operator|.
name|fullText
operator|.
name|getUri
argument_list|()
argument_list|,
name|textConstraint
argument_list|)
expr_stmt|;
comment|//add full text constraint
block|}
if|if
condition|(
name|similarityContext
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|similarityFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//add similarity constraint
name|Iterator
argument_list|<
name|String
argument_list|>
name|fieldIt
init|=
name|similarityFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|field
init|=
name|fieldIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|SimilarityConstraint
name|simConstraint
decl_stmt|;
if|if
condition|(
name|fieldIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|addFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|similarityFields
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|fieldIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addFields
operator|.
name|add
argument_list|(
name|fieldIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|simConstraint
operator|=
operator|new
name|SimilarityConstraint
argument_list|(
name|similarityContext
operator|.
name|toString
argument_list|()
argument_list|,
name|addFields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|simConstraint
operator|=
operator|new
name|SimilarityConstraint
argument_list|(
name|similarityContext
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setConstraint
argument_list|(
name|field
argument_list|,
name|simConstraint
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param rQuery      * @param query      */
specifier|private
name|void
name|addTypeConstraint
parameter_list|(
name|ReconcileQuery
name|rQuery
parameter_list|,
name|FieldQuery
name|query
parameter_list|)
block|{
comment|//maybe an other column was also mapped to the TYPE_FIELD property
name|Collection
argument_list|<
name|ReconcileValue
argument_list|>
name|additionalTypes
init|=
name|rQuery
operator|.
name|removeProperty
argument_list|(
name|TYPE_FIELD
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queryTypes
init|=
name|rQuery
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|additionalTypes
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|queryTypes
operator|!=
literal|null
condition|)
block|{
name|types
operator|=
name|queryTypes
expr_stmt|;
block|}
block|}
else|else
block|{
name|types
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|queryTypes
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|rQuery
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReconcileValue
name|value
range|:
name|additionalTypes
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|value
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
comment|//TODO: check if the assumption that String values are
comment|//good for types is valid
name|types
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else null -> ignore
block|}
block|}
if|if
condition|(
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|setConstraint
argument_list|(
name|TYPE_FIELD
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param rQuery      * @param query      */
specifier|private
name|void
name|addNameConstraint
parameter_list|(
name|ReconcileQuery
name|rQuery
parameter_list|,
name|FieldQuery
name|query
parameter_list|)
block|{
comment|//maybe an other column was also mapped to the NAME_FIELD property
name|Collection
argument_list|<
name|ReconcileValue
argument_list|>
name|additionalValues
init|=
name|rQuery
operator|.
name|removeProperty
argument_list|(
name|NAME_FIELD
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
name|additionalValues
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|rQuery
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|additionalValues
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|rQuery
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReconcileValue
name|value
range|:
name|additionalValues
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|query
operator|.
name|setConstraint
argument_list|(
name|NAME_FIELD
argument_list|,
operator|new
name|TextConstraint
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called on requests for the Metadata for the Reconciliation service      * @param callback      * @param header      * @return      * @throws JSONException      */
specifier|protected
name|Response
name|sendMetadata
parameter_list|(
name|String
name|callback
parameter_list|,
name|HttpHeaders
name|header
parameter_list|)
throws|throws
name|JSONException
block|{
comment|//TODO: implement!!
name|JSONObject
name|jMetadata
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jMetadata
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Stanbol Entityhub: "
operator|+
name|getSiteName
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|callbackString
init|=
operator|new
name|StringBuilder
argument_list|(
name|callback
argument_list|)
decl_stmt|;
name|callbackString
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|callbackString
operator|.
name|append
argument_list|(
name|jMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|callbackString
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|callbackString
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|CorsHelper
operator|.
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|header
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

