begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|LDPathUtils
operator|.
name|getReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
operator|.
name|EntityhubRootResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
operator|.
name|ReferencedSiteRootResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|resource
operator|.
name|SiteManagerRootResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|EntityhubLDPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_class
specifier|public
class|class
name|LDPathHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LDPathHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Executes the LDPath program on the contexts stored in the backend and      * returns the result as an RDF graph       * @param contexts the contexts to execute the program on      * @param ldpath the LDPath program to execute      * @param backend the {@link RDFBackend} to use      * @return The results stored within an RDF graph      * @throws LDPathParseException if the parsed LDPath program is invalid      */
specifier|private
specifier|static
name|MGraph
name|executeLDPath
parameter_list|(
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|backend
parameter_list|,
name|String
name|ldpath
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|contexts
parameter_list|)
throws|throws
name|LDPathParseException
block|{
name|MGraph
name|data
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|RdfValueFactory
name|vf
init|=
operator|new
name|RdfValueFactory
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|EntityhubLDPath
name|ldPath
init|=
operator|new
name|EntityhubLDPath
argument_list|(
name|backend
argument_list|,
name|vf
argument_list|)
decl_stmt|;
name|Program
argument_list|<
name|Object
argument_list|>
name|program
init|=
name|ldPath
operator|.
name|parseProgram
argument_list|(
name|getReader
argument_list|(
name|ldpath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Execute on Context(s) '{}' LDPath program: \n{}"
argument_list|,
name|contexts
argument_list|,
name|program
operator|.
name|getPathExpression
argument_list|(
name|backend
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*          * NOTE: We do not need to process the Representations returned by          * EntityhubLDPath#exdecute, because the RdfValueFactory used uses          * the local variable "MGraph data" to backup all created          * RdfRepresentation. Because of this all converted data will be          * automatically added the MGraph. The only thing we need to do is to          * wrap the MGraph in the response.          */
for|for
control|(
name|String
name|context
range|:
name|contexts
control|)
block|{
name|ldPath
operator|.
name|execute
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|context
argument_list|)
argument_list|,
name|program
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/**      * Utility that gets the messages of the parsing error. The message about the      * problem is contained in some parent Exception. Therefore this follows      * {@link Exception#getCause()}s. The toString method of the returned map      * will print the "exception: message" in the correct order.      * @param e the exception      * @return the info useful to replay in BAD_REQUEST responses      */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getLDPathParseExceptionMessage
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|messages
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Throwable
name|t
init|=
name|e
decl_stmt|;
do|do
block|{
comment|// the real parsing error is in some cause ...
name|messages
operator|.
name|put
argument_list|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... so collect all messages
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|t
operator|!=
literal|null
condition|)
do|;
return|return
name|messages
return|;
block|}
comment|/**      * Processes LDPath requests as supported by the {@link SiteManagerRootResource},      * {@link ReferencedSiteRootResource}, {@link EntityhubRootResource}.      * @param resource The resource used as context when sending RESTful Service API      * {@link Viewable} as response entity.      * @param backend The {@link RDFBackend} implementation      * @param ldpath the parsed LDPath program      * @param contexts the Entities to execute the LDPath program      * @param headers the parsed HTTP headers (used to determine the accepted      * content type for the response      * @param servletContext The Servlet context needed for CORS support      * @return the Response {@link Status#BAD_REQUEST} or {@link Status#OK}.      */
specifier|public
specifier|static
name|Response
name|handleLDPathRequest
parameter_list|(
name|BaseStanbolResource
name|resource
parameter_list|,
name|RDFBackend
argument_list|<
name|Object
argument_list|>
name|backend
parameter_list|,
name|String
name|ldpath
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|contexts
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|,
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|supported
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|JerseyUtils
operator|.
name|ENTITY_SUPPORTED_MEDIA_TYPES
argument_list|)
decl_stmt|;
name|supported
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
specifier|final
name|MediaType
name|acceptedMediaType
init|=
name|JerseyUtils
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
name|supported
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|boolean
name|printDocu
init|=
literal|false
decl_stmt|;
comment|//remove null and "" element
name|contexts
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|contexts
operator|==
literal|null
operator|||
name|contexts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
name|printDocu
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No context was provided by the Request. Missing parameter context.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
if|if
condition|(
operator|!
name|printDocu
operator|&
operator|(
name|ldpath
operator|==
literal|null
operator|||
name|ldpath
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|MediaType
operator|.
name|TEXT_HTML_TYPE
operator|.
name|isCompatible
argument_list|(
name|acceptedMediaType
argument_list|)
condition|)
block|{
name|printDocu
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No ldpath program was provided by the Request. Missing or empty parameter ldpath.\n"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|printDocu
condition|)
block|{
comment|//a missing parameter and the content type is compatible to HTML
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"ldpath"
argument_list|,
name|resource
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|TEXT_HTML
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
name|MGraph
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|executeLDPath
argument_list|(
name|backend
argument_list|,
name|ldpath
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse LDPath program:\n"
operator|+
name|ldpath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
operator|(
literal|"Unable to parse LDPath program (Messages: "
operator|+
name|getLDPathParseExceptionMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|")!\n"
operator|)
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|acceptedMediaType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|acceptedMediaType
operator|+
literal|"; charset=utf-8"
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

