begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|grefine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_comment
comment|/**  * Values can be simple JSON values or JSON objects with an 'id' and a  * 'name'. This is mapped to {@link ReconcileValue} objects with an optional   * {@link #getId()} and a required {@link #getValue()}.<p>  * The 'id' supports prefix:localname syntax for prefixes defined within the  * {@link NamespaceEnum}  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ReconcileValue
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
name|ReconcileValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|ReconcileValue
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed value MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * The getter for the value of the 'id' property of the 'v' object      * if present. This represents the value of fields that are already      * successfully linked (reconciled) with some entity.      * @return the id      */
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * @return the value      */
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Calls the {@link #toString()} method of the {@link #getValue()}      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|()
else|:
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|ReconcileValue
operator|&&
operator|(
comment|//other is value
operator|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ReconcileValue
operator|)
name|o
operator|)
operator|.
name|id
argument_list|)
operator|)
operator|||
comment|//ids are equals or
operator|(
name|id
operator|==
literal|null
operator|&&
operator|(
operator|(
name|ReconcileValue
operator|)
name|o
operator|)
operator|.
name|id
operator|==
literal|null
comment|//ids are null and
operator|&&
name|value
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ReconcileValue
operator|)
name|o
operator|)
operator|.
name|value
argument_list|)
operator|)
operator|)
return|;
comment|//values are equals
block|}
block|}
end_class

end_unit

