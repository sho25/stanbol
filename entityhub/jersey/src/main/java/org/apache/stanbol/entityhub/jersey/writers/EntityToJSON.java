begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|jersey
operator|.
name|writers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
specifier|final
class|class
name|EntityToJSON
block|{
specifier|private
name|EntityToJSON
parameter_list|()
block|{
comment|/* do not create instances of utility classes */
block|}
specifier|static
name|JSONObject
name|toJSON
parameter_list|(
name|Entity
name|entity
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jSign
decl_stmt|;
comment|//        if (entity instanceof Symbol) {
comment|//            jSign = writeSymbolAsJSON((Symbol) entity);
comment|//        } else if (entity instanceof EntityMapping) {
comment|//            jSign = writeEntityMappingAsJSON((EntityMapping) entity);
comment|//        } else {
name|jSign
operator|=
name|convertEntityToJSON
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|//        }
return|return
name|jSign
return|;
block|}
comment|//    private static JSONObject writeSymbolAsJSON(Symbol symbol) throws JSONException {
comment|//        JSONObject jSymbol = convertSignToJSON(symbol);
comment|//        jSymbol.put("label", symbol.getLabel());
comment|//        Iterator<Text> descriptions = symbol.getDescriptions();
comment|//        if (descriptions.hasNext()) {
comment|//            jSymbol.put("description", convertFieldValuesToJSON(descriptions));
comment|//        }
comment|//        Collection<String> value = ModelUtils.asCollection(symbol.getPredecessors());
comment|//        if (!value.isEmpty()) {
comment|//            jSymbol.put("predecessors", value);
comment|//        }
comment|//        value = ModelUtils.asCollection(symbol.getSuccessors());
comment|//        if (!value.isEmpty()) {
comment|//            jSymbol.put("successors", new JSONArray());
comment|//        }
comment|//        jSymbol.put("stateUri", symbol.getState().getUri());
comment|//        jSymbol.put("state", symbol.getState().name());
comment|//        return jSymbol;
comment|//    }
comment|//    private static JSONObject writeEntityMappingAsJSON(EntityMapping entityMapping) throws JSONException {
comment|//        JSONObject jEntityMapping = convertSignToJSON(entityMapping);
comment|//        jEntityMapping.put("symbol", entityMapping.getTargetId());
comment|//        jEntityMapping.put("entity", entityMapping.getSourceId());
comment|//        jEntityMapping.put("stateUri", entityMapping.getState().getUri());
comment|//        jEntityMapping.put("state", entityMapping.getState().name());
comment|//        return jEntityMapping;
comment|//    }
comment|/**      * @param entity      * @return      * @throws JSONException      */
specifier|private
specifier|static
name|JSONObject
name|convertEntityToJSON
parameter_list|(
name|Entity
name|entity
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jSign
decl_stmt|;
name|jSign
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
name|jSign
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|jSign
operator|.
name|put
argument_list|(
literal|"site"
argument_list|,
name|entity
operator|.
name|getSite
argument_list|()
argument_list|)
expr_stmt|;
comment|//        Representation rep = sign.getRepresentation();
name|jSign
operator|.
name|put
argument_list|(
literal|"representation"
argument_list|,
name|toJSON
argument_list|(
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jSign
operator|.
name|put
argument_list|(
literal|"metadata"
argument_list|,
name|toJSON
argument_list|(
name|entity
operator|.
name|getMetadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jSign
return|;
block|}
comment|/**      * Converts the {@link Representation} to JSON      *      * @param jSign      * @param rep      * @throws JSONException      */
specifier|static
name|JSONObject
name|toJSON
parameter_list|(
name|Representation
name|rep
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jRep
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jRep
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|rep
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|rep
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|jRep
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|convertFieldValuesToJSON
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jRep
return|;
block|}
comment|/**      * @param values Iterator over all the values to add      * @return The {@link JSONArray} with all the values as {@link JSONObject}      * @throws JSONException      */
specifier|private
specifier|static
name|JSONArray
name|convertFieldValuesToJSON
parameter_list|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONArray
name|jValues
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|jValues
operator|.
name|put
argument_list|(
name|convertFieldValueToJSON
argument_list|(
name|values
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|jValues
return|;
block|}
comment|/**      * The value to write. Special support for  {@link Reference} and {@link Text}.      * The {@link #toString()} Method is used to write the "value" key.      *      * @param value the value      * @return the {@link JSONObject} representing the value      * @throws JSONException      */
specifier|private
specifier|static
name|JSONObject
name|convertFieldValueToJSON
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jValue
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Reference
condition|)
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"reference"
argument_list|)
expr_stmt|;
name|jValue
operator|.
name|put
argument_list|(
literal|"xsd:datatype"
argument_list|,
name|DataTypeEnum
operator|.
name|AnyUri
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|jValue
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
operator|(
operator|(
name|Reference
operator|)
name|value
operator|)
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Text
condition|)
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|jValue
operator|.
name|put
argument_list|(
literal|"xml:lang"
argument_list|,
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|jValue
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|jValue
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|TimeUtils
operator|.
name|toString
argument_list|(
name|DataTypeEnum
operator|.
name|DateTime
argument_list|,
operator|(
name|Date
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|jValue
operator|.
name|put
argument_list|(
literal|"xsd:datatype"
argument_list|,
name|DataTypeEnum
operator|.
name|DateTime
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DataTypeEnum
argument_list|>
name|dataTypes
init|=
name|DataTypeEnum
operator|.
name|getPrimaryDataTypes
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dataTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"xsd:datatype"
argument_list|,
name|dataTypes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jValue
operator|.
name|put
argument_list|(
literal|"xsd:datatype"
argument_list|,
name|DataTypeEnum
operator|.
name|String
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jValue
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|jValue
return|;
block|}
block|}
end_class

end_unit

