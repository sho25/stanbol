begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|yard
operator|.
name|YardTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test uses the system property "basedir" to configure an embedded Solr  * Server. This property is set by the mvn surefire plugin. When using this  * Unit Test within a build environment that does not set this property one need  * to set it manually to the base directory of this module.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|SolrYardTest
extends|extends
name|YardTest
block|{
specifier|private
specifier|static
name|Yard
name|yard
decl_stmt|;
specifier|private
specifier|static
name|String
name|solrServer
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|testYardId
init|=
literal|"testYard"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|final
specifier|static
name|void
name|initYard
parameter_list|()
throws|throws
name|YardException
block|{
comment|//get the working directory
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
name|solrServer
operator|=
name|baseDir
operator|+
literal|"/src/test/resources/solr/test"
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BaseDir: "
operator|+
name|baseDir
argument_list|)
expr_stmt|;
name|SolrYardConfig
name|config
init|=
operator|new
name|SolrYardConfig
argument_list|(
name|testYardId
argument_list|,
name|solrServer
argument_list|)
decl_stmt|;
name|config
operator|.
name|setName
argument_list|(
literal|"Solr Yard Test"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDescription
argument_list|(
literal|"The Solr Yard instance used to execute the Unit Tests defined for the Yard Interface"
argument_list|)
expr_stmt|;
name|yard
operator|=
operator|new
name|SolrYard
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Yard
name|getYard
parameter_list|()
block|{
return|return
name|yard
return|;
block|}
comment|/*      * Three unit tests that check that SolrYardConfig does throw      * IllegalArgumentExceptions when parsing an illegal parameters.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSolrYardConfigInitWithNullParams
parameter_list|()
block|{
operator|new
name|SolrYardConfig
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSolrYardConfigInitWithNullUrl
parameter_list|()
block|{
operator|new
name|SolrYardConfig
argument_list|(
name|testYardId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSolrYardConfigInitWithNullID
parameter_list|()
block|{
operator|new
name|SolrYardConfig
argument_list|(
literal|null
argument_list|,
name|solrServer
argument_list|)
expr_stmt|;
block|}
comment|/**      * This Method removes all Representations create via {@link #create()} or      * {@link #create(String, boolean)} from the tested {@link Yard}.      * It also removes all Representations there ID was manually added to the      * {@link #representationIds} list.      */
annotation|@
name|AfterClass
specifier|public
specifier|final
specifier|static
name|void
name|clearUpRepresentations
parameter_list|()
throws|throws
name|YardException
block|{
name|yard
operator|.
name|remove
argument_list|(
name|representationIds
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

