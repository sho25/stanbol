<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This schema will be used by the Apache Stanbol SolrYard implementation to
 index entities.
 The implementation of the SolrYard does made several assumptions on
 configurations defined in this Schema. So changes to this schema that do
 affect such assumptions will most likelly cause unpredictable errors!
 
 However there are also a lot of places where users can optimize this schema
 to specific requirements. See the comments within this schema for more
 details!

 For more information, on how to customize the Solr schema.xml in general, 
 please see http://wiki.apache.org/solr/SchemaXml.

-->

<schema name="Apache Stanbol SolrYard Schema" version="1.2">
  <!--
    The SolrYard supports a list of types that is reflected by
    "fieldType" specifications within this schema.
    See the specific fieldType definition for more information
  -->
  <types>
    <!-- 
      This fieldType is used to store values with the dataType "xsd:string".
      It is NOT used for natural language texts. Assume that this data type is
      used for ISBN numbers, article numbers, string representations of
      unsupported data types ...
    -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
    <!-- 
      This can be used as alternative to "string" to enable case insensitive
      searches on string values.
      The KeywordTokenizerFactory ensures that the whole string is preserved as
      a single token.
    -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>


    <!-- boolean type: "true" or "false" used to store values with the datatype "xsd:boolean" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings.
        Currently not used by the SolrYard implementation, but reserved for future use. -->
    <fieldtype name="binary" class="solr.BinaryField"/>
    <!--
      Default numeric and date field types. By default used to index numeric values.
      Note that the "solr.TrieIntField" does support indexing values at various
      levels of precision to accelerate range queries. However the
      precisionStep of 0 used by this fieldTypes disables this feature.
      Change presisionStep to values > 0 to activate hierarchival indexing
      for all numeric fields of that types. See Solr documentation for
      suitable values and examples.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>

    <!--
      Numeric and date field types that do activate indexing values at various
      levels of precision to accelerate range queries.
      This can be used to activate hierarchival indexing for specific
      fields. See Notes within the field section.
    -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>

    <!-- 
      Natural Language Texts
      
      Indexing of natural language texts are supported by the solr.TextField class that
      allows the specification of custom text analyzers specified as a tokenizer and a 
      list of token filters.
      
      For more info on customizing your analyzer chain, please see
      http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
      
      The SolrYard has support for different languages. Within the schema.xml one need
      to define first a "fieldType" for language and second a dynamicField for the
      prefix used by the SolrYard for this language.
      For more information about the prefixes used by the SolrYard see the notes in the
      field section of this configuration.
      
      In addition the SolrYard also indexes natural language values (of any language)
      together with string values within a special field to support searches for
      texts without an specified language.
    -->
    <!-- 
      A general unstemmed text field - good if one does not know the language of the field.
      This is used as the default fieldType for fields that store values of different
      languages.
      It is also the default fieldType for languages that do not define special fieldTypes.
    -->
    <fieldType name="textgen" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    
    <!-- 
      A text field that only splits on whitespace for exact matching of words.
      Currently not used. May be used as an alternative to the textgen fieldType.
    -->
    <!--
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->
    
    <!-- 
      This is the default fieldType used for english language texts.
      
      Less flexible matching than the text_en field type, but less false matches.  
      Probably not ideal for product names, but may be good for SKUs. 
      Can insert dashes in the wrong place and still match.
    -->
    <fieldType name="text_en_Tight" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>


    <!-- 
      This can be used as an alternative to the "text_en_Tight" fieldTpye for
      english langauge texts.
      
      A text field that uses WordDelimiterFilter to enable splitting and matching of
      words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
      so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
      Synonyms and stopwords are customized by external files, and stemming is enabled.
    -->
    <!--
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
      </analyzer>
    </fieldType>
    -->
    
    <!--
      The SolrYard allows leading Wildcards (e.g. "*aris"). To provide
      good query performance for such queries one need to configure
      fieldTypes that use the ReversedWildcardFilterFactory as shown by
      this example.
      See Solr documentation for details
      
      A general unstemmed text field that indexes tokens normally and also
      reversed (via ReversedWildcardFilterFactory), to enable more efficient 
	  leading wildcard queries. 
    -->
    <!--
    <fieldType name="text_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    -->
    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="textCharNorm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!--
      This can be used to deactivate some functionality of the SolrYard or
      to configure that some fields of a data set are not stored nor indexed
      regardless of the Apache Stanbol Entityhub configuration!
    --> 
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" /> 

 </types>


 <fields>
   <!-- 
     For Information about the different attributes for fields
     see http://wiki.apache.org/solr/SchemaXml. 
   -->
    <!--
      The uri field is used as ID for documents indexed by the SolrYard.
      Do not change this definition!
    -->
   <field name="uri" type="string" indexed="true" stored="true" required="true" />

   <!-- 
     used to index all natural language texts of all fields of a document
    (via copyField). This is used as default search field.
    The type may be changed.
     -->
   <field name="_text" type="textgen" indexed="true" stored="false" multiValued="true"/>
   <!-- 
     used to store all references of the document (via copyField).
     This field may be used to search for related entities.
     Do not change this definition!
    -->
   <field name="_ref" type="string" indexed="true" stored="false" multiValued="true"/>
   <!-- 
     Field used to store the domain in case multiple datasets are stored witin the same
     Solr index (search for "Multi Yard Layout" for details).
     Do not change this definition!
   -->
   <field name="_domain" type="string" indexed="true" stored="false" multiValued="true"/>

   <!-- 
     Dynamic field definitions (used if a field name is not found)
     see http://wiki.apache.org/solr/SchemaXml for details.
     
     The SolrYard heavily uses dynamic fields to index fields based on there
     data type.
     Notes:
       - By default all dynamicField specifications use multiValued="true"
         because this schema.xml does not make any assumptions on the data stored.
         Even a boolean field may define both "true" and "false" as values.
       - The SolrYard currently uses only prefixes to represent data types 
         and languages. However postfixes are reserved for future extensions.
         That means that postfixes MUST NOT be used for dynamicField definitions
   -->
   <!--
     Used for all fields with boolean data type.
     One can change multivalued to "false" in case the data indexed do confirm to
     this restriction
   -->
   <dynamicField name="bool/*" type="boolean" indexed="true"  stored="true" multiValued="true"/>
   <!--
     Numeric dataTypes.
     Note that thy type can be changed to fieldTypes supporting hierarchical
     indexing of values to increase performance of ranged queries
   -->
   <dynamicField name="int/*"  type="int"     indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="lon/*"  type="long"    indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="flo/*"  type="float"   indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="dou/*"  type="double"  indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="cal/*"  type="date"    indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="dur/*"  type="string"  indexed="true"  stored="true" multiValued="true"/>
   <!-- 
     String fields that are not natural language
     To support case insensitive searches in such fields change 
     the type to "lowercase"
   -->
   <dynamicField name="str/*"  type="string"  indexed="true"  stored="true" multiValued="true"/>
   <!-- 
     references are values that represent IDs of other resources.
     Typically this will store URIs but in principle also other IDs
     could be used.
   -->
   <dynamicField name="ref/*"  type="string"  indexed="true"  stored="true" multiValued="true"/>

   <!--
     DynamicFields representing natural language texts.
     
     The type of such fields may be changed to one of the alternatives 
     descibed in the types section of this configuration.

     The SolrYard prefixes natural language texts with "@"
     followed by the defined language.
     Currently no processing of the language is done. So
     defineing the language "1xx5zr7" for Text will create
     a field with the prefix "@1xx5zr7".
     
     To define a special field type for a language one has
     to use "@" plus the key for the language as prefix.
     See the specification for English language texts as example.
     
     Also prefixes for country specific languages can be
     realized by defining dynamic fields like follows:
       use @en* to match en-GB and en-US
       use @en/* to match only en but not en-GB or en-US
       use @en-GB/* and @en* to have a special field type for 
         en-GB and one for other english text
   -->
   <!-- 
     Dynamic field for english languages.
     Note that the prefix "@en*" matches also "@en-GB" and "@en-US"
   -->
   <dynamicField name="@en*"  type="text_en_Tight" indexed="true" stored="true" multiValued="true"/>
   <!-- 
     The "@*" catches all the other languages including "@/" 
     (default language) used for texts without a defined language
   -->
   <dynamicField name="@*"  type="textgen"  indexed="true"  stored="true" multiValued="true"/>

   <!--
     To add special configurations for specific fields one
     has to include the fieldName within the prefix of the
     dynamicField specification.
     The SolrYard uses namespace prefixes to generate
     field names. When defined prefixes defined in the
     NamespaceEnum of the Entityhub are used.
     Currently there is no way to define used prefixes for
     other namespaces.
     
     This example shows how to activate lower case search
     for the dcmi-terms format property
  <dynamicField name="str/dc:format*" type="lowercase" indexed="true"  stored="true" multiValued="true"/>
     
     This example shows how to activate fast ranged queries
     for spatial searches
  <dynamicField name="dou/geo:lat*" type="tdouble" indexed="true"  stored="true" multiValued="true"/>
  <dynamicField name="dou/geo:lon*" type="tdouble" indexed="true"  stored="true" multiValued="true"/>
  <dynamicField name="int/geo:alt*" type="tint" indexed="true"  stored="true" multiValued="true"/>
     
     This example defines to use the type "text_en" for
     english language rdfs:comment values.
   
   <dynamicField name="@en/rdfs:comment*"  type="text_en"  indexed="true"  stored="true" multiValued="true"/>
     
     Note that this would not match "en-GB" nor "en-US".
   -->
    
    
   <!--
     The following dynamic field specifications define fiedls used
     by the SolrYard implementation for special purposes.
   -->
         
   <!-- 
     the "_!@*" fields contain a copy of all languages AND string values
     for that field. This field is used for text queries with no specified
     language.
     This field need not to be stored. The type can be changed to alternatives
     as described in the types section of this configuration.
   -->
   <dynamicField name="_!@*"  type="textgen"  indexed="true"  stored="false" multiValued="true"/>
   <!-- 
     fields starting with "_config/" are used to store configurations about how the
     index was created within the index (e.g. used namespace prefixes).
     Do not change this definition!
   -->
   <dynamicField name="_config/*" type="string" indexed="false" multiValued="true"/>
      
 </fields>

 <!-- 
   Field to use to determine and enforce document uniqueness.
   -->
 <uniqueKey>uri</uniqueKey>

 <!-- 
   field for the QueryParser to use when an explicit fieldname is absent.
   The SolrYard does currently not take advantage of this. However it can
   be used when directly accessing the SolrYard.
 -->
 <defaultSearchField>_text</defaultSearchField>

 <!--
   The SolrYard explizitly adds AND and OR for all boolean terms in
   generated queries. So changing that should have no influence on
   the SolrYard (not tested) 
   
   SolrQueryParser configuration: defaultOperator="AND|OR" 
 -->
 <solrQueryParser defaultOperator="OR"/>

  <!--
    The SolrYard Implementation assumes the following copyField commands.
    This commands MUST NOT be removed! 
   -->

   <!-- 
     Values of all fields that represent natural language texts
     or string values are copied to the default search field
     "_text".
     Currently the SolrYard does not use this field, but it is
     reserved for future useage and MUST therefoer already be
     included when indexing documents
   -->
   <copyField source="@*" dest="_text"/>
   <copyField source="str/*" dest="_text"/>
   <!--
     All references to other entities (documents) need to be
     copied to the "_ref" field.
     This field is required to query for dependencies of other
     documents (e.g. when one needs to remove a docuemnt and
     all references to it)
   -->
   <copyField source="ref/*" dest="_ref"/>
   
</schema>
