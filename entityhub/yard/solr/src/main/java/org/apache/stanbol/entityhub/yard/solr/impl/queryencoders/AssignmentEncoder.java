begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|queryencoders
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|QueryUtils
operator|.
name|encodePhraseQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ValueConstraint
operator|.
name|MODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|defaults
operator|.
name|QueryConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrQueryFactory
operator|.
name|ConstraintValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
operator|.
name|IndexValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
operator|.
name|IndexValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|ConstraintTypePosition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|ConstraintTypePosition
operator|.
name|PositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|EncodedConstraintParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|IndexConstraintTypeEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|IndexConstraintTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|QueryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|QueryUtils
operator|.
name|QueryTerm
import|;
end_import

begin_comment
comment|/**  * Encodes the Assignment of the field to an value. If a value is parsed, than it encodes that the field must  * be equals to this value.  *   * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|AssignmentEncoder
implements|implements
name|IndexConstraintTypeEncoder
argument_list|<
name|ConstraintValue
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|ConstraintTypePosition
name|POS
init|=
operator|new
name|ConstraintTypePosition
argument_list|(
name|PositionType
operator|.
name|assignment
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EQ
init|=
literal|":"
decl_stmt|;
comment|//    private final IndexValueFactory indexValueFactory;
specifier|public
name|AssignmentEncoder
parameter_list|(
name|IndexValueFactory
name|indexValueFactory
parameter_list|)
block|{
comment|//        if (indexValueFactory == null) {
comment|//            throw new IllegalArgumentException("The indexValueFactory MUST NOT be NULL");
comment|//        }
comment|//        this.indexValueFactory = indexValueFactory;
block|}
annotation|@
name|Override
specifier|public
name|void
name|encode
parameter_list|(
name|EncodedConstraintParts
name|constraint
parameter_list|,
name|ConstraintValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|//if no value is parsed
name|constraint
operator|.
name|addEncoded
argument_list|(
name|POS
argument_list|,
name|EQ
argument_list|)
expr_stmt|;
comment|// add the default
return|return;
comment|//and return
block|}
comment|//else encode the values and add them depending on the MODE
name|Set
argument_list|<
name|String
argument_list|>
name|queryConstraints
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|phraseTerms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexValue
name|indexValue
range|:
name|value
control|)
block|{
name|QueryTerm
index|[]
name|qts
init|=
name|QueryUtils
operator|.
name|encodeQueryValue
argument_list|(
name|indexValue
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|qts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QueryTerm
name|qt
range|:
name|qts
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|qt
operator|.
name|term
operator|.
name|length
argument_list|()
operator|+
operator|(
name|qt
operator|.
name|needsQuotes
condition|?
literal|3
else|:
literal|1
operator|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt
operator|.
name|needsQuotes
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|qt
operator|.
name|term
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|qt
operator|.
name|term
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|getBoost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
operator|.
name|append
argument_list|(
name|value
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryConstraints
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt
operator|.
name|hasWildcard
operator|&&
name|qt
operator|.
name|isText
condition|)
block|{
name|phraseTerms
operator|.
name|add
argument_list|(
name|qt
operator|.
name|term
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|queryConstraints
operator|.
name|add
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|getMode
argument_list|()
operator|==
name|MODE
operator|.
name|any
condition|)
block|{
comment|//in any mode we need to add values separately
name|constraint
operator|.
name|addEncoded
argument_list|(
name|POS
argument_list|,
name|queryConstraints
argument_list|)
expr_stmt|;
comment|//addEncoded copies the added values so we can clear and reuse
name|queryConstraints
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|.
name|getMode
argument_list|()
operator|==
name|MODE
operator|.
name|all
condition|)
block|{
comment|//in all mode we need to add all values in a single call
name|constraint
operator|.
name|addEncoded
argument_list|(
name|POS
argument_list|,
name|queryConstraints
argument_list|)
expr_stmt|;
comment|//NOTE also that for ALL mode Phrase queries do not make sense, as
comment|//     they would weaken the selection criteria
block|}
else|else
block|{
if|if
condition|(
name|phraseTerms
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Boolean
name|state
init|=
operator|(
name|Boolean
operator|)
name|value
operator|.
name|getProperty
argument_list|(
name|QueryConst
operator|.
name|PHRASE_QUERY_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
name|encodePhraseQuery
argument_list|(
name|phraseTerms
argument_list|)
decl_stmt|;
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|EQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|getBoost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
operator|.
name|append
argument_list|(
name|value
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|constraint
operator|.
name|addEncoded
argument_list|(
name|POS
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//phrase query deactivated
block|}
comment|//else for less than two terms we can not build a phrase query
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsDefault
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|IndexConstraintTypeEnum
argument_list|>
name|dependsOn
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexConstraintTypeEnum
operator|.
name|FIELD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexConstraintTypeEnum
name|encodes
parameter_list|()
block|{
return|return
name|IndexConstraintTypeEnum
operator|.
name|EQ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|ConstraintValue
argument_list|>
name|acceptsValueType
parameter_list|()
block|{
return|return
name|ConstraintValue
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

