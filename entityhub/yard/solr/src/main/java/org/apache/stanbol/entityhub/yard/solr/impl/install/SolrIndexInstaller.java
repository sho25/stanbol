begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|PROPERTY_ARCHIVE_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|PROPERTY_INDEX_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|SOLR_INDEX_ARCHIVE_EXTENSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|SOLR_INDEX_ARCHIVE_RESOURCE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|ConfigUtils
operator|.
name|SUPPORTED_SOLR_ARCHIVE_FORMAT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Services
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|InstallableResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|InstallTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|InstallTaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|RegisteredResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|ResourceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|ResourceTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|TaskResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|TaskResourceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|TransformationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|SolrDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|SolrServerProviderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The main class implementing the two core interfaces of the Apache Sling  * Installer framework.<p>  * The {@link ResourceTransformer} is needed to check if installed files   * actually SolrIndexes. Currently this check is done by checking if   *<code>'.'+{@link IndexInstallerConstants#SOLR_INDEX_ARCHIVE_EXTENSION}</code>  * is contained in the filename. In addition it is checked of the archive type  * is hinted by the Filename. If not than ".zip" (works also for ".jar") is  * assumed. Note also that for ".gz" and ".bz2" it is assumed that ".tar" is  * used. File names such as "&lt;indexName&gt;.  * {@value IndexInstallerConstants#SOLR_INDEX_ARCHIVE_EXTENSION}  * [.&lt;archiveType&gt;]" are used by this implementation<p>  * The {@link InstallTaskFactory} interface is needed to create the actual  * install and remove task for transformed resources. Based on the requested  * activity instances of {@link IndexInstallTask} or {@link IndexRemoveTask} are  * created.<p>  * This implementation uses a {@link Constants#SERVICE_RANKING} of 100. This  * ensures that the this implementation is called before any   * {@link ResourceTransformer} directly part of the Apache Sling Installer  * framework. If {@link #transform(RegisteredResource)} returns<code>null</code>  * the Sling Installer framework will call the next registered   * {@link ResourceTransformer} instance. By returning a {@link TransformationResult}  * no further {@link ResourceTransformer} will be called.<p>  *   * TODO: This package should move to an own bundle supporting Sling Install  * capabilities for Solr. Even the current version only on the   * {@link SolrDirectoryManager}. The reason why it is still inside the SolrYard  * Bundle is that the remove functionality would also need to stop currently  * running SolrServers. this is currently not possible with the current  * architecture because {@link SolrServer} instances returned by the   * {@link SolrServerProviderManager} are no OSGI components.   *   *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Services
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|InstallTaskFactory
operator|.
name|class
argument_list|)
block|,
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|ResourceTransformer
operator|.
name|class
argument_list|)
block|}
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|100
argument_list|)
comment|//we need to be in front of the Sling Components
specifier|public
class|class
name|SolrIndexInstaller
implements|implements
name|InstallTaskFactory
implements|,
name|ResourceTransformer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrIndexInstaller
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This service manages the SolrIndex Directory of the SolrYard. It is needed      * by the {@link IndexInstallTask} and {@link IndexRemoveTask} to do there      * work.      */
annotation|@
name|Reference
specifier|private
name|SolrDirectoryManager
name|solrDirectoryManager
decl_stmt|;
specifier|public
name|InstallTask
name|createTask
parameter_list|(
name|TaskResourceGroup
name|taskResourceGroup
parameter_list|)
block|{
name|TaskResource
name|toActivate
init|=
name|taskResourceGroup
operator|.
name|getActiveResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|SOLR_INDEX_ARCHIVE_RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|toActivate
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|toActivate
operator|.
name|getState
argument_list|()
operator|==
name|ResourceState
operator|.
name|UNINSTALL
condition|)
block|{
return|return
operator|new
name|IndexRemoveTask
argument_list|(
name|taskResourceGroup
argument_list|,
name|solrDirectoryManager
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|IndexInstallTask
argument_list|(
name|taskResourceGroup
argument_list|,
name|solrDirectoryManager
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TransformationResult
index|[]
name|transform
parameter_list|(
name|RegisteredResource
name|registeredResource
parameter_list|)
block|{
if|if
condition|(
name|InstallableResource
operator|.
name|TYPE_FILE
operator|.
name|equals
argument_list|(
name|registeredResource
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|checkIndex
argument_list|(
name|registeredResource
argument_list|)
return|;
block|}
else|else
block|{
comment|//this processes only files
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Checks if the installed resource is an Solr Index Archive      * @param registeredResource the registered resource parsed by the Apache      * Sling installer framework      * @return the transformed resource or<code>null</code> if the parsed      * resource is not an Solr Index Archive.      */
specifier|private
name|TransformationResult
index|[]
name|checkIndex
parameter_list|(
name|RegisteredResource
name|registeredResource
parameter_list|)
block|{
comment|//the URL is<schema>:<filePath>
comment|// where the schema is the provider that registered the resource
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|filePath
init|=
name|registeredResource
operator|.
name|getURL
argument_list|()
operator|.
name|substring
argument_list|(
name|registeredResource
operator|.
name|getURL
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//get the name of the index
name|String
name|indexName
init|=
name|FilenameUtils
operator|.
name|getBaseName
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
comment|//only the String until the first '.' -> multiple endings (e.g. slrindex.zip) expected
name|indexName
operator|=
name|indexName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>
literal|0
condition|?
name|indexName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
else|:
name|indexName
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_INDEX_NAME
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
comment|//now convert to lover case to ease the tests for file endings
name|filePath
operator|=
name|filePath
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|filePath
operator|.
name|contains
argument_list|(
literal|'.'
operator|+
name|SOLR_INDEX_ARCHIVE_EXTENSION
argument_list|)
condition|)
block|{
comment|//not an solr index archive
return|return
literal|null
return|;
comment|// -> can not transform
block|}
name|String
name|extension
init|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|String
name|archiveFormat
init|=
name|SUPPORTED_SOLR_ARCHIVE_FORMAT
operator|.
name|get
argument_list|(
name|extension
argument_list|)
decl_stmt|;
if|if
condition|(
name|archiveFormat
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to process Solr Index Archive from Resource "
operator|+
name|registeredResource
operator|.
name|getURL
argument_list|()
operator|+
literal|"because of unsupported archive format \""
operator|+
name|extension
operator|+
literal|"\" (supported are "
operator|+
name|SUPPORTED_SOLR_ARCHIVE_FORMAT
operator|.
name|keySet
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_ARCHIVE_FORMAT
argument_list|,
name|archiveFormat
argument_list|)
expr_stmt|;
block|}
name|TransformationResult
name|tr
init|=
operator|new
name|TransformationResult
argument_list|()
decl_stmt|;
comment|//        try {
comment|//            tr.setInputStream(registeredResource.getInputStream());
comment|//        } catch (IOException e) {
comment|//            log.error(String.format("Unable to transform RegisteredResource %s with type %s and scheme %s",
comment|//                registeredResource.getURL(), registeredResource.getType(), registeredResource.getScheme()),e);
comment|//            return null;
comment|//        }
name|tr
operator|.
name|setId
argument_list|(
name|indexName
operator|+
literal|'.'
operator|+
name|SOLR_INDEX_ARCHIVE_EXTENSION
operator|+
literal|'.'
operator|+
name|archiveFormat
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setAttributes
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setResourceType
argument_list|(
name|SOLR_INDEX_ARCHIVE_RESOURCE_TYPE
argument_list|)
expr_stmt|;
return|return
operator|new
name|TransformationResult
index|[]
block|{
name|tr
block|}
return|;
block|}
block|}
end_class

end_unit

