begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|embedded
operator|.
name|EmbeddedSolrPorovider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This Utility provides Methods that copy a configuration from a {@link Bundle}  * and copy it to a directory.<p>  * This is currently used by the {@link EmbeddedSolrPorovider} to initialise the  * internally managed {@link EmbeddedSolrServer} and/or to add additional cores.  * However such methods are also useful for the initialisation of an prepared  * index. Assuming that such prepared indexes are provided as a OSGI bundle.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ConfigUtils
block|{
specifier|private
name|ConfigUtils
parameter_list|()
block|{}
comment|/**      * The logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The name of the directoy used in the bundle to search for the default config      */
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_DIR
init|=
literal|"solr/conf"
decl_stmt|;
comment|/**      * The name of the root directoy used within an bundle to search for all cores      * that need to be added to an existing solr multi core configuration      */
specifier|public
specifier|static
specifier|final
name|String
name|CORE_CONFIG_DIR
init|=
literal|"solr/core"
decl_stmt|;
comment|/**      * Initialises the default configuration for the SolrYard based on data in      * the parsed bundle. The configuration will be copied to the parsed root      * directory.      * @param bundle the bundle used to load the defaultConfiguration from the      * {@link #CONFIG_DIR} (value=" {@value #CONFIG_DIR}") directory.      * @param rootDir the target directory for the configuration.       * @param override if true existing configurations are overridden.      * @return the root directory of the solr configuration (same as parsed as rootDir)      * @throws IOException On any IO error while coping the configuration      * @throws NullPointerException if<code>null</code> is parsed as bundle or rootDir      * @throws IllegalStateException If the parsed bundle is in the {@link Bundle#UNINSTALLED}      * state, the parsed rootDir does exist but is not a directory.      * @throws IllegalArgumentException If the parsed bundle does not contain the      * required information to set up an configuration       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|//Enumeration<URL> required by OSGI specification
specifier|public
specifier|static
name|File
name|copyDefaultConfig
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|File
name|rootDir
parameter_list|,
name|boolean
name|override
parameter_list|)
throws|throws
name|IOException
throws|,
name|NullPointerException
throws|,
name|IllegalStateException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Bundle MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rootDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed root directory MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rootDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|rootDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed root directory "
operator|+
name|rootDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" extists but is not a directory!"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Copy Default Config from Bundle %s to %s (override=%s)"
argument_list|,
operator|(
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
operator|)
argument_list|,
name|rootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|override
argument_list|)
argument_list|)
expr_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|resources
init|=
operator|(
name|Enumeration
argument_list|<
name|URL
argument_list|>
operator|)
name|bundle
operator|.
name|findEntries
argument_list|(
name|CONFIG_DIR
argument_list|,
literal|"*.*"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//TODO: check validity of config and thorw IllegalArgumentException if not valid
while|while
condition|(
name|resources
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|resource
init|=
name|resources
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|copyResource
argument_list|(
name|rootDir
argument_list|,
name|resource
argument_list|,
name|CONFIG_DIR
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" ... default Configuration copied to "
operator|+
name|rootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rootDir
return|;
block|}
comment|/**      * Copies a resource (URL of an resource within a Bundle) to a file      * @param rootDir the directory used as target      * @param resource the resource URL      * @param context the context used to search for the relative path within the URL      * @param override if resources in the target should be overridden if they already exist      * @throws IOException on any IO error      */
specifier|private
specifier|static
name|void
name|copyResource
parameter_list|(
name|File
name|rootDir
parameter_list|,
name|URL
name|resource
parameter_list|,
name|String
name|context
parameter_list|,
name|boolean
name|override
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|context
operator|.
name|charAt
argument_list|(
name|context
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|context
operator|=
name|context
operator|+
literal|'/'
expr_stmt|;
block|}
name|String
name|resourcePath
init|=
name|resource
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|contextPos
init|=
name|resourcePath
operator|.
name|lastIndexOf
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextPos
operator|>=
literal|0
condition|)
block|{
name|contextPos
operator|=
name|contextPos
operator|+
name|context
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Context %s not found in resource %s -> ignored!"
argument_list|,
name|context
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|relativePath
init|=
name|resourcePath
operator|.
name|substring
argument_list|(
name|contextPos
argument_list|)
decl_stmt|;
name|String
index|[]
name|relativePathElements
init|=
name|relativePath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|File
name|parentElement
init|=
name|rootDir
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relativePathElements
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|File
name|pathElement
init|=
operator|new
name|File
argument_list|(
name|parentElement
argument_list|,
name|relativePathElements
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathElement
operator|.
name|exists
argument_list|()
condition|)
block|{
name|pathElement
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|parentElement
operator|=
name|pathElement
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|parentElement
argument_list|,
name|relativePathElements
index|[
name|relativePathElements
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|boolean
name|overrideState
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|override
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|overrideState
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|copyURLToFile
argument_list|(
name|resource
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"> %s %s"
argument_list|,
name|overrideState
condition|?
literal|"override"
else|:
literal|"copy"
argument_list|,
name|relativePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Copy the configuration of an core.      * @param bundle The bundle used to load the core      * @param coreDir the target directory for the core      * @param coreName the core name or<code>null</code> to directly load the      * configuration as present under {@value #CONFIG_DIR} in the bundle. This      * property can be used if a bundle needs to provide multiple core      * configurations      * @param override if files in the target directory should be overridden      * @throws IOException On any IO error while coping the configuration      * @throws NullPointerException if<code>null</code> is parsed as bundle or coreDir      * @throws IllegalStateException If the parsed bundle is in the {@link Bundle#UNINSTALLED}      * state, the parsed coreDir does exist but is not a directory.      * @throws IllegalArgumentException If the parsed bundle does not contain the      * required information to set up an configuration or the parsed coreName is empty.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|//Enumeration<URL> required by OSGI specification
specifier|public
specifier|static
name|void
name|copyCore
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|File
name|coreDir
parameter_list|,
name|String
name|coreName
parameter_list|,
name|boolean
name|override
parameter_list|)
throws|throws
name|IOException
throws|,
name|NullPointerException
throws|,
name|IllegalStateException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Bundle MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|coreDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed core directory MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|coreDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|coreDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed core directory "
operator|+
name|coreDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" extists but is not a directory!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|coreName
operator|!=
literal|null
operator|&&
name|coreName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed core name MUST NOT be empty (However NULL is supported)!"
argument_list|)
throw|;
block|}
name|String
name|context
init|=
name|CORE_CONFIG_DIR
operator|+
operator|(
name|coreName
operator|!=
literal|null
condition|?
literal|'/'
operator|+
name|coreName
else|:
literal|""
operator|)
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|resources
init|=
operator|(
name|Enumeration
argument_list|<
name|URL
argument_list|>
operator|)
name|bundle
operator|.
name|findEntries
argument_list|(
name|context
argument_list|,
literal|"*.*"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|resources
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|resource
init|=
name|resources
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|copyResource
argument_list|(
name|coreDir
argument_list|,
name|resource
argument_list|,
name|context
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

