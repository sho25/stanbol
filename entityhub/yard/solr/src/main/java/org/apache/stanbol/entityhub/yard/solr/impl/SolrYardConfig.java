begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|yard
operator|.
name|AbstractYard
operator|.
name|YardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used for the configuration of a SolrYard. Especially if the SolrYard is not running within an OSGI context,  * than an instance of this class must be configured and than parsed to the constructor of {@link SolrYard}.  *<p>  * When running within an OSGI context, the configuration is provided by the OSGI environment. I that case  * this class is used as a wrapper for easy access to the configuration.  *   * @author Rupert Westenthaler  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SolrYardConfig
extends|extends
name|YardConfig
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrYardConfig
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The key used to configure the URL for the SolrServer      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_SERVER_LOCATION
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.solrUri"
decl_stmt|;
comment|/**      * The key used to configure if data of multiple Yards are stored within the same index (      *<code>default=false</code>)      */
specifier|public
specifier|static
specifier|final
name|String
name|MULTI_YARD_INDEX_LAYOUT
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.multiYardIndexLayout"
decl_stmt|;
comment|/**      * The maximum boolean clauses as configured in the solrconfig.xml of the SolrServer. The default value      * for this config in Solr 1.4 is 1024.      *<p>      * This value is important for generating queries that search for multiple documents, because it      * determines the maximum number of OR combination for the searched document ids.      */
specifier|public
specifier|static
specifier|final
name|String
name|MAX_BOOLEAN_CLAUSES
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.maxBooleanClauses"
decl_stmt|;
comment|/**      * This property allows to define a field that is used to parse the boost for the parsed representation.      * Typically this will be the pageRank of that entity within the referenced site (e.g.      * {@link Math#log1p(double)} of the number of incoming links      */
specifier|public
specifier|static
specifier|final
name|String
name|DOCUMENT_BOOST_FIELD
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.documentBoost"
decl_stmt|;
comment|/**      * Key used to configure {@link Entry Entry&lt;String,Float&gt;} for fields with the boost. If no Map is      * configured or a field is not present in the Map, than 1.0f is used as Boost. If a Document boost is      * present than the boost of a Field is documentBoost*fieldBoost.      */
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_BOOST_MAPPINGS
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.fieldBoosts"
decl_stmt|;
comment|/**      * Key used to to enable/disable the default configuration. If this is enabled,      * that the index will get initialised with the Default configuration.<p>      * Notes:<ul>      *<li> Configuration is only supported for EmbeddedSolrServers that use a      * relative path      *<li> If this property is enabled the value of the       * {@link #SOLR_INDEX_CONFIGURATION_NAME} will be ignored.      *</ul>      * Only applies in case a EmbeddedSolrServer is used.      * @see SolrYardConfig#isAllowInitialisation()      * @see SolrYardConfig#setAllowInitialisation(Boolean)      */
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_INITIALISATION_STATE
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.useDefaultConfig"
decl_stmt|;
comment|/**      * By default the use of an default configuration is disabled!      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ALLOW_INITIALISATION_STATE
init|=
literal|false
decl_stmt|;
comment|/**      * The name of the configuration use as default.       */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SOLR_INDEX_CONFIGURATION_NAME
init|=
literal|"default.solrindex.zip"
decl_stmt|;
comment|/**      * Allows to configure the name of the index used for the configuration of the Solr Core.      * Only applies in case of using an EmbeddedSolrServer and      * {@link #ALLOW_INITIALISATION_STATE} is disabled.      * As default the value of the {@link #SOLR_SERVER_LOCATION} is used.      * @see SolrYardConfig#getIndexConfigurationName()      * @see SolrYardConfig#setIndexConfigurationName(String)      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_INDEX_CONFIGURATION_NAME
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.configName"
decl_stmt|;
comment|/**      * The default value for the maxBooleanClauses of SolrQueries. Set to {@value #DEFAULT_MAX_BOOLEAN_CLAUSES}      * the default of Slor 1.4      */
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_BOOLEAN_CLAUSES
init|=
literal|1024
decl_stmt|;
comment|/**      * Key used to enable/disable committing of update(..) and store(..) operations. Enabling this ensures      * that indexed documents are immediately available for searches, but it will also decrease the      * performance for updates.      */
specifier|public
specifier|static
specifier|final
name|String
name|IMMEDIATE_COMMIT
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.immediateCommit"
decl_stmt|;
comment|/**      * By default {@link #IMMEDIATE_COMMIT} is enabled      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_IMMEDIATE_COMMIT_STATE
init|=
literal|true
decl_stmt|;
comment|/**      * If {@link #IMMEDIATE_COMMIT} is deactivated, than this time is parsed to update(..) and store(..)      * operations as the maximum time (in ms) until a commit.      */
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_WITHIN_DURATION
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.commitWithinDuration"
decl_stmt|;
comment|/**      * The default value for the {@link #COMMIT_WITHIN_DURATION} parameter is 10 sec.      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_COMMIT_WITHIN_DURATION
init|=
literal|1000
operator|*
literal|10
decl_stmt|;
comment|/**      * Creates a new config with the minimal set of required properties      *       * @param id      *            the ID of the Yard      * @param solrServer      *            the base URL of the {@link SolrServer}      * @throws IllegalArgumentException      *             if the parsed valued do not fulfil the requirements.      */
specifier|public
name|SolrYardConfig
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|solrServer
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setSolrServerLocation
argument_list|(
name|solrServer
argument_list|)
expr_stmt|;
try|try
block|{
name|isValid
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Initialise the Yard configuration based on a parsed configuration. Usually used on the context of an      * OSGI environment in the activate method.      *       * @param config      *            the configuration usually parsed within an OSGI activate method      * @throws ConfigurationException      *             if the configuration is incomplete of some values are not valid      * @throws IllegalArgumentException      *             if<code>null</code> is parsed as configuration      */
specifier|protected
name|SolrYardConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|ConfigurationException
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setter for the location of the SolrServer. Might be a URL or a file.      *       * @param url      *            the base URL of the SolrServer. Required, NOT NULL.      */
specifier|public
name|void
name|setSolrServerLocation
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|SOLR_SERVER_LOCATION
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|remove
argument_list|(
name|SOLR_SERVER_LOCATION
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the Location of the SolrServer. In case of an remote server this will be the base URL of the      * RESTful interface. In case of an embedded Server it is the directory containing the solr.xml or the      * directory of the core in case of a multi-core setup.      *       * @return the URL or path to the SolrServer      */
specifier|public
name|String
name|getSolrServerLocation
parameter_list|()
throws|throws
name|IllegalStateException
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SOLR_SERVER_LOCATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Setter for the multi yard index layout state.      *<p>      * The multi layout state. If data of multiple yards are stored in the same Solr Index, than the YardID      * MUST be stored within all indexed documents. In addition the to all queries a fq (filterQuery) must be      * added that restricts results to the current yard      */
specifier|public
name|void
name|setMultiYardIndexLayout
parameter_list|(
name|Boolean
name|multiYardIndexLayoutState
parameter_list|)
block|{
if|if
condition|(
name|multiYardIndexLayoutState
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|MULTI_YARD_INDEX_LAYOUT
argument_list|,
name|multiYardIndexLayoutState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|remove
argument_list|(
name|MULTI_YARD_INDEX_LAYOUT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the multi yard index layout state.      *<p>      * If data of multiple yards are stored in the same Solr Index, than the YardID MUST be stored within all      * indexed documents. In addition the to all queries a fq (filterQuery) must be added that restricts      * results to the current yard.      *<p>      * The default value is<code>false</code>      *       * @return the multi yard index layout state      */
specifier|public
name|boolean
name|isMultiYardIndexLayout
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|MULTI_YARD_INDEX_LAYOUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Getter for the state if this SolrYard can be initialised by using the default configuration or if it is      * required to use a provided configuration. The default is set to<code>true</code>.      *<p>      * If this property is set to<code>false</code> than the SolrYard can only be initialised if the Index is      * already available or the initial configuration is provided to the {@link SolrDirectoryManager}.      *       * @return the state or<code>true</code> as default      */
specifier|public
name|boolean
name|isAllowInitialisation
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|ALLOW_INITIALISATION_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|DEFAULT_ALLOW_INITIALISATION_STATE
return|;
block|}
block|}
comment|/**      * Setter for the state if this SolrYard can be initialised by using the default configuration or if it is      * required to use a provided configuration. The default is set to<code>true</code>.      *<p>      * If this property is set to<code>false</code> than the SolrYard can only be initialised if the Index is      * already available or the initial configuration is provided to the {@link SolrDirectoryManager}.      *       * @param defaultInitialisationState      *            the state or<code>null</code> to remove the current configuration. The default state is      *<code>true</code>.      */
specifier|public
name|void
name|setAllowInitialisation
parameter_list|(
name|Boolean
name|defaultInitialisationState
parameter_list|)
block|{
if|if
condition|(
name|defaultInitialisationState
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ALLOW_INITIALISATION_STATE
argument_list|,
name|defaultInitialisationState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|remove
argument_list|(
name|ALLOW_INITIALISATION_STATE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the name of the configuration used to initialise the SolrServer.<p>      * In case this property is not set the value of {@link #getSolrServerLocation()}       * is used as default.<p>      * Please NOTE that in case<code>{@link #isAllowInitialisation()} == true</code>       * the value of {@link SolrYard#DEFAULT_SOLR_INDEX_CONFIGURATION_NAME} MUST      * BE used to initialise the SolrIndex instead of the value returned by this      * Method!      * @return the name of the configuration of the SolrIndex      * @see SolrYard#SOLR_INDEX_CONFIGURATION_NAME      * @see SolrYard#ALLOW_INITIALISATION_STATE      */
specifier|public
name|String
name|getIndexConfigurationName
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SOLR_INDEX_CONFIGURATION_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|DEFAULT_SOLR_INDEX_CONFIGURATION_NAME
return|;
block|}
block|}
comment|/**      * Setter for the name of the configuration used to initialise this SolrYard. Parsing<code>null</code>,      * empty or equals to the {@link #getSolrServerLocation() Solr serve location} as       * name will remove this configuration.      *       * @param name      *            the name of the configuration.      */
specifier|public
name|void
name|setIndexConfigurationName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|SOLR_INDEX_CONFIGURATION_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|SOLR_INDEX_CONFIGURATION_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the maximum number of boolean clauses allowed for queries      *       * @return The configured number of<code>null</code> if not configured or the configured value is not an      *         valid Integer.      */
specifier|public
name|int
name|getMaxBooleanClauses
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|MAX_BOOLEAN_CLAUSES
argument_list|)
decl_stmt|;
name|int
name|clauses
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|clauses
operator|=
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|clauses
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse Integer property '"
operator|+
name|MAX_BOOLEAN_CLAUSES
operator|+
literal|"' from configured value '"
operator|+
name|value
operator|+
literal|"'! Use default '"
operator|+
name|DEFAULT_MAX_BOOLEAN_CLAUSES
operator|+
literal|"' instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|DEFAULT_MAX_BOOLEAN_CLAUSES
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|clauses
operator|=
name|DEFAULT_MAX_BOOLEAN_CLAUSES
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|<
literal|1
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configured '{}={} is invalid (value MUST BE> 0). Use "
operator|+
literal|"default {} instead."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|MAX_BOOLEAN_CLAUSES
block|,
name|clauses
block|,
name|DEFAULT_MAX_BOOLEAN_CLAUSES
block|}
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|DEFAULT_MAX_BOOLEAN_CLAUSES
expr_stmt|;
block|}
return|return
name|clauses
return|;
block|}
specifier|public
name|void
name|setMaxBooleanClauses
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
if|if
condition|(
name|integer
operator|==
literal|null
operator|||
name|integer
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|MAX_BOOLEAN_CLAUSES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|MAX_BOOLEAN_CLAUSES
argument_list|,
name|integer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDocumentBoostFieldName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|==
literal|null
operator|||
name|fieldName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|DOCUMENT_BOOST_FIELD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|DOCUMENT_BOOST_FIELD
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDocumentBoostFieldName
parameter_list|()
block|{
name|Object
name|name
init|=
name|config
operator|.
name|get
argument_list|(
name|DOCUMENT_BOOST_FIELD
argument_list|)
decl_stmt|;
return|return
name|name
operator|==
literal|null
condition|?
literal|null
else|:
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setFieldBoosts
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldBoosts
parameter_list|)
block|{
if|if
condition|(
name|fieldBoosts
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|FIELD_BOOST_MAPPINGS
argument_list|,
name|fieldBoosts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|remove
argument_list|(
name|FIELD_BOOST_MAPPINGS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isImmediateCommit
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|IMMEDIATE_COMMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|DEFAULT_IMMEDIATE_COMMIT_STATE
return|;
block|}
block|}
specifier|public
name|void
name|setImmediateCommit
parameter_list|(
name|Boolean
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|IMMEDIATE_COMMIT
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|remove
argument_list|(
name|IMMEDIATE_COMMIT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|int
name|getCommitWithinDuration
parameter_list|()
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|COMMIT_WITHIN_DURATION
argument_list|)
decl_stmt|;
name|int
name|duration
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|duration
operator|=
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|duration
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse Integer property '"
operator|+
name|COMMIT_WITHIN_DURATION
operator|+
literal|"' from configured value '"
operator|+
name|value
operator|+
literal|"'! Use default "
operator|+
name|DEFAULT_COMMIT_WITHIN_DURATION
operator|+
literal|"ms instead."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|duration
operator|=
name|DEFAULT_COMMIT_WITHIN_DURATION
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|duration
operator|=
name|DEFAULT_COMMIT_WITHIN_DURATION
expr_stmt|;
block|}
if|if
condition|(
name|duration
operator|<=
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configured '{}={}ms is invalid (value MUST BE>= 0). Use "
operator|+
literal|"default {}ms instead."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|COMMIT_WITHIN_DURATION
block|,
name|duration
block|,
name|DEFAULT_COMMIT_WITHIN_DURATION
block|}
argument_list|)
expr_stmt|;
name|duration
operator|=
name|DEFAULT_COMMIT_WITHIN_DURATION
expr_stmt|;
block|}
return|return
name|duration
return|;
block|}
specifier|public
specifier|final
name|void
name|setCommitWithinDuration
parameter_list|(
name|Integer
name|duration
parameter_list|)
block|{
if|if
condition|(
name|duration
operator|==
literal|null
operator|||
name|duration
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|COMMIT_WITHIN_DURATION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|COMMIT_WITHIN_DURATION
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|getFieldBoosts
parameter_list|()
block|{
name|Object
name|fieldBoosts
init|=
name|config
operator|.
name|get
argument_list|(
name|FIELD_BOOST_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldBoosts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|fieldBoosts
operator|instanceof
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
operator|)
name|fieldBoosts
return|;
block|}
else|else
block|{
comment|// TODO: add support for parsing from String[] and Collection<String>
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
comment|/**      * checks for the {@link SolrYard#SOLR_SERVER_LOCATION}      */
annotation|@
name|Override
specifier|protected
name|void
name|validateConfig
parameter_list|()
throws|throws
name|ConfigurationException
block|{
try|try
block|{
name|String
name|solrServer
init|=
name|getSolrServerLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SOLR_SERVER_LOCATION
argument_list|,
literal|"The URL of the Solr server MUST NOT be NULL!"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SOLR_SERVER_LOCATION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

