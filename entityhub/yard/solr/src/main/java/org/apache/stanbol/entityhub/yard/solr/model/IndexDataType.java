begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_comment
comment|/**  * This class is used to define index types. It is only used to provide an unique  * ID and an human readable name for such types.<p>  * This type is necessary, because we assume that indices only support string  * values. Therefore any java type needs to be converted to its string  * representation. This type is used to preserve the type information.<p>  * How types are encoded within the index depends on the actual full text index  * used. The functionality of mapping of this index data types to the actual  * types as supported by the index is provided by the used {@link FieldMapper}  * implementation.<p>  * It is suggested to use the XSD Datatypes as id's for instances where suitable.  * see<a herf=http://www.w3.org/TR/xmlschema-2/#built-in-datatypes> XSD built in  * datatypes</a> for more information.  *  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|IndexDataType
block|{
comment|/**      * The default index type is defined as xsd:string (http://www.w3.org/2001/XMLSchema/string)      */
specifier|public
specifier|static
specifier|final
name|IndexDataType
name|DEFAULT
init|=
operator|new
name|IndexDataType
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
literal|"string"
argument_list|)
decl_stmt|;
comment|/**      * Prefix used by this type      */
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
comment|/**      * Suffix used by this type      */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|IndexDataType
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new index data type, by defining it's id and name. The id MUST NOT      * be<code>null</code> nor empty. If the name is<code>null</code>, than the      * name is generated based on the id by searching the last index of '#', '/' or      * ':'.      * @param id the unique id used for this data type. Values MUST NOT be      *<code>null</code> nor empty.      * @param name the name for this data type.      *      */
specifier|public
name|IndexDataType
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|"#"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|name
operator|=
name|id
operator|.
name|substring
argument_list|(
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|"#"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|name
operator|=
name|id
operator|.
name|substring
argument_list|(
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|name
operator|=
name|id
operator|.
name|substring
argument_list|(
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|id
expr_stmt|;
block|}
comment|//convert first char to lower case
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Getter for the prefix      * @return the prefix used by this type or<code>null</code> if this      * type does not use a prefix.      */
specifier|public
specifier|final
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Getter for the name      * @return the name of this dataType      */
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|IndexDataType
operator|&&
operator|(
operator|(
name|IndexDataType
operator|)
name|obj
operator|)
operator|.
name|id
operator|.
name|equals
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Returns the id of the dataType. Use {@link #getName()} if you need a      * short variant      * @return the id of the dataType      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

