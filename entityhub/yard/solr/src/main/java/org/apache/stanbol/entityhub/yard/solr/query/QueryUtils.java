begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|DefaultICUTokenizerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|ICUTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|ICUTokenizerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|ICUTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|SolrUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|defaults
operator|.
name|IndexDataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|queryencoders
operator|.
name|AssignmentEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
operator|.
name|IndexValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
operator|.
name|IndexValueFactory
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|QueryUtils
block|{
specifier|private
name|QueryUtils
parameter_list|()
block|{}
comment|/**      * The {@link DefaultICUTokenizerConfig}      */
specifier|private
specifier|final
specifier|static
name|ICUTokenizerConfig
name|tokenizerConfig
init|=
operator|new
name|DefaultICUTokenizerConfig
argument_list|()
decl_stmt|;
comment|/**      * Regex patter that searches for Wildcard chars '*' and '?' excluding      * escaped versions '\*' and '\?'      */
specifier|private
specifier|final
specifier|static
name|Pattern
name|WILDCARD_QUERY_CHAR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^\\\\][\\*\\?]"
argument_list|)
decl_stmt|;
comment|/**      * This method encodes a parsed index value as needed for queries.      *<p>      * In case of TXT it is assumed that a whitespace tokenizer is used by the index. Therefore values with      * multiple words need to be treated and connected with AND to find only values that contain all. In case      * of STR no whitespace is assumed. Therefore spaces need to be replaced with '+' to search for tokens      * with the exact name. In all other cases the string need not to be converted.      *       *<del>Note also that text queries are converted to lower case</del>      * Note: since 2012-03-14 parsed values are only converted to lower case.      *<p>      *<b>TODO:</b> Until Solr 3.6 is released and the implementation of      *<a href="https://issues.apache.org/jira/browse/">SOLR-2438</a> is      * released this needs to still convert wildcard queries to lower case.<br>      * Because of that:<ul>      *<li> in case<code>escape=true</code>. Non-wildcard queries should support      * case sensitive searches. If the searched solr field uses a lowerCase      * filter than this will be done by Solr anyway and if not that case      * sensitivity might be important!      *<li> for<code>escape=false</code> - wild card searches the values are      * still converted to lower case to keep compatible with previous versions.      * TODO: the caseSensitive parameter of TextConstraints should be used      * instead      *</ul>      *       * @param indexValue      *            the index value      * @param escape if<code>true</code> all Solr special chars are escaped if      *<code>false</code> than '*' and '?' as used for wildcard searches are      * not escaped.      * @return the (possible multiple) values that need to be connected with AND      */
specifier|public
specifier|static
name|QueryTerm
index|[]
name|encodeQueryValue
parameter_list|(
name|IndexValue
name|indexValue
parameter_list|,
name|boolean
name|escape
parameter_list|)
block|{
if|if
condition|(
name|indexValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QueryTerm
index|[]
name|queryConstraints
decl_stmt|;
name|String
name|value
init|=
name|indexValue
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|escape
condition|)
block|{
name|value
operator|=
name|SolrUtil
operator|.
name|escapeSolrSpecialChars
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|SolrUtil
operator|.
name|escapeWildCardString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|IndexDataTypeEnum
operator|.
name|TXT
operator|.
name|getIndexType
argument_list|()
operator|.
name|equals
argument_list|(
name|indexValue
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|escape
condition|)
block|{
comment|//value does not contain '*' and '?' as they would be escaped.
name|queryConstraints
operator|=
operator|new
name|QueryTerm
index|[]
block|{
operator|new
name|QueryTerm
argument_list|(
name|value
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
comment|//non escaped strings might contain wildcard chars '*', '?'
comment|//those need to be treated specially (STANBOL-607)
comment|//Changed 2nd param to false as Stanbol now uses Solr 3.6+ (see SOLR-2438)
name|queryConstraints
operator|=
name|parseWildcardQueryTerms
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|IndexDataTypeEnum
operator|.
name|STR
operator|.
name|getIndexType
argument_list|()
operator|.
name|equals
argument_list|(
name|indexValue
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|escape
condition|)
block|{
comment|//rw: 20120314: respect case sensitivity for escaped (non wildcard)
name|queryConstraints
operator|=
operator|new
name|QueryTerm
index|[]
block|{
operator|new
name|QueryTerm
argument_list|(
name|value
argument_list|,
literal|false
argument_list|,
name|value
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
literal|true
else|:
literal|false
argument_list|,
literal|true
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
comment|//encode non
comment|//rw: 20120314: respect case sensitivity for escaped (non wildcard)
comment|//Change to 2nd param to false after switching to Solr 3.6+ (see SOLR-2438)
name|queryConstraints
operator|=
name|parseWildcardQueryTerms
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|queryConstraints
operator|=
operator|new
name|QueryTerm
index|[]
block|{
operator|new
name|QueryTerm
argument_list|(
name|value
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|}
expr_stmt|;
block|}
return|return
name|queryConstraints
return|;
block|}
comment|/**      * Utility Method that extracts IndexValues form an parsed {@link Object}.      * This checks for {@link IndexValue}, {@link Iterable}s and values      * @param indexValueFactory The indexValueFactory used to create indexValues if necessary      * @param value the value to parse      * @return A set with the parsed values. The returned Set is guaranteed       * not to be<code>null</code> and contains at least a single element.       * If no IndexValue could be parsed from the parsed value than a set containing      * the<code>null</code> value is returned.      */
specifier|public
specifier|static
name|Set
argument_list|<
name|IndexValue
argument_list|>
name|parseIndexValues
parameter_list|(
name|IndexValueFactory
name|indexValueFactory
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Set
argument_list|<
name|IndexValue
argument_list|>
name|indexValues
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|indexValues
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|IndexValue
condition|)
block|{
name|indexValues
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|(
name|IndexValue
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|indexValues
operator|=
operator|new
name|HashSet
argument_list|<
name|IndexValue
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
operator|:
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|IndexValue
condition|)
block|{
name|indexValues
operator|.
name|add
argument_list|(
operator|(
name|IndexValue
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|indexValues
operator|.
name|add
argument_list|(
name|indexValueFactory
operator|.
name|createIndexValue
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexValues
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//add null element instead of an empty set
block|}
block|}
else|else
block|{
name|indexValues
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|indexValueFactory
operator|.
name|createIndexValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|indexValues
return|;
block|}
end_class

begin_function
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
literal|"This is a te?t for multi* Toke? Wildc\\*adrd Se?rche*"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|parseWildcardQueryTerms
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Represents a term within a SolrQuery.      * @author Rupert Westenthaler      *      */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|QueryTerm
block|{
specifier|public
specifier|final
name|boolean
name|hasWildcard
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|needsQuotes
decl_stmt|;
specifier|public
specifier|final
name|String
name|term
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isText
decl_stmt|;
specifier|private
name|QueryTerm
parameter_list|(
name|String
name|term
parameter_list|,
name|boolean
name|hasWildcard
parameter_list|,
name|boolean
name|needsQuotes
parameter_list|,
name|boolean
name|isText
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|hasWildcard
operator|=
name|hasWildcard
expr_stmt|;
name|this
operator|.
name|needsQuotes
operator|=
name|needsQuotes
expr_stmt|;
name|this
operator|.
name|isText
operator|=
name|isText
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Parses query terms for Wildcard queries as described in the first      * comment of STANBOL-607.<p>      * As an example the String:      *<code><pre>      *     "This is a te?t for multi* Toke? Wildc\*adrd Se?rche*      *</pre></code>      * is converted in the query terms      *<code><pre>      *     ["This is a","te?t","multi*","toke?","Wildc\*adrd","se?rche*"]      *</pre></code>      * NOTE: that tokens that include are converted to lower case      * @param value the value      * @param loewercaseWildcardTokens if query elements that include a wildcard      * should be converted to lower case.      * @return the query terms      * @throws IOException      */
end_comment

begin_function
specifier|private
specifier|static
name|QueryTerm
index|[]
name|parseWildcardQueryTerms
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|loewercaseWildcardTokens
parameter_list|)
block|{
comment|//This assumes that the Tokenizer does tokenize '*' and '?',
comment|//what makes it a little bit tricky.
name|Tokenizer
name|tokenizer
init|=
operator|new
name|ICUTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|value
argument_list|)
argument_list|,
name|tokenizerConfig
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|WILDCARD_QUERY_CHAR_PATTERN
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|next
init|=
name|m
operator|.
name|find
argument_list|()
condition|?
name|m
operator|.
name|start
argument_list|()
operator|+
literal|1
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|next
operator|<
literal|0
condition|)
block|{
comment|//No wildcard
return|return
operator|new
name|QueryTerm
index|[]
block|{
operator|new
name|QueryTerm
argument_list|(
name|value
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|}
return|;
block|}
name|ArrayList
argument_list|<
name|QueryTerm
argument_list|>
name|queryElements
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryTerm
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|lastAdded
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lastOffset
init|=
literal|0
decl_stmt|;
name|boolean
name|foundWildcard
init|=
literal|false
decl_stmt|;
comment|//Lucene tokenizer are really low level ...
try|try
block|{
name|tokenizer
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//starting with Solr4 reset MUST BE called before using
while|while
condition|(
name|tokenizer
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
comment|//only interested in the start/end indexes of tokens
name|OffsetAttribute
name|offset
init|=
name|tokenizer
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastAdded
operator|<
literal|0
condition|)
block|{
comment|//rest with this token
name|lastAdded
operator|=
name|offset
operator|.
name|startOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|foundWildcard
condition|)
block|{
comment|//wildcard present in the current token
comment|//two cases: "wildcar? at the end", "wild?ard within the word"
comment|// (1) [wildcar,at,the,end] : In this case this is called with
comment|//      'at' as active Token and we need write "wildcar?" as
comment|//      query term
comment|// (2) [wild,ard,within,the,word]: In this case this is called with
comment|//      'ard' as active Token and we need write "wild?ard" as
comment|//      query term.
if|if
condition|(
name|offset
operator|.
name|startOffset
argument_list|()
operator|>
name|lastOffset
operator|+
literal|1
condition|)
block|{
comment|//(1)
name|String
name|queryElement
init|=
name|value
operator|.
name|substring
argument_list|(
name|lastAdded
argument_list|,
name|lastOffset
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|loewercaseWildcardTokens
condition|)
block|{
name|queryElement
operator|=
name|queryElement
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|queryElements
operator|.
name|add
argument_list|(
operator|new
name|QueryTerm
argument_list|(
name|queryElement
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|lastAdded
operator|=
name|offset
operator|.
name|startOffset
argument_list|()
expr_stmt|;
comment|//previous token consumed
comment|//set to the start of the current token
name|foundWildcard
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|next
operator|!=
name|offset
operator|.
name|endOffset
argument_list|()
condition|)
block|{
comment|//(2)
name|String
name|queryElement
init|=
name|value
operator|.
name|substring
argument_list|(
name|lastAdded
argument_list|,
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|loewercaseWildcardTokens
condition|)
block|{
name|queryElement
operator|=
name|queryElement
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|queryElements
operator|.
name|add
argument_list|(
operator|new
name|QueryTerm
argument_list|(
name|queryElement
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|lastAdded
operator|=
operator|-
literal|1
expr_stmt|;
comment|//consume the current token
name|foundWildcard
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|next
operator|==
name|offset
operator|.
name|endOffset
argument_list|()
condition|)
block|{
comment|//end of current token is '*' or '?'
name|next
operator|=
name|m
operator|.
name|find
argument_list|()
condition|?
name|m
operator|.
name|start
argument_list|()
operator|+
literal|1
else|:
operator|-
literal|1
expr_stmt|;
comment|//search next '*', '?' in value
comment|//we need to write all tokens previous to the current (if any)
comment|//NOTE: ignore if foundWildcard is TRUE (multiple wildcards in
comment|//      a single word
if|if
condition|(
operator|!
name|foundWildcard
operator|&&
name|lastAdded
operator|<
name|lastOffset
condition|)
block|{
name|String
name|queryElement
init|=
name|value
operator|.
name|substring
argument_list|(
name|lastAdded
argument_list|,
name|lastOffset
argument_list|)
decl_stmt|;
name|queryElements
operator|.
name|add
argument_list|(
operator|new
name|QueryTerm
argument_list|(
name|queryElement
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|lastAdded
operator|=
name|offset
operator|.
name|startOffset
argument_list|()
expr_stmt|;
block|}
comment|//else multiple wildcards in a single token
name|foundWildcard
operator|=
literal|true
expr_stmt|;
block|}
name|lastOffset
operator|=
name|offset
operator|.
name|endOffset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//StringReader can not throw IOExceptions
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastAdded
operator|>=
literal|0
operator|&&
name|lastAdded
operator|<
name|value
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|queryElement
init|=
name|value
operator|.
name|substring
argument_list|(
name|lastAdded
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundWildcard
operator|&&
name|loewercaseWildcardTokens
condition|)
block|{
name|queryElement
operator|=
name|queryElement
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|foundWildcard
condition|)
block|{
name|queryElements
operator|.
name|add
argument_list|(
operator|new
name|QueryTerm
argument_list|(
name|queryElement
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryElements
operator|.
name|add
argument_list|(
operator|new
name|QueryTerm
argument_list|(
name|queryElement
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queryElements
operator|.
name|toArray
argument_list|(
operator|new
name|QueryTerm
index|[
name|queryElements
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Creates a Phrase query over the parsed constraints      * @param phraseConstraints      */
end_comment

begin_function
specifier|public
specifier|static
name|StringBuilder
name|encodePhraseQuery
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|phraseConstraints
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|phraseConstraints
argument_list|,
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'"'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"~"
argument_list|)
expr_stmt|;
comment|//the span is 5+3*numTokens (9 ... 2 Tokens, 11 ... 3 Tokens ...)
name|sb
operator|.
name|append
argument_list|(
literal|5
operator|+
operator|(
literal|3
operator|*
name|phraseConstraints
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
end_function

unit|}
end_unit

