begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|embedded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|provider
operator|.
name|SolrServerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|provider
operator|.
name|SolrServerProvider
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|utils
operator|.
name|ConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Support for the use of {@link EmbeddedSolrPorovider} in combination with the  * SolrYard implementation. This implements the {@link SolrServerProvider}  * interface for the {@link Type#EMBEDDED}.<p>  * This implementation manages an internally managed instance of an   * {@link EmbeddedSolrServer} that is used to create/lookup cores if a  * relative path is parsed as second parameter to   * {@link #getSolrServer(Type, String, String...)}. In case such a relative path  * refers to a core that does not already exist this provider will create and  * initialise a new one. It is also possible for other components to copy the  * required files to the according directory and than use this provider to   * initialise the core. The {@link ConfigUtils} class provides some utilities  * for that.<p>  * The {@link #SOLR_DATA_DIR_PROPERTY} property can be used to define the location  * of the internally managed index. By default it is within the   * {@link #DEFAULT_SOLR_DATA_DIR} directory located within the working-directory  * (if running outside an OSGI environment) or within the data directory of the  * SolrYard bundle (when running within an OSGI environment).<p>  * Note that property substitution is supported for the   * {@link #SOLR_DATA_DIR_PROPERTY} property by using {@link System#getProperty(String, String)}  * to search for values (empty string is used as default)<p>  * Parsing the value "${data.dir}/indexes" will lookup the value of the system  * property "data.dir" and the index will be located at "{property-value}/indexes".  *   * TODO: add functionality to lookup the internally managed {@link CoreContainer}.  * Maybe this requires to add a second service  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|EmbeddedSolrPorovider
implements|implements
name|SolrServerProvider
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EmbeddedSolrPorovider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//define the default values here because they are not accessible via the Solr API
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_XML_NAME
init|=
literal|"solr.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_CONFIG_NAME
init|=
literal|"solrconfig.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_SCHEMA_NAME
init|=
literal|"schema.xml"
decl_stmt|;
comment|/**      * internally used to keep track of active {@link CoreContainer}s for      * requested paths.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CoreContainer
argument_list|>
name|coreContainers
init|=
operator|new
name|ReferenceMap
argument_list|()
decl_stmt|;
comment|/**      * This property can be used to configure the location of the internally      * managed EmbeddedSolrServer.<p>      * Configuring an absolute path (starting with {@link File#separatorChar})       * will cause the index to be initialised in this directory.<p>      * Configuring an relative value will use<ul>      *<li> the working directory (<code>Systen.getProperty("user.dir")</code>)      *      outside of an OSGI environment      *<li> the data directory provided by the SolrYard bundle (by calling      *      {@link BundleContext#getDataFile(String)} with the relative path.      *</ul>      * In case this property is not present the {@link #DEFAULT_SOLR_DATA_DIR}      * (an relative path) is used.      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|EmbeddedSolrPorovider
operator|.
name|DEFAULT_SOLR_DATA_DIR
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_DATA_DIR_PROPERTY
init|=
literal|"org.apache.stanbol.entityhub.yard.solr.embedded.solrDataDir"
decl_stmt|;
comment|/**      * default value for the relative path used if the {@link #SOLR_DATA_DIR_PROPERTY}      * is not present      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SOLR_DATA_DIR
init|=
literal|"indexes"
decl_stmt|;
comment|/**      * The directory used by the internally managed embedded solr server.      */
specifier|private
name|File
name|solrDataDir
decl_stmt|;
comment|/**      * The component context. Only available when running within an OSGI       * Environment and the component is active.      */
specifier|private
name|ComponentContext
name|componentContext
decl_stmt|;
comment|/**      * For some functionality within this component it is important to track      * if this instance operates within or outside of an OSGI environment.      * because of this this boolean is set to true as soon as the first time      * {@link #activate(ComponentContext)} or {@link #deactivate(ComponentContext)}      * is called. If someone knows a better method to check that feel free to      * change!      */
specifier|private
name|boolean
name|withinOSGI
init|=
literal|false
decl_stmt|;
specifier|public
name|EmbeddedSolrPorovider
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|SolrServer
name|getSolrServer
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|uriOrPath
parameter_list|,
name|String
modifier|...
name|additional
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IllegalArgumentException
block|{
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"getSolrServer Request for %s and path %s"
argument_list|,
name|type
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uriOrPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Path to the Index MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"parsed solr server location "
operator|+
name|uriOrPath
argument_list|)
expr_stmt|;
comment|//first try as file (but keep in mind it could also be an URI)
name|File
name|index
init|=
operator|new
name|File
argument_list|(
name|uriOrPath
argument_list|)
decl_stmt|;
comment|//if it is absolute and it exists -> take it
if|if
condition|(
operator|!
name|index
operator|.
name|isAbsolute
argument_list|()
operator|||
operator|!
name|index
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//otherwise test if it is an URI
try|try
block|{
name|URI
name|fileUri
init|=
operator|new
name|URI
argument_list|(
name|uriOrPath
argument_list|)
decl_stmt|;
name|index
operator|=
operator|new
name|File
argument_list|(
name|fileUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//not an URI -> ignore
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//this happens if it is a URI but can not be converted to a file
comment|//still we should try to work with the parsed file ...
block|}
comment|//ok now we have the file path ... do some evaluation
if|if
condition|(
operator|!
name|index
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|//if it is not absolute
comment|//use the internally managed EmbeddedSolrServer
name|index
operator|=
name|initManagedCoreDirectory
argument_list|(
name|uriOrPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Index Path %s does not exist and con not be initialised "
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|index
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//if it is absolute -> check that it exist
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Index Path %s does not exist"
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"get solr server for location "
operator|+
name|index
argument_list|)
expr_stmt|;
name|File
name|coreDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|solr
init|=
name|getFile
argument_list|(
name|index
argument_list|,
name|SOLR_XML_NAME
argument_list|)
decl_stmt|;
name|String
name|coreName
decl_stmt|;
if|if
condition|(
name|solr
operator|!=
literal|null
condition|)
block|{
comment|//in that case we assume that this is a single core installation
name|coreName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|solr
operator|=
name|getFile
argument_list|(
name|index
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|SOLR_XML_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|solr
operator|!=
literal|null
condition|)
block|{
comment|//assume this is a multi core
name|coreName
operator|=
name|index
operator|.
name|getName
argument_list|()
expr_stmt|;
name|coreDir
operator|=
name|index
expr_stmt|;
name|index
operator|=
name|index
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
comment|//set the index dir to the parent
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Index Path %s is not an Solr "
operator|+
literal|"Index nor a Core of an Multi Core Configuration "
operator|+
literal|"(no \""
operator|+
name|SOLR_XML_NAME
operator|+
literal|"\" was found in this nor the parent directory!)"
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|//now init the EmbeddedSolrServer
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Create EmbeddedSolrServer for index %s and core %s"
argument_list|,
name|index
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|coreName
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|coreContainer
init|=
name|getCoreContainer
argument_list|(
name|index
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|solr
argument_list|)
decl_stmt|;
comment|//if we have a multi core environment and the core is not yet registered
if|if
condition|(
operator|!
name|coreName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|coreContainer
operator|.
name|getCoreNames
argument_list|()
operator|.
name|contains
argument_list|(
name|coreName
argument_list|)
condition|)
block|{
comment|//register this core first
comment|/*                  * NOTE: This assumes that the data for the core are already copied                  * to the required location, but the core itself is not yet registered                  * in the SOLR_XML_NAME.                  * This uses the java API to register the core. Changes are saved                  * within the SOLR_XML_NAME if persistent="true" is present within the                  * solr element.                  */
comment|/*                  * NOTE:                  * We need to reset the ContextClassLoader to the one used for this                  * Bundle, because Solr uses this ClassLoader to load all the                  * plugins configured in the SOLR_XML_NAME and schema.xml.                  * The finally block resets the context class loader to the previous                  * value. (Rupert Westenthaler 20010209)                  */
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|EmbeddedSolrPorovider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|//SolrResourceLoader solrLoader = new SolrResourceLoader(coreDir.getAbsolutePath());
name|CoreDescriptor
name|coreDescriptor
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|coreContainer
argument_list|,
name|coreName
argument_list|,
name|coreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|SolrCore
name|core
decl_stmt|;
try|try
block|{
name|core
operator|=
name|coreContainer
operator|.
name|create
argument_list|(
name|coreDescriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load/register Solr Core %s "
operator|+
literal|"to SolrServer %s!"
argument_list|,
name|coreName
argument_list|,
name|index
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|coreContainer
operator|.
name|register
argument_list|(
name|coreName
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//persist the new core to have it available on the next start
name|coreContainer
operator|.
name|persist
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|EmbeddedSolrServer
argument_list|(
name|coreContainer
argument_list|,
name|coreName
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Index Path %s is no Directory"
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * The {@link CoreContainer} managed internally for the SolrYard. This is      * used whenever a {@link #getSolrServer(Type, String, String...)} parses      * an relative path as second parameter.<p>      * Within an OSGI Environment this CoreContainer is started/stopped      * within the activate/deactivate methods. With the exception if the      * {@link #solrDataDir} does not exist, because this means that this internally      * managed CoreContainer is not yet used. A lazy initialisation will be      * performed when required.<p>      * This Method does not perform any initialisation!      * @return the managed CoreContainer or<code>null</code> if it is not yet      * initialised or if the component is deactivated.      */
specifier|public
name|CoreContainer
name|getManagedCoreContainer
parameter_list|()
block|{
name|File
name|managedCoreContainerDir
init|=
name|getManagedSolrDataDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedCoreContainerDir
operator|!=
literal|null
condition|)
block|{
return|return
name|coreContainers
operator|.
name|get
argument_list|(
name|managedCoreContainerDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will invalidate all EmbeddedSolrServers created by using this      * CoreContainer or any of the Cores associated with this one      * ({@link CoreContainer#getCores()})      * @return<code>true</code> if the managed core was shutdown<code>false</code>      * if the managed core was not active and therefore no change was performed      */
specifier|private
name|boolean
name|shutdownManagedCoreContainer
parameter_list|()
block|{
name|File
name|managedCoreContainerDir
init|=
name|getManagedSolrDataDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedCoreContainerDir
operator|!=
literal|null
condition|)
block|{
name|CoreContainer
name|managedCoreContainer
init|=
name|coreContainers
operator|.
name|remove
argument_list|(
name|managedCoreContainerDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedCoreContainer
operator|!=
literal|null
condition|)
block|{
name|managedCoreContainer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Getter for the defaultCore      * @param coreName the name of the core or<code>null</code> to get/init the      * default directory of the default CoreContainer.<p>      * Works only within an OSGI Environment      * @return the directory (instanceDir) of the core or the solr server (if      *<code>null</code> is parsed as coreName).<code>null</code> is returned      * if the initialisation was not successful.      */
specifier|protected
specifier|final
name|File
name|initManagedCoreDirectory
parameter_list|(
specifier|final
name|String
name|coreName
parameter_list|)
block|{
name|File
name|managedCoreContainerDirectory
init|=
name|getManagedSolrDataDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedCoreContainerDirectory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ComponentContext
name|context
init|=
name|componentContext
decl_stmt|;
if|if
condition|(
operator|!
name|managedCoreContainerDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
comment|//load via bundle
name|managedCoreContainerDirectory
operator|=
name|ConfigUtils
operator|.
name|copyDefaultConfig
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|()
argument_list|,
name|managedCoreContainerDirectory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//load from jar
name|managedCoreContainerDirectory
operator|=
name|ConfigUtils
operator|.
name|copyDefaultConfig
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|,
name|managedCoreContainerDirectory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to initialise the default EmbeddedSolrServer!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|coreName
operator|==
literal|null
condition|)
block|{
return|return
name|managedCoreContainerDirectory
return|;
block|}
name|File
name|coreDir
init|=
operator|new
name|File
argument_list|(
name|managedCoreContainerDirectory
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|coreDir
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
comment|//load via bundle
name|ConfigUtils
operator|.
name|copyCore
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|()
argument_list|,
name|coreDir
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//load from jar
name|ConfigUtils
operator|.
name|copyCore
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|,
name|coreDir
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to initialise the core "
operator|+
name|coreName
operator|+
literal|" with the default Core configuration!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|coreDir
return|;
block|}
comment|/**      * Internally used during initialisation to get the location of the directory      * used for the data of the internally managed {@link CoreContainer}.<p>      * This method checks the configuration based on of this EmbeddesSolrServerProvider      * operates within or outside of an OSGI environment. It is not intended for      * @return the directory of the Solr Home used for the internally managed      * {@link CoreContainer} or<code>null</code> if running within an OSGI      * Environment and this component is deactivated.      */
specifier|private
name|File
name|getManagedSolrDataDir
parameter_list|()
block|{
comment|//local copy to avoid NullPointerExceptions when deactivate is called
comment|//during this method
name|ComponentContext
name|context
init|=
name|componentContext
decl_stmt|;
if|if
condition|(
name|solrDataDir
operator|==
literal|null
condition|)
block|{
name|String
name|configuredDataDir
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|configuredDataDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|SOLR_DATA_DIR_PROPERTY
argument_list|,
name|DEFAULT_SOLR_DATA_DIR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
init|=
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|SOLR_DATA_DIR_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|configuredDataDir
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|configuredDataDir
operator|=
name|DEFAULT_SOLR_DATA_DIR
expr_stmt|;
block|}
block|}
comment|//property substitution
name|configuredDataDir
operator|=
name|substituteProperty
argument_list|(
name|configuredDataDir
argument_list|)
expr_stmt|;
comment|//determine the directory holding the SolrIndex
if|if
condition|(
operator|!
name|configuredDataDir
operator|.
name|isEmpty
argument_list|()
operator|&&
name|configuredDataDir
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|File
operator|.
name|separatorChar
condition|)
block|{
comment|//absolute path (same within/outside OSGI environment)
if|if
condition|(
name|withinOSGI
operator|&&
name|context
operator|==
literal|null
condition|)
block|{
comment|//however set to  null if within OSGI environment and
comment|//deactivated
name|solrDataDir
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|//set the the absolute path
name|solrDataDir
operator|=
operator|new
name|File
argument_list|(
name|configuredDataDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//relative path
if|if
condition|(
operator|!
name|withinOSGI
condition|)
block|{
comment|//not within OSGI Environment
name|String
name|workingDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
decl_stmt|;
name|solrDataDir
operator|=
operator|new
name|File
argument_list|(
name|workingDir
argument_list|,
name|configuredDataDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
comment|//within OSGI&& activated
name|solrDataDir
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getDataFile
argument_list|(
name|configuredDataDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//within OSGI&& deactivated
name|solrDataDir
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
return|return
name|solrDataDir
return|;
block|}
comment|/**      * Substitutes ${property.name} with the values retrieved via      * {@link System#getProperty(String, String)}. An empty string is used as      * default<p>      * If someone knows a default implementation feel free to replace!      * @param value the value to substitute      * @return the substituted value      */
specifier|private
specifier|static
name|String
name|substituteProperty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|prevAt
init|=
literal|0
decl_stmt|;
name|int
name|foundAt
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|substitution
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|foundAt
operator|=
name|value
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|,
name|prevAt
argument_list|)
operator|)
operator|>=
name|prevAt
condition|)
block|{
name|substitution
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|prevAt
argument_list|,
name|foundAt
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propertyName
init|=
name|value
operator|.
name|substring
argument_list|(
name|foundAt
operator|+
literal|2
argument_list|,
name|value
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|,
name|foundAt
argument_list|)
argument_list|)
decl_stmt|;
name|substitution
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|prevAt
operator|=
name|foundAt
operator|+
name|propertyName
operator|.
name|length
argument_list|()
operator|+
literal|3
expr_stmt|;
block|}
name|substitution
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|prevAt
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|substitution
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|substituteProperty
argument_list|(
literal|"this ${user.dir} is ${not.existant} of version ${java.version}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|CoreContainer
name|getCoreContainer
parameter_list|(
name|File
name|solrDir
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalStateException
block|{
return|return
name|getCoreContainer
argument_list|(
name|solrDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|solrDir
argument_list|,
name|SOLR_XML_NAME
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|CoreContainer
name|getCoreContainer
parameter_list|(
name|String
name|solrDir
parameter_list|,
name|File
name|solrConf
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalStateException
block|{
name|CoreContainer
name|container
init|=
name|coreContainers
operator|.
name|get
argument_list|(
name|solrDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|container
operator|=
operator|new
name|CoreContainer
argument_list|(
name|solrDir
argument_list|)
expr_stmt|;
comment|/*              * NOTE:              * We need to reset the ContextClassLoader to the one used for this              * Bundle, because Solr uses this ClassLoader to load all the              * plugins configured in the SOLR_XML_NAME and schema.xml.              * The finally block resets the context class loader to the previous              * value. (Rupert Westenthaler 20010209)              */
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|EmbeddedSolrPorovider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|container
operator|.
name|load
argument_list|(
name|solrDir
argument_list|,
name|solrConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse Solr Configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to access Solr Configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse Solr Configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
name|coreContainers
operator|.
name|put
argument_list|(
name|solrDir
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|supportedTypes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|Type
operator|.
name|EMBEDDED
argument_list|)
return|;
block|}
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|withinOSGI
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|componentContext
operator|=
name|context
expr_stmt|;
name|File
name|managedCoreContainerDir
init|=
name|getManagedSolrDataDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedCoreContainerDir
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|managedCoreContainerDir
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//this indicated, that the core was alredy used ... so start it
name|getCoreContainer
argument_list|(
name|managedCoreContainerDir
argument_list|)
expr_stmt|;
block|}
comment|//else -> the internally managed core was not yet used ->
comment|// use lazy initialisation on first usage (no need to load all the
comment|//solr stuff in environments that do not use an EmbeddedSolrServer
block|}
else|else
block|{
comment|//that should never happen ...
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to get Directory for the internally managed Solr Server"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|withinOSGI
operator|=
literal|true
expr_stmt|;
name|shutdownManagedCoreContainer
argument_list|()
expr_stmt|;
name|solrDataDir
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|componentContext
operator|=
literal|null
expr_stmt|;
comment|//should we remove the coreContainers -> currently I don't because
comment|// (1) activate deactivate do not have any affect
comment|// (2) it are soft references anyway.
block|}
comment|/**      * Checks if the parsed directory contains a file that starts with the parsed      * name. Parsing "hallo" will find "hallo.all", "hallo.ween" as well as "hallo".      * @param dir the Directory. This assumes that the parsed File is not      *<code>null</code>, exists and is an directory      * @param name the name. If<code>null</code> any file is accepted, meaning      * that this will return true if the directory contains any file       * @return the state      */
specifier|private
name|boolean
name|hasFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|SimpleFileNameFilter
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|length
operator|>
literal|0
return|;
block|}
comment|/**      * Returns the first file that matches the parsed name.      * Parsing "hallo" will find "hallo.all", "hallo.ween" as well as "hallo".      * @param dir the Directory. This assumes that the parsed File is not      *<code>null</code>, exists and is an directory.      * @param name the name. If<code>null</code> any file is accepted, meaning      * that this will return true if the directory contains any file       * @return the first file matching the parsed name.      */
specifier|private
name|File
name|getFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|SimpleFileNameFilter
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|files
operator|.
name|length
operator|>
literal|0
condition|?
name|files
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
comment|/**      * Could not find a simple implementation of {@link FilenameFilter} that      * can be used if a file exists. If someone knows one, feel free to replace      * this one!       * @author Rupert Westenthaler      *      */
specifier|private
specifier|static
class|class
name|SimpleFileNameFilter
implements|implements
name|FilenameFilter
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|SimpleFileNameFilter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|name
operator|==
literal|null
condition|?
literal|true
else|:
name|name
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

