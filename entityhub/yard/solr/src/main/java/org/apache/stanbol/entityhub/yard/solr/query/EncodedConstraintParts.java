begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * This class is used to store the encoded parts of the index field constraints  * created by the {@link IndexConstraintTypeEncoder}.<p>  * The processing of this parts is specific to the used Index, therefore such  * processing is not implemented by this Class.<p>  * Constraints parts can be encoded in the following part of an index field:  *<code><per>  *&lt;prefix&gt;.field.&lt;prefix&gt;&lt;assignment&gt;&lt;value&gt;  *</pre></code>  * The:<ul>  *<li><code>prefix</code> is used for the data type and language constraints  *<li><code>field</code> is predefined by by the field of the constraint  *<li><code>suffix</code> is currently unused  *<li><code>assignment</code> is used for checking static values or just adding  *      ':' in the case that values of that field are filtered.  *<li><code>value</code> is used to define filters like value ranges or  *      wildcard searches.  *</ul>  * The {@link ConstraintTypePosition} defines such position in ordinal numbers  * from left to right. This ordinal numbers are also used sort the elements  * of the {@link Iterable} interface implemented by this class.  *  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|EncodedConstraintParts
implements|implements
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|ConstraintTypePosition
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
block|{
comment|/**      * This maps contains all the encoded parts of the query.      */
specifier|private
name|SortedMap
argument_list|<
name|ConstraintTypePosition
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|constraintMap
init|=
operator|new
name|TreeMap
argument_list|<
name|ConstraintTypePosition
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Adds an constraint type      * @param pos      * @param values      */
specifier|public
name|void
name|addEncoded
parameter_list|(
name|ConstraintTypePosition
name|pos
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|constraints
init|=
name|constraintMap
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraints
operator|==
literal|null
condition|)
block|{
name|constraints
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|constraints
argument_list|)
expr_stmt|;
block|}
name|constraints
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Encoded Constraints: "
operator|+
name|constraintMap
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ConstraintTypePosition
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|constraintMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|constraintMap
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|EncodedConstraintParts
operator|&&
operator|(
operator|(
name|EncodedConstraintParts
operator|)
name|obj
operator|)
operator|.
name|constraintMap
operator|.
name|equals
argument_list|(
name|constraintMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

