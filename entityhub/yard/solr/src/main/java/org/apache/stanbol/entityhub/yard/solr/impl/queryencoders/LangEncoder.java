begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|queryencoders
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|SolrUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|model
operator|.
name|IndexField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|ConstraintTypePosition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|ConstraintTypePosition
operator|.
name|PositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|EncodedConstraintParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|IndexConstraintTypeEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|query
operator|.
name|IndexConstraintTypeEnum
import|;
end_import

begin_class
specifier|public
class|class
name|LangEncoder
implements|implements
name|IndexConstraintTypeEncoder
argument_list|<
name|IndexField
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ConstraintTypePosition
name|PREFIX
init|=
operator|new
name|ConstraintTypePosition
argument_list|(
name|PositionType
operator|.
name|prefix
argument_list|)
decl_stmt|;
comment|// private static final ConstraintTypePosition SUFFIX = new ConstraintTypePosition(PositionType.suffux);
comment|// deactivated, because xsd:string values are now also included in the language
comment|// merger field (the name returned by fieldMapper.getLanguageMergerField(null)).
comment|// private static final IndexDataType STRING_DATATYPE = new IndexDataType(NamespaceEnum.xsd+"string");
specifier|private
name|FieldMapper
name|fieldMapper
decl_stmt|;
specifier|public
name|LangEncoder
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
block|{
name|this
operator|.
name|fieldMapper
operator|=
name|fieldMapper
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|encode
parameter_list|(
name|EncodedConstraintParts
name|constraint
parameter_list|,
name|IndexField
name|value
parameter_list|)
block|{
comment|//We need to process languages, because one may parse null, or
comment|//an empty list or a list that contains a single element "null"
name|Collection
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|languages
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|languages
operator|=
name|value
operator|.
name|getLanguages
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|languages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|fieldMapper
operator|.
name|encodeLanguages
argument_list|(
name|value
argument_list|)
control|)
block|{
name|constraint
operator|.
name|addEncoded
argument_list|(
name|PREFIX
argument_list|,
name|SolrUtil
operator|.
name|escapeSolrSpecialChars
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// default
comment|// search in the language merger field of the default language
name|constraint
operator|.
name|addEncoded
argument_list|(
name|PREFIX
argument_list|,
name|SolrUtil
operator|.
name|escapeSolrSpecialChars
argument_list|(
name|fieldMapper
operator|.
name|getLanguageMergerField
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsDefault
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|IndexConstraintTypeEnum
argument_list|>
name|dependsOn
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexConstraintTypeEnum
operator|.
name|FIELD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexConstraintTypeEnum
name|encodes
parameter_list|()
block|{
return|return
name|IndexConstraintTypeEnum
operator|.
name|LANG
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|IndexField
argument_list|>
name|acceptsValueType
parameter_list|()
block|{
comment|// generic types are ereased anyway!
return|return
name|IndexField
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

