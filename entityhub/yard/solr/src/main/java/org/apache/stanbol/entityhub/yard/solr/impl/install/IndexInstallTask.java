begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|PROPERTY_ARCHIVE_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|PROPERTY_INDEX_ARCHIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|PROPERTY_INDEX_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|InstallTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|InstallationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|ResourceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|TaskResourceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|SolrDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|ConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|IndexInstallTask
extends|extends
name|InstallTask
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexInstallTask
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * use 19 because the config install uses 20 and the files MUST be installed      * before the config triggering the initialisation of the services.       */
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_INSTALL_ORDER
init|=
literal|"19-"
decl_stmt|;
specifier|private
specifier|final
name|SolrDirectoryManager
name|solrDirectoryManager
decl_stmt|;
specifier|public
name|IndexInstallTask
parameter_list|(
name|TaskResourceGroup
name|trg
parameter_list|,
name|SolrDirectoryManager
name|solrDirectoryManager
parameter_list|)
block|{
name|super
argument_list|(
name|trg
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrDirectoryManager
operator|=
name|solrDirectoryManager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|InstallationContext
name|ctx
parameter_list|)
block|{
name|String
name|indexName
init|=
operator|(
name|String
operator|)
name|getResource
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|PROPERTY_INDEX_NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|existingIndexes
init|=
name|solrDirectoryManager
operator|.
name|getManagedIndices
argument_list|()
decl_stmt|;
if|if
condition|(
name|existingIndexes
operator|.
name|containsKey
argument_list|(
name|indexName
argument_list|)
condition|)
block|{
comment|//an Index with that name already exists -> ignore
name|ctx
operator|.
name|log
argument_list|(
literal|"Unable to install the Index with the name \"%s\" becuase an index with that name is already managed by the the SolrYard "
operator|+
literal|"(resource %s | location of the existing index %s)!"
argument_list|,
name|indexName
argument_list|,
name|getResource
argument_list|()
operator|.
name|getURL
argument_list|()
argument_list|,
name|existingIndexes
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
argument_list|)
expr_stmt|;
name|setFinishedState
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//this index does not exist
name|String
name|archiveFormat
init|=
operator|(
name|String
operator|)
name|getResource
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|PROPERTY_ARCHIVE_FORMAT
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|getResource
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"properties"
operator|.
name|equals
argument_list|(
name|archiveFormat
argument_list|)
condition|)
block|{
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|String
name|indexPath
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_INDEX_ARCHIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexPath
operator|==
literal|null
condition|)
block|{
name|indexPath
operator|=
name|indexName
operator|+
literal|'.'
operator|+
name|ConfigUtils
operator|.
name|SOLR_INDEX_ARCHIVE_EXTENSION
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Property \""
operator|+
name|PROPERTY_INDEX_ARCHIVE
operator|+
literal|"\" not present within the SolrIndex references file. Will use the default name \""
operator|+
name|indexPath
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|solrDirectoryManager
operator|.
name|createSolrDirectory
argument_list|(
name|indexName
argument_list|,
name|indexPath
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|setFinishedState
argument_list|(
name|ResourceState
operator|.
name|INSTALLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArchiveInputStream
name|ais
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ais
operator|=
name|ConfigUtils
operator|.
name|getArchiveInputStream
argument_list|(
name|archiveFormat
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|solrDirectoryManager
operator|.
name|createSolrIndex
argument_list|(
name|indexName
argument_list|,
name|ais
argument_list|)
expr_stmt|;
comment|//we are done ... set the state to installed!
name|setFinishedState
argument_list|(
name|ResourceState
operator|.
name|INSTALLED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|ais
argument_list|)
expr_stmt|;
block|}
block|}
comment|//now we can copy the core!
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to install SolrIndexArchive for index name \"%s\"! (resource=%s, arviceFormat=%s)"
argument_list|,
name|indexName
argument_list|,
name|getResource
argument_list|()
operator|.
name|getURL
argument_list|()
argument_list|,
name|archiveFormat
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|log
argument_list|(
literal|"%s! Reason: %s"
argument_list|,
name|message
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|setFinishedState
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSortKey
parameter_list|()
block|{
return|return
name|CONFIG_INSTALL_ORDER
operator|+
name|getResource
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|+
literal|"-"
operator|+
name|getResource
argument_list|()
operator|.
name|getEntityId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

