begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|sesame
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|yard
operator|.
name|AbstractYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|sesame
operator|.
name|SesameYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|sesame
operator|.
name|SesameYardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Add file description here!  *  * @author Sebastian Schaffert (sschaffert@apache.org)  * @author Rupert Westenthaler (rwesten@apache.org)  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|SesameYardComponent
operator|.
name|class
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Yard
operator|.
name|ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Yard
operator|.
name|NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Yard
operator|.
name|DESCRIPTION
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SesameYardComponent
operator|.
name|REPOSITORY_ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SesameYard
operator|.
name|CONTEXT_ENABLED
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SesameYard
operator|.
name|CONTEXT_URI
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SesameYard
operator|.
name|INCLUDE_INFERRED
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|AbstractYard
operator|.
name|DEFAULT_QUERY_RESULT_NUMBER
argument_list|,
name|intValue
operator|=
operator|-
literal|1
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|AbstractYard
operator|.
name|MAX_QUERY_RESULT_NUMBER
argument_list|,
name|intValue
operator|=
name|SesameYardComponent
operator|.
name|MAX_QUERY_RESULT_NUMBER
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|SesameYardComponent
implements|implements
name|ServiceTrackerCustomizer
block|{
specifier|static
specifier|final
name|int
name|MAX_QUERY_RESULT_NUMBER
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SesameYardComponent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The ID of the Repository (key:<code>org.openrdf.repository.Repository.id</code>).      * If defined this is used to filter a specific repository in case multiple are      * registered. If not, the one with the highest<code>service.ranking</code>       * will get used.      */
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_ID
init|=
literal|"org.openrdf.repository.Repository.id"
decl_stmt|;
specifier|private
name|ServiceTracker
name|repositoryTracker
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|ServiceRegistration
name|yardService
decl_stmt|;
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
decl_stmt|;
specifier|private
name|SesameYardConfig
name|yardConfig
decl_stmt|;
comment|/**      * The ID of the tracked {@link Repository} or<code>null</code> if all      * are tracked      */
specifier|private
name|String
name|repoId
decl_stmt|;
comment|/**      * The ServiceReference of to the used Sesame {@link Repository}      */
specifier|private
name|ServiceReference
name|repoServiceReference
decl_stmt|;
specifier|private
name|SesameYard
name|yard
decl_stmt|;
comment|/**      * Register a service tracker for the KiWiRepositoryService; once it is there, register a new SesameYard.      *      * @param context      * @throws ConfigurationException      * @throws RepositoryException      */
annotation|@
name|Activate
specifier|protected
specifier|final
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|RepositoryException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|bundleContext
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|repoId
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|REPOSITORY_ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|repoId
operator|!=
literal|null
operator|&&
name|repoId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|repoId
operator|=
literal|null
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|" - repository ID: {}"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
name|String
name|filterStr
decl_stmt|;
if|if
condition|(
name|repoId
operator|!=
literal|null
condition|)
block|{
name|filterStr
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(objectClass=%s)(%s=%s))"
argument_list|,
name|Repository
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|REPOSITORY_ID
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filterStr
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(objectClass=%s))"
argument_list|,
name|Repository
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Filter
name|filter
decl_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - service Filter: {}"
argument_list|,
name|filterStr
argument_list|)
expr_stmt|;
name|filter
operator|=
name|bundleContext
operator|.
name|createFilter
argument_list|(
name|filterStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|REPOSITORY_ID
argument_list|,
literal|"Unable to build Service "
operator|+
literal|"Filter with parsed Repository ID '"
operator|+
name|repoId
operator|+
literal|"' (filter: '"
operator|+
name|filterStr
operator|+
literal|"')"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|yardConfig
operator|=
operator|new
name|SesameYardConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|//check context is set
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SesameYard
operator|.
name|CONTEXT_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//not set ... set default to TRUE
name|yardConfig
operator|.
name|setContextEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|yardConfig
operator|.
name|isContextEnabled
argument_list|()
condition|)
block|{
comment|//if set, check that is is enabled, as disabling this could allow
comment|//users to access all data in the Repository (something we do not
comment|//want to allow)!
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SesameYard
operator|.
name|CONTEXT_ENABLED
argument_list|,
literal|"Sesame Contexts MUST BE enabled for the Kiwi TripleStore Yard"
argument_list|)
throw|;
block|}
name|repositoryTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|bundleContext
argument_list|,
name|filter
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... start tracking for Sesame Repositories"
argument_list|)
expr_stmt|;
name|repositoryTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
specifier|final
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|//closing the serviceTracker will also unregister the yard (if registered)
if|if
condition|(
name|repositoryTracker
operator|!=
literal|null
condition|)
block|{
name|repositoryTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|serviceReference
parameter_list|)
block|{
name|Repository
name|repo
init|=
operator|(
name|Repository
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|serviceReference
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"could not retrieve Sesame Repository for ServiceRefernece {} "
operator|+
literal|"(repository name: {})"
argument_list|,
name|serviceReference
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|repoServiceReference
operator|!=
literal|null
condition|)
block|{
comment|//already a service registered
comment|//check if the added service reference has a higher ranking
if|if
condition|(
name|serviceReference
operator|.
name|compareTo
argument_list|(
name|repoServiceReference
argument_list|)
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"re-regsiter SesameYard because ServiceReference {} "
operator|+
literal|"has a higher ranking as the currently used one {}!"
argument_list|,
name|serviceReference
argument_list|,
name|repoServiceReference
argument_list|)
expr_stmt|;
name|unregisterSesameYard
argument_list|()
expr_stmt|;
name|registerSesameYard
argument_list|(
name|serviceReference
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
comment|//else the added reference has a lower ranking ... nothing todo
block|}
else|else
block|{
comment|//first service is registered
name|registerSesameYard
argument_list|(
name|serviceReference
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|repo
return|;
block|}
comment|/** 	 * @param serviceReference 	 * @param repo 	 */
specifier|protected
name|void
name|registerSesameYard
parameter_list|(
name|ServiceReference
name|serviceReference
parameter_list|,
name|Repository
name|repo
parameter_list|)
block|{
name|yard
operator|=
operator|new
name|SesameYard
argument_list|(
name|repo
argument_list|,
name|yardConfig
argument_list|)
expr_stmt|;
name|yardService
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|Yard
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|yard
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|repoServiceReference
operator|=
name|serviceReference
expr_stmt|;
block|}
comment|/**      *       */
specifier|private
name|void
name|unregisterSesameYard
parameter_list|()
block|{
if|if
condition|(
name|yardService
operator|!=
literal|null
condition|)
block|{
name|yardService
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|yardService
operator|=
literal|null
expr_stmt|;
name|repoServiceReference
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|yard
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - unregister Yard {} "
argument_list|,
name|yard
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|yard
operator|.
name|close
argument_list|()
expr_stmt|;
name|yard
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|serviceReference
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
comment|//ignored
name|log
operator|.
name|info
argument_list|(
literal|" - ignore modifyService call for {}"
argument_list|,
name|serviceReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|serviceReference
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|serviceReference
operator|.
name|equals
argument_list|(
name|repoServiceReference
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - currently used Repository was removed (ref: {})"
argument_list|,
name|serviceReference
argument_list|)
expr_stmt|;
name|unregisterSesameYard
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ServiceReference
argument_list|>
name|others
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|repositoryTracker
operator|.
name|getServiceReferences
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|others
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|others
argument_list|)
expr_stmt|;
comment|//sort by priority
block|}
name|boolean
name|registered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ServiceReference
argument_list|>
name|refs
init|=
name|others
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|registered
operator|&&
name|refs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ServiceReference
name|ref
init|=
name|refs
operator|.
name|next
argument_list|()
decl_stmt|;
name|Repository
name|repo
init|=
operator|(
name|Repository
operator|)
name|repositoryTracker
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - re-register Yard with other available repository {}"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|registerSesameYard
argument_list|(
name|ref
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|registered
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|serviceReference
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

