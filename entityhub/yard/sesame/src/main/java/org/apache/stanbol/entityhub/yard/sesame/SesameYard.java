begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|sesame
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|yard
operator|.
name|AbstractYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlEndpointTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlFieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlFieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|query
operator|.
name|sparql
operator|.
name|SparqlQueryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|UnsupportedQueryTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|impl
operator|.
name|TreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|BindingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|Dataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|MalformedQueryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|QueryEvaluationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|QueryLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|TupleQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|TupleQueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|query
operator|.
name|impl
operator|.
name|DatasetImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the Yard Interface based on a Sesame {@link Repository}.   *<p>  * This is NOT an OSGI component nor service. It is intended to be used by  * Components that do allow users to configure a Repository implementation.  * Such components will than create a SesameYard instance and register it as  * a OSGI service.  *  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|SesameYard
extends|extends
name|AbstractYard
implements|implements
name|Yard
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SesameYard
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Property used to mark empty Representations managed by this Graph. This is      * needed to workaround the fact, that the Entityhub supports the storage of      * empty Representations but this Yard uses the search for any outgoing      * relation (triple with the id of the representation as Subject) for the       * implementation of {@link #isRepresentation(String)}. Therefore for an      * empty Representation {@link #isRepresentation(String)} would return false      * even if the representation was {@link #store(Representation)} previously.      *<p>      * Adding the Triple<br>      *<code> ?representationId<{@value #MANAGED_REPRESENTATION}> true^^xsd:boolean</code>      *<br> for any empty Representation avoids this unwanted behaviour.      */
specifier|private
specifier|static
specifier|final
name|String
name|MANAGED_REPRESENTATION_URI
init|=
literal|"urn:org.apache.stanbol:entityhub.yard:rdf.sesame:managesRepresentation"
decl_stmt|;
comment|/**      * used as property for a triple to ensure existence for representations that       * do not define yet any triples      */
specifier|private
specifier|final
name|URI
name|managedRepresentation
decl_stmt|;
comment|/**      * used as value for a triple to ensure existence for representations that       * do not define yet any triples      */
specifier|private
specifier|final
name|Value
name|managedRepresentationState
decl_stmt|;
comment|/**      * If inferred Triples are included in operations on this Yard.      */
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_INFERRED
init|=
literal|"org.apache.stanbol.entityhub.yard.sesame.includeInferred"
decl_stmt|;
comment|/**      * By default {@link #INCLUDE_INFERRED} is enabled.      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_INCLUDE_INFERRED
init|=
literal|true
decl_stmt|;
comment|/**      * Property used to enable/disable Sesame Context. If<code>false</code> the      * {@link #CONTEXT_URI} property gets ignored. If<code>true</code> and      * {@link #CONTEXT_URI} is missing the default context (<code>null</code>) is      * used. Otherwise the contexts as configured for {@link #CONTEXT_URI} are      * used.      */
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_ENABLED
init|=
literal|"org.apache.stanbol.entityhub.yard.sesame.enableContext"
decl_stmt|;
comment|/**      * By default the {@link #CONTEXT_ENABLED} feature is disabled.      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CONTEXT_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**      * Property used to optionally configure one or more context URIs. empty      * values are interpreted as<code>null</code>      */
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_URI
init|=
literal|"org.apache.stanbol.entityhub.yard.sesame.contextUri"
decl_stmt|;
comment|/**      * The context used by this yard      */
specifier|private
specifier|final
name|URI
index|[]
name|contexts
decl_stmt|;
specifier|private
specifier|final
name|Dataset
name|dataset
decl_stmt|;
specifier|private
name|boolean
name|includeInferred
decl_stmt|;
specifier|private
specifier|final
name|Repository
name|repository
decl_stmt|;
specifier|private
specifier|final
name|RdfValueFactory
name|valueFactory
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|sesameFactory
decl_stmt|;
specifier|private
specifier|final
name|SesameYardConfig
name|config
decl_stmt|;
specifier|private
specifier|final
name|URI
name|queryRoot
decl_stmt|;
specifier|private
specifier|final
name|URI
name|queryResult
decl_stmt|;
specifier|public
name|SesameYard
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|SesameYardConfig
name|config
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repo
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|sesameFactory
operator|=
name|repo
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|valueFactory
operator|=
operator|new
name|RdfValueFactory
argument_list|(
literal|null
argument_list|,
name|sesameFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|managedRepresentation
operator|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|MANAGED_REPRESENTATION_URI
argument_list|)
expr_stmt|;
name|this
operator|.
name|managedRepresentationState
operator|=
name|sesameFactory
operator|.
name|createLiteral
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|includeInferred
operator|=
name|config
operator|.
name|isIncludeInferred
argument_list|()
expr_stmt|;
comment|//init the super class
name|activate
argument_list|(
name|this
operator|.
name|valueFactory
argument_list|,
name|SparqlFieldQueryFactory
operator|.
name|getInstance
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|isContextEnabled
argument_list|()
condition|)
block|{
comment|//Set the contexts
name|String
index|[]
name|contexts
init|=
name|config
operator|.
name|getContexts
argument_list|()
decl_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|URI
index|[
name|contexts
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contexts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|contexts
index|[
name|i
index|]
operator|=
name|contexts
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|contexts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|contexts
operator|=
operator|new
name|URI
index|[]
block|{}
expr_stmt|;
block|}
comment|//also init the dataset required for SPARQL queries
if|if
condition|(
name|contexts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|DatasetImpl
name|dataset
init|=
operator|new
name|DatasetImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|context
range|:
name|this
operator|.
name|contexts
control|)
block|{
name|dataset
operator|.
name|addNamedGraph
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|addDefaultGraph
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dataset
operator|=
name|dataset
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dataset
operator|=
literal|null
expr_stmt|;
block|}
name|queryRoot
operator|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|RdfResourceEnum
operator|.
name|QueryResultSet
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|queryResult
operator|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|RdfResourceEnum
operator|.
name|queryResult
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Closes this Yard, but<b>does not</b> close the Sesame Repository!      */
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//init the super class
name|deactivate
argument_list|()
expr_stmt|;
block|}
comment|/**      * Getter for the context URI used by this yard.      * @return the URI used for the RDF graph that stores all the data of this      * yard.      */
specifier|public
specifier|final
name|URI
index|[]
name|getContexts
parameter_list|()
block|{
return|return
name|contexts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|getRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed representation id MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed representation id MUST NOT be EMTPY!"
argument_list|)
throw|;
block|}
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
name|Representation
name|rep
init|=
name|getRepresentation
argument_list|(
name|con
argument_list|,
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|id
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|rep
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to get Representation "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/**      * Internally used to create Representations for URIs      * @param uri the uri      * @param check if<code>false</code> than there is no check if the URI      *     refers to a Resource in the graph that is of type {@link #REPRESENTATION}      * @return the Representation      */
specifier|protected
specifier|final
name|Representation
name|getRepresentation
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|URI
name|uri
parameter_list|,
name|boolean
name|check
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|check
operator|||
name|isRepresentation
argument_list|(
name|con
argument_list|,
name|uri
argument_list|)
condition|)
block|{
return|return
name|createRepresentationGraph
argument_list|(
name|con
argument_list|,
name|uri
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|//not found
block|}
block|}
comment|/**      * Extracts the triples that belong to the {@link Representation} with the      * parsed id from the Sesame repository.      * @param con the repository connection      * @param uri the subject of the Representation to extract      * @return the representation with the extracted data.      * @throws RepositoryException       */
specifier|protected
name|RdfRepresentation
name|createRepresentationGraph
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RdfRepresentation
name|rep
init|=
name|valueFactory
operator|.
name|createRdfRepresentation
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
name|rep
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|extractRepresentation
argument_list|(
name|con
argument_list|,
name|model
argument_list|,
name|uri
argument_list|,
operator|new
name|HashSet
argument_list|<
name|BNode
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rep
return|;
block|}
comment|/**      * Recursive Method internally doing all the work for       * {@link #createRepresentationGraph(UriRef, TripleCollection)}      * @param con the repository connection to read the data from      * @param model The model to add the statements retrieved      * @param node the current node. Changes in recursive calls as it follows      * @param visited holding all the visited BNodes to avoid cycles. Other nodes       * need not be added because this implementation would not follow it anyway      * outgoing relations if the object is a {@link BNode} instance.      * @throws RepositoryException       */
specifier|private
name|void
name|extractRepresentation
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|Model
name|model
parameter_list|,
name|Resource
name|node
parameter_list|,
name|Set
argument_list|<
name|BNode
argument_list|>
name|visited
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|//we need all the outgoing relations and also want to follow bNodes until
comment|//the next UriRef. However we are not interested in incoming relations!
name|RepositoryResult
argument_list|<
name|Statement
argument_list|>
name|outgoing
init|=
name|con
operator|.
name|getStatements
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
decl_stmt|;
name|Statement
name|statement
decl_stmt|;
name|Set
argument_list|<
name|BNode
argument_list|>
name|bnodes
init|=
operator|new
name|HashSet
argument_list|<
name|BNode
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|outgoing
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|statement
operator|=
name|outgoing
operator|.
name|next
argument_list|()
expr_stmt|;
name|model
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|Value
name|object
init|=
name|statement
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|BNode
operator|&&
name|visited
operator|.
name|contains
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|bnodes
operator|.
name|add
argument_list|(
operator|(
name|BNode
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
name|outgoing
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|BNode
name|bnode
range|:
name|bnodes
control|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|bnode
argument_list|)
expr_stmt|;
comment|//TODO: recursive calls could cause stackoverflows with wired graphs
name|extractRepresentation
argument_list|(
name|con
argument_list|,
name|model
argument_list|,
name|bnode
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be EMPTY!"
argument_list|)
throw|;
block|}
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
name|boolean
name|state
init|=
name|isRepresentation
argument_list|(
name|con
argument_list|,
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to check for Representation "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/**      * Internally used to check if a URI resource represents an representation      * @param con the repository connection      * @param subject the subject URI of the representation to check      * @return the state      * @throws RepositoryException       */
specifier|protected
specifier|final
name|boolean
name|isRepresentation
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|URI
name|subject
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|con
operator|.
name|hasStatement
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Representation id MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
name|remove
argument_list|(
name|con
argument_list|,
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to remove for Representation "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/**      * Internally used to remove a Representation from the Repository.<p>      * NOTE: this does not remove any {@link Statement}s for {@link BNode}s      * beeing {@link Statement#getObject() object}s of the parsed subjects.      * @param con the connection      * @param subject the subject of the Representation to remove      * @throws RepositoryException       */
specifier|protected
name|void
name|remove
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|URI
name|subject
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|con
operator|.
name|remove
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Iterable over the IDs to remove MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|remove
argument_list|(
name|con
argument_list|,
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to remove parsed Representations"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|removeAll
parameter_list|()
throws|throws
name|YardException
block|{
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
name|con
operator|.
name|clear
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
comment|//removes everything
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to remove parsed Representations"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Representation
name|store
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
if|if
condition|(
name|representation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Representation MUST NOT be NULL!"
argument_list|)
throw|;
block|}
return|return
name|store
argument_list|(
name|representation
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|store
parameter_list|(
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|representations
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
if|if
condition|(
name|representations
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Iterable over the Representations to store MUST NOT be NULL!"
argument_list|)
throw|;
block|}
return|return
name|store
argument_list|(
name|representations
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Representation
name|update
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
if|if
condition|(
name|representation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Representation MUST NOT be NULL!"
argument_list|)
throw|;
block|}
return|return
name|store
argument_list|(
name|representation
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|update
parameter_list|(
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|representations
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|representations
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Iterable over the Representations to update MUST NOT be NULL!"
argument_list|)
throw|;
block|}
return|return
name|store
argument_list|(
name|representations
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|store
parameter_list|(
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|representations
parameter_list|,
name|boolean
name|allowCreate
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|Representation
argument_list|>
name|added
init|=
operator|new
name|ArrayList
argument_list|<
name|Representation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Representation
name|representation
range|:
name|representations
control|)
block|{
if|if
condition|(
name|representation
operator|!=
literal|null
condition|)
block|{
name|Representation
name|stored
init|=
name|store
argument_list|(
name|con
argument_list|,
name|representation
argument_list|,
name|allowCreate
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//reassign
comment|//to check if the store was successful
if|if
condition|(
name|stored
operator|!=
literal|null
condition|)
block|{
name|added
operator|.
name|add
argument_list|(
name|stored
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//can only be the case if allowCreate==false (update was called)
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to update Representation %s in Yard %s because it is not present!"
argument_list|,
name|representation
operator|.
name|getId
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//ignore null values in the parsed Iterable!
block|}
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|added
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to remove parsed Representations"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
try|try
block|{
comment|//to avoid Exception logs in case store(..) throws an Exception
comment|//in the case allowCreate and canNotCreateIsError do not allow
comment|//the store operation
name|con
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/**      * Generic store method used by store and update methods      * @param representation the representation to store/update      * @param allowCreate if new representation are allowed to be created      * @param canNotCreateIsError if updates to existing one are allowed      * @return the representation as added to the yard      * @throws IllegalArgumentException      * @throws YardException      */
specifier|protected
specifier|final
name|Representation
name|store
parameter_list|(
name|Representation
name|representation
parameter_list|,
name|boolean
name|allowCreate
parameter_list|,
name|boolean
name|canNotCreateIsError
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
name|Representation
name|added
init|=
name|store
argument_list|(
name|con
argument_list|,
name|representation
argument_list|,
name|allowCreate
argument_list|,
name|canNotCreateIsError
argument_list|)
decl_stmt|;
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|added
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to remove parsed Representations"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
try|try
block|{
comment|//to avoid Exception logs in case store(..) throws an Exception
comment|//in the case allowCreate and canNotCreateIsError do not allow
comment|//the store operation
name|con
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
specifier|protected
specifier|final
name|Representation
name|store
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|Representation
name|representation
parameter_list|,
name|boolean
name|allowCreate
parameter_list|,
name|boolean
name|canNotCreateIsError
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|RepositoryException
block|{
if|if
condition|(
name|representation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"store Representation "
operator|+
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|subject
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|contains
init|=
name|con
operator|.
name|hasStatement
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
decl_stmt|;
name|con
operator|.
name|remove
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|contains
operator|&&
operator|!
name|allowCreate
condition|)
block|{
if|if
condition|(
name|canNotCreateIsError
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed Representation "
operator|+
name|representation
operator|.
name|getId
argument_list|()
operator|+
literal|" in not managed by this Yard "
operator|+
name|getName
argument_list|()
operator|+
literal|"(id="
operator|+
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|//get the graph for the Representation and add it to the store
name|RdfRepresentation
name|toAdd
init|=
name|valueFactory
operator|.
name|toRdfRepresentation
argument_list|(
name|representation
argument_list|)
decl_stmt|;
if|if
condition|(
name|toAdd
operator|.
name|getModel
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|con
operator|.
name|add
argument_list|(
name|toAdd
operator|.
name|getURI
argument_list|()
argument_list|,
name|managedRepresentation
argument_list|,
name|managedRepresentationState
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|con
operator|.
name|add
argument_list|(
name|toAdd
operator|.
name|getModel
argument_list|()
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
return|return
name|toAdd
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findReferences
parameter_list|(
name|FieldQuery
name|parsedQuery
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|parsedQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed query MUST NOT be NULL!"
argument_list|)
throw|;
block|}
specifier|final
name|SparqlFieldQuery
name|query
init|=
name|SparqlFieldQueryFactory
operator|.
name|getSparqlFieldQuery
argument_list|(
name|parsedQuery
argument_list|)
decl_stmt|;
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
name|TupleQueryResult
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
comment|//execute the query
name|int
name|limit
init|=
name|QueryUtils
operator|.
name|getLimit
argument_list|(
name|query
argument_list|,
name|config
operator|.
name|getDefaultQueryResultNumber
argument_list|()
argument_list|,
name|config
operator|.
name|getMaxQueryResultNumber
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|=
name|executeSparqlFieldQuery
argument_list|(
name|con
argument_list|,
name|query
argument_list|,
name|limit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//parse the results
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|limit
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingSet
name|result
init|=
name|results
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|query
operator|.
name|getRootVariableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Resource
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|value
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|String
argument_list|>
argument_list|(
name|query
argument_list|,
name|ids
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to execute findReferences query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to execute findReferences query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
comment|//close the result if present
try|try
block|{
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|ignore
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
block|}
block|}
comment|/**      * Returns the SPARQL result set for a given {@link SparqlFieldQuery} that      * was executed on this yard      * @param con the repository connection to use      * @param fieldQuery the SparqlFieldQuery instance      * @param limit the maximum number of results      * @return the results of the SPARQL query in the {@link #contexts} of the      * Sesame Repository       * @throws RepositoryException on any error while using the parsed connection      * @throws QueryEvaluationException  on any error while executing the query      * @throws YardException if the SPARQL query created for the parsed FieldQuery      * was illegal formatted or if the {@link #repository} does not support       * SPARQL.      */
specifier|private
name|TupleQueryResult
name|executeSparqlFieldQuery
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
specifier|final
name|SparqlFieldQuery
name|fieldQuery
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|select
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|YardException
throws|,
name|QueryEvaluationException
block|{
name|String
name|sparqlQueryString
init|=
name|SparqlQueryUtils
operator|.
name|createSparqlSelectQuery
argument_list|(
name|fieldQuery
argument_list|,
name|select
argument_list|,
name|limit
argument_list|,
name|SparqlEndpointTypeEnum
operator|.
name|Sesame
argument_list|)
decl_stmt|;
name|TupleQuery
name|sparqlOuery
decl_stmt|;
try|try
block|{
name|sparqlOuery
operator|=
name|con
operator|.
name|prepareTupleQuery
argument_list|(
name|QueryLanguage
operator|.
name|SPARQL
argument_list|,
name|sparqlQueryString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedQueryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to pparse SPARQL Query generated for a FieldQuery"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"FieldQuery: {}"
argument_list|,
name|fieldQuery
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"SPARQL Query: {}"
argument_list|,
name|sparqlQueryString
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to parse SPARQL query generated for the parse FieldQuery"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedQueryTypeException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"The Sesame Repository '"
operator|+
name|repository
operator|+
literal|"'(class: "
operator|+
name|repository
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") does not support SPARQL!"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YardException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|dataset
operator|!=
literal|null
condition|)
block|{
comment|//respect the configured contexts
name|sparqlOuery
operator|.
name|setDataset
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
block|}
return|return
name|sparqlOuery
operator|.
name|evaluate
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|findRepresentation
parameter_list|(
name|FieldQuery
name|parsedQuery
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|parsedQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed query MUST NOT be NULL!"
argument_list|)
throw|;
block|}
specifier|final
name|SparqlFieldQuery
name|query
init|=
name|SparqlFieldQueryFactory
operator|.
name|getSparqlFieldQuery
argument_list|(
name|parsedQuery
argument_list|)
decl_stmt|;
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
name|TupleQueryResult
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
comment|//execute the query
name|int
name|limit
init|=
name|QueryUtils
operator|.
name|getLimit
argument_list|(
name|query
argument_list|,
name|config
operator|.
name|getDefaultQueryResultNumber
argument_list|()
argument_list|,
name|config
operator|.
name|getMaxQueryResultNumber
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|=
name|executeSparqlFieldQuery
argument_list|(
name|con
argument_list|,
name|query
argument_list|,
name|limit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//parse the results and generate the Representations
comment|//create an own valueFactors so that all the data of the query results
comment|//are added to the same Sesame Model
name|Model
name|model
init|=
operator|new
name|TreeModel
argument_list|()
decl_stmt|;
name|RdfValueFactory
name|valueFactory
init|=
operator|new
name|RdfValueFactory
argument_list|(
name|model
argument_list|,
name|sesameFactory
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Representation
argument_list|>
name|representations
init|=
operator|new
name|ArrayList
argument_list|<
name|Representation
argument_list|>
argument_list|(
name|limit
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingSet
name|result
init|=
name|results
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|query
operator|.
name|getRootVariableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|URI
condition|)
block|{
name|createRepresentationGraph
argument_list|(
name|con
argument_list|,
operator|(
name|URI
operator|)
name|value
argument_list|)
expr_stmt|;
comment|//copy all data to the model
name|model
operator|.
name|add
argument_list|(
name|queryRoot
argument_list|,
name|queryResult
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|//link the result with the query result
name|representations
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createRdfRepresentation
argument_list|(
operator|(
name|URI
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//ignore non URI results
block|}
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
operator|new
name|SesameQueryResultList
argument_list|(
name|model
argument_list|,
name|query
argument_list|,
name|representations
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to execute findReferences query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to execute findReferences query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
comment|//close the result if present
try|try
block|{
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|ignore
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|parsedQuery
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|parsedQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed query MUST NOT be NULL!"
argument_list|)
throw|;
block|}
specifier|final
name|SparqlFieldQuery
name|query
init|=
name|SparqlFieldQueryFactory
operator|.
name|getSparqlFieldQuery
argument_list|(
name|parsedQuery
argument_list|)
decl_stmt|;
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
name|TupleQueryResult
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
comment|//execute the query
name|int
name|limit
init|=
name|QueryUtils
operator|.
name|getLimit
argument_list|(
name|query
argument_list|,
name|config
operator|.
name|getDefaultQueryResultNumber
argument_list|()
argument_list|,
name|config
operator|.
name|getMaxQueryResultNumber
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|=
name|executeSparqlFieldQuery
argument_list|(
name|con
argument_list|,
name|query
argument_list|,
name|limit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//parse the results and generate the Representations
comment|//create an own valueFactors so that all the data of the query results
comment|//are added to the same Sesame Model
name|Model
name|model
init|=
operator|new
name|TreeModel
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Representation
argument_list|>
name|representations
init|=
operator|new
name|ArrayList
argument_list|<
name|Representation
argument_list|>
argument_list|(
name|limit
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
name|bindings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
argument_list|(
name|query
operator|.
name|getFieldVariableMappings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
range|:
name|query
operator|.
name|getFieldVariableMappings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|bindings
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|getValue
argument_list|()
argument_list|,
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|mapping
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|results
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingSet
name|result
init|=
name|results
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|query
operator|.
name|getRootVariableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|URI
condition|)
block|{
name|URI
name|subject
init|=
operator|(
name|URI
operator|)
name|value
decl_stmt|;
comment|//link the result with the query result
name|model
operator|.
name|add
argument_list|(
name|queryRoot
argument_list|,
name|queryResult
argument_list|,
name|subject
argument_list|)
expr_stmt|;
comment|//now copy over the other selected data
for|for
control|(
name|String
name|binding
range|:
name|result
operator|.
name|getBindingNames
argument_list|()
control|)
block|{
name|URI
name|property
init|=
name|bindings
operator|.
name|get
argument_list|(
name|binding
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|add
argument_list|(
name|subject
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|//else no mapping for the query.getRootVariableName()
block|}
block|}
comment|//ignore non URI results
block|}
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
operator|new
name|SesameQueryResultList
argument_list|(
name|model
argument_list|,
name|query
argument_list|,
name|representations
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to execute findReferences query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YardException
argument_list|(
literal|"Unable to execute findReferences query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
comment|//close the result if present
try|try
block|{
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|ignore
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ignore
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
block|}
block|}
comment|/**      * Wrapper that converts a Sesame {@link TupleQueryResult} to a {@link Iterator}.      *<b>NOTE</b> this will not close the {@link TupleQueryResult}!      * @author Rupert westenthaler      *      */
specifier|static
class|class
name|TupleResultIterator
implements|implements
name|Iterator
argument_list|<
name|BindingSet
argument_list|>
block|{
specifier|private
specifier|final
name|TupleQueryResult
name|resultList
decl_stmt|;
specifier|public
name|TupleResultIterator
parameter_list|(
name|TupleQueryResult
name|resultList
parameter_list|)
block|{
name|this
operator|.
name|resultList
operator|=
name|resultList
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
try|try
block|{
return|return
name|resultList
operator|.
name|hasNext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BindingSet
name|next
parameter_list|()
block|{
try|try
block|{
return|return
name|resultList
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|QueryEvaluationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove is not supported by Sesame TupleQueryResult"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

