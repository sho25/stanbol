begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|sesame
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|sesame
operator|.
name|SesameYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|sesame
operator|.
name|SesameYardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|sail
operator|.
name|SailRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|sail
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_comment
comment|/**  * Unit tests for testing {@link SesameYard} that do use contexts  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|SesameContextTest
block|{
specifier|private
specifier|static
name|Repository
name|repo
init|=
operator|new
name|SailRepository
argument_list|(
operator|new
name|MemoryStore
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ValueFactory
name|sesameFactory
init|=
name|repo
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|EN
init|=
literal|"en"
decl_stmt|;
specifier|private
specifier|static
name|String
name|DE
init|=
literal|"de"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Yard
argument_list|>
argument_list|>
name|expectedEntities
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Yard
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|URI
name|rdfType
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|URI
name|skosConcept
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|URI
name|skosPrefLabel
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"preLabel"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|URI
name|CONTEXT1
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
literal|"http://www.test.org/contex1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|URI
name|CONTEXT2
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
literal|"http://www.test.org/contex2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SesameYard
name|yard1
decl_stmt|;
specifier|private
specifier|static
name|SesameYard
name|yard2
decl_stmt|;
specifier|private
specifier|static
name|SesameYard
name|unionYard
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|SesameYard
argument_list|>
name|yards
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
specifier|final
name|void
name|initYard
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|repo
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|//create the graphs in Clerezza
comment|//init the ClerezzaYards for the created Clerezza graphs
name|SesameYardConfig
name|yard1config
init|=
operator|new
name|SesameYardConfig
argument_list|(
literal|"context 1 yard"
argument_list|)
decl_stmt|;
name|yard1config
operator|.
name|setName
argument_list|(
literal|"Yard over context 1"
argument_list|)
expr_stmt|;
name|yard1config
operator|.
name|setContextEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|yard1config
operator|.
name|setContexts
argument_list|(
operator|new
name|String
index|[]
block|{
name|CONTEXT1
operator|.
name|stringValue
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|yard1
operator|=
operator|new
name|SesameYard
argument_list|(
name|repo
argument_list|,
name|yard1config
argument_list|)
expr_stmt|;
name|SesameYardConfig
name|yard2config
init|=
operator|new
name|SesameYardConfig
argument_list|(
literal|"context 2 yard"
argument_list|)
decl_stmt|;
name|yard2config
operator|.
name|setName
argument_list|(
literal|"Yard over context 2"
argument_list|)
expr_stmt|;
name|yard2config
operator|.
name|setContextEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|yard2config
operator|.
name|setContexts
argument_list|(
operator|new
name|String
index|[]
block|{
name|CONTEXT2
operator|.
name|stringValue
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|yard2
operator|=
operator|new
name|SesameYard
argument_list|(
name|repo
argument_list|,
name|yard2config
argument_list|)
expr_stmt|;
name|SesameYardConfig
name|unionYardConfig
init|=
operator|new
name|SesameYardConfig
argument_list|(
literal|"union yard"
argument_list|)
decl_stmt|;
name|unionYardConfig
operator|.
name|setName
argument_list|(
literal|"Union Yard"
argument_list|)
expr_stmt|;
name|unionYard
operator|=
operator|new
name|SesameYard
argument_list|(
name|repo
argument_list|,
name|unionYardConfig
argument_list|)
expr_stmt|;
name|yards
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|yard1
argument_list|,
name|yard2
argument_list|,
name|unionYard
argument_list|)
expr_stmt|;
comment|//add the test data (to the Repository to also test pre-existing data)
name|RepositoryConnection
name|con
init|=
name|repo
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|begin
argument_list|()
expr_stmt|;
name|URI
name|entity1
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
literal|"http://www.test.org/entity1"
argument_list|)
decl_stmt|;
name|con
operator|.
name|add
argument_list|(
name|entity1
argument_list|,
name|rdfType
argument_list|,
name|skosConcept
argument_list|,
name|CONTEXT1
argument_list|)
expr_stmt|;
name|con
operator|.
name|add
argument_list|(
name|entity1
argument_list|,
name|skosPrefLabel
argument_list|,
name|sesameFactory
operator|.
name|createLiteral
argument_list|(
literal|"test context one"
argument_list|,
name|EN
argument_list|)
argument_list|,
name|CONTEXT1
argument_list|)
expr_stmt|;
name|con
operator|.
name|add
argument_list|(
name|entity1
argument_list|,
name|skosPrefLabel
argument_list|,
name|sesameFactory
operator|.
name|createLiteral
argument_list|(
literal|"Test Context Eins"
argument_list|,
name|DE
argument_list|)
argument_list|,
name|CONTEXT1
argument_list|)
expr_stmt|;
name|expectedEntities
operator|.
name|put
argument_list|(
name|entity1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|yard1
argument_list|,
name|unionYard
argument_list|)
argument_list|)
expr_stmt|;
name|URI
name|entity2
init|=
name|sesameFactory
operator|.
name|createURI
argument_list|(
literal|"http://www.test.org/entity2"
argument_list|)
decl_stmt|;
name|con
operator|.
name|add
argument_list|(
name|entity2
argument_list|,
name|rdfType
argument_list|,
name|skosConcept
argument_list|,
name|CONTEXT2
argument_list|)
expr_stmt|;
name|con
operator|.
name|add
argument_list|(
name|entity2
argument_list|,
name|skosPrefLabel
argument_list|,
name|sesameFactory
operator|.
name|createLiteral
argument_list|(
literal|"test context two"
argument_list|,
name|EN
argument_list|)
argument_list|,
name|CONTEXT2
argument_list|)
expr_stmt|;
name|con
operator|.
name|add
argument_list|(
name|entity2
argument_list|,
name|skosPrefLabel
argument_list|,
name|sesameFactory
operator|.
name|createLiteral
argument_list|(
literal|"Test Context Zwei"
argument_list|,
name|DE
argument_list|)
argument_list|,
name|CONTEXT2
argument_list|)
expr_stmt|;
name|expectedEntities
operator|.
name|put
argument_list|(
name|entity2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|yard2
argument_list|,
name|unionYard
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks the expected visibility of Entities to the different yards      * @throws YardException       */
annotation|@
name|Test
specifier|public
name|void
name|testRetrival
parameter_list|()
throws|throws
name|YardException
block|{
for|for
control|(
name|Entry
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Yard
argument_list|>
argument_list|>
name|entry
range|:
name|expectedEntities
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Yard
name|yard
range|:
name|yards
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|yard
argument_list|)
condition|)
block|{
name|validateEntity
argument_list|(
name|yard
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Entity "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" is not expected in Yard "
operator|+
name|yard
operator|.
name|getName
argument_list|()
operator|+
literal|"!"
argument_list|,
name|yard
operator|.
name|isRepresentation
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|stringValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Test visibility of Entities added to specific contexts      * @throws YardException      */
annotation|@
name|Test
specifier|public
name|void
name|testStoreToContextEnabledYard
parameter_list|()
throws|throws
name|YardException
block|{
comment|//add a new entity to yard 2
name|String
name|context2added
init|=
literal|"http://www.test.org/addedEntity"
decl_stmt|;
name|Representation
name|rep
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createRepresentation
argument_list|(
name|context2added
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|rdfType
operator|.
name|stringValue
argument_list|()
argument_list|,
name|skosConcept
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|skosPrefLabel
operator|.
name|stringValue
argument_list|()
argument_list|,
literal|"added Entity"
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|skosPrefLabel
operator|.
name|stringValue
argument_list|()
argument_list|,
literal|"hinzugefüte Entity"
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
name|yard2
operator|.
name|store
argument_list|(
name|rep
argument_list|)
expr_stmt|;
comment|//test visibility to other yards
name|Assert
operator|.
name|assertFalse
argument_list|(
name|yard1
operator|.
name|isRepresentation
argument_list|(
name|context2added
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|yard2
operator|.
name|isRepresentation
argument_list|(
name|context2added
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unionYard
operator|.
name|isRepresentation
argument_list|(
name|context2added
argument_list|)
argument_list|)
expr_stmt|;
comment|//remove it and test again
name|yard2
operator|.
name|remove
argument_list|(
name|context2added
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|yard1
operator|.
name|isRepresentation
argument_list|(
name|context2added
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|yard2
operator|.
name|isRepresentation
argument_list|(
name|context2added
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|unionYard
operator|.
name|isRepresentation
argument_list|(
name|context2added
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used by {@link #testRetrival()} to validate that an Entity is correctly      * retrieved by the tested {@link SesameYard}s.      * @param entity key - URI; value - expected RDF data      * @throws YardException       */
specifier|private
name|void
name|validateEntity
parameter_list|(
name|Yard
name|yard
parameter_list|,
name|URI
name|subject
parameter_list|)
throws|throws
name|YardException
block|{
name|Representation
name|rep
init|=
name|yard
operator|.
name|getRepresentation
argument_list|(
name|subject
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The Representation for "
operator|+
name|subject
operator|+
literal|"is missing in the "
operator|+
name|yard
operator|.
name|getId
argument_list|()
argument_list|,
name|rep
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"RdfRepresentation expected"
argument_list|,
name|rep
operator|instanceof
name|RdfRepresentation
argument_list|)
expr_stmt|;
comment|//check the RDF type to validate that some data are present
name|assertEquals
argument_list|(
name|skosConcept
operator|.
name|stringValue
argument_list|()
argument_list|,
name|rep
operator|.
name|getFirstReference
argument_list|(
name|rdfType
operator|.
name|stringValue
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|SesameYard
name|yard
range|:
name|yards
control|)
block|{
name|yard
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|repo
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

