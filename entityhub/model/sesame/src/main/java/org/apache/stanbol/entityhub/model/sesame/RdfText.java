begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_comment
comment|/**  * A {@link Text} implementation backed by a Sesame {@link Literal}  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|RdfText
implements|implements
name|Text
implements|,
name|RdfWrapper
block|{
specifier|private
specifier|final
name|Literal
name|literal
decl_stmt|;
specifier|protected
name|RdfText
parameter_list|(
name|Literal
name|literal
parameter_list|)
block|{
name|this
operator|.
name|literal
operator|=
name|literal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|literal
operator|.
name|getLanguage
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|literal
operator|.
name|getLabel
argument_list|()
return|;
block|}
comment|/**      * The wrapped Sesame {@link Literal}      * @return the Literal      */
specifier|public
name|Literal
name|getLiteral
parameter_list|()
block|{
return|return
name|literal
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|getValue
parameter_list|()
block|{
return|return
name|literal
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|literal
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Text
operator|&&
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
comment|//check the language
name|String
name|l1
init|=
name|literal
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|String
name|l2
init|=
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
if|if
condition|(
name|l1
operator|==
literal|null
condition|)
block|{
return|return
name|l2
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|l1
operator|.
name|equalsIgnoreCase
argument_list|(
name|l2
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|literal
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

