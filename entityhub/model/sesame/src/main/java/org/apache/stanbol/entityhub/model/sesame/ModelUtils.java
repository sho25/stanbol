begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|IteratorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|datatypes
operator|.
name|XMLDatatypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|vocabulary
operator|.
name|XMLSchema
import|;
end_import

begin_comment
comment|/**  * Set of {@link Transformer}s used to convert Sesame {@link Value}s to  * Entityhub model instances.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ModelUtils
block|{
comment|/**      * Restrict instantiation      */
specifier|private
name|ModelUtils
parameter_list|()
block|{}
comment|/**      * Transforms typed literals with datatype {@link XMLSchema#STRING} to      * {@link Text} instances as required by some {@link Representation}      * methods. This transformer is usually used in front of the      * {@link ModelUtils#VALUE_TRANSFORMER}.<p>      *<b>NOTE</b> that input values other as String literals are NOT transformed!      */
specifier|protected
specifier|static
name|Transformer
name|STRING_LITERAL_TO_TEXT_TRANSFORMER
init|=
operator|new
name|Transformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|Literal
operator|&&
name|XMLSchema
operator|.
name|STRING
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|input
operator|)
operator|.
name|getDatatype
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|RdfText
argument_list|(
operator|(
name|Literal
operator|)
name|input
argument_list|)
return|;
block|}
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
comment|/**      * A {@link Value} to {@link Object} transformer intended to be used for      * {@link IteratorUtils#transformedIterator(Iterator, Transformer)} to      * convert       */
specifier|public
specifier|static
name|Transformer
name|VALUE_TRANSFORMER
init|=
operator|new
name|Transformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|Value
condition|)
block|{
name|Value
name|sesameValue
init|=
operator|(
name|Value
operator|)
name|input
decl_stmt|;
if|if
condition|(
name|sesameValue
operator|instanceof
name|URI
condition|)
block|{
return|return
operator|new
name|RdfReference
argument_list|(
operator|(
name|URI
operator|)
name|sesameValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|sesameValue
operator|instanceof
name|Literal
condition|)
block|{
name|Literal
name|literal
init|=
operator|(
name|Literal
operator|)
name|sesameValue
decl_stmt|;
if|if
condition|(
name|literal
operator|.
name|getDatatype
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//TODO: adapt to RDF1.1
return|return
operator|new
name|RdfText
argument_list|(
name|literal
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ModelUtils
operator|.
name|transformTypedLiteral
argument_list|(
name|literal
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|RdfBNode
argument_list|(
operator|(
name|BNode
operator|)
name|sesameValue
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|//do not transform objects of other types (incl. null)
return|return
name|input
return|;
block|}
block|}
block|}
decl_stmt|;
comment|/**      * Transforms Sesmae {@link Value}s to {@link String}      * Emits {@link Value#stringValue()}      */
specifier|public
specifier|static
name|Transformer
name|VALUR_TO_STRING_TRANSFORMER
init|=
operator|new
name|Transformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Value
operator|)
name|input
operator|)
operator|.
name|stringValue
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Transforms a typed literal to the according java type.      * @param literal      * @return      */
specifier|private
specifier|static
name|Object
name|transformTypedLiteral
parameter_list|(
name|Literal
name|literal
parameter_list|)
block|{
name|URI
name|dataType
init|=
name|literal
operator|.
name|getDatatype
argument_list|()
decl_stmt|;
if|if
condition|(
name|XMLSchema
operator|.
name|INT
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|LONG
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|FLOAT
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|floatValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|DOUBLE
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|doubleValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|BOOLEAN
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|booleanValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|INTEGER
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|integerValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|DECIMAL
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|decimalValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|STRING
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
comment|//explicit handle string
comment|//to avoid going to a lot of equals checks
return|return
name|literal
operator|.
name|stringValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLDatatypeUtil
operator|.
name|isCalendarDatatype
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|calendarValue
argument_list|()
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|BYTE
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|byteValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|SHORT
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|shortValue
argument_list|()
return|;
comment|//Start with the more exotic types at the end (for performance reasons)
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|NON_NEGATIVE_INTEGER
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|||
name|XMLSchema
operator|.
name|NON_POSITIVE_INTEGER
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|||
name|XMLSchema
operator|.
name|NEGATIVE_INTEGER
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|||
name|XMLSchema
operator|.
name|POSITIVE_INTEGER
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|GDAY
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|||
name|XMLSchema
operator|.
name|GMONTH
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|||
name|XMLSchema
operator|.
name|GMONTHDAY
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|||
name|XMLSchema
operator|.
name|GYEAR
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|||
name|XMLSchema
operator|.
name|GYEARMONTH
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|calendarValue
argument_list|()
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|UNSIGNED_BYTE
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|shortValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|UNSIGNED_SHORT
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|XMLSchema
operator|.
name|UNSIGNED_INT
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|literal
operator|.
name|longValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|literal
operator|.
name|stringValue
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

