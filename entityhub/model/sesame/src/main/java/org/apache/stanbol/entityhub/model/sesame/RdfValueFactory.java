begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|UnsupportedTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|impl
operator|.
name|TreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|impl
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|vocabulary
operator|.
name|XMLSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RdfValueFactory
implements|implements
name|ValueFactory
block|{
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RdfValueFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|<
name|URI
argument_list|>
argument_list|>
name|JAVA_TO_XML_DATATYPE_MAPPINGS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|<
name|URI
argument_list|>
argument_list|>
name|mappings
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|<
name|URI
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|XMLSchema
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|XMLSchema
operator|.
name|BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|XMLSchema
operator|.
name|SHORT
argument_list|,
name|XMLSchema
operator|.
name|UNSIGNED_BYTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|XMLSchema
operator|.
name|INT
argument_list|,
name|XMLSchema
operator|.
name|UNSIGNED_SHORT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|XMLSchema
operator|.
name|LONG
argument_list|,
name|XMLSchema
operator|.
name|UNSIGNED_INT
argument_list|,
name|XMLSchema
operator|.
name|NEGATIVE_INTEGER
argument_list|,
name|XMLSchema
operator|.
name|POSITIVE_INTEGER
argument_list|,
name|XMLSchema
operator|.
name|NON_NEGATIVE_INTEGER
argument_list|,
name|XMLSchema
operator|.
name|NON_POSITIVE_INTEGER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|XMLSchema
operator|.
name|INTEGER
argument_list|,
name|XMLSchema
operator|.
name|UNSIGNED_LONG
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|XMLSchema
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|XMLSchema
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|XMLSchema
operator|.
name|DECIMAL
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|XMLSchema
operator|.
name|DATE
argument_list|,
name|XMLSchema
operator|.
name|DATETIME
argument_list|,
name|XMLSchema
operator|.
name|TIME
argument_list|,
name|XMLSchema
operator|.
name|GYEARMONTH
argument_list|,
name|XMLSchema
operator|.
name|GMONTHDAY
argument_list|,
name|XMLSchema
operator|.
name|GYEAR
argument_list|,
name|XMLSchema
operator|.
name|GMONTH
argument_list|,
name|XMLSchema
operator|.
name|GDAY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|XMLSchema
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|JAVA_TO_XML_DATATYPE_MAPPINGS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Lazy initialised instance returned by {@link #getInstance()}      */
specifier|private
specifier|static
name|RdfValueFactory
name|singleton
decl_stmt|;
specifier|protected
specifier|final
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|ValueFactory
name|sesameFactory
decl_stmt|;
comment|/**      * If not<code>null</code> this is used for all       * {@link #createRepresentation(String)} calls to this instance.      */
specifier|private
name|Model
name|model
decl_stmt|;
comment|/**      * Create a RdfValueFactory that does use the same {@link Model} for all      * created {@link Representation}s.      * @param model the model to use      * @param sesameFactory the Sesame ValueFactory or<code>null</code> to use      * the default      */
specifier|public
name|RdfValueFactory
parameter_list|(
name|Model
name|model
parameter_list|,
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|ValueFactory
name|sesameFactory
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|this
operator|.
name|sesameFactory
operator|=
name|sesameFactory
operator|==
literal|null
condition|?
name|ValueFactoryImpl
operator|.
name|getInstance
argument_list|()
else|:
name|sesameFactory
expr_stmt|;
empty_stmt|;
block|}
comment|/**      * Creates a {@link RdfValueFactory} for a given Sesame ValueFactory.<p>      * Instead of parsing<code>null</code> users should use the      * {@link #getInstance()} method.      * @param sesameFactory the Sesame ValueFactory or<code>null</code> to use      * the default      */
specifier|private
name|RdfValueFactory
parameter_list|(
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|ValueFactory
name|sesameFactory
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|sesameFactory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internally used by the {@link #getInstance()}      * @param sesameFactory the Sesame ValueFactory or<code>null</code> to use      * the default      */
specifier|private
name|RdfValueFactory
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * The default instance of this Factory.      * @return the instance      */
specifier|public
specifier|static
name|RdfValueFactory
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|singleton
operator|==
literal|null
condition|)
block|{
name|singleton
operator|=
operator|new
name|RdfValueFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|singleton
return|;
block|}
annotation|@
name|Override
specifier|public
name|Reference
name|createReference
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|UnsupportedTypeException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed value MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|URI
condition|)
block|{
return|return
operator|new
name|RdfReference
argument_list|(
operator|(
name|URI
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RdfReference
argument_list|(
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|createRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL!"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be empty!"
argument_list|)
throw|;
block|}
else|else
block|{
comment|//use the set model if present
return|return
name|createRdfRepresentation
argument_list|(
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates a {@link RdfRepresentation} for the parsed {@link URI}      * @param subject the URI      * @return the {@link RdfRepresentation}      */
specifier|public
name|RdfRepresentation
name|createRdfRepresentation
parameter_list|(
name|URI
name|subject
parameter_list|)
block|{
name|Model
name|model
init|=
name|this
operator|.
name|model
operator|==
literal|null
condition|?
operator|new
name|TreeModel
argument_list|()
else|:
name|this
operator|.
name|model
decl_stmt|;
return|return
operator|new
name|RdfRepresentation
argument_list|(
name|subject
argument_list|,
name|model
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|createText
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|UnsupportedTypeException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed value MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Literal
condition|)
block|{
return|return
operator|new
name|RdfText
argument_list|(
operator|(
name|Literal
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createText
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Text
name|createText
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed text MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tha parsed Text MUST NOT be empty!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|language
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|RdfText
argument_list|(
name|sesameFactory
operator|.
name|createLiteral
argument_list|(
name|text
argument_list|,
name|language
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Getter for the Sesame {@link org.openrdf.model.ValueFactory} used by      * this Entityhub {@link ValueFactory}.      * @return the Sesame value factory      */
specifier|public
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|ValueFactory
name|getSesameFactory
parameter_list|()
block|{
return|return
name|sesameFactory
return|;
block|}
comment|/**      * Converts any {@link Representation} implementation to a {@link RdfRepresentation}      * backed by a Sesame {@link Model}.      * @param representation the representation      * @return the {@link RdfRepresentation}      */
specifier|public
name|RdfRepresentation
name|toRdfRepresentation
parameter_list|(
name|Representation
name|representation
parameter_list|)
block|{
if|if
condition|(
name|representation
operator|instanceof
name|RdfRepresentation
condition|)
block|{
return|return
operator|(
name|RdfRepresentation
operator|)
name|representation
return|;
block|}
elseif|else
if|if
condition|(
name|representation
operator|!=
literal|null
condition|)
block|{
comment|//create the Clerezza Represenation
name|RdfRepresentation
name|rdfRep
init|=
name|createRdfRepresentation
argument_list|(
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//Copy all values field by field
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|representation
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
name|representation
operator|.
name|get
argument_list|(
name|field
argument_list|)
init|;
name|fieldValues
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rdfRep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|fieldValues
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rdfRep
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

