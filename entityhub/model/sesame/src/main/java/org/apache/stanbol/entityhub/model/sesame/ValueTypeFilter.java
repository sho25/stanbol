begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|vocabulary
operator|.
name|XMLSchema
import|;
end_import

begin_comment
comment|/**  * Hold the Java Object to xml schema mappings for Sesame.   * Used as {@link Predicate} for filtering Objects of statements.   * @author Rupert Westenthaler  *  * @param<T>  */
end_comment

begin_class
class|class
name|ValueTypeFilter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Predicate
block|{
specifier|private
name|boolean
name|referenceState
decl_stmt|;
specifier|private
name|boolean
name|plainLiteralState
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|URI
argument_list|>
name|xmlTypes
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Value
argument_list|>
name|sesameType
decl_stmt|;
specifier|public
name|ValueTypeFilter
parameter_list|(
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|this
operator|.
name|languages
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|languages
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|language
init|=
name|languages
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|language
operator|=
name|language
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|languages
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|languages
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|language
range|:
name|languages
control|)
block|{
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|language
operator|=
name|language
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|languages
operator|.
name|add
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|plainLiteralState
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|ValueTypeFilter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Text
operator|.
name|class
argument_list|)
condition|)
block|{
name|plainLiteralState
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Reference
operator|.
name|class
argument_list|)
condition|)
block|{
name|referenceState
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Value
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sesameType
operator|=
name|type
operator|.
name|asSubclass
argument_list|(
name|Value
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xmlTypes
operator|=
name|RdfValueFactory
operator|.
name|JAVA_TO_XML_DATATYPE_MAPPINGS
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|sesameType
operator|!=
literal|null
condition|)
block|{
return|return
name|sesameType
operator|.
name|isAssignableFrom
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|referenceState
operator|&&
name|object
operator|instanceof
name|URI
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Literal
condition|)
block|{
name|Literal
name|literal
init|=
operator|(
name|Literal
operator|)
name|object
decl_stmt|;
comment|//TODO: adapt to RDF1.1:
if|if
condition|(
name|plainLiteralState
operator|&&
operator|(
name|literal
operator|.
name|getDatatype
argument_list|()
operator|==
literal|null
operator|||
name|XMLSchema
operator|.
name|STRING
operator|.
name|equals
argument_list|(
name|literal
operator|.
name|getDatatype
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|contains
argument_list|(
name|literal
operator|.
name|getLanguage
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|plainLiteralState
operator|&&
name|xmlTypes
operator|!=
literal|null
operator|&&
name|literal
operator|.
name|getDatatype
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|xmlTypes
operator|.
name|contains
argument_list|(
name|literal
operator|.
name|getDatatype
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|//wrong literal type
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|//wrong Value type or not a Value at all
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

