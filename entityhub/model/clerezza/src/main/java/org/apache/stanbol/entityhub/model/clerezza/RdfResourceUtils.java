begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleLiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_comment
comment|/**  * Utilities to create {@link Resource} instances for Java Objects.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RdfResourceUtils
block|{
specifier|private
name|RdfResourceUtils
parameter_list|()
block|{
comment|/*do not create instances of Util Classes*/
block|}
comment|/**      * Defines Mappings for the DataTypes supported by the Clerezza {@link SimpleLiteralFactory}.      * If a xsd data type is mapped to<code>null</code> the string representation      * should be returnd as String (bypassing the {@link LiteralFactory})      * TODO Replace this code with our own implementation of the {@link LiteralFactory}      *      and implement mappings for all DataTypes in {@link DataTypeEnum}      *      (Rupert Westenthaler, 2010-11-12)      * @author Rupert Westenthaler      */
specifier|public
enum|enum
name|XsdDataTypeEnum
block|{
comment|//NOTE: Commented lines are not supported by org.apache.clerezza.rdf.core.impl.SimpleLiteralFactory
comment|// see http://svn.apache.org/repos/asf/incubator/clerezza/trunk/org.apache.clerezza.parent/org.apache.clerezza.rdf.core/src/main/java/org/apache/clerezza/rdf/core/impl/SimpleLiteralFactory.java
name|Boolean
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
block|,
comment|//Decimal("decimeal"),
name|Integer
argument_list|(
literal|"integer"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
block|,
name|Int
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
block|,
name|Short
argument_list|(
literal|"short"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
block|,
name|Byte
argument_list|(
literal|"byte"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
block|,
comment|//Float("float",Double.class),
name|Double
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|class
argument_list|)
block|,
name|Base64Binary
argument_list|(
literal|"base64Binary"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
block|,
name|DateTime
argument_list|(
literal|"dateTime"
argument_list|,
name|Date
operator|.
name|class
argument_list|)
block|,
comment|//Date("date"),
comment|//Time("time"),
name|AnyUri
argument_list|(
literal|"anyUri"
argument_list|,
literal|null
argument_list|)
block|,
comment|//QName("qName"),
comment|//Duration("duration"),
comment|//GYearMonth("gYearMonth"),
comment|//GYear("gYear"),
comment|//GMonthDay("gMonthDay"),
comment|//GDay("gDay"),
comment|//GMonth("gMonth"),
comment|//hexBinary("hexBinary"),
comment|//NOTATION("NOTATION"),
name|String
argument_list|(
literal|"string"
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,         ;
specifier|private
specifier|static
specifier|final
name|String
name|ns
init|=
literal|"http://www.w3.org/2001/XMLSchema#"
decl_stmt|;
specifier|private
name|String
name|uri
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
name|XsdDataTypeEnum
parameter_list|(
name|String
name|localName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|ns
operator|+
name|localName
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getMappedClass
parameter_list|()
block|{
return|return
name|clazz
return|;
block|}
block|}
comment|/**      * Unmodifiable map containing the supported xsd data type mappings as defined      * by the {@link XsdDataTypeEnum}.      */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|UriRef
argument_list|,
name|XsdDataTypeEnum
argument_list|>
name|XSD_DATATYPE_VALUE_MAPPING
decl_stmt|;
comment|/**      * Unmodifiable containing all xsd data types that can be converted to      * {@link Text} (without language).      */
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|UriRef
argument_list|>
name|STRING_DATATYPES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|XsdDataTypeEnum
argument_list|>
name|JAVA_OBJECT_XSD_DATATYPE_MAPPING
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|UriRef
argument_list|,
name|XsdDataTypeEnum
argument_list|>
name|dataTypeMappings
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|XsdDataTypeEnum
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|XsdDataTypeEnum
argument_list|>
name|objectMappings
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|XsdDataTypeEnum
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|stringDataTypes
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|stringDataTypes
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//map missing dataTypes to String
for|for
control|(
name|XsdDataTypeEnum
name|mapping
range|:
name|XsdDataTypeEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|UriRef
name|uri
init|=
operator|new
name|UriRef
argument_list|(
name|mapping
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|dataTypeMappings
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapping
operator|.
name|getMappedClass
argument_list|()
operator|!=
literal|null
operator|&&
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mapping
operator|.
name|getMappedClass
argument_list|()
argument_list|)
condition|)
block|{
name|stringDataTypes
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapping
operator|.
name|getMappedClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|objectMappings
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|getMappedClass
argument_list|()
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
name|XSD_DATATYPE_VALUE_MAPPING
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|dataTypeMappings
argument_list|)
expr_stmt|;
name|STRING_DATATYPES
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|stringDataTypes
argument_list|)
expr_stmt|;
name|JAVA_OBJECT_XSD_DATATYPE_MAPPING
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|objectMappings
argument_list|)
expr_stmt|;
block|}
comment|//    private static final Logger log = LoggerFactory.getLogger(RdfResourceUtils.class);
specifier|private
specifier|static
specifier|final
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * Creates a {@link Language} instance based on the parsed language string.      *      * @param lang the language (<code>null</code> is supported)      * @return the {@link Language} or<code>null</code> if<code>null</code>      * was parsed as language.      */
specifier|public
specifier|static
name|Language
name|getLanguage
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
specifier|final
name|Language
name|parsedLanguage
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
name|lang
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parsedLanguage
operator|=
operator|new
name|Language
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parsedLanguage
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|parsedLanguage
return|;
block|}
comment|/**      * Extracts the literal values for {@link Literal} instances.      *      * @param literals the Iterator holding the literals      * @return The collection with the literal values      */
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getLiteralValues
parameter_list|(
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|literals
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|literals
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Literal
name|act
init|=
name|literals
operator|.
name|next
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|act
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**      * Extracts the literal values for the given list of languages (<code>null</code>      * is supported).      *<p>      * Multiple languages are supported by this method to allow parsing      *<code>null</code> in addition to a language. This is often used by applications      * to search for literals in a given language in addition to literals with no      * defined language.      *<p>      * As a convenience this methods adds literals with a language tag to the      * front of the list and literals with no language tag to the end.      *      * @param literals the iterator over the literals      * @param languages the array of languages (<code>null</code> is supported).      * @return The collection with all the literal values.      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getLiteralValues
parameter_list|(
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|literals
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
name|Set
argument_list|<
name|Language
argument_list|>
name|languageSet
init|=
operator|new
name|HashSet
argument_list|<
name|Language
argument_list|>
argument_list|()
decl_stmt|;
comment|//permits null element!
for|for
control|(
name|String
name|lang
range|:
name|languages
control|)
block|{
name|languageSet
operator|.
name|add
argument_list|(
name|getLanguage
argument_list|(
name|lang
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|containsNull
init|=
name|languageSet
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|literals
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Literal
name|act
init|=
name|literals
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|act
operator|instanceof
name|PlainLiteral
condition|)
block|{
name|PlainLiteral
name|pl
init|=
operator|(
name|PlainLiteral
operator|)
name|act
decl_stmt|;
if|if
condition|(
name|languageSet
operator|.
name|contains
argument_list|(
name|pl
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|pl
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
comment|//add to front
block|}
block|}
elseif|else
if|if
condition|(
name|containsNull
condition|)
block|{
comment|//add also all types Literals, because the do not define an language!
name|results
operator|.
name|add
argument_list|(
name|act
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
comment|//append to the end
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**      * Extracts the unicode representation of URIs.      *      * @param uriRefObjects iterator over URIs      * @return the unicode representation      */
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getUriRefValues
parameter_list|(
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|uriRefObjects
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|uriRefObjects
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|uriRefObjects
operator|.
name|next
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**      * Creates a {@link PlainLiteral} for the given literal value and language.      * This method creates an instance of {@link PlainLiteralImpl}.<br>      * TODO: It would be better to use something like the {@link LiteralFactory}      * to create {@link PlainLiteral} instances. However it seams there is no      * such functionality present.      *      * @param literalValue the value of the literal      * @param lang the language of the literal      * @return the Literal      */
specifier|public
specifier|static
name|PlainLiteral
name|createLiteral
parameter_list|(
name|String
name|literalValue
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|Language
name|language
init|=
operator|(
name|lang
operator|!=
literal|null
operator|&&
name|lang
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|new
name|Language
argument_list|(
name|lang
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|PlainLiteralImpl
argument_list|(
name|literalValue
argument_list|,
name|language
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TypedLiteral
name|createLiteral
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
end_class

end_unit

