begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|destination
operator|.
name|solryard
operator|.
name|fst
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FstConfig
block|{
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FstConfig
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexField
decl_stmt|;
specifier|private
specifier|final
name|String
name|storeField
decl_stmt|;
specifier|private
specifier|final
name|String
name|fstName
decl_stmt|;
specifier|private
name|File
name|fstDirectory
decl_stmt|;
comment|/**      * FST corpus configuration      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CorpusCreationInfo
argument_list|>
name|corpusInfos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CorpusCreationInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|FstConfig
parameter_list|(
name|String
name|indexField
parameter_list|)
block|{
name|this
argument_list|(
name|indexField
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FstConfig
parameter_list|(
name|String
name|indexField
parameter_list|,
name|String
name|storeField
parameter_list|)
block|{
name|this
operator|.
name|indexField
operator|=
name|indexField
expr_stmt|;
name|this
operator|.
name|storeField
operator|=
name|storeField
operator|==
literal|null
condition|?
name|indexField
else|:
name|storeField
expr_stmt|;
name|this
operator|.
name|fstName
operator|=
name|getFstFileName
argument_list|(
name|indexField
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFstDirectory
parameter_list|(
name|File
name|fstDirectory
parameter_list|)
block|{
name|this
operator|.
name|fstDirectory
operator|=
name|fstDirectory
expr_stmt|;
block|}
specifier|public
name|File
name|getFstDirectory
parameter_list|()
block|{
return|return
name|fstDirectory
return|;
block|}
specifier|protected
specifier|final
name|CorpusCreationInfo
name|addCorpus
parameter_list|(
name|CorpusCreationInfo
name|corpus
parameter_list|)
block|{
if|if
condition|(
name|corpus
operator|!=
literal|null
condition|)
block|{
return|return
name|corpusInfos
operator|.
name|put
argument_list|(
name|corpus
operator|.
name|language
argument_list|,
name|corpus
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|CorpusCreationInfo
argument_list|>
name|getCorpusCreationInfos
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|corpusInfos
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CorpusCreationInfo
name|getCorpusCreationInfo
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|corpusInfos
operator|.
name|get
argument_list|(
name|language
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|corpusInfos
operator|.
name|containsKey
argument_list|(
name|language
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLanguages
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|corpusInfos
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Inspects the SolrCore to get defined languages for the configured      * {@link #indexField} and {@link #storeField}. Initialises the      * {@link #getCorpusCreationInfos()}      * @param schema the schema of the SolrCore      * @param indexReader the index reader of the SolrCore      */
specifier|public
name|void
name|buildConfig
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|AtomicReader
name|indexReader
parameter_list|)
block|{
name|FieldInfos
name|fieldInfos
init|=
name|indexReader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
comment|//we need this twice
name|String
name|fieldWildcard
init|=
name|encodeLanguage
argument_list|(
name|indexField
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|fieldInfos
control|)
block|{
comment|//try to match the field names against the wildcard
if|if
condition|(
name|FilenameUtils
operator|.
name|wildcardMatch
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|fieldWildcard
argument_list|)
condition|)
block|{
comment|//for matches parse the language from the field name
name|String
name|language
init|=
name|parseLanguage
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|indexField
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
comment|//generate the FST file name
name|StringBuilder
name|fstFileName
init|=
operator|new
name|StringBuilder
argument_list|(
name|fstName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fstFileName
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
name|fstFileName
operator|.
name|append
argument_list|(
literal|".fst"
argument_list|)
expr_stmt|;
name|File
name|fstFile
init|=
operator|new
name|File
argument_list|(
name|fstDirectory
argument_list|,
name|fstFileName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//get the FieldType of the field from the Solr schema
name|FieldType
name|fieldType
init|=
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
comment|//if the fieldType is present
comment|//we need also to check if the stored field with
comment|//the labels is present
comment|//get the stored Field and check if it is present!
name|String
name|storeFieldName
decl_stmt|;
if|if
condition|(
name|storeField
operator|==
literal|null
condition|)
block|{
comment|//storeField == indexField
name|storeFieldName
operator|=
name|fieldInfo
operator|.
name|name
expr_stmt|;
block|}
else|else
block|{
comment|// check that the storeField is present in the index
name|storeFieldName
operator|=
name|encodeLanguage
argument_list|(
name|storeField
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|FieldInfo
name|storedFieldInfos
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|storeFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedFieldInfos
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} because Stored Field {} "
operator|+
literal|"for IndexField {} does not exist! "
argument_list|,
operator|new
name|Object
index|[]
block|{
name|language
block|,
name|storeFieldName
block|,
name|fieldInfo
operator|.
name|name
block|}
argument_list|)
expr_stmt|;
name|storeFieldName
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|storeFieldName
operator|!=
literal|null
condition|)
block|{
comment|// == valid configuration
name|CorpusCreationInfo
name|fstInfo
init|=
operator|new
name|CorpusCreationInfo
argument_list|(
name|language
argument_list|,
name|fieldInfo
operator|.
name|name
argument_list|,
name|storeFieldName
argument_list|,
name|fieldType
argument_list|,
name|fstFile
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... init {} "
argument_list|,
name|fstInfo
argument_list|)
expr_stmt|;
name|addCorpus
argument_list|(
name|fstInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" ... ignore language {} becuase unknown fieldtype "
operator|+
literal|"for SolrFied {}"
argument_list|,
name|language
argument_list|,
name|fieldInfo
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else the field matched the wildcard, but has not passed the
comment|//encoding test.
block|}
comment|//Solr field does not match the field definition in the config
block|}
comment|// end iterate over all fields in the SolrIndex
block|}
specifier|protected
specifier|static
name|String
name|encodeLanguage
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|String
name|parseLanguage
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|int
name|atIndex
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
name|int
name|slashIndex
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
comment|//expect @{lang}/{field}/
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
name|field
argument_list|,
name|slashIndex
argument_list|)
operator|!=
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|-
name|field
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|//no match
block|}
if|if
condition|(
name|atIndex
operator|==
literal|0
operator|&&
name|slashIndex
operator|>
literal|0
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|slashIndex
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|//no match
block|}
block|}
comment|/**      * Getter for the default FST file name based on the configured field      * name. This method returns the '<code>{name}</code>' part of the      * '<code>{name}.{lang}.fst</code>' name.      * @param fstFieldName the field name.      * @return the '<code>{name}</code>' part of the'<code>{name}.{lang}.fst</code>' name      */
specifier|protected
specifier|static
name|String
name|getFstFileName
parameter_list|(
specifier|final
name|String
name|fstFieldName
parameter_list|)
block|{
name|String
name|fstName
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isAlphanumeric
argument_list|(
name|fstFieldName
argument_list|)
condition|)
block|{
name|StringBuilder
name|escaped
init|=
operator|new
name|StringBuilder
argument_list|(
name|fstFieldName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fstFieldName
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|codepoint
init|=
name|fstFieldName
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|codepoint
argument_list|)
condition|)
block|{
name|escaped
operator|.
name|appendCodePoint
argument_list|(
name|codepoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|escaped
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
block|}
name|fstName
operator|=
name|escaped
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fstName
operator|=
name|fstFieldName
expr_stmt|;
block|}
return|return
name|fstName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"FSTConfig[index: "
argument_list|)
operator|.
name|append
argument_list|(
name|indexField
argument_list|)
operator|.
name|append
argument_list|(
literal|" | store: "
argument_list|)
operator|.
name|append
argument_list|(
name|storeField
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

