begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|destination
operator|.
name|solryard
operator|.
name|fst
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_comment
comment|/**  * Holds the information required to build an FST corpus for a given language  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|CorpusCreationInfo
block|{
comment|/**      * The language      */
specifier|public
specifier|final
name|String
name|language
decl_stmt|;
comment|/**      * The Corpus FST      */
specifier|public
specifier|final
name|File
name|fst
decl_stmt|;
comment|/**      * The Solr field used for FST indexing (already encoded)      */
specifier|public
specifier|final
name|String
name|indexedField
decl_stmt|;
comment|/**      * The Solr stored field holding the labels indexed in the FST corpus       */
specifier|public
specifier|final
name|String
name|storedField
decl_stmt|;
comment|/**      * TODO: partial matches are currently deactivated      */
specifier|public
specifier|final
name|boolean
name|partialMatches
init|=
literal|false
decl_stmt|;
comment|/**      * The Solr {@link Analyzer} used for the field      */
specifier|public
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
comment|/**       * @param language      * @param indexField      * @param analyzer      * @param fst      * @param allowCreation      */
specifier|protected
name|CorpusCreationInfo
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|indexField
parameter_list|,
name|String
name|storeField
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|File
name|fst
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
name|this
operator|.
name|indexedField
operator|=
name|indexField
expr_stmt|;
name|this
operator|.
name|storedField
operator|=
name|storeField
expr_stmt|;
name|this
operator|.
name|fst
operator|=
name|fst
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|fieldType
operator|.
name|getAnalyzer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"FST Info[language: "
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexedField
operator|.
name|equals
argument_list|(
name|storedField
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | field: "
argument_list|)
operator|.
name|append
argument_list|(
name|indexedField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | fields(index:"
argument_list|)
operator|.
name|append
argument_list|(
name|indexedField
argument_list|)
operator|.
name|append
argument_list|(
literal|", stored:"
argument_list|)
operator|.
name|append
argument_list|(
name|storedField
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" | file: "
argument_list|)
operator|.
name|append
argument_list|(
name|fst
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"(exists: "
argument_list|)
operator|.
name|append
argument_list|(
name|fst
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|indexedField
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|CorpusCreationInfo
operator|&&
operator|(
operator|(
name|CorpusCreationInfo
operator|)
name|obj
operator|)
operator|.
name|indexedField
operator|.
name|equals
argument_list|(
name|indexedField
argument_list|)
operator|&&
operator|(
operator|(
name|CorpusCreationInfo
operator|)
name|obj
operator|)
operator|.
name|storedField
operator|.
name|equals
argument_list|(
name|storedField
argument_list|)
operator|&&
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|language
argument_list|,
name|language
argument_list|)
return|;
block|}
block|}
end_class

end_unit

