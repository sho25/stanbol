begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|destination
operator|.
name|solryard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|site
operator|.
name|CacheUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|IndexingDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|SolrDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SolrYardIndexingDestination
implements|implements
name|IndexingDestination
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrYardIndexingDestination
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Parameter used to refer to the name of the properties file containing the      * field names as key and the {@link Float} boost factors as values. As      * default no boosts will be used for indexing.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_FIELD_BOOST_CONFIG
init|=
literal|"boosts"
decl_stmt|;
comment|/**      * Parameter used to explicitly set the name of the creates SolrYard      * configuration. The default value will be set to the name of the dataSet      * and adding "Index" to the end.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_YARD_NAME
init|=
literal|"name"
decl_stmt|;
comment|/**      * Parameter used to explicitly set the name of the created Solr Index. The      * default will be set to the name of the dataset to be indexed as returned      * by {@link IndexingConfig#getName()}.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SOLR_INDEX_NAME
init|=
literal|"indexName"
decl_stmt|;
comment|/**      * Parameter used to set the name of the directory used as root for the       * SolrIndex. The value is relative to the       * {@link IndexingConfig#getDestinationFolder()}. The default value is      * {@link #DEFAULT_SOLR_INDEX_DIRECTORY}      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SOLR_INDEX_DIRECTORY
init|=
literal|"solrDir"
decl_stmt|;
comment|/**      * Parameter used to specify the name of the directory relative to the      * {@link IndexingConfig#getConfigFolder()} that contains the      * Solr configuration used for indexing. The default is that the config is      * searches under a folder with the name proveded by      * {@link #PARAM_SOLR_INDEX_NAME} (that defaults to      * {@link IndexingConfig#getName()}).<p>      * However note that when this parameter is missing this configuration is       * optional (meaning that if it is not found the      * default Solr Configuration is used). When this parameter is used, than      * the configuration is required and an {@link IllegalArgumentException} is      * thrown it not found.<p>      * To use the default, but marking the configuration as required one can      * add this parameter without a value.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SOLR_CONFIG
init|=
literal|"solrConf"
decl_stmt|;
comment|/**      * The default value for the directory holding the Solr index set to      * {@link SolrDirectoryManager#DEFAULT_SOLR_DATA_DIR}      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SOLR_INDEX_DIRECTORY
init|=
name|SolrDirectoryManager
operator|.
name|DEFAULT_SOLR_DATA_DIR
decl_stmt|;
comment|/**      * The field used to boost documents while indexing. This is set to      * {@link RdfResourceEnum#signRank}      */
specifier|public
specifier|static
specifier|final
name|String
name|DOCUMENT_BOOST_FIELD
init|=
name|RdfResourceEnum
operator|.
name|signRank
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The extension of the distribution file      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_INDEX_ARCHIVE_EXTENSION
init|=
literal|".solrindex.zip"
decl_stmt|;
comment|/**      * The extension of the solrIndex reference file      */
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_INDEX_ARCHIVE_REF_EXTENSION
init|=
literal|".solrindex.ref"
decl_stmt|;
comment|/**      * The location of the SolrIndex. This MUST BE an absolute Path in case it       * refers to a directory of the local file system and<code>null</code> in      * case an external SolrServer is used.      * Also NOTE that this can be an different value than returned by calling      * {@link SolrYardConfig#getSolrServerLocation()} on {@link #solrIndexConfig}      */
specifier|private
name|File
name|solrIndexLocation
decl_stmt|;
comment|/**      * The directory used in case an embedded Solr server is used. This value      * is also available by the System property with the name      * {@link SolrDirectoryManager#MANAGED_SOLR_DIR_PROPERTY}      */
specifier|private
name|File
name|managedSolrDir
decl_stmt|;
comment|/**      * Directory holding the specialised Solr configuration or<code>null</code>      * if the default configuration should be used      */
specifier|private
name|File
name|solrIndexConfig
decl_stmt|;
comment|/**      * The configuration used to instantiate the {@link SolrYard} returned by      * {@link #getYard()}.      */
specifier|private
name|SolrYardConfig
name|solrYardConfig
decl_stmt|;
specifier|private
name|SolrYard
name|solrYard
decl_stmt|;
comment|/**      * File used to write the ZIP archive containing the solr index.      */
specifier|private
name|File
name|solrArchive
decl_stmt|;
comment|/**      * File used to write the properties file that refers to {@link #solrArchive}.      * This is typically included in distributions of huge indexes and will      * request the user to download the archive with the actual data.      */
specifier|private
name|File
name|solrArchiveRef
decl_stmt|;
comment|/**      * This provides metadata about what fields and languages are indexed in the      * created SolrIndex.      */
specifier|private
name|Collection
argument_list|<
name|FieldMapping
argument_list|>
name|indexFieldConfiguration
decl_stmt|;
comment|/**      * This Constructor relays on a subsequent call to       * {@link #setConfiguration(Map)} to parse the required configuration      */
specifier|public
name|SolrYardIndexingDestination
parameter_list|()
block|{              }
comment|/**      * Constructs an SolrYard based IndexingTarget based on the parsed parameters      * @param yardName the name of the SolrYard      * @param solrLocation the location of the SolrYard      */
specifier|public
name|SolrYardIndexingDestination
parameter_list|(
name|String
name|yardName
parameter_list|,
name|String
name|solrLocation
parameter_list|)
block|{
name|this
argument_list|(
name|yardName
argument_list|,
name|solrLocation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an SolrYard based IndexingTarget based on the parsed parameters      * @param yardName the name of the SolrYard      * @param parsedSolrLocation the location of the SolrYard      * @param solrConfig directory holding the Solr schema used for the indexing or       *<code>null</code> to use the default      * @param indexFieldConfig The field and languages indexed in this index      * @param fieldBoostMap A map containing field names as key and boost factors      * as values. Parse<code>null</code> to use no boosts.      */
specifier|public
name|SolrYardIndexingDestination
parameter_list|(
specifier|final
name|String
name|yardName
parameter_list|,
specifier|final
name|String
name|parsedSolrLocation
parameter_list|,
specifier|final
name|String
name|solrConfig
parameter_list|,
name|Collection
argument_list|<
name|FieldMapping
argument_list|>
name|indexFieldConfig
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldBoostMap
parameter_list|)
block|{
if|if
condition|(
name|yardName
operator|==
literal|null
operator|||
name|yardName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tha name of the Yard MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parsedSolrLocation
operator|==
literal|null
operator|||
name|parsedSolrLocation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tha parsed Solr location MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexFieldConfiguration
operator|=
name|indexFieldConfig
expr_stmt|;
name|this
operator|.
name|solrYardConfig
operator|=
name|createSolrYardConfig
argument_list|(
name|yardName
argument_list|,
name|parsedSolrLocation
argument_list|)
expr_stmt|;
comment|//init the manages solr directory relative to the working directory
name|File
name|managedDirectory
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|,
name|DEFAULT_SOLR_INDEX_DIRECTORY
argument_list|)
decl_stmt|;
name|File
name|distDirectory
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|,
literal|"dist"
argument_list|)
decl_stmt|;
comment|//init the solr directory and validate the parsed values
name|File
index|[]
name|solrDirectories
init|=
name|initSolrDirectories
argument_list|(
name|parsedSolrLocation
argument_list|,
name|solrConfig
argument_list|,
name|managedDirectory
argument_list|,
name|distDirectory
argument_list|)
decl_stmt|;
name|this
operator|.
name|solrIndexLocation
operator|=
name|solrDirectories
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|solrIndexConfig
operator|=
name|solrDirectories
index|[
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|solrArchive
operator|=
name|solrDirectories
index|[
literal|2
index|]
expr_stmt|;
name|this
operator|.
name|solrArchiveRef
operator|=
name|solrDirectories
index|[
literal|3
index|]
expr_stmt|;
comment|//set Boost related stuff
name|solrYardConfig
operator|.
name|setDocumentBoostFieldName
argument_list|(
name|DOCUMENT_BOOST_FIELD
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldBoostMap
operator|!=
literal|null
condition|)
block|{
name|solrYardConfig
operator|.
name|setFieldBoosts
argument_list|(
name|fieldBoostMap
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Processes the parsed solr index location (may be an URL, an absolute path      * or a relative one) and the optional solr schema configuration (only valid      * in case an relative path was parsed as location) and does all the      * initialisation work (including to set the       * {@link SolrDirectoryManager#MANAGED_SOLR_DIR_PROPERTY} system property)      * @param parsedSolrLocation the parsed location of the SolrServer (may be       * an URL, an absolute path or a relative one)      * @param solrConfig the path to the directory holding the configuration      * for the Solr index used for the indexing or<code>null</code> to use the      * default (only supported in case parsedSolrLocation is a relative path)      * @param managedDirectory the directory used to manage the Solr index (only      * needed in case parsedSolrLocation is an      * @return An array with the length 4 where index<ul>      *<li>"0" contains the File pointing to the directory holding the       * index on the local file system      *<li>"1" contains the File pointing to the directory containing the      * configuration used to initialise the index.      *<li>"2" contains the File used to create the compressed ZIP archive with      * the indexed data      *<li>"3" contains the File used to create the properties file used to link      * to the Solr index archive.      *       * All files will be<code>null</code> if the values are not applicable to       * the current configuration.      */
specifier|private
name|File
index|[]
name|initSolrDirectories
parameter_list|(
specifier|final
name|String
name|parsedSolrLocation
parameter_list|,
specifier|final
name|String
name|solrConfig
parameter_list|,
name|File
name|managedDirectory
parameter_list|,
name|File
name|distDirectory
parameter_list|)
block|{
name|File
name|solrIndexLocation
decl_stmt|;
name|File
name|solrConfigLocation
decl_stmt|;
name|File
name|solrIndexArchive
decl_stmt|;
name|File
name|solrIndexArchiveRef
decl_stmt|;
comment|//set the SolrLocation and init the SolrDirectoryManager system property
comment|//in case the solrLocation is not an remote SolrServer
if|if
condition|(
name|parsedSolrLocation
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
operator|&&
name|parsedSolrLocation
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//matches http[s]://{host}
name|solrIndexLocation
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|solrConfig
operator|!=
literal|null
condition|)
block|{
comment|//rather throw an error as indexing for some hours to an index
comment|//with the wrong schema!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Parsing special Solr Configurations (directory=%s) is not "
operator|+
literal|"supported for remote SolrServer (url=%s"
argument_list|,
name|parsedSolrLocation
argument_list|,
name|solrConfig
argument_list|)
argument_list|)
throw|;
block|}
name|solrConfigLocation
operator|=
literal|null
expr_stmt|;
comment|//no configuration supported
name|solrIndexArchive
operator|=
literal|null
expr_stmt|;
name|solrIndexArchiveRef
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// local Directory
name|File
name|parsedSolrLocationFile
init|=
operator|new
name|File
argument_list|(
name|parsedSolrLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsedSolrLocationFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|//if not absolute
comment|//-> assume an already configured Solr index
if|if
condition|(
name|distDirectory
operator|==
literal|null
condition|)
block|{
comment|//check that a dist dir is configured
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"In case the Solr index location"
operator|+
literal|"points to a local directory the Distribution Directory"
operator|+
literal|"MUST NOT BE NULL!"
argument_list|)
throw|;
block|}
name|solrIndexLocation
operator|=
name|parsedSolrLocationFile
expr_stmt|;
if|if
condition|(
name|solrConfig
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Parsing special Solr Configurations (directory=%s) is not "
operator|+
literal|"supported for Embedded SolrServer configured via an absolute"
operator|+
literal|"file path (path=%s"
argument_list|,
name|parsedSolrLocation
argument_list|,
name|solrConfig
argument_list|)
argument_list|)
throw|;
block|}
name|solrConfigLocation
operator|=
literal|null
expr_stmt|;
comment|//no solr conf supported
block|}
else|else
block|{
comment|//relative path -> init the Solr directory
comment|//set the managed directory
if|if
condition|(
name|managedDirectory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"In case the Solr index location"
operator|+
literal|"is a relative path the parsed managed directory MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|SolrDirectoryManager
operator|.
name|MANAGED_SOLR_DIR_PROPERTY
argument_list|,
name|managedDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//add the name of the core and save it to solrLocation
name|solrIndexLocation
operator|=
operator|new
name|File
argument_list|(
name|managedDirectory
argument_list|,
name|parsedSolrLocation
argument_list|)
expr_stmt|;
comment|//check if there is a special SolrLocation
if|if
condition|(
name|solrConfig
operator|!=
literal|null
condition|)
block|{
name|solrConfigLocation
operator|=
operator|new
name|File
argument_list|(
name|solrConfig
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|solrConfigLocation
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Solr Configuration "
operator|+
name|solrConfigLocation
operator|+
literal|" does not exist or is not an direcotry!"
argument_list|)
throw|;
block|}
comment|//else the directory exists ...
comment|//lets assume it is a valid configuration
comment|//otherwise an exception will be thrown in initialise().
block|}
else|else
block|{
name|solrConfigLocation
operator|=
literal|null
expr_stmt|;
comment|//no configuration parsed
block|}
block|}
comment|//for all local indexes configure the distribution file names
if|if
condition|(
operator|!
name|distDirectory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|distDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create distribution "
operator|+
literal|"Directory"
operator|+
name|distDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|solrIndexArchive
operator|=
operator|new
name|File
argument_list|(
name|distDirectory
argument_list|,
name|solrIndexLocation
operator|.
name|getName
argument_list|()
operator|+
name|SOLR_INDEX_ARCHIVE_EXTENSION
argument_list|)
expr_stmt|;
name|solrIndexArchiveRef
operator|=
operator|new
name|File
argument_list|(
name|distDirectory
argument_list|,
name|solrIndexLocation
operator|.
name|getName
argument_list|()
operator|+
name|SOLR_INDEX_ARCHIVE_REF_EXTENSION
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
index|[]
block|{
name|solrIndexLocation
block|,
name|solrConfigLocation
block|,
name|solrIndexArchive
block|,
name|solrIndexArchiveRef
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
name|String
name|yardName
decl_stmt|;
comment|//read the Yard name configuration
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_YARD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|yardName
operator|=
name|indexingConfig
operator|.
name|getName
argument_list|()
operator|+
literal|"Index"
expr_stmt|;
block|}
else|else
block|{
name|yardName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//read the Solr index name configuration
name|String
name|indexName
decl_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_SOLR_INDEX_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexName
operator|=
name|indexingConfig
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|indexName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|solrYardConfig
operator|=
name|createSolrYardConfig
argument_list|(
name|yardName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrYardConfig
operator|.
name|setName
argument_list|(
literal|"SolrIndex for "
operator|+
name|indexingConfig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//set the Index Field Configuration
name|this
operator|.
name|indexFieldConfiguration
operator|=
name|indexingConfig
operator|.
name|getIndexFieldConfiguration
argument_list|()
expr_stmt|;
comment|//set a description for the yard
if|if
condition|(
name|indexingConfig
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//reuse the description
name|solrYardConfig
operator|.
name|setDescription
argument_list|(
name|indexingConfig
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solrYardConfig
operator|.
name|setDescription
argument_list|(
literal|"SolrYard based Index for "
operator|+
name|indexingConfig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//get the directors holding the solr configuration
name|String
name|solrConfig
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
name|PARAM_SOLR_CONFIG
argument_list|)
condition|)
block|{
comment|//not present -> allow default
name|File
name|configDir
init|=
name|indexingConfig
operator|.
name|getConfigFile
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"use default Solr index configuration for index "
operator|+
name|indexName
argument_list|)
expr_stmt|;
name|solrConfig
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|solrConfig
operator|=
name|configDir
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//require the config
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_SOLR_CONFIG
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|=
name|indexName
expr_stmt|;
comment|//use the indexName as default
block|}
name|File
name|configDir
init|=
name|indexingConfig
operator|.
name|getConfigFile
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required Solr Configuration "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|" not found within the config directory "
operator|+
name|indexingConfig
operator|.
name|getConfigFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|solrConfig
operator|=
name|configDir
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
block|}
comment|//init the managed directory within the destination folder
comment|//read the Solr directory configuration
name|String
name|solrDir
decl_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_SOLR_INDEX_DIRECTORY
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|solrDir
operator|=
name|DEFAULT_SOLR_INDEX_DIRECTORY
expr_stmt|;
block|}
else|else
block|{
name|solrDir
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|File
name|managedDirectory
init|=
operator|new
name|File
argument_list|(
name|indexingConfig
operator|.
name|getDestinationFolder
argument_list|()
argument_list|,
name|solrDir
argument_list|)
decl_stmt|;
name|File
index|[]
name|solrDirectories
init|=
name|initSolrDirectories
argument_list|(
name|indexName
argument_list|,
name|solrConfig
argument_list|,
name|managedDirectory
argument_list|,
name|indexingConfig
operator|.
name|getDistributionFolder
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|solrIndexLocation
operator|=
name|solrDirectories
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|solrIndexConfig
operator|=
name|solrDirectories
index|[
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|solrArchive
operator|=
name|solrDirectories
index|[
literal|2
index|]
expr_stmt|;
name|this
operator|.
name|solrArchiveRef
operator|=
name|solrDirectories
index|[
literal|3
index|]
expr_stmt|;
comment|//init other configurations
name|solrYardConfig
operator|.
name|setDocumentBoostFieldName
argument_list|(
name|DOCUMENT_BOOST_FIELD
argument_list|)
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_FIELD_BOOST_CONFIG
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldBoosts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
comment|//load this configuration as required if set to cause an Exception
comment|//if not found! -> an exception is the better option as creating an
comment|//index with missing Field Boosts!
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|indexingConfig
operator|.
name|getConfig
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|fieldBoosts
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//throw exception for any invalid entry!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse Field Boost entry from field {} and boost {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|solrYardConfig
operator|.
name|setFieldBoosts
argument_list|(
name|fieldBoosts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a {@link SolrYardConfig} and initialised it to used single Yard      * Layout, lazy commits and a commitWithin duration of an minute      * @param yardName the name of the yard      * @param indexName the name of the index      */
specifier|private
name|SolrYardConfig
name|createSolrYardConfig
parameter_list|(
name|String
name|yardName
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|SolrYardConfig
name|solrYardConfig
init|=
operator|new
name|SolrYardConfig
argument_list|(
name|yardName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
name|solrYardConfig
operator|.
name|setMultiYardIndexLayout
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|//use the lazy commit feature
name|solrYardConfig
operator|.
name|setImmediateCommit
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|solrYardConfig
operator|.
name|setCommitWithinDuration
argument_list|(
literal|1000
operator|*
literal|60
argument_list|)
expr_stmt|;
comment|//one minute
return|return
name|solrYardConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
comment|//The constructors and the setConfiguration(..) only validate the parsed
comment|//parameters and initialise the member variables. This method performs
comment|//the the actual initialisation of the SolrYard!
comment|//copy a custom configuration (if present)
if|if
condition|(
name|solrIndexConfig
operator|!=
literal|null
condition|)
block|{
comment|//can only be != null if also solrIndexLocation
comment|//copy the configuration
try|try
block|{
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|solrIndexConfig
argument_list|,
name|solrIndexLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to copy the Solr index configuration from %s to %s!"
argument_list|,
name|solrIndexConfig
argument_list|,
name|solrIndexLocation
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//disallow the default initialisation
name|solrYardConfig
operator|.
name|setDefaultInitialisation
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//allow the default initialisation
name|solrYardConfig
operator|.
name|setDefaultInitialisation
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|solrYard
operator|=
operator|new
name|SolrYard
argument_list|(
name|solrYardConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to initialise SolrYard "
operator|+
name|solrYardConfig
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Yard
name|getYard
parameter_list|()
block|{
if|if
condition|(
name|solrYard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SolrYard not initialised. Call initialise first!"
argument_list|)
throw|;
block|}
return|return
name|solrYard
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|finalise
parameter_list|()
block|{
comment|//write the indexing configuration
name|FieldMapper
name|mapper
init|=
name|FieldMappingUtils
operator|.
name|createDefaultFieldMapper
argument_list|(
name|indexFieldConfiguration
argument_list|)
decl_stmt|;
try|try
block|{
name|CacheUtils
operator|.
name|storeBaseMappingsConfiguration
argument_list|(
name|solrYard
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to store FieldMapperConfiguration to the Store!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|solrYard
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//zip the index and copy it over to distribution
if|if
condition|(
name|solrArchive
operator|!=
literal|null
condition|)
block|{
comment|//we need to get the length of the parent to calc the entry names for
comment|//the archvie
name|int
name|parentPathLength
init|=
name|solrIndexLocation
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrIndexLocation
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|charAt
argument_list|(
name|parentPathLength
operator|-
literal|1
argument_list|)
operator|!=
name|File
operator|.
name|separatorChar
condition|)
block|{
name|parentPathLength
operator|++
expr_stmt|;
comment|//add the missing '/'
block|}
try|try
block|{
comment|//Moved over to use java.util.zip because Apache commons compression
comment|//seams not support files> 2Gb
name|ZipOutputStream
name|out
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|solrArchive
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
operator|(
name|Collection
argument_list|<
name|File
argument_list|>
operator|)
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|solrIndexLocation
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isHidden
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|substring
argument_list|(
name|parentPathLength
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"add "
operator|+
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|FileInputStream
name|fileIn
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|fileIn
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fileIn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|finish
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while creating Solr Archive "
operator|+
name|solrArchive
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"! The archive will not be created!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"As a Workaround you can manually create the Solr Archive "
operator|+
literal|"by creating a ZIP archive with the contents of the Folder "
operator|+
name|solrIndexLocation
operator|+
literal|"!"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|solrArchiveRef
operator|!=
literal|null
condition|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Index-Archive"
argument_list|,
name|solrArchive
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Name"
argument_list|,
name|solrYardConfig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrYardConfig
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Description"
argument_list|,
name|solrYardConfig
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|properties
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|solrArchiveRef
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while creating Solr Archive Reference "
operator|+
name|solrArchiveRef
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"! The file will not be created!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"As a Workaround you can manually create this text file "
operator|+
literal|"and adding \"Index-Archive="
operator|+
name|solrArchive
operator|.
name|getName
argument_list|()
operator|+
literal|"\"!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//nothing todo
block|}
block|}
end_class

end_unit

