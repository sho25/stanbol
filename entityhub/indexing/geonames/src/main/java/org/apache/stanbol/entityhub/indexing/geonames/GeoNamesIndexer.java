begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|site
operator|.
name|CacheUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|FeatureName
operator|.
name|NameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|GeoNamesIndexer
block|{
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|fieldMappings
decl_stmt|;
static|static
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|mappings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//While indexing I use the UTF8 name as RDFS label (ASKII as fallback).
comment|//THis should be also the case for updated documents
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_name
operator|.
name|toString
argument_list|()
operator|+
literal|"> "
operator|+
name|Properties
operator|.
name|rdfs_label
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_alternateName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_countryCode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_featureClass
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_featureCode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_officialName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//This cache copies the values of the sub-properties of parentFeature
comment|//to the super property. So we need to write the according mappings
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM1
operator|.
name|toString
argument_list|()
operator|+
literal|"> "
operator|+
name|Properties
operator|.
name|gn_parentFeature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM2
operator|.
name|toString
argument_list|()
operator|+
literal|"> "
operator|+
name|Properties
operator|.
name|gn_parentFeature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM3
operator|.
name|toString
argument_list|()
operator|+
literal|"> "
operator|+
name|Properties
operator|.
name|gn_parentFeature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM4
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentADM4
operator|.
name|toString
argument_list|()
operator|+
literal|"> "
operator|+
name|Properties
operator|.
name|gn_parentFeature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentCountry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentCountry
operator|.
name|toString
argument_list|()
operator|+
literal|"> "
operator|+
name|Properties
operator|.
name|gn_parentFeature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentFeature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//population is converted to long (NOTE: population of Asia> Integer.MAX_VALUE)
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_population
operator|.
name|toString
argument_list|()
operator|+
literal|" | d=xsd:long"
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_postalCode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_shortName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_wikipediaArticle
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Altitude is integer meters
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|geo_alt
operator|.
name|toString
argument_list|()
operator|+
literal|" | d=xsd:int"
argument_list|)
expr_stmt|;
comment|// Latitude and Longitude as BigDecimals (xsd:decimal)
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|geo_lat
operator|.
name|toString
argument_list|()
operator|+
literal|" | d=xsd:decimal"
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|geo_long
operator|.
name|toString
argument_list|()
operator|+
literal|" | d=xsd:decimal"
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|rdf_type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
name|mappings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|mappings
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GeoNamesIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Yard
name|yard
decl_stmt|;
specifier|private
name|ValueFactory
name|vf
decl_stmt|;
specifier|private
name|boolean
name|indexOntology
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|startPosition
decl_stmt|;
specifier|private
name|int
name|indexingChunkSize
init|=
literal|1000
decl_stmt|;
specifier|private
name|File
name|dataDir
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|//TODO implement indexing of Ontology
specifier|private
name|File
name|geonamesOntFile
decl_stmt|;
specifier|private
name|File
name|alternateNamesFile
decl_stmt|;
specifier|private
name|File
name|hierarchyFile
decl_stmt|;
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|adminCodesFiles
decl_stmt|;
specifier|private
name|File
name|countryInfoFile
decl_stmt|;
specifier|private
specifier|final
name|int
name|countryGeonamesIdPos
init|=
literal|17
decl_stmt|;
specifier|private
name|File
name|geonamesArchiveFile
decl_stmt|;
comment|//private final String geonamesOntBase = "http://www.geonames.org/ontology/";
specifier|private
specifier|final
name|String
name|geonamesFeatureBase
init|=
literal|"http://sws.geonames.org/"
decl_stmt|;
comment|//private final String geonamesCountryBase = "http://www.geonames.org/countries/";
comment|//for date processing we use joda time!
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|FeatureName
argument_list|>
argument_list|>
name|featureNames
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|FeatureName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|adminCode2featureId
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|parentFeature
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|adminParentFeature
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|countryCode2featureId
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Key used to parse the Yard used for indexing      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_YARD
init|=
literal|"org.apache.stanbol.entityhub.indexing.yard"
decl_stmt|;
comment|/**      * Used to parse the ID of the Item to start/resume the indexing      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_START_INDEX
init|=
literal|"org.apache.stanbol.entityhub.indexing.startIndex"
decl_stmt|;
comment|/**      * State used to config if the geonames.org thesaurus should be included in the index.      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_INDEX_ONTOLOGY_STATE
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.indexOntology"
decl_stmt|;
comment|/**      * Key used to configure the directory that contains all the data needed      * for indexing geonames.org      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_DATA_DIR
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.dataDir"
decl_stmt|;
comment|/**      * key used to parse the name of the zip archive with the geonames.org dump.      * Typically the allcountry dump.      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_GEONAMES_ARCHIVE
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.dbdumpArchive"
decl_stmt|;
comment|/**      * Key used to parse the name of the file with the country informations      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_COUNTRY_INFOS
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.countryInfoFile"
decl_stmt|;
comment|/**      * Key used to parse the name of the file with the admin level1 codes      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_ADMIN1_CODES
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.admin1CodesFile"
decl_stmt|;
comment|/**      * Key used to parse the name of the file with the admin level2 codes      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_ADMIN2_CODES
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.admin2CodesFile"
decl_stmt|;
comment|/**      * Key used to parse the name of the file with the alternate names      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_ALTERNATE_NAMES
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.alternateNamesFile"
decl_stmt|;
comment|/**      * Key used to parse the name of the file with the geonames ontology      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_GEONAMES_ONTOLOGY
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.geonamesOntologyFile"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_CHUNK_SIZE
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.chunkSize"
decl_stmt|;
comment|/**      * Key used to parse the hierarchy file      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_HIERARCHY
init|=
literal|"org.apache.stanbol.entityhub.indexing.geonames.hierarchyFile"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Reference
argument_list|>
name|indexDocRefs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Reference
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|Properties
block|{
name|rdf_type
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"type"
argument_list|)
block|,
name|rdfs_label
argument_list|(
name|NamespaceEnum
operator|.
name|rdfs
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"label"
argument_list|)
block|,
name|dc_creator
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"creator"
argument_list|)
block|,
name|dc_date
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"date"
argument_list|)
block|,
name|gn_Feature
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Feature"
argument_list|)
block|,
comment|//gn_Country(NamespaceEnum.geonames.getNamespace(),"Country"),
name|gn_countryCode
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"countryCode"
argument_list|)
block|,
comment|//gn_Map(NamespaceEnum.geonames.getNamespace(),"Map"),
comment|//gn_RDFData(NamespaceEnum.geonames.getNamespace(),"RDFData"),
comment|//gn_WikipediaArticle(NamespaceEnum.geonames.getNamespace(),"WikipediaArticle"),
name|gn_parentFeature
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"parentFeature"
argument_list|)
block|,
name|gn_parentCountry
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"parentCountry"
argument_list|)
block|,
name|gn_parentADM1
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"parentADM1"
argument_list|)
block|,
name|gn_parentADM2
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"parentADM2"
argument_list|)
block|,
name|gn_parentADM3
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"parentADM3"
argument_list|)
block|,
name|gn_parentADM4
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"parentADM4"
argument_list|)
block|,
comment|//gn_childrenFeatures(NamespaceEnum.geonames.getNamespace(),"childrenFeatures"),
comment|//gn_inCountry(NamespaceEnum.geonames.getNamespace(),"inCountry"),
comment|//gn_locatedIn(NamespaceEnum.geonames.getNamespace(),"locatedIn"),
comment|//gn_locationMap(NamespaceEnum.geonames.getNamespace(),"locationMap"),
comment|//gn_nearby(NamespaceEnum.geonames.getNamespace(),"nearby"),
comment|//gn_nearbyFeatures(NamespaceEnum.geonames.getNamespace(),"nearbyFeatures"),
comment|//gn_neighbour(NamespaceEnum.geonames.getNamespace(),"neighbour"),
comment|//gn_neighbouringFeatures(NamespaceEnum.geonames.getNamespace(),"neighbouringFeatures"),
name|gn_wikipediaArticle
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"wikipediaArticle"
argument_list|)
block|,
name|gn_featureClass
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"featureClass"
argument_list|)
block|,
name|gn_featureCode
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"featureCode"
argument_list|)
block|,
comment|//gn_tag(NamespaceEnum.geonames.getNamespace(),"tag"),
name|gn_alternateName
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"alternateName"
argument_list|)
block|,
name|gn_officialName
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"officialName"
argument_list|)
block|,
name|gn_name
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"name"
argument_list|)
block|,
name|gn_population
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"population"
argument_list|)
block|,
name|gn_shortName
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"shortName"
argument_list|)
block|,
name|gn_postalCode
argument_list|(
name|NamespaceEnum
operator|.
name|geonames
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"postalCode"
argument_list|)
block|,
name|geo_lat
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"lat"
argument_list|)
block|,
name|geo_long
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"long"
argument_list|)
block|,
name|geo_alt
argument_list|(
name|NamespaceEnum
operator|.
name|geo
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"alt"
argument_list|)
block|,
name|skos_notation
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"notation"
argument_list|)
block|,
name|skos_prefLabel
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"prefLabel"
argument_list|)
block|,
name|skos_altLabel
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"altLabel"
argument_list|)
block|,
name|skos_hiddenLabel
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"hiddenLabel"
argument_list|)
block|,
name|skos_note
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"note"
argument_list|)
block|,
name|skos_changeNote
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"changeNote"
argument_list|)
block|,
name|skos_definition
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"definition"
argument_list|)
block|,
name|skos_editorialNote
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"editorialNote"
argument_list|)
block|,
name|skos_example
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"example"
argument_list|)
block|,
name|skos_historyNote
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"historyNote"
argument_list|)
block|,
name|skos_scopeNote
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"scopeNote"
argument_list|)
block|,
name|skos_broader
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"broader"
argument_list|)
block|,
name|skos_narrower
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"narrower"
argument_list|)
block|,
name|skos_related
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"related"
argument_list|)
block|,         ;
specifier|private
name|String
name|uri
decl_stmt|;
name|Properties
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|uri
operator|=
name|namespace
operator|+
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
block|}
specifier|public
name|GeoNamesIndexer
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
operator|.
name|yard
operator|=
operator|(
name|Yard
operator|)
name|config
operator|.
name|get
argument_list|(
name|KEY_YARD
argument_list|)
expr_stmt|;
if|if
condition|(
name|yard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed config MUST CONTAIN a Yard. Use the key "
operator|+
name|KEY_YARD
operator|+
literal|" to parse the YardInstance used to store the geonames.org index!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Using Yard %s (id=%s) to index geonames.org"
argument_list|,
name|yard
operator|.
name|getName
argument_list|()
argument_list|,
name|yard
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|vf
operator|=
name|yard
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|Long
name|startIndex
init|=
operator|(
name|Long
operator|)
name|config
operator|.
name|get
argument_list|(
name|KEY_START_INDEX
argument_list|)
decl_stmt|;
if|if
condition|(
name|startIndex
operator|!=
literal|null
operator|&&
name|startIndex
operator|>
literal|0l
condition|)
block|{
name|this
operator|.
name|startPosition
operator|=
name|startIndex
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|startPosition
operator|=
literal|0
expr_stmt|;
block|}
name|Integer
name|chunkSize
init|=
operator|(
name|Integer
operator|)
name|config
operator|.
name|get
argument_list|(
name|KEY_CHUNK_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunkSize
operator|!=
literal|null
operator|&&
name|chunkSize
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|indexingChunkSize
operator|=
name|chunkSize
expr_stmt|;
block|}
comment|//else use default value of 1000
name|log
operator|.
name|info
argument_list|(
literal|" ... start indexing at position "
operator|+
name|startPosition
argument_list|)
expr_stmt|;
name|Boolean
name|indexOntologyState
init|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|get
argument_list|(
name|KEY_INDEX_ONTOLOGY_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOntologyState
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|indexOntology
operator|=
name|indexOntologyState
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|indexOntology
operator|=
literal|false
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|" ... indexing geonames.org thesaurus="
operator|+
name|indexOntologyState
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataDir
operator|=
name|checkFile
argument_list|(
name|KEY_DATA_DIR
argument_list|,
name|config
argument_list|,
literal|"/data"
argument_list|)
expr_stmt|;
name|this
operator|.
name|geonamesArchiveFile
operator|=
name|checkFile
argument_list|(
name|KEY_GEONAMES_ARCHIVE
argument_list|,
name|dataDir
argument_list|,
name|config
argument_list|,
literal|"allCountries.zip"
argument_list|)
expr_stmt|;
name|this
operator|.
name|countryInfoFile
operator|=
name|checkFile
argument_list|(
name|KEY_COUNTRY_INFOS
argument_list|,
name|dataDir
argument_list|,
name|config
argument_list|,
literal|"countryInfo.txt"
argument_list|)
expr_stmt|;
name|this
operator|.
name|adminCodesFiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
expr_stmt|;
name|adminCodesFiles
operator|.
name|add
argument_list|(
name|checkFile
argument_list|(
name|KEY_ADMIN1_CODES
argument_list|,
name|dataDir
argument_list|,
name|config
argument_list|,
literal|"admin1CodesASCII.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|adminCodesFiles
operator|.
name|add
argument_list|(
name|checkFile
argument_list|(
name|KEY_ADMIN2_CODES
argument_list|,
name|dataDir
argument_list|,
name|config
argument_list|,
literal|"admin2Codes.txt"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|indexOntology
condition|)
block|{
name|this
operator|.
name|geonamesOntFile
operator|=
name|checkFile
argument_list|(
name|KEY_GEONAMES_ONTOLOGY
argument_list|,
name|dataDir
argument_list|,
name|config
argument_list|,
literal|"ontology_v2.2.1.rdf"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|hierarchyFile
operator|=
name|checkFile
argument_list|(
name|KEY_HIERARCHY
argument_list|,
name|dataDir
argument_list|,
name|config
argument_list|,
literal|"hierarchy.zip"
argument_list|)
expr_stmt|;
name|this
operator|.
name|alternateNamesFile
operator|=
name|checkFile
argument_list|(
name|KEY_ALTERNATE_NAMES
argument_list|,
name|dataDir
argument_list|,
name|config
argument_list|,
literal|"alternateNames.zip"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the index based on the parsed configuration      * @throws IOException On any error while reading one of the configuration files      * @throws YardException On any error while storing index features within the Yard      */
specifier|public
name|void
name|index
parameter_list|()
throws|throws
name|IOException
throws|,
name|YardException
block|{
name|readAdminCodes
argument_list|()
expr_stmt|;
name|readHierarchy
argument_list|()
expr_stmt|;
name|readAlternateNames
argument_list|()
expr_stmt|;
name|indexGeonames
argument_list|()
expr_stmt|;
name|writeCacheBaseConfiguration
argument_list|()
expr_stmt|;
block|}
comment|/**      * As the last step we need to create the baseMappings configuration      * needed to used the Index as Entityhub full cache!      * @throws YardException would be really bad if after successfully indexing      * about 8 millions of documents we get an error from the yard at the      * last possible opportunity :(      */
specifier|private
name|void
name|writeCacheBaseConfiguration
parameter_list|()
throws|throws
name|YardException
block|{
name|FieldMapper
name|baseMapper
init|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getInstance
argument_list|(
name|vf
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Write BaseMappings for geonames.org Cache"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"> Mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mapping
range|:
name|GeoNamesIndexer
operator|.
name|fieldMappings
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    - "
operator|+
name|mapping
argument_list|)
expr_stmt|;
name|baseMapper
operator|.
name|addMapping
argument_list|(
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CacheUtils
operator|.
name|storeBaseMappingsConfiguration
argument_list|(
name|yard
argument_list|,
name|baseMapper
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"< completed"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param config      */
specifier|private
name|File
name|checkFile
parameter_list|(
name|String
name|key
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
return|return
name|checkFile
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|private
name|File
name|checkFile
parameter_list|(
name|String
name|key
parameter_list|,
name|File
name|directory
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
name|File
name|testFile
decl_stmt|;
name|Object
name|fileName
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed Config MUST CONTAIN the a reference to the file for key "
operator|+
name|key
operator|+
literal|"!"
argument_list|)
throw|;
block|}
else|else
block|{
name|fileName
operator|=
name|defaultValue
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
block|{
name|testFile
operator|=
operator|new
name|File
argument_list|(
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testFile
operator|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|testFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"File "
operator|+
name|fileName
operator|+
literal|" parsed by key "
operator|+
name|key
operator|+
literal|" does not exist!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|directory
operator|==
literal|null
operator|&&
operator|!
name|testFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"parsed data directory "
operator|+
name|fileName
operator|+
literal|" exists, but is not a directory!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|directory
operator|!=
literal|null
operator|&&
operator|!
name|testFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"parsed data file "
operator|+
name|fileName
operator|+
literal|" exists, but is not a file!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|testFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read File "
operator|+
name|fileName
operator|+
literal|" parsed for key "
operator|+
name|key
operator|+
literal|"!"
argument_list|)
throw|;
block|}
return|return
name|testFile
return|;
block|}
specifier|private
name|void
name|indexGeonames
parameter_list|()
throws|throws
name|YardException
throws|,
name|IOException
block|{
name|ZipFile
name|geonamesZipFile
decl_stmt|;
try|try
block|{
name|geonamesZipFile
operator|=
operator|new
name|ZipFile
argument_list|(
name|geonamesArchiveFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//in the init we check if this is a file, exists and we can read ...
comment|// .. so throw a runtime exception here!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to access geonames.org DB Dump file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|geonamesZipFile
operator|.
name|entries
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ZipEntry
name|entry
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"readme"
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"add Entry "
operator|+
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|geonamesZipFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|blockPos
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Representation
argument_list|>
name|currentBlock
init|=
operator|new
name|ArrayList
argument_list|<
name|Representation
argument_list|>
argument_list|(
name|indexingChunkSize
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|iStart
init|=
name|start
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|startPosition
condition|)
block|{
try|try
block|{
name|Representation
name|indexedFeature
init|=
name|importFeature
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|//log.info(ModelUtils.getRepresentationInfo(indexedFeature));
name|blockPos
operator|++
expr_stmt|;
name|currentBlock
operator|.
name|add
argument_list|(
name|indexedFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockPos
operator|==
name|indexingChunkSize
condition|)
block|{
name|yard
operator|.
name|store
argument_list|(
name|currentBlock
argument_list|)
expr_stmt|;
name|currentBlock
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blockPos
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception while processing line "
operator|+
name|line
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"YardException while processing lines "
operator|+
operator|(
name|pos
operator|-
name|blockPos
operator|)
operator|+
literal|"-"
operator|+
operator|(
name|pos
operator|)
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|pos
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|mean
init|=
operator|(
call|(
name|float
call|)
argument_list|(
name|now
operator|-
name|start
argument_list|)
operator|)
operator|/
operator|(
name|pos
operator|-
name|startPosition
operator|)
decl_stmt|;
name|float
name|iMean
init|=
operator|(
call|(
name|float
call|)
argument_list|(
name|now
operator|-
name|iStart
argument_list|)
operator|)
operator|/
literal|10000
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|pos
operator|+
literal|" features processed ("
operator|+
name|mean
operator|+
literal|"ms/feature; "
operator|+
name|iMean
operator|+
literal|"ms/feature for the last 10000 features"
argument_list|)
expr_stmt|;
name|iStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//remove alternate labels from the inMemoryMap for the ID to save memory
name|Integer
name|id
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|featureNames
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|//indexing the remaining documents
name|yard
operator|.
name|store
argument_list|(
name|currentBlock
argument_list|)
expr_stmt|;
name|currentBlock
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blockPos
operator|=
literal|0
expr_stmt|;
comment|//the final commit
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|mean
init|=
operator|(
call|(
name|float
call|)
argument_list|(
name|now
operator|-
name|start
argument_list|)
operator|)
operator|/
operator|(
name|pos
operator|-
name|startPosition
operator|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|pos
operator|+
literal|" features processed ("
operator|+
name|mean
operator|+
literal|"ms/feature)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Reference
name|getDocRef
parameter_list|(
name|String
name|refString
parameter_list|)
block|{
name|Reference
name|ref
init|=
name|indexDocRefs
operator|.
name|get
argument_list|(
name|refString
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|yard
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createReference
argument_list|(
name|refString
argument_list|)
expr_stmt|;
name|indexDocRefs
operator|.
name|put
argument_list|(
name|refString
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|Reference
argument_list|>
name|getFeatureReferences
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|ids
parameter_list|)
block|{
name|List
argument_list|<
name|Reference
argument_list|>
name|refs
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|>
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|refs
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s%s/"
argument_list|,
name|geonamesFeatureBase
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|refs
return|;
block|}
specifier|private
name|Representation
name|importFeature
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|Tokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|geoNamesId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//create a new Doc based on the first Element (geonamesID)
name|Representation
name|doc
init|=
name|this
operator|.
name|yard
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createRepresentation
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s%s/"
argument_list|,
name|geonamesFeatureBase
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
comment|//add the geonames:Feature type
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|rdf_type
operator|.
name|toString
argument_list|()
argument_list|,
name|getDocRef
argument_list|(
name|Properties
operator|.
name|gn_Feature
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//add the UTF-8name
name|String
name|utf8Label
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addNaturalText
argument_list|(
name|Properties
operator|.
name|gn_name
operator|.
name|toString
argument_list|()
argument_list|,
name|utf8Label
argument_list|)
expr_stmt|;
comment|//add the ASKII Name as rdfs:label
name|String
name|askiiLabel
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|utf8Label
operator|==
literal|null
condition|)
block|{
name|utf8Label
operator|=
name|askiiLabel
expr_stmt|;
comment|//use ASKII label as fallback for the utf8 version
block|}
name|doc
operator|.
name|addNaturalText
argument_list|(
name|Properties
operator|.
name|rdfs_label
operator|.
name|toString
argument_list|()
argument_list|,
name|utf8Label
argument_list|)
expr_stmt|;
comment|//alternate Names (alternate names also include Airport codes, postal codes and Wikipedia links!
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//consume this Element and use the alternateNames Map instead
name|List
argument_list|<
name|FeatureName
argument_list|>
name|alternateNames
init|=
name|featureNames
operator|.
name|remove
argument_list|(
name|geoNamesId
argument_list|)
decl_stmt|;
comment|//use remove, because we need not need it a 2nd time!
if|if
condition|(
name|alternateNames
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|altList
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|(
name|alternateNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|officialList
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|(
name|alternateNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|postalCodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|wikipediaLinks
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|shortNames
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FeatureName
name|name
range|:
name|alternateNames
control|)
block|{
if|if
condition|(
name|name
operator|.
name|isNaturalLanguageLabel
argument_list|()
condition|)
block|{
name|Text
name|act
init|=
name|vf
operator|.
name|createText
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|,
name|name
operator|.
name|getLang
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isPreferred
argument_list|()
condition|)
block|{
name|officialList
operator|.
name|add
argument_list|(
name|act
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|altList
operator|.
name|add
argument_list|(
name|act
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|isShortName
argument_list|()
condition|)
block|{
name|shortNames
operator|.
name|add
argument_list|(
name|act
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|getLabelType
argument_list|()
operator|==
name|NameType
operator|.
name|postal
condition|)
block|{
name|postalCodes
operator|.
name|add
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|getLabelType
argument_list|()
operator|==
name|NameType
operator|.
name|link
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"wikipedia.org"
argument_list|)
condition|)
block|{
try|try
block|{
name|wikipediaLinks
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse URL for link label "
operator|+
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//ignore
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|altList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_alternateName
operator|.
name|toString
argument_list|()
argument_list|,
name|altList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|officialList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_officialName
operator|.
name|toString
argument_list|()
argument_list|,
name|officialList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|postalCodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_postalCode
operator|.
name|toString
argument_list|()
argument_list|,
name|postalCodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|wikipediaLinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_wikipediaArticle
operator|.
name|toString
argument_list|()
argument_list|,
name|wikipediaLinks
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|shortNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_shortName
operator|.
name|toString
argument_list|()
argument_list|,
name|shortNames
argument_list|)
expr_stmt|;
block|}
block|}
comment|//lat
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|geo_lat
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|BigDecimal
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//lon
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|geo_long
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|BigDecimal
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//featureClass
name|String
name|featureClass
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s%s"
argument_list|,
name|NamespaceEnum
operator|.
name|geonames
argument_list|,
name|t
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_featureClass
operator|.
name|toString
argument_list|()
argument_list|,
name|getDocRef
argument_list|(
name|featureClass
argument_list|)
argument_list|)
expr_stmt|;
comment|//featureCode (-> need to use<featureClass>.<featureCode>!!)
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_featureCode
operator|.
name|toString
argument_list|()
argument_list|,
name|getDocRef
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s.%s"
argument_list|,
name|featureClass
argument_list|,
name|t
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//countryCode
comment|//  -> geonames uses here the link to an HTML Page showing the Country
comment|//     We would like to use an Link to a SKOS:Concept representing the Country
comment|// ... But luckily here we need only to add the URI!
name|Set
argument_list|<
name|String
argument_list|>
name|ccs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|countryCode
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|countryCode
operator|!=
literal|null
condition|)
block|{
name|countryCode
operator|=
name|countryCode
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//need to trim because some country codes use '  ' to indicate null!
if|if
condition|(
name|countryCode
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|//Yes there are some features that are in no country!
name|ccs
operator|.
name|add
argument_list|(
name|countryCode
argument_list|)
expr_stmt|;
block|}
block|}
comment|//alternate countryCodes
name|String
name|altCc
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|altCc
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|altCcT
init|=
operator|new
name|StringTokenizer
argument_list|(
name|altCc
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|altCcT
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|countryCode
operator|=
name|altCcT
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|countryCode
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|ccs
operator|.
name|add
argument_list|(
name|countryCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ccs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_countryCode
operator|.
name|toString
argument_list|()
argument_list|,
name|ccs
argument_list|)
expr_stmt|;
block|}
comment|//admin Codes 1-4
comment|//first read them -> we need to consume the tokens anyway
name|String
index|[]
name|adminCodes
init|=
operator|new
name|String
index|[]
block|{
name|countryCode
block|,
comment|//country
name|t
operator|.
name|next
argument_list|()
block|,
comment|//ADM1
name|t
operator|.
name|next
argument_list|()
block|,
comment|//ADM2
name|t
operator|.
name|next
argument_list|()
block|,
comment|//ADM3
name|t
operator|.
name|next
argument_list|()
block|}
decl_stmt|;
comment|//ADM4
comment|//Workaround for Admin1 -> add leading '0' for single Value
if|if
condition|(
name|adminCodes
index|[
literal|1
index|]
operator|!=
literal|null
operator|&&
name|adminCodes
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
name|adminCodes
index|[
literal|1
index|]
operator|=
literal|'0'
operator|+
name|adminCodes
index|[
literal|1
index|]
expr_stmt|;
block|}
name|addParents
argument_list|(
name|doc
argument_list|,
name|geoNamesId
argument_list|,
name|adminCodes
argument_list|)
expr_stmt|;
comment|//population
name|String
name|populationString
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|populationString
operator|!=
literal|null
condition|)
block|{
comment|//NOTE: we need to used Long, because of Asia (3.800.000)
name|Long
name|population
init|=
operator|new
name|Long
argument_list|(
name|populationString
argument_list|)
decl_stmt|;
if|if
condition|(
name|population
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_population
operator|.
name|toString
argument_list|()
argument_list|,
name|population
argument_list|)
expr_stmt|;
block|}
block|}
comment|//elevation
name|String
name|altString
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|altString
operator|==
literal|null
condition|)
block|{
name|altString
operator|=
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//if no elevation than use the gtopo30
block|}
else|else
block|{
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//if there is already en elevation, than consume these entry
block|}
name|Integer
name|alt
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|altString
argument_list|)
decl_stmt|;
if|if
condition|(
name|alt
operator|.
name|intValue
argument_list|()
operator|>
operator|-
literal|9999
condition|)
block|{
comment|//it looks like that -9999 is sometimes used as not known!
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|geo_alt
operator|.
name|toString
argument_list|()
argument_list|,
name|alt
argument_list|)
expr_stmt|;
block|}
comment|//time zone
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//not used
comment|//mod-date
name|String
name|modDateString
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|modDateString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|dc_date
operator|.
name|toString
argument_list|()
argument_list|,
name|TimeUtils
operator|.
name|toDate
argument_list|(
name|DataTypeEnum
operator|.
name|DateTime
argument_list|,
name|modDateString
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse modificationDate for geonamesID %s from value %s"
argument_list|,
name|doc
operator|.
name|getId
argument_list|()
argument_list|,
name|modDateString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//and add geonames.org as the creator!
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|dc_creator
operator|.
name|toString
argument_list|()
argument_list|,
literal|"http://www.geonames.org/"
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
specifier|private
name|void
name|addParents
parameter_list|(
name|Representation
name|doc
parameter_list|,
name|Integer
name|id
parameter_list|,
name|String
index|[]
name|adminCodes
parameter_list|)
block|{
name|Integer
index|[]
name|adminIds
init|=
operator|new
name|Integer
index|[
literal|5
index|]
decl_stmt|;
comment|//now process the admin Codes (including the country at index 0)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|adminCodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|adminCodes
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|adminCodes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"00"
argument_list|)
condition|)
block|{
comment|//00 is used to indicate not known
name|StringBuilder
name|parentCode
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|parentCode
operator|.
name|append
argument_list|(
name|adminCodes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
comment|//add all the previous
name|parentCode
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
comment|//add the seperator char
block|}
name|parentCode
operator|.
name|append
argument_list|(
name|adminCodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|//add the current (last) Element
name|adminIds
index|[
name|i
index|]
operator|=
name|adminCode2featureId
operator|.
name|get
argument_list|(
name|parentCode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//might also add null!
block|}
block|}
comment|//now get the direct parents
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|parents
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|getParents
argument_list|(
name|id
argument_list|,
name|parents
argument_list|)
expr_stmt|;
comment|//add all parents
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentFeature
operator|.
name|toString
argument_list|()
argument_list|,
name|getFeatureReferences
argument_list|(
name|parents
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//get admin hierarchy
name|Set
argument_list|<
name|Integer
argument_list|>
name|parentLevel
decl_stmt|;
comment|//add country
if|if
condition|(
name|adminIds
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|Properties
operator|.
name|gn_parentCountry
operator|.
name|toString
argument_list|()
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
name|geonamesFeatureBase
operator|+
name|adminIds
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|parentLevel
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|adminIds
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentLevel
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
comment|//add the admin codes for the 4 levels
name|parentLevel
operator|=
name|addAdminLevel
argument_list|(
name|doc
argument_list|,
name|Properties
operator|.
name|gn_parentADM1
argument_list|,
name|parents
argument_list|,
name|parentLevel
argument_list|,
name|adminIds
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|parentLevel
operator|=
name|addAdminLevel
argument_list|(
name|doc
argument_list|,
name|Properties
operator|.
name|gn_parentADM2
argument_list|,
name|parents
argument_list|,
name|parentLevel
argument_list|,
name|adminIds
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|parentLevel
operator|=
name|addAdminLevel
argument_list|(
name|doc
argument_list|,
name|Properties
operator|.
name|gn_parentADM3
argument_list|,
name|parents
argument_list|,
name|parentLevel
argument_list|,
name|adminIds
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|parentLevel
operator|=
name|addAdminLevel
argument_list|(
name|doc
argument_list|,
name|Properties
operator|.
name|gn_parentADM4
argument_list|,
name|parents
argument_list|,
name|parentLevel
argument_list|,
name|adminIds
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * This Method combines the information of<ul>      *<li> the adminIds originating form the information in the main feature table of geonames      *<li> hierarchy information originating from the hierarchy table.      *</ul>      * and combines them to the full admin regions hierarchy.<br>      * This code would be much simpler if one would trust one of the two data source.      * However first tests have shown, that both structures contain some errors!      * @param doc The doc to add the data      * @param property the property used for the level      * @param parents the parent->child mappings for the current geonames feature      * @param parentLevel the regions of the parent level (should be only one, but sometimes there are more).      *   This data are based on the hierarchy table.      * @param adminId the region as stored in the geonames main table (only available for level 1 and 2)      * @return the regions of this level (should be only one, but sometimes there are more)      */
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|addAdminLevel
parameter_list|(
name|Representation
name|doc
parameter_list|,
name|Properties
name|property
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|parents
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|parentLevel
parameter_list|,
name|Integer
name|adminId
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|currentLevel
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|//first add the admin1 originating from the admin info file
if|if
condition|(
name|adminId
operator|!=
literal|null
condition|)
block|{
name|currentLevel
operator|.
name|add
argument_list|(
name|adminId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|parent
range|:
name|parentLevel
control|)
block|{
comment|//second add the admin1 via the childs of the country
name|Collection
argument_list|<
name|Integer
argument_list|>
name|tmp
init|=
name|parents
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
block|{
name|currentLevel
operator|.
name|addAll
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|currentLevel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//now add all the adm1 we found
name|doc
operator|.
name|add
argument_list|(
name|property
operator|.
name|toString
argument_list|()
argument_list|,
name|getFeatureReferences
argument_list|(
name|currentLevel
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentLevel
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|//write warning if there are multiple ids
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Multiple %s for ID %s (ids: %s)"
argument_list|,
name|property
operator|.
name|name
argument_list|()
argument_list|,
name|doc
operator|.
name|getId
argument_list|()
argument_list|,
name|currentLevel
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|currentLevel
return|;
block|}
comment|/**      * Recursive method the finds all parents and adds the childs of the current      * node (not all childs, but only those of the current tree)      * @param id the id of the lower level      * @param parents the set used to add all the parents/child mappings      */
specifier|private
name|void
name|getParents
parameter_list|(
name|Integer
name|id
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|parents
parameter_list|)
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|current
init|=
name|parentFeature
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Integer
name|parent
range|:
name|current
control|)
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|childs
init|=
name|parents
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|childs
operator|==
literal|null
condition|)
block|{
name|childs
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|childs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childs
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|getParents
argument_list|(
name|parent
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|current
operator|=
name|adminParentFeature
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Integer
name|parent
range|:
name|current
control|)
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|childs
init|=
name|parents
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|childs
operator|==
literal|null
condition|)
block|{
name|childs
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|childs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childs
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|getParents
argument_list|(
name|parent
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|int
name|readCountryInfos
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|countryInfoFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
operator|!=
literal|0
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//# is used as comment
name|Tokenizer
name|t
init|=
operator|new
name|Tokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|code
init|=
literal|null
decl_stmt|;
name|Integer
name|geonamesId
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
name|t
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|actToken
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|code
operator|=
name|actToken
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|countryGeonamesIdPos
condition|)
block|{
name|geonamesId
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|actToken
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|countryGeonamesIdPos
condition|)
block|{
name|adminCode2featureId
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|geonamesId
argument_list|)
expr_stmt|;
name|countryCode2featureId
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|geonamesId
argument_list|)
expr_stmt|;
name|lineCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse countryInfo from Line "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
return|return
name|lineCount
return|;
block|}
comment|/**      * There are two sources of hierarchy in the geonames.org dumps.<p>      * First the Admin Region Codes stored in the main table in combination with      * the CountryInfo and the AdminRegion infos for the first two levels. This      * uses  the ISO country code and the additional number for linking the      * Regions. Second the Hierarchy table providing parentID, childId, [type]      * information. This uses featureIDs for linking.<p>      * This Method reads the first data source into memory. For the country      * related information it calls {@link #readCountryInfos()}.      * @throws IOException      */
specifier|private
name|void
name|readAdminCodes
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//first read adminCodes based on the countryInfos
name|int
name|lineCount
init|=
name|readCountryInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|adminCodeFile
range|:
name|adminCodesFiles
control|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|adminCodeFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
operator|!=
literal|0
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//# is used as comment
name|lineCount
operator|++
expr_stmt|;
comment|//no tokenizer this time ... need only first and last column!
name|String
name|code
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|geonamesId
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|'\t'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|adminCode2featureId
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|geonamesId
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"read "
operator|+
name|lineCount
operator|+
literal|" AdminCodes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This Method loads the alternate labels of geonames.org. Such labels are      * used for multiple language support but also include postal codes, links      * to wikipedia, airport codes ... see {@link NameType} for details.      * TODO: This loads a lot of stuff into memory. Maybe one should consider to      * use some caching framework like OSCache. Features are anyway sorted by      * Country so often used labels would be in memory and all the labels that      * are only used once can be serialised to the cache if in low memory      * environments!      * @throws IOException      */
specifier|private
name|void
name|readAlternateNames
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
decl_stmt|;
if|if
condition|(
name|alternateNamesFile
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|ZipFile
name|alternateNamesArchive
decl_stmt|;
try|try
block|{
name|alternateNamesArchive
operator|=
operator|new
name|ZipFile
argument_list|(
name|alternateNamesFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//in the init we check if this is a file, exists and we can read ...
comment|// .. so throw a runtime exception here!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to access geonames.org DB Dump file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|alternateNamesArchive
operator|.
name|entries
argument_list|()
decl_stmt|;
name|ZipEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|cur
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cur
operator|.
name|isDirectory
argument_list|()
operator|&&
name|cur
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"alternatenames.txt"
argument_list|)
condition|)
block|{
name|entry
operator|=
name|cur
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Archive with alternate Names does not contain the \"alternateNames.txt\" file!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"read alternate names from Archive Entry "
operator|+
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|alternateNamesArchive
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|alternateNamesFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FeatureName
name|name
decl_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
name|EnumMap
argument_list|<
name|NameType
argument_list|,
name|int
index|[]
argument_list|>
name|labelTypeCounts
init|=
operator|new
name|EnumMap
argument_list|<
name|NameType
argument_list|,
name|int
index|[]
argument_list|>
argument_list|(
name|NameType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|NameType
name|entry
range|:
name|NameType
operator|.
name|values
argument_list|()
control|)
block|{
name|labelTypeCounts
operator|.
name|put
argument_list|(
name|entry
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|line
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|name
operator|=
operator|new
name|FeatureName
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse Featurname for line: "
operator|+
name|line
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|FeatureName
argument_list|>
name|names
init|=
name|featureNames
operator|.
name|get
argument_list|(
name|name
operator|.
name|geonameID
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|names
operator|=
operator|new
name|ArrayList
argument_list|<
name|FeatureName
argument_list|>
argument_list|()
expr_stmt|;
name|featureNames
operator|.
name|put
argument_list|(
name|name
operator|.
name|geonameID
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|isPreferred
argument_list|()
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|lineCount
operator|++
expr_stmt|;
name|labelTypeCounts
operator|.
name|get
argument_list|(
name|name
operator|.
name|getLabelType
argument_list|()
argument_list|)
index|[
literal|0
index|]
operator|++
expr_stmt|;
comment|//increase the count for this type!
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|lineCount
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"processed "
operator|+
name|lineCount
operator|+
literal|" labels"
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"read "
operator|+
name|lineCount
operator|+
literal|" alternate Names for "
operator|+
name|featureNames
operator|.
name|size
argument_list|()
operator|+
literal|" Features in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NameType
argument_list|,
name|int
index|[]
argument_list|>
name|count
range|:
name|labelTypeCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   "
operator|+
name|count
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|count
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * There are two sources of hierarchy in the geonames.org dumps.<p>      * First the Admin Region Codes stored in the main table in combination with      * the CountryInfo and the AdminRegion infos for the first two levels. This      * uses  the ISO country code and the additional number for linking the      * Regions. Second the Hierarchy table providing parentID, childId, [type]      * information. This uses featureIDs for linking.<p>      * This Method processes the second datasource and stores the child -&gt;      * parents mappings in memory. Administrative hierarchies are stored in a      * different map. Note also that also for Administrative regions there are      * some cases where a child has more than one parent.      * @throws IOException      */
specifier|private
name|void
name|readHierarchy
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
decl_stmt|;
if|if
condition|(
name|hierarchyFile
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|ZipFile
name|hierarchyArchive
decl_stmt|;
try|try
block|{
name|hierarchyArchive
operator|=
operator|new
name|ZipFile
argument_list|(
name|hierarchyFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//in the init we check if this is a file, exists and we can read ...
comment|// .. so throw a runtime exception here!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to access geonames.org DB Dump hirarchy File"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|hierarchyArchive
operator|.
name|entries
argument_list|()
decl_stmt|;
name|ZipEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|cur
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cur
operator|.
name|isDirectory
argument_list|()
operator|&&
name|cur
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hierarchy.txt"
argument_list|)
condition|)
block|{
name|entry
operator|=
name|cur
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Archive with alternate Names does not contain the \"alternateNames.txt\" file!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"read hierarchy data fromArchive Entry "
operator|+
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|hierarchyArchive
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|alternateNamesFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|line
decl_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lineCount
operator|++
expr_stmt|;
name|Tokenizer
name|t
init|=
operator|new
name|Tokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|Integer
name|parent
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|child
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|type
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|type
operator|=
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
literal|"ADM"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|parents
init|=
name|adminParentFeature
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
name|parents
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//there are only some exceptions with multiple parents
name|adminParentFeature
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
name|parents
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|parents
init|=
name|parentFeature
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
name|parents
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|parentFeature
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
name|parents
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"read %d hierarchy relations in %dms"
argument_list|,
name|lineCount
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//    private static void indexGeonamesOntology() throws RepositoryException, RDFParseException, IOException, SemanticSearchProviderException{
comment|//        Repository ontRepository = new SailRepository(new MemoryStore());
comment|//        ontRepository.initialize();
comment|//        RepositoryConnection con = ontRepository.getConnection();
comment|//        File geonamesOnt = new File(GeoNamesIndexer.geonamesOntFile);
comment|//        System.out.println("Geonames Ontology: ");
comment|//        System.out.println("> name   : "+geonamesOnt.getAbsolutePath());
comment|//        System.out.println("> exists : "+geonamesOnt.exists());
comment|//        System.out.println("> isFile : "+geonamesOnt.isFile());
comment|//        //add the geonames Ont to the Repository
comment|//        con.add(geonamesOnt, geonamesOntBase, RDFFormat.RDFXML);
comment|//        RepositoryResult<Statement> results = con.getStatements(null, org.openrdf.model.vocabulary.RDF.TYPE, null, false);
comment|//        Map<Resource,IndexInputDocument> geonamesOntResources = new HashMap<Resource,IndexInputDocument>();
comment|//        log.info("Process Ontology:");
comment|//        for(Statement stm: results.asList()){
comment|//            log.debug(" Statement : "+stm.getSubject());
comment|//            //check for contains to avaoid multiple processing if a resource has two types
comment|//            if(!geonamesOntResources.containsKey(stm.getSubject())){
comment|//                log.info("> "+stm.getSubject());
comment|//                geonamesOntResources.put(stm.getSubject(), getResourceValues(manager.getPathRegistry(), con, stm));
comment|//            }
comment|//        }
comment|//        log.info("Index Geonames Ontology ("+geonamesOntResources.size()+" Resources)");
comment|//        manager.getIndexProvider().indexDocuments(geonamesOntResources.values());
comment|//        con.close();
comment|//        con = null;
comment|//
comment|//    }
comment|//    private static IndexInputDocument getResourceValues(PathRegistry pathRegistry,
comment|//            RepositoryConnection con, Statement stm) throws RepositoryException {
comment|//        IndexInputDocument inputDoc = new IndexInputDocument(stm.getSubject().stringValue());
comment|//        RepositoryResult<Statement> designValues = con.getStatements(stm.getSubject(),null,null,false);
comment|//        for(Statement value: designValues.asList()){
comment|//            log.debug("   "+value.getPredicate()+"="+value.getObject());
comment|//            PathElement pathElement = pathRegistry.getPathElement(value.getPredicate().stringValue());
comment|//            //in the geonames Data the lat/lon/alt are not marked with the dataType
comment|//            // -> therefore try to parse the dataType from the String value!
comment|//            inputDoc.add(pathElement, value.getObject());
comment|//        }
comment|//        debugInputDoc(inputDoc);
comment|//        return inputDoc;
comment|//    }
specifier|public
specifier|static
specifier|final
class|class
name|FeatureName
block|{
enum|enum
name|NameType
block|{
name|naturalLanguage
block|,
name|postal
block|,
name|link
block|,
name|abbreviation
block|,
name|airportCode
block|,
name|unknown
block|}
specifier|private
specifier|final
name|NameType
name|type
decl_stmt|;
specifier|private
specifier|final
name|int
name|labelID
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|geonameID
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|preferred
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|shortName
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TRUE
init|=
literal|"1"
decl_stmt|;
specifier|protected
name|FeatureName
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|Tokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|labelID
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//first Elem the labelID
name|geonameID
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|language
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|(
name|language
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|||
name|language
operator|.
name|length
argument_list|()
operator|==
literal|3
operator|)
condition|)
block|{
name|this
operator|.
name|lang
operator|=
name|language
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lang
operator|=
literal|null
expr_stmt|;
comment|//no valied lang Code
block|}
if|if
condition|(
name|language
operator|==
literal|null
operator|||
name|language
operator|.
name|length
argument_list|()
operator|<=
literal|3
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|naturalLanguage
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"post"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|postal
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"link"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|link
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"abbr"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|abbreviation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"iata"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
operator|||
literal|"icao"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
operator|||
literal|"faac"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|airportCode
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|NameType
operator|.
name|unknown
expr_stmt|;
comment|// e.g. fr_1793 for French Revolution names
block|}
name|name
operator|=
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|" Unable to parse name from line:"
operator|+
name|line
argument_list|)
throw|;
block|}
name|String
name|act
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|preferred
operator|=
name|act
operator|!=
literal|null
operator|&&
name|act
operator|.
name|equals
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
name|act
operator|=
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
name|this
operator|.
name|shortName
operator|=
name|act
operator|!=
literal|null
operator|&&
name|act
operator|.
name|equals
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|Integer
name|getGeonameID
parameter_list|()
block|{
return|return
name|geonameID
return|;
block|}
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|String
name|getLang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isPreferred
parameter_list|()
block|{
return|return
name|preferred
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isShortName
parameter_list|()
block|{
return|return
name|shortName
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isNaturalLanguageLabel
parameter_list|()
block|{
return|return
name|type
operator|==
name|NameType
operator|.
name|naturalLanguage
return|;
block|}
specifier|public
specifier|final
name|NameType
name|getLabelType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|FeatureName
operator|&&
operator|(
operator|(
name|FeatureName
operator|)
name|obj
operator|)
operator|.
name|labelID
operator|==
name|labelID
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|labelID
return|;
block|}
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|+
operator|(
name|lang
operator|!=
literal|null
condition|?
operator|(
literal|'@'
operator|+
name|lang
operator|)
else|:
literal|""
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Tokenizer
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DELIM
init|=
literal|"\t"
decl_stmt|;
specifier|private
specifier|final
name|StringTokenizer
name|t
decl_stmt|;
specifier|private
name|boolean
name|prevElementWasNull
init|=
literal|true
decl_stmt|;
specifier|public
name|Tokenizer
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|t
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|data
argument_list|,
name|DELIM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|t
operator|.
name|hasMoreTokens
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|prevElementWasNull
condition|)
block|{
name|t
operator|.
name|nextElement
argument_list|()
expr_stmt|;
comment|//dump the delim
block|}
if|if
condition|(
operator|!
name|t
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
comment|//this indicated, that the current Element is
comment|// - the last Element
comment|// - and is null
name|prevElementWasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|act
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|DELIM
operator|.
name|equals
argument_list|(
name|act
argument_list|)
condition|)
block|{
name|prevElementWasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|prevElementWasNull
operator|=
literal|false
expr_stmt|;
return|return
name|act
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

