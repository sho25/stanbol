begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeonamesConstants
operator|.
name|GEONAMES_ONTOLOGY_NS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeonamesConstants
operator|.
name|GEONAMES_RESOURCE_NS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeonamesConstants
operator|.
name|getReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeonamesConstants
operator|.
name|valueFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|site
operator|.
name|CacheUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|GeonamesIndexingSource
implements|implements
name|EntityDataIterable
implements|,
name|ResourceImporter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GeonamesIndexingSource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The Parameter used to configure the source folder(s) relative to the      * {@link IndexingConfig#getSourceFolder()}. The ',' (comma) is used as      * separator to parsed multiple sources.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SOURCE_FILE_OR_FOLDER
init|=
literal|"source"
decl_stmt|;
comment|/**      * The zip archive with the geonames entities      */
specifier|public
specifier|static
specifier|final
name|String
name|GEONAMES_DUMP
init|=
literal|"allCountries.zip"
decl_stmt|;
specifier|private
name|IndexingConfig
name|indexingConfig
decl_stmt|;
specifier|private
name|NamespacePrefixService
name|nsPrefixService
decl_stmt|;
specifier|private
name|File
name|dataDir
decl_stmt|;
specifier|private
name|ResourceLoader
name|loader
init|=
operator|new
name|ResourceLoader
argument_list|(
name|this
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
class|class
name|Resource
block|{
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
specifier|protected
specifier|final
name|InputStream
name|is
decl_stmt|;
specifier|protected
name|Resource
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|LineIterator
name|getEntries
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|ZipArchiveInputStream
name|zipIn
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|zipIn
operator|.
name|getNextEntry
argument_list|()
expr_stmt|;
return|return
name|IOUtils
operator|.
name|lineIterator
argument_list|(
name|zipIn
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|IOUtils
operator|.
name|lineIterator
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|Resource
argument_list|>
name|resourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|GeonamesIndexingSource
operator|.
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|consumed
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|indexingConfig
operator|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
expr_stmt|;
name|nsPrefixService
operator|=
name|indexingConfig
operator|.
name|getNamespacePrefixService
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"reading Geonames data from:"
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_SOURCE_FILE_OR_FOLDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|//if not set use the default
name|value
operator|=
name|GeonamesConstants
operator|.
name|DEFAULT_SOURCE_FOLDER_NAME
operator|+
name|GEONAMES_DUMP
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"No Geonames.org dump source set use the default: {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Source File(s): "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|source
range|:
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|File
name|sourceFileOrDirectory
init|=
name|indexingConfig
operator|.
name|getSourceFile
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceFileOrDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//register the configured source with the ResourceLoader
name|log
operator|.
name|info
argument_list|(
literal|"> {}"
argument_list|,
name|sourceFileOrDirectory
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|loader
operator|.
name|addResource
argument_list|(
name|sourceFileOrDirectory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|source
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//non existent directory -> create
comment|//This is typically the case if this method is called to
comment|//initialise the default configuration. So we will try
comment|//to create the directory users need to copy the source
comment|//RDF files.
if|if
condition|(
operator|!
name|sourceFileOrDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create directory {} configured to improt geonames.org data from. "
operator|+
literal|"You will need to create this directory manually before copying the"
operator|+
literal|"Geonames files into it."
argument_list|,
name|sourceFileOrDirectory
argument_list|)
expr_stmt|;
comment|//this would not be necessary because the directory will
comment|//be empty - however I like to be consistent and have
comment|//all configured and existent files& dirs added the the
comment|//resource loader
name|this
operator|.
name|loader
operator|.
name|addResource
argument_list|(
name|sourceFileOrDirectory
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to find RDF source {} within the indexing Source folder "
argument_list|,
name|source
argument_list|,
name|indexingConfig
operator|.
name|getSourceFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
comment|//if there are resources with the state REGISTERED we need an initialisation
return|return
operator|!
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
name|loader
operator|.
name|loadResources
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|loader
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|resourceList
control|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|resource
operator|.
name|is
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ResourceState
name|importResource
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|resourceName
parameter_list|)
throws|throws
name|IOException
block|{
name|resourceList
operator|.
name|add
argument_list|(
operator|new
name|Resource
argument_list|(
name|resourceName
argument_list|,
name|is
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ResourceState
operator|.
name|LOADED
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityDataIterator
name|entityDataIterator
parameter_list|()
block|{
if|if
condition|(
operator|!
name|consumed
condition|)
block|{
name|consumed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This implementation supports only a"
operator|+
literal|"single Iteration of the data."
argument_list|)
throw|;
block|}
return|return
operator|new
name|EntityDataIterator
argument_list|()
block|{
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
name|resourceList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Resource
name|r
decl_stmt|;
name|LineIterator
name|it
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|next
decl_stmt|;
specifier|private
name|Representation
name|rep
decl_stmt|;
specifier|private
name|String
name|getNext
parameter_list|()
block|{
while|while
condition|(
operator|(
name|it
operator|==
literal|null
operator|||
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|)
operator|&&
name|resources
operator|!=
literal|null
operator|&&
name|resources
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|r
operator|.
name|is
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|resources
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|it
operator|=
name|r
operator|.
name|getEntries
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to read Resource '"
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|"' because of "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|r
operator|.
name|is
argument_list|)
expr_stmt|;
name|it
operator|=
literal|null
expr_stmt|;
block|}
name|resources
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|!=
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|nextLine
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|getNext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
else|else
block|{
name|rep
operator|=
name|processGeonameEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|rep
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|getNext
argument_list|()
expr_stmt|;
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|getRepresentation
parameter_list|()
block|{
return|return
name|rep
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|r
operator|.
name|is
argument_list|)
expr_stmt|;
block|}
name|next
operator|=
literal|null
expr_stmt|;
name|it
operator|=
literal|null
expr_stmt|;
name|resources
operator|=
literal|null
expr_stmt|;
block|}
comment|/**              * Parses the Representation from the current line.<p>              * NOTE: this does not process alternate labels and also does not              * lookup entities for parent codes. Those things are done now by              * own EntityProcessors              * @param line the line to process              * @return the representation              */
specifier|private
name|Representation
name|processGeonameEntry
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|LineTokenizer
name|t
init|=
operator|new
name|LineTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|//[0] geonames id
name|String
name|id
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|geoNamesId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//create a new Doc based on the first Element (geonamesID)
name|Representation
name|doc
init|=
name|valueFactory
operator|.
name|createRepresentation
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|GEONAMES_RESOURCE_NS
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//add the Integer id so that we do not need to parse it from the subject URI
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|idx_id
operator|.
name|toString
argument_list|()
argument_list|,
name|geoNamesId
argument_list|)
expr_stmt|;
comment|//add the geonames:Feature type
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|rdf_type
operator|.
name|toString
argument_list|()
argument_list|,
name|getReference
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_Feature
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//[1] UTF-8 name
name|String
name|utf8Label
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//[2] ASKII Name as rdfs:label
name|String
name|askiiLabel
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|utf8Label
operator|==
literal|null
condition|)
block|{
name|utf8Label
operator|=
name|askiiLabel
expr_stmt|;
comment|//use ASKII label as fallback for the utf8 version
block|}
name|doc
operator|.
name|addNaturalText
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_name
operator|.
name|toString
argument_list|()
argument_list|,
name|utf8Label
argument_list|)
expr_stmt|;
comment|//[3] Alternate Names
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//alternate names are added later during processing
comment|//addAlternateNames(geoNamesId, doc);
comment|//[4] lat
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|geo_lat
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|BigDecimal
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//[5] lon
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|geo_long
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|BigDecimal
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//[6] featureClass
name|String
name|featureClass
init|=
operator|new
name|StringBuilder
argument_list|(
name|GEONAMES_ONTOLOGY_NS
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_featureClass
operator|.
name|toString
argument_list|()
argument_list|,
name|getReference
argument_list|(
name|featureClass
argument_list|)
argument_list|)
expr_stmt|;
comment|//[7] featureCode (-> need to use<featureClass>.<featureCode>!!)
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_featureCode
operator|.
name|toString
argument_list|()
argument_list|,
name|getReference
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|featureClass
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//countryCode
comment|//  -> geonames uses here the link to an HTML Page showing the Country
comment|//     We would like to use an Link to a SKOS:Concept representing the Country
comment|// ... But luckily here we need only to add the URI!
name|Set
argument_list|<
name|String
argument_list|>
name|ccs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//[8] countryCode
name|String
name|countryCode
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|countryCode
operator|!=
literal|null
condition|)
block|{
name|countryCode
operator|=
name|countryCode
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//need to trim because some country codes use '  ' to indicate null!
if|if
condition|(
name|countryCode
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|//Yes there are some features that are in no country!
name|ccs
operator|.
name|add
argument_list|(
name|countryCode
argument_list|)
expr_stmt|;
block|}
block|}
comment|//[9] alternate countryCodes
name|String
name|altCc
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|altCc
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|altCcT
init|=
operator|new
name|StringTokenizer
argument_list|(
name|altCc
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|altCcT
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|countryCode
operator|=
name|altCcT
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|countryCode
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|ccs
operator|.
name|add
argument_list|(
name|countryCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ccs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_countryCode
operator|.
name|toString
argument_list|()
argument_list|,
name|ccs
argument_list|)
expr_stmt|;
block|}
comment|//[10 TO 13] Admin codes
comment|//first read them -> we need to consume the tokens anyway
name|String
index|[]
name|adminCodes
init|=
operator|new
name|String
index|[]
block|{
name|countryCode
block|,
comment|//country
name|t
operator|.
name|next
argument_list|()
block|,
comment|//ADM1
name|t
operator|.
name|next
argument_list|()
block|,
comment|//ADM2
name|t
operator|.
name|next
argument_list|()
block|,
comment|//ADM3
name|t
operator|.
name|next
argument_list|()
block|}
decl_stmt|;
comment|//ADM4
comment|//Workaround for Admin1 -> add leading '0' for single Value
if|if
condition|(
name|adminCodes
index|[
literal|1
index|]
operator|!=
literal|null
operator|&&
name|adminCodes
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
name|adminCodes
index|[
literal|1
index|]
operator|=
literal|'0'
operator|+
name|adminCodes
index|[
literal|1
index|]
expr_stmt|;
block|}
comment|//now process the admin Codes (including the country at index 0)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|adminCodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|adminCodes
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|adminCodes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"00"
argument_list|)
condition|)
block|{
comment|//00 is used to indicate not known
name|StringBuilder
name|parentCode
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|parentCode
operator|.
name|append
argument_list|(
name|adminCodes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
comment|//add all the previous
name|parentCode
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
comment|//add the seperator char
block|}
name|parentCode
operator|.
name|append
argument_list|(
name|adminCodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|//add the current (last) Element
name|String
name|property
init|=
name|i
operator|==
literal|0
condition|?
name|GeonamesPropertyEnum
operator|.
name|idx_CC
operator|.
name|toString
argument_list|()
else|:
operator|new
name|StringBuilder
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|idx_ADM
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|property
argument_list|,
name|parentCode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//[14] population
name|String
name|populationString
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|populationString
operator|!=
literal|null
condition|)
block|{
comment|//NOTE: we need to used Long, because of Asia (3.800.000)
name|Long
name|population
init|=
operator|new
name|Long
argument_list|(
name|populationString
argument_list|)
decl_stmt|;
if|if
condition|(
name|population
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_population
operator|.
name|toString
argument_list|()
argument_list|,
name|population
argument_list|)
expr_stmt|;
block|}
block|}
comment|//[15 TO 16] elevation and gtopo30
name|String
name|altString
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|altString
operator|==
literal|null
condition|)
block|{
name|altString
operator|=
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//if no elevation than use the gtopo30
block|}
else|else
block|{
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//if there is already en elevation, than consume these entry
block|}
name|Integer
name|alt
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|altString
argument_list|)
decl_stmt|;
if|if
condition|(
name|alt
operator|.
name|intValue
argument_list|()
operator|>
operator|-
literal|9999
condition|)
block|{
comment|//it looks like that -9999 is sometimes used as not known!
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|geo_alt
operator|.
name|toString
argument_list|()
argument_list|,
name|alt
argument_list|)
expr_stmt|;
block|}
comment|//[17] time zone
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//not used
comment|//[18] mod-date
name|String
name|modDateString
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|modDateString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|doc
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|dc_date
operator|.
name|toString
argument_list|()
argument_list|,
name|TimeUtils
operator|.
name|toDate
argument_list|(
name|DataTypeEnum
operator|.
name|DateTime
argument_list|,
name|modDateString
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse modificationDate for geonamesID %s from value %s"
argument_list|,
name|doc
operator|.
name|getId
argument_list|()
argument_list|,
name|modDateString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//no creator as this is anyway provided by attribution
comment|//doc.add(GeonamesPropertyEnum.dc_creator.toString(),"http://www.geonames.org/");
return|return
name|doc
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

