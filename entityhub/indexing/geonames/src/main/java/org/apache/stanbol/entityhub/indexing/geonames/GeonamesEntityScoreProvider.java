begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeonamesConstants
operator|.
name|GEONAMES_ONTOLOGY_NS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityScoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_class
specifier|public
class|class
name|GeonamesEntityScoreProvider
implements|implements
name|EntityScoreProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FCLASS_A
init|=
name|GEONAMES_ONTOLOGY_NS
operator|+
literal|"A"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FCLASS_P
init|=
name|GEONAMES_ONTOLOGY_NS
operator|+
literal|"P"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_POPULATION
init|=
literal|10000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_POPULATION
init|=
literal|1000
decl_stmt|;
comment|// used to change the scale of the the natural log
specifier|private
specifier|static
specifier|final
name|double
name|POPULATION_SCALE
init|=
literal|10000
decl_stmt|;
comment|//10k is one
specifier|private
specifier|static
specifier|final
name|double
name|FACT
init|=
name|Math
operator|.
name|log1p
argument_list|(
name|MAX_POPULATION
operator|/
name|POPULATION_SCALE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Float
name|DEFAULT_SCORE
init|=
name|Float
operator|.
name|valueOf
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|needsData
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This implementation requries data to process the score"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|Representation
name|entity
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
name|Reference
name|ref
init|=
name|entity
operator|.
name|getFirstReference
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_featureClass
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fclass
init|=
name|ref
operator|==
literal|null
condition|?
literal|null
else|:
name|ref
operator|.
name|getReference
argument_list|()
decl_stmt|;
comment|//ref = entity.getFirstReference(GeonamesPropertyEnum.gn_featureCode.toString());
comment|//String fCode = ref == null ? null : ref.getReference();
if|if
condition|(
name|FCLASS_A
operator|.
name|equals
argument_list|(
name|fclass
argument_list|)
condition|)
block|{
name|ref
operator|=
name|entity
operator|.
name|getFirstReference
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_featureCode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|fcode
init|=
name|ref
operator|==
literal|null
condition|?
literal|null
else|:
name|ref
operator|.
name|getReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|fcode
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_SCORE
return|;
block|}
else|else
block|{
name|fcode
operator|=
name|fcode
operator|.
name|substring
argument_list|(
name|GEONAMES_ONTOLOGY_NS
operator|.
name|length
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|fcode
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|fcode
operator|.
name|startsWith
argument_list|(
literal|"PC"
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.0f
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fcode
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|&&
name|fcode
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
operator|==
literal|'1'
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
literal|0.5f
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fcode
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|&&
name|fcode
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
operator|==
literal|'2'
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
literal|0.25f
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fcode
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|&&
name|fcode
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
operator|==
literal|'3'
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
literal|0.125f
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fcode
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|&&
operator|(
name|fcode
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
operator|==
literal|'4'
operator|||
name|fcode
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
operator|==
literal|'D'
operator|)
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
literal|0.062f
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fcode
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|&&
name|fcode
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
operator|==
literal|'5'
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
literal|0.031f
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
literal|0.062f
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|FCLASS_P
operator|.
name|equals
argument_list|(
name|fclass
argument_list|)
condition|)
block|{
name|Long
name|population
init|=
name|entity
operator|.
name|getFirst
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_population
operator|.
name|toString
argument_list|()
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|population
operator|==
literal|null
condition|)
block|{
name|population
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//use 1 to avoid creating a new instance
block|}
comment|//normalise the population
name|double
name|p
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|MAX_POPULATION
argument_list|,
name|population
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|,
name|MIN_POPULATION
argument_list|)
decl_stmt|;
comment|//population factor
name|double
name|fact
init|=
name|Math
operator|.
name|log1p
argument_list|(
name|p
operator|/
name|POPULATION_SCALE
argument_list|)
decl_stmt|;
comment|//Normalised based on the maximum popuoation
name|Float
name|score
init|=
name|Float
operator|.
name|valueOf
argument_list|(
call|(
name|float
call|)
argument_list|(
name|fact
operator|/
name|FACT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|score
return|;
block|}
else|else
block|{
return|return
name|DEFAULT_SCORE
return|;
block|}
block|}
block|}
end_class

end_unit

