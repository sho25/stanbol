begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|AlternateLabelProcessor
operator|.
name|FeatureName
operator|.
name|NameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AlternateLabelProcessor
implements|implements
name|EntityProcessor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_ALTERNATE_LABELS
init|=
literal|"alt-labels"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALTERNATE_LABELS_FILE
init|=
literal|"alternateNames.zip"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AlternateLabelProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|vf
init|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * Names for features. This includes also postal codes, abbreviations,       * airport codes and so on.      * @author westei      *      */
specifier|public
specifier|static
specifier|final
class|class
name|FeatureName
block|{
enum|enum
name|NameType
block|{
name|naturalLanguage
block|,
name|postal
block|,
name|link
block|,
name|abbreviation
block|,
name|airportCode
block|,
name|unknown
block|}
specifier|private
specifier|final
name|NameType
name|type
decl_stmt|;
specifier|private
specifier|final
name|int
name|labelID
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|geonameID
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|preferred
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|shortName
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"1"
decl_stmt|;
specifier|protected
name|FeatureName
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|LineTokenizer
name|t
init|=
operator|new
name|LineTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|labelID
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//first Elem the labelID
name|geonameID
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|language
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
operator|(
name|language
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|||
name|language
operator|.
name|length
argument_list|()
operator|==
literal|3
operator|)
condition|)
block|{
name|this
operator|.
name|lang
operator|=
name|language
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lang
operator|=
literal|null
expr_stmt|;
comment|//no valied lang Code
block|}
if|if
condition|(
name|language
operator|==
literal|null
operator|||
name|language
operator|.
name|length
argument_list|()
operator|<=
literal|3
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|naturalLanguage
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"post"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|postal
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"link"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|link
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"abbr"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|abbreviation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"iata"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
operator|||
literal|"icao"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
operator|||
literal|"faac"
operator|.
name|equals
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|type
operator|=
name|NameType
operator|.
name|airportCode
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|NameType
operator|.
name|unknown
expr_stmt|;
comment|// e.g. fr_1793 for French Revolution names
block|}
name|name
operator|=
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|" Unable to parse name from line:"
operator|+
name|line
argument_list|)
throw|;
block|}
name|String
name|act
init|=
name|t
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|preferred
operator|=
name|act
operator|!=
literal|null
operator|&&
name|act
operator|.
name|equals
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
name|act
operator|=
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
name|this
operator|.
name|shortName
operator|=
name|act
operator|!=
literal|null
operator|&&
name|act
operator|.
name|equals
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|Integer
name|getGeonameID
parameter_list|()
block|{
return|return
name|geonameID
return|;
block|}
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|String
name|getLang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isPreferred
parameter_list|()
block|{
return|return
name|preferred
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isShortName
parameter_list|()
block|{
return|return
name|shortName
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isNaturalLanguageLabel
parameter_list|()
block|{
return|return
name|type
operator|==
name|NameType
operator|.
name|naturalLanguage
return|;
block|}
specifier|public
specifier|final
name|NameType
name|getLabelType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|FeatureName
operator|&&
operator|(
operator|(
name|FeatureName
operator|)
name|obj
operator|)
operator|.
name|labelID
operator|==
name|labelID
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|labelID
return|;
block|}
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|+
operator|(
name|lang
operator|!=
literal|null
condition|?
operator|(
literal|'@'
operator|+
name|lang
operator|)
else|:
literal|""
operator|)
return|;
block|}
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|FeatureName
argument_list|>
argument_list|>
name|featureNames
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|FeatureName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|File
name|alternateNamesFile
decl_stmt|;
specifier|private
name|IndexingConfig
name|indexingConfig
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|indexingConfig
operator|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_ALTERNATE_LABELS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|//if not set use the default
name|value
operator|=
name|GeonamesConstants
operator|.
name|DEFAULT_SOURCE_FOLDER_NAME
operator|+
name|ALTERNATE_LABELS_FILE
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"No Geonames.org alternate label source set use the default: {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|alternateNamesFile
operator|=
name|indexingConfig
operator|.
name|getSourceFile
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
if|if
condition|(
operator|!
name|alternateNamesFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The configured geonames.org alternate label file "
operator|+
name|alternateNamesFile
operator|+
literal|" does not exist. Plase change the configuration or copy the "
operator|+
literal|"tile to that location."
argument_list|)
throw|;
block|}
name|BufferedReader
name|reader
decl_stmt|;
if|if
condition|(
name|alternateNamesFile
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
name|ZipFile
name|alternateNamesArchive
decl_stmt|;
try|try
block|{
name|alternateNamesArchive
operator|=
operator|new
name|ZipFile
argument_list|(
name|alternateNamesFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//in the init we check if this is a file, exists and we can read ...
comment|// .. so throw a runtime exception here!
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to access geonames.org DB Dump file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|alternateNamesArchive
operator|.
name|entries
argument_list|()
decl_stmt|;
name|ZipEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|cur
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cur
operator|.
name|isDirectory
argument_list|()
operator|&&
name|cur
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"alternatenames.txt"
argument_list|)
condition|)
block|{
name|entry
operator|=
name|cur
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Archive with alternate Names does not contain the \"alternateNames.txt\" file!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"read alternate names from Archive Entry "
operator|+
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|alternateNamesArchive
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to read Entry '"
operator|+
name|entry
operator|.
name|getName
argument_list|()
operator|+
literal|"' from alternate names file "
operator|+
name|alternateNamesFile
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|alternateNamesFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to read Alternate names "
operator|+
literal|"' from alternate names file "
operator|+
name|alternateNamesFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|FeatureName
name|name
decl_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
name|EnumMap
argument_list|<
name|NameType
argument_list|,
name|int
index|[]
argument_list|>
name|labelTypeCounts
init|=
operator|new
name|EnumMap
argument_list|<
name|NameType
argument_list|,
name|int
index|[]
argument_list|>
argument_list|(
name|NameType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|NameType
name|entry
range|:
name|NameType
operator|.
name|values
argument_list|()
control|)
block|{
name|labelTypeCounts
operator|.
name|put
argument_list|(
name|entry
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|line
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|name
operator|=
operator|new
name|FeatureName
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse Featurname for line: "
operator|+
name|line
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|FeatureName
argument_list|>
name|names
init|=
name|featureNames
operator|.
name|get
argument_list|(
name|name
operator|.
name|geonameID
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|names
operator|=
operator|new
name|ArrayList
argument_list|<
name|FeatureName
argument_list|>
argument_list|()
expr_stmt|;
name|featureNames
operator|.
name|put
argument_list|(
name|name
operator|.
name|geonameID
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|isPreferred
argument_list|()
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|lineCount
operator|++
expr_stmt|;
name|labelTypeCounts
operator|.
name|get
argument_list|(
name|name
operator|.
name|getLabelType
argument_list|()
argument_list|)
index|[
literal|0
index|]
operator|++
expr_stmt|;
comment|//increase the count for this type!
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|lineCount
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"processed "
operator|+
name|lineCount
operator|+
literal|" labels"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read data from alternate label file "
operator|+
name|alternateNamesFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"read "
operator|+
name|lineCount
operator|+
literal|" alternate Names for "
operator|+
name|featureNames
operator|.
name|size
argument_list|()
operator|+
literal|" Features in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NameType
argument_list|,
name|int
index|[]
argument_list|>
name|count
range|:
name|labelTypeCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   "
operator|+
name|count
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|count
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|featureNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|alternateNamesFile
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|process
parameter_list|(
name|Representation
name|source
parameter_list|)
block|{
name|Integer
name|id
init|=
name|source
operator|.
name|getFirst
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|idx_id
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The<{}> field MUST contain the integer ID!"
argument_list|,
name|GeonamesPropertyEnum
operator|.
name|idx_id
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
name|List
argument_list|<
name|FeatureName
argument_list|>
name|alternateNames
init|=
name|featureNames
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//use remove, because we need not need it a 2nd time!
if|if
condition|(
name|alternateNames
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|altList
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|(
name|alternateNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|officialList
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|(
name|alternateNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|postalCodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|wikipediaLinks
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|shortNames
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FeatureName
name|name
range|:
name|alternateNames
control|)
block|{
if|if
condition|(
name|name
operator|.
name|isNaturalLanguageLabel
argument_list|()
condition|)
block|{
name|Text
name|act
init|=
name|vf
operator|.
name|createText
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|,
name|name
operator|.
name|getLang
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isPreferred
argument_list|()
condition|)
block|{
name|officialList
operator|.
name|add
argument_list|(
name|act
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|altList
operator|.
name|add
argument_list|(
name|act
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|isShortName
argument_list|()
condition|)
block|{
name|shortNames
operator|.
name|add
argument_list|(
name|act
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|getLabelType
argument_list|()
operator|==
name|NameType
operator|.
name|postal
condition|)
block|{
name|postalCodes
operator|.
name|add
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|getLabelType
argument_list|()
operator|==
name|NameType
operator|.
name|link
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"wikipedia.org"
argument_list|)
condition|)
block|{
try|try
block|{
name|wikipediaLinks
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse URL for link label "
operator|+
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//ignore
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|altList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|source
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_alternateName
operator|.
name|toString
argument_list|()
argument_list|,
name|altList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|officialList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|source
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_officialName
operator|.
name|toString
argument_list|()
argument_list|,
name|officialList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|postalCodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|source
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_postalCode
operator|.
name|toString
argument_list|()
argument_list|,
name|postalCodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|wikipediaLinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|source
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_wikipediaArticle
operator|.
name|toString
argument_list|()
argument_list|,
name|wikipediaLinks
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|shortNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|source
operator|.
name|add
argument_list|(
name|GeonamesPropertyEnum
operator|.
name|gn_shortName
operator|.
name|toString
argument_list|()
argument_list|,
name|shortNames
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|source
return|;
block|}
block|}
end_class

end_unit

