begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|KEY_CHUNK_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|KEY_DATA_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|KEY_GEONAMES_ARCHIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|KEY_GEONAMES_ONTOLOGY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|KEY_INDEX_ONTOLOGY_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|KEY_START_INDEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
operator|.
name|KEY_YARD
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|geonames
operator|.
name|GeoNamesIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|yard
operator|.
name|solr
operator|.
name|impl
operator|.
name|SolrYardConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|CommandLineRunner
block|{
specifier|private
name|CommandLineRunner
parameter_list|()
block|{}
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommandLineRunner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|header
decl_stmt|;
static|static
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Description:\nThis Utility creates a full Yard for geonames.org by using the SolrYard implementation.\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\nParameter:\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - \"-Xmx\": This implementation loads alternate labels into memory. Therefore it needs a lot of memory during indexing. Parse at least \"-Xmx1024M\" to provide 1GByte memory to the Java Vm. In case of OutOfMemory errors you need to increase this value!"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - solrServerUri : The URL of the Solr Server used to index the data. Make sure to use the schema.xml as needed by the SolrYard!\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - geonamesDataDumpDir: The relative or absolute path to the Dir with the geonames.org data required for indexing\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\nOptions:\n"
argument_list|)
expr_stmt|;
name|header
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Options
name|options
decl_stmt|;
static|static
block|{
name|options
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"display this help and exit"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"d"
argument_list|,
literal|"debug"
argument_list|,
literal|false
argument_list|,
literal|"show debug stacktrace upon error"
argument_list|)
expr_stmt|;
comment|//options.addOption("yt","yardtype",false, "the type of the yard used as target 'solr' or 'rdf' (default:'solr')");
comment|//options.addOption("i","index",true, "Base URI of the used Solr Server used to index the data");
name|options
operator|.
name|addOption
argument_list|(
literal|"n"
argument_list|,
literal|"name"
argument_list|,
literal|true
argument_list|,
literal|"the id and name used for the Yard (default: 'geonames')"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"a"
argument_list|,
literal|"archive"
argument_list|,
literal|true
argument_list|,
literal|"file name of the archive within the data directory (default: 'allCountries.zip')"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"o"
argument_list|,
literal|"ontology"
argument_list|,
literal|true
argument_list|,
literal|"file name of the ontology within the data directory (default: 'ontology_v2.2.1.rdf')"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"io"
argument_list|,
literal|"indexOnt"
argument_list|,
literal|false
argument_list|,
literal|"index also the geonames ontology"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"c"
argument_list|,
literal|"chunksize"
argument_list|,
literal|true
argument_list|,
literal|"the number of documents stored in one chunk (default: 1000"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"s"
argument_list|,
literal|"start"
argument_list|,
literal|true
argument_list|,
literal|"the line number of the geonames table to start(default: 0"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|footer
decl_stmt|;
static|static
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Required data:\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - archive with the toponyms (default 'allCountries.zip', see option 'a'\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - countryInfo.txt : additional infos for country codes\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - admin1CodesASCII.txt : leval 1 administrative regions\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - admin2Codes.txt: Level 2 administrative regions\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - alternateNames.zip or .txt: names of features in different languages\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" - geonames ontology: only needed if '-io' (default 'ontology_v2.2.1.rdf', see option 'o')\n"
argument_list|)
expr_stmt|;
name|footer
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|YardException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|args
operator|=
name|line
operator|.
name|getArgs
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|<
literal|2
operator|||
name|line
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"java -Xmx1024M -jar org.apache.stanbol.indexing.geonames-0.1-SNAPSHOT-jar-with-dependencies.jar [options] solrServerUri geonamesDataDumpDir"
argument_list|,
name|header
argument_list|,
name|options
argument_list|,
name|footer
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|yardName
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|yardName
operator|==
literal|null
condition|)
block|{
name|yardName
operator|=
literal|"geonames"
expr_stmt|;
block|}
name|SolrYardConfig
name|yardConfig
init|=
operator|new
name|SolrYardConfig
argument_list|(
name|yardName
argument_list|,
name|line
operator|.
name|getArgs
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|indexingConfig
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|SolrYard
name|yard
init|=
operator|new
name|SolrYard
argument_list|(
name|yardConfig
argument_list|)
decl_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_YARD
argument_list|,
name|yard
argument_list|)
expr_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_DATA_DIR
argument_list|,
name|line
operator|.
name|getArgs
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_INDEX_ONTOLOGY_STATE
argument_list|,
name|line
operator|.
name|hasOption
argument_list|(
literal|"io"
argument_list|)
argument_list|)
expr_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_GEONAMES_ONTOLOGY
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"o"
argument_list|,
literal|"ontology_v2.2.1.rdf"
argument_list|)
argument_list|)
expr_stmt|;
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_GEONAMES_ARCHIVE
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"a"
argument_list|,
literal|"allCountries.zip"
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|start
decl_stmt|;
try|try
block|{
name|start
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"s"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value for option \"start\" need to be a valid Integer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Negative number parsed for option \"start\". Use '0' as default."
argument_list|)
expr_stmt|;
name|start
operator|=
literal|0l
expr_stmt|;
block|}
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_START_INDEX
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Integer
name|chunkSize
decl_stmt|;
try|try
block|{
name|chunkSize
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"c"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value for option \"chunkSize\" need to be a valid Integer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|chunkSize
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Negative number parsed for option \"chunkSize\". Use '1000' as default."
argument_list|)
expr_stmt|;
name|chunkSize
operator|=
literal|1000
expr_stmt|;
block|}
name|indexingConfig
operator|.
name|put
argument_list|(
name|KEY_CHUNK_SIZE
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|GeoNamesIndexer
name|indexer
init|=
operator|new
name|GeoNamesIndexer
argument_list|(
name|indexingConfig
argument_list|)
decl_stmt|;
name|indexer
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

