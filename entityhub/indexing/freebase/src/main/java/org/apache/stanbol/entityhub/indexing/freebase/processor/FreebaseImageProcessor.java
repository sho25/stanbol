begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|freebase
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Simple processor that takes values of the {@link #PARAM_SOURCE_PROPERTY}   * (default:<code>fb:common.topic.image</code>)  * property and converts it to URIs that can be used to retrieve an image via  * the google APIs  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|FreebaseImageProcessor
implements|implements
name|EntityProcessor
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FreebaseImageProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FB_NS
init|=
literal|"http://rdf.freebase.com/ns/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FOAF_NS
init|=
name|NamespaceEnum
operator|.
name|foaf
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
comment|/**      * The source property for the image links. Values MUST BE of type      * {@link Reference} and contain Freebase topics       */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SOURCE_PROPERTY
init|=
literal|"source-property"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SOURCE_PROPERTY
init|=
name|FB_NS
operator|+
literal|"common.topic.image"
decl_stmt|;
comment|/**      * The service URI of the Image Service      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_IMAGE_SERVICE_URI
init|=
literal|"img-service"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IMAGE_SERVICE_URI
init|=
literal|"https://www.googleapis.com/freebase/v1/image/"
decl_stmt|;
comment|/**      * The property used for thumbnails. If '<code>!</code>' is parsed thumbnail      * generation is deactivated.       */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_THUMBNAIL_PROPERTY
init|=
literal|"thumbnail-property"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_THUMBNAIL_PROPERTY
init|=
name|FOAF_NS
operator|+
literal|"thumbnail"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_MAX_THUMBNAIL_SIZE
init|=
literal|"icon-max-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_THUMBNAIL_SIZE
init|=
operator|-
literal|1
decl_stmt|;
comment|//use the default
comment|/**      * The property used for depictions. If '<code>!</code>' is parsed depiction      * generation is deactivated.       */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_DEPICTION_PROPERTY
init|=
literal|"thumbnail-property"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DEPICTION_PROPERTY
init|=
name|FOAF_NS
operator|+
literal|"depiction"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_MAX_DEPICTION_WIDTH
init|=
literal|"depicition-max-width"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_DEPICTION_WIDTH
init|=
literal|800
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_MAX_DEPICTION_HEIGTH
init|=
literal|"depicition-max-heigth"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_DEPICTION_HEIGTH
init|=
literal|600
decl_stmt|;
specifier|private
name|String
name|serviceBase
decl_stmt|;
specifier|private
name|String
name|srcProperty
decl_stmt|;
specifier|private
name|String
name|thumbnailProperty
decl_stmt|;
specifier|private
name|int
name|iconMaxSize
decl_stmt|;
specifier|private
name|String
name|depictionProperty
decl_stmt|;
specifier|private
name|int
index|[]
name|depictionMaxSize
init|=
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_SOURCE_PROPERTY
argument_list|)
decl_stmt|;
name|srcProperty
operator|=
name|value
operator|==
literal|null
condition|?
name|DEFAULT_SOURCE_PROPERTY
else|:
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_IMAGE_SERVICE_URI
argument_list|)
expr_stmt|;
name|serviceBase
operator|=
name|value
operator|==
literal|null
condition|?
name|DEFAULT_IMAGE_SERVICE_URI
else|:
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_THUMBNAIL_PROPERTY
argument_list|)
expr_stmt|;
name|thumbnailProperty
operator|=
name|value
operator|==
literal|null
condition|?
name|DEFAULT_THUMBNAIL_PROPERTY
else|:
literal|"!"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|?
literal|null
else|:
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_MAX_THUMBNAIL_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|iconMaxSize
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iconMaxSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse integer parameter '"
operator|+
name|PARAM_MAX_THUMBNAIL_SIZE
operator|+
literal|"' form the configured value '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|iconMaxSize
operator|=
name|DEFAULT_MAX_THUMBNAIL_SIZE
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_DEPICTION_PROPERTY
argument_list|)
expr_stmt|;
name|depictionProperty
operator|=
name|value
operator|==
literal|null
condition|?
name|DEFAULT_DEPICTION_PROPERTY
else|:
literal|"!"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|?
literal|null
else|:
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_MAX_DEPICTION_WIDTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|depictionMaxSize
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|depictionMaxSize
index|[
literal|0
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse integer parameter '"
operator|+
name|PARAM_MAX_DEPICTION_WIDTH
operator|+
literal|"' form the configured value '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|depictionMaxSize
index|[
literal|0
index|]
operator|=
name|DEFAULT_MAX_DEPICTION_WIDTH
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_MAX_DEPICTION_HEIGTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|depictionMaxSize
index|[
literal|1
index|]
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|depictionMaxSize
index|[
literal|1
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse integer parameter '"
operator|+
name|PARAM_MAX_DEPICTION_HEIGTH
operator|+
literal|"' form the configured value '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|depictionMaxSize
index|[
literal|1
index|]
operator|=
name|DEFAULT_MAX_DEPICTION_HEIGTH
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|process
parameter_list|(
name|Representation
name|rep
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|images
init|=
name|rep
operator|.
name|getReferences
argument_list|(
name|srcProperty
argument_list|)
decl_stmt|;
while|while
condition|(
name|images
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|source
init|=
name|images
operator|.
name|next
argument_list|()
operator|.
name|getReference
argument_list|()
decl_stmt|;
name|int
name|nsIndex
init|=
name|source
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsIndex
operator|>
literal|0
operator|&&
name|nsIndex
operator|<
name|source
operator|.
name|length
argument_list|()
operator|-
literal|3
condition|)
block|{
name|String
name|entityId
init|=
name|source
operator|.
name|substring
argument_list|(
name|source
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|charAt
argument_list|(
name|nsIndex
operator|+
literal|1
argument_list|)
operator|==
literal|'m'
operator|&&
name|source
operator|.
name|charAt
argument_list|(
name|nsIndex
operator|+
literal|2
argument_list|)
operator|==
literal|'.'
condition|)
block|{
if|if
condition|(
name|thumbnailProperty
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|url
init|=
operator|new
name|StringBuilder
argument_list|(
name|serviceBase
argument_list|)
decl_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"m/"
argument_list|)
operator|.
name|append
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconMaxSize
operator|>
literal|0
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|"?maxwidth="
argument_list|)
operator|.
name|append
argument_list|(
name|iconMaxSize
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"&maxheight="
argument_list|)
operator|.
name|append
argument_list|(
name|iconMaxSize
argument_list|)
expr_stmt|;
block|}
comment|//else use default
name|rep
operator|.
name|addReference
argument_list|(
name|thumbnailProperty
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depictionProperty
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|url
init|=
operator|new
name|StringBuilder
argument_list|(
name|serviceBase
argument_list|)
decl_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"m/"
argument_list|)
operator|.
name|append
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|depictionMaxSize
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|"?maxwidth="
argument_list|)
operator|.
name|append
argument_list|(
name|depictionMaxSize
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|depictionMaxSize
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
name|first
condition|?
literal|'?'
else|:
literal|'&'
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"maxheight="
argument_list|)
operator|.
name|append
argument_list|(
name|depictionMaxSize
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|rep
operator|.
name|addReference
argument_list|(
name|depictionProperty
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" value '{}' of entity '{}' and property '{}' is not an Freebase Entity (ignored)!"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|source
block|,
name|rep
operator|.
name|getId
argument_list|()
block|,
name|srcProperty
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|" value '{}' of entity '{}' and property '{}' is not an Freebase Entity (ignored)!"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|source
block|,
name|rep
operator|.
name|getId
argument_list|()
block|,
name|srcProperty
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rep
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
end_class

end_unit

