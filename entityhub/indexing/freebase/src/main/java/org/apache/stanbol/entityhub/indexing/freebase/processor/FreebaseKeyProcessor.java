begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|freebase
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespaceMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FreebaseKeyProcessor
implements|implements
name|EntityProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FreebaseKeyProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Allows to enable/disable<code>owl:sameAs</code> links to dbpedia      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_DBPEDIA_STATE
init|=
literal|"dbpedia"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DBPEDIA_STATE
init|=
literal|true
decl_stmt|;
comment|/**      * Allows to enable/disable<code>owl:sameAs</code> links to musicbrainz      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_MUSICBRAINZ_STATE
init|=
literal|"musicbrainz"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_MUSICBRAINZ_STATE
init|=
literal|true
decl_stmt|;
comment|//    public static final String PARAM__STATE = "";
comment|//    public static final boolean DEFAULT__STATE = true;
comment|//
comment|//    public static final String PARAM__STATE = "";
comment|//    public static final boolean DEFAULT__STATE = true;
specifier|private
specifier|static
specifier|final
name|String
name|KEY_NS
init|=
literal|"http://rdf.freebase.com/key/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FB_NS
init|=
literal|"http://rdf.freebase.com/ns/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FB_NS_LEN
init|=
name|FB_NS
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WP_PREFIX
init|=
literal|"wikipedia."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WP_PREFIX_LEN
init|=
name|WP_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WP_EN
init|=
name|KEY_NS
operator|+
name|WP_PREFIX
operator|+
literal|"en"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MB_KEY
init|=
name|KEY_NS
operator|+
literal|"authority.musicbrainz"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MB_NS
init|=
literal|"http://musicbrainz.org/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CharSequence
name|MUSIC_PROP_PREFIX
init|=
literal|"music."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MUSIC_PROP_PREFIX_LEN
init|=
name|MUSIC_PROP_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|MB_TYPES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|MB_TYPES
operator|.
name|add
argument_list|(
literal|"recording"
argument_list|)
expr_stmt|;
name|MB_TYPES
operator|.
name|add
argument_list|(
literal|"artist"
argument_list|)
expr_stmt|;
name|MB_TYPES
operator|.
name|add
argument_list|(
literal|"release"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|SAME_AS
init|=
name|NamespaceEnum
operator|.
name|owl
operator|+
literal|"sameAs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RDF_TYPE
init|=
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RDFS_LABEL
init|=
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_LINK_PROPERTY
init|=
literal|"link-property"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LINK_PROPERTY
init|=
name|SAME_AS
decl_stmt|;
specifier|private
name|String
name|linkProperty
decl_stmt|;
specifier|private
name|boolean
name|dbpediaState
decl_stmt|;
specifier|private
name|boolean
name|musicbrainzState
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
name|NamespacePrefixService
name|nsPrefixService
init|=
name|indexingConfig
operator|.
name|getNamespacePrefixService
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_LINK_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|linkProperty
operator|=
name|nsPrefixService
operator|.
name|getFullName
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|linkProperty
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown Namespace Prefix use in "
operator|+
name|PARAM_LINK_PROPERTY
operator|+
literal|'='
operator|+
name|value
operator|+
literal|"!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|linkProperty
operator|=
name|DEFAULT_LINK_PROPERTY
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_DBPEDIA_STATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|dbpediaState
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbpediaState
operator|=
name|DEFAULT_DBPEDIA_STATE
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_MUSICBRAINZ_STATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|musicbrainzState
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|musicbrainzState
operator|=
name|DEFAULT_MUSICBRAINZ_STATE
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{      }
annotation|@
name|Override
specifier|public
name|Representation
name|process
parameter_list|(
name|Representation
name|rep
parameter_list|)
block|{
comment|//wikipedia
if|if
condition|(
name|dbpediaState
condition|)
block|{
comment|//we try to link only a single page. So get the English label and
comment|//search for the according dbpedia key
name|Text
name|enLabel
init|=
name|rep
operator|.
name|getFirst
argument_list|(
name|RDFS_LABEL
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|String
name|mainKey
init|=
name|enLabel
operator|!=
literal|null
condition|?
name|decodeKey
argument_list|(
name|enLabel
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
else|:
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|wpEnKeys
init|=
name|rep
operator|.
name|getText
argument_list|(
name|WP_EN
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|foundMain
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|wpEnKeys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//link to the English dbpedia
while|while
condition|(
operator|!
name|foundMain
operator|&
name|wpEnKeys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|decodeKey
argument_list|(
name|wpEnKeys
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|mainKey
argument_list|)
condition|)
block|{
name|foundMain
operator|=
literal|true
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|linkProperty
argument_list|,
name|linkeDbPedia
argument_list|(
literal|null
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|foundMain
condition|)
block|{
comment|//add all links
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|rep
operator|.
name|addReference
argument_list|(
name|linkProperty
argument_list|,
name|linkeDbPedia
argument_list|(
literal|null
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//search for other wikipedia keys
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wikipediaFields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//(1) collect the fields
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|rep
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|nsIndex
init|=
name|field
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|indexOf
argument_list|(
name|WP_PREFIX
argument_list|,
name|nsIndex
argument_list|)
operator|==
name|nsIndex
operator|&&
comment|//no '_' in the property name
name|field
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|,
name|nsIndex
operator|+
name|WP_PREFIX_LEN
operator|+
literal|2
argument_list|)
operator|<
literal|1
condition|)
block|{
name|String
name|language
init|=
name|field
operator|.
name|substring
argument_list|(
name|nsIndex
operator|+
name|WP_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|field
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|wikipediaFields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
comment|// else no key:wikipedia.* field
block|}
comment|//(2) add the values to avoid concurrent modification exceptions
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|wikipediaFields
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|langWpKeys
init|=
name|rep
operator|.
name|getText
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
init|;
name|langWpKeys
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rep
operator|.
name|addReference
argument_list|(
name|linkProperty
argument_list|,
name|linkeDbPedia
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|langWpKeys
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|musicbrainzState
condition|)
block|{
name|Iterator
argument_list|<
name|Text
argument_list|>
name|mbKeys
init|=
name|rep
operator|.
name|getText
argument_list|(
name|MB_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbKeys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|mbKeys
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|//we need the type
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|types
init|=
name|rep
operator|.
name|getReferences
argument_list|(
name|RDF_TYPE
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|types
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|MB_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|fbType
init|=
name|types
operator|.
name|next
argument_list|()
operator|.
name|getReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|MUSIC_PROP_PREFIX
operator|.
name|equals
argument_list|(
name|fbType
operator|.
name|subSequence
argument_list|(
name|FB_NS_LEN
argument_list|,
name|FB_NS_LEN
operator|+
name|MUSIC_PROP_PREFIX_LEN
argument_list|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|fbType
operator|.
name|substring
argument_list|(
name|FB_NS_LEN
operator|+
name|MUSIC_PROP_PREFIX_LEN
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|uri
init|=
operator|new
name|StringBuilder
argument_list|(
name|MB_NS
argument_list|)
decl_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"#_"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|linkProperty
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rep
return|;
block|}
specifier|private
name|String
name|linkeDbPedia
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|key
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|uri
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"http://dbpedia.org/resource/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"http://"
argument_list|)
operator|.
name|append
argument_list|(
name|language
argument_list|)
operator|.
name|append
argument_list|(
literal|".dbpedia.org/resource/"
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Decodes Freebase.com keys using the '<code>$0000</code>' encoding for chars.      * This encoding uses a 4 digit hex number to represent chars See the      * Freebase documentation for details.       * @param encodedKey      * @return      */
specifier|public
specifier|static
name|String
name|decodeKey
parameter_list|(
name|String
name|encodedKey
parameter_list|)
block|{
name|StringBuilder
name|key
init|=
literal|null
decl_stmt|;
comment|//lazy initialisation for performance
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|encodedKey
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|length
condition|)
block|{
name|int
name|next
init|=
name|encodedKey
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
name|encodedKey
return|;
comment|//no decoding needed
block|}
name|next
operator|=
name|length
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
comment|//init the StringBuilder with the maximum possible size
name|key
operator|=
operator|new
name|StringBuilder
argument_list|(
name|encodedKey
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|>
name|index
condition|)
block|{
comment|//add chars that do not need decoding
name|key
operator|.
name|append
argument_list|(
name|encodedKey
argument_list|,
name|index
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|<
name|length
condition|)
block|{
comment|//decode char
try|try
block|{
if|if
condition|(
name|next
operator|+
literal|4
operator|<
name|length
condition|)
block|{
name|key
operator|.
name|appendCodePoint
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|encodedKey
operator|.
name|substring
argument_list|(
name|next
operator|+
literal|1
argument_list|,
name|next
operator|+
literal|5
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|section
init|=
name|encodedKey
operator|.
name|substring
argument_list|(
name|next
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to decode Secton ["
operator|+
name|next
operator|+
literal|"-"
operator|+
operator|(
name|length
operator|)
operator|+
literal|"|'"
operator|+
name|section
operator|+
literal|"'] from key '"
operator|+
name|encodedKey
operator|+
literal|"'! -> add plain "
operator|+
literal|"section instead!"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|String
name|section
init|=
name|encodedKey
operator|.
name|substring
argument_list|(
name|next
argument_list|,
name|next
operator|+
literal|5
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to decode Secton ["
operator|+
name|next
operator|+
literal|"-"
operator|+
operator|(
name|next
operator|+
literal|5
operator|)
operator|+
literal|"|'"
operator|+
name|section
operator|+
literal|"'] from key '"
operator|+
name|encodedKey
operator|+
literal|"'! -> add plain "
operator|+
literal|"section instead!"
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
name|index
operator|=
name|next
operator|+
literal|5
expr_stmt|;
comment|//add the $0000
block|}
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

