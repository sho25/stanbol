begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link EntityIterator} based on reading data line wise  * from an {@link InputStream}  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|LineBasedEntityIterator
implements|implements
name|EntityIterator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LineBasedEntityIterator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The default separator to split the entity id with the score "\t" (tab)      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SEPARATOR
init|=
literal|"\t"
decl_stmt|;
comment|/**      * The default encoding used to read the data from the parsed {@link InputStream}      * (UTF-8)      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
comment|/**      * The default if Entity ids should be {@link URLEncoder URLEncoded} (false)      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ENCODE_ENTITY_IDS
init|=
literal|false
decl_stmt|;
comment|/**      * Parameter used to configure the name of the source file within the      * {@link IndexingConfig#getSourceFolder()}      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_ENTITY_SCORE_FILE
init|=
literal|"source"
decl_stmt|;
comment|/**      * The default name used for the {@link #PARAM_ENTITY_SCORE_FILE}      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ENTITY_SCORE_FILE
init|=
literal|"entityScores.tsv"
decl_stmt|;
comment|/**      * Parameter used to configure if the Entity IDs should be {@link URLEncoder      * URL encoded} (the default is {@value #DEFAULT_ENCODE_ENTITY_IDS})      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_URL_ENCODE_ENTITY_IDS
init|=
literal|"encodeIds"
decl_stmt|;
comment|/**      * Parameter used to configure the text encoding used by the source file      * (the default is {@value #DEFAULT_ENCODING})      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_CHARSET
init|=
literal|"charset"
decl_stmt|;
specifier|private
name|BufferedReader
name|reader
decl_stmt|;
specifier|private
name|String
name|separator
decl_stmt|;
specifier|private
name|String
name|charset
decl_stmt|;
specifier|private
name|boolean
name|encodeEntityIds
decl_stmt|;
specifier|private
name|long
name|lineCounter
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|nextLine
decl_stmt|;
comment|/**      * Default constructor relaying on {@link #setConfiguration(Map)} is used      * to provide the configuration      */
specifier|public
name|LineBasedEntityIterator
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an EntityScoreIterator that reads {@link EntityScore}s based       * on lines provided by the parsed InputStream.<p> Separator, Charset and      * encoding of Entity ids are initialised based on the default values.      * @param is the InputStream to read the data from      * @throws IOException On any error while initialising the {@link BufferedReader}      * based on the parsed {@link InputStream}      */
specifier|public
name|LineBasedEntityIterator
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|this
argument_list|(
name|is
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an EntityScoreIterator based on the parsed parameters. The      * default values are used if<code>null</code> is parsed for any parameter      * other than the InputStream.      * @param is the InputStream to read the data from      * @param charset      * @param separator      * @param encodeIds      * @throws IOException On any error while initialising the {@link BufferedReader}      * based on the parsed {@link InputStream}      * @throws IllegalArgumentException if<code>null</code> is parsed as InputStream      */
specifier|public
name|LineBasedEntityIterator
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|charset
parameter_list|,
name|String
name|separator
parameter_list|,
name|Boolean
name|encodeIds
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|charset
operator|=
name|DEFAULT_ENCODING
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
block|}
if|if
condition|(
name|separator
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|separator
operator|=
name|DEFAULT_SEPARATOR
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
block|}
if|if
condition|(
name|encodeIds
operator|==
literal|null
condition|)
block|{
name|encodeEntityIds
operator|=
name|DEFAULT_ENCODE_ENTITY_IDS
expr_stmt|;
block|}
else|else
block|{
name|encodeEntityIds
operator|=
name|encodeIds
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|initReader
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
name|File
name|score
decl_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_CHARSET
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|toString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|charset
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_URL_ENCODE_ENTITY_IDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|encodeEntityIds
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_ENTITY_SCORE_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|score
operator|=
operator|new
name|File
argument_list|(
name|DEFAULT_ENTITY_SCORE_FILE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|score
operator|=
operator|new
name|File
argument_list|(
name|indexingConfig
operator|.
name|getSourceFolder
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|initReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The File with the entity scores "
operator|+
name|score
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" does not exist"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * used by the constructors and {@link #setConfiguration(Map)} to initialise      * the reader based on the provided File/InputStream.      * @param is the input stream      * @param charset the charset      */
specifier|private
name|void
name|initReader
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|this
operator|.
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed encoding "
operator|+
name|charset
operator|+
literal|" is not supported"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|nextLine
operator|==
literal|null
condition|)
block|{
comment|//consumed
name|getNext
argument_list|()
expr_stmt|;
block|}
return|return
name|nextLine
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityScore
name|next
parameter_list|()
block|{
name|String
name|line
init|=
name|nextLine
decl_stmt|;
name|nextLine
operator|=
literal|null
expr_stmt|;
comment|//consume
name|String
index|[]
name|parts
init|=
name|line
operator|.
name|split
argument_list|(
name|separator
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Line {} does have more than 2 parts {}"
argument_list|,
name|lineCounter
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Float
name|score
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
try|try
block|{
name|score
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse the score for "
operator|+
literal|"Entity %s from value %s in line %s! Use NULL as score 0"
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|lineCounter
argument_list|)
argument_list|)
expr_stmt|;
name|score
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No score for Entity {} in line {}! Use NULL as score"
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|,
name|lineCounter
argument_list|)
expr_stmt|;
name|score
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|EntityScore
argument_list|(
name|encodeEntityIds
condition|?
name|URLEncoder
operator|.
name|encode
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|charset
argument_list|)
else|:
name|parts
index|[
literal|0
index|]
argument_list|,
name|score
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to URLEncode EntityId"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|getNext
parameter_list|()
block|{
try|try
block|{
name|nextLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|lineCounter
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read next EntityScore"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Removal form the EnityScore list is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
end_class

end_unit

