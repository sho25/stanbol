begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This normaliser will return -1 for scores lower than the minimum parsed to the  * constructor. Because of Entities with score&lt;0 are typically not indexed  * this can be used to filter Entities based on there score.<p>  * This normaliser also supports forwarding the score to an other {@link ScoreNormaliser}.  * The filtering is calculated based on the results of this normaliser. To  * perform the minimum score on the original scores one should not parse an  * {@link ScoreNormaliser} in the constructor  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|MinScoreNormalizer
implements|implements
name|ScoreNormaliser
block|{
specifier|public
specifier|static
specifier|final
name|String
name|KEY_INCLUSIVE
init|=
literal|"inclusive"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_MIN_SCORE
init|=
literal|"min-score"
decl_stmt|;
specifier|private
name|Float
name|minScore
decl_stmt|;
specifier|private
name|ScoreNormaliser
name|normaliser
decl_stmt|;
specifier|private
name|boolean
name|inclusive
decl_stmt|;
specifier|public
name|MinScoreNormalizer
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a normaliser that returns -1 for scores lower (if inclusive is       *<code>false</code> lower equals) to the minimum required score. In case      * an other normaliser is parsed than scores parsed to {@link #normalise(float)}      * are first processed by this normaliser      * @param minimumRequiredScore the minimum required score. MUST BE&gt; 0      * @param inclusive if scores equals to the required minimum are accepted      * @param normaliser the normaliser used to process parsed scores or      *<code>null</code> to use none.      */
specifier|public
name|MinScoreNormalizer
parameter_list|(
name|float
name|minimumRequiredScore
parameter_list|,
name|boolean
name|inclusive
parameter_list|,
name|ScoreNormaliser
name|normaliser
parameter_list|)
block|{
if|if
condition|(
name|minimumRequiredScore
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed minimum required score MUST BE>= 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|inclusive
operator|=
name|inclusive
expr_stmt|;
name|this
operator|.
name|minScore
operator|=
name|minimumRequiredScore
expr_stmt|;
name|this
operator|.
name|normaliser
operator|=
name|normaliser
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|KEY_INCLUSIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|inclusive
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//else default true
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|KEY_MIN_SCORE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|minScore
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|minScore
operator|.
name|floatValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed minScore value '"
operator|+
name|value
operator|+
literal|"'MUST BE greater than 0"
argument_list|)
throw|;
block|}
block|}
comment|//else default null
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|CHAINED_SCORE_NORMALISER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|normaliser
operator|=
operator|(
name|ScoreNormaliser
operator|)
name|value
expr_stmt|;
block|}
block|}
comment|/**      * Constructs an normaliser that returns -1 for all scores lower than the      * minimum required score       * @param minimumRequiredScore the minimum required score. MUST BE&gt; 0      */
specifier|public
name|MinScoreNormalizer
parameter_list|(
name|float
name|minimumRequiredScore
parameter_list|)
block|{
name|this
argument_list|(
name|minimumRequiredScore
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|normalise
parameter_list|(
name|Float
name|score
parameter_list|)
block|{
if|if
condition|(
name|normaliser
operator|!=
literal|null
condition|)
block|{
name|score
operator|=
name|normaliser
operator|.
name|normalise
argument_list|(
name|score
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|score
operator|==
literal|null
operator|||
name|score
operator|.
name|compareTo
argument_list|(
name|ZERO
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|score
return|;
block|}
name|int
name|compare
init|=
name|score
operator|.
name|compareTo
argument_list|(
name|minScore
argument_list|)
decl_stmt|;
return|return
operator|(
name|inclusive
operator|&&
name|compare
operator|<
literal|0
operator|)
operator|||
comment|//score == minScore is OK
operator|(
operator|!
name|inclusive
operator|&&
name|compare
operator|<=
literal|0
operator|)
condition|?
comment|//score == minScore is not OK
name|MINUS_ONE
else|:
name|score
return|;
block|}
annotation|@
name|Override
specifier|public
name|ScoreNormaliser
name|getChained
parameter_list|()
block|{
return|return
name|normaliser
return|;
block|}
block|}
end_class

end_unit

