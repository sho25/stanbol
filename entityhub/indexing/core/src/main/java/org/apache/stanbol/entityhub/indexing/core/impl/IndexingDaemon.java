begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
operator|.
name|IndexerConstants
operator|.
name|ERROR_TIME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
operator|.
name|IndexerConstants
operator|.
name|INDEXING_COMPLETED_QUEUE_ITEM
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|IndexingDaemon
parameter_list|<
name|CI
parameter_list|,
name|PI
parameter_list|>
implements|implements
name|Comparable
argument_list|<
name|IndexingDaemon
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
implements|,
name|Runnable
block|{
specifier|protected
specifier|final
name|Logger
name|log
decl_stmt|;
specifier|private
name|boolean
name|queueFinished
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|CI
argument_list|>
argument_list|>
name|consume
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|PI
argument_list|>
argument_list|>
name|produce
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|IndexingError
argument_list|>
argument_list|>
name|error
decl_stmt|;
specifier|private
name|boolean
name|finisehd
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|IndexingDaemonListener
argument_list|>
name|listeners
decl_stmt|;
comment|/**      * Typically used to set the name of the {@link Thread} running this Runnable      */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**      * Used for {@link #compareTo(IndexingDaemon)}      */
specifier|private
specifier|final
name|Integer
name|sequence
decl_stmt|;
specifier|protected
name|IndexingDaemon
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|sequence
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|CI
argument_list|>
argument_list|>
name|consume
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|PI
argument_list|>
argument_list|>
name|produce
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|IndexingError
argument_list|>
argument_list|>
name|error
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" Deamon"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
if|if
condition|(
name|sequence
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|sequence
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|sequence
operator|=
name|sequence
expr_stmt|;
block|}
name|this
operator|.
name|consume
operator|=
name|consume
expr_stmt|;
name|this
operator|.
name|produce
operator|=
name|produce
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
comment|//get the logger for the actual implementation
name|this
operator|.
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|listeners
operator|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|IndexingDaemonListener
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|sendError
parameter_list|(
name|String
name|entityId
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|entityId
operator|==
literal|null
condition|)
block|{
return|return;
block|}
else|else
block|{
name|putError
argument_list|(
operator|new
name|QueueItem
argument_list|<
name|IndexingError
argument_list|>
argument_list|(
operator|new
name|IndexingError
argument_list|(
name|entityId
argument_list|,
name|message
argument_list|,
name|ex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|sendError
parameter_list|(
name|String
name|entityId
parameter_list|,
name|QueueItem
argument_list|<
name|?
argument_list|>
name|item
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|entityId
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|putError
argument_list|(
operator|(
operator|new
name|QueueItem
argument_list|<
name|IndexingError
argument_list|>
argument_list|(
operator|new
name|IndexingError
argument_list|(
name|entityId
argument_list|,
name|message
argument_list|,
name|ex
argument_list|)
argument_list|,
name|item
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putError
parameter_list|(
name|QueueItem
argument_list|<
name|IndexingError
argument_list|>
name|errorItem
parameter_list|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to process Error because Error Queue is NULL!"
argument_list|)
expr_stmt|;
block|}
name|Long
name|errorTime
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|errorItem
operator|.
name|setProperty
argument_list|(
name|ERROR_TIME
argument_list|,
name|errorTime
argument_list|)
expr_stmt|;
try|try
block|{
name|error
operator|.
name|put
argument_list|(
name|errorItem
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Interupped while sending an Error for Entity "
operator|+
name|errorItem
operator|.
name|getItem
argument_list|()
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|produce
parameter_list|(
name|QueueItem
argument_list|<
name|PI
argument_list|>
name|item
parameter_list|)
block|{
if|if
condition|(
name|produce
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to produce Items because produce queue is NULL!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|produce
operator|.
name|put
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Interupped while producing item "
operator|+
name|item
operator|.
name|getItem
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|final
name|QueueItem
argument_list|<
name|CI
argument_list|>
name|consume
parameter_list|()
block|{
if|if
condition|(
name|queueFinished
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|consume
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to consume items because consume queue is NULl!"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|QueueItem
argument_list|<
name|CI
argument_list|>
name|consumed
init|=
name|consume
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumed
operator|==
name|INDEXING_COMPLETED_QUEUE_ITEM
condition|)
block|{
name|queueFinished
operator|=
literal|true
expr_stmt|;
name|consume
operator|.
name|put
argument_list|(
name|consumed
argument_list|)
expr_stmt|;
comment|//put it back to the list
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|consumed
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Interupped while consuming -> return null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @return the queueFinished      */
specifier|protected
specifier|final
name|boolean
name|isQueueFinished
parameter_list|()
block|{
return|return
name|queueFinished
return|;
block|}
comment|/**      * Method has to be called by the subclasses to signal that this Runnable      * has finished. It will set {@link #finished()} to<code>true</code>      */
specifier|protected
specifier|final
name|void
name|setFinished
parameter_list|()
block|{
name|this
operator|.
name|finisehd
operator|=
literal|true
expr_stmt|;
comment|//tell listener that his one has finished!
name|fireIndexingDaemonEvent
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|finished
parameter_list|()
block|{
return|return
name|finisehd
return|;
block|}
specifier|public
specifier|final
name|boolean
name|addIndexingDaemonListener
parameter_list|(
name|IndexingDaemonListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
return|return
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|removeIndexingDaemonListener
parameter_list|(
name|IndexingDaemonListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
return|return
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|fireIndexingDaemonEvent
parameter_list|()
block|{
name|Set
argument_list|<
name|IndexingDaemonListener
argument_list|>
name|copy
decl_stmt|;
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|copy
operator|=
operator|new
name|HashSet
argument_list|<
name|IndexingDaemonListener
argument_list|>
argument_list|(
name|listeners
argument_list|)
expr_stmt|;
block|}
name|IndexingDaemonEventObject
name|eventObject
init|=
operator|new
name|IndexingDaemonEventObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexingDaemonListener
name|listener
range|:
name|copy
control|)
block|{
name|listener
operator|.
name|indexingDaemonFinished
argument_list|(
name|eventObject
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Currently only used to notify listener that this Daemon has processed      * all entities      * TODO: I would like to use generics here, but I was not able to figure out      * how to used them in a way, that one can still register an Listener that      * uses<code>IndexingDaemonListener&lt;? super CI,? super&gt;</code> with      * the {@link IndexingDaemon#addIndexingDaemonListener(IndexingDaemonListener)}      * and {@link IndexingDaemon#removeIndexingDaemonListener(IndexingDaemonListener)}      * methods.      * @author Rupert Westenthaler      *      */
specifier|public
specifier|static
interface|interface
name|IndexingDaemonListener
block|{
name|void
name|indexingDaemonFinished
parameter_list|(
name|IndexingDaemonEventObject
name|indexingDaemonEventObject
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|IndexingDaemonEventObject
extends|extends
name|EventObject
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1L
decl_stmt|;
specifier|public
name|IndexingDaemonEventObject
parameter_list|(
name|IndexingDaemon
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|indexingDaemon
parameter_list|)
block|{
name|super
argument_list|(
name|indexingDaemon
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexingDaemon
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getSource
parameter_list|()
block|{
return|return
operator|(
name|IndexingDaemon
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|super
operator|.
name|getSource
argument_list|()
return|;
block|}
block|}
specifier|protected
specifier|final
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|CI
argument_list|>
argument_list|>
name|getConsumeQueue
parameter_list|()
block|{
return|return
name|consume
return|;
block|}
specifier|protected
specifier|final
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|PI
argument_list|>
argument_list|>
name|getProduceQueue
parameter_list|()
block|{
return|return
name|produce
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
comment|/**      * The order of this Daemon. Guaranteed to be NOT NULL      * @return the order      */
specifier|public
specifier|final
name|Integer
name|getSequence
parameter_list|()
block|{
return|return
name|sequence
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|IndexingDaemon
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|o
parameter_list|)
block|{
name|int
name|compare
init|=
name|sequence
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|sequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
else|else
block|{
comment|//the ordering within the same sequence position is of no importance
comment|//but it is important to only return 0 if the two Objects are
comment|//equals because we will use this class together with SortedSets!
if|if
condition|(
name|hashCode
argument_list|()
operator|==
name|o
operator|.
name|hashCode
argument_list|()
condition|)
block|{
if|if
condition|(
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
comment|//no idea if that is OK
block|}
block|}
else|else
block|{
return|return
name|hashCode
argument_list|()
operator|-
name|o
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

