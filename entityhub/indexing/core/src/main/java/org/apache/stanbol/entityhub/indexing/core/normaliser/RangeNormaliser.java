begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Normalises scores to the range [0..max]. it supports forwarding the parsed  * scores to an other {@link ScoreNormaliser}.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|RangeNormaliser
implements|implements
name|ScoreNormaliser
block|{
specifier|public
specifier|static
specifier|final
name|String
name|KEY_UPPER_BOUND
init|=
literal|"upper-bound"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_MAX_EXPECTED_SCORE
init|=
literal|"max-expected-score"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RangeNormaliser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|double
name|upperBound
decl_stmt|;
specifier|private
name|ScoreNormaliser
name|normaliser
decl_stmt|;
specifier|private
name|double
name|maxScore
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Normalises values parsed to {@link #normalise(float)} to [0..1] assuming      * that the first call to {@link #normalise(float)} will parsed the higest      * value.      */
specifier|public
name|RangeNormaliser
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Uses the parsed {@link ScoreNormaliser} and further normalises results to      * [0..1] assuming that the first call to {@link #normalise(float)} will       * parsed the highest value.       * @param normaliser the normaliser used to normalise parsed scores before      * putting them to the range [0..1]      */
specifier|public
name|RangeNormaliser
parameter_list|(
name|ScoreNormaliser
name|normaliser
parameter_list|)
block|{
name|this
argument_list|(
name|normaliser
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an RangeNormalizer that forwards to the parsed normaliser but      * keeps results within the range [0..{upperBound}] based on the provided      * {maxScore} expected to be parsed to {@link #normalise(float)};      * @param normaliser The normaliser called to process scores parsed to       * {@link #normalise(float)}. If<code>null</code> than parsed scores are      * only normalised to the range [0..{upperBound}]      * @param upperBound the upper bound for the range. If<code>null</code> is      * parsed the range [0..1] will be used.      * @param maxExpectedScore the maximum expected score. If this value is&lt;      * 0 or<code>null</code> than the first score parsed to       * {@link #normalise(float)} will be used instead. This feature is useful if      * entities are already sorted by there score.      */
specifier|public
name|RangeNormaliser
parameter_list|(
name|ScoreNormaliser
name|normaliser
parameter_list|,
name|Float
name|upperBound
parameter_list|,
name|Float
name|maxExpectedScore
parameter_list|)
block|{
if|if
condition|(
name|normaliser
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|normaliser
operator|=
operator|new
name|DefaultNormaliser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|normaliser
operator|=
name|normaliser
expr_stmt|;
block|}
if|if
condition|(
name|upperBound
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|upperBound
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upperBound
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|upperBound
operator|=
name|upperBound
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed upperBound MUST NOT be<= 0. Parse NULL (to use the default) or values> 0!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxExpectedScore
operator|!=
literal|null
operator|&&
name|maxExpectedScore
operator|>
literal|0
condition|)
block|{
name|normalise
argument_list|(
name|maxExpectedScore
argument_list|)
expr_stmt|;
comment|//call normalise for initialisation of maxScore
block|}
elseif|else
if|if
condition|(
name|maxExpectedScore
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed maxExpectedScore MUST NOT be<= 0. Parse NULL (to use the first value parsed to normalise(..)) or values> 0!"
argument_list|)
throw|;
block|}
comment|//else maxExpectedScore == null -> will use the first call to init maxExpectedScore!
block|}
annotation|@
name|Override
specifier|public
name|Float
name|normalise
parameter_list|(
name|Float
name|parsed
parameter_list|)
block|{
name|parsed
operator|=
name|normaliser
operator|.
name|normalise
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
if|if
condition|(
name|parsed
operator|==
literal|null
operator|||
name|parsed
operator|.
name|compareTo
argument_list|(
name|ZERO
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|parsed
return|;
block|}
name|double
name|score
init|=
name|parsed
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxScore
operator|<
literal|0
condition|)
block|{
comment|//set based on the first call
name|maxScore
operator|=
name|score
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|>
name|maxScore
condition|)
block|{
comment|//print a warning if the first call does not parse the higest score
name|log
operator|.
name|warn
argument_list|(
literal|"Found higer Score than of the first parsed value. This will cause all scores to exeed the range [0..1]"
argument_list|)
expr_stmt|;
block|}
return|return
name|Float
operator|.
name|valueOf
argument_list|(
call|(
name|float
call|)
argument_list|(
name|upperBound
operator|*
operator|(
name|score
operator|/
name|maxScore
operator|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|CHAINED_SCORE_NORMALISER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|normaliser
operator|=
operator|(
name|ScoreNormaliser
operator|)
name|value
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|KEY_UPPER_BOUND
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|upperBound
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|upperBound
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The upper bound '"
operator|+
name|upperBound
operator|+
literal|"' MUST BE> zero!"
argument_list|)
throw|;
block|}
block|}
comment|//else [0..1]
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|KEY_MAX_EXPECTED_SCORE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Float
name|maxExpected
init|=
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|normalise
argument_list|(
name|maxExpected
argument_list|)
expr_stmt|;
block|}
comment|// else none
block|}
annotation|@
name|Override
specifier|public
name|ScoreNormaliser
name|getChained
parameter_list|()
block|{
return|return
name|normaliser
return|;
block|}
block|}
end_class

end_unit

