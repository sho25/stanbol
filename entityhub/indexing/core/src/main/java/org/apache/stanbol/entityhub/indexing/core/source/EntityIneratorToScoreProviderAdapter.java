begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityIterator
operator|.
name|EntityScore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityScoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_comment
comment|/**  * Simple Adapter between an {@link EntityIterator} and the {@link EntityScoreProvider}  * interface that iterates over all entities provided by the {@link EntityIterator}  * and uses this information to initialise an {@link EntityScoreProvider}.<p>  *    * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|EntityIneratorToScoreProviderAdapter
implements|implements
name|EntityScoreProvider
block|{
specifier|private
name|EntityIterator
name|entityIterator
decl_stmt|;
specifier|private
name|EntityScoreProvider
name|provider
decl_stmt|;
specifier|public
name|EntityIneratorToScoreProviderAdapter
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EntityIneratorToScoreProviderAdapter
parameter_list|(
name|EntityIterator
name|entityIterator
parameter_list|)
block|{
if|if
condition|(
name|entityIterator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The EntityIterator MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|entityIterator
operator|=
name|entityIterator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsData
parameter_list|()
block|{
return|return
name|provider
operator|.
name|needsData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
return|return
name|provider
operator|.
name|process
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|Representation
name|entity
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
return|return
name|provider
operator|.
name|process
argument_list|(
name|entity
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
comment|//initialise the source entity iterator
if|if
condition|(
name|entityIterator
operator|.
name|needsInitialisation
argument_list|()
condition|)
block|{
name|entityIterator
operator|.
name|initialise
argument_list|()
expr_stmt|;
block|}
comment|//initialise this instace
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entityScoreMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EntityScore
name|entityScore
init|=
name|entityIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|entityScoreMap
operator|.
name|put
argument_list|(
name|entityScore
operator|.
name|id
argument_list|,
name|entityScore
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
comment|//close the source because it is no longer needed!
name|entityIterator
operator|.
name|close
argument_list|()
expr_stmt|;
name|provider
operator|=
operator|new
name|MapEntityScoreProvider
argument_list|(
name|entityScoreMap
argument_list|)
expr_stmt|;
comment|//initialise the wrapped score provider
if|if
condition|(
name|provider
operator|.
name|needsInitialisation
argument_list|()
condition|)
block|{
name|provider
operator|.
name|initialise
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|provider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
comment|//the IndexingConfig is available via the IndexingConfig.KEY_INDEXING_CONFIG key!
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
comment|//configure first the EntityIterator to adapt
name|entityIterator
operator|=
name|indexingConfig
operator|.
name|getEntityIdIterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|entityIterator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No EntityIterator available via the indexing configuration "
operator|+
name|indexingConfig
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

