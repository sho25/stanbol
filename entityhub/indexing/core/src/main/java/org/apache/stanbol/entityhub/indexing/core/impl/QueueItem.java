begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Item internally used for Queues. It holds an item and can store  * additional properties. The Item can be only set while constructing an  * instance. The properties can be changed at any time.<p>  * Notes:<ul>  *<li> {@link #hashCode()} uses the hashCode of the item and   * {@link #equals(Object)} also checks if the item is equal to the other  * item. The properties are not used!  *<li>This Class is not synchronised.  *</ul>  * @author Rupert Westenthaler  *  * @param<T>  */
end_comment

begin_class
specifier|public
class|class
name|QueueItem
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
specifier|private
specifier|final
name|T
name|item
decl_stmt|;
comment|/**      * Creates a new QueueItem      * @param item the payload      */
specifier|public
name|QueueItem
parameter_list|(
name|T
name|item
parameter_list|)
block|{
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
block|}
comment|/**      * Creates a QueueItem and copies the properties of an other one.      * NOTE that components with an reference to the other QueueItem will be      * able to change the properties of the new one. Use<br>      *<pre><code>      *   QueueItem&lt;String&gt; item = new QueueItem&lt;String&gt;("demo");      *   for(String key : other.getProperties()){      *       item.setProperties(key,other.getProperty(key));      *   }      *</code></pre><br>      * if you need to ensure that the properties within the QueueItem are not      * shared with others.      * @param item the payload      * @param properties the properties      */
specifier|public
name|QueueItem
parameter_list|(
name|T
name|item
parameter_list|,
name|QueueItem
argument_list|<
name|?
argument_list|>
name|other
parameter_list|)
block|{
name|this
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|properties
operator|=
name|other
operator|.
name|properties
expr_stmt|;
block|}
block|}
specifier|public
name|T
name|getItem
parameter_list|()
block|{
return|return
name|item
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|properties
operator|!=
literal|null
condition|?
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|Object
name|removeProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|properties
operator|!=
literal|null
condition|?
name|properties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|properties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|properties
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|item
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
operator|(
name|other
operator|instanceof
name|QueueItem
argument_list|<
name|?
argument_list|>
operator|)
operator|&&
name|item
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QueueItem
argument_list|<
name|?
argument_list|>
operator|)
name|other
operator|)
operator|.
name|item
argument_list|)
return|;
block|}
block|}
end_class

end_unit

