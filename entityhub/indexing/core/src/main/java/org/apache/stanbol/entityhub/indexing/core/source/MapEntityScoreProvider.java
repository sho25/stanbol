begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityScoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link EntityScoreProvider} interface based on a  * {@link Map}   * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|MapEntityScoreProvider
implements|implements
name|EntityScoreProvider
block|{
comment|/**      * The map with the rankings      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|rankings
decl_stmt|;
comment|/**      * Ranking based entity Evaluator.<p>      * Note that Entities with rankings of<code>null</code> or       *<code>&lt; 0</code> will not be indexed.      * @param rankings the map holding the rankings      * @param normaliser the ScoreNormaliser used to normalise scores or<code>null</code>      * to return the scores as present in the map.      * @throws IllegalArgumentException if the ranking map is<code>null</code>      * or empty and if the parsed minimum ranking is<code>&lt; 0</code>.      */
specifier|public
name|MapEntityScoreProvider
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|rankings
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|rankings
operator|==
literal|null
operator|||
name|rankings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The map with the rankings MUST NOT be NULL or empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|rankings
operator|=
name|rankings
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Map based configuration is not supported by this implementation!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//do not remove the elements because the map might be also used by others
name|this
operator|.
name|rankings
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns<code>false</code> because this implementation does not need the      * data of the Entities      * @see EntityScoreProvider#needsData()      */
annotation|@
name|Override
specifier|public
name|boolean
name|needsData
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|rankings
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|Representation
name|entity
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This Class uses process(String id) for evaluation"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

