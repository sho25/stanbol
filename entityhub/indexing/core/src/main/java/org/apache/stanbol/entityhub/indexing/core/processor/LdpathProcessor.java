begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|EntityhubLDPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|SingleRepresentationBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_class
specifier|public
class|class
name|LdpathProcessor
implements|implements
name|EntityProcessor
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LdpathProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The reference to the file containing the LDPath statement used for      * processing. The path is evaluated relative to the config directory      * of the indexing      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAMETER_LD_PATH
init|=
literal|"ldpath"
decl_stmt|;
comment|/**      * If results of the LDPath transformation are appended to the incoming      * representation, or if the incoming Representation is replaced by the      * results of the LDPath program (default is append).      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAMETER_APPEND
init|=
literal|"append"
decl_stmt|;
comment|/**      * By default appending of LDPath results to the parsed Representation is      * activeted      */
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_APPEND_MODE
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|ValueFactory
name|vf
decl_stmt|;
specifier|private
specifier|final
name|EntityhubLDPath
name|ldPath
decl_stmt|;
specifier|private
specifier|final
name|SingleRepresentationBackend
name|backend
decl_stmt|;
specifier|private
name|Program
argument_list|<
name|Object
argument_list|>
name|program
decl_stmt|;
specifier|private
name|boolean
name|appendMode
decl_stmt|;
specifier|public
name|LdpathProcessor
parameter_list|()
block|{
name|vf
operator|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|backend
operator|=
operator|new
name|SingleRepresentationBackend
argument_list|(
name|vf
argument_list|)
expr_stmt|;
name|this
operator|.
name|ldPath
operator|=
operator|new
name|EntityhubLDPath
argument_list|(
name|backend
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|Representation
name|process
parameter_list|(
name|Representation
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|backend
operator|.
name|setRepresentation
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Representation
name|result
init|=
name|ldPath
operator|.
name|execute
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|source
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
name|appendMode
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|result
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|fields
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
name|source
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
comment|//parse the ldpath
specifier|final
name|File
name|ldpathFile
decl_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAMETER_LD_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ldpathFile
operator|=
name|indexingConfig
operator|.
name|getConfigFile
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ldpathFile
operator|==
literal|null
operator|||
operator|!
name|ldpathFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configured '"
operator|+
name|PARAMETER_LD_PATH
operator|+
literal|"' file was not found!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ldpathFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configured '"
operator|+
name|PARAMETER_LD_PATH
operator|+
literal|"' file exists but is not a File!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing required configuration '"
operator|+
name|PARAMETER_LD_PATH
operator|+
literal|"' - the file containing the LDPath program used by this "
operator|+
name|LdpathProcessor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"!"
argument_list|)
throw|;
block|}
name|Reader
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ldpathFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|ldPath
operator|.
name|parseProgram
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ldpath program: \n{}\n"
argument_list|,
name|program
operator|.
name|getPathExpression
argument_list|(
name|backend
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unabwle to read LDPath program from configured file '"
operator|+
name|ldpathFile
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse LDPath program from configured file '"
operator|+
name|ldpathFile
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAMETER_APPEND
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|this
operator|.
name|appendMode
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|appendMode
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|appendMode
operator|=
name|DEFAULT_APPEND_MODE
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

