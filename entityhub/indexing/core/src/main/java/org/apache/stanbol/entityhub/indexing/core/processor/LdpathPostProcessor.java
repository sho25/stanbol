begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|IndexingDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|EntityhubLDPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|YardBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_comment
comment|/**  * Uses the {@link IndexingDestination#getYard()} as LDPath {@link RDFBackend}  * for the execution of configured LDPath statements.<p>  *<b>NOTE</b> in contrast to the {@link LdpathProcessor} this implementation  * is not limited to a subset of ldpath programs.<p>  * Typical use cases of this processor include:<ul>  *<li> indexing transitive closures (e.g. "  *<code>skos:broaderTransitive = (skos:broader)*</code>")  *<li> collecting labels of referenced entities to be used for disambiguation  *   (e.g. use lables of linked concepts in a SKOS concept scheme :   *   "<code><urn:disambiguate.label> = *[rdf:type is skos:Concept]/(skos:prefLabel | skos:altLabel)<code>")  *<li> advanced indexing rules that need paths longer than one (e.g. adding  *   labels of redirects pointing to an entity   *   "<code> rdfs:label = rdfs:label | (^rdfs:seeAlso/rdfs:label)</code>")  *</ul>  *<p>  * The focus on post-processing allows an easy configuration as the  * data source needs not to be configured, but is directly retrieved from  * the {@link IndexingDestination}. Note that this also means that if this   * processor is not used in the post-processing state results are unpredictable  * as they will depend on the indexing order of the entities!  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|LdpathPostProcessor
extends|extends
name|LdpathProcessor
implements|implements
name|EntityProcessor
block|{
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|super
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
comment|//override the ldpath instance used for the initialisation with
comment|//the one using the IndexingDestination
comment|//this is OK, because parsing ldpath programs anyway does only need
comment|//the "value factory" role of the RDFBackend and does not actually
comment|//access any data.
name|Yard
name|yard
init|=
name|indexingConfig
operator|.
name|getIndexingDestination
argument_list|()
operator|.
name|getYard
argument_list|()
decl_stmt|;
name|YardBackend
name|backend
init|=
operator|new
name|YardBackend
argument_list|(
name|yard
argument_list|)
decl_stmt|;
name|this
operator|.
name|ldPath
operator|=
operator|new
name|EntityhubLDPath
argument_list|(
name|backend
argument_list|,
name|yard
operator|.
name|getValueFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

