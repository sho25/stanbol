begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespaceMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple Processor that allows to filter {@link Representation} based on  * {@link Reference#getReference()} values of a configured Field.<p>  * Typically used to filter Representations based on the type (rdf:type)<p>  * Parsing '*' as value for the field deactivates filtering. A missing  * field configuration is assumed as Error and will cause an   * {@link IllegalArgumentException} during {@link #setConfiguration(Map)}  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|FieldValueFilter
implements|implements
name|EntityProcessor
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FieldValueFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_FIELD
init|=
literal|"field"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_VALUES
init|=
literal|"values"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD
init|=
literal|"rdf:type"
decl_stmt|;
specifier|protected
name|String
name|field
decl_stmt|;
specifier|protected
name|boolean
name|includeAll
init|=
literal|false
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|included
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|exclude
decl_stmt|;
comment|//now represented by adding "" to included and exclude
comment|//boolean includeEmpty;
specifier|private
name|NamespacePrefixProvider
name|nsPrefixProvider
decl_stmt|;
specifier|public
name|FieldValueFilter
parameter_list|()
block|{}
comment|/**      * Only for unit testing      */
specifier|protected
name|FieldValueFilter
parameter_list|(
name|NamespacePrefixProvider
name|nsPrefixProvider
parameter_list|,
name|String
name|field
parameter_list|,
name|Object
name|filterConfig
parameter_list|)
block|{
name|this
operator|.
name|nsPrefixProvider
operator|=
name|nsPrefixProvider
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|getUri
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|parseFilterConfig
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|process
parameter_list|(
name|Representation
name|source
parameter_list|)
block|{
if|if
condition|(
name|includeAll
operator|&&
name|exclude
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|source
return|;
comment|//filter inactive
block|}
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|refs
init|=
name|source
operator|.
name|getReferences
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|refs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//no values and includeNull
return|return
operator|(
name|includeAll
operator|&&
operator|!
name|exclude
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
operator|)
operator|||
comment|//include and empty not excluded
operator|(
operator|!
name|includeAll
operator|&&
name|included
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
operator|)
condition|?
comment|//empty is included
name|source
else|:
literal|null
return|;
block|}
while|while
condition|(
name|refs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|refs
operator|.
name|next
argument_list|()
operator|.
name|getReference
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|includeAll
operator|&&
operator|!
name|exclude
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
operator|||
comment|//include and empty not excluded
operator|(
operator|!
name|includeAll
operator|&&
name|included
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
condition|)
block|{
comment|//empty is included
return|return
name|source
return|;
block|}
block|}
comment|//not found -> filter
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
name|nsPrefixProvider
operator|=
name|indexingConfig
operator|.
name|getNamespacePrefixService
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|field
operator|=
name|getUri
argument_list|(
name|DEFAULT_FIELD
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using default Field {}"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|field
operator|=
name|getUri
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"configured Field: {}"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_VALUES
argument_list|)
expr_stmt|;
name|parseFilterConfig
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param value      */
specifier|private
name|void
name|parseFilterConfig
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|values
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|values
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// no values (accept all entities with any value)
name|values
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|values
operator|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|PARAM_VALUES
operator|+
literal|"' must be of type String, String[] or Collection<String> (present: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|")!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|includeAll
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|included
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|included
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|values
control|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
comment|//NULL is a valid option, but we use "" instead
name|entry
operator|=
literal|""
expr_stmt|;
block|}
name|entry
operator|=
name|entry
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
name|entry
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|includeAll
operator|&&
name|entry
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|includeAll
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|boolean
name|exclude
init|=
operator|!
name|entry
operator|.
name|isEmpty
argument_list|()
operator|&&
name|entry
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'!'
decl_stmt|;
if|if
condition|(
name|exclude
condition|)
block|{
name|entry
operator|=
name|entry
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
name|entry
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'!*' is not allowed in the config ("
operator|+
literal|"it is the default if '*' is not present)!"
argument_list|)
throw|;
block|}
block|}
name|String
name|uri
init|=
name|getUri
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|exclude
condition|?
name|this
operator|.
name|included
else|:
name|this
operator|.
name|exclude
operator|)
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'"
operator|+
name|entry
operator|+
literal|"' both included and excluded by the"
operator|+
literal|"parsed configuration!"
argument_list|)
throw|;
block|}
comment|//if exclude add to this.exclude otherwise to this.values
operator|(
name|exclude
condition|?
name|this
operator|.
name|exclude
else|:
name|this
operator|.
name|included
operator|)
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param entry      * @return      */
specifier|private
name|String
name|getUri
parameter_list|(
name|String
name|entry
parameter_list|)
block|{
name|String
name|uri
decl_stmt|;
name|String
name|nsPrefix
init|=
name|NamespaceMappingUtils
operator|.
name|getPrefix
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsPrefix
operator|!=
literal|null
condition|)
block|{
name|String
name|ns
init|=
name|nsPrefixProvider
operator|.
name|getNamespace
argument_list|(
name|nsPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to resolve namesoace prefix used by '"
operator|+
name|entry
operator|+
literal|"' by using the NamespacePrefixService!"
argument_list|)
throw|;
block|}
name|uri
operator|=
operator|new
name|StringBuilder
argument_list|(
name|ns
argument_list|)
operator|.
name|append
argument_list|(
name|entry
argument_list|,
name|nsPrefix
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|entry
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|entry
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
block|}
end_class

end_unit

