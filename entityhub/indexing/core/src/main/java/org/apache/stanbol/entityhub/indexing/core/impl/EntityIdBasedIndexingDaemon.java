begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityIterator
operator|.
name|EntityScore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|ScoreNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_class
specifier|public
class|class
name|EntityIdBasedIndexingDaemon
extends|extends
name|AbstractEntityIndexingDaemon
block|{
specifier|private
specifier|final
name|EntityIterator
name|entityIdIterator
decl_stmt|;
specifier|private
specifier|final
name|EntityDataProvider
name|dataProvider
decl_stmt|;
specifier|private
specifier|final
name|ScoreNormaliser
name|normaliser
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|indexAllEntitiesState
decl_stmt|;
specifier|public
name|EntityIdBasedIndexingDaemon
parameter_list|(
name|String
name|name
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|produce
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|IndexingError
argument_list|>
argument_list|>
name|error
parameter_list|,
name|EntityIterator
name|entityIdIterator
parameter_list|,
name|EntityDataProvider
name|dataProvider
parameter_list|,
name|ScoreNormaliser
name|normaliser
parameter_list|,
name|boolean
name|indexAllEntitiesState
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|produce
argument_list|,
name|error
argument_list|)
expr_stmt|;
if|if
condition|(
name|entityIdIterator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EntityIterator MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dataProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EntityDataProvider MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|normaliser
operator|=
name|normaliser
expr_stmt|;
name|this
operator|.
name|entityIdIterator
operator|=
name|entityIdIterator
expr_stmt|;
name|this
operator|.
name|dataProvider
operator|=
name|dataProvider
expr_stmt|;
name|this
operator|.
name|indexAllEntitiesState
operator|=
name|indexAllEntitiesState
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|entityIdIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Long
name|start
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|EntityScore
name|entityScore
init|=
name|entityIdIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Float
name|score
decl_stmt|;
if|if
condition|(
name|normaliser
operator|!=
literal|null
condition|)
block|{
name|score
operator|=
name|normaliser
operator|.
name|normalise
argument_list|(
name|entityScore
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|score
operator|=
name|entityScore
operator|.
name|score
expr_stmt|;
block|}
if|if
condition|(
name|indexAllEntitiesState
operator|||
comment|//all entities are indexed anyway
name|score
operator|==
literal|null
operator|||
comment|//no score available
name|score
operator|.
name|compareTo
argument_list|(
name|ScoreNormaliser
operator|.
name|ZERO
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//score>= 0
name|Representation
name|rep
init|=
name|dataProvider
operator|.
name|getEntityData
argument_list|(
name|entityScore
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"unable to get Data for Entity {} (score=norm:{}|orig:{})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|entityScore
operator|.
name|id
block|,
name|score
block|,
name|entityScore
operator|.
name|score
block|}
argument_list|)
expr_stmt|;
block|}
name|produce
argument_list|(
name|rep
argument_list|,
name|score
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
comment|//else ignore this entity
block|}
name|setFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

