begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConstants
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityScoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|IndexingDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|DefaultNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|ScoreNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|IndexingConfig
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ROOT_PATH
init|=
literal|"indexing"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PATH
init|=
literal|"config"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE_PATH
init|=
literal|"resources"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESTINATION_PATH
init|=
literal|"destination"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISTRIBUTION_PATH
init|=
literal|"dist"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEXING_PROERTIES
init|=
literal|"indexing.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PARAM
init|=
literal|"config"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_INDEXING_CONFIG
init|=
literal|"indexingConfig"
decl_stmt|;
comment|/**      * Internally used to explain the syntax in the configuration file to parse parameters      */
specifier|private
specifier|static
specifier|final
name|String
name|SYNTAX_ERROR_MESSAGE
init|=
literal|"{key}={value1},{param1}:{value1},{param2}:{value2};{value2},{param1}:{value1} ..."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexingConfig
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_INDEX_FIELD_CONFIG_FILE_NAME
init|=
literal|"indexFieldConfig.txt"
decl_stmt|;
specifier|private
specifier|final
name|File
name|rootDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|configDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|sourceDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|destinationDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|distributionDir
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|EntityDataIterable
name|entityDataIterable
init|=
literal|null
decl_stmt|;
specifier|private
name|EntityDataProvider
name|entityDataProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|EntityIterator
name|entityIdIterator
init|=
literal|null
decl_stmt|;
specifier|private
name|EntityScoreProvider
name|entityScoreProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|ScoreNormaliser
name|scoreNormaliser
init|=
literal|null
decl_stmt|;
specifier|private
name|EntityProcessor
name|entityProcessor
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexingDestination
name|indexingDestination
init|=
literal|null
decl_stmt|;
comment|/**      * The configuration of the fields/languages included/excluded in the index.      */
specifier|private
name|Collection
argument_list|<
name|FieldMapping
argument_list|>
name|fieldMappings
decl_stmt|;
specifier|public
name|IndexingConfig
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexingConfig
parameter_list|(
name|String
name|rootPath
parameter_list|)
block|{
comment|//first get the root
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootPath
operator|!=
literal|null
condition|)
block|{
name|File
name|parsed
init|=
operator|new
name|File
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parsed
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|root
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
comment|//add parsed to "user.dir"
block|}
else|else
block|{
name|root
operator|=
name|parsed
expr_stmt|;
comment|//use the parsed absolute path
block|}
block|}
comment|//now we need to add the name of the root folder
name|root
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|DEFAULT_ROOT_PATH
argument_list|)
expr_stmt|;
comment|//check if root exists
if|if
condition|(
operator|!
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The root folder for the indexing '"
operator|+
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' does not exist!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|rootDir
operator|=
name|root
expr_stmt|;
block|}
comment|//check also for the config
name|this
operator|.
name|configDir
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|CONFIG_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The root folder for the indexing configuration '"
operator|+
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' does not exist!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sourceDir
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|SOURCE_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sourceDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"The resource folder '"
operator|+
name|sourceDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' (typically containing the sources used for indexing) does not exist"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - this might be OK if no (local) resources are needed for the indexing"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|destinationDir
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|DESTINATION_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destinationDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|destinationDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create target folder for indexing '"
operator|+
name|destinationDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|distributionDir
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|DISTRIBUTION_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|distributionDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|distributionDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create distribution folder for indexing '"
operator|+
name|destinationDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
block|}
comment|//check the main configuration
name|File
name|indexingConfigFile
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|configDir
argument_list|,
name|INDEXING_PROERTIES
argument_list|)
decl_stmt|;
name|this
operator|.
name|configuration
operator|=
name|loadConfig
argument_list|(
name|indexingConfigFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|configuration
operator|.
name|get
argument_list|(
name|KEY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Indexing Configuration '"
operator|+
name|indexingConfigFile
operator|+
literal|"' is missing the required key "
operator|+
name|KEY_NAME
operator|+
literal|"!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Indexing Configuration '"
operator|+
name|indexingConfigFile
operator|+
literal|"': The value for the parameter"
operator|+
name|KEY_NAME
operator|+
literal|" MUST NOT be empty!"
argument_list|)
throw|;
block|}
name|value
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|KEY_INDEX_FIELD_CONFIG
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|=
name|DEFAULT_INDEX_FIELD_CONFIG_FILE_NAME
expr_stmt|;
block|}
specifier|final
name|File
name|indexFieldConfig
init|=
operator|new
name|File
argument_list|(
name|configDir
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexFieldConfig
operator|.
name|isFile
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|fieldMappings
operator|=
name|FieldMappingUtils
operator|.
name|parseFieldMappings
argument_list|(
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|LineIterator
name|it
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|indexFieldConfig
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|it
operator|.
name|nextLine
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read Index Field Configuration form '"
operator|+
name|indexFieldConfig
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Indexing Configuration: "
operator|+
literal|"IndexFieldConfiguration '"
operator|+
name|indexFieldConfig
operator|+
literal|"' not found. "
operator|+
literal|"Provide the missing file or use the '"
operator|+
name|KEY_INDEX_FIELD_CONFIG
operator|+
literal|"' in the '"
operator|+
name|indexingConfigFile
operator|+
literal|"' to configure a different one!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Loads an {@link Properties} configuration from the parsed file and      * returns it as Map      * @param configFile the file      * @param required if<code>true</code> an {@link IllegalArgumentException}      * will be thrown if the config was not present otherwise an empty map will      * be returned      * @return The configuration as Map      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|loadConfig
parameter_list|(
name|File
name|configFile
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
comment|//Uses an own implementation to parse key=value configuration
comment|//The problem with the java properties is that keys do not support
comment|//UTF-8, but some configurations might want to use URLs as keys!
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|LineIterator
name|lines
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
while|while
condition|(
name|lines
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
operator|(
name|String
operator|)
name|lines
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|indexOfEquals
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|indexOfEquals
operator|>
literal|0
condition|?
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfEquals
argument_list|)
operator|.
name|trim
argument_list|()
else|:
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'#'
operator|&&
name|key
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'!'
condition|)
block|{
comment|//no comment
name|String
name|value
decl_stmt|;
if|if
condition|(
name|indexOfEquals
operator|>
literal|0
operator|&&
name|indexOfEquals
operator|<
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|value
operator|=
name|line
operator|.
name|substring
argument_list|(
name|indexOfEquals
operator|+
literal|1
argument_list|,
name|line
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
name|configMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// else ignore comments
block|}
comment|//else ignore empty lines
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|required
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find configuration file '"
operator|+
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|required
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read configuration file '"
operator|+
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Old code that used java.util.Properties to load configurations!
comment|//        Properties config = new Properties();
comment|//        try {
comment|//            config.load(new FileInputStream(configFile));
comment|//        } catch (FileNotFoundException e) {
comment|//            if(required){
comment|//                throw new IllegalArgumentException(
comment|//                    "Unable to find configuration file '"+
comment|//                    configFile.getAbsolutePath()+"'!");
comment|//            }
comment|//        } catch (IOException e) {
comment|//            if(required){
comment|//                throw new IllegalStateException(
comment|//                    "Unable to read configuration file '"+
comment|//                    configFile.getAbsolutePath()+"'!",e);
comment|//            }
comment|//        }
comment|//        if(config != null){
comment|//            for(Enumeration<String> keys = (Enumeration<String>)config.propertyNames();keys.hasMoreElements();){
comment|//                String key = keys.nextElement();
comment|//                configMap.put(key, config.getProperty(key));
comment|//            }
comment|//        }
return|return
name|configMap
return|;
block|}
comment|/**      * Getter for the root folder used for the Indexing      * @return the root folder (containing the config, resources, target and dist folders)      */
specifier|public
specifier|final
name|File
name|getRootFolder
parameter_list|()
block|{
return|return
name|rootDir
return|;
block|}
comment|/**      * The root folder for the configuration. Guaranteed to exist.      * @return the root folder for the configuration      */
specifier|public
specifier|final
name|File
name|getConfigFolder
parameter_list|()
block|{
return|return
name|configDir
return|;
block|}
comment|/**      * The root folder containing the resources used as input for the       * indexing process. Might not exist if no resources are available      * @return the root folder for the resources      */
specifier|public
specifier|final
name|File
name|getSourceFolder
parameter_list|()
block|{
return|return
name|sourceDir
return|;
block|}
comment|/**      * The root folder containing the files created by the indexing process.      * Guaranteed to exist.      * @return the target folder      */
specifier|public
specifier|final
name|File
name|getDestinationFolder
parameter_list|()
block|{
return|return
name|destinationDir
return|;
block|}
comment|/**      * The root folder for the distribution. Guaranteed to exist.      * @return the distribution folder      */
specifier|public
specifier|final
name|File
name|getDistributionFolder
parameter_list|()
block|{
return|return
name|distributionDir
return|;
block|}
comment|/**      * Getter for the name as configured by the {@link IndexingConstants#KEY_NAME}      * by the main indexing configuration.      * @return the name of this data source to index      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Getter for the description as configured by the {@link IndexingConstants#KEY_DESCRIPTION}      * by the main indexing configuration.      * @return the description of the data source to index or<code>null</code>      * if not defined      */
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
name|Object
name|value
init|=
name|configuration
operator|.
name|get
argument_list|(
name|KEY_DESCRIPTION
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * The {@link ScoreNormaliser} as configured by the {@link IndexingConstants#KEY_SCORE_NORMALIZER}      * by the main indexing configuration.      * @return the configured {@link ScoreNormaliser} or a {@link DefaultNormaliser} if      * this configuration is missing.      */
specifier|public
name|ScoreNormaliser
name|getNormaliser
parameter_list|()
block|{
if|if
condition|(
name|scoreNormaliser
operator|==
literal|null
condition|)
block|{
name|initNormaliser
argument_list|()
expr_stmt|;
block|}
return|return
name|scoreNormaliser
return|;
block|}
comment|/**      * The {@link EntityDataIterable} as configured by the {@link IndexingConstants#KEY_ENTITY_DATA_ITERABLE}      * by the main indexing configuration.      * @return the configured {@link EntityDataIterable} or a<code>null</code> if      * this configuration is not present.      */
specifier|public
name|EntityDataIterable
name|getDataInterable
parameter_list|()
block|{
if|if
condition|(
name|entityDataIterable
operator|!=
literal|null
condition|)
block|{
return|return
name|entityDataIterable
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|containsKey
argument_list|(
name|KEY_ENTITY_DATA_ITERABLE
argument_list|)
condition|)
block|{
name|ConfigEntry
name|config
init|=
name|parseConfigEntry
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|KEY_ENTITY_DATA_ITERABLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|entityDataIterable
operator|=
operator|(
name|EntityDataIterable
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid EntityDataIterable configuration '"
operator|+
name|config
operator|.
name|getConfigString
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//add the configuration
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configMap
init|=
name|getComponentConfig
argument_list|(
name|config
argument_list|,
name|entityDataIterable
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//add also the directly provided parameters
name|configMap
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|entityDataIterable
operator|.
name|setConfiguration
argument_list|(
name|configMap
argument_list|)
expr_stmt|;
return|return
name|entityDataIterable
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|EntityIterator
name|getEntityIdIterator
parameter_list|()
block|{
if|if
condition|(
name|entityIdIterator
operator|!=
literal|null
condition|)
block|{
return|return
name|entityIdIterator
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|containsKey
argument_list|(
name|KEY_ENTITY_ID_ITERATPR
argument_list|)
condition|)
block|{
name|ConfigEntry
name|config
init|=
name|parseConfigEntry
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|KEY_ENTITY_ID_ITERATPR
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|entityIdIterator
operator|=
operator|(
name|EntityIterator
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid EntityIterator configuration '"
operator|+
name|config
operator|.
name|getConfigString
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//add the configuration
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configMap
init|=
name|getComponentConfig
argument_list|(
name|config
argument_list|,
name|entityIdIterator
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//add also the directly provided parameters
name|configMap
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|entityIdIterator
operator|.
name|setConfiguration
argument_list|(
name|configMap
argument_list|)
expr_stmt|;
return|return
name|entityIdIterator
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|EntityDataProvider
name|getEntityDataProvider
parameter_list|()
block|{
if|if
condition|(
name|entityDataProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|entityDataProvider
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|containsKey
argument_list|(
name|KEY_ENTITY_DATA_PROVIDER
argument_list|)
condition|)
block|{
name|ConfigEntry
name|config
init|=
name|parseConfigEntry
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|KEY_ENTITY_DATA_PROVIDER
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|entityDataProvider
operator|=
operator|(
name|EntityDataProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid EntityDataProvider configuration '"
operator|+
name|config
operator|.
name|getConfigString
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//add the configuration
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configMap
init|=
name|getComponentConfig
argument_list|(
name|config
argument_list|,
name|entityDataProvider
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//add also the directly provided parameters
name|configMap
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|entityDataProvider
operator|.
name|setConfiguration
argument_list|(
name|configMap
argument_list|)
expr_stmt|;
return|return
name|entityDataProvider
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|EntityScoreProvider
name|getEntityScoreProvider
parameter_list|()
block|{
if|if
condition|(
name|entityScoreProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|entityScoreProvider
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|containsKey
argument_list|(
name|KEY_ENTITY_SCORE_PROVIDER
argument_list|)
condition|)
block|{
name|ConfigEntry
name|config
init|=
name|parseConfigEntry
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|KEY_ENTITY_SCORE_PROVIDER
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|entityScoreProvider
operator|=
operator|(
name|EntityScoreProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid EntityScoreProvider configuration '"
operator|+
name|config
operator|.
name|getConfigString
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//add the configuration
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configMap
init|=
name|getComponentConfig
argument_list|(
name|config
argument_list|,
name|entityScoreProvider
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//add also the directly provided parameters
name|configMap
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|entityScoreProvider
operator|.
name|setConfiguration
argument_list|(
name|configMap
argument_list|)
expr_stmt|;
return|return
name|entityScoreProvider
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * The fields and languages included/excluded in the created index.<p>      * NOTE: Currently this uses the {@link FieldMapping} class was initially      * defined to be used as configuration for the {@link FieldMapper}. In      * future this might change to an Interface that is more tailored to      * defining the fields and languages included/excluded in the index and does      * not allow to define mappings and data type conversions as the current one      * @return      */
specifier|public
name|Collection
argument_list|<
name|FieldMapping
argument_list|>
name|getIndexFieldConfiguration
parameter_list|()
block|{
return|return
name|fieldMappings
return|;
block|}
specifier|public
name|EntityProcessor
name|getEntityProcessor
parameter_list|()
block|{
if|if
condition|(
name|entityProcessor
operator|!=
literal|null
condition|)
block|{
return|return
name|entityProcessor
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|containsKey
argument_list|(
name|KEY_ENTITY_PROCESSOR
argument_list|)
condition|)
block|{
name|ConfigEntry
name|config
init|=
name|parseConfigEntry
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|KEY_ENTITY_PROCESSOR
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|entityProcessor
operator|=
operator|(
name|EntityProcessor
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid EntityProcessor configuration '"
operator|+
name|config
operator|.
name|getConfigString
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//add the configuration
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configMap
init|=
name|getComponentConfig
argument_list|(
name|config
argument_list|,
name|entityProcessor
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//add also the directly provided parameters
name|configMap
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|entityProcessor
operator|.
name|setConfiguration
argument_list|(
name|configMap
argument_list|)
expr_stmt|;
return|return
name|entityProcessor
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|IndexingDestination
name|getIndexingDestination
parameter_list|()
block|{
if|if
condition|(
name|indexingDestination
operator|!=
literal|null
condition|)
block|{
return|return
name|indexingDestination
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|containsKey
argument_list|(
name|KEY_INDEXING_DESTINATION
argument_list|)
condition|)
block|{
name|ConfigEntry
name|config
init|=
name|parseConfigEntry
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|KEY_INDEXING_DESTINATION
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|indexingDestination
operator|=
operator|(
name|IndexingDestination
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid IndexingDestination configuration '"
operator|+
name|config
operator|.
name|getConfigString
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//add the configuration
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configMap
init|=
name|getComponentConfig
argument_list|(
name|config
argument_list|,
name|indexingDestination
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//add also the directly provided parameters
name|configMap
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|indexingDestination
operator|.
name|setConfiguration
argument_list|(
name|configMap
argument_list|)
expr_stmt|;
return|return
name|indexingDestination
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|initNormaliser
parameter_list|()
block|{
name|Object
name|value
init|=
name|configuration
operator|.
name|get
argument_list|(
name|IndexingConstants
operator|.
name|KEY_SCORE_NORMALIZER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scoreNormaliser
operator|=
operator|new
name|DefaultNormaliser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ScoreNormaliser
name|normaliser
init|=
literal|null
decl_stmt|;
name|ScoreNormaliser
name|last
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ConfigEntry
argument_list|>
name|configs
init|=
name|parseConfigEntries
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|configs
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|last
operator|=
name|normaliser
expr_stmt|;
name|normaliser
operator|=
literal|null
expr_stmt|;
name|ConfigEntry
name|config
init|=
name|configs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|normaliser
operator|=
operator|(
name|ScoreNormaliser
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Normaliser configuration '"
operator|+
name|config
operator|.
name|getConfigString
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|normaliserConfig
init|=
name|getComponentConfig
argument_list|(
name|config
argument_list|,
name|normaliser
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|config
operator|.
name|getParams
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CONFIG_PARAM
argument_list|)
argument_list|)
decl_stmt|;
comment|//add also the directly provided parameters
name|normaliserConfig
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|normaliserConfig
operator|.
name|put
argument_list|(
name|ScoreNormaliser
operator|.
name|CHAINED_SCORE_NORMALISER
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
name|normaliser
operator|.
name|setConfiguration
argument_list|(
name|normaliserConfig
argument_list|)
expr_stmt|;
block|}
comment|//set the normaliser!
name|this
operator|.
name|scoreNormaliser
operator|=
name|normaliser
expr_stmt|;
block|}
block|}
comment|/**      * Loads a configuration based on the value of the {@link #CONFIG_PARAM}      * parameter of the parsed {@link ConfigEntry}.      * @param configEntry      * @param defaultName      * @return      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getComponentConfig
parameter_list|(
name|ConfigEntry
name|configEntry
parameter_list|,
name|String
name|defaultName
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
comment|//Removed support for parsing the relative path to the config file
comment|//because it was not used! (String relConfigPath was the first param)
comment|//        File configDir;
comment|//        if(relConfigPath == null || relConfigPath.isEmpty()){
comment|//            configDir = this.configDir;
comment|//        } else {
comment|//            configDir = new File(this.configDir,relConfigPath);
comment|//        }
comment|//        //test also if relConfigPath = null, because also the root might not exist!
comment|//        if(!configDir.isDirectory()){
comment|//            if(required){
comment|//                throw new IllegalArgumentException("The Configuration Directory '"+
comment|//                    configDir+"' does not exist (or ist not a directory)!");
comment|//            } else {
comment|//                return new HashMap<String,Object>();
comment|//            }
comment|//        }
comment|//if the CONFIG_PARAM is present in the config we assume that a config is required
name|String
name|name
init|=
name|configEntry
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CONFIG_PARAM
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|loadConfig
argument_list|(
name|name
operator|==
literal|null
condition|?
name|defaultName
else|:
name|name
argument_list|,
name|configDir
argument_list|,
name|required
argument_list|)
decl_stmt|;
comment|//we need to also add the key used to get (this) indexing config
name|config
operator|.
name|put
argument_list|(
name|KEY_INDEXING_CONFIG
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
comment|/**      * Loads the config with the given name from the parsed directory and throwing      * an {@link IllegalArgumentException} if the configuration is required but      * not found      * @param name the name (".properties" is appended if missing)      * @param configDir the directory to look for the config      * @param required if this config is required or optional      * @return the key value mappings as map      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|loadConfig
parameter_list|(
name|String
name|name
parameter_list|,
name|File
name|configDir
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|loadedConfig
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|endsWith
argument_list|(
literal|".properties"
argument_list|)
condition|?
name|name
else|:
name|name
operator|+
literal|".properties"
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|required
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing required parameter'"
operator|+
name|CONFIG_PARAM
operator|+
literal|"' Syntax: '"
operator|+
name|SYNTAX_ERROR_MESSAGE
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
return|;
block|}
block|}
name|File
name|configFile
init|=
operator|new
name|File
argument_list|(
name|configDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|loadedConfig
operator|=
name|loadConfig
argument_list|(
name|configFile
argument_list|,
name|required
argument_list|)
expr_stmt|;
return|return
name|loadedConfig
return|;
block|}
specifier|private
name|ConfigEntry
name|parseConfigEntry
parameter_list|(
name|String
name|config
parameter_list|)
block|{
return|return
operator|new
name|ConfigEntry
argument_list|(
name|config
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ConfigEntry
argument_list|>
name|parseConfigEntries
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigEntry
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|configPart
range|:
name|config
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
name|configs
operator|.
name|add
argument_list|(
name|parseConfigEntry
argument_list|(
name|configPart
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|configs
return|;
block|}
specifier|private
class|class
name|ConfigEntry
block|{
specifier|private
name|String
name|configString
decl_stmt|;
specifier|private
name|String
name|className
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
specifier|private
name|ConfigEntry
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|configString
operator|=
name|config
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|config
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|className
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|param
init|=
name|parts
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
comment|//TODO: maybe use also "=" there
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|value
operator|=
name|parts
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
name|parts
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
name|String
name|getConfigString
parameter_list|()
block|{
return|return
name|configString
return|;
block|}
specifier|public
specifier|final
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
block|}
comment|/**      * Can be used to look for a config within the configuration directory      * of the {@link IndexingConfig}.      * @param string the name of the configuration (".properties" is appended if      * missing)      * @param required if this is an required or optional configuration.      * @return the key value mappings as map      * @throws IllegalArgumentException if the configuration was not found and      *<code>true</code> was parsed for required      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getConfig
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|required
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|loadConfig
argument_list|(
name|name
argument_list|,
name|configDir
argument_list|,
name|required
argument_list|)
return|;
block|}
block|}
end_class

end_unit

