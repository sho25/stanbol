begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
operator|.
name|IndexerConstants
operator|.
name|STORE_COMPLETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
operator|.
name|IndexerConstants
operator|.
name|STORE_DURATION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_comment
comment|/**  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|EntityPersisterRunnable
extends|extends
name|IndexingDaemon
argument_list|<
name|Representation
argument_list|,
name|Representation
argument_list|>
block|{
specifier|private
name|int
name|chunkSize
decl_stmt|;
specifier|private
name|Yard
name|yard
decl_stmt|;
specifier|public
name|EntityPersisterRunnable
parameter_list|(
name|String
name|name
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|consume
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|produce
parameter_list|,
name|BlockingQueue
argument_list|<
name|QueueItem
argument_list|<
name|IndexingError
argument_list|>
argument_list|>
name|error
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|Yard
name|yard
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|IndexerConstants
operator|.
name|SEQUENCE_NUMBER_PERSIT_DAEMON
argument_list|,
name|consume
argument_list|,
name|produce
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|yard
operator|=
name|yard
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|toStore
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|isQueueFinished
argument_list|()
condition|)
block|{
name|QueueItem
argument_list|<
name|Representation
argument_list|>
name|item
decl_stmt|;
name|item
operator|=
name|consume
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|getItem
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toStore
operator|.
name|put
argument_list|(
name|item
operator|.
name|getItem
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toStore
operator|.
name|size
argument_list|()
operator|>=
name|chunkSize
condition|)
block|{
name|process
argument_list|(
name|toStore
argument_list|)
expr_stmt|;
block|}
block|}
comment|//process the remaining
if|if
condition|(
operator|!
name|toStore
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|process
argument_list|(
name|toStore
argument_list|)
expr_stmt|;
block|}
name|setFinished
argument_list|()
expr_stmt|;
block|}
comment|/**      * processes the items within the parsed Map      * @param toStore the items to process      */
specifier|private
name|void
name|process
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|toStore
parameter_list|)
block|{
comment|//keep the number of elements because store(..) will remove them!
name|int
name|elements
init|=
name|toStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|Long
name|start
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|toStore
argument_list|)
decl_stmt|;
name|Long
name|completed
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|duration
init|=
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|completed
operator|.
name|longValue
argument_list|()
operator|-
name|start
operator|.
name|longValue
argument_list|()
argument_list|)
operator|)
operator|/
name|elements
argument_list|)
decl_stmt|;
for|for
control|(
name|QueueItem
argument_list|<
name|Representation
argument_list|>
name|storedItem
range|:
name|stored
control|)
block|{
name|storedItem
operator|.
name|setProperty
argument_list|(
name|STORE_COMPLETE
argument_list|,
name|completed
argument_list|)
expr_stmt|;
name|storedItem
operator|.
name|setProperty
argument_list|(
name|STORE_DURATION
argument_list|,
name|duration
argument_list|)
expr_stmt|;
name|produce
argument_list|(
name|storedItem
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Stores the parsed Representations to the {@link #yard} and       * {@link #sendError(String, String, Exception)} for entities that could      * not be stored!      * @param toStore the Representations to store. This method removes all      * Elements of this map while doing the work      */
specifier|private
name|Set
argument_list|<
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|store
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|toStore
parameter_list|)
block|{
name|String
name|errorMsg
decl_stmt|;
name|YardException
name|yardException
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
name|stored
init|=
operator|new
name|HashSet
argument_list|<
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Representation
argument_list|>
name|reps
init|=
operator|new
name|ArrayList
argument_list|<
name|Representation
argument_list|>
argument_list|(
name|toStore
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QueueItem
argument_list|<
name|Representation
argument_list|>
name|item
range|:
name|toStore
operator|.
name|values
argument_list|()
control|)
block|{
name|reps
operator|.
name|add
argument_list|(
name|item
operator|.
name|getItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Representation
name|r
range|:
name|yard
operator|.
name|store
argument_list|(
name|reps
argument_list|)
control|)
block|{
name|QueueItem
argument_list|<
name|Representation
argument_list|>
name|old
init|=
name|toStore
operator|.
name|remove
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//create a new QueueItem and copy the metadata of the old one
name|stored
operator|.
name|add
argument_list|(
operator|new
name|QueueItem
argument_list|<
name|Representation
argument_list|>
argument_list|(
name|r
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|errorMsg
operator|=
literal|"Entity %s was not indexed by the Yard %s"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
name|errorMsg
operator|=
literal|"Unable to store Entity %s to Yard %s because of an YardException"
expr_stmt|;
block|}
comment|//the remaining Items in to store have some errors
for|for
control|(
name|QueueItem
argument_list|<
name|Representation
argument_list|>
name|entry
range|:
name|toStore
operator|.
name|values
argument_list|()
control|)
block|{
name|sendError
argument_list|(
name|entry
operator|.
name|getItem
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|errorMsg
argument_list|,
name|entry
operator|.
name|getItem
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|yard
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|yardException
argument_list|)
expr_stmt|;
block|}
name|toStore
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//clear the
return|return
name|stored
return|;
block|}
block|}
end_class

end_unit

