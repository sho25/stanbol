begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|EntityhubLDPath
operator|.
name|EntityhubConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|ldpath
operator|.
name|backend
operator|.
name|SingleRepresentationBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|LDPath
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|transformers
operator|.
name|NodeTransformer
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|programs
operator|.
name|Program
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|transformers
operator|.
name|IdentityTransformer
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|parser
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * LDpath based processor that tries to cast the   * @author westei  *  */
end_comment

begin_class
specifier|public
class|class
name|LdpathSourceProcessor
implements|implements
name|EntityProcessor
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LdpathProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @see LdpathProcessor#PARAMETER_LD_PATH      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAMETER_LD_PATH
init|=
name|LdpathProcessor
operator|.
name|PARAMETER_LD_PATH
decl_stmt|;
comment|/**      * @see LdpathProcessor#PARAMETER_APPEND      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAMETER_APPEND
init|=
name|LdpathProcessor
operator|.
name|PARAMETER_APPEND
decl_stmt|;
comment|/**      * @see LdpathProcessor#DEFAULT_APPEND_MODE      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_APPEND_MODE
init|=
name|LdpathProcessor
operator|.
name|DEFAULT_APPEND_MODE
decl_stmt|;
comment|/**      * ValueFactory used to create Representation      */
specifier|private
specifier|final
name|ValueFactory
name|vf
init|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * {@link LDPath} instance of an unknown generic type (depends on the       * used Indexing source      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|LDPath
name|ldPath
decl_stmt|;
comment|/**      * The RDF backend      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|RDFBackend
name|backend
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|Configuration
name|configuration
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NodeTransformer
argument_list|>
name|transformer
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Program
name|program
decl_stmt|;
comment|/**      * If results are appended to the parsed Representation      */
specifier|private
name|boolean
name|appendMode
decl_stmt|;
comment|/**      * The indexing configuration      */
specifier|protected
name|IndexingConfig
name|indexingConfig
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|indexingConfig
operator|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
expr_stmt|;
name|Object
name|indexingSource
decl_stmt|;
comment|//we need to check for both EntityDataProvider and EntityDataIterator
name|indexingSource
operator|=
name|indexingConfig
operator|.
name|getEntityDataProvider
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexingSource
operator|==
literal|null
condition|)
block|{
name|indexingSource
operator|=
name|indexingConfig
operator|.
name|getDataIterable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|indexingSource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Indexing Configuration does not contain"
operator|+
literal|"neither an EntityDataProvider nor an EntityIdIterator!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexingSource
operator|instanceof
name|RDFBackend
argument_list|<
name|?
argument_list|>
condition|)
block|{
comment|//NOTE we use the EntityhubConfiguration to have the same pre-registered
comment|//     namespaces as the other components.
name|this
operator|.
name|backend
operator|=
operator|(
name|RDFBackend
operator|)
name|indexingSource
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
operator|new
name|EntityhubConfiguration
argument_list|(
name|vf
argument_list|)
expr_stmt|;
name|this
operator|.
name|transformer
operator|=
name|configuration
operator|.
name|getTransformers
argument_list|()
expr_stmt|;
name|this
operator|.
name|ldPath
operator|=
operator|new
name|LDPath
argument_list|(
name|backend
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The configured IndexingSource '"
operator|+
name|indexingSource
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"' does not support "
operator|+
literal|"LDPath (does not implement RDFBackend)! This Processor "
operator|+
literal|"can only be used with IndexingSources that support LDPath!"
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAMETER_LD_PATH
argument_list|)
decl_stmt|;
specifier|final
name|File
name|ldpathFile
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ldpathFile
operator|=
name|indexingConfig
operator|.
name|getConfigFile
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ldpathFile
operator|==
literal|null
operator|||
operator|!
name|ldpathFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configured '"
operator|+
name|PARAMETER_LD_PATH
operator|+
literal|"' file was not found!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ldpathFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configured '"
operator|+
name|PARAMETER_LD_PATH
operator|+
literal|"' file exists but is not a File!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing required configuration '"
operator|+
name|PARAMETER_LD_PATH
operator|+
literal|"' - the file containing the LDPath program used by this "
operator|+
name|LdpathProcessor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"!"
argument_list|)
throw|;
block|}
comment|//The backend needs not to be initialised to parse a program as
comment|//parsing only requires the "value converter" methods that need also to
comment|//work without initialising
comment|//if this is a Problem one can also move parsing to the init method
name|parseLdPathProgram
argument_list|(
name|ldpathFile
argument_list|)
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAMETER_APPEND
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|this
operator|.
name|appendMode
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|appendMode
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|appendMode
operator|=
name|DEFAULT_APPEND_MODE
expr_stmt|;
block|}
block|}
comment|/**      *       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|parseLdPathProgram
parameter_list|(
name|File
name|ldpathFile
parameter_list|)
block|{
name|Reader
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ldpathFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|ldPath
operator|.
name|parseProgram
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ldpath program: \n{}\n"
argument_list|,
name|program
operator|.
name|getPathExpression
argument_list|(
name|backend
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unabwle to read LDPath program from configured file '"
operator|+
name|ldpathFile
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse LDPath program from configured file '"
operator|+
name|ldpathFile
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{      }
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|Representation
name|process
parameter_list|(
name|Representation
name|source
parameter_list|)
block|{
name|Object
name|context
init|=
name|backend
operator|.
name|createURI
argument_list|(
name|source
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Representation
name|result
init|=
name|appendMode
condition|?
name|source
else|:
name|vf
operator|.
name|createRepresentation
argument_list|(
name|source
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|/*          * NOTE: LDPath will return Node instances of the RDFRepositroy if no          * transformation is defined for a statement (line) in the configured          * LDpath program (the ":: xsd:int" at the end). this Nodes need to be          * converted to valid Entityhub Representation values.          * As we can not know the generic type used by the RDFRepository          * implementation of the indexing source this is a little bit tricky.          * What this does is:          *   - for URIs it creates References          *   - for plain literal it adds natural texts          *   - for typed literals it uses the NodeTransformer registered with           *     the LDPath (or more precise the Configuration object parsed to           *     the LDPath in the constructor) to transform the values to          *     Java objects. If no transformer is found or an Exeption occurs          *     than the lexical form is used and added as String to the           *     Entityhub.          */
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|resultMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|program
operator|.
name|execute
argument_list|(
name|backend
argument_list|,
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|resultMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeTransformer
name|fieldTransformer
init|=
name|program
operator|.
name|getField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getTransformer
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldTransformer
operator|==
literal|null
operator|||
name|fieldTransformer
operator|instanceof
name|IdentityTransformer
argument_list|<
name|?
argument_list|>
condition|)
block|{
comment|//we need to convert the RDFBackend Node to an Representation object
for|for
control|(
name|Object
name|value
operator|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|backend
operator|.
name|isURI
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|result
operator|.
name|addReference
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|backend
operator|.
name|stringValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|backend
operator|.
name|isLiteral
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|//literal
name|Locale
name|locale
init|=
name|backend
operator|.
name|getLiteralLanguage
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|locale
operator|!=
literal|null
condition|)
block|{
comment|//text with language
name|String
name|lang
init|=
name|locale
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|result
operator|.
name|addNaturalText
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|backend
operator|.
name|stringValue
argument_list|(
name|value
argument_list|)
argument_list|,
name|lang
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|lang
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no language
name|URI
name|type
init|=
name|backend
operator|.
name|getLiteralType
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|//typed literal -> need to transform
name|NodeTransformer
name|nt
init|=
name|transformer
operator|.
name|get
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nt
operator|!=
literal|null
condition|)
block|{
comment|//add typed literal
try|try
block|{
name|result
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|nt
operator|.
name|transform
argument_list|(
name|backend
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unable to transform {} to dataType {} -> will use lexical form"
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|backend
operator|.
name|stringValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//no transformer
name|log
operator|.
name|info
argument_list|(
literal|"No transformer for type {} -> will use lexical form"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|backend
operator|.
name|stringValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//no langauge and no type -> literal with no language
name|result
operator|.
name|addNaturalText
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|backend
operator|.
name|stringValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//bNode
name|log
operator|.
name|info
argument_list|(
literal|"Ignore bNode {} (class: {})"
argument_list|,
name|value
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//end for all values
block|}
else|else
block|{
comment|//already a transformed values
name|result
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//just add all values
block|}
block|}
return|return
name|result
return|;
block|}
end_class

unit|}
end_unit

