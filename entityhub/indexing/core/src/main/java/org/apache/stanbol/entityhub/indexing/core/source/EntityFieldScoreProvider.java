begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityScoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_class
specifier|public
class|class
name|EntityFieldScoreProvider
implements|implements
name|EntityScoreProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PRAM_FIELD_NAME
init|=
literal|"field"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD_NAME
init|=
name|RdfResourceEnum
operator|.
name|signRank
operator|.
name|getUri
argument_list|()
decl_stmt|;
specifier|private
name|String
name|fieldName
decl_stmt|;
comment|/**      * Creates an instance that uses the field as specified by      * {@link RdfResourceEnum#signRank} to retrieve the score for an entity      */
specifier|public
name|EntityFieldScoreProvider
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an instance that uses the parsed field to retrieve the score for       * an entity or {@link RdfResourceEnum#signRank} in case<code>null</code>      * is parsed.      * @param fieldName the field used to retrieve the score from parsed      * {@link Representation}s or<code>null</code> to use the      * {@link RdfResourceEnum#signRank} field.      */
specifier|public
name|EntityFieldScoreProvider
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|DEFAULT_FIELD_NAME
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsData
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|process
parameter_list|(
name|Representation
name|entity
parameter_list|)
throws|throws
name|UnsupportedOperationException
block|{
name|Object
name|value
init|=
name|entity
operator|.
name|getFirst
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
name|Float
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
comment|//no initialisation needed
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PRAM_FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fieldName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

