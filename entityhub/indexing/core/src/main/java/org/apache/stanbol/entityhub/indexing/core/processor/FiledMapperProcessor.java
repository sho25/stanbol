begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FiledMapperProcessor
implements|implements
name|EntityProcessor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_MAPPINGS
init|=
literal|"mappings"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_VALUE_FACTORY
init|=
literal|"valueFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MAPPINGS_FILE_NAME
init|=
literal|"fieldMappings.txt"
decl_stmt|;
specifier|private
name|FieldMapper
name|mapper
decl_stmt|;
specifier|private
name|ValueFactory
name|vf
decl_stmt|;
specifier|private
name|NamespacePrefixService
name|nsPrefixService
decl_stmt|;
comment|/**      * This Constructor relays on that {@link #setConfiguration(Map)} is called      * afterwards!      */
specifier|public
name|FiledMapperProcessor
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internally used to initialise the {@link ValueFactory}      * @param vf the value factory or<code>null</code> to use the {@link InMemoryValueFactory}.      */
specifier|private
name|FiledMapperProcessor
parameter_list|(
name|ValueFactory
name|vf
parameter_list|)
block|{
name|setValueFactory
argument_list|(
name|vf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FiledMapperProcessor
parameter_list|(
name|FieldMapper
name|mapper
parameter_list|,
name|ValueFactory
name|vf
parameter_list|)
block|{
name|this
argument_list|(
name|vf
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed FieldMapper MUST NOT be NULL!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|FiledMapperProcessor
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|mappings
parameter_list|,
name|ValueFactory
name|vf
parameter_list|)
block|{
name|this
argument_list|(
name|vf
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field mappings MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|mapper
operator|=
name|FieldMappingUtils
operator|.
name|createDefaultFieldMapper
argument_list|(
name|mappings
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapper
operator|.
name|getMappings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed field mappings MUST contain at least a single valid mapping!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|FiledMapperProcessor
parameter_list|(
name|InputStream
name|mappings
parameter_list|,
name|ValueFactory
name|vf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|vf
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field mappings MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mapper
operator|=
name|createMapperFormStream
argument_list|(
name|mappings
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|process
parameter_list|(
name|Representation
name|source
parameter_list|)
block|{
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The mapper is not initialised. One must call setConfiguration to configure the FieldMapper!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|mapper
operator|.
name|applyMappings
argument_list|(
name|source
argument_list|,
name|vf
operator|.
name|createRepresentation
argument_list|(
name|source
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|vf
argument_list|)
return|;
block|}
block|}
comment|/**      * used by the different constructors to init the {@link ValueFactory}      * @param vf the value factory or<code>null</code> to use the default      */
specifier|private
name|void
name|setValueFactory
parameter_list|(
name|ValueFactory
name|vf
parameter_list|)
block|{
if|if
condition|(
name|vf
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|vf
operator|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|vf
operator|=
name|vf
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//nothing todo
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
comment|//nothing todo
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
name|nsPrefixService
operator|=
name|indexingConfig
operator|.
name|getNamespacePrefixService
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//use the mappings configured for the Index
name|this
operator|.
name|mapper
operator|=
name|FieldMappingUtils
operator|.
name|createDefaultFieldMapper
argument_list|(
name|indexingConfig
operator|.
name|getIndexFieldConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//load (other) mappings based on the provided mappings parameter
comment|//final File file = new File(indexingConfig.getConfigFolder(),value.toString());
name|File
name|mappings
init|=
name|indexingConfig
operator|.
name|getConfigFile
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappings
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|mappings
argument_list|)
decl_stmt|;
name|this
operator|.
name|mapper
operator|=
name|createMapperFormStream
argument_list|(
name|in
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to access FieldMapping file "
operator|+
name|value
operator|+
literal|" not found in configuration directory "
operator|+
name|indexingConfig
operator|.
name|getConfigFolder
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FieldMapping file "
operator|+
name|value
operator|+
literal|" not found in configuration directory "
operator|+
name|indexingConfig
operator|.
name|getConfigFolder
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//TODO: get the valueFactory form the config (currently an InMemory is
comment|//create by the default constructor!
block|}
comment|/**      * Utility that allows to create a FieldMapper form an inputStream.      * It uses {@link IOUtils#lineIterator(InputStream, String)} and parses it      * to {@link FieldMappingUtils#createDefaultFieldMapper(Iterator)}      * @param in the stream to read the mappings from      * @throws IOException on any error while reading the data from the stream      */
specifier|private
specifier|static
name|FieldMapper
name|createMapperFormStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
name|NamespacePrefixService
name|nps
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FieldMappingUtils
operator|.
name|createDefaultFieldMapper
argument_list|(
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|LineIterator
name|it
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|it
operator|.
name|nextLine
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|nps
argument_list|)
return|;
block|}
block|}
end_class

end_unit

