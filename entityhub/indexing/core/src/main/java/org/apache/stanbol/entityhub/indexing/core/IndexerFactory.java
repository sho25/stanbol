begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|impl
operator|.
name|IndexerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|ScoreNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|EntityIneratorToScoreProviderAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Factory used to create {@link Indexer} instances  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|IndexerFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * singleton instance      */
specifier|private
specifier|static
name|IndexerFactory
name|instance
init|=
literal|null
decl_stmt|;
comment|/**      * Singleton constructor      */
specifier|private
name|IndexerFactory
parameter_list|()
block|{
comment|//Singleton pattern
block|}
comment|/**      * Getter for the singleton of this factory      * @return the singleton      */
specifier|public
specifier|static
name|IndexerFactory
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|IndexerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**      * Creates an {@link Indexer} instance based on the configuration      * relative to the working directory.<p>      * The configuration is expected within "{workingdir}/indexing"      * @return The configured Indexer or an Exception when the configuration was      * not found or is not valid      */
specifier|public
name|Indexer
name|create
parameter_list|()
block|{
return|return
name|create
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates an {@link Indexer} instance based on the configuration. The       * configuration is expected within the "/indexing" directory of the parsed       * location.<p>      * In case a relative path is parsed the current working directory is used      * as context. That means that the configuration is expected within       * folder "{workingDir}/{parsedPath}/indexing". For absolute paths the      * configuration is expected at "{parsedPath}/indexing".      * @return The configured Indexer or an Exception when the configuration was      * not found or is not valid      */
specifier|public
name|Indexer
name|create
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Internally used for unit testing. Allows to parse an offset for loading      * the indexer configuration from the classpath. Currently a protected      * feature, but might be moved to the public API at a later point of time.      * (would allow to include multiple default configurations via the      * classpath).      * @param dir      * @param classpathOffset      * @return      */
specifier|protected
name|Indexer
name|create
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|classpathOffset
parameter_list|)
block|{
name|Indexer
name|indexer
decl_stmt|;
name|IndexingConfig
name|config
decl_stmt|;
if|if
condition|(
name|classpathOffset
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
operator|new
name|IndexingConfig
argument_list|(
name|dir
argument_list|,
name|classpathOffset
argument_list|)
block|{}
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|IndexingConfig
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
comment|//get the mode based on the configured IndexingComponents
name|EntityDataIterable
name|dataIterable
init|=
name|config
operator|.
name|getDataIterable
argument_list|()
decl_stmt|;
name|EntityIterator
name|idIterator
init|=
name|config
operator|.
name|getEntityIdIterator
argument_list|()
decl_stmt|;
name|EntityDataProvider
name|dataProvider
init|=
name|config
operator|.
name|getEntityDataProvider
argument_list|()
decl_stmt|;
name|EntityScoreProvider
name|scoreProvider
init|=
name|config
operator|.
name|getEntityScoreProvider
argument_list|()
decl_stmt|;
name|IndexingDestination
name|destination
init|=
name|config
operator|.
name|getIndexingDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The indexing configuration does not provide an "
operator|+
literal|"indexing destination. This needs to be configured by the key "
operator|+
literal|"'{}' in the indexing.properties within the directory {}"
argument_list|,
name|IndexingConstants
operator|.
name|KEY_INDEXING_DESTINATION
argument_list|,
name|config
operator|.
name|getConfigFolder
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No IndexingDestination present"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|processors
init|=
name|config
operator|.
name|getEntityProcessors
argument_list|()
decl_stmt|;
if|if
condition|(
name|processors
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The indexing configuration does not provide an "
operator|+
literal|"entity processor. This needs to be configured by the key "
operator|+
literal|"'{}' in the indexing.properties within the directory {}"
argument_list|,
name|IndexingConstants
operator|.
name|KEY_ENTITY_PROCESSOR
argument_list|,
name|config
operator|.
name|getConfigFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|postProcessors
init|=
name|config
operator|.
name|getEntityPostProcessors
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Present Source Configuration:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - EntityDataIterable: {}"
argument_list|,
name|dataIterable
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - EntityIterator: {}"
argument_list|,
name|idIterator
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - EntityDataProvider: {}"
argument_list|,
name|dataProvider
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - EntityScoreProvider: {}"
argument_list|,
name|scoreProvider
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - EntityProcessors ({}):"
argument_list|,
name|processors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|postProcessors
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - EntityPostProcessors ({}):"
argument_list|,
name|postProcessors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|EntityProcessor
name|processor
range|:
name|processors
control|)
block|{
name|i
operator|++
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    {}) {}"
argument_list|,
name|i
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataIterable
operator|!=
literal|null
operator|&&
name|scoreProvider
operator|!=
literal|null
condition|)
block|{
comment|// iterate over data and lookup scores
name|indexer
operator|=
operator|new
name|IndexerImpl
argument_list|(
name|dataIterable
argument_list|,
name|scoreProvider
argument_list|,
name|config
operator|.
name|getNormaliser
argument_list|()
argument_list|,
name|destination
argument_list|,
name|processors
argument_list|,
name|config
operator|.
name|getIndexedEntitiesIdsFile
argument_list|()
argument_list|,
name|postProcessors
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|idIterator
operator|!=
literal|null
operator|&&
name|dataProvider
operator|!=
literal|null
condition|)
block|{
comment|// iterate over id and lookup data
name|indexer
operator|=
operator|new
name|IndexerImpl
argument_list|(
name|idIterator
argument_list|,
name|dataProvider
argument_list|,
name|config
operator|.
name|getNormaliser
argument_list|()
argument_list|,
name|destination
argument_list|,
name|processors
argument_list|,
name|config
operator|.
name|getIndexedEntitiesIdsFile
argument_list|()
argument_list|,
name|postProcessors
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataIterable
operator|!=
literal|null
operator|&&
name|idIterator
operator|!=
literal|null
condition|)
block|{
comment|// create an EntityIterator to EntityScoreProvider adapter
name|log
operator|.
name|info
argument_list|(
literal|"Create Adapter from the configured EntityIterator '{}' to the "
operator|+
literal|"required EntityScoreProvider as needed together with the "
operator|+
literal|"configured EntityDataIterable '{}'"
argument_list|,
name|idIterator
operator|.
name|getClass
argument_list|()
argument_list|,
name|dataIterable
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|indexer
operator|=
operator|new
name|IndexerImpl
argument_list|(
name|dataIterable
argument_list|,
operator|new
name|EntityIneratorToScoreProviderAdapter
argument_list|(
name|idIterator
argument_list|)
argument_list|,
name|config
operator|.
name|getNormaliser
argument_list|()
argument_list|,
name|destination
argument_list|,
name|processors
argument_list|,
name|config
operator|.
name|getIndexedEntitiesIdsFile
argument_list|()
argument_list|,
name|postProcessors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid Indexing Source configuration: "
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" - To iterate over the data and lookup scores one need to "
operator|+
literal|"configure an EntityDataIterable and an EntityScoreProvider "
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" - To iterate over the Id and and lookup data one need to "
operator|+
literal|"configure an EntityIterator and an EntityDataProvider"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Indexing Source configuration"
argument_list|)
throw|;
block|}
return|return
name|indexer
return|;
block|}
specifier|public
name|Indexer
name|create
parameter_list|(
name|EntityIterator
name|idIterator
parameter_list|,
name|EntityDataProvider
name|dataProvider
parameter_list|,
name|ScoreNormaliser
name|normaliser
parameter_list|,
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|processors
parameter_list|,
name|IndexingDestination
name|destination
parameter_list|)
block|{
return|return
operator|new
name|IndexerImpl
argument_list|(
name|idIterator
argument_list|,
name|dataProvider
argument_list|,
name|normaliser
argument_list|,
name|destination
argument_list|,
name|processors
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Indexer
name|create
parameter_list|(
name|EntityIterator
name|idIterator
parameter_list|,
name|EntityDataProvider
name|dataProvider
parameter_list|,
name|ScoreNormaliser
name|normaliser
parameter_list|,
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|processors
parameter_list|,
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|postProcessors
parameter_list|,
name|IndexingDestination
name|destination
parameter_list|)
block|{
name|File
name|tmp
decl_stmt|;
try|try
block|{
name|tmp
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ind-ent-ids"
argument_list|,
literal|"zip"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create temporary file for storing the"
operator|+
literal|"indexed Entity IDs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|IndexerImpl
argument_list|(
name|idIterator
argument_list|,
name|dataProvider
argument_list|,
name|normaliser
argument_list|,
name|destination
argument_list|,
name|processors
argument_list|,
name|tmp
argument_list|,
name|postProcessors
argument_list|)
return|;
block|}
specifier|public
name|Indexer
name|create
parameter_list|(
name|EntityDataIterable
name|dataIterable
parameter_list|,
name|EntityScoreProvider
name|scoreProvider
parameter_list|,
name|ScoreNormaliser
name|normaliser
parameter_list|,
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|processors
parameter_list|,
name|IndexingDestination
name|destination
parameter_list|)
block|{
return|return
operator|new
name|IndexerImpl
argument_list|(
name|dataIterable
argument_list|,
name|scoreProvider
argument_list|,
name|normaliser
argument_list|,
name|destination
argument_list|,
name|processors
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Indexer
name|create
parameter_list|(
name|EntityDataIterable
name|dataIterable
parameter_list|,
name|EntityScoreProvider
name|scoreProvider
parameter_list|,
name|ScoreNormaliser
name|normaliser
parameter_list|,
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|processors
parameter_list|,
name|List
argument_list|<
name|EntityProcessor
argument_list|>
name|postProcessors
parameter_list|,
name|IndexingDestination
name|destination
parameter_list|)
block|{
name|File
name|tmp
decl_stmt|;
try|try
block|{
name|tmp
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ind-ent-ids"
argument_list|,
literal|"zip"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create temporary file for storing the"
operator|+
literal|"indexed Entity IDs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|IndexerImpl
argument_list|(
name|dataIterable
argument_list|,
name|scoreProvider
argument_list|,
name|normaliser
argument_list|,
name|destination
argument_list|,
name|processors
argument_list|,
name|tmp
argument_list|,
name|postProcessors
argument_list|)
return|;
block|}
block|}
end_class

end_unit

