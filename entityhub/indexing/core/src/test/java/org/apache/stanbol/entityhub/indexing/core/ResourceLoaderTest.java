begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ResourceLoaderTest
block|{
comment|/**      * mvn copies the resources in "src/test/resources" to target/test-classes      */
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CONFIGS_ROOT
init|=
name|FilenameUtils
operator|.
name|separatorsToSystem
argument_list|(
literal|"/target/test-classes/resourceLoaderTest/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FOLDER_NAME
init|=
name|FilenameUtils
operator|.
name|separatorsToSystem
argument_list|(
literal|"testFolder/"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceLoaderTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|rootDir
decl_stmt|;
specifier|public
specifier|static
class|class
name|DummyResourceImporter
implements|implements
name|ResourceImporter
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedNames
decl_stmt|;
name|DummyResourceImporter
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResource
parameter_list|)
block|{
name|this
operator|.
name|expectedNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|expectedResource
control|)
block|{
comment|//this works only if there are not two files with the same name
comment|//so add an assertion to check for that
name|String
name|name
init|=
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"This Test requires that there are no files with the same name!"
argument_list|,
name|expectedNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ResourceState
name|importResource
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|resourceName
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resourceName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"resourceName '"
operator|+
name|resourceName
operator|+
literal|"' not expected"
argument_list|,
name|expectedNames
operator|.
name|remove
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Import Resource {}"
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceName
operator|.
name|startsWith
argument_list|(
literal|"ignore"
argument_list|)
condition|)
block|{
return|return
name|ResourceState
operator|.
name|IGNORED
return|;
block|}
elseif|else
if|if
condition|(
name|resourceName
operator|.
name|startsWith
argument_list|(
literal|"error"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"To test an Error"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|ResourceState
operator|.
name|LOADED
return|;
block|}
block|}
specifier|public
name|void
name|checkAllProcessed
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|expectedNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDir
operator|==
literal|null
condition|)
block|{
name|baseDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
block|}
name|rootDir
operator|=
name|baseDir
operator|+
name|TEST_CONFIGS_ROOT
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleFile
parameter_list|()
block|{
name|DummyResourceImporter
name|importer
init|=
operator|new
name|DummyResourceImporter
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rootDir
operator|+
literal|"singleFileTest.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|ResourceLoader
name|loader
init|=
operator|new
name|ResourceLoader
argument_list|(
name|importer
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addResource
argument_list|(
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"singleFileTest.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rootDir
operator|+
literal|"singleFileTest.txt"
argument_list|)
argument_list|)
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|ERROR
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|LOADED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rootDir
operator|+
literal|"singleFileTest.txt"
argument_list|)
argument_list|)
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|LOADED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|ERROR
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|importer
operator|.
name|checkAllProcessed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailOnError
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|isFailedOnError
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isFailedOnError
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFolderWithoutProcessingArchives
parameter_list|()
block|{
name|String
name|folder
init|=
name|rootDir
operator|+
name|TEST_FOLDER_NAME
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedFolderResources
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"archiveInFolder.zip"
argument_list|,
name|folder
operator|+
literal|"archiveWithIgnore.zip"
argument_list|,
name|folder
operator|+
literal|"archiveWithError.zip"
argument_list|,
name|folder
operator|+
literal|"errorFileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"fileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"ignoreFileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"otherFileInFolder.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|DummyResourceImporter
name|importer
init|=
operator|new
name|DummyResourceImporter
argument_list|(
name|expectedFolderResources
argument_list|)
decl_stmt|;
name|ResourceLoader
name|loader
init|=
operator|new
name|ResourceLoader
argument_list|(
name|importer
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addResource
argument_list|(
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"testFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFolderResources
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|ERROR
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|LOADED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"archiveInFolder.zip"
argument_list|,
name|folder
operator|+
literal|"fileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"otherFileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"archiveWithIgnore.zip"
argument_list|,
name|folder
operator|+
literal|"archiveWithError.zip"
argument_list|)
argument_list|)
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|LOADED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"errorFileInFolder.txt"
argument_list|)
argument_list|)
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|ERROR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"ignoreFileInFolder.txt"
argument_list|)
argument_list|)
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFolderWithProcessingArchives
parameter_list|()
block|{
name|String
name|folder
init|=
name|rootDir
operator|+
name|TEST_FOLDER_NAME
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResources
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"archiveInFolder.zip"
argument_list|,
name|folder
operator|+
literal|"archiveWithIgnore.zip"
argument_list|,
name|folder
operator|+
literal|"archiveWithError.zip"
argument_list|,
name|folder
operator|+
literal|"errorFileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"fileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"ignoreFileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"otherFileInFolder.txt"
argument_list|)
argument_list|)
decl_stmt|;
comment|//the resourceNames send to the importer are now different because the
comment|//archives are processed and the entries are sent to the  ResourceImporter
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResourceNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fileInArchive.txt"
argument_list|,
comment|//part of archiveInFolder.zip
literal|"otherFileInArchive.txt"
argument_list|,
comment|//part of archiveInFolder.zip
literal|"ignoreFileInArchive.txt"
argument_list|,
comment|//part of archiveWithIgnore.zip
literal|"errorFileInArchive.txt"
argument_list|,
comment|//part of archiveWithError.zip
literal|"errorFileInFolder.txt"
argument_list|,
literal|"fileInFolder.txt"
argument_list|,
literal|"ignoreFileInFolder.txt"
argument_list|,
literal|"otherFileInFolder.txt"
argument_list|)
decl_stmt|;
name|DummyResourceImporter
name|importer
init|=
operator|new
name|DummyResourceImporter
argument_list|(
name|expectedResourceNames
argument_list|)
decl_stmt|;
name|ResourceLoader
name|loader
init|=
operator|new
name|ResourceLoader
argument_list|(
name|importer
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addResource
argument_list|(
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|TEST_FOLDER_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResources
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|ERROR
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|LOADED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"archiveInFolder.zip"
argument_list|,
name|folder
operator|+
literal|"archiveWithIgnore.zip"
argument_list|,
comment|//ignored files in archives are OK
name|folder
operator|+
literal|"fileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"otherFileInFolder.txt"
argument_list|)
argument_list|)
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|LOADED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"errorFileInFolder.txt"
argument_list|,
name|folder
operator|+
literal|"archiveWithError.zip"
argument_list|)
argument_list|)
argument_list|,
comment|//archive with errors MUST be ERROR
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|ERROR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"ignoreFileInFolder.txt"
argument_list|)
argument_list|)
argument_list|,
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|IGNORED
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isFailedOnError
parameter_list|(
name|boolean
name|failOnError
parameter_list|)
block|{
name|String
name|folder
init|=
name|rootDir
operator|+
name|TEST_FOLDER_NAME
decl_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
name|DummyResourceImporter
name|importer
init|=
operator|new
name|DummyResourceImporter
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|folder
operator|+
literal|"errorFileInFolder.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|ResourceLoader
name|loader
init|=
operator|new
name|ResourceLoader
argument_list|(
name|importer
argument_list|,
literal|false
argument_list|,
name|failOnError
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addResource
argument_list|(
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"errorFileInFolder.txt"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|loader
operator|.
name|loadResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|failed
return|;
block|}
block|}
end_class

end_unit

