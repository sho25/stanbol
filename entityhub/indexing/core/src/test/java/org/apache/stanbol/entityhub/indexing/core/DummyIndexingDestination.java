begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_comment
comment|/**  * Dummy implementation of an {@link IndexingDestination} that writes results  * directly into {@link IndexerTest#indexedData}  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|DummyIndexingDestination
implements|implements
name|IndexingDestination
block|{
name|Yard
name|yard
init|=
operator|new
name|Yard
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|update
parameter_list|(
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|representations
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
name|Collection
argument_list|<
name|Representation
argument_list|>
name|updated
init|=
operator|new
name|ArrayList
argument_list|<
name|Representation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Representation
name|rep
range|:
name|representations
control|)
block|{
try|try
block|{
name|updated
operator|.
name|add
argument_list|(
name|update
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|updated
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|updated
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|update
parameter_list|(
name|Representation
name|represnetation
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|represnetation
operator|==
literal|null
condition|)
block|{
return|return
name|represnetation
return|;
block|}
if|if
condition|(
name|IndexerTest
operator|.
name|indexedData
operator|.
name|containsKey
argument_list|(
name|represnetation
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|IndexerTest
operator|.
name|indexedData
operator|.
name|put
argument_list|(
name|represnetation
operator|.
name|getId
argument_list|()
argument_list|,
name|represnetation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Representation "
operator|+
name|represnetation
operator|.
name|getId
argument_list|()
operator|+
literal|" not present in store"
argument_list|)
throw|;
block|}
return|return
name|represnetation
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|store
parameter_list|(
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|representations
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|YardException
block|{
for|for
control|(
name|Representation
name|rep
range|:
name|representations
control|)
block|{
name|store
argument_list|(
name|rep
argument_list|)
expr_stmt|;
block|}
return|return
name|representations
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|store
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|YardException
block|{
if|if
condition|(
name|representation
operator|!=
literal|null
condition|)
block|{
name|IndexerTest
operator|.
name|indexedData
operator|.
name|put
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|,
name|representation
argument_list|)
expr_stmt|;
block|}
return|return
name|representation
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|IndexerTest
operator|.
name|indexedData
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|IndexerTest
operator|.
name|indexedData
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValueFactory
name|getValueFactory
parameter_list|()
block|{
return|return
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|getRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|IndexerTest
operator|.
name|indexedData
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldQueryFactory
name|getQueryFactory
parameter_list|()
block|{
return|return
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"dummyYard"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"dummyYard"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Dummy Implementation of the Yard interface for unit testing"
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|findRepresentation
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"I think this is not needed for testing"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"I think this is not needed for testing"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"I think this is not needed for testing"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|create
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
return|return
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createRepresentation
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|create
parameter_list|()
throws|throws
name|YardException
block|{
return|return
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createRepresentation
argument_list|(
literal|"urn:"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"-"
operator|+
name|Math
operator|.
name|random
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAll
parameter_list|()
throws|throws
name|YardException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"I think this is not needed for testing"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|finalise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|Yard
name|getYard
parameter_list|()
block|{
return|return
name|yard
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{     }
block|}
end_class

end_unit

