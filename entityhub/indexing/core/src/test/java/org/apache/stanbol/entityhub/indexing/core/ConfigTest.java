begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|MinScoreNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|NaturalLogNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|RangeNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|ScoreNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|LineBasedEntityIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * mvn copies the resources in "src/test/resources" to target/test-classes      */
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CONFIGS_ROOT
init|=
literal|"/target/test-classes/testConfigs/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|testRoot
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initTestRootFolder
parameter_list|()
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDir
operator|==
literal|null
condition|)
block|{
name|baseDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
block|}
name|testRoot
operator|=
name|baseDir
operator|+
name|TEST_CONFIGS_ROOT
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ConfigTest Root ="
operator|+
name|testRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingRoot
parameter_list|()
block|{
operator|new
name|IndexingConfig
argument_list|()
expr_stmt|;
comment|//there is no indexing folder in the user.dir
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingConfigDir
parameter_list|()
block|{
operator|new
name|IndexingConfig
argument_list|(
name|testRoot
operator|+
literal|"missingconfig"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|loadSimpleConfigDir
parameter_list|()
block|{
name|IndexingConfig
name|config
init|=
operator|new
name|IndexingConfig
argument_list|(
name|testRoot
operator|+
literal|"simple"
argument_list|)
decl_stmt|;
comment|//test the name
name|assertEquals
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|config
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|"Simple Configuration"
argument_list|)
expr_stmt|;
comment|//test if the normaliser configuration was parsed correctly!
specifier|final
name|ScoreNormaliser
name|normaliser
init|=
name|config
operator|.
name|getNormaliser
argument_list|()
decl_stmt|;
name|ScoreNormaliser
name|testNormaliser
init|=
name|normaliser
decl_stmt|;
name|assertNotNull
argument_list|(
name|testNormaliser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNormaliser
operator|.
name|getClass
argument_list|()
argument_list|,
name|RangeNormaliser
operator|.
name|class
argument_list|)
expr_stmt|;
name|testNormaliser
operator|=
name|testNormaliser
operator|.
name|getChained
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|testNormaliser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNormaliser
operator|.
name|getClass
argument_list|()
argument_list|,
name|NaturalLogNormaliser
operator|.
name|class
argument_list|)
expr_stmt|;
name|testNormaliser
operator|=
name|testNormaliser
operator|.
name|getChained
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|testNormaliser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNormaliser
operator|.
name|getClass
argument_list|()
argument_list|,
name|MinScoreNormalizer
operator|.
name|class
argument_list|)
expr_stmt|;
name|EntityIterator
name|entityIterator
init|=
name|config
operator|.
name|getEntityIdIterator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entityIterator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entityIterator
operator|.
name|getClass
argument_list|()
argument_list|,
name|LineBasedEntityIterator
operator|.
name|class
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entityIds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
comment|//the values test if the normaliser configuration was readed correctly
comment|//the keys if the configured entiyScore file was configured correctly
name|float
name|boost
init|=
literal|10f
operator|/
operator|(
name|float
operator|)
name|Math
operator|.
name|log1p
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|entityIds
operator|.
name|put
argument_list|(
literal|"http://www.example.org/entity/test"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|entityIds
operator|.
name|put
argument_list|(
literal|"http://www.example.org/entity/test2"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log1p
argument_list|(
literal|10
argument_list|)
operator|*
name|boost
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entityIds
operator|.
name|put
argument_list|(
literal|"http://www.example.org/entity/test3"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|entityIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EntityIterator
operator|.
name|EntityScore
name|entityScore
init|=
name|entityIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Float
name|expectedScore
init|=
name|entityIds
operator|.
name|remove
argument_list|(
name|entityScore
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Entity with ID "
operator|+
name|entityScore
operator|.
name|id
operator|+
literal|" not found!"
argument_list|,
name|expectedScore
argument_list|)
expr_stmt|;
name|Float
name|score
init|=
name|normaliser
operator|.
name|normalise
argument_list|(
name|entityScore
operator|.
name|score
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Entity score "
operator|+
name|score
operator|+
literal|" is not the expected "
operator|+
name|expectedScore
argument_list|,
name|expectedScore
operator|.
name|compareTo
argument_list|(
name|score
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|entityIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|EntityProcessor
name|processor
init|=
name|config
operator|.
name|getEntityProcessor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

