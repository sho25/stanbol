begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|MinScoreNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|NaturalLogNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|RangeNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|normaliser
operator|.
name|ScoreNormaliser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|LineBasedEntityIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_ROOT
init|=
name|FilenameUtils
operator|.
name|separatorsToSystem
argument_list|(
literal|"testConfigs/"
argument_list|)
decl_stmt|;
comment|/**      * mvn copies the resources in "src/test/resources" to target/test-classes.      * This folder is than used as classpath.<p>      * "/target/test-files/" does not exist, but is created by the      * {@link IndexingConfig}.      */
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ROOT
init|=
name|FilenameUtils
operator|.
name|separatorsToSystem
argument_list|(
literal|"/target/test-files"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|userDir
decl_stmt|;
specifier|private
specifier|static
name|String
name|testRoot
decl_stmt|;
comment|/**      * The methods resets the "user.dir" system property      */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initTestRootFolder
parameter_list|()
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDir
operator|==
literal|null
condition|)
block|{
name|baseDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
block|}
comment|//store the current user.dir
name|userDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
name|testRoot
operator|=
name|baseDir
operator|+
name|TEST_ROOT
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ConfigTest Root : "
operator|+
name|testRoot
argument_list|)
expr_stmt|;
comment|//set the user.dir to the testRoot (needed to test loading of missing
comment|//configurations via classpath
comment|//store the current user.dir and reset it after the tests
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.dir"
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
block|}
comment|/**      * resets the "user.dir" system property the the original value      */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.dir"
argument_list|,
name|userDir
argument_list|)
expr_stmt|;
block|}
comment|/**      * In the test setup there is no default configuration      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingDefault
parameter_list|()
block|{
operator|new
name|IndexingConfig
argument_list|()
expr_stmt|;
comment|//there is no indexing folder in the user.dir
block|}
comment|/**      * Tests failed initialisation because the configuration folder does not       * exist and no configuration with the name does exist      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingConfig
parameter_list|()
block|{
comment|//this should create the specified folder and than throw an
comment|//illegalArgumentException because the indexing.properties file can not
comment|//be found in the classpath under
operator|new
name|IndexingConfig
argument_list|(
name|CONFIG_ROOT
operator|+
literal|"noConfig"
argument_list|)
expr_stmt|;
block|}
comment|/**      * In this case the config exists in the classpath, but is not valid because      * the required indexing.properties is missing      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|missingConfigDir
parameter_list|()
block|{
operator|new
name|IndexingConfig
argument_list|(
name|CONFIG_ROOT
operator|+
literal|"missingconfig"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads a simple but not functional configuration to test the loading and      * parsing of configuration files      */
annotation|@
name|Test
specifier|public
name|void
name|loadSimpleConfigDir
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|CONFIG_ROOT
operator|+
literal|"simple"
decl_stmt|;
name|IndexingConfig
name|config
init|=
operator|new
name|IndexingConfig
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|//assert that this directory exists (is created)
name|File
name|expectedRoot
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|expectedRoot
operator|=
operator|new
name|File
argument_list|(
name|expectedRoot
argument_list|,
literal|"indexing"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Root Dir not created"
argument_list|,
name|expectedRoot
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root dir other the expected "
argument_list|,
name|expectedRoot
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|config
operator|.
name|getRootFolder
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|config
operator|.
name|getConfigFolder
argument_list|()
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|config
operator|.
name|getSourceFolder
argument_list|()
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|config
operator|.
name|getDestinationFolder
argument_list|()
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|config
operator|.
name|getDistributionFolder
argument_list|()
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|//test the name
name|assertEquals
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|config
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|"Simple Configuration"
argument_list|)
expr_stmt|;
comment|//test if the normaliser configuration was parsed correctly!
specifier|final
name|ScoreNormaliser
name|normaliser
init|=
name|config
operator|.
name|getNormaliser
argument_list|()
decl_stmt|;
comment|//test if the config files where copied form the classpath to the
comment|//config directory.
name|assertTrue
argument_list|(
literal|"Config File for the RangeNormaliser not copied"
argument_list|,
operator|new
name|File
argument_list|(
name|config
operator|.
name|getConfigFolder
argument_list|()
argument_list|,
literal|"range.properties"
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Config File for the MinScoreNormalizer not copied"
argument_list|,
operator|new
name|File
argument_list|(
name|config
operator|.
name|getConfigFolder
argument_list|()
argument_list|,
literal|"minscore.properties"
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
comment|//now test if the configuration was parsed correctly
name|ScoreNormaliser
name|testNormaliser
init|=
name|normaliser
decl_stmt|;
name|assertNotNull
argument_list|(
name|testNormaliser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNormaliser
operator|.
name|getClass
argument_list|()
argument_list|,
name|RangeNormaliser
operator|.
name|class
argument_list|)
expr_stmt|;
name|testNormaliser
operator|=
name|testNormaliser
operator|.
name|getChained
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|testNormaliser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNormaliser
operator|.
name|getClass
argument_list|()
argument_list|,
name|NaturalLogNormaliser
operator|.
name|class
argument_list|)
expr_stmt|;
name|testNormaliser
operator|=
name|testNormaliser
operator|.
name|getChained
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|testNormaliser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNormaliser
operator|.
name|getClass
argument_list|()
argument_list|,
name|MinScoreNormalizer
operator|.
name|class
argument_list|)
expr_stmt|;
name|EntityIterator
name|entityIterator
init|=
name|config
operator|.
name|getEntityIdIterator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entityIterator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entityIterator
operator|.
name|getClass
argument_list|()
argument_list|,
name|LineBasedEntityIterator
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|entityIterator
operator|.
name|needsInitialisation
argument_list|()
condition|)
block|{
name|entityIterator
operator|.
name|initialise
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entityIds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
comment|//the values test if the normaliser configuration was readed correctly
comment|//the keys if the configured entiyScore file was configured correctly
name|float
name|boost
init|=
literal|10f
operator|/
operator|(
name|float
operator|)
name|Math
operator|.
name|log1p
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|entityIds
operator|.
name|put
argument_list|(
literal|"http://www.example.org/entity/test"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|entityIds
operator|.
name|put
argument_list|(
literal|"http://www.example.org/entity/test2"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log1p
argument_list|(
literal|10
argument_list|)
operator|*
name|boost
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entityIds
operator|.
name|put
argument_list|(
literal|"http://www.example.org/entity/test3"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|entityIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EntityIterator
operator|.
name|EntityScore
name|entityScore
init|=
name|entityIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Float
name|expectedScore
init|=
name|entityIds
operator|.
name|remove
argument_list|(
name|entityScore
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Entity with ID "
operator|+
name|entityScore
operator|.
name|id
operator|+
literal|" not found!"
argument_list|,
name|expectedScore
argument_list|)
expr_stmt|;
name|Float
name|score
init|=
name|normaliser
operator|.
name|normalise
argument_list|(
name|entityScore
operator|.
name|score
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Entity score "
operator|+
name|score
operator|+
literal|" is not the expected "
operator|+
name|expectedScore
argument_list|,
name|expectedScore
operator|.
name|compareTo
argument_list|(
name|score
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|entityIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|EntityProcessor
name|processor
init|=
name|config
operator|.
name|getEntityProcessor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

