begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|IndexerTest
block|{
comment|/**      * The number of Entities added to the {@link #testData}<p>      * Should be> 100000 to test printing of the Indexing statistics after      * 100000 entities.<p>      * Note that the source and the indexed entities are kept in memory!      */
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ENTITIES
init|=
literal|101000
decl_stmt|;
comment|/**      * Holds the test data as defined by a static{} block      */
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|testData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Hold the results of the indexing process      */
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|indexedData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * mvn copies the resources in "src/test/resources" to target/test-classes      */
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FOLDER_NAME
init|=
literal|"/target/test-classes/indexerTests/"
decl_stmt|;
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|rootDir
decl_stmt|;
specifier|private
specifier|static
name|IndexerFactory
name|factory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DC_TITLE
init|=
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"title"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DC_CREATED
init|=
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"created"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DC_CREATOR
init|=
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"creator"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RDF_TYPE
init|=
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENTITY_RANK
init|=
name|RdfResourceEnum
operator|.
name|signRank
operator|.
name|getUri
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|EXPECTED_LANGUAGES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"en"
argument_list|,
literal|"de"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|EXPECTED_MAX_RANK
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|MAX_INCOMMING
init|=
literal|10000
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDir
operator|==
literal|null
condition|)
block|{
name|baseDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
block|}
name|rootDir
operator|=
name|baseDir
operator|+
name|TEST_FOLDER_NAME
expr_stmt|;
name|factory
operator|=
name|IndexerFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanIndexed
parameter_list|()
block|{
name|indexedData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataInteratingMode
parameter_list|()
block|{
name|Indexer
name|indexer
init|=
name|factory
operator|.
name|create
argument_list|(
name|rootDir
operator|+
literal|"dataIterating"
argument_list|)
decl_stmt|;
name|indexer
operator|.
name|index
argument_list|()
expr_stmt|;
comment|//check that all entities have been indexed
name|validateAllIndexed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityIdIteratingMode
parameter_list|()
block|{
name|Indexer
name|indexer
init|=
name|factory
operator|.
name|create
argument_list|(
name|rootDir
operator|+
literal|"idIterating"
argument_list|)
decl_stmt|;
name|indexer
operator|.
name|index
argument_list|()
expr_stmt|;
comment|//check that all entities have been indexed
name|validateAllIndexed
argument_list|()
expr_stmt|;
block|}
comment|/**      * validate the all the indexed resources!<p>      * NOTE: That the asserts expect a specific configuration as provided by the      * directory used to create the {@link IndexerFactory} used to initialise      * the test.      */
specifier|private
name|void
name|validateAllIndexed
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Number of Indexed Entities "
operator|+
name|indexedData
operator|.
name|size
argument_list|()
operator|+
literal|"!= the Number of Source Entities "
operator|+
name|NUM_ENTITIES
argument_list|,
name|NUM_ENTITIES
argument_list|,
name|indexedData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Validate Indexing Results:"
argument_list|)
expr_stmt|;
name|float
name|maxRank
init|=
literal|0
decl_stmt|;
name|float
name|minRank
init|=
name|EXPECTED_MAX_RANK
decl_stmt|;
name|double
name|rankSum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Representation
argument_list|>
name|entry
range|:
name|indexedData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|float
name|rank
init|=
name|validateIndexed
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rank
operator|>
name|maxRank
condition|)
block|{
name|maxRank
operator|=
name|rank
expr_stmt|;
block|}
if|if
condition|(
name|rank
operator|<
name|minRank
condition|)
block|{
name|minRank
operator|=
name|rank
expr_stmt|;
block|}
name|rankSum
operator|+=
name|rank
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Entity Rank:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" - maximum %8.5f"
argument_list|,
name|maxRank
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" - minimum %8.5f"
argument_list|,
name|minRank
argument_list|)
argument_list|)
expr_stmt|;
comment|//expected
name|double
name|expectedAverage
init|=
name|Math
operator|.
name|log1p
argument_list|(
name|MAX_INCOMMING
operator|/
literal|2
argument_list|)
operator|*
name|EXPECTED_MAX_RANK
operator|/
name|Math
operator|.
name|log1p
argument_list|(
name|MAX_INCOMMING
argument_list|)
decl_stmt|;
name|double
name|average
init|=
name|rankSum
operator|/
name|NUM_ENTITIES
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" - average %8.5f (expected %8.5f) "
argument_list|,
name|average
argument_list|,
name|expectedAverage
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"average score %8.5f is more than 5 precent lower than the expeded average %8.5f"
argument_list|,
name|average
argument_list|,
name|expectedAverage
argument_list|)
argument_list|,
name|average
operator|>
name|expectedAverage
operator|-
operator|(
literal|0.05
operator|*
name|EXPECTED_MAX_RANK
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"average score %8.5f is more than 5 precent higher than the expeded average %8.5f"
argument_list|,
name|average
argument_list|,
name|expectedAverage
argument_list|)
argument_list|,
name|average
operator|<
name|expectedAverage
operator|+
operator|(
literal|0.05
operator|*
name|EXPECTED_MAX_RANK
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|float
name|validateIndexed
parameter_list|(
name|Representation
name|rep
parameter_list|)
block|{
comment|//first check that the dc-element fields are mapped to dc-terms
name|Object
name|value
init|=
name|rep
operator|.
name|getFirst
argument_list|(
name|DC_CREATOR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|value
operator|=
name|rep
operator|.
name|getFirst
argument_list|(
name|DC_CREATED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|types
init|=
name|rep
operator|.
name|get
argument_list|(
name|RDF_TYPE
argument_list|)
init|;
name|types
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|value
operator|=
name|types
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Reference
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|Reference
operator|)
name|value
operator|)
operator|.
name|getReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|types
init|=
name|rep
operator|.
name|get
argument_list|(
name|DC_TITLE
argument_list|)
init|;
name|types
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|value
operator|=
name|types
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Text
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|EXPECTED_LANGUAGES
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Float
name|rankObject
init|=
name|rep
operator|.
name|getFirst
argument_list|(
name|ENTITY_RANK
argument_list|,
name|Float
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rankObject
argument_list|)
expr_stmt|;
name|float
name|rank
init|=
name|rankObject
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Rank"
operator|+
name|rank
operator|+
literal|"> expected maximum "
operator|+
name|EXPECTED_MAX_RANK
argument_list|,
name|rank
operator|<=
name|EXPECTED_MAX_RANK
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Rank"
operator|+
name|rank
operator|+
literal|"< expected maximum "
operator|+
literal|0
argument_list|,
name|rank
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|rank
return|;
block|}
comment|/*      * Initialisation of the Test data stored in testData      */
static|static
block|{
name|ValueFactory
name|vf
init|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ENTITIES
condition|;
name|i
operator|++
control|)
block|{
name|Collection
argument_list|<
name|Text
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Reference
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"City "
operator|+
name|i
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Stadt "
operator|+
name|i
argument_list|,
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"City"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Village "
operator|+
name|i
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Gemeinde "
operator|+
name|i
argument_list|,
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"PopulatedPlace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Location "
operator|+
name|i
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Platz "
operator|+
name|i
argument_list|,
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"Place"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Person "
operator|+
name|i
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Person "
operator|+
name|i
argument_list|,
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"Person"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Organisation "
operator|+
name|i
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Organisation "
operator|+
name|i
argument_list|,
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"Organisation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Event "
operator|+
name|i
argument_list|,
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createText
argument_list|(
literal|"Event "
operator|+
name|i
argument_list|,
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|vf
operator|.
name|createReference
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"Event"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Representation
name|rep
init|=
name|vf
operator|.
name|createRepresentation
argument_list|(
literal|"http://www.example.com/entity/test#entity-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcElements
operator|+
literal|"title"
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcElements
operator|+
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|NamespaceEnum
operator|.
name|dcElements
operator|+
literal|"creator"
argument_list|,
name|IndexerTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
comment|//use a random between [0..{MAX_INCOMMING}] as score
name|Integer
name|incomming
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|MAX_INCOMMING
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|RdfResourceEnum
operator|.
name|signRank
operator|.
name|getUri
argument_list|()
argument_list|,
name|incomming
argument_list|)
expr_stmt|;
name|testData
operator|.
name|put
argument_list|(
name|rep
operator|.
name|getId
argument_list|()
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

