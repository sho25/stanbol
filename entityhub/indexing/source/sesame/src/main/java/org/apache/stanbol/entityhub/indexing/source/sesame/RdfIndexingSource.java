begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|sesame
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
operator|.
name|RdfRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|sesame
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|config
operator|.
name|RepositoryConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|config
operator|.
name|RepositoryConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|config
operator|.
name|RepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|config
operator|.
name|RepositoryRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|sail
operator|.
name|SailRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|rio
operator|.
name|RDFFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|rio
operator|.
name|RDFParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|rio
operator|.
name|Rio
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|sail
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_class
specifier|public
class|class
name|RdfIndexingSource
extends|extends
name|AbstractSesameBackend
implements|implements
name|EntityDataIterable
implements|,
name|EntityDataProvider
implements|,
name|RDFBackend
argument_list|<
name|Value
argument_list|>
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RdfIndexingSource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_REPOSITORY_CONFIG
init|=
literal|"repo"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_REPOSITORY_CONFIG
init|=
literal|"repository.ttl"
decl_stmt|;
comment|/**      * The Parameter used to configure the source folder(s) relative to the      * {@link IndexingConfig#getSourceFolder()}. The ',' (comma) is used as      * separator to parsed multiple sources.      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SOURCE_FILE_OR_FOLDER
init|=
literal|"source"
decl_stmt|;
comment|/**      * The default directory name used to search for RDF files to be imported      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SOURCE_FOLDER_NAME
init|=
literal|"rdfdata"
decl_stmt|;
comment|/**      * The Parameter that can be used to deactivate the importing of sources.      * If this parameter is set to<code>false</code> the values configured for      * {@link #PARAM_IMPORT_SOURCE} are ignored. The default value is      *<code>true</code>      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_IMPORT_SOURCE
init|=
literal|"import"
decl_stmt|;
comment|/**      * The directory where successfully imported files are copied to      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_IMPORTED_FOLDER
init|=
literal|"imported"
decl_stmt|;
comment|/**      * The default directory bane where successfully imported files are copied to      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IMPORTED_FOLDER_NAME
init|=
literal|"imported"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Object
name|PARAM_BASE_URI
init|=
literal|"baseUri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BASE_URI
init|=
literal|"http://www.fake-base-uri.org/base-uri/"
decl_stmt|;
specifier|protected
name|ValueFactory
name|sesameFactory
decl_stmt|;
specifier|protected
name|RdfValueFactory
name|vf
init|=
name|RdfValueFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Repository
name|repository
decl_stmt|;
comment|//protected RepositoryConnection connection;
comment|/**      * If {@link BNode} being values of outgoing triples should be followed.      */
specifier|protected
name|boolean
name|followBNodeState
init|=
literal|true
decl_stmt|;
comment|//TODO: make configurable
specifier|private
name|Resource
index|[]
name|contexts
init|=
operator|new
name|Resource
index|[]
block|{}
decl_stmt|;
comment|//TODO: make configurable
specifier|private
name|boolean
name|includeInferred
init|=
literal|true
decl_stmt|;
comment|//TODO: make configurable
specifier|protected
name|RepositoryConfig
name|repoConfig
decl_stmt|;
specifier|private
name|RepositoryConnection
name|ldpathConnection
decl_stmt|;
specifier|private
name|Lock
name|ldpathConnectionLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|RepositoryConnection
name|entityDataProviderConnection
decl_stmt|;
specifier|private
name|Lock
name|entityDataProviderConnectionLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**      * {@link EntityDataIterator}s created by {@link #entityDataIterator()}      * do add themselves to this list while active. calling {@link #close()}      * to this indexing source will also call close to all iterators in this list      */
specifier|protected
specifier|final
name|List
argument_list|<
name|EntityDataIterator
argument_list|>
name|entityDataIterators
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|EntityDataIterator
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|IndexingConfig
name|indexingConfig
decl_stmt|;
specifier|private
name|ResourceLoader
name|loader
decl_stmt|;
specifier|private
name|String
name|baseUri
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|indexingConfig
operator|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
argument_list|)
expr_stmt|;
comment|//(0) parse the baseUri
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_BASE_URI
argument_list|)
decl_stmt|;
name|baseUri
operator|=
name|value
operator|==
literal|null
condition|?
name|DEFAULT_BASE_URI
else|:
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|//(1) init the Sesame Repository from the RDF config
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_REPOSITORY_CONFIG
argument_list|)
expr_stmt|;
name|File
name|repoConfigFile
init|=
name|indexingConfig
operator|.
name|getConfigFile
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|DEFAULT_REPOSITORY_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoConfigFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|//read the config (an RDF file)
name|this
operator|.
name|repoConfig
operator|=
name|loadRepositoryConfig
argument_list|(
name|repoConfigFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The configured Sesame Repository configuration file "
operator|+
name|repoConfigFile
operator|+
literal|" is missing. Please use the '"
operator|+
name|PARAM_REPOSITORY_CONFIG
operator|+
literal|"' paramteter to configure the actual configuration file (relative "
operator|+
literal|"to the config '"
operator|+
name|indexingConfig
operator|.
name|getConfigFolder
argument_list|()
operator|+
literal|"'folder)"
argument_list|)
throw|;
block|}
name|RepositoryFactory
name|factory
init|=
name|RepositoryRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|repoConfig
operator|.
name|getRepositoryImplConfig
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to initialise Repository (id: "
operator|+
name|repoConfig
operator|.
name|getID
argument_list|()
operator|+
literal|", title: "
operator|+
name|repoConfig
operator|.
name|getTitle
argument_list|()
operator|+
literal|", impl: "
operator|+
name|repoConfig
operator|.
name|getRepositoryImplConfig
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|") because no "
operator|+
literal|"RepositoryFactory is present for the specified implementation!"
argument_list|)
throw|;
block|}
try|try
block|{
name|repository
operator|=
name|factory
operator|.
name|getRepository
argument_list|(
name|repoConfig
operator|.
name|getRepositoryImplConfig
argument_list|()
argument_list|)
expr_stmt|;
name|sesameFactory
operator|=
name|repository
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
name|repository
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryConfigException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to initialise Repository (id: "
operator|+
name|repoConfig
operator|.
name|getID
argument_list|()
operator|+
literal|", title: "
operator|+
name|repoConfig
operator|.
name|getTitle
argument_list|()
operator|+
literal|", impl: "
operator|+
name|repoConfig
operator|.
name|getRepositoryImplConfig
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|")!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to initialise Repository (id: "
operator|+
name|repoConfig
operator|.
name|getID
argument_list|()
operator|+
literal|", title: "
operator|+
name|repoConfig
operator|.
name|getTitle
argument_list|()
operator|+
literal|", impl: "
operator|+
name|repoConfig
operator|.
name|getRepositoryImplConfig
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|")!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//(2) init the resourceLoader
name|loader
operator|=
operator|new
name|ResourceLoader
argument_list|(
operator|new
name|RdfResourceImporter
argument_list|(
name|repository
argument_list|,
name|baseUri
argument_list|)
argument_list|,
name|indexingConfig
operator|.
name|isFailOnError
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_IMPORTED_FOLDER
argument_list|)
expr_stmt|;
comment|//set the folder for imported files
name|String
name|importedFolderName
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|importedFolderName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|importedFolderName
operator|=
name|DEFAULT_IMPORTED_FOLDER_NAME
expr_stmt|;
block|}
name|File
name|importedFolder
init|=
operator|new
name|File
argument_list|(
name|indexingConfig
operator|.
name|getSourceFolder
argument_list|()
argument_list|,
name|importedFolderName
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Imported RDF File Folder: {}"
argument_list|,
name|importedFolder
argument_list|)
expr_stmt|;
name|this
operator|.
name|loader
operator|.
name|setImportedDir
argument_list|(
name|importedFolder
argument_list|)
expr_stmt|;
comment|//check if importing is deactivated
name|boolean
name|importSource
init|=
literal|true
decl_stmt|;
comment|//default is true
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_IMPORT_SOURCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|importSource
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|importSource
condition|)
block|{
comment|// if we need to import ... check the source config
name|log
operator|.
name|info
argument_list|(
literal|"Importing RDF data from:"
argument_list|)
expr_stmt|;
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_SOURCE_FILE_OR_FOLDER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|//if not set use the default
name|value
operator|=
name|DEFAULT_SOURCE_FOLDER_NAME
expr_stmt|;
block|}
for|for
control|(
name|String
name|source
range|:
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|File
name|sourceFileOrDirectory
init|=
name|indexingConfig
operator|.
name|getSourceFile
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceFileOrDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//register the configured source with the ResourceLoader
name|this
operator|.
name|loader
operator|.
name|addResource
argument_list|(
name|sourceFileOrDirectory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|source
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//non existent directory -> create
comment|//This is typically the case if this method is called to
comment|//initialise the default configuration. So we will try
comment|//to create the directory users need to copy the source
comment|//RDF files.
if|if
condition|(
operator|!
name|sourceFileOrDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create directory {} configured to improt RDF data from. "
operator|+
literal|"You will need to create this directory manually before copying the"
operator|+
literal|"RDF files into it."
argument_list|,
name|sourceFileOrDirectory
argument_list|)
expr_stmt|;
name|this
operator|.
name|loader
operator|.
name|addResource
argument_list|(
name|sourceFileOrDirectory
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to find RDF source {} within the indexing Source folder {}"
argument_list|,
name|source
argument_list|,
name|indexingConfig
operator|.
name|getSourceFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|registeredSource
range|:
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"> "
operator|+
name|registeredSource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Importing RDF data deactivated by parameer {}={}"
operator|+
name|PARAM_IMPORT_SOURCE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param repoConfigFile      * @return      */
specifier|private
name|RepositoryConfig
name|loadRepositoryConfig
parameter_list|(
name|File
name|repoConfigFile
parameter_list|)
block|{
name|Repository
name|configRepo
init|=
operator|new
name|SailRepository
argument_list|(
operator|new
name|MemoryStore
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoryConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configRepo
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|con
operator|=
name|configRepo
operator|.
name|getConnection
argument_list|()
expr_stmt|;
comment|//We need to load the configuration into a context
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
name|configContext
init|=
name|con
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createURI
argument_list|(
literal|"urn:stanbol.entityhub:indexing.source.sesame:config.context"
argument_list|)
decl_stmt|;
name|RDFFormat
name|format
init|=
name|Rio
operator|.
name|getParserFormatForFileName
argument_list|(
name|repoConfigFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|con
operator|.
name|add
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|repoConfigFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|baseUri
argument_list|,
name|format
argument_list|,
name|configContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RDFParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parsed '"
operator|+
name|repoConfigFile
operator|+
literal|"' using RDF format '"
operator|+
name|format
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to access '"
operator|+
name|repoConfigFile
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to load '"
operator|+
name|repoConfigFile
operator|+
literal|"' to inmemory Sail!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|repoNames
decl_stmt|;
name|RepositoryConfig
name|repoConfig
decl_stmt|;
try|try
block|{
name|repoNames
operator|=
name|RepositoryConfigUtil
operator|.
name|getRepositoryIDs
argument_list|(
name|configRepo
argument_list|)
expr_stmt|;
if|if
condition|(
name|repoNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|repoConfig
operator|=
name|RepositoryConfigUtil
operator|.
name|getRepositoryConfig
argument_list|(
name|configRepo
argument_list|,
name|repoNames
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|repoConfig
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|repoNames
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Repository configuration file '"
operator|+
name|repoConfigFile
operator|+
literal|"' MUST only contain a single repository configuration!"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Repository configuration file '"
operator|+
name|repoConfigFile
operator|+
literal|"' DOES NOT contain a repository configuration!"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read RepositoryConfiguration form the "
operator|+
literal|"in-memory Sail!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryConfigException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Repository Configuration in '"
operator|+
name|repoConfigFile
operator|+
literal|"is not valid!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|configRepo
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
if|if
condition|(
name|repoConfig
operator|.
name|getRepositoryImplConfig
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing RepositoryImpl config for "
operator|+
literal|"config "
operator|+
name|repoConfig
operator|.
name|getID
argument_list|()
operator|+
literal|" of file "
operator|+
name|repoConfigFile
operator|+
literal|"!"
argument_list|)
throw|;
block|}
return|return
name|repoConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
comment|//check if we need to load resources
return|return
operator|!
name|loader
operator|.
name|getResources
argument_list|(
name|ResourceState
operator|.
name|REGISTERED
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{
name|loader
operator|.
name|loadResources
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//first close still active RdfEntityDataIterator instances
for|for
control|(
name|EntityDataIterator
name|edi
range|:
name|entityDataIterators
control|)
block|{
name|edi
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//close connections used for LDPath and EntityDataProvider
name|ungetLdPathConnection
argument_list|()
expr_stmt|;
name|ungetEntityDataProviderConnection
argument_list|()
expr_stmt|;
comment|//finally shutdown the repository
try|try
block|{
name|repository
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while closing Sesame Connection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|getEntityData
parameter_list|(
name|String
name|id
parameter_list|)
block|{
try|try
block|{
return|return
name|createRepresentationGraph
argument_list|(
name|getEntityDataProviderConnection
argument_list|()
argument_list|,
name|sesameFactory
operator|.
name|createURI
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|ungetEntityDataProviderConnection
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create Representation '"
operator|+
name|id
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EntityDataIterator
name|entityDataIterator
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|RdfEntityDataIterator
argument_list|(
name|followBNodeState
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create EntityDataIterator for"
operator|+
literal|"Sesame Repository "
operator|+
name|repoConfig
operator|.
name|getID
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
class|class
name|RdfEntityDataIterator
implements|implements
name|EntityDataIterator
block|{
specifier|protected
specifier|final
name|RepositoryConnection
name|connection
decl_stmt|;
specifier|protected
specifier|final
name|RepositoryResult
argument_list|<
name|Statement
argument_list|>
name|stdItr
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|followBNodes
decl_stmt|;
specifier|private
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
name|currentEntity
init|=
literal|null
decl_stmt|;
comment|/**          * The last {@link Statement} read from {@link #stdItr}          */
specifier|private
name|Statement
name|currentStd
init|=
literal|null
decl_stmt|;
comment|/**          * The current Representation as created by {@link #next()}          */
specifier|protected
name|RdfRepresentation
name|currentRep
decl_stmt|;
comment|/**          * If the {@link #stdItr} is positioned on the 2nd {@link Statement}           * of the next Entity and {@link #currentStd} holds the first one.          */
specifier|private
name|boolean
name|nextInitialised
init|=
literal|false
decl_stmt|;
specifier|protected
name|RdfEntityDataIterator
parameter_list|(
name|boolean
name|followBNodes
parameter_list|,
name|boolean
name|includeInferred
parameter_list|,
name|Resource
modifier|...
name|contexts
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|connection
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|stdItr
operator|=
name|connection
operator|.
name|getStatements
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
name|this
operator|.
name|followBNodes
operator|=
name|followBNodes
expr_stmt|;
name|entityDataIterators
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|nextInitialised
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
while|while
condition|(
name|stdItr
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|currentStd
operator|==
literal|null
operator|||
operator|!
operator|(
name|currentStd
operator|.
name|getSubject
argument_list|()
operator|instanceof
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
operator|)
operator|)
condition|)
block|{
name|currentStd
operator|=
name|stdItr
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stdItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextInitialised
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|nextInitialised
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Exceptions while reading "
operator|+
literal|"Statements after "
operator|+
name|currentStd
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|nextInitialised
operator|||
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
name|subject
init|=
operator|(
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
operator|)
name|currentStd
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|currentRep
operator|=
name|vf
operator|.
name|createRdfRepresentation
argument_list|(
name|subject
argument_list|)
expr_stmt|;
try|try
block|{
name|createRepresentation
argument_list|(
name|subject
argument_list|,
name|currentRep
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|currentRep
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read statements "
operator|+
literal|"for Entity "
operator|+
operator|(
name|currentStd
operator|!=
literal|null
condition|?
name|currentStd
operator|.
name|getSubject
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|"!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|nextInitialised
operator|=
literal|false
expr_stmt|;
return|return
name|subject
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
name|currentRep
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
comment|/**          * Creates a representation by consuming Statements from the          * {@link #stdItr} until the subject changes. If {@link #followBNodes}          * is enabled it also recursively includes statements where the object          * is an {@link BNode}.          * @param subject the subject of the Representation to create          * @param model the model to add the Statements          * @throws RepositoryException          */
specifier|protected
name|void
name|createRepresentation
parameter_list|(
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
name|subject
parameter_list|,
specifier|final
name|Model
name|model
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|Set
argument_list|<
name|BNode
argument_list|>
name|bnodes
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|BNode
argument_list|>
name|visited
decl_stmt|;
if|if
condition|(
name|followBNodeState
condition|)
block|{
name|bnodes
operator|=
operator|new
name|HashSet
argument_list|<
name|BNode
argument_list|>
argument_list|()
expr_stmt|;
name|visited
operator|=
operator|new
name|HashSet
argument_list|<
name|BNode
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bnodes
operator|=
literal|null
expr_stmt|;
name|visited
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|next
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|next
operator|&&
name|stdItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentStd
operator|=
name|stdItr
operator|.
name|next
argument_list|()
expr_stmt|;
name|next
operator|=
operator|!
name|subject
operator|.
name|equals
argument_list|(
name|currentStd
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|next
condition|)
block|{
name|model
operator|.
name|add
argument_list|(
name|currentStd
argument_list|)
expr_stmt|;
if|if
condition|(
name|followBNodeState
condition|)
block|{
comment|//keep referenced BNodes
name|Value
name|object
init|=
name|currentStd
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|BNode
condition|)
block|{
name|bnodes
operator|.
name|add
argument_list|(
operator|(
name|BNode
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else do not follow BNode values
block|}
comment|//else the subject has changed ... stop here
block|}
if|if
condition|(
name|followBNodeState
condition|)
block|{
comment|//process BNodes
for|for
control|(
name|BNode
name|bnode
range|:
name|bnodes
control|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|bnode
argument_list|)
expr_stmt|;
name|extractRepresentation
argument_list|(
name|connection
argument_list|,
name|model
argument_list|,
name|bnode
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"read-only iterator!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|getRepresentation
parameter_list|()
block|{
if|if
condition|(
name|currentRep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|currentRep
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|entityDataIterators
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
block|}
comment|/**      * Extracts the triples that belong to the {@link Representation} with the      * parsed id from the Sesame repository.      * @param con the repository connection      * @param uri the subject of the Representation to extract      * @return the representation with the extracted data.      * @throws RepositoryException       */
specifier|protected
name|RdfRepresentation
name|createRepresentationGraph
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RdfRepresentation
name|rep
init|=
name|vf
operator|.
name|createRdfRepresentation
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
name|rep
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|extractRepresentation
argument_list|(
name|con
argument_list|,
name|model
argument_list|,
name|uri
argument_list|,
name|followBNodeState
condition|?
operator|new
name|HashSet
argument_list|<
name|BNode
argument_list|>
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|rep
return|;
block|}
comment|/**      * Extracts all {@link Statement}s part of the Representation. If      * {@link #followBNodeState} this is called recursively for {@link Statement}s      * where the value is an {@link BNode}.      */
specifier|protected
name|void
name|extractRepresentation
parameter_list|(
name|RepositoryConnection
name|con
parameter_list|,
name|Model
name|model
parameter_list|,
name|Resource
name|node
parameter_list|,
name|Set
argument_list|<
name|BNode
argument_list|>
name|visited
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|//we need all the outgoing relations and also want to follow bNodes until
comment|//the next UriRef. However we are not interested in incoming relations!
name|RepositoryResult
argument_list|<
name|Statement
argument_list|>
name|outgoing
init|=
name|con
operator|.
name|getStatements
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
decl_stmt|;
name|Statement
name|statement
decl_stmt|;
name|Set
argument_list|<
name|BNode
argument_list|>
name|bnodes
init|=
name|followBNodeState
condition|?
operator|new
name|HashSet
argument_list|<
name|BNode
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
while|while
condition|(
name|outgoing
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|statement
operator|=
name|outgoing
operator|.
name|next
argument_list|()
expr_stmt|;
name|model
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
if|if
condition|(
name|followBNodeState
condition|)
block|{
name|Value
name|object
init|=
name|statement
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|BNode
operator|&&
operator|!
name|visited
operator|.
name|contains
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|bnodes
operator|.
name|add
argument_list|(
operator|(
name|BNode
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else do not follow values beeing BNodes
block|}
name|outgoing
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|followBNodeState
condition|)
block|{
for|for
control|(
name|BNode
name|bnode
range|:
name|bnodes
control|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|bnode
argument_list|)
expr_stmt|;
comment|//TODO: recursive calls could cause stackoverflows with wired graphs
name|extractRepresentation
argument_list|(
name|con
argument_list|,
name|model
argument_list|,
name|bnode
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* -------------------------------------------------------------------------      * LDPath Backend methods      * -------------------------------------------------------------------------      */
annotation|@
name|Override
specifier|public
name|Literal
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|)
block|{
return|return
name|createLiteralInternal
argument_list|(
name|sesameFactory
argument_list|,
name|content
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Literal
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|,
name|Locale
name|language
parameter_list|,
name|URI
name|type
parameter_list|)
block|{
return|return
name|createLiteralInternal
argument_list|(
name|sesameFactory
argument_list|,
name|content
argument_list|,
name|language
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
name|createURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|createURIInternal
argument_list|(
name|sesameFactory
argument_list|,
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Value
argument_list|>
name|listObjects
parameter_list|(
name|Value
name|subject
parameter_list|,
name|Value
name|property
parameter_list|)
block|{
try|try
block|{
return|return
name|listObjectsInternal
argument_list|(
name|getLdPathConnection
argument_list|()
argument_list|,
operator|(
name|Resource
operator|)
name|subject
argument_list|,
name|asUri
argument_list|(
name|property
argument_list|)
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|ungetLdPathConnection
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Exception while accessing values for "
operator|+
literal|"TriplePattern: "
operator|+
name|subject
operator|+
literal|", "
operator|+
name|property
operator|+
literal|", null!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Subject of triple pattern MUST NOT be "
operator|+
literal|"a Literal (TriplePattern: "
operator|+
name|subject
operator|+
literal|", "
operator|+
name|property
operator|+
literal|", null)!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Value
argument_list|>
name|listSubjects
parameter_list|(
name|Value
name|property
parameter_list|,
name|Value
name|object
parameter_list|)
block|{
try|try
block|{
return|return
name|listSubjectsInternal
argument_list|(
name|getLdPathConnection
argument_list|()
argument_list|,
name|asUri
argument_list|(
name|property
argument_list|)
argument_list|,
name|object
argument_list|,
name|includeInferred
argument_list|,
name|contexts
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|ungetLdPathConnection
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Exception while accessing values for "
operator|+
literal|"TriplePattern: null, "
operator|+
name|property
operator|+
literal|", "
operator|+
name|object
operator|+
literal|"!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|RepositoryConnection
name|getLdPathConnection
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|ldpathConnection
operator|==
literal|null
condition|)
block|{
name|ldpathConnectionLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|ldpathConnection
operator|==
literal|null
condition|)
block|{
name|ldpathConnection
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ldpathConnectionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ldpathConnection
return|;
block|}
specifier|protected
name|void
name|ungetLdPathConnection
parameter_list|()
block|{
if|if
condition|(
name|ldpathConnection
operator|!=
literal|null
condition|)
block|{
name|ldpathConnectionLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|ldpathConnection
operator|!=
literal|null
condition|)
block|{
name|ldpathConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|ldpathConnection
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e1
parameter_list|)
block|{
comment|/* ignore */
block|}
finally|finally
block|{
name|ldpathConnectionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|RepositoryConnection
name|getEntityDataProviderConnection
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|entityDataProviderConnection
operator|==
literal|null
condition|)
block|{
name|entityDataProviderConnectionLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|entityDataProviderConnection
operator|==
literal|null
condition|)
block|{
name|entityDataProviderConnection
operator|=
name|repository
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|entityDataProviderConnectionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|entityDataProviderConnection
return|;
block|}
specifier|protected
name|void
name|ungetEntityDataProviderConnection
parameter_list|()
block|{
if|if
condition|(
name|entityDataProviderConnection
operator|!=
literal|null
condition|)
block|{
name|entityDataProviderConnectionLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|entityDataProviderConnection
operator|!=
literal|null
condition|)
block|{
name|entityDataProviderConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|entityDataProviderConnection
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e1
parameter_list|)
block|{
comment|/* ignore */
block|}
finally|finally
block|{
name|entityDataProviderConnectionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
name|asUri
parameter_list|(
name|Value
name|property
parameter_list|)
block|{
if|if
condition|(
name|property
operator|instanceof
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
condition|)
block|{
return|return
operator|(
name|org
operator|.
name|openrdf
operator|.
name|model
operator|.
name|URI
operator|)
name|property
return|;
block|}
else|else
block|{
return|return
name|createURI
argument_list|(
name|property
operator|.
name|stringValue
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

