begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|vcard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|fortuna
operator|.
name|ical4j
operator|.
name|vcard
operator|.
name|Property
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|OntologyMappings
block|{
comment|/**      * Restrict instantiation      */
specifier|private
name|OntologyMappings
parameter_list|()
block|{}
specifier|public
specifier|static
specifier|final
name|String
name|N_FAMILY
init|=
literal|"N.family"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|N_GIVEN
init|=
literal|"N.given"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|N_ADDITIONAL
init|=
literal|"N.additional"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|N_PREFIX
init|=
literal|"N.prefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|N_SUFFIX
init|=
literal|"N.suffix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADR_POST_OFFICE_ADDRESS
init|=
literal|"ADR.poBox"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADR_EXTENDED
init|=
literal|"ADR.extended"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADR_STREET
init|=
literal|"ADR.street"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADR_LOCALITY
init|=
literal|"ADR.locality"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADR_REGION
init|=
literal|"ADR.region"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADR_POSTAL_CODE
init|=
literal|"ADR.postalCode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADR_COUNTRY
init|=
literal|"ADR.country"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GEO_LONGITUDE
init|=
literal|"GEO.longitude"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GEO_LATITUDE
init|=
literal|"GEO.latitude"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ORG_NAME
init|=
literal|"ORG.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ORG_UNIT
init|=
literal|"ORG.unit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RDF_TYPE
init|=
literal|"rdf:type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VCARD_PERSON
init|=
literal|"vcard:Person"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VCARD_ORGANIZATION
init|=
literal|"vcard:Organization"
decl_stmt|;
comment|/**      * Defines mapping information for vCard properties as used as       * values for the {@link Map} defined as static members of the parent      * {@link OntologyMappings} class.<p>      * The keys {@link OntologyMappings#VCARD_PERSON} and      * {@link OntologyMappings#VCARD_ORGANIZATION} can be used to specify the      *<code>rdf:type</code> used for imported Persons and Organisations.<p>      * The<code>uri</code> is a required parameter and specifies the      * property of the Ontology used to store the values of the mapped vcard      * property.<p>      * For object properties the creation of sub-mappings and an inverse relation      * is supported. The created sub-resource will be linked the the resource      * of the vCard object by the<code>uri</code> property. If a mapping for      * {@link OntologyMappings#RDF_TYPE} is present fir sub-mappings this is used      * as<code>rdf:type</code> value for sub-resources<p>      * To specify that sub-values of a vCard property should be directly      * added to the resource of the vCard object one needs to add a      *<code>null</code> mapping for the parent and than add the mappings for      * the sub-properties also directly to this mappings.<br>      * Here an example for the vCard "N" element:<p>      *<pre><code>      *     mappings.put("N",null); //add null mapping for the parent      *     mappings.put("N_FAMILY", new Mapping("http:schema.org/familyName");      *     mappings.put("N_GIVEN", new Mapping("http:schema.org/givenName");      *</code></pre>      * @author Rupert Westenthaler      */
specifier|public
specifier|static
specifier|final
class|class
name|Mapping
block|{
comment|/**          * The uri          */
specifier|public
specifier|final
name|String
name|uri
decl_stmt|;
specifier|public
specifier|final
name|String
name|invUri
decl_stmt|;
comment|/**          * the sub-mappings (read only).          */
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|subMappings
decl_stmt|;
comment|/**          * Mapping for a vCard property to an rdfs:Property uri.          * @param uri the URI of the rdfs:Property          */
specifier|private
name|Mapping
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**          * Allows to define a Mapping with type and subMappings. See           * class level documentation for details.          * @param uri the rdfs:Property uri used to store the information of the          * mapped vCard property           * @param invUri the inverse property used to link from the sub-resource          * back to the vCard resource.          * @param subMappings mappings fpr the sub-resource          */
specifier|private
name|Mapping
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|invUri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|subMappings
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed property MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
if|if
condition|(
name|invUri
operator|!=
literal|null
operator|&&
name|subMappings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Inverse Properties are only supported if sub-mappings are present"
argument_list|)
throw|;
block|}
name|this
operator|.
name|invUri
operator|=
name|invUri
expr_stmt|;
name|this
operator|.
name|subMappings
operator|=
name|subMappings
operator|==
literal|null
condition|?
literal|null
else|:
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|subMappings
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|schemaOrgMappings
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|schema
init|=
literal|"http://schema.org/"
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|mappings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
argument_list|()
decl_stmt|;
comment|//the rdf:type for vCard objects is schema.org/Person
name|mappings
operator|.
name|put
argument_list|(
name|VCARD_PERSON
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"Person"
argument_list|)
argument_list|)
expr_stmt|;
comment|//and schema.org/Organization for vCard objects that do not define a
comment|//FN but only a ORG property
name|mappings
operator|.
name|put
argument_list|(
name|VCARD_ORGANIZATION
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"Organization"
argument_list|)
argument_list|)
expr_stmt|;
comment|//map the formatted name and the nick to schema.org/name
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|FN
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|NICKNAME
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|NOTE
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Name details are directly added to the person
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|N
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|N_FAMILY
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"familyName"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|N_GIVEN
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"givenName"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|N_ADDITIONAL
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"additionalName"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|N_PREFIX
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"honorificPrefix"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|N_SUFFIX
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"honorificSuffix"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Address are stored in an own resource
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|subMappings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|ADR
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"address"
argument_list|,
literal|null
argument_list|,
comment|//address is the property (no inverse)
name|subMappings
argument_list|)
argument_list|)
expr_stmt|;
comment|//and there are sub mappings
name|subMappings
operator|.
name|put
argument_list|(
name|RDF_TYPE
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"PostalAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|ADR_COUNTRY
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"addressCountry"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|ADR_POSTAL_CODE
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"postalCode"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|ADR_STREET
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"streetAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|ADR_POST_OFFICE_ADDRESS
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"postOfficeBoxNumber"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|ADR_REGION
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"addressRegion"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|ADR_EXTENDED
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"addressLocality"
argument_list|)
argument_list|)
expr_stmt|;
comment|//WorkLocation can be both "PostalAddress" or "Place". For modelling the
comment|//ADR I have chosen to use "PostalAdress". However to support both
comment|//ADR and GEO one would need to use an intermediate Place and append the
comment|//PostalAddress and the GeoCoordinate to it.
comment|//Because in vCard the ADR is much more important I choose to use
comment|// "PostalAddres" and to ignore GEO information.
comment|//mappings.put(Id.GEO.getPropertyName(), new Mapping(schema+"workLocation",));
comment|//Organisational properties
comment|//Here both TITLE and ROLE is mapped to JobTitle
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|TITLE
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"jobTitle"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|ROLE
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"jobTitle"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|ORG
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"worksFor"
argument_list|,
name|schema
operator|+
literal|"employees"
argument_list|,
name|subMappings
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|RDF_TYPE
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"Organization"
argument_list|)
argument_list|)
expr_stmt|;
name|subMappings
operator|.
name|put
argument_list|(
name|ORG_NAME
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|BDAY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"birthDate"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|DEATH
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"deathDate"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|GENDER
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"gender"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|PHOTO
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"image"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|TEL
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"telephone"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|EMAIL
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Id
operator|.
name|URL
operator|.
name|getPropertyName
argument_list|()
argument_list|,
operator|new
name|Mapping
argument_list|(
name|schema
operator|+
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Not mapped Properties
comment|//mappings.put(Id.AGENT.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.LABEL.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.LANG.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.LOGO.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.MEMBER.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.PRODID.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.RELATED.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.REV.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.SORT_STRING.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.SOUND.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.SOURCE.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.TZ.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.UID.getPropertyName(), new Mapping(schema+""));
comment|//mappings.put(Id.VERSION.getPropertyName(), new Mapping(schema+""));
name|schemaOrgMappings
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

