begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|jenatdb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|datatypes
operator|.
name|RDFDatatype
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|datatypes
operator|.
name|xsd
operator|.
name|XSDDatatype
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
class|class
name|LanguageLiteralFilterTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIncludeExcludeConfig1
parameter_list|()
block|{
operator|new
name|LiteralLanguageFilter
argument_list|(
literal|"en,de,!de"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIncludeExcludeConfig2
parameter_list|()
block|{
operator|new
name|LiteralLanguageFilter
argument_list|(
literal|"en,!de,de"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataTypes
parameter_list|()
block|{
name|RdfImportFilter
name|filter
init|=
operator|new
name|LiteralLanguageFilter
argument_list|(
literal|"en,de"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|,
literal|"en"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"10"
argument_list|,
name|XSDDatatype
operator|.
name|XSDint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createAnon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createURI
argument_list|(
literal|"urn:test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncludeTest
parameter_list|()
block|{
name|RdfImportFilter
name|filter
init|=
operator|new
name|LiteralLanguageFilter
argument_list|(
literal|"en,de"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|,
literal|"en"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|,
literal|"de"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|,
literal|"fr"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcludeTest
parameter_list|()
block|{
name|RdfImportFilter
name|filter
init|=
operator|new
name|LiteralLanguageFilter
argument_list|(
literal|"*,en,!de"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|,
literal|"en"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|,
literal|"de"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Node
operator|.
name|createLiteral
argument_list|(
literal|"test"
argument_list|,
literal|"fr"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

