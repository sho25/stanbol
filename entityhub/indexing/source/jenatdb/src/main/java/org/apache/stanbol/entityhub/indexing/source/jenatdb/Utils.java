begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|jenatdb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
operator|.
name|KEY_INDEXING_CONFIG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|jenatdb
operator|.
name|Constants
operator|.
name|DEFAULT_MODEL_DIRECTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|jenatdb
operator|.
name|Constants
operator|.
name|PARAM_MODEL_DIRECTORY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|IndexingComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|config
operator|.
name|IndexingConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|core
operator|.
name|DatasetGraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|TDBFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|base
operator|.
name|file
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|store
operator|.
name|DatasetGraphTDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|sys
operator|.
name|TDBMaker
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Utils
block|{
specifier|private
name|Utils
parameter_list|()
block|{
comment|/* do not create instances of utility classes */
block|}
comment|/**      * @param modelLocation The directory with the Jena TDB model. Will be created      * if not existent.      * @return      * @throws IllegalArgumentException if<code>null</code> is parsed;       * if the parsed {@link File} exists but is not a directory; if the parsed       * File does NOT exists AND can not be created.      */
specifier|public
specifier|static
name|DatasetGraphTDB
name|initTDBDataset
parameter_list|(
name|File
name|modelLocation
parameter_list|)
block|{
if|if
condition|(
name|modelLocation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Jena TDB directory"
operator|+
literal|"MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|modelLocation
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|modelLocation
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The configured RDF model directory "
operator|+
name|modelLocation
operator|+
literal|"exists but is not a Directory"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|modelLocation
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|modelLocation
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create the configured RDF model directory "
operator|+
name|modelLocation
operator|+
literal|"!"
argument_list|)
throw|;
block|}
block|}
name|Location
name|location
init|=
operator|new
name|Location
argument_list|(
name|modelLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
comment|//TODO: change this to support transactions
comment|//    TDBMaker.createDatasetGraphTransaction(location);
comment|//  if we need transaction support!
return|return
name|TDBMaker
operator|.
name|createDatasetGraphTDB
argument_list|(
name|location
argument_list|)
return|;
block|}
comment|/**      * uses the parsed configuration to get/create the Jena TDB store      * @param config A configuration as parsed to {@link IndexingComponent#setConfiguration(Map)}      * @return the opened/created Jena TDB dataset      * @throws IllegalArgumentException if the config is<code>null</code>; is      * missing a value for the {@link IndexingConfig#KEY_INDEXING_CONFIG} or      * {@link #initTDBDataset(File)} throws an IllegalArgumentException      */
specifier|public
specifier|static
name|DatasetGraphTDB
name|getTDBDataset
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|IndexingConfig
name|indexingConfig
init|=
operator|(
name|IndexingConfig
operator|)
name|config
operator|.
name|get
argument_list|(
name|KEY_INDEXING_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexingConfig
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No IndexingConfig object present as value of key '"
operator|+
name|KEY_INDEXING_CONFIG
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_MODEL_DIRECTORY
argument_list|)
decl_stmt|;
name|File
name|modelLocation
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|modelLocation
operator|=
operator|new
name|File
argument_list|(
name|indexingConfig
operator|.
name|getSourceFolder
argument_list|()
argument_list|,
name|DEFAULT_MODEL_DIRECTORY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modelLocation
operator|=
operator|new
name|File
argument_list|(
name|indexingConfig
operator|.
name|getSourceFolder
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|initTDBDataset
argument_list|(
name|modelLocation
argument_list|)
return|;
block|}
block|}
end_class

end_unit

