begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|jenatdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|source
operator|.
name|ResourceImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjena
operator|.
name|riot
operator|.
name|Lang
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjena
operator|.
name|riot
operator|.
name|RiotReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|TDBLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|store
operator|.
name|DatasetGraphTDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|store
operator|.
name|bulkloader
operator|.
name|BulkLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|store
operator|.
name|bulkloader
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|store
operator|.
name|bulkloader
operator|.
name|LoadMonitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|store
operator|.
name|bulkloader
operator|.
name|LoaderNodeTupleTable
import|;
end_import

begin_class
specifier|public
class|class
name|RdfResourceImporter
implements|implements
name|ResourceImporter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RdfResourceImporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DatasetGraphTDB
name|indexingDataset
decl_stmt|;
specifier|public
name|RdfResourceImporter
parameter_list|(
name|DatasetGraphTDB
name|indexingDataset
parameter_list|)
block|{
if|if
condition|(
name|indexingDataset
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed DatasetGraphTDB instance MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexingDataset
operator|=
name|indexingDataset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceState
name|importResource
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|resourceName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"gz"
operator|.
name|equalsIgnoreCase
argument_list|(
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|name
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"   - from GZIP Archive"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bz2"
operator|.
name|equalsIgnoreCase
argument_list|(
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|name
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"   - from BZip2 Archive"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: No Zip Files inside Zip Files supported :o( ^^
name|Lang
name|format
init|=
name|Lang
operator|.
name|guess
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// For N-Triple we can use the TDBLoader
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ignore File {} because of unknown extension "
argument_list|)
expr_stmt|;
return|return
name|ResourceState
operator|.
name|IGNORED
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|Lang
operator|.
name|NTRIPLES
condition|)
block|{
name|TDBLoader
operator|.
name|load
argument_list|(
name|indexingDataset
argument_list|,
name|is
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|!=
name|Lang
operator|.
name|RDFXML
condition|)
block|{
comment|// use RIOT to parse the format but with a special configuration
comment|// RiotReader!
name|TDBLoader
name|loader
init|=
operator|new
name|TDBLoader
argument_list|()
decl_stmt|;
name|loader
operator|.
name|setShowProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Destination
argument_list|<
name|Triple
argument_list|>
name|dest
init|=
name|createDestination
argument_list|()
decl_stmt|;
name|dest
operator|.
name|start
argument_list|()
expr_stmt|;
name|RiotReader
operator|.
name|parseTriples
argument_list|(
name|is
argument_list|,
name|format
argument_list|,
literal|null
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|dest
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// RDFXML
comment|// in that case we need to use ARP
name|Model
name|model
init|=
name|ModelFactory
operator|.
name|createModelForGraph
argument_list|(
name|indexingDataset
operator|.
name|getDefaultGraph
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|read
argument_list|(
name|is
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|ResourceState
operator|.
name|LOADED
return|;
block|}
comment|/**      * Creates a triple destination for the default dataset of the      * {@link #indexingDataset}.      * This code is based on how Destinations are created in the {@link BulkLoader},      * implementation. Note that      * {@link BulkLoader#loadDefaultGraph(DatasetGraphTDB, InputStream, boolean)}      * can not be used for formats other than {@link Lang#NTRIPLES} because it      * hard codes this format for loading data form the parsed InputStream.      * @return the destination!      */
specifier|private
name|Destination
argument_list|<
name|Triple
argument_list|>
name|createDestination
parameter_list|()
block|{
name|LoadMonitor
name|monitor
init|=
operator|new
name|LoadMonitor
argument_list|(
name|indexingDataset
argument_list|,
name|log
argument_list|,
literal|"triples"
argument_list|,
literal|50000
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|LoaderNodeTupleTable
name|loaderTriples
init|=
operator|new
name|LoaderNodeTupleTable
argument_list|(
name|indexingDataset
operator|.
name|getTripleTable
argument_list|()
operator|.
name|getNodeTupleTable
argument_list|()
argument_list|,
literal|"triples"
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|Destination
argument_list|<
name|Triple
argument_list|>
name|sink
init|=
operator|new
name|Destination
argument_list|<
name|Triple
argument_list|>
argument_list|()
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
name|void
name|start
parameter_list|()
block|{
name|loaderTriples
operator|.
name|loadStart
argument_list|()
expr_stmt|;
name|loaderTriples
operator|.
name|loadDataStart
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|send
parameter_list|(
name|Triple
name|triple
parameter_list|)
block|{
name|loaderTriples
operator|.
name|load
argument_list|(
name|triple
operator|.
name|getSubject
argument_list|()
argument_list|,
name|triple
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|triple
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|flush
parameter_list|()
block|{ }
specifier|public
name|void
name|close
parameter_list|()
block|{ }
specifier|public
specifier|final
name|void
name|finish
parameter_list|()
block|{
name|loaderTriples
operator|.
name|loadDataFinish
argument_list|()
expr_stmt|;
name|loaderTriples
operator|.
name|loadIndexStart
argument_list|()
expr_stmt|;
name|loaderTriples
operator|.
name|loadIndexFinish
argument_list|()
expr_stmt|;
name|loaderTriples
operator|.
name|loadFinish
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|sink
return|;
block|}
block|}
end_class

end_unit

