begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|jenatdb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
operator|.
name|getFullName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityDataIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|core
operator|.
name|EntityIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|store
operator|.
name|DatasetGraphTDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|iterator
operator|.
name|ExtendedIterator
import|;
end_import

begin_comment
comment|/**  *   * Allows to use an EntityIterator over all Resources where<ul>  *<li> the property is equals to the configured {@link #PARAM_FIELD} value  *<li> the value is equals to one of the configured {@link #PARAM_VALUES} values  * (separated by ';'). This implementation will first iterate over all value1   * than value2, ...  *</ul>  *<p>  *<b>NOTE:</b> This implementation does NOT support Wildcard value, because in  * such cases it is much faster to use the {@link RdfIndexingSource} as  * {@link EntityDataIterable} for indexing!  *   *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ResourceFilterIterator
implements|implements
name|EntityIterator
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceFilterIterator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_FIELD
init|=
literal|"field"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_VALUES
init|=
literal|"values"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD
init|=
literal|"rdf:type"
decl_stmt|;
specifier|private
name|Node
name|field
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Node
argument_list|>
name|values
decl_stmt|;
comment|/**      * The RDF data      */
specifier|private
name|DatasetGraphTDB
name|indexingDataset
decl_stmt|;
comment|/**      * The Iterator over the current EntityFilter (or<code>null</code> if not      * yet initialised)      */
specifier|private
name|ExtendedIterator
argument_list|<
name|Triple
argument_list|>
name|iterator
decl_stmt|;
comment|/**      * Iterator over the configured {@link #values}      */
specifier|private
name|Iterator
argument_list|<
name|Node
argument_list|>
name|valueIterator
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|this
operator|.
name|indexingDataset
operator|=
name|Utils
operator|.
name|getTDBDataset
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|field
operator|=
name|Node
operator|.
name|createURI
argument_list|(
name|getFullName
argument_list|(
name|DEFAULT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using default Field {}"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|field
operator|=
name|Node
operator|.
name|createURI
argument_list|(
name|getFullName
argument_list|(
name|DEFAULT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"configured Field: {}"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|PARAM_VALUES
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing required Parameter "
operator|+
name|PARAM_VALUES
operator|+
literal|". Set to '*' to deactivate Filtering"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|stringValue
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|stringValue
operator|.
name|startsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// * -> deactivate Filtering
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wildcard is NOT supported as"
operator|+
literal|"directoy using EntityDataIterable with the Jena TDB will"
operator|+
literal|"provide much better performance (change configuration to use"
operator|+
literal|"the RdfIndexingSource as EntityDataIterable)!"
argument_list|)
throw|;
block|}
else|else
block|{
name|parseFieldValues
argument_list|(
name|stringValue
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|parseFieldValues
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type of parameter "
operator|+
name|PARAM_VALUES
operator|+
literal|'='
operator|+
name|value
operator|+
literal|"(type:"
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|") is not supported MUST be String or String[]!"
argument_list|)
throw|;
block|}
name|valueIterator
operator|=
name|this
operator|.
name|values
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param value      * @param stringValues      */
specifier|private
name|void
name|parseFieldValues
parameter_list|(
name|String
modifier|...
name|stringValues
parameter_list|)
block|{
if|if
condition|(
name|stringValues
operator|==
literal|null
operator|||
name|stringValues
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter "
operator|+
name|PARAM_VALUES
operator|+
literal|" does not contain a field value!"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Node
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldValue
range|:
name|stringValues
control|)
block|{
name|fieldValue
operator|=
name|fieldValue
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no parsed value (seperated by ';') MUST BE an empty String"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|fieldValue
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wildcard is NOT supported as"
operator|+
literal|"directoy using EntityDataIterable with the Jena TDB will"
operator|+
literal|"provide much better performance (change configuration to use"
operator|+
literal|"the RdfIndexingSource as EntityDataIterable)!"
argument_list|)
throw|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|Node
operator|.
name|createURI
argument_list|(
name|getFullName
argument_list|(
name|fieldValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter "
operator|+
name|PARAM_VALUES
operator|+
literal|" does not contain a valid field value (values = "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|stringValues
argument_list|)
operator|+
literal|"!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsInitialisation
parameter_list|()
block|{
comment|// Nope no initialisation needed
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialise
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|indexingDataset
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
do|do
block|{
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
comment|//NOTE: the #setConfiguration method ensures a value to be present
name|Node
name|value
init|=
name|valueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Iterator over Entities field: '{}' value '{}'"
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|indexingDataset
operator|.
name|getDefaultGraph
argument_list|()
operator|.
name|find
argument_list|(
literal|null
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iterator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
name|iterator
operator|=
literal|null
expr_stmt|;
block|}
block|}
do|while
condition|(
name|valueIterator
operator|.
name|hasNext
argument_list|()
condition|)
do|;
return|return
literal|false
return|;
comment|//iterated over all elements of all configured values
block|}
annotation|@
name|Override
specifier|public
name|EntityScore
name|next
parameter_list|()
block|{
return|return
operator|new
name|EntityScore
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Removal of Entities is not allowed!"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

