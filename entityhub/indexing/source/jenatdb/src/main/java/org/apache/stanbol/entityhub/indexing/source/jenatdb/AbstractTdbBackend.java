begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|indexing
operator|.
name|source
operator|.
name|jenatdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|datatypes
operator|.
name|TypeMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|datatypes
operator|.
name|xsd
operator|.
name|XSDDateTime
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|backend
operator|.
name|AbstractBackend
import|;
end_import

begin_comment
comment|/**  * Implements all the value converter methods of {@link RDFBackend}.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTdbBackend
extends|extends
name|AbstractBackend
argument_list|<
name|Node
argument_list|>
implements|implements
name|RDFBackend
argument_list|<
name|Node
argument_list|>
block|{
comment|/**      * Avoids massive instance creation for language literal      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Locale
argument_list|>
name|localeCache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Locale
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Avoids massive instance creation for typed literal URIs      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
name|xsdTypeCache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Provides the jena type for a type URI      */
specifier|private
name|TypeMapper
name|typeMapper
init|=
name|TypeMapper
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|Locale
name|toLocale
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Locale
name|locale
init|=
name|localeCache
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|lang
argument_list|)
expr_stmt|;
name|localeCache
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
return|return
name|locale
return|;
block|}
specifier|private
name|URI
name|toLiteralTypeURI
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|URI
name|uri
init|=
name|xsdTypeCache
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|xsdTypeCache
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsThreading
parameter_list|()
block|{
comment|//threading is supposed to be used in cases where LDpath needs to
comment|//use remote services. No advantage of having multiple threads on a
comment|//triple store limited by local File access.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ThreadPoolExecutor
name|getThreadPool
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLiteral
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
return|return
name|n
operator|.
name|isLiteral
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isURI
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
return|return
name|n
operator|.
name|isURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBlank
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
return|return
name|n
operator|.
name|isBlank
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Locale
name|getLiteralLanguage
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
return|return
name|toLocale
argument_list|(
name|n
operator|.
name|getLiteralLanguage
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Node is not a Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getLiteralType
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
return|return
name|toLiteralTypeURI
argument_list|(
name|n
operator|.
name|getLiteralDatatypeURI
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Node is not a Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Node
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|)
block|{
return|return
name|Node
operator|.
name|createLiteral
argument_list|(
name|content
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|createLiteral
parameter_list|(
name|String
name|content
parameter_list|,
name|Locale
name|language
parameter_list|,
name|URI
name|type
parameter_list|)
block|{
return|return
name|Node
operator|.
name|createLiteral
argument_list|(
name|content
argument_list|,
name|language
operator|==
literal|null
condition|?
literal|null
else|:
name|language
operator|.
name|getLanguage
argument_list|()
argument_list|,
name|typeMapper
operator|.
name|getSafeTypeByName
argument_list|(
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|createURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|Node
operator|.
name|createURI
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|stringValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
comment|//we do not want '"example"@en' but 'example'
return|return
name|node
operator|.
name|getLiteralLexicalForm
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|node
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Double
name|doubleValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
name|Double
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|doubleValue
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Long
name|longValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
name|Long
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|longValue
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|booleanValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|booleanValue
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|dateTimeValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|instanceof
name|XSDDateTime
condition|)
block|{
return|return
operator|(
operator|(
name|XSDDateTime
operator|)
name|value
operator|)
operator|.
name|asCalendar
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|/*ignore*/
block|}
return|return
name|super
operator|.
name|dateTimeValue
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|dateValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|instanceof
name|XSDDateTime
condition|)
block|{
return|return
operator|new
name|GregorianCalendar
argument_list|(
operator|(
operator|(
name|XSDDateTime
operator|)
name|value
operator|)
operator|.
name|getYears
argument_list|()
argument_list|,
operator|(
operator|(
name|XSDDateTime
operator|)
name|value
operator|)
operator|.
name|getMonths
argument_list|()
operator|-
literal|1
argument_list|,
operator|(
operator|(
name|XSDDateTime
operator|)
name|value
operator|)
operator|.
name|getDays
argument_list|()
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|/*ignore*/
block|}
return|return
name|super
operator|.
name|dateValue
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|timeValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|instanceof
name|XSDDateTime
condition|)
block|{
name|Calendar
name|cal
init|=
operator|(
operator|(
name|XSDDateTime
operator|)
name|value
operator|)
operator|.
name|asCalendar
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1900
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//we need only the time
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|/*ignore*/
block|}
return|return
name|super
operator|.
name|timeValue
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Float
name|floatValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
name|Float
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|floatValue
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|intValue
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|node
operator|.
name|getLiteral
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|intValue
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed node is not an Literal"
argument_list|)
throw|;
block|}
block|}
comment|//    @Override
comment|//    public BigInteger integerValue(Node node) {
comment|//        // TODO Auto-generated method stub
comment|//        return null;
comment|//    }
comment|//    @Override
comment|//    public BigDecimal decimalValue(Node node) {
comment|//        // TODO Auto-generated method stub
comment|//        return null;
comment|//    }
annotation|@
name|Override
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|Node
argument_list|>
name|listObjects
parameter_list|(
name|Node
name|subject
parameter_list|,
name|Node
name|property
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|Node
argument_list|>
name|listSubjects
parameter_list|(
name|Node
name|property
parameter_list|,
name|Node
name|object
parameter_list|)
function_decl|;
block|}
end_class

end_unit

