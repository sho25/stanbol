begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PatternUtils
block|{
specifier|private
name|PatternUtils
parameter_list|()
block|{}
comment|/**      * Converts a Wildcard search string to REGEX. If strict is enabled, than      * the REGEX pattern searches only full labels ("^Patt?er.*$") otherwise      * it searches the whole text ("Patt?er.*")      * @param wildcard the wildcard pattern      * @param strict if<code>true</code> than the REGEX pattern searches      * whole words.      * @return the pattern      */
specifier|public
specifier|static
name|String
name|wildcardToRegex
parameter_list|(
name|String
name|wildcard
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|StringBuilder
name|regex
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|strict
condition|)
block|{
name|regex
operator|.
name|append
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
block|}
name|encodeWildcard
argument_list|(
name|wildcard
argument_list|,
name|regex
argument_list|)
expr_stmt|;
if|if
condition|(
name|strict
condition|)
block|{
name|regex
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
block|}
return|return
name|regex
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Converts a Wildcard search string to REGEX matching whole words in       * the text.       * @param wildcard the wildcard pattern      * @return the regex pattern for the parsed wildcard      * @since 0.12.1      */
specifier|public
specifier|static
name|String
name|wildcardWordToRegex
parameter_list|(
name|String
name|wildcard
parameter_list|)
block|{
name|StringBuilder
name|regex
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\\b"
argument_list|)
decl_stmt|;
name|encodeWildcard
argument_list|(
name|wildcard
argument_list|,
name|regex
argument_list|)
expr_stmt|;
return|return
name|regex
operator|.
name|append
argument_list|(
literal|"\\b"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Internally used to convert a wildcard to a regex      * @param wildcard      * @param regex      */
specifier|private
specifier|static
name|void
name|encodeWildcard
parameter_list|(
name|String
name|wildcard
parameter_list|,
name|StringBuilder
name|regex
parameter_list|)
block|{
for|for
control|(
name|char
name|c
range|:
name|wildcard
operator|.
name|toCharArray
argument_list|()
control|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'*'
case|:
name|regex
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'?'
case|:
name|regex
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
break|break;
comment|// escape special regexp-characters
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'['
case|:
case|case
literal|']'
case|:
case|case
literal|'$'
case|:
case|case
literal|'^'
case|:
case|case
literal|'.'
case|:
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
case|case
literal|'|'
case|:
case|case
literal|'\\'
case|:
name|regex
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
comment|//add the escape char
default|default:
name|regex
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|//add the escape char
break|break;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|value2Regex
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
literal|'^'
operator|+
name|escapeRegex
argument_list|(
name|value
argument_list|)
operator|+
literal|'$'
return|;
block|}
comment|/**      * Creates a regex that matches vales against whole words      * ('<code>\b{value}\b</code>)      * @param word the word to match      * @return the regex to match words      * @since 0.12.1      */
specifier|public
specifier|static
name|String
name|word2Regex
parameter_list|(
name|String
name|word
parameter_list|)
block|{
return|return
name|escapeRegex
argument_list|(
name|word
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"\\b"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\\b"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|escapeRegex
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|escapeRegex
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *       * @param value the value to escape      * @param sb the {@link StringBuilder} or<code>null</code> if a new       * instance should be created      * @return the parsed {@link StringBuilder} with the escaped value added.      * @since 0.12.1      */
specifier|public
specifier|static
name|StringBuilder
name|escapeRegex
parameter_list|(
name|String
name|value
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|char
name|c
range|:
name|value
operator|.
name|toCharArray
argument_list|()
control|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'*'
case|:
case|case
literal|'?'
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'['
case|:
case|case
literal|']'
case|:
case|case
literal|'$'
case|:
case|case
literal|'^'
case|:
case|case
literal|'.'
case|:
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
case|case
literal|'|'
case|:
case|case
literal|'\\'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
comment|//add the escape char
default|default:
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|//add the char
break|break;
block|}
block|}
return|return
name|sb
return|;
block|}
specifier|public
specifier|static
specifier|final
name|Pattern
name|PREFIX_REGEX_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\?\\*]"
argument_list|)
decl_stmt|;
comment|/**      * Returns<code>true</code> if the parsed value contains an '?' or '*'      * @param value the value to check      * @return<code>true</code> if the parsed value contains an '?' or '*'      */
specifier|public
specifier|static
name|boolean
name|usesWildCard
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|false
else|:
name|PREFIX_REGEX_PATTERN
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
block|}
end_class

end_unit

