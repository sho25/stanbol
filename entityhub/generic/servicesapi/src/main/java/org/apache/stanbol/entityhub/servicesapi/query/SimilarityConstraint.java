begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Ensure that results have fields that is contextually similar. The implementation is typically based on a  * cosine similarity score a normalized vector space of term frequencies - inverse document frequencies as  * done by the MoreLikeThis feature of Solr for instance.  *<p>  * This type of constraint might not be supported by all the yard implementations. If it is not supported it  * is just ignored.  *<p>  * With version<code>0.12.0</code> support for {@link Text} and {@link Reference}  * contexts where added. The {@link #getContextType()} can be used to determine the  * type of the parsed context and the {@link #getStringContext()},   * {@link #getTextContext()} and {@link #getReferenceContext()} methods can be  * used to get the typed context versions. The {@link #getContext()}  */
end_comment

begin_class
specifier|public
class|class
name|SimilarityConstraint
extends|extends
name|Constraint
block|{
specifier|protected
specifier|final
name|String
name|context
decl_stmt|;
specifier|protected
specifier|final
name|DataTypeEnum
name|contextType
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|additionalFields
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
comment|/**      * Constructs a Similarity Constraint with a given context. The value is      * interpreted as {@link DataTypeEnum#Text} with unknown language.      * @param context the context      * @deprecated use one of the constructor explicitly parsing the      * {@link DataTypeEnum} or the languages (assuming {@link DataTypeEnum#Text}      */
specifier|public
name|SimilarityConstraint
parameter_list|(
name|String
name|context
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|DataTypeEnum
operator|.
name|Text
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a Similarity Constraint with a given context. The value is      * interpreted as {@link DataTypeEnum#Text} with unknown language.      * @param context the context      * @param additionalFields additional fields to include in the similarity search      * @deprecated use one of the constructor explicitly parsing the      * {@link DataTypeEnum} or the languages (assuming {@link DataTypeEnum#Text}      */
specifier|public
name|SimilarityConstraint
parameter_list|(
name|String
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|additionalFields
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|DataTypeEnum
operator|.
name|Text
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimilarityConstraint
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|context
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|)
block|{
name|this
argument_list|(
name|getCollectionContext
argument_list|(
name|context
argument_list|)
argument_list|,
name|DataTypeEnum
operator|.
name|Text
argument_list|,
name|languages
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimilarityConstraint
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|context
parameter_list|,
name|DataTypeEnum
name|contextType
parameter_list|)
block|{
name|this
argument_list|(
name|getCollectionContext
argument_list|(
name|context
argument_list|)
argument_list|,
name|contextType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimilarityConstraint
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|context
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|additionalFields
parameter_list|)
block|{
name|this
argument_list|(
name|getCollectionContext
argument_list|(
name|context
argument_list|)
argument_list|,
name|DataTypeEnum
operator|.
name|Text
argument_list|,
name|languages
argument_list|,
name|additionalFields
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimilarityConstraint
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|context
parameter_list|,
name|DataTypeEnum
name|contextType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|additionalFields
parameter_list|)
block|{
name|this
argument_list|(
name|getCollectionContext
argument_list|(
name|context
argument_list|)
argument_list|,
name|contextType
argument_list|,
literal|null
argument_list|,
name|additionalFields
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SimilarityConstraint
parameter_list|(
name|String
name|context
parameter_list|,
name|DataTypeEnum
name|contextType
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|languages
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|additionalFields
parameter_list|)
block|{
name|super
argument_list|(
name|ConstraintType
operator|.
name|similarity
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Context MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|contextType
operator|=
name|contextType
expr_stmt|;
name|this
operator|.
name|languages
operator|=
name|languages
expr_stmt|;
if|if
condition|(
name|additionalFields
operator|==
literal|null
operator|||
name|additionalFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|additionalFields
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|additionalFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|additionalFields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
operator|!
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|additionalFields
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Additional fields used for similarity calculations      * @return      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAdditionalFields
parameter_list|()
block|{
return|return
name|additionalFields
return|;
block|}
comment|/**      * The languages for the Context, or<code>null</code> if none are defined      * @return the languages or<code>null</code> if none. NOTE that the       * returned collection may contain the<code>null</code> value      * as it represents the default language      */
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getLanguages
parameter_list|()
block|{
return|return
name|languages
return|;
block|}
comment|/**      * Getter for the context      * @return the string representation of the context      */
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**      * The type of the Context. Can be {@link DataTypeEnum#String String},      * {@link DataTypeEnum#Text Text} and {@link DataTypeEnum#Reference Reference}      * @return the type of the context.      */
specifier|public
name|DataTypeEnum
name|getContextType
parameter_list|()
block|{
return|return
name|contextType
return|;
block|}
specifier|private
specifier|static
name|String
name|getCollectionContext
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|refContext
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|context
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|refContext
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|refContext
operator|.
name|append
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
return|return
name|refContext
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

