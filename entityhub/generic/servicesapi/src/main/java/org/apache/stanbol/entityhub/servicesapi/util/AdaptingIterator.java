begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Uses the parsed Adapter to convert values of type T to values of type  * A. If an instance of T can not be converted to A, than such values are  * filtered. This means that this implementation can be used for both filtering  * and converting of values of the base iterator. In fact the   * FilteringIterator is implemented based on this class.<p>  * Note that {@link Iterator#remove()} only works as long as   * {@link Iterator#hasNext()} was not called to determine if there are  * further elements. The reason for that is, that in order to filter elements  * of the parent iterator {@link Iterator#next()} has to be called to check  * weather any further element is valid against the used Filter.  * This call to {@link Iterator#next()} causes the parent Iterator to switch  * to the next element, meaning that after that the<code>remove()</code>  * method would delete a different element. To avoid that this Iterator  * throws an {@link IllegalStateException} in such cases. If the parent  * Iterator does not support<code>remove()</code> at all an  * {@link UnsupportedOperationException} is thrown.<p>  *   * @author Rupert Westenthaler  *  * @param<T> The type of the incoming elements  * @param<A> The type of the elements returned by this iterator  */
end_comment

begin_class
specifier|public
class|class
name|AdaptingIterator
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|A
argument_list|>
block|{
comment|/**      * Adapts values of type T to values of type A.<code>null</code> indicated      * that the adaption is not possible for the current value of T      *       * @author Rupert Westenthaler      *      * @param<T>      * @param<A>      */
specifier|public
interface|interface
name|Adapter
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|>
block|{
comment|/**          * Converts the value of type T to a value of type A. If an instance of          * T can not be converted to A, than<code>null</code> is returned          * @param value the incoming value          * @param type the target type          * @return the converted value or<code>null</code> if the parsed value          * is<code>null</code> or the parsed value can not be converted          */
name|A
name|adapt
parameter_list|(
name|T
name|value
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|type
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
name|Adapter
argument_list|<
name|T
argument_list|,
name|A
argument_list|>
name|adapter
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|A
argument_list|>
name|type
decl_stmt|;
specifier|private
name|A
name|next
decl_stmt|;
specifier|private
name|Boolean
name|hasNext
decl_stmt|;
comment|/**      * Constructs an instance based on an iterator of type T, an adapter and the      * target type      * @param it the base iterator      * @param adapter the adapter      * @param type the target type      */
specifier|public
name|AdaptingIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|,
name|Adapter
argument_list|<
name|T
argument_list|,
name|A
argument_list|>
name|adapter
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed iterator MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed adapter MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed type MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|hasNext
operator|==
literal|null
condition|)
block|{
comment|// only once even with multiple calls
name|next
operator|=
name|prepareNext
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|next
operator|!=
literal|null
expr_stmt|;
block|}
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|A
name|next
parameter_list|()
block|{
name|hasNext
argument_list|()
expr_stmt|;
comment|//call hasNext (to init next Element if not already done)
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
else|else
block|{
name|A
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
name|hasNext
operator|=
literal|null
expr_stmt|;
return|return
name|current
return|;
block|}
block|}
comment|/**      * This implementation of remove does have an additional restriction. It      * is only able to remove the current element of the parent Iterator (parsed      * in the constructor) if {@link #hasNext()} was not yet called. This is      * because {@link #hasNext()} needs to call {@link Iterator#next()} on the      * parent iterator to check if there are further elements that can be      * adapted successfully. This causes that the current element of this      * Iterator (stored in an local variable) is no longer the current element      * of the parent iterator and therefore calls to {@link #remove()} would      * delete an other object within the collection holding the elements used      * for this iteration. To prevent this this method throws an      * {@link IllegalStateException} ins such cases. Users of this method need      * therefore to ensure, that there are no calls to remove between a call      * to {@link #hasNext()} and {@link #next()} (what is not the case in      * typical use cases).      * @see Iterator#remove()      */
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
comment|/*          * TODO: See java doc for a detailed description!           * If someone has a better Idea how to solve this please let me know!          * all the best           * Rupert Westenthaler          */
if|if
condition|(
name|hasNext
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Remove can not be called after calling hasNext()! See java doc for more information."
argument_list|)
throw|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|A
name|prepareNext
parameter_list|()
block|{
name|T
name|check
decl_stmt|;
name|A
name|converted
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|check
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|converted
operator|=
name|adapter
operator|.
name|adapt
argument_list|(
name|check
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|converted
operator|!=
literal|null
condition|)
block|{
return|return
name|converted
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

