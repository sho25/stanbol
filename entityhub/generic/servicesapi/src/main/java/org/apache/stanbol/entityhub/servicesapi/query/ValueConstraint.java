begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A constraint the filters/selects based on the value and/or the parsed  * dataTypes. A valid constraint MUST define a value OR valid data type. A  * valid data type is defined as a String that is NOT NULL and NOT empty.<p>  * If the collection of data types is<code>null</code> components processing  * this constraint are encouraged to deduct the data types based on the type  * of the value.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ValueConstraint
extends|extends
name|Constraint
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|values
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|dataTypeUris
decl_stmt|;
specifier|public
name|ValueConstraint
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValueConstraint
parameter_list|(
name|Object
name|value
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|dataTypes
parameter_list|)
block|{
name|super
argument_list|(
name|ConstraintType
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|v
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterable
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|(
name|Iterable
argument_list|<
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
for|for
control|(
name|Object
name|val
operator|:
name|values
control|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|v
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The values MUST BE NULL or "
operator|+
literal|"contain at least a single NOT NULL value MUST BE parsed!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|values
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//single value
name|this
operator|.
name|values
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*          * Implementation NOTE:          *   We need to use a LinkedHashSet here to          *    1) ensure that there are no duplicates and          *    2) ensure ordering of the parsed constraints          *   Both is important: Duplicates might result in necessary calculations          *   and ordering might be important for users that expect that the          *   dataType parsed as first is the first used for processing (e.g.          *   when specifying acceptable data types for a field, one would expect          *   that values that need to be converted are preferable converted to          *   the datatype specified as first)          */
if|if
condition|(
name|dataTypes
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|dataTypeUris
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dataType
range|:
name|dataTypes
control|)
block|{
if|if
condition|(
name|dataType
operator|!=
literal|null
operator|&&
operator|!
name|dataType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataTypeUris
operator|.
name|add
argument_list|(
name|dataType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataTypeUris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least a single NOT NULL and "
operator|+
literal|"not empty data type uri MUST BE parsed (NULL will trigger "
operator|+
literal|"detection of the data type based on the parsed value(s))!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|dataTypeUris
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|dataTypeUris
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dataTypeUris
operator|=
literal|null
expr_stmt|;
block|}
comment|//it's questionable if we should do that at this position, because
comment|//components that process that constraint might have better ways to
comment|//do that and than they can not know if the user parsed a data type or
comment|//this code has calculated it based on the java type of the value!
comment|//        if(dataTypeUris.isEmpty()){ //meaning value != null
comment|//            for(DataTypeEnum dataType : DataTypeEnum.getAllDataTypes(value.getClass())){
comment|//                dataTypeUris.add(dataType.getUri());
comment|//            }
comment|//        }
block|}
end_class

begin_comment
comment|/**      * Getter for the first parsed value      * @return the value or<code>null</code> if the value is not constraint      */
end_comment

begin_comment
comment|//    public final Object getValue() {
end_comment

begin_comment
comment|//        return values.iterator().next();
end_comment

begin_comment
comment|//    }
end_comment

begin_comment
comment|/**      * Getter for the value      * @return the value or<code>null</code> if the value is not constraint      */
end_comment

begin_function
specifier|public
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
end_function

begin_comment
comment|/**      * Getter for the list of the parsed data types URIs      * @return the list of dataType URIs or an empty list if not defined.      */
end_comment

begin_function
specifier|public
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|getDataTypes
parameter_list|()
block|{
return|return
name|dataTypeUris
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"ValueConstraint[values=%s|types:%s]"
argument_list|,
name|values
argument_list|,
name|dataTypeUris
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

