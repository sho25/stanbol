begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_comment
comment|/**  * Enumeration that defines fields that need to be treated specially by  * the Stanbol Entityhub.<p>  * All those field do use the {@link NamespaceEnum#entityhubQuery} namespace.  * Entries of this enumeration are equals to the local name of the URIs.  * and are also defined by the {@link RdfResourceEnum}. This enumeration is  * intended to be used by {@link Yard} implementations to efficiently work with  * special fields (e.g. decide if a field is a special field)  * @author Rupert Westenthaler  */
end_comment

begin_enum
specifier|public
enum|enum
name|SpecialFieldEnum
block|{
comment|/**      * The full text field. Union over all {@link Text} and String values      * of any outgoing relation      */
name|fullText
block|,
comment|/**      * The semantic context field. Union over all {@link Reference} values       * of any outgoing relation      */
name|references
block|;
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
specifier|private
specifier|final
name|String
name|qname
decl_stmt|;
specifier|private
name|SpecialFieldEnum
parameter_list|()
block|{
name|this
operator|.
name|uri
operator|=
name|NamespaceEnum
operator|.
name|entityhubQuery
operator|.
name|getNamespace
argument_list|()
operator|+
name|name
argument_list|()
expr_stmt|;
name|this
operator|.
name|qname
operator|=
name|NamespaceEnum
operator|.
name|entityhubQuery
operator|.
name|getPrefix
argument_list|()
operator|+
name|name
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|String
name|getQName
parameter_list|()
block|{
return|return
name|qname
return|;
block|}
specifier|public
name|NamespaceEnum
name|getNamespace
parameter_list|()
block|{
return|return
name|NamespaceEnum
operator|.
name|entityhubQuery
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SpecialFieldEnum
argument_list|>
name|name2field
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SpecialFieldEnum
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|SpecialFieldEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialFieldEnum
name|specialField
range|:
name|SpecialFieldEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|specialField
operator|.
name|getUri
argument_list|()
argument_list|,
name|specialField
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|specialField
operator|.
name|getUri
argument_list|()
argument_list|,
name|specialField
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|specialField
operator|.
name|name
argument_list|()
argument_list|,
name|specialField
argument_list|)
expr_stmt|;
block|}
name|name2field
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if the parsed name (local name or qname or full URI) is a      * special field      * @param name the local name, qname or URI      * @return<code>true</code> if the parsed name references to a special field      * or otherwise<code>false</code>      */
specifier|public
specifier|static
specifier|final
name|boolean
name|isSpecialField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getSpecialField
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Getter for the {@link SpecialFieldEnum} for the parsed name       * (local name or qname or full URI)      * @param name the local name, qname or URI      * @return the {@link SpecialFieldEnum} or<code>null</code> if the parsed      * name does not refer to a special field.      */
specifier|public
specifier|static
name|SpecialFieldEnum
name|getSpecialField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name2field
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

