begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_comment
comment|/**  * Implementation of the Entity interface that also enforces the required   * relations between {@link Entity#getRepresentation() representation} and   * {@link Entity#getMetadata() metadata}.  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|EntityImpl
implements|implements
name|Entity
block|{
comment|//private static final Logger log = LoggerFactory.getLogger(EntityImpl.class);
specifier|private
specifier|final
name|Representation
name|representation
decl_stmt|;
specifier|private
specifier|final
name|String
name|site
decl_stmt|;
specifier|private
specifier|final
name|Representation
name|metadata
decl_stmt|;
comment|/**      * Creates a new Entity for the parsed site, representation and metadata.<p>      * This Constructor checks for {@link RdfResourceEnum#hasMetadata} relations      * in the {@link Entity#getRepresentation() representation} as well as      * {@link RdfResourceEnum#aboutRepresentation} relations in the       * {@link Entity#getMetadata() metadata}.<p>      * If such are present, the IDs of the parsed representation and metadata      * are validated against those. If they are not present this values are      * initialised based on the IDs of the parsed representation and metadata.<p>      * In case<code>null</code> is parsed as metadata, than a new      * representation is created with the default ID (the ID of the represnetation      *<code>+ ".meta"</code>.      * @param siteId the site (MUST NOT be<code>null</code> nor empty)      * @param representation the representation(MUST NOT be<code>null</code> nor empty)      * @param metadata the metadata (MAY BE<code>null</code>)      * @throws IllegalArgumentException In case<ul>      *<li><code>null</code> is parsed for any parameter other than the metadata      *<li> the siteId is empty      *<li> the id of the representation is not the same as the aboutness of the      *      metadata      *<li> the id of the metadata is not the same as the id referenced by the      *      representation      *</ul>      */
specifier|public
name|EntityImpl
parameter_list|(
name|String
name|siteId
parameter_list|,
name|Representation
name|representation
parameter_list|,
name|Representation
name|metadata
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|representation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NULL value ist not allowed for the Representation"
argument_list|)
throw|;
block|}
if|if
condition|(
name|siteId
operator|==
literal|null
operator|||
name|siteId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Parsed SiteId MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|site
operator|=
name|siteId
expr_stmt|;
name|this
operator|.
name|representation
operator|=
name|representation
expr_stmt|;
name|Reference
name|representationRef
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|representation
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The ID of the Representation and "
operator|+
literal|"the Metadata MUST NOT BE the same!"
argument_list|)
throw|;
block|}
name|representationRef
operator|=
name|metadata
operator|.
name|getFirstReference
argument_list|(
name|RdfResourceEnum
operator|.
name|aboutRepresentation
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|representationRef
operator|!=
literal|null
operator|&&
operator|!
name|representationRef
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Metadata are not about the representation of the"
operator|+
literal|"Entity to be created (metadata aboutness=%s, representation=%s)."
argument_list|,
name|representationRef
operator|.
name|getReference
argument_list|()
argument_list|,
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
else|else
block|{
comment|//init new metadata
comment|//This is typically used if no metadata are persisted for an entity
comment|//(e.g. for entities of a remote site).
comment|//However the created and initialised metadata can be persisted
comment|//afterwards.
comment|//The usage of a specific Representation implementation here is not
comment|//an issue because Yards need to support storage of any
comment|//Representation implementation!
name|String
name|metadataId
init|=
name|representation
operator|.
name|getId
argument_list|()
operator|+
literal|".meta"
decl_stmt|;
name|this
operator|.
name|metadata
operator|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createRepresentation
argument_list|(
name|metadataId
argument_list|)
expr_stmt|;
name|representationRef
operator|=
literal|null
expr_stmt|;
block|}
comment|//init the link from the metadata to the representation
if|if
condition|(
name|representationRef
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|metadata
operator|.
name|setReference
argument_list|(
name|RdfResourceEnum
operator|.
name|aboutRepresentation
operator|.
name|getUri
argument_list|()
argument_list|,
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//add the rdf:type for Metadata
name|this
operator|.
name|metadata
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|RdfResourceEnum
operator|.
name|Metadata
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", id="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", site="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSite
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", representation="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", metadata="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getSite
parameter_list|()
block|{
return|return
name|site
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getId
parameter_list|()
block|{
return|return
name|representation
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Representation
name|getRepresentation
parameter_list|()
block|{
return|return
name|representation
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Representation
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|representation
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Entity
operator|&&
name|representation
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Entity
operator|)
name|o
operator|)
operator|.
name|getRepresentation
argument_list|()
argument_list|)
operator|&&
name|site
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Entity
operator|)
name|o
operator|)
operator|.
name|getSite
argument_list|()
argument_list|)
operator|&&
name|metadata
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Entity
operator|)
name|o
operator|)
operator|.
name|getMetadata
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

