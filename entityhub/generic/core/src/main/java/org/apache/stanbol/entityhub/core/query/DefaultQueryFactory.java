begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_comment
comment|/**  * Simple {@link FieldQueryFactory} implementation that uses the singleton  * pattern and returns for each call to {@link #createFieldQuery()} a new  * instance of {@link FieldQueryImpl}.  *  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|DefaultQueryFactory
implements|implements
name|FieldQueryFactory
block|{
specifier|private
specifier|static
specifier|final
name|DefaultQueryFactory
name|instance
init|=
operator|new
name|DefaultQueryFactory
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|FieldQueryFactory
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|protected
name|DefaultQueryFactory
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FieldQuery
name|createFieldQuery
parameter_list|()
block|{
return|return
operator|new
name|FieldQueryImpl
argument_list|()
return|;
block|}
block|}
end_class

end_unit

