begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|DataTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_comment
comment|/**  * This class is used to convert values to a specific dataType. By default the  * Factory comes initialised with converters for all dataTypes defined in the  * {@link DataTypeEnum}.<p>  * When the default configuration is sufficient, than one should use the  * static {@link #getInstance()} methods. When one needs to change the configuration  * it is advised to create an own instance by using the  * {@link #ValueConverterFactory(ValueFactory)}.<p>  * Calling {@link #registerConverter(ValueConverter)} on an instance created by  * the static {@link #getInstance()} methods will result in an  * {@link IllegalStateException}.  *  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ValueConverterFactory
block|{
specifier|private
specifier|static
name|ValueConverterFactory
name|defaultInstance
decl_stmt|;
comment|/**      * Getter for the ValueConverterFactory instance using the default configurations      * of converters. This configuration can not be changed.<p>      * If you need to use a specific configuration use the public constructor      * to create your own private instance!      * @return the default ValueConverterFactory instance      */
specifier|public
specifier|static
name|ValueConverterFactory
name|getDefaultInstance
parameter_list|()
block|{
if|if
condition|(
name|defaultInstance
operator|==
literal|null
condition|)
block|{
name|defaultInstance
operator|=
operator|new
name|ValueConverterFactory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultInstance
return|;
block|}
specifier|private
name|boolean
name|readonly
init|=
literal|false
decl_stmt|;
comment|/**      * Creates a new factory instance that supports conversions for all      * datatypes defines in {@link DataTypeEnum}.<p>      * Please note the static {@link #getInstance(ValueFactory)} methods that      * should be used instead if one do not plan to change the configuration of      * the created instance.      * @param valueFactory the {@link ValueFactory} instance to be used to      * create {@link Text} and {@link Reference} instances. If<code>null</code>      * the {@link InMemoryValueFactory} is used.      */
specifier|public
name|ValueConverterFactory
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internally used to ensure readonly state for instances created by the      * static {@link #getInstance(ValueFactory)} methods.      * @see #ValueConverterFactory(ValueFactory)      */
specifier|private
name|ValueConverterFactory
parameter_list|(
name|boolean
name|readonly
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|this
operator|.
name|readonly
operator|=
name|readonly
expr_stmt|;
block|}
comment|/**      * Populates the factory with the default configuration that supports all      * {@link DataTypeEnum} entries.      */
specifier|private
name|void
name|init
parameter_list|()
block|{
name|registerConverter
argument_list|(
operator|new
name|AnyUriConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|BooleanConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|ByteConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|DateConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|DateTimeConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|DecimalConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|DoubleConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|DurationConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|FloatConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|IntConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|IntegerConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|LongConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|ReferenceConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|ShortConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|StringConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|TextConverter
argument_list|()
argument_list|)
expr_stmt|;
name|registerConverter
argument_list|(
operator|new
name|TimeConverter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ValueConverter
argument_list|<
name|?
argument_list|>
argument_list|>
name|uri2converter
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ValueConverter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//    Map<Class<?>,ValueConverter<?>> type2converter = new HashMap<Class<?>, ValueConverter<?>>();
comment|/**      * Registers a converter for the {@link ValueConverter#getDataType()}. If      * a converter for this datatype is already present, than it is replaced by      * this one.      */
specifier|protected
name|void
name|registerConverter
parameter_list|(
name|ValueConverter
argument_list|<
name|?
argument_list|>
name|converter
parameter_list|)
block|{
if|if
condition|(
name|readonly
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to register an converter for a read only ValueConverter Factory!"
operator|+
literal|"Do not use the static getInstance(..) Methods if you need to change the configuration."
argument_list|)
throw|;
block|}
name|uri2converter
operator|.
name|put
argument_list|(
name|converter
operator|.
name|getDataType
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
comment|//    public<T> ValueConverter<T> getConverter(Class<T> javaType){
comment|//        return null;
comment|//    }
comment|/**      * Getter for the converter of the parsed datatype uri.      * @param the uri of the datatype. For datatypes registered in the      *   {@link DataTypeEnum} the {@link DataTypeEnum#getUri()} should be used.      * @return the converter or<code>null</code> if no converter is present for      * the parsed datatype uri.      */
specifier|public
name|ValueConverter
argument_list|<
name|?
argument_list|>
name|getConverter
parameter_list|(
name|String
name|dataTypeUri
parameter_list|)
block|{
return|return
name|uri2converter
operator|.
name|get
argument_list|(
name|dataTypeUri
argument_list|)
return|;
block|}
comment|/**      * Converts the parsed value to the specified dataType.      * @param value the value to convert.<code>null</code> is parsed to the      *    converter and may be supported for some datatypes. If not supported,      *    than parsing<code>null</code> results in<code>null</code> to be      *    returned.      * @param dataTypeUri the URI of the dataType      * @return the converted value or<code>null</code> if no conversion was      * possible.      * @throws IllegalArgumentException if the parsed dataTyeUri is<code>null</code>      */
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|dataTypeUri
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|dataTypeUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed datatype URI MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|ValueConverter
argument_list|<
name|?
argument_list|>
name|converter
init|=
name|uri2converter
operator|.
name|get
argument_list|(
name|dataTypeUri
argument_list|)
decl_stmt|;
return|return
name|converter
operator|!=
literal|null
condition|?
name|converter
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|valueFactory
argument_list|)
else|:
literal|null
return|;
block|}
comment|/*--------------------------------------------------------------------------      *    Implementation of the ValueConverters for the dataTypes defined by      *    DataTypeEnum      * -------------------------------------------------------------------------      */
comment|/**      * This Interface defines an simple converter interface that allows a      * registry to get metadata about the type the converter can create and      * second the {@link #convert(Object)} method that is called to convert      * to the target type.      * @author Rupert Westenthaler      *      * @param<T> the type of created objects      */
specifier|public
specifier|static
interface|interface
name|ValueConverter
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**          * The URI of the dataType created by this converter          * @return the data type          */
name|String
name|getDataType
parameter_list|()
function_decl|;
comment|/**          * Converts the Value or returns<code>null</code> if the conversion was not          * possible.          * @param value the value to convert.<code>null</code> is parsed to the          *    converter and may be supported for some datatypes. If not supported,          *    than parsing<code>null</code> results in<code>null</code> to be          *    returned.          * @param valueFactory the ValueFactory used to create the converted value          * @return the converted value or<code>null</code> if the conversion was not          * possible          */
name|T
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|BooleanConverter
implements|implements
name|ValueConverter
argument_list|<
name|Boolean
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
else|else
block|{
comment|//can not use the Boolean.parse method, because I need to return
comment|//null for strings != true || false ...
name|String
name|strValue
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|strValue
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|strValue
argument_list|)
condition|?
name|Boolean
operator|.
name|FALSE
else|:
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Boolean
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteConverter
implements|implements
name|ValueConverter
argument_list|<
name|Byte
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Byte
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
name|Byte
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
operator|||
name|value
operator|instanceof
name|Integer
operator|||
name|value
operator|instanceof
name|Short
condition|)
block|{
name|long
name|longValue
init|=
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|longValue
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|longValue
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
operator|(
name|byte
operator|)
name|longValue
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
operator|||
name|value
operator|instanceof
name|Double
condition|)
block|{
try|try
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|byteValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|byteValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Byte
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ShortConverter
implements|implements
name|ValueConverter
argument_list|<
name|Short
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Short
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
return|return
operator|(
name|Short
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
operator|||
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|long
name|longValue
init|=
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|longValue
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|&&
name|longValue
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
operator|(
name|short
operator|)
name|longValue
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
operator|||
name|value
operator|instanceof
name|Double
condition|)
block|{
try|try
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|shortValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|shortValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Short
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntConverter
implements|implements
name|ValueConverter
argument_list|<
name|Integer
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|long
name|longValue
init|=
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|longValue
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|longValue
operator|>=
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
operator|(
name|int
operator|)
name|longValue
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
operator|||
name|value
operator|instanceof
name|Double
condition|)
block|{
try|try
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|intValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Int
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongConverter
implements|implements
name|ValueConverter
argument_list|<
name|Long
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Long
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
name|Long
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
operator|||
name|value
operator|instanceof
name|Double
condition|)
block|{
try|try
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|longValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|longValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Long
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatConverter
implements|implements
name|ValueConverter
argument_list|<
name|Float
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Float
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
name|Float
operator|)
name|value
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Float
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleConverter
implements|implements
name|ValueConverter
argument_list|<
name|Double
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Double
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
name|Double
operator|)
name|value
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Double
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntegerConverter
implements|implements
name|ValueConverter
argument_list|<
name|BigInteger
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|BigInteger
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BigInteger
condition|)
block|{
return|return
operator|(
name|BigInteger
operator|)
name|value
return|;
block|}
else|else
block|{
try|try
block|{
comment|//would also support 10000000000000000000000000000000.0
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toBigIntegerExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Integer
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalConverter
implements|implements
name|ValueConverter
argument_list|<
name|BigDecimal
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|BigDecimal
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|value
return|;
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Decimal
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyUriConverter
implements|implements
name|ValueConverter
argument_list|<
name|Reference
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Reference
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Reference
condition|)
block|{
return|return
operator|(
name|Reference
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|URI
operator|||
name|value
operator|instanceof
name|URL
condition|)
block|{
return|return
name|valueFactory
operator|.
name|createReference
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
operator|new
name|URI
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//just for validating the string
return|return
name|valueFactory
operator|.
name|createReference
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|AnyUri
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReferenceConverter
extends|extends
name|AnyUriConverter
block|{
comment|//same as AnyUri just parse Reference as DataType
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Reference
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateTimeConverter
implements|implements
name|ValueConverter
argument_list|<
name|Date
argument_list|>
block|{
specifier|private
specifier|final
name|DataTypeEnum
name|dataType
decl_stmt|;
specifier|public
name|DateTimeConverter
parameter_list|()
block|{
name|this
operator|.
name|dataType
operator|=
name|DataTypeEnum
operator|.
name|DateTime
expr_stmt|;
block|}
specifier|protected
name|DateTimeConverter
parameter_list|(
name|DataTypeEnum
name|dataType
parameter_list|)
block|{
if|if
condition|(
name|dataType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed DataType MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
block|{
return|return
operator|(
name|Date
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|XMLGregorianCalendar
condition|)
block|{
return|return
operator|(
operator|(
name|XMLGregorianCalendar
operator|)
name|value
operator|)
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
block|{
return|return
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|TimeUtils
operator|.
name|toDate
argument_list|(
name|dataType
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|dataType
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateConverter
extends|extends
name|DateTimeConverter
block|{
specifier|public
name|DateConverter
parameter_list|()
block|{
name|super
argument_list|(
name|DataTypeEnum
operator|.
name|Date
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimeConverter
extends|extends
name|DateTimeConverter
block|{
specifier|public
name|TimeConverter
parameter_list|()
block|{
name|super
argument_list|(
name|DataTypeEnum
operator|.
name|Time
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TextConverter
implements|implements
name|ValueConverter
argument_list|<
name|Text
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Text
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Text
condition|)
block|{
return|return
operator|(
name|Text
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|valueFactory
operator|.
name|createText
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Text
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringConverter
implements|implements
name|ValueConverter
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|String
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|String
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DurationConverter
implements|implements
name|ValueConverter
argument_list|<
name|Duration
argument_list|>
block|{
specifier|private
name|boolean
name|nullAsZeroLengthDuration
decl_stmt|;
comment|/**          * Creates a converter for durations          */
specifier|public
name|DurationConverter
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * Creates a converter for durations          * @param nullAsZeroLengthDuration if true, than null values parsed to the          * {@link #convert(Object)} are interpreted as durations with zero length.          */
specifier|public
name|DurationConverter
parameter_list|(
name|boolean
name|nullAsZeroLengthDuration
parameter_list|)
block|{
name|this
operator|.
name|nullAsZeroLengthDuration
operator|=
name|nullAsZeroLengthDuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Duration
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullAsZeroLengthDuration
condition|)
block|{
return|return
name|TimeUtils
operator|.
name|toDuration
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Duration
condition|)
block|{
return|return
operator|(
name|Duration
operator|)
name|value
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|TimeUtils
operator|.
name|toDuration
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**          * Getter for the state if a null value should be interpreted as a          * duration with zero length.          * @return the state          */
specifier|public
specifier|final
name|boolean
name|isNullAsZeroLengthDuration
parameter_list|()
block|{
return|return
name|nullAsZeroLengthDuration
return|;
block|}
comment|/**          * Setter for the state if a null value should be interpreted as a          * duration with zero length.          * @param nullAsZeroLengthDuration the new state          */
specifier|public
specifier|final
name|void
name|setNullAsZeroLengthDuration
parameter_list|(
name|boolean
name|nullAsZeroLengthDuration
parameter_list|)
block|{
name|this
operator|.
name|nullAsZeroLengthDuration
operator|=
name|nullAsZeroLengthDuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataType
parameter_list|()
block|{
return|return
name|DataTypeEnum
operator|.
name|Duration
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

