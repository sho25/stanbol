begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_comment
comment|/**  * Abstract super class for all Wrappers over Entities managed by the Entityhub.   * Provides also getter and setter for some general purpose metadata.  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|EntityWrapper
block|{
specifier|protected
specifier|final
name|Entity
name|wrappedEntity
decl_stmt|;
specifier|public
name|EntityWrapper
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Entity MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|wrappedEntity
operator|=
name|entity
expr_stmt|;
block|}
comment|/**      * Getter for the wrapped Entity      * @return the wrapped entity      */
specifier|public
specifier|final
name|Entity
name|getWrappedEntity
parameter_list|()
block|{
return|return
name|wrappedEntity
return|;
block|}
comment|/**      * Setter for the creation date of this mapping.<p>      * Note this is store in the metadata.      * @param date the date      */
specifier|public
specifier|final
name|void
name|setCreated
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|set
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"created"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the creation date of this mapping      * TODO: decide if that should be stored in the data or the metadata      * @return the creation date.       */
specifier|public
specifier|final
name|Date
name|getCreated
parameter_list|()
block|{
return|return
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"created"
argument_list|,
name|Date
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Setter for the modified date (replaces existing values)      * @param date the new date      */
specifier|public
name|void
name|setModified
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|set
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"modified"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the last modified date      * @return the date of the last modification      */
specifier|public
specifier|final
name|Date
name|getModified
parameter_list|()
block|{
return|return
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"modified"
argument_list|,
name|Date
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Adds a link to a contributor (e.g. a site where some information where      * imported)      * @param reference the contributor      */
specifier|public
specifier|final
name|void
name|addContributorLink
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|!=
literal|null
operator|&&
operator|!
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"contributor"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a reference to a contributor      * @param reference the contributor      */
specifier|public
specifier|final
name|void
name|removeContributorLink
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeReference
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"contributor"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a name to a contributor (e.g. a site where some information where      * imported)      * @param name the contributor      */
specifier|public
specifier|final
name|void
name|addContributorName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addNaturalText
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"contributor"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a contributor      * @param name the contributor      */
specifier|public
specifier|final
name|void
name|removeContributorName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeNaturalText
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"contributor"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a reference to the creator to the entity (metadata)      * @param reference the creator      */
specifier|public
specifier|final
name|void
name|addCreatorLink
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|!=
literal|null
operator|&&
operator|!
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"creator"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a link to the creator      * @param reference the creator      */
specifier|public
specifier|final
name|void
name|removeCreatorLink
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeReference
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"creator"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a name to the creator to the entity (metadata)      * @param name the creator      */
specifier|public
specifier|final
name|void
name|addCreatorName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addNaturalText
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"creator"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a creator      * @param name the creator      */
specifier|public
specifier|final
name|void
name|removeCreatorName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeNaturalText
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"creator"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an attribution to the metadata of the entity      * @param text the attribution      * @param lang the language of the attribution (optional)      */
specifier|public
specifier|final
name|void
name|addAttributionText
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addNaturalText
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"attributionName"
argument_list|,
name|text
argument_list|,
name|lang
argument_list|)
expr_stmt|;
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"Work"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds an link to the attribution to the metadata of the entity      * @param reference the link to the attribution      */
specifier|public
specifier|final
name|void
name|addAttributionLink
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|!=
literal|null
operator|&&
operator|!
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"attributionURL"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"Work"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes all Attributions form the metadata fo the entity      */
specifier|public
specifier|final
name|void
name|removeAttributions
parameter_list|()
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeAll
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"attributionURL"
argument_list|)
expr_stmt|;
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeAll
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"attributionName"
argument_list|)
expr_stmt|;
name|checkForCcWork
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds a reference to the license to the metadata of the entity      * @param reference the license      */
specifier|public
specifier|final
name|void
name|addLicenseUrl
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|!=
literal|null
operator|&&
operator|!
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"license"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|addReference
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"Work"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//    public final void setLicense(String name,String text,String lang){
comment|//        if(name != null&& text != null){
comment|//            //add type, relation to the entity and the license information
comment|//            wrappedEntity.getMetadata().addNaturalText("", name, lang);
comment|//        } else {
comment|//            throw new IllegalArgumentException("Both the license name and the text MUST NOT be NULL!");
comment|//        }
comment|//    }
comment|/**      * Removes the license from the metadata of the entity      * @param reference the license      */
specifier|public
specifier|final
name|void
name|removeLicense
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeReference
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"license"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|checkForCcWork
argument_list|()
expr_stmt|;
block|}
comment|/**      * checks if the cc:Work type can be removed      */
specifier|private
name|void
name|checkForCcWork
parameter_list|()
block|{
if|if
condition|(
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"license"
argument_list|)
operator|==
literal|null
operator|&&
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"attributionName"
argument_list|)
operator|==
literal|null
operator|&&
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"attributionURL"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
operator|.
name|removeReference
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|,
name|NamespaceEnum
operator|.
name|cc
operator|+
literal|"Work"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

