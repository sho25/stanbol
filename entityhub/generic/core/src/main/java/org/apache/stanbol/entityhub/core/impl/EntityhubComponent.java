begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|OsgiUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ManagedEntityState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|MappingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the Entityhub Configuration that consumes the configuration  * form OSGI. This replaces the old EntityhubConfigurationImpl (up to 0.11.0)  * @since 0.12.0  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.core.impl.EntityhubConfigurationImpl"
argument_list|)
specifier|public
class|class
name|EntityhubComponent
implements|implements
name|EntityhubConfiguration
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityhubComponent
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|ID
argument_list|,
name|value
operator|=
literal|"entityhub"
argument_list|)
specifier|private
name|String
name|entityhubID
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|NAME
argument_list|,
name|value
operator|=
literal|"<organisations> Entityhub"
argument_list|)
specifier|private
name|String
name|entityhubName
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|DESCRIPTION
argument_list|,
name|value
operator|=
literal|"The entityhub holding all entities of<organisation>"
argument_list|)
specifier|private
name|String
name|entityhubDescription
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|PREFIX
argument_list|,
name|value
operator|=
literal|"urn:org.apache.stanbol:entityhub:"
argument_list|)
specifier|private
name|String
name|entityhubPrefix
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|ENTITYHUB_YARD_ID
argument_list|,
name|value
operator|=
name|EntityhubConfiguration
operator|.
name|DEFAULT_ENTITYHUB_YARD_ID
argument_list|)
specifier|private
name|String
name|entityhubYardId
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|FIELD_MAPPINGS
argument_list|,
name|value
operator|=
block|{
comment|//This is the default config for well known Ontologies
comment|// --- Define the Languages for all fields ---
comment|//NOTE: the leading space is required for the global filter!
literal|" | @=null;en;de;fr;it"
block|,
comment|//will filter all labels with other languages
comment|// --- RDF, RDFS and OWL Mappings ---
literal|"rdfs:label"
block|,
comment|//rdf:label
literal|"rdfs:label> entityhub:label"
block|,
literal|"rdfs:comment"
block|,
comment|//rdf:comment
literal|"rdfs:comment> entityhub:description"
block|,
literal|"rdf:type | d=entityhub:ref"
block|,
comment|//The types
literal|"owl:sameAs | d=entityhub:ref"
block|,
comment|//used by LOD to link to URIs used to identify the same Entity
comment|// --- Dublin Core ---
literal|"dc:*"
block|,
comment|//all DC Terms properties
literal|"dc:title> entityhub:label"
block|,
literal|"dc:description> entityhub:description"
block|,
literal|"dc-elements:*"
block|,
comment|//all DC Elements (one could also define the mappings to the DC Terms counterparts here
literal|"dc-elements:title> entityhub:label"
block|,
literal|"dc-elements:description> entityhub:description"
block|,
comment|// --- Spatial Things ---
literal|"geo:lat | d=xsd:double"
block|,
literal|"geo:long | d=xsd:double"
block|,
literal|"geo:alt | d=xsd:int;xsd:float"
block|,
comment|//also allow floating point if one needs to use fractions of meters
comment|// --- Thesaurus (via SKOS) ---
comment|//SKOS can be used to define hierarchical terminologies
literal|"skos:*"
block|,
literal|"skos:prefLabel> entityhub:label"
block|,
literal|"skos:definition> entityhub:description"
block|,
literal|"skos:note> entityhub:description"
block|,
literal|"skos:broader | d=entityhub:ref"
block|,
literal|"skos:narrower | d=entityhub:ref"
block|,
literal|"skos:related | d=entityhub:ref"
block|,
comment|//                "skos:member | d=entityhub:ref",
literal|"skos:subject | d=entityhub:ref"
block|,
literal|"skos:inScheme | d=entityhub:ref"
block|,
comment|//                "skos:hasTopConcept | d=entityhub:ref",
comment|//                "skos:topConceptOf | d=entityhub:ref",
comment|// --- Social Networks (via foaf) ---
literal|"foaf:*"
block|,
comment|//The Friend of a Friend schema often used to describe social relations between people
literal|"foaf:name> entityhub:label"
block|,
comment|//                "foaf:knows | d=entityhub:ref",
comment|//                "foaf:made | d=entityhub:ref",
comment|//                "foaf:maker | d=entityhub:ref",
comment|//                "foaf:member | d=entityhub:ref",
literal|"foaf:homepage | d=xsd:anyURI"
block|,
literal|"foaf:depiction | d=xsd:anyURI"
block|,
literal|"foaf:img | d=xsd:anyURI"
block|,
literal|"foaf:logo | d=xsd:anyURI"
block|,
literal|"foaf:page | d=xsd:anyURI"
comment|//page about the entity
block|}
argument_list|)
specifier|private
name|String
index|[]
name|fieldMappingConfig
decl_stmt|;
comment|//NOTE: there is no other way than hard coding the names there!
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|DEFAULT_MAPPING_STATE
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
comment|//seems, that name and value are exchanged ...
name|value
operator|=
literal|'%'
operator|+
name|EntityhubConfiguration
operator|.
name|DEFAULT_MAPPING_STATE
operator|+
literal|".option.proposed"
argument_list|,
name|name
operator|=
literal|"proposed"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|EntityhubConfiguration
operator|.
name|DEFAULT_MAPPING_STATE
operator|+
literal|".option.confirmed"
argument_list|,
name|name
operator|=
literal|"confirmed"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"proposed"
argument_list|)
specifier|private
name|String
name|defaultMappingStateString
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EntityhubConfiguration
operator|.
name|DEFAULT_SYMBOL_STATE
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
comment|//seems, that name and value are exchanged ...
name|value
operator|=
literal|'%'
operator|+
name|EntityhubConfiguration
operator|.
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.proposed"
argument_list|,
name|name
operator|=
literal|"proposed"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|EntityhubConfiguration
operator|.
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.active"
argument_list|,
name|name
operator|=
literal|"active"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"proposed"
argument_list|)
specifier|private
name|String
name|defaultSymblStateString
decl_stmt|;
specifier|private
name|BundleContext
name|bc
decl_stmt|;
comment|/**      * Tracks the availability of the Yard used by the Entityhub.      */
specifier|private
name|ServiceTracker
name|entityhubYardTracker
decl_stmt|;
comment|//reference initialised in the activate method
specifier|private
name|Yard
name|entityhubYard
decl_stmt|;
specifier|private
name|ServiceRegistration
name|entityhubRegistration
decl_stmt|;
specifier|private
name|Entityhub
name|entityhub
decl_stmt|;
comment|/**      * The site manager is used to search for entities within the Entityhub framework      */
annotation|@
name|Reference
comment|// 1..1, static
specifier|private
name|SiteManager
name|siteManager
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindNamespacePrefixService"
argument_list|,
name|unbind
operator|=
literal|"unbindNamespacePrefixService"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|NamespacePrefixService
name|nsPrefixService
decl_stmt|;
specifier|protected
name|void
name|bindNamespacePrefixService
parameter_list|(
name|NamespacePrefixService
name|ps
parameter_list|)
block|{
name|this
operator|.
name|nsPrefixService
operator|=
name|ps
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|entityhubYard
argument_list|,
name|siteManager
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindNamespacePrefixService
parameter_list|(
name|NamespacePrefixService
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|.
name|equals
argument_list|(
name|this
operator|.
name|nsPrefixService
argument_list|)
condition|)
block|{
name|this
operator|.
name|nsPrefixService
operator|=
literal|null
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|entityhubYard
argument_list|,
name|siteManager
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|this
operator|.
name|bc
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Activate Entityhub Component:"
argument_list|)
expr_stmt|;
name|this
operator|.
name|entityhubID
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|ID
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|entityhubID
operator|==
literal|null
operator|||
name|entityhubID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ID
argument_list|,
literal|"The id for the Entityhub MUST NOT be empty!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   + id: {}"
argument_list|,
name|entityhubID
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|entityhubName
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|NAME
argument_list|,
name|this
operator|.
name|entityhubID
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|entityhubName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|NAME
argument_list|,
literal|"The name for the Entityhub MUST NOT be empty!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   + name: {}"
argument_list|,
name|entityhubName
argument_list|)
expr_stmt|;
block|}
name|Object
name|entityhubDescriptionObject
init|=
name|properties
operator|.
name|get
argument_list|(
name|DESCRIPTION
argument_list|)
decl_stmt|;
name|this
operator|.
name|entityhubDescription
operator|=
name|entityhubDescriptionObject
operator|==
literal|null
condition|?
literal|null
else|:
name|entityhubDescriptionObject
operator|.
name|toString
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"   + description: {}"
argument_list|,
name|entityhubDescription
operator|==
literal|null
condition|?
literal|"<none>"
else|:
name|entityhubDescription
argument_list|)
expr_stmt|;
name|this
operator|.
name|entityhubPrefix
operator|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|PREFIX
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|entityhubPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PREFIX
argument_list|,
literal|"The UIR preix for the Entityub MUST NOT be empty!"
argument_list|)
throw|;
block|}
try|try
block|{
operator|new
name|URI
argument_list|(
name|entityhubPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"   + prefix: "
operator|+
name|entityhubPrefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PREFIX
argument_list|,
literal|"The URI prefix for the Entityhub "
operator|+
literal|"MUST BE an valid URI (prefix="
operator|+
name|entityhubPrefix
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|defaultSymbolState
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_SYMBOL_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultSymbolState
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|defaultSymblStateString
operator|=
name|ManagedEntity
operator|.
name|DEFAULT_SYMBOL_STATE
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|defaultSymblStateString
operator|=
name|defaultSymbolState
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Object
name|defaultMappingState
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_MAPPING_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultMappingState
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|defaultMappingStateString
operator|=
name|EntityMapping
operator|.
name|DEFAULT_MAPPING_STATE
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|defaultMappingStateString
operator|=
name|defaultMappingState
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Object
name|fieldMappingConfigObject
init|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|FIELD_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappingConfigObject
operator|instanceof
name|String
index|[]
condition|)
block|{
name|this
operator|.
name|fieldMappingConfig
operator|=
operator|(
name|String
index|[]
operator|)
name|fieldMappingConfigObject
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|FIELD_MAPPINGS
argument_list|,
literal|"Values for this property must be of type Stirng[]!"
argument_list|)
throw|;
block|}
name|String
name|entityhubYardId
init|=
name|OsgiUtils
operator|.
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|ENTITYHUB_YARD_ID
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)(%s=%s))"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|Yard
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Yard
operator|.
name|ID
argument_list|,
name|entityhubYardId
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... tracking EntityhubYard by Filter:"
operator|+
name|filterString
argument_list|)
expr_stmt|;
name|Filter
name|filter
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|createFilter
argument_list|(
name|filterString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ENTITYHUB_YARD_ID
argument_list|,
literal|"Unable to parse OSGI filter '"
operator|+
name|filterString
operator|+
literal|"' for configured Yard id '"
operator|+
name|entityhubYardId
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|entityhubYardTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|filter
argument_list|,
operator|new
name|ServiceTrackerCustomizer
argument_list|()
block|{
specifier|final
name|BundleContext
name|bc
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|.
name|equals
argument_list|(
name|entityhubYard
argument_list|)
condition|)
block|{
name|entityhubYard
operator|=
operator|(
name|Yard
operator|)
name|entityhubYardTracker
operator|.
name|getService
argument_list|()
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|entityhubYard
argument_list|,
name|siteManager
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
block|}
name|bc
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
comment|//the service.ranking might have changed ... so check if the
comment|//top ranked yard is a different one
name|Yard
name|newYard
init|=
operator|(
name|Yard
operator|)
name|entityhubYardTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|newYard
operator|==
literal|null
operator|||
operator|!
name|newYard
operator|.
name|equals
argument_list|(
name|entityhubYard
argument_list|)
condition|)
block|{
name|entityhubYard
operator|=
name|newYard
expr_stmt|;
comment|//set the new yard
comment|//and update the service registration
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|entityhubYard
argument_list|,
name|siteManager
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|service
init|=
name|bc
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entityhubYardTracker
operator|.
name|getServiceReference
argument_list|()
operator|==
literal|null
operator|||
comment|//the first added Service or
comment|//the new service as higher ranking as the current
operator|(
name|reference
operator|.
name|compareTo
argument_list|(
name|entityhubYardTracker
operator|.
name|getServiceReference
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|entityhubYard
operator|=
operator|(
name|Yard
operator|)
name|service
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|entityhubYard
argument_list|,
name|siteManager
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
block|}
comment|// else the new service has lower ranking as the currently use one
block|}
comment|//else service == null -> ignore
return|return
name|service
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|entityhubYardTracker
operator|.
name|open
argument_list|()
expr_stmt|;
comment|//start the tracking
block|}
specifier|private
specifier|synchronized
name|void
name|updateServiceRegistration
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|Yard
name|entityhubYard
parameter_list|,
name|SiteManager
name|siteManager
parameter_list|,
name|NamespacePrefixService
name|nsPrefixService
parameter_list|)
block|{
if|if
condition|(
name|entityhubRegistration
operator|!=
literal|null
condition|)
block|{
name|entityhubRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|entityhubRegistration
operator|=
literal|null
expr_stmt|;
name|entityhub
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|bc
operator|!=
literal|null
operator|&&
name|entityhubYard
operator|!=
literal|null
operator|&&
name|siteManager
operator|!=
literal|null
condition|)
block|{
name|entityhub
operator|=
operator|new
name|EntityhubImpl
argument_list|(
name|entityhubYard
argument_list|,
name|siteManager
argument_list|,
name|this
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
name|entityhubRegistration
operator|=
name|bc
operator|.
name|registerService
argument_list|(
name|Entityhub
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|entityhub
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|entityhubID
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEntityhubYardId
parameter_list|()
block|{
return|return
name|entityhubYardId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|entityhubDescription
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEntityhubPrefix
parameter_list|()
block|{
return|return
name|entityhubPrefix
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|entityhubName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getFieldMappingConfig
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldMappingConfig
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MappingState
name|getDefaultMappingState
parameter_list|()
block|{
try|try
block|{
return|return
name|MappingState
operator|.
name|valueOf
argument_list|(
name|defaultMappingStateString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The value \""
operator|+
name|defaultMappingStateString
operator|+
literal|"\" configured as default MappingState does not match any value of the Enumeration! "
operator|+
literal|"Return the default state as defined by the "
operator|+
name|EntityMapping
operator|.
name|class
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|EntityMapping
operator|.
name|DEFAULT_MAPPING_STATE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ManagedEntityState
name|getDefaultManagedEntityState
parameter_list|()
block|{
try|try
block|{
return|return
name|ManagedEntityState
operator|.
name|valueOf
argument_list|(
name|defaultSymblStateString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The value \""
operator|+
name|defaultSymblStateString
operator|+
literal|"\" configured as default SymbolState does not match any value of the Enumeration! "
operator|+
literal|"Return the default state as defined by the "
operator|+
name|ManagedEntity
operator|.
name|class
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|ManagedEntity
operator|.
name|DEFAULT_SYMBOL_STATE
return|;
block|}
block|}
block|}
end_class

end_unit

