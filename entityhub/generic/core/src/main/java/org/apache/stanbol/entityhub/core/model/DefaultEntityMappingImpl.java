begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is the default implementation of MappedEntity that uses a {@link Representation}  * to store the Data.  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|DefaultEntityMappingImpl
extends|extends
name|DefaultSignImpl
implements|implements
name|EntityMapping
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultEntityMappingImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MappingState
argument_list|>
name|MAPPING_STATE_MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MappingState
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MappingState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MappingState
name|state
range|:
name|MappingState
operator|.
name|values
argument_list|()
control|)
block|{
name|tmp
operator|.
name|put
argument_list|(
name|state
operator|.
name|getUri
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|MAPPING_STATE_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new EntityMapping between the parsed symbol and entity      * @param entityhubId The ID of the Entityhub that defines this mapping      * @param symbol the ID of the symbol      * @param entity the ID of the entity      * @param state the state or<code>null</code> to use the {@link EntityMapping#DEFAULT_MAPPING_STATE}      * @param representation The representation to store the information of this EntityMapping      * @throws IllegalArgumentException If the EntityMapping Instance can not be created based on the parsed parameter.      * This includes<ul>      *<li> the Entityhub ID is<code>null</code> or empty      *<li> the symbol ID is<code>null</code> or empty      *<li> the entity ID is<code>null</code> or empty      *<li> the representation is<code>null</code>      *</ul>      * TODO: Maybe also add an valid {@link MappingState} value for the {@link EntityMapping#STATE}      *       to the requirements      */
specifier|public
name|DefaultEntityMappingImpl
parameter_list|(
name|String
name|entityhubId
parameter_list|,
name|String
name|symbol
parameter_list|,
name|String
name|entity
parameter_list|,
name|MappingState
name|state
parameter_list|,
name|Representation
name|representation
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|(
name|entityhubId
argument_list|,
name|representation
argument_list|)
expr_stmt|;
if|if
condition|(
name|symbol
operator|==
literal|null
operator|||
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed symbol ID MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parsed entity ID MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
name|representation
operator|.
name|setReference
argument_list|(
name|EntityMapping
operator|.
name|SYMBOL_ID
argument_list|,
name|symbol
argument_list|)
expr_stmt|;
name|representation
operator|.
name|setReference
argument_list|(
name|EntityMapping
operator|.
name|ENTITY_ID
argument_list|,
name|entity
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|EntityMapping
operator|.
name|DEFAULT_MAPPING_STATE
expr_stmt|;
block|}
name|representation
operator|.
name|setReference
argument_list|(
name|EntityMapping
operator|.
name|STATE
argument_list|,
name|state
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param siteId      * @param representation The representation that holds the state for the new EntityMapping instance      * @throws IllegalArgumentException If the EntityMapping Instance can not be created based on the parsed parameter.      * This includes<ul>      *<li> the Entityhub ID is<code>null</code> or empty      *<li> the parsed representation does not define a link to an entity      *      (provide a value for the {@link EntityMapping#ENTITY_ID} field)      *<li> the parsed representation does not define a link to a symbol      *      (provide a value for the {@link EntityMapping#SYMBOL_ID} field)      *<li> the representation is<code>null</code>      *</ul>      */
specifier|public
name|DefaultEntityMappingImpl
parameter_list|(
name|String
name|siteId
parameter_list|,
name|Representation
name|representation
parameter_list|)
block|{
name|super
argument_list|(
name|siteId
argument_list|,
name|representation
argument_list|)
expr_stmt|;
comment|//check required fields
if|if
condition|(
name|getEntityId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Representation "
operator|+
name|getId
argument_list|()
operator|+
literal|" does not define required field "
operator|+
name|EntityMapping
operator|.
name|ENTITY_ID
argument_list|)
throw|;
block|}
if|if
condition|(
name|getSymbolId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Representation "
operator|+
name|getId
argument_list|()
operator|+
literal|" does not define required field "
operator|+
name|EntityMapping
operator|.
name|SYMBOL_ID
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEntityId
parameter_list|()
block|{
name|Object
name|id
init|=
name|representation
operator|.
name|getFirst
argument_list|(
name|EntityMapping
operator|.
name|ENTITY_ID
argument_list|)
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getExpires
parameter_list|()
block|{
return|return
name|representation
operator|.
name|getFirst
argument_list|(
name|EntityMapping
operator|.
name|EXPIRES
argument_list|,
name|Date
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MappingState
name|getState
parameter_list|()
block|{
name|Reference
name|stateUri
init|=
name|representation
operator|.
name|getFirstReference
argument_list|(
name|EntityMapping
operator|.
name|STATE
argument_list|)
decl_stmt|;
name|MappingState
name|state
decl_stmt|;
if|if
condition|(
name|stateUri
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|MAPPING_STATE_MAP
operator|.
name|get
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Value "
operator|+
name|stateUri
operator|+
literal|" for field "
operator|+
name|EntityMapping
operator|.
name|STATE
operator|+
literal|" is not a valied MappingState! -> return null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|state
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSymbolId
parameter_list|()
block|{
name|Object
name|id
init|=
name|representation
operator|.
name|getFirst
argument_list|(
name|EntityMapping
operator|.
name|SYMBOL_ID
argument_list|)
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setExpires
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|representation
operator|.
name|set
argument_list|(
name|EntityMapping
operator|.
name|EXPIRES
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setState
parameter_list|(
name|MappingState
name|state
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|representation
operator|.
name|setReference
argument_list|(
name|EntityMapping
operator|.
name|STATE
argument_list|,
name|state
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MappingState can not be set to NULL!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

