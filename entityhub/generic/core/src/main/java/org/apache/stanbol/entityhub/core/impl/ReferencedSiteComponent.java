begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
operator|.
name|ACCESS_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
operator|.
name|CACHE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
operator|.
name|CACHE_STRATEGY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
operator|.
name|ENTITY_DEREFERENCER_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
operator|.
name|ENTITY_SEARCHER_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
operator|.
name|QUERY_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
operator|.
name|PROHIBITED_SITE_IDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
operator|.
name|DEFAULT_SYMBOL_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
operator|.
name|SITE_FIELD_MAPPINGS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|site
operator|.
name|ReferencedSiteConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|OsgiUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntityDereferencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|CacheStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OSGI component that reads the configuration and tracks other services required  * for the {@link ReferencedSiteImpl}. If all those services are available it  * registers the referenced {@link Site} as OSGI service  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|name
operator|=
literal|"org.apache.stanbol.entityhub.site.referencedSite"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|// the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|NAME
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|DESCRIPTION
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|ENTITY_PREFIX
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ACCESS_URI
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ENTITY_DEREFERENCER_TYPE
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ENTITY_DEREFERENCER_TYPE
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|""
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ENTITY_DEREFERENCER_TYPE
operator|+
literal|".option.sparql"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.dereferencer.SparqlDereferencer"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ReferencedSiteConfiguration
operator|.
name|ENTITY_DEREFERENCER_TYPE
operator|+
literal|".option.coolUri"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.dereferencer.CoolUriDereferencer"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"org.apache.stanbol.entityhub.dereferencer.SparqlDereferencer"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|QUERY_URI
argument_list|)
block|,
comment|// the deri server has better performance
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|ENTITY_SEARCHER_TYPE
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|""
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.sparql"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.searcher.SparqlSearcher"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.sparql-virtuoso"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.searcher.VirtuosoSearcher"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.sparql-larq"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.searcher.LarqSearcher"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"org.apache.stanbol.entityhub.searcher.SparqlSearcher"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DEFAULT_SYMBOL_STATE
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.proposed"
argument_list|,
name|name
operator|=
literal|"proposed"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.active"
argument_list|,
name|name
operator|=
literal|"active"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"proposed"
argument_list|)
block|,
comment|//deactivate rarely used properties in the configuration UI
comment|//    @Property(name = DEFAULT_MAPPING_STATE,
comment|//        options = {
comment|//                @PropertyOption(value = '%' + DEFAULT_MAPPING_STATE + ".option.proposed",
comment|//                    name = "proposed"),
comment|//                @PropertyOption(value = '%' + DEFAULT_MAPPING_STATE + ".option.confirmed",
comment|//                    name = "confirmed")}, value = "proposed"),
comment|//    @Property(name = DEFAULT_EXPIRE_DURATION,
comment|//        options = {
comment|//                @PropertyOption(value = '%' + DEFAULT_EXPIRE_DURATION + ".option.oneMonth", name = ""
comment|//                        + (1000L * 60 * 60 * 24 * 30)),
comment|//                @PropertyOption(value = '%' + DEFAULT_EXPIRE_DURATION + ".option.halfYear", name = ""
comment|//                        + (1000L * 60 * 60 * 24 * 183)),
comment|//                @PropertyOption(value = '%' + DEFAULT_EXPIRE_DURATION + ".option.oneYear", name = ""
comment|//                        + (1000L * 60 * 60 * 24 * 365)),
comment|//                @PropertyOption(value = '%' + DEFAULT_EXPIRE_DURATION + ".option.none", name = "0")},
comment|//        value = "0"),
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|CACHE_STRATEGY
argument_list|,
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|CACHE_STRATEGY
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|"none"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|CACHE_STRATEGY
operator|+
literal|".option.used"
argument_list|,
name|name
operator|=
literal|"used"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|CACHE_STRATEGY
operator|+
literal|".option.all"
argument_list|,
name|name
operator|=
literal|"all"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"none"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|CACHE_ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SITE_FIELD_MAPPINGS
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ReferencedSiteComponent
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReferencedSiteComponent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ComponentContext
name|cc
decl_stmt|;
specifier|private
name|BundleContext
name|bc
decl_stmt|;
specifier|private
name|ReferencedSiteConfigurationImpl
name|siteConfiguration
decl_stmt|;
specifier|private
name|boolean
name|dereferencerEqualsEntitySearcherComponent
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external service should be referenced.      * For the ReferencedSiteImpl this means that the {@link EntityDereferencer} and {@link EntitySearcher}      * interfaces are no longer used.      *<p>      *       * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      * @see #isOfflineMode()      * @see #ensureOnline(String, Class)      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindNamespacePrefixService"
argument_list|,
name|unbind
operator|=
literal|"unbindNamespacePrefixService"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|NamespacePrefixService
name|nsPrefixService
decl_stmt|;
specifier|private
name|ServiceTracker
name|cacheTracker
decl_stmt|;
specifier|private
name|Cache
name|cache
decl_stmt|;
specifier|private
specifier|final
name|Object
name|searcherAndDereferencerLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|ComponentFactoryListener
name|searcherComponentFactoryListener
decl_stmt|;
specifier|private
name|ComponentFactoryListener
name|dereferencerComponentFactoryListener
decl_stmt|;
specifier|private
name|ComponentInstance
name|dereferencerComponentInstance
decl_stmt|;
specifier|private
name|ComponentInstance
name|entitySearcherComponentInstance
decl_stmt|;
specifier|private
name|ServiceRegistration
name|referencedSiteRegistration
decl_stmt|;
specifier|private
name|Site
name|referencedSite
decl_stmt|;
specifier|protected
name|void
name|bindNamespacePrefixService
parameter_list|(
name|NamespacePrefixService
name|ps
parameter_list|)
block|{
name|this
operator|.
name|nsPrefixService
operator|=
name|ps
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindNamespacePrefixService
parameter_list|(
name|NamespacePrefixService
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|.
name|equals
argument_list|(
name|this
operator|.
name|nsPrefixService
argument_list|)
condition|)
block|{
name|this
operator|.
name|nsPrefixService
operator|=
literal|null
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the service becomes available      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the service becomes unavailable      *       * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|offlineMode
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
specifier|final
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|YardException
throws|,
name|InvalidSyntaxException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"in {} activate with properties {}"
argument_list|,
name|ReferencedSiteImpl
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|ctx
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
operator|||
name|ctx
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No Component Context and/or Dictionary properties object parsed to the acticate methode"
argument_list|)
throw|;
block|}
name|this
operator|.
name|cc
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|bc
operator|=
name|ctx
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
comment|// create the SiteConfiguration based on the parsed properties
comment|// NOTE that the constructor also validation of the parsed configuration
name|siteConfiguration
operator|=
operator|new
name|ReferencedSiteConfigurationImpl
argument_list|(
name|ctx
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|PROHIBITED_SITE_IDS
operator|.
name|contains
argument_list|(
name|siteConfiguration
operator|.
name|getId
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SiteConfiguration
operator|.
name|ID
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"The ID '%s' of this Referenced Site is one of the following "
operator|+
literal|"prohibited IDs: {} (case insensitive)"
argument_list|,
name|siteConfiguration
operator|.
name|getId
argument_list|()
argument_list|,
name|PROHIBITED_SITE_IDS
argument_list|)
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"> initialise Referenced Site {}"
argument_list|,
name|siteConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the accessUri is the same as the queryUri and both the
comment|// dereferencer and the entitySearcher uses the same component, than we
comment|//need only one component for both dependencies.
name|this
operator|.
name|dereferencerEqualsEntitySearcherComponent
operator|=
comment|// (1) accessURI == queryURI
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|.
name|equals
argument_list|(
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
comment|// (2) entity dereferencer == entity searcher
operator|&&
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|.
name|equals
argument_list|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|)
expr_stmt|;
comment|// init the fieldMapper based on the configuration
name|FieldMapper
name|fieldMappings
init|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getFieldMappings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> Initialise configured field mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|configuredMapping
range|:
name|siteConfiguration
operator|.
name|getFieldMappings
argument_list|()
control|)
block|{
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|configuredMapping
argument_list|,
name|nsPrefixService
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   - add FieldMapping {}"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|fieldMappings
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now init the referenced Services
name|initDereferencerAndEntitySearcher
argument_list|()
expr_stmt|;
comment|// If a cache is configured init the ServiceTracker used to manage the
comment|// Reference to the cache!
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|cacheFilter
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)(%s=%s))"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|Cache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Cache
operator|.
name|CACHE_YARD
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
decl_stmt|;
name|cacheTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|ctx
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|ctx
operator|.
name|getBundleContext
argument_list|()
operator|.
name|createFilter
argument_list|(
name|cacheFilter
argument_list|)
argument_list|,
operator|new
name|ServiceTrackerCustomizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|.
name|equals
argument_list|(
name|cache
argument_list|)
condition|)
block|{
name|cache
operator|=
operator|(
name|Cache
operator|)
name|cacheTracker
operator|.
name|getService
argument_list|()
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
name|bc
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
comment|//the service.ranking might have changed ... so check if the
comment|//top ranked Cache is a different one
name|Cache
name|newCache
init|=
operator|(
name|Cache
operator|)
name|cacheTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|newCache
operator|==
literal|null
operator|||
operator|!
name|newCache
operator|.
name|equals
argument_list|(
name|cache
argument_list|)
condition|)
block|{
name|cache
operator|=
name|newCache
expr_stmt|;
comment|//set the new cahce
comment|//and update the service registration
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|service
init|=
name|bc
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cacheTracker
operator|.
name|getServiceReference
argument_list|()
operator|==
literal|null
operator|||
comment|//the first added Service or
comment|//the new service as higher ranking as the current
operator|(
name|reference
operator|.
name|compareTo
argument_list|(
name|cacheTracker
operator|.
name|getServiceReference
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|cache
operator|=
operator|(
name|Cache
operator|)
name|service
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
comment|// else the new service has lower ranking as the currently use one
block|}
comment|//else service == null -> ignore
return|return
name|service
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Initialise the dereferencer and searcher component as soon as the according {@link ComponentFactory}      * gets registered.      *<p>      * First this Methods tries to find the according {@link ServiceReference}s directly. If they are not      * available (e.g. because the component factories are not yet started) than it adds a      * {@link ServiceListener} for the missing {@link ComponentFactory} that calls the      * {@link #createDereferencerComponent(ComponentFactory)} and      * {@link #createEntitySearcherComponent(ComponentFactory)} as soon as the factory gets registered.      *       * @throws InvalidSyntaxException      *             if the #entitySearcherComponentName or the {@link #dereferencerComponentName} somehow cause      *             an invalid formated string that can not be used to parse a {@link Filter}.      */
specifier|private
name|void
name|initDereferencerAndEntitySearcher
parameter_list|()
throws|throws
name|InvalidSyntaxException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|!=
literal|null
operator|&&
comment|// initialise only if a
comment|// accessUri
operator|!
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
comment|// is configured
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|componentNameFilterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
literal|"component.name"
argument_list|,
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)%s)"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
name|ServiceReference
index|[]
name|refs
init|=
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|createEntitySearcherComponent
argument_list|(
operator|(
name|ComponentFactory
operator|)
name|bc
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// service factory not yet available -> add servicelistener
name|this
operator|.
name|searcherComponentFactoryListener
operator|=
operator|new
name|ComponentFactoryListener
argument_list|(
name|bc
argument_list|)
expr_stmt|;
comment|// NOTE: here the filter MUST include also the objectClass!
name|bc
operator|.
name|addServiceListener
argument_list|(
name|this
operator|.
name|searcherComponentFactoryListener
argument_list|,
name|filterString
argument_list|)
expr_stmt|;
block|}
comment|// context.getComponentInstance().dispose();
comment|// throw an exception to avoid an successful activation
block|}
if|if
condition|(
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
operator|!=
literal|null
operator|&&
comment|// initialise only if a query URI
operator|!
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
comment|// is configured
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|dereferencerEqualsEntitySearcherComponent
condition|)
block|{
name|String
name|componentNameFilterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
literal|"component.name"
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)%s)"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
name|ServiceReference
index|[]
name|refs
init|=
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|createDereferencerComponent
argument_list|(
operator|(
name|ComponentFactory
operator|)
name|bc
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// service factory not yet available -> add servicelistener
name|this
operator|.
name|dereferencerComponentFactoryListener
operator|=
operator|new
name|ComponentFactoryListener
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|this
operator|.
name|bc
operator|.
name|addServiceListener
argument_list|(
name|this
operator|.
name|dereferencerComponentFactoryListener
argument_list|,
name|filterString
argument_list|)
expr_stmt|;
comment|// NOTE: here the filter MUST
comment|// include also the objectClass!
block|}
block|}
block|}
comment|/**      * Creates the entity searcher component used by this {@link Site} (and configured via the      * {@link SiteConfiguration#ENTITY_SEARCHER_TYPE} property).      *<p>      * If the {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE} is set to the same vale and the      * {@link #accessUri} also equals the {@link #queryUri}, than the component created for the entity      * searcher is also used as dereferencer.      *       * @param factory      *            The component factory used to create the {@link #entitySearcherComponentInstance}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|createEntitySearcherComponent
parameter_list|(
name|ComponentFactory
name|factory
parameter_list|)
block|{
comment|// both create*** methods sync on the searcherAndDereferencerLock to
comment|// avoid
comment|// multiple component instances because of concurrent calls
synchronized|synchronized
init|(
name|searcherAndDereferencerLock
init|)
block|{
if|if
condition|(
name|entitySearcherComponentInstance
operator|==
literal|null
condition|)
block|{
name|entitySearcherComponentInstance
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|cc
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dereferencerEqualsEntitySearcherComponent
condition|)
block|{
comment|//use the same instance for dereferencer and entity searcher
name|dereferencerComponentInstance
operator|=
name|entitySearcherComponentInstance
expr_stmt|;
block|}
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates the entity dereferencer component used by this {@link Site}. The implementation used as the      * dereferencer is configured by the {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE} property.      *       * @param factory      *            the component factory used to create the {@link #dereferencer}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|createDereferencerComponent
parameter_list|(
name|ComponentFactory
name|factory
parameter_list|)
block|{
comment|// both create*** methods sync on searcherAndDereferencerLock to avoid
comment|// multiple component instances because of concurrent calls
synchronized|synchronized
init|(
name|searcherAndDereferencerLock
init|)
block|{
if|if
condition|(
name|dereferencerComponentInstance
operator|==
literal|null
condition|)
block|{
name|dereferencerComponentInstance
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|cc
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateServiceRegistration
argument_list|(
name|bc
argument_list|,
name|siteConfiguration
argument_list|,
name|dereferencerComponentInstance
argument_list|,
name|entitySearcherComponentInstance
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|,
name|offlineMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Simple {@link ServiceListener} implementation that is used to get notified if one of the      * {@link ComponentFactory component factories} for the configured implementation of the      * {@link EntityDereferencer} or {@link EntitySearcher} interfaces get registered.      *       * @author Rupert Westenthaler      *       */
specifier|private
class|class
name|ComponentFactoryListener
implements|implements
name|ServiceListener
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|protected
name|ComponentFactoryListener
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
if|if
condition|(
name|bundleContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The BundleContext MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
name|Object
name|eventComponentName
init|=
name|event
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"component.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|REGISTERED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Process ServiceEvent for ComponentFactory {} and State REGISTERED"
argument_list|,
name|eventComponentName
argument_list|)
expr_stmt|;
name|ComponentFactory
name|factory
init|=
operator|(
name|ComponentFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|event
operator|.
name|getServiceReference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|.
name|equals
argument_list|(
name|eventComponentName
argument_list|)
condition|)
block|{
name|createDereferencerComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|.
name|equals
argument_list|(
name|eventComponentName
argument_list|)
condition|)
block|{
name|createEntitySearcherComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignore ServiceEvent for ComponentFactory {} and state {}"
argument_list|,
name|eventComponentName
argument_list|,
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|MODIFIED
condition|?
literal|"MODIFIED"
else|:
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|UNREGISTERING
condition|?
literal|"UNREGISTERING"
else|:
literal|"MODIFIED_ENDMATCH"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"deactivate Referenced Site {}"
argument_list|,
name|siteConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dereferencerComponentInstance
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|dereferencerComponentInstance
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|dereferencerComponentInstance
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|entitySearcherComponentInstance
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|entitySearcherComponentInstance
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|entitySearcherComponentInstance
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|searcherComponentFactoryListener
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeServiceListener
argument_list|(
name|searcherComponentFactoryListener
argument_list|)
expr_stmt|;
name|searcherComponentFactoryListener
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dereferencerComponentFactoryListener
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeServiceListener
argument_list|(
name|dereferencerComponentFactoryListener
argument_list|)
expr_stmt|;
name|dereferencerComponentFactoryListener
operator|=
literal|null
expr_stmt|;
block|}
name|cache
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|cacheTracker
operator|!=
literal|null
condition|)
block|{
name|cacheTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|cacheTracker
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|siteConfiguration
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bc
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cc
operator|=
literal|null
expr_stmt|;
name|referencedSite
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|referencedSiteRegistration
operator|!=
literal|null
condition|)
block|{
name|referencedSiteRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|referencedSiteRegistration
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Updates the ServiceRegistration based on the parsed parameters      * @param bc      * @param config      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|synchronized
name|void
name|updateServiceRegistration
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|ReferencedSiteConfiguration
name|config
parameter_list|,
name|ComponentInstance
name|dereferencerComponentInstance
parameter_list|,
name|ComponentInstance
name|searcherComponentInstance
parameter_list|,
name|Cache
name|cache
parameter_list|,
name|NamespacePrefixService
name|nsPrefixService
parameter_list|,
name|OfflineMode
name|offlineMode
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> update ReferencedSite service:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|referencedSiteRegistration
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"  - unregister ReferencedSite '{}'"
argument_list|,
name|referencedSite
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|referencedSiteRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|referencedSiteRegistration
operator|=
literal|null
expr_stmt|;
name|referencedSite
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|bc
operator|==
literal|null
operator|||
name|config
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" - not active ... return"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//validate the parsed parameter
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
comment|//use state so that we check all services for logging
name|log
operator|.
name|debug
argument_list|(
literal|" - validate available services:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getAccessUri
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getEntityDereferencerType
argument_list|()
operator|!=
literal|null
operator|&&
name|dereferencerComponentInstance
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"    ... EntityDereference not available"
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getQueryUri
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getEntitySearcherType
argument_list|()
operator|!=
literal|null
operator|&&
name|searcherComponentInstance
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"    ... EntitySearcher not available"
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCacheStrategy
argument_list|()
operator|!=
name|CacheStrategy
operator|.
name|none
operator|&&
name|cache
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"    ... Local Cache not available"
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getCacheStrategy
argument_list|()
operator|!=
name|CacheStrategy
operator|.
name|all
operator|&&
name|offlineMode
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"    ... Offline Mode is active and CacheStrategy != ALL"
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|valid
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"    ... all required Services present."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" - register ReferencedSite '{}'"
argument_list|,
name|config
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|referencedSite
operator|=
operator|new
name|ReferencedSiteImpl
argument_list|(
name|config
argument_list|,
name|offlineMode
operator|==
literal|null
operator|&&
name|dereferencerComponentInstance
operator|!=
literal|null
condition|?
operator|(
name|EntityDereferencer
operator|)
name|dereferencerComponentInstance
operator|.
name|getInstance
argument_list|()
else|:
literal|null
argument_list|,
name|offlineMode
operator|==
literal|null
operator|&&
name|searcherComponentInstance
operator|!=
literal|null
condition|?
operator|(
name|EntitySearcher
operator|)
name|searcherComponentInstance
operator|.
name|getInstance
argument_list|()
else|:
literal|null
argument_list|,
name|cache
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
name|referencedSiteRegistration
operator|=
name|bc
operator|.
name|registerService
argument_list|(
name|Site
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|referencedSite
argument_list|,
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|cc
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"  ... unable to initialise ReferencedSite."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

