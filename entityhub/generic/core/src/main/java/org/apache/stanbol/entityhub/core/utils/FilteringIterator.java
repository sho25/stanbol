begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Implementation of an Iterator that iterates over a filtered set of elements  * of its parent Iterator.<p>  * Note that {@link Iterator#remove()} only works as long as   * {@link Iterator#hasNext()} was not called to determine if there are  * further elements. The reason for that is, that in order to filter elements  * of the parent iterator {@link Iterator#next()} has to be called to check  * weather any further element is valid against the used {@link Filter}.  * This call to {@link Iterator#next()} causes the parent Iterator to switch  * to the next element, meaning that after that the<code>remove()</code>  * method would delete a different element. To avoid that this Iterator  * throws an {@link IllegalStateException} in such cases. If the parent  * Iterator does not support<code>remove()</code> at all an  * {@link UnsupportedOperationException} is thrown.<p>  * This implementation is based on the {@link AdaptingIterator} to avoid  * duplication of the filtering functionality also needed if an adapter can not  * convert a specific value of one type to an other.   *   * @author Rupert Westenthaler  *  * @param<T> the type of the elements  */
end_comment

begin_class
specifier|public
class|class
name|FilteringIterator
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AdaptingIterator
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
block|{
comment|/**      * Interface used by the {@link FilteringIterator} to check if an element      * of the parent Iterator should be filtered or not. If {@link #isValid(Object)}      * returns true the element of the parent iterator is also returned by this      * Iterator. Otherwise the element is filtered.<p>       * @author Rupert Westenthaler      *      * @param<T>      */
specifier|public
interface|interface
name|Filter
parameter_list|<
name|T
parameter_list|>
block|{
name|boolean
name|isValid
parameter_list|(
name|T
name|value
parameter_list|)
function_decl|;
block|}
specifier|public
name|FilteringIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|,
name|Filter
argument_list|<
name|T
argument_list|>
name|filter
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|iterator
argument_list|,
operator|new
name|FilterAdapter
argument_list|<
name|T
argument_list|>
argument_list|(
name|filter
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FilterAdapter
parameter_list|<
name|A
parameter_list|>
implements|implements
name|Adapter
argument_list|<
name|A
argument_list|,
name|A
argument_list|>
block|{
specifier|private
name|Filter
argument_list|<
name|A
argument_list|>
name|filter
decl_stmt|;
specifier|public
name|FilterAdapter
parameter_list|(
name|Filter
argument_list|<
name|A
argument_list|>
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Filter MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|A
name|adapt
parameter_list|(
name|A
name|value
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|isValid
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

