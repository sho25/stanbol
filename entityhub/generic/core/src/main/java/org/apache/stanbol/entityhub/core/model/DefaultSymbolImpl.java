begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|ToStringIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the Symbol Interface based on the parsed {@link Representation}.<br>  * Specific implementations of the entity hub models might want to use this implementation  * so that they need only to implement the {@link Representation} interface.  * However implementations might also decides to provide its own implementation  * of the {@link Symbol} as well as the other interfaces defined by the  * entityhub model  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSymbolImpl
extends|extends
name|DefaultSignImpl
implements|implements
name|Symbol
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSymbolImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|defaultLanguage
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ALT_LABEL_LANGUAGES
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"en"
block|}
decl_stmt|;
comment|/**      * Creates a Symbol Wrapper over the parsed representation      * @param entityhubId the ID of the Entityhub that manages this Symbol      * @param representation the representation holding the state of the symbol      * @throws IllegalArgumentException If the parsed ID is<code>null</code> or      * empty or the parsed Representation is<code>null</code>.      */
specifier|protected
name|DefaultSymbolImpl
parameter_list|(
name|String
name|entityhubId
parameter_list|,
name|Representation
name|representation
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|(
name|entityhubId
argument_list|,
name|representation
argument_list|)
expr_stmt|;
comment|//checks no longer required,
comment|//        if(getLabel() == null){
comment|//            throw new IllegalArgumentException("Representation "+getId()+" does not define required field "+Symbol.LABEL);
comment|//        }
comment|//        if(getState() == null){
comment|//            throw new IllegalArgumentException("Representation "+getId()+" does not define required field "+Symbol.STATE);
comment|//        }
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|addDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|representation
operator|.
name|addNaturalText
argument_list|(
name|Symbol
operator|.
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|defaultLanguage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|addDescription
parameter_list|(
name|String
name|description
parameter_list|,
name|String
name|lanugage
parameter_list|)
block|{
name|representation
operator|.
name|addNaturalText
argument_list|(
name|Symbol
operator|.
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|lanugage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|addPredecessor
parameter_list|(
name|String
name|predecessor
parameter_list|)
block|{
name|representation
operator|.
name|addReference
argument_list|(
name|Symbol
operator|.
name|PREDECESSOR
argument_list|,
name|predecessor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|addSuccessor
parameter_list|(
name|String
name|successor
parameter_list|)
block|{
name|representation
operator|.
name|addReference
argument_list|(
name|Symbol
operator|.
name|SUCCESSOR
argument_list|,
name|successor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Iterator
argument_list|<
name|Text
argument_list|>
name|getDescriptions
parameter_list|()
block|{
return|return
name|representation
operator|.
name|getText
argument_list|(
name|Symbol
operator|.
name|DESCRIPTION
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Iterator
argument_list|<
name|Text
argument_list|>
name|getDescriptions
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|representation
operator|.
name|get
argument_list|(
name|Symbol
operator|.
name|DESCRIPTION
argument_list|,
name|lang
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getLabel
parameter_list|()
block|{
name|String
name|label
init|=
name|getLabel
argument_list|(
name|defaultLanguage
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
comment|//no label for the default language
comment|//search labels in other languages
name|Text
name|altLabel
init|=
name|representation
operator|.
name|getFirst
argument_list|(
name|Symbol
operator|.
name|LABEL
argument_list|,
name|ALT_LABEL_LANGUAGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|altLabel
operator|==
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Text
argument_list|>
name|labels
init|=
name|representation
operator|.
name|getText
argument_list|(
name|Symbol
operator|.
name|LABEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|labels
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|altLabel
operator|=
name|labels
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|altLabel
operator|!=
literal|null
condition|?
name|altLabel
operator|.
name|getText
argument_list|()
else|:
literal|null
return|;
block|}
else|else
block|{
return|return
name|label
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getLabel
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|Text
name|label
init|=
name|representation
operator|.
name|getFirst
argument_list|(
name|Symbol
operator|.
name|LABEL
argument_list|,
name|lang
argument_list|)
decl_stmt|;
return|return
name|label
operator|!=
literal|null
condition|?
name|label
operator|.
name|getText
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPredecessors
parameter_list|()
block|{
return|return
operator|new
name|ToStringIterator
argument_list|(
name|representation
operator|.
name|get
argument_list|(
name|Symbol
operator|.
name|PREDECESSOR
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|SymbolState
name|getState
parameter_list|()
block|{
name|Reference
name|stateUri
init|=
name|representation
operator|.
name|getFirstReference
argument_list|(
name|Symbol
operator|.
name|STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateUri
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|SymbolState
operator|.
name|isState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|SymbolState
operator|.
name|getState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Value {} for field {} is not a valied SymbolState! -> return null"
argument_list|,
name|stateUri
argument_list|,
name|Symbol
operator|.
name|STATE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessors
parameter_list|()
block|{
return|return
operator|new
name|ToStringIterator
argument_list|(
name|representation
operator|.
name|get
argument_list|(
name|Symbol
operator|.
name|SUCCESSOR
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isPredecessors
parameter_list|()
block|{
return|return
name|getPredecessors
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isSuccessor
parameter_list|()
block|{
return|return
name|getSuccessors
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|removeDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|representation
operator|.
name|removeNaturalText
argument_list|(
name|Symbol
operator|.
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|defaultLanguage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|removeDescription
parameter_list|(
name|String
name|description
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|representation
operator|.
name|removeNaturalText
argument_list|(
name|Symbol
operator|.
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|removePredecessor
parameter_list|(
name|String
name|predecessor
parameter_list|)
block|{
name|representation
operator|.
name|removeReference
argument_list|(
name|Symbol
operator|.
name|PREDECESSOR
argument_list|,
name|predecessor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|removeSuccessor
parameter_list|(
name|String
name|successor
parameter_list|)
block|{
name|representation
operator|.
name|removeReference
argument_list|(
name|Symbol
operator|.
name|SUCCESSOR
argument_list|,
name|successor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|representation
operator|.
name|setNaturalText
argument_list|(
name|Symbol
operator|.
name|LABEL
argument_list|,
name|label
argument_list|,
name|defaultLanguage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|representation
operator|.
name|setNaturalText
argument_list|(
name|Symbol
operator|.
name|LABEL
argument_list|,
name|label
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setState
parameter_list|(
name|SymbolState
name|state
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|representation
operator|.
name|setReference
argument_list|(
name|Symbol
operator|.
name|STATE
argument_list|,
name|state
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"SymbolState can not be set to NULL!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Getter for the default language used for {@link #getLabel()}      * @return the preferred language used for {@link #getLabel()}      */
specifier|public
specifier|final
name|String
name|getDefaultLanguage
parameter_list|()
block|{
return|return
name|defaultLanguage
return|;
block|}
comment|/**      * Setter for the default language used for {@link #getLabel()} (      *<code>null</code> is supported)      * @param defaultLanguage the preferred language used for {@link #getLabel()}       */
specifier|public
specifier|final
name|void
name|setDefaultLanguage
parameter_list|(
name|String
name|defaultLanguage
parameter_list|)
block|{
name|this
operator|.
name|defaultLanguage
operator|=
name|defaultLanguage
expr_stmt|;
block|}
block|}
end_class

end_unit

