begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|TextIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|TypeSafeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|UnsupportedTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_class
specifier|public
class|class
name|InMemoryRepresentation
implements|implements
name|Representation
implements|,
name|Cloneable
block|{
comment|//private final Logger log = LoggerFactory.getLogger(InMemoryRepresentation.class);
specifier|private
specifier|static
name|ValueFactory
name|valueFactory
init|=
operator|new
name|InMemoryValueFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|representation
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|unmodRepresentation
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
comment|/**      * creates a new InMemoryRepresentation for the parsed ID      * @param id the id of the representation      */
specifier|protected
name|InMemoryRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialise a new InMemoryRepresenation with the parsed map. Note that the      * parsed map is directly used to store the data. That means that callers      * MUST keep in minds that changes to that map will influence the internal      * state of this instance.<br>      * The intension of this constructor is to allow also to define the actual      * map implementation used to store the data.      * If one also wants to directly parse data already contained within an      * other representation one MUST first create deep copy of the according      * map!      * @param id the id for the Representation      * @param representation the map used by this representation to store it's data      */
specifier|protected
name|InMemoryRepresentation
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|representation
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The id of a Representation instance MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|representation
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|representation
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|representation
operator|=
name|representation
expr_stmt|;
block|}
name|unmodRepresentation
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|representation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|parsedValue
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parsedValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NULL values are not supported by Representations"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|newValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ModelUtils
operator|.
name|checkValues
argument_list|(
name|valueFactory
argument_list|,
name|parsedValue
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
name|Object
name|values
init|=
name|representation
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|values
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|addAll
argument_list|(
name|newValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|newValues
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|values
operator|.
name|equals
argument_list|(
name|newValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return;
comment|//do not create an collection of the current value equals the added
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|collection
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|//reset the field to the collection
name|representation
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|collection
argument_list|)
expr_stmt|;
comment|//add the two values
name|collection
operator|.
name|add
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|collection
operator|.
name|addAll
argument_list|(
name|newValues
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//also here do not add the collection if there is only one value!
name|representation
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|newValues
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|newValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
name|newValues
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNaturalText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|text
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NULL was parsed for the text! NULL values are not supported by Representations"
argument_list|)
throw|;
block|}
if|if
condition|(
name|languages
operator|==
literal|null
operator|||
name|languages
operator|.
name|length
operator|<
literal|1
condition|)
block|{
comment|//if no language is parse add the default lanugage!
name|add
argument_list|(
name|field
argument_list|,
name|valueFactory
operator|.
name|createText
argument_list|(
name|text
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|lang
range|:
name|languages
control|)
block|{
name|add
argument_list|(
name|field
argument_list|,
name|valueFactory
operator|.
name|createText
argument_list|(
name|text
argument_list|,
name|lang
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addReference
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NULL values are not supported by Representations"
argument_list|)
throw|;
block|}
name|add
argument_list|(
name|field
argument_list|,
name|valueFactory
operator|.
name|createReference
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the values of the field as Collections. If the field is not      * present it returns an empty Collections!      * @param field the field      * @return A read only collection with the values of the field      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Collection
argument_list|<
name|Object
argument_list|>
name|getValuesAsCollection
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|representation
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|String
name|field
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnsupportedTypeException
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|getValuesAsCollection
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|TypeSafeIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|get
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
return|return
name|getValuesAsCollection
argument_list|(
name|field
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Text
argument_list|>
name|getText
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|getValuesAsCollection
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|values
operator|!=
literal|null
condition|?
operator|new
name|TextIterator
argument_list|(
name|valueFactory
argument_list|,
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Text
argument_list|>
name|get
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
specifier|final
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|getValuesAsCollection
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|TextIterator
argument_list|(
name|valueFactory
argument_list|,
name|values
operator|.
name|iterator
argument_list|()
argument_list|,
name|languages
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
block|{
return|return
name|unmodRepresentation
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getFirst
parameter_list|(
name|String
name|field
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnsupportedTypeException
block|{
name|Iterator
argument_list|<
name|T
argument_list|>
name|values
init|=
name|get
argument_list|(
name|field
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|values
operator|.
name|hasNext
argument_list|()
condition|?
name|values
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getFirst
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|values
operator|.
name|hasNext
argument_list|()
condition|?
name|values
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|getFirst
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
init|=
name|get
argument_list|(
name|field
argument_list|,
name|languages
argument_list|)
decl_stmt|;
return|return
name|values
operator|.
name|hasNext
argument_list|()
condition|?
name|values
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|parsedValue
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|removeValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ModelUtils
operator|.
name|checkValues
argument_list|(
name|valueFactory
argument_list|,
name|parsedValue
argument_list|,
name|removeValues
argument_list|)
expr_stmt|;
name|Object
name|values
init|=
name|representation
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|removeValues
operator|.
name|contains
argument_list|(
name|values
argument_list|)
condition|)
block|{
comment|//in case this field has a single value and this values is part of
comment|//the values to remove -> remove the whole field
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|removeAll
argument_list|(
name|removeValues
argument_list|)
operator|&&
comment|//remove all Elements
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
comment|//if removed check for size
if|if
condition|(
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|//only one element remaining -> replace the collection with a Object
name|representation
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//if no element remains, remove the field
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//else ignore (single value for field&& value not to be removed)
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeAll
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|removeAllNaturalText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
name|Object
name|values
init|=
name|representation
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|values
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|int
name|removed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
operator|new
name|TextIterator
argument_list|(
name|valueFactory
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|languages
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//go to the next Element
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|//and remove ist
name|removed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|>
literal|0
condition|)
block|{
comment|//if some elements where removed
comment|//check if there is only a singe or no elements left for the field
name|int
name|size
init|=
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|representation
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|<
literal|1
condition|)
block|{
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_elseif
elseif|else
if|if
condition|(
name|isNaturalLanguageValue
argument_list|(
name|values
argument_list|,
name|languages
argument_list|)
condition|)
block|{
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_comment
comment|//else there is a single value that does not fit -> nothing todo
end_comment

begin_expr_stmt
unit|}      @
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Override
specifier|public
name|void
name|removeNaturalText
argument_list|(
name|String
name|field
argument_list|,
name|String
name|text
argument_list|,
name|String
operator|...
name|languages
argument_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
end_elseif

begin_decl_stmt
name|Object
name|values
init|=
name|representation
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return;
block|}
end_if

begin_if
if|if
condition|(
name|values
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|int
name|removed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
operator|new
name|TextIterator
argument_list|(
name|valueFactory
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|languages
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|label
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//go to the next element
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
name|label
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|//and remove it
name|removed
operator|++
expr_stmt|;
block|}
block|}
end_if

begin_if
if|if
condition|(
name|removed
operator|>
literal|0
condition|)
block|{
comment|//if some elements where removed
comment|//check if there is only a singe or no elements left for the field
name|int
name|size
init|=
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|representation
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|values
operator|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|<
literal|1
condition|)
block|{
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
end_if

begin_if
unit|} else
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
name|getNaturalLanguageValue
argument_list|(
name|values
argument_list|,
name|languages
argument_list|)
argument_list|)
condition|)
block|{
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
end_if

begin_comment
comment|//else there is a single value that does not fit -> nothing todo
end_comment

begin_function
unit|}      @
name|Override
specifier|public
name|void
name|removeReference
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
try|try
block|{
name|remove
argument_list|(
name|field
argument_list|,
operator|new
name|URI
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsed reference needs to be an valid URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be NULL"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed field MUST NOT be Empty"
argument_list|)
throw|;
block|}
name|representation
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setNaturalText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|text
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
name|removeAllNaturalText
argument_list|(
name|field
argument_list|,
name|languages
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|text
argument_list|,
name|languages
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setReference
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
name|removeAll
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|addReference
argument_list|(
name|field
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clone
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|representation
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|HashSet
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|clone
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
operator|(
name|HashSet
argument_list|<
name|?
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|HashSet
argument_list|<
name|Object
argument_list|>
name|valuesClone
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
operator|(
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|valuesClone
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|clone
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|valuesClone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clone
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|InMemoryRepresentation
argument_list|(
name|id
argument_list|,
name|clone
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Reference
name|getFirstReference
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|it
init|=
name|getReferences
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|hasNext
argument_list|()
condition|?
name|it
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|getReferences
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|getValuesAsCollection
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|TypeSafeIterator
argument_list|<
name|Reference
argument_list|>
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|,
name|Reference
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
specifier|static
name|String
name|getNaturalLanguageValue
parameter_list|(
name|Object
name|check
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|langSet
parameter_list|,
name|boolean
name|isNullLanguage
parameter_list|)
block|{
if|if
condition|(
name|check
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|check
decl_stmt|;
if|if
condition|(
name|langSet
operator|==
literal|null
operator|||
name|langSet
operator|.
name|contains
argument_list|(
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|text
operator|.
name|getText
argument_list|()
return|;
block|}
comment|// else empty arrey -> filter
block|}
elseif|else
if|if
condition|(
name|isNullLanguage
operator|&&
name|check
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|check
return|;
block|}
comment|//type does not fit -> ignore
return|return
literal|null
return|;
comment|//no label found
block|}
end_function

begin_function
specifier|protected
specifier|static
name|String
name|getNaturalLanguageValue
parameter_list|(
name|Object
name|check
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|langSet
decl_stmt|;
name|boolean
name|isNullLanguage
decl_stmt|;
if|if
condition|(
name|languages
operator|!=
literal|null
operator|&&
name|languages
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|langSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languages
argument_list|)
argument_list|)
expr_stmt|;
name|isNullLanguage
operator|=
name|langSet
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|langSet
operator|=
literal|null
expr_stmt|;
name|isNullLanguage
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|getNaturalLanguageValue
argument_list|(
name|check
argument_list|,
name|langSet
argument_list|,
name|isNullLanguage
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * @param check      * @param languages      * @return      */
end_comment

begin_function
specifier|protected
specifier|static
name|boolean
name|isNaturalLanguageValue
parameter_list|(
name|Object
name|check
parameter_list|,
name|String
modifier|...
name|languages
parameter_list|)
block|{
return|return
name|getNaturalLanguageValue
argument_list|(
name|check
argument_list|,
name|languages
argument_list|)
operator|!=
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|getId
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|Representation
operator|&&
operator|(
operator|(
name|Representation
operator|)
name|obj
operator|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

