begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|site
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|CacheStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is the Implementation of the {@link Cache} Interface as defined by the  * entityhub services API.<p>  *   * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|CacheImpl
implements|implements
name|Cache
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CacheImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FieldMapper
name|baseMapper
decl_stmt|;
specifier|private
name|FieldMapper
name|additionalMapper
decl_stmt|;
specifier|private
specifier|final
name|Yard
name|yard
decl_stmt|;
comment|/**      * Constructs a new Cache for the parsed Yard and mappings      * @param yard      * @param additionalMappings      * @param nsPrefixService      * @throws YardException if loading the base mappings from the Yard fails      * @throws IllegalStateException when parsing the additional mappings do fail      * throws {@link IllegalArgumentException} if<code>null</code> is parsed as Yard      */
specifier|public
name|CacheImpl
parameter_list|(
name|Yard
name|yard
parameter_list|,
name|String
index|[]
name|additionalMappings
parameter_list|,
name|NamespacePrefixService
name|nsPrefixService
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|yard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Yard MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|yard
operator|=
name|yard
expr_stmt|;
comment|//(1) Read the base mappings from the Yard
name|this
operator|.
name|baseMapper
operator|=
name|CacheUtils
operator|.
name|loadBaseMappings
argument_list|(
name|yard
argument_list|,
name|nsPrefixService
argument_list|)
expr_stmt|;
name|FieldMapper
name|configuredMappings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|additionalMappings
operator|!=
literal|null
operator|&&
name|additionalMappings
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|configuredMappings
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mappingString
range|:
name|additionalMappings
control|)
block|{
name|FieldMapping
name|fieldMapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|mappingString
argument_list|,
name|nsPrefixService
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMapping
operator|!=
literal|null
condition|)
block|{
name|configuredMappings
operator|.
name|addMapping
argument_list|(
name|fieldMapping
argument_list|)
expr_stmt|;
block|}
block|}
comment|//check if there are valid mappings
if|if
condition|(
name|configuredMappings
operator|.
name|getMappings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|configuredMappings
operator|=
literal|null
expr_stmt|;
comment|//if no mappings where found set to null
block|}
block|}
name|FieldMapper
name|yardAdditionalMappings
init|=
name|CacheUtils
operator|.
name|loadAdditionalMappings
argument_list|(
name|yard
argument_list|,
name|nsPrefixService
argument_list|)
decl_stmt|;
if|if
condition|(
name|yardAdditionalMappings
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configuredMappings
operator|!=
literal|null
condition|)
block|{
name|setAdditionalMappings
argument_list|(
name|yard
argument_list|,
name|configuredMappings
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|yardAdditionalMappings
operator|.
name|equals
argument_list|(
name|configuredMappings
argument_list|)
condition|)
block|{
comment|//this may also set the additional mappings to null!
name|log
operator|.
name|info
argument_list|(
literal|"Replace Additional Mappings for Cache {} with Mappings configured by OSGI"
argument_list|,
name|yard
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|setAdditionalMappings
argument_list|(
name|yard
argument_list|,
name|configuredMappings
argument_list|)
expr_stmt|;
block|}
comment|//else current config equals configured one -> nothing to do!
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheStrategy
name|isField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheStrategy
name|isLanguage
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheStrategy
name|strategy
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*--------------------------------------------------------------------------      * Store and Update calls MUST respect the mappings configured for the      * Cache!      * --------------------------------------------------------------------------      */
annotation|@
name|Override
specifier|public
name|Representation
name|store
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
return|return
name|yard
operator|.
name|store
argument_list|(
name|applyCacheMappings
argument_list|(
name|yard
argument_list|,
name|representation
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|update
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|yard
operator|.
name|update
argument_list|(
name|applyCacheMappings
argument_list|(
name|yard
argument_list|,
name|representation
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Applies the mappings defined by the {@link #baseMapper} and the {@link #additionalMapper}      * to the parsed Representation.      *      * @param yard The yard (local reference to avoid syncronization)      * @param representation The representation to map      * @return the mapped representation      */
specifier|private
name|Representation
name|applyCacheMappings
parameter_list|(
name|Yard
name|yard
parameter_list|,
name|Representation
name|representation
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Representation
name|mapped
init|=
literal|null
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|getValueFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseMapper
operator|!=
literal|null
condition|)
block|{
name|mapped
operator|=
name|yard
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createRepresentation
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|baseMapper
operator|.
name|applyMappings
argument_list|(
name|representation
argument_list|,
name|mapped
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|additionalMapper
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mapped
operator|==
literal|null
condition|)
block|{
name|mapped
operator|=
name|yard
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createRepresentation
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|additionalMapper
operator|.
name|applyMappings
argument_list|(
name|representation
argument_list|,
name|mapped
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"  -- applied mappings in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
return|return
name|mapped
operator|!=
literal|null
condition|?
name|mapped
else|:
name|representation
return|;
block|}
comment|/*--------------------------------------------------------------------------      * Methods that forward calls to the Yard configured for this Cache      * --------------------------------------------------------------------------      */
annotation|@
name|Override
specifier|public
name|Representation
name|create
parameter_list|()
throws|throws
name|YardException
block|{
return|return
name|yard
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|create
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
return|return
name|yard
operator|.
name|create
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|yard
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|yard
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|findRepresentation
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|yard
operator|.
name|findRepresentation
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Cache Wrapper for Yard %s "
argument_list|,
name|yard
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|yard
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|yard
operator|.
name|getName
argument_list|()
operator|+
literal|" Cache"
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldQueryFactory
name|getQueryFactory
parameter_list|()
block|{
return|return
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Representation
name|getRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|yard
operator|.
name|getRepresentation
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValueFactory
name|getValueFactory
parameter_list|()
block|{
return|return
name|yard
operator|.
name|getValueFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|yard
operator|.
name|isRepresentation
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|yard
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/*--------------------------------------------------------------------------      * Methods for reading and storing and changing the cache configuration      * --------------------------------------------------------------------------      */
comment|/**      * Getter for the base mappings used by this Cache. Modifications on the      * returned object do not have any influence on the mappings, because this      * method returns a clone. Use {@link #setBaseMappings(FieldMapper)} to      * change the used base mappings. However make sure you understand the      * implications of changing the base mappings as described in the      * documentation of the setter method      *      * @return A clone of the base mappings or<code>null</code> if no base      *         mappings are defined      */
annotation|@
name|Override
specifier|public
specifier|final
name|FieldMapper
name|getBaseMappings
parameter_list|()
block|{
return|return
name|baseMapper
operator|==
literal|null
condition|?
literal|null
else|:
name|baseMapper
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**      * Getter for the additional mappings used by this Cache. Modifications on the      * returned object do not have any influence on the mappings, because this      * method returns a clone. Use {@link #setAdditionalMappings(FieldMapper)} to      * change the used additional mappings. However make sure you understand the      * implications of changing the base mappings as described in the      * documentation of the setter method      *      * @return A clone of the additional mappings or<code>null</code> if no      *         additional mappings are defined      */
annotation|@
name|Override
specifier|public
specifier|final
name|FieldMapper
name|getAdditionalMappings
parameter_list|()
block|{
return|return
name|additionalMapper
operator|==
literal|null
condition|?
literal|null
else|:
name|additionalMapper
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAdditionalMappings
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
throws|throws
name|YardException
block|{
name|setAdditionalMappings
argument_list|(
name|yard
argument_list|,
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internally used in the initialisation to be able to parse the Yard instance      *      * @param yard the yard used to set the configured additional mappings      * @param fieldMapper the configuration      * @throws YardException on any error while accessing the yard      */
specifier|protected
name|void
name|setAdditionalMappings
parameter_list|(
name|Yard
name|yard
parameter_list|,
name|FieldMapper
name|fieldMapper
parameter_list|)
throws|throws
name|YardException
block|{
name|FieldMapper
name|old
init|=
name|this
operator|.
name|additionalMapper
decl_stmt|;
name|this
operator|.
name|additionalMapper
operator|=
name|fieldMapper
expr_stmt|;
try|try
block|{
name|CacheUtils
operator|.
name|storeAdditionalMappingsConfiguration
argument_list|(
name|yard
argument_list|,
name|additionalMapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
name|this
operator|.
name|additionalMapper
operator|=
name|old
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBaseMappings
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|isAvailable
argument_list|()
condition|)
block|{
name|FieldMapper
name|old
init|=
name|this
operator|.
name|baseMapper
decl_stmt|;
name|this
operator|.
name|baseMapper
operator|=
name|fieldMapper
expr_stmt|;
try|try
block|{
name|CacheUtils
operator|.
name|storeBaseMappingsConfiguration
argument_list|(
name|yard
argument_list|,
name|baseMapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
name|this
operator|.
name|baseMapper
operator|=
name|old
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|yard
operator|.
name|remove
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAll
parameter_list|()
throws|throws
name|YardException
block|{
comment|//ensure that the baseConfig (if present) is not deleted by this
comment|//operation
name|Representation
name|baseConfig
init|=
name|yard
operator|.
name|getRepresentation
argument_list|(
name|Cache
operator|.
name|BASE_CONFIGURATION_URI
argument_list|)
decl_stmt|;
name|yard
operator|.
name|removeAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|baseConfig
operator|!=
literal|null
condition|)
block|{
name|yard
operator|.
name|store
argument_list|(
name|baseConfig
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|store
parameter_list|(
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|representations
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
return|return
name|yard
operator|.
name|store
argument_list|(
name|representations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|update
parameter_list|(
name|Iterable
argument_list|<
name|Representation
argument_list|>
name|representations
parameter_list|)
throws|throws
name|YardException
throws|,
name|IllegalArgumentException
block|{
return|return
name|yard
operator|.
name|update
argument_list|(
name|representations
argument_list|)
return|;
block|}
block|}
end_class

end_unit

