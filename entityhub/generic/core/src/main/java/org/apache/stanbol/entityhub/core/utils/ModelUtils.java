begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|DefaultEntityMappingImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|DefaultSignImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|DefaultSymbolImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
operator|.
name|SignTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utilities useful for implementations of the Entityhub Model  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ModelUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ModelUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Holds the uri->RepresentationTypeEnum mappings      */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SignTypeEnum
argument_list|>
name|REPRESENTATION_TYPE_MAPPING
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SignTypeEnum
argument_list|>
name|repTypeMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SignTypeEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SignTypeEnum
name|type
range|:
name|SignTypeEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|repTypeMapping
operator|.
name|put
argument_list|(
name|type
operator|.
name|getUri
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|REPRESENTATION_TYPE_MAPPING
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|repTypeMapping
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the {@link SignTypeEnum} based on the reference      * @param referece The reference as defined by {@link SignTypeEnum#getUri()}      * @return the type or<code>null</code> if no mapping is present for the parsed      * reference.      */
specifier|public
specifier|static
name|SignTypeEnum
name|getSignType
parameter_list|(
name|Reference
name|reference
parameter_list|)
block|{
return|return
name|reference
operator|==
literal|null
condition|?
literal|null
else|:
name|getSignType
argument_list|(
name|reference
operator|.
name|getReference
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Getter for the {@link SignTypeEnum} based on the uri      * @param uri The uri as defined by {@link SignTypeEnum#getUri()}      * @return the type or<code>null</code> if no mapping is present for the parsed      * uri.      */
specifier|public
specifier|static
name|SignTypeEnum
name|getSignType
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|REPRESENTATION_TYPE_MAPPING
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Random UUID generator with re-seedable RNG for the tests.      *      * @return a new Random UUID      */
specifier|private
specifier|static
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**      * Do not allow instances of this class      */
specifier|private
name|ModelUtils
parameter_list|()
block|{}
comment|/**      * TODO: Maybe we need a better way to generate unique IDs      * @return      */
specifier|public
specifier|static
name|UUID
name|randomUUID
parameter_list|()
block|{
return|return
operator|new
name|UUID
argument_list|(
name|rng
operator|.
name|nextLong
argument_list|()
argument_list|,
name|rng
operator|.
name|nextLong
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setSeed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|rng
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes a value parsed as object to the representation.      * This processing includes:      *<ul>      *<li> Removal of<code>null</code> values      *<li> Converting URIs and URLs to {@link Reference}      *<li> Converting String[] with at least a single entry where the first      * entry is not null to {@link Text} (the second entry is used as language.      * Further entries are ignored.      *<li> Recursive calling of this Method if a {@link Iterable} (any Array or      *      {@link Collection}), {@link Iterator} or {@link Enumeration} is parsed.      *<li> All other Objects are added to the result list      *</ul>      * TODO: Maybe we need to enable an option to throw {@link IllegalArgumentException}      * in case any of the parsed values is invalid. Currently invalid values are      * just ignored.      * @param value the value to parse      * @param results the collections the results of the parsing are added to.      */
specifier|public
specifier|static
name|void
name|checkValues
parameter_list|(
name|ValueFactory
name|valueFactory
parameter_list|,
name|Object
name|value
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
argument_list|<
name|?
argument_list|>
condition|)
block|{
for|for
control|(
name|Object
name|current
operator|:
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
name|checkValues
argument_list|(
name|valueFactory
argument_list|,
name|current
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterator
argument_list|<
name|?
argument_list|>
condition|)
block|{
while|while
condition|(
operator|(
operator|(
name|Iterator
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|checkValues
argument_list|(
name|valueFactory
argument_list|,
operator|(
operator|(
name|Iterator
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|next
argument_list|()
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_elseif
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Enumeration
argument_list|<
name|?
argument_list|>
condition|)
block|{
while|while
condition|(
operator|(
operator|(
name|Enumeration
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|checkValues
argument_list|(
name|valueFactory
argument_list|,
operator|(
operator|(
name|Enumeration
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|nextElement
argument_list|()
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_if
unit|} else
if|if
condition|(
name|value
operator|instanceof
name|URI
operator|||
name|value
operator|instanceof
name|URL
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createReference
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
operator|.
name|length
operator|>
literal|0
operator|&&
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createText
argument_list|(
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
operator|.
name|length
operator|>
literal|1
condition|?
operator|(
operator|(
name|String
index|[]
operator|)
name|value
operator|)
index|[
literal|1
index|]
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"String[] "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|value
argument_list|)
operator|+
literal|" is not a valied natural language array! -> ignore value"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}     public
specifier|static
name|String
name|getRepresentationInfo
parameter_list|(
name|Representation
name|rep
parameter_list|)
block|{
name|StringBuilder
name|info
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|"Representation id="
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
name|rep
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|" | impl="
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
name|rep
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|rep
operator|.
name|getFieldNames
argument_list|()
init|;
name|fields
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
name|fields
operator|.
name|next
argument_list|()
decl_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|" o "
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|valueIt
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
init|;
name|valueIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|valueIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|append
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|info
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|asCollection
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|)
block|{
name|Collection
argument_list|<
name|T
argument_list|>
name|c
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
end_function

begin_comment
comment|/**      * Splits up a URI in local name and namespace based on the following rules      *<ul>      *<li> If URI starts with "urn:" and last index of ':' == 3 than the there      *      is no namespace and the whole URI is a local name      *<li> if the uri starts with "urn:" and the last index of ':' ia> 3, than      *      the last index ':' is used.      *<li> split by the last index of '#' if index>= 0      *<li> split by the last index of '/' if index>= 0      *<li> return after the first split      *<li> return the whole URI as local name if no split was performed.      *</ul>      * @param uri The uri      * @return A array with two fields. In the first the namespace is stored (      * might be<code>null</code>. In the second the local name is stored.      */
end_comment

begin_function
specifier|public
specifier|static
name|String
index|[]
name|getNamespaceLocalName
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"urn:"
argument_list|)
condition|)
block|{
if|if
condition|(
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|>
literal|3
condition|)
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|parts
index|[
literal|0
index|]
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|uri
expr_stmt|;
name|parts
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|parts
index|[
literal|0
index|]
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|parts
index|[
literal|0
index|]
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parts
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|parts
index|[
literal|1
index|]
operator|=
name|uri
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
end_function

begin_comment
comment|/**      * This Method uses {@link #getNamespaceLocalName(String)} to split up      * namespace and local name. It uses also the Data in the      * {@link NamespaceEnum} to retrieve prefixes for Namespaces.      * @param uri the URI      * @return the QName      */
end_comment

begin_function
specifier|public
specifier|static
name|QName
name|getQName
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|String
index|[]
name|nsln
init|=
name|getNamespaceLocalName
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsln
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|NamespaceEnum
name|entry
init|=
name|NamespaceEnum
operator|.
name|forNamespace
argument_list|(
name|nsln
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|nsln
index|[
literal|0
index|]
argument_list|,
name|nsln
index|[
literal|1
index|]
argument_list|,
name|entry
operator|.
name|getPrefix
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|QName
argument_list|(
name|nsln
index|[
literal|0
index|]
argument_list|,
name|nsln
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|QName
argument_list|(
name|nsln
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Getter for the SignType for a Representation. If the Representation does      * not define a value part of the {@link SignTypeEnum} for the field      * {@link RdfResourceEnum#signType} ({@value RdfResourceEnum#signType}), that      * the default sign type {@link Sign#DEFAULT_SIGN_TYPE} is returned.      * @param representation The representation      * @return the sign type      * @throws IllegalArgumentException if<code>null</code> is parsed as representation!      */
end_comment

begin_function
specifier|public
specifier|static
name|SignTypeEnum
name|getSignType
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|representation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter represetnation MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|Reference
name|ref
init|=
name|representation
operator|.
name|getFirstReference
argument_list|(
name|RdfResourceEnum
operator|.
name|signType
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|Sign
operator|.
name|DEFAULT_SIGN_TYPE
return|;
block|}
else|else
block|{
name|SignTypeEnum
name|type
init|=
name|ModelUtils
operator|.
name|getSignType
argument_list|(
name|ref
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Sign "
operator|+
name|representation
operator|.
name|getId
argument_list|()
operator|+
literal|" is set to an unknown SignType "
operator|+
name|ref
operator|.
name|getReference
argument_list|()
operator|+
literal|"! -> return default type (value is not reseted)"
argument_list|)
expr_stmt|;
return|return
name|Sign
operator|.
name|DEFAULT_SIGN_TYPE
return|;
block|}
else|else
block|{
return|return
name|type
return|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Creates a Sign for the parsed Representation and the signSite id      * @param rep the Represetnation      * @param signSite the id of the site for the sign      * @return the sign      * @throws IllegalArgumentException if any of the two parameter is<code>null</code>.      */
end_comment

begin_function
specifier|public
specifier|static
name|Sign
name|createSign
parameter_list|(
name|Representation
name|rep
parameter_list|,
name|String
name|signSite
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Representation MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|signSite
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed ID of the SignSite MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|rep
operator|.
name|setReference
argument_list|(
name|Sign
operator|.
name|SIGN_SITE
argument_list|,
name|signSite
argument_list|)
expr_stmt|;
name|SignTypeEnum
name|signType
init|=
name|ModelUtils
operator|.
name|getSignType
argument_list|(
name|rep
argument_list|)
decl_stmt|;
comment|//instantiate the correct Sign Implementation
name|Sign
name|sign
decl_stmt|;
comment|/*          * TODO: change this part to separate the implementation of the          * ReferencedSite with the instantiation of Sign Type Implementations          * Maybe introduce an SignFactory or add such Methods to the          * existing ValueFactory          */
switch|switch
condition|(
name|signType
condition|)
block|{
case|case
name|Symbol
case|:
name|sign
operator|=
operator|new
name|DefaultSymbolImpl
argument_list|(
name|signSite
argument_list|,
name|rep
argument_list|)
expr_stmt|;
break|break;
case|case
name|EntityMapping
case|:
name|sign
operator|=
operator|new
name|DefaultEntityMappingImpl
argument_list|(
name|signSite
argument_list|,
name|rep
argument_list|)
expr_stmt|;
break|break;
case|case
name|Sign
case|:
name|sign
operator|=
operator|new
name|DefaultSignImpl
argument_list|(
name|signSite
argument_list|,
name|rep
argument_list|)
expr_stmt|;
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported SignType "
operator|+
name|signType
operator|.
name|getUri
argument_list|()
operator|+
literal|" (create Sign instance). Please adapt this implementation!"
argument_list|)
expr_stmt|;
name|sign
operator|=
operator|new
name|DefaultSignImpl
argument_list|(
name|signSite
argument_list|,
name|rep
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|sign
return|;
block|}
end_function

unit|}
end_unit

