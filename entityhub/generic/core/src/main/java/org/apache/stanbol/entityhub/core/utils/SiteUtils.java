begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|//import org.apache.stanbol.entityhub.core.model.InMemoryValueFactory;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_comment
comment|/**  * Utilities used for the Implementation of ReferenceSite and ManagedSite  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SiteUtils
block|{
specifier|private
name|SiteUtils
parameter_list|()
block|{}
comment|/**      * Initialises the {@link Entity#getMetadata()} with the metadata of the      * site and entity specific metadata.      * @param entity the entity      * @param siteMetadata the site metadata      * @param entitySpecific metadata      */
specifier|public
specifier|static
name|void
name|initEntityMetadata
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|siteMetadata
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityMetadata
parameter_list|)
block|{
name|Representation
name|metadata
init|=
name|entity
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|siteMetadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|siteMetadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entityMetadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entityMetadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sites need to provide Metadata about managed Entities (e.g. license,      * attribution, ...) those information are provided by the configuration      * of the site and need to be included with each requested entity.<p>      * This method implements the extracting of those information from the      * configuration.      * @param siteConfiguration the configuration      * @param vf The {@link ValueFactory} used to create values of the returned      * Map.      * @return the metadata for the parsed configuration      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractSiteMetadata
parameter_list|(
name|SiteConfiguration
name|siteConfiguration
parameter_list|,
name|ValueFactory
name|vf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|siteMetadata
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getAttribution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|siteMetadata
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"attributionName"
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
name|siteConfiguration
operator|.
name|getAttribution
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|siteConfiguration
operator|.
name|getAttributionUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|siteMetadata
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"attributionURL"
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
name|siteConfiguration
operator|.
name|getAttributionUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add the licenses
if|if
condition|(
name|siteConfiguration
operator|.
name|getLicenses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|License
name|license
range|:
name|siteConfiguration
operator|.
name|getLicenses
argument_list|()
control|)
block|{
if|if
condition|(
name|license
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|siteMetadata
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|license
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|siteMetadata
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|cc
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
name|license
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//if defined add the name to dc:license
if|if
condition|(
name|license
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|siteMetadata
operator|.
name|put
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"license"
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
name|license
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//link to the license via cc:license
block|}
block|}
return|return
name|siteMetadata
return|;
block|}
block|}
end_class

end_unit

