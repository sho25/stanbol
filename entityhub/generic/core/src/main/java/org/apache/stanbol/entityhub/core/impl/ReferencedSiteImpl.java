begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|EntityImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|OsgiUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntityDereferencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|CacheStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This in the Default implementation of the {@link ReferencedSite} interface.  * However this implementation forwards calls to methods defined within the  * {@link EntityDereferencer} and {@link EntitySearcher} to sub components  * (See the detailed description below).<p>  * Each {@link ReferencedSite} with an {@link CacheStrategy} other than  * {@link CacheStrategy#none} needs an associated {@link Cache}.  *<p>  * The Initialisation of the sub-components:  *<ul>  *<li><b>{@link EntityDereferencer}:</b> Implementations of this interface are  *      specific to the used protocol/technology of the referenced site.  *      Because of that calls to methods defined in this interface are forwarded  *      to an site specific instance of the {@link EntityDereferencer} interface  *      as configured by the {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE} property.<br>  *      During activation the the {@link BundleContext} is used to  *      search for {@link ComponentFactory} with the configuration<code>  *      "component.name= {@link ComponentContext#getProperties()}.get(  *      {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE})</code>. This factory is used  *      to create an instance of {@link EntityDereferencer}.<br>  *      Note also, that the configuration of this instance that is covered  *      by the {@link SiteConfiguration} interface are parsed to the  *      {@link EntityDereferencer} instance.  *<li><b> {@link EntitySearcher}:</b> Implementations of this interface are  *      also specific to the used protocol/technology of the referenced site.  *      Because of that calls to methods defined in this interface are forwarded  *      to an site specific instance of the {@link EntitySearcher} interface  *      as configured by the {@link SiteConfiguration#ENTITY_SEARCHER_TYPE} property.<br>  *      The initialisation of this instance works similar as described for the  *      {@link EntityDereferencer}. However if the value of the {@link SiteConfiguration#ENTITY_SEARCHER_TYPE}  *      is equals to {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE} or the  *      {@link SiteConfiguration#ENTITY_SEARCHER_TYPE} is not defined at all, than the  *      Dereferencer Instance is also used as {@link EntitySearcher}. If the  *      according cast does not succeed, an {@link ConfigurationException} for the  *      {@link SiteConfiguration#ENTITY_SEARCHER_TYPE} property is thrown.  *<li><b>{@link Cache}:</b> An instance of a {@link Cache} is used to  *      cache {@link Representation}s loaded form the Site. A cache is a wrapper  *      over a {@link Yard} instance that allows to configure what data are  *      stored for each representation cached form this referenced site. A  *      {@link ServiceTracker} is used for managing the dependency with the cache.  *      So if a cache is no longer available a referenced site can still be used -  *      only the local cache can not be used to retrieve entity representations.  *</ul>  *  * @author Rupert Westenthaler  *  */
end_comment

begin_decl_stmt
annotation|@
name|Component
argument_list|(
name|name
operator|=
literal|"org.apache.stanbol.entityhub.site.referencedSite"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|//the baseUri is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|ReferencedSite
operator|.
name|class
argument_list|)
decl|@
name|Properties
argument_list|(
name|value
operator|=
block|{         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|ID
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|NAME
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|DESCRIPTION
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|ENTITY_PREFIX
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|ACCESS_URI
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|ENTITY_DEREFERENCER_TYPE
argument_list|,
name|options
operator|=
block|{                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|ENTITY_DEREFERENCER_TYPE
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|""
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|ENTITY_DEREFERENCER_TYPE
operator|+
literal|".option.sparql"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.dereferencer.SparqlDereferencer"
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|ENTITY_DEREFERENCER_TYPE
operator|+
literal|".option.coolUri"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.dereferencer.CoolUriDereferencer"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"org.apache.stanbol.entityhub.dereferencer.SparqlDereferencer"
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|QUERY_URI
argument_list|)
block|,
comment|//the deri server has better performance
block|@
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|ENTITY_SEARCHER_TYPE
argument_list|,
name|options
operator|=
block|{                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|""
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.sparql"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.searcher.SparqlSearcher"
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.sparql-virtuoso"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.searcher.VirtuosoSearcher"
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|ENTITY_SEARCHER_TYPE
operator|+
literal|".option.sparql-larq"
argument_list|,
name|name
operator|=
literal|"org.apache.stanbol.entityhub.searcher.LarqSearcher"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"org.apache.stanbol.entityhub.searcher.SparqlSearcher"
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|DEFAULT_SYMBOL_STATE
argument_list|,
name|options
operator|=
block|{                 @
name|PropertyOption
argument_list|(
comment|//seems, that name and value are exchanged ...
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.proposed"
argument_list|,
name|name
operator|=
literal|"proposed"
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_SYMBOL_STATE
operator|+
literal|".option.active"
argument_list|,
name|name
operator|=
literal|"active"
argument_list|)
comment|//the other states make no sense for new symbols
block|}
argument_list|,
name|value
operator|=
literal|"proposed"
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|DEFAULT_MAPPING_STATE
argument_list|,
name|options
operator|=
block|{                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_MAPPING_STATE
operator|+
literal|".option.proposed"
argument_list|,
name|name
operator|=
literal|"proposed"
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_MAPPING_STATE
operator|+
literal|".option.confirmed"
argument_list|,
name|name
operator|=
literal|"confirmed"
argument_list|)
comment|//the other states make no sense for new symbols
block|}
argument_list|,
name|value
operator|=
literal|"proposed"
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|DEFAULT_EXPIRE_DURATION
argument_list|,
name|options
operator|=
block|{                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.oneMonth"
argument_list|,
name|name
operator|=
literal|""
operator|+
operator|(
literal|1000L
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|30
operator|)
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.halfYear"
argument_list|,
name|name
operator|=
literal|""
operator|+
operator|(
literal|1000L
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|183
operator|)
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.oneYear"
argument_list|,
name|name
operator|=
literal|""
operator|+
operator|(
literal|1000L
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|365
operator|)
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|DEFAULT_EXPIRE_DURATION
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|"0"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"0"
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|CACHE_STRATEGY
argument_list|,
name|options
operator|=
block|{                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|CACHE_STRATEGY
operator|+
literal|".option.none"
argument_list|,
name|name
operator|=
literal|"none"
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|CACHE_STRATEGY
operator|+
literal|".option.used"
argument_list|,
name|name
operator|=
literal|"used"
argument_list|)
block|,                 @
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|SiteConfiguration
operator|.
name|CACHE_STRATEGY
operator|+
literal|".option.all"
argument_list|,
name|name
operator|=
literal|"all"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"none"
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|CACHE_ID
argument_list|)
block|,         @
name|Property
argument_list|(
name|name
operator|=
name|SiteConfiguration
operator|.
name|SITE_FIELD_MAPPINGS
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|)
block|}
argument_list|)
decl|public
name|class
name|ReferencedSiteImpl
decl|implements
name|ReferencedSite
block|{
specifier|static
specifier|final
name|int
name|maxInt
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
decl_stmt|;
specifier|private
name|ComponentContext
name|context
decl_stmt|;
specifier|private
name|FieldMapper
name|fieldMappings
decl_stmt|;
specifier|private
specifier|final
name|Object
name|searcherAndDereferencerLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|Boolean
name|dereferencerEqualsEntitySearcherComponent
decl_stmt|;
specifier|private
name|ComponentFactoryListener
name|dereferencerComponentFactoryListener
decl_stmt|;
specifier|private
name|ComponentFactoryListener
name|searcherComponentFactoryListener
decl_stmt|;
comment|//    private String dereferencerComponentName;
specifier|private
name|ComponentInstance
name|dereferencerComponentInstance
decl_stmt|;
specifier|private
name|EntityDereferencer
name|dereferencer
decl_stmt|;
comment|//    private String entitySearcherComponentName;
specifier|private
name|EntitySearcher
name|entitySearcher
decl_stmt|;
specifier|private
name|ComponentInstance
name|entitySearcherComponentInstance
decl_stmt|;
specifier|private
name|ServiceTracker
name|cacheTracker
decl_stmt|;
specifier|private
name|SiteConfiguration
name|siteConfiguration
decl_stmt|;
comment|/**      * The {@link OfflineMode} is used by Stanbol to indicate that no external      * service should be referenced. For the ReferencedSiteImpl this means that      * the {@link EntityDereferencer} and {@link EntitySearcher} interfaces      * are no longer used.<p>      * @see #enableOfflineMode(OfflineMode)      * @see #disableOfflineMode(OfflineMode)      * @see #isOfflineMode()      * @see #ensureOnline(String, Class)      */
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"enableOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"disableOfflineMode"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
specifier|public
name|ReferencedSiteImpl
parameter_list|()
block|{
name|this
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReferencedSiteImpl
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ReferencedSiteImpl
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"create instance of {}"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Entity
argument_list|>
name|findEntities
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
name|List
argument_list|<
name|Entity
argument_list|>
name|results
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
comment|//TODO: check if query can be executed based on the base configuration of the Cache
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|//When using the Cache, directly get the representations!
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|representations
init|=
name|cache
operator|.
name|findRepresentation
argument_list|(
operator|(
name|query
operator|)
argument_list|)
decl_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|representations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Representation
name|result
range|:
name|representations
control|)
block|{
name|Entity
name|entity
init|=
operator|new
name|EntityImpl
argument_list|(
name|getId
argument_list|()
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|set
argument_list|(
name|RdfResourceEnum
operator|.
name|isChached
operator|.
name|getUri
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|query
argument_list|,
name|results
argument_list|,
name|Entity
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to execute query on Cache %s because it is currently not active"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s currently not active will query remote Site %s as fallback"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|entityIds
decl_stmt|;
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EntitySearcher %s not available for remote site %s!"
argument_list|,
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ensureOnline
argument_list|(
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|entitySearcher
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|entityIds
operator|=
name|entitySearcher
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to execute query on remote site %s with entitySearcher %s!"
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|int
name|numResults
init|=
name|entityIds
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|entities
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|numResults
argument_list|)
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|ReferencedSiteException
name|lastError
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|entityIds
control|)
block|{
name|Entity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|getEntity
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create Entity for ID that was selected by an FieldQuery (id="
operator|+
name|id
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|entities
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|//use the position in the list as resultSocre
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|set
argument_list|(
name|RdfResourceEnum
operator|.
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
name|float
operator|)
name|numResults
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReferencedSiteException
name|e
parameter_list|)
block|{
name|lastError
operator|=
name|e
expr_stmt|;
name|errors
operator|++
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Representation for Entity %s. -> %d Error%s for %d Entities in QueryResult (Reason:%s)"
argument_list|,
name|id
argument_list|,
name|errors
argument_list|,
name|errors
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
argument_list|,
name|entityIds
operator|.
name|size
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//decrease numResults because it is used as resultScore for entities
name|numResults
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|lastError
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to get anly Representations for Entities selected by the parsed Query (Root-Cause is the last Exception trown)"
argument_list|,
name|lastError
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get %d/%d Represetnations for selected Entities."
argument_list|,
name|errors
argument_list|,
name|entityIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Stack trace of the last Exception:"
argument_list|,
name|lastError
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|query
argument_list|,
name|entities
argument_list|,
name|Entity
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
comment|//TODO: check if query can be executed based on the base configuration of the Cache
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to execute query because Cache %s is currently not active"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s currently not active will query remote Site %s as fallback"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EntitySearcher %s not available for remote site %s!"
argument_list|,
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ensureOnline
argument_list|(
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|entitySearcher
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|entitySearcher
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable execute Query on remote site "
operator|+
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
comment|//TODO: check if query can be executed based on the base configuration of the Cache
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to execute query on Cache %s because it is currently not active"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s currently not active will query remote Site %s as fallback"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EntitySearcher %s not available for remote site %s!"
argument_list|,
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ensureOnline
argument_list|(
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|entitySearcher
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|entitySearcher
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
literal|"Unable execute Query on remote site "
operator|+
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getContent
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Content for Entity %s because No dereferencer configured for ReferencedSite %s"
argument_list|,
name|id
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|dereferencer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Dereferencer %s for remote site %s is not available"
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ensureOnline
argument_list|(
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|,
name|dereferencer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|dereferencer
operator|.
name|dereference
argument_list|(
name|id
argument_list|,
name|contentType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load content for Entity %s and mediaType %s from remote site %s by using dereferencer %s"
argument_list|,
name|id
argument_list|,
name|contentType
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Entity
name|getEntity
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
name|Entity
name|entity
init|=
literal|null
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Representation
name|rep
init|=
name|cache
operator|.
name|getRepresentation
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
name|entity
operator|=
operator|new
name|EntityImpl
argument_list|(
name|getId
argument_list|()
argument_list|,
name|rep
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|set
argument_list|(
name|RdfResourceEnum
operator|.
name|isChached
operator|.
name|getUri
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|//do no remote lokkups on CacheStrategy.all!!
block|}
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s form Cache %s"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s form Cache %s. Will dereference from remote site %s"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|==
literal|null
operator|||
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s because configured Cache %s is currently not available"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache %s is currently not available. Will use remote site %s to load Representation %s"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
comment|// no cache or not found in cache
if|if
condition|(
name|dereferencer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Entity Dereferencer %s for accessing remote site %s is not available"
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ensureOnline
argument_list|(
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|,
name|dereferencer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Representation
name|rep
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rep
operator|=
name|dereferencer
operator|.
name|dereference
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load Representation for entity %s form remote site %s with dereferencer %s"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//representation loaded from remote site and cache is available
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|cachedVersion
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
comment|// -> cache the representation
try|try
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|//return the the cached version
name|rep
operator|=
name|cache
operator|.
name|store
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|cachedVersion
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"  - cached Representation {} in {} ms"
argument_list|,
name|id
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to cache Represetnation %s in Cache %s! Representation not cached!"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|entity
operator|=
operator|new
name|EntityImpl
argument_list|(
name|getId
argument_list|()
argument_list|,
name|rep
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|set
argument_list|(
name|RdfResourceEnum
operator|.
name|isChached
operator|.
name|getUri
argument_list|()
argument_list|,
name|cachedVersion
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"  - loaded Representation {} from Cache in {} ms"
argument_list|,
name|id
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entity
return|;
block|}
annotation|@
name|Override
specifier|public
name|SiteConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|siteConfiguration
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|!=
literal|null
condition|?
name|siteConfiguration
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|!=
literal|null
condition|?
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|ReferencedSite
condition|)
block|{
name|SiteConfiguration
name|osc
init|=
operator|(
operator|(
name|ReferencedSite
operator|)
name|obj
operator|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|//this will return false if one of the two sites is not activated
comment|// -> this should be OK
return|return
name|siteConfiguration
operator|!=
literal|null
operator|&&
name|osc
operator|!=
literal|null
operator|&&
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|osc
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FieldMapper
name|getFieldMapper
parameter_list|()
block|{
return|return
name|fieldMappings
return|;
block|}
comment|/**      * In case {@link CacheStrategy#all} this Method returns the      * query factory of the Cache.      * Otherwise it returns {@link DefaultQueryFactory#getInstance()}.      */
annotation|@
name|Override
specifier|public
name|FieldQueryFactory
name|getQueryFactory
parameter_list|()
block|{
name|FieldQueryFactory
name|factory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
name|Cache
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|factory
operator|=
name|cache
operator|.
name|getQueryFactory
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
specifier|public
name|boolean
name|supportsLocalMode
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
operator|&&
name|getCache
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|supportsSearch
parameter_list|()
block|{
return|return
name|supportsLocalMode
argument_list|()
operator|||
name|entitySearcher
operator|!=
literal|null
return|;
block|}
comment|/**      * Internally used to get the Cache for this site. If      * {@link CacheStrategy#none}, this methods always returns<code>null</code>,      * otherwise it returns the Cache for the configured Yard or<code>null</code>      * if no such Cache is available.      * @return the cache or<code>null</code> if {@link CacheStrategy#none} or      * the configured cache instance is not available.      */
specifier|protected
name|Cache
name|getCache
parameter_list|()
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|none
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Cache
name|cache
init|=
operator|(
name|Cache
operator|)
name|cacheTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|cache
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
return|return
name|cache
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/*--------------------------------------------------------------------------      *  OSGI LIFECYCLE and LISTENER METHODS      *--------------------------------------------------------------------------      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|YardException
throws|,
name|InvalidSyntaxException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"in {} activate with properties {}"
argument_list|,
name|ReferencedSiteImpl
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No Component Context and/or Dictionary properties object parsed to the acticate methode"
argument_list|)
throw|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
comment|//create the SiteConfiguration based on the parsed properties
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|//copy the properties to a map
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|properties
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//NOTE that the constructor also validation of the parsed configuration
name|siteConfiguration
operator|=
operator|new
name|DefaultSiteConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|PROHIBITED_SITE_IDS
operator|.
name|contains
argument_list|(
name|siteConfiguration
operator|.
name|getId
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|SiteConfiguration
operator|.
name|ID
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"The ID '%s' of this Referenced Site is one of the following "
operator|+
literal|"prohibited IDs: {} (case insensitive)"
argument_list|,
name|siteConfiguration
operator|.
name|getId
argument_list|()
argument_list|,
name|PROHIBITED_SITE_IDS
argument_list|)
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"> initialise Referenced Site {}"
argument_list|,
name|siteConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//if the accessUri is the same as the queryUri and both the dereferencer and
comment|//the entitySearcher uses the same component, than we need only one component
comment|//for both dependencies.
name|this
operator|.
name|dereferencerEqualsEntitySearcherComponent
operator|=
comment|//(1) accessURI == queryURI
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|.
name|equals
argument_list|(
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
operator|&&
comment|//(2) entity dereferencer == entity searcher
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|.
name|equals
argument_list|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|)
expr_stmt|;
comment|//init the fieldMapper based on the configuration
name|fieldMappings
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getFieldMappings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> Initialise configured field mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|configuredMapping
range|:
name|siteConfiguration
operator|.
name|getFieldMappings
argument_list|()
control|)
block|{
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|configuredMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   - add FieldMapping {}"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|fieldMappings
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//now init the referenced Services
name|initDereferencerAndEntitySearcher
argument_list|()
expr_stmt|;
comment|// If a cache is configured init the ServiceTracker used to manage the
comment|// Reference to the cache!
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|cacheFilter
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)(%s=%s))"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|Cache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Cache
operator|.
name|CACHE_YARD
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
decl_stmt|;
name|cacheTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|createFilter
argument_list|(
name|cacheFilter
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cacheTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Initialise the dereferencer and searcher component as soon as the according      * {@link ComponentFactory} gets registered.<p>      * First this Methods tries to find the according {@link ServiceReference}s      * directly. If they are not available (e.g. because the component factories      * are not yet started) than it adds a {@link ServiceListener} for the missing      * {@link ComponentFactory} that calls the {@link #createDereferencerComponent(ComponentFactory)}      * and {@link #createEntitySearcherComponent(ComponentFactory)} as soon as      * the factory gets registered.      * @throws InvalidSyntaxException if the #entitySearcherComponentName or the      * {@link #dereferencerComponentName} somehow cause an invalid formated string      * that can not be used to parse a {@link Filter}.      */
specifier|private
name|void
name|initDereferencerAndEntitySearcher
parameter_list|()
throws|throws
name|InvalidSyntaxException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|!=
literal|null
operator|&&
comment|//initialise only if a accessUri
operator|!
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
comment|// is configured
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|componentNameFilterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
literal|"component.name"
argument_list|,
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)%s)"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
name|ServiceReference
index|[]
name|refs
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getServiceReferences
argument_list|(
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|createEntitySearcherComponent
argument_list|(
operator|(
name|ComponentFactory
operator|)
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//service factory not yet available -> add servicelistener
name|this
operator|.
name|searcherComponentFactoryListener
operator|=
operator|new
name|ComponentFactoryListener
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addServiceListener
argument_list|(
name|this
operator|.
name|searcherComponentFactoryListener
argument_list|,
name|filterString
argument_list|)
expr_stmt|;
comment|//NOTE: here the filter MUST include also the objectClass!
block|}
comment|//context.getComponentInstance().dispose();
comment|//throw an exception to avoid an successful activation
block|}
if|if
condition|(
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
operator|!=
literal|null
operator|&&
comment|//initialise only if a query URI
operator|!
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
comment|// is configured
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|dereferencerEqualsEntitySearcherComponent
condition|)
block|{
name|String
name|componentNameFilterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
literal|"component.name"
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)%s)"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
name|ServiceReference
index|[]
name|refs
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getServiceReferences
argument_list|(
name|ComponentFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|componentNameFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|createDereferencerComponent
argument_list|(
operator|(
name|ComponentFactory
operator|)
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//service factory not yet available -> add servicelistener
name|this
operator|.
name|dereferencerComponentFactoryListener
operator|=
operator|new
name|ComponentFactoryListener
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addServiceListener
argument_list|(
name|this
operator|.
name|dereferencerComponentFactoryListener
argument_list|,
name|filterString
argument_list|)
expr_stmt|;
comment|//NOTE: here the filter MUST include also the objectClass!
block|}
block|}
block|}
comment|/**      * Creates the entity searcher component used by this {@link ReferencedSite}      * (and configured via the {@link SiteConfiguration#ENTITY_SEARCHER_TYPE} property).<p>      * If the {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE} is set to the same vale      * and the {@link #accessUri} also equals the {@link #queryUri}, than the      * component created for the entity searcher is also used as dereferencer.      * @param factory The component factory used to create the      * {@link #entitySearcherComponentInstance}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|createEntitySearcherComponent
parameter_list|(
name|ComponentFactory
name|factory
parameter_list|)
block|{
comment|//both create*** methods sync on the searcherAndDereferencerLock to avoid
comment|//multiple component instances because of concurrent calls
synchronized|synchronized
init|(
name|this
operator|.
name|searcherAndDereferencerLock
init|)
block|{
if|if
condition|(
name|entitySearcherComponentInstance
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|entitySearcherComponentInstance
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|entitySearcher
operator|=
operator|(
name|EntitySearcher
operator|)
name|entitySearcherComponentInstance
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dereferencerEqualsEntitySearcherComponent
condition|)
block|{
name|this
operator|.
name|dereferencer
operator|=
operator|(
name|EntityDereferencer
operator|)
name|entitySearcher
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates the entity dereferencer component used by this {@link ReferencedSite}.      * The implementation used as the dereferencer is configured by the      * {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE} property.      * @param factory the component factory used to create the {@link #dereferencer}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|createDereferencerComponent
parameter_list|(
name|ComponentFactory
name|factory
parameter_list|)
block|{
comment|//both create*** methods sync on searcherAndDereferencerLock to avoid
comment|//multiple component instances because of concurrent calls
synchronized|synchronized
init|(
name|this
operator|.
name|searcherAndDereferencerLock
init|)
block|{
if|if
condition|(
name|dereferencerComponentInstance
operator|==
literal|null
condition|)
block|{
name|dereferencerComponentInstance
operator|=
name|factory
operator|.
name|newInstance
argument_list|(
name|OsgiUtils
operator|.
name|copyConfig
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|dereferencer
operator|=
operator|(
name|EntityDereferencer
operator|)
name|dereferencerComponentInstance
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Simple {@link ServiceListener} implementation that is used to get notified      * if one of the {@link ComponentFactory component factories} for the      * configured implementation of the {@link EntityDereferencer} or      * {@link EntitySearcher} interfaces get registered.      * @author Rupert Westenthaler      *      */
specifier|private
class|class
name|ComponentFactoryListener
implements|implements
name|ServiceListener
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|protected
name|ComponentFactoryListener
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
if|if
condition|(
name|bundleContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The BundleContext MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
name|Object
name|eventComponentName
init|=
name|event
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"component.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|REGISTERED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Process ServiceEvent for ComponentFactory {} and State REGISTERED"
argument_list|,
name|eventComponentName
argument_list|)
expr_stmt|;
name|ComponentFactory
name|factory
init|=
operator|(
name|ComponentFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|event
operator|.
name|getServiceReference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|.
name|equals
argument_list|(
name|eventComponentName
argument_list|)
condition|)
block|{
name|createDereferencerComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|!=
literal|null
operator|&&
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
operator|.
name|equals
argument_list|(
name|eventComponentName
argument_list|)
condition|)
block|{
name|createEntitySearcherComponent
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignore ServiceEvent for ComponentFactory {} and state {}"
argument_list|,
name|eventComponentName
argument_list|,
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|MODIFIED
condition|?
literal|"MODIFIED"
else|:
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|UNREGISTERING
condition|?
literal|"UNREGISTERING"
else|:
literal|"MODIFIED_ENDMATCH"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"deactivate Referenced Site {}"
argument_list|,
name|siteConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dereferencer
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dereferencerComponentInstance
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|dereferencerComponentInstance
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|dereferencerComponentInstance
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|entitySearcher
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|entitySearcherComponentInstance
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|entitySearcherComponentInstance
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|entitySearcherComponentInstance
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|searcherComponentFactoryListener
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeServiceListener
argument_list|(
name|searcherComponentFactoryListener
argument_list|)
expr_stmt|;
name|searcherComponentFactoryListener
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dereferencerComponentFactoryListener
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeServiceListener
argument_list|(
name|dereferencerComponentFactoryListener
argument_list|)
expr_stmt|;
name|dereferencerComponentFactoryListener
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cacheTracker
operator|!=
literal|null
condition|)
block|{
name|cacheTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|cacheTracker
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|fieldMappings
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|context
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|siteConfiguration
operator|=
literal|null
expr_stmt|;
block|}
comment|/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -      * Method for handling the OfflineMode      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -      */
comment|/**      * Called by the ConfigurationAdmin to bind the {@link #offlineMode} if the      * service becomes available      * @param mode       */
specifier|protected
specifier|final
name|void
name|enableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
block|}
comment|/**      * Called by the ConfigurationAdmin to unbind the {@link #offlineMode} if the      * service becomes unavailable      * @param mode      */
specifier|protected
specifier|final
name|void
name|disableOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> only if Stanbol operates in {@link OfflineMode}.      * @return the offline state      */
specifier|protected
specifier|final
name|boolean
name|isOfflineMode
parameter_list|()
block|{
return|return
name|offlineMode
operator|!=
literal|null
return|;
block|}
comment|/**      * Basically this Method throws an {@link ReferencedSiteException} in case      * Stanbol operates in offline mode      * @param uri the URI of the remote service      * @param clazz the clazz of the service that would like to refer the remote      * service      * @throws ReferencedSiteException in case {@link #isOfflineMode()} returns      *<code>true</code>      */
specifier|private
name|void
name|ensureOnline
parameter_list|(
name|String
name|uri
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|ReferencedSiteException
block|{
if|if
condition|(
name|isOfflineMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReferencedSiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to access remote Service %s by using %s because Stanbol runs in OfflineMode"
argument_list|,
name|uri
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_decl_stmt

end_unit

