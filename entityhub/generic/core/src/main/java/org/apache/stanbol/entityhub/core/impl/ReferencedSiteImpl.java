begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|SiteUtils
operator|.
name|initEntityMetadata
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|EntityImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntityDereferencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|EntitySearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|CacheStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This in the Default implementation of the {@link Site} interface. However this implementation forwards  * calls to methods defined within the {@link EntityDereferencer} and {@link EntitySearcher} to sub components  * (See the detailed description below).  *<p>  * Each {@link Site} with an {@link CacheStrategy} other than {@link CacheStrategy#none} needs an associated  * {@link Cache} (actually a wrapper over a {@link Yard}).  *<p>  * Referenced Components  *<ul>  *<li><b>{@link EntityDereferencer}:</b> Implementations of this interface are specific to the used  * protocol/technology of the referenced site. Because of that calls to methods defined in this interface are  * forwarded to an site specific instance of the {@link EntityDereferencer} interface as configured by the  * {@link SiteConfiguration#ENTITY_DEREFERENCER_TYPE} property.<br>  *<li><b> {@link EntitySearcher}:</b> Implementations of this interface are also specific to the used  * protocol/technology of the referenced site. Because of that calls to methods defined in this interface are  * forwarded to an site specific instance of the {@link EntitySearcher} interface as configured by the  * {@link SiteConfiguration#ENTITY_SEARCHER_TYPE} property. Support for Search is optional. If no  * {@link EntitySearcher} is configured that all find** methods will throw {@link SiteException}s<br>n.  *<li><b>{@link Cache}:</b> An instance of a {@link Cache} is used to cache {@link Representation}s loaded  * form the Site. A cache is a wrapper over a {@link Yard} instance that allows to configure what data are  * stored for each representation cached form this referenced site. In case of  * {@link CacheStrategy#all} the Cache is also used to search for Entities. Otherwise only  * dereferencing of Entities is done via the Cache.  *</ul>  *   * @author Rupert Westenthaler  *   */
end_comment

begin_class
specifier|public
class|class
name|ReferencedSiteImpl
implements|implements
name|Site
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReferencedSiteImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FieldMapper
name|fieldMappings
decl_stmt|;
specifier|private
name|EntityDereferencer
name|dereferencer
decl_stmt|;
specifier|private
name|EntitySearcher
name|entitySearcher
decl_stmt|;
specifier|private
name|Cache
name|cache
decl_stmt|;
specifier|private
name|ReferencedSiteConfiguration
name|siteConfiguration
decl_stmt|;
comment|/**      * Stores keys -> values to be added to the metadata of {@link Entity Entities} created by this site.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|siteMetadata
decl_stmt|;
specifier|public
name|ReferencedSiteImpl
parameter_list|(
name|ReferencedSiteConfiguration
name|config
parameter_list|,
name|EntityDereferencer
name|dereferencer
parameter_list|,
name|EntitySearcher
name|searcher
parameter_list|,
name|Cache
name|cache
parameter_list|,
name|NamespacePrefixService
name|nsPrefixService
parameter_list|)
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed SiteConfiguration MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The ReferencedSite ID (config#getId()) MUST NOT "
operator|+
literal|"NULL nor empty!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getCacheStrategy
argument_list|()
operator|!=
name|CacheStrategy
operator|.
name|all
operator|&&
name|dereferencer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The EntityDerefernencer MUST NOT be NULL if "
operator|+
literal|"CacheStrategy is NOT FULL (all entities in local Cache)!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getCacheStrategy
argument_list|()
operator|!=
name|CacheStrategy
operator|.
name|none
operator|&&
name|cache
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Cache MUST NOT be NULL if the "
operator|+
literal|"CacheStrategy is set to an other value as NONE!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|siteConfiguration
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|dereferencer
operator|=
name|dereferencer
expr_stmt|;
name|this
operator|.
name|entitySearcher
operator|=
name|searcher
expr_stmt|;
comment|// init the fieldMapper based on the configuration
name|fieldMappings
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getFieldMappings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> Initialise configured field mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|configuredMapping
range|:
name|siteConfiguration
operator|.
name|getFieldMappings
argument_list|()
control|)
block|{
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|configuredMapping
argument_list|,
name|nsPrefixService
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"   - add FieldMapping {}"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|fieldMappings
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Entity
argument_list|>
name|findEntities
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|SiteException
block|{
name|List
argument_list|<
name|Entity
argument_list|>
name|results
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
try|try
block|{
comment|// When using the Cache, directly get the representations!
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|representations
init|=
name|cache
operator|.
name|findRepresentation
argument_list|(
operator|(
name|query
operator|)
argument_list|)
decl_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|representations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Representation
name|result
range|:
name|representations
control|)
block|{
name|Entity
name|entity
init|=
operator|new
name|EntityImpl
argument_list|(
name|getId
argument_list|()
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|initEntityMetadata
argument_list|(
name|entity
argument_list|,
name|siteMetadata
argument_list|,
name|singletonMap
argument_list|(
name|RdfResourceEnum
operator|.
name|isChached
operator|.
name|getUri
argument_list|()
argument_list|,
operator|(
name|Object
operator|)
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|query
argument_list|,
name|results
argument_list|,
name|Entity
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|entityIds
decl_stmt|;
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The ReferencedSite %s does not support queries!"
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|entityIds
operator|=
name|entitySearcher
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to execute query on remote site %s with entitySearcher %s!"
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getEntitySearcherType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|int
name|numResults
init|=
name|entityIds
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|entities
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|numResults
argument_list|)
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|SiteException
name|lastError
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|entityIds
control|)
block|{
name|Entity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|getEntity
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create Entity for ID that was selected by an FieldQuery (id="
operator|+
name|id
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|entities
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|// use the position in the list as resultSocre
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|set
argument_list|(
name|RdfResourceEnum
operator|.
name|resultScore
operator|.
name|getUri
argument_list|()
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
name|float
operator|)
name|numResults
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SiteException
name|e
parameter_list|)
block|{
name|lastError
operator|=
name|e
expr_stmt|;
name|errors
operator|++
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Representation for Entity "
operator|+
literal|"%s. -> %d Error%s for %d Entities in QueryResult (Reason:%s)"
argument_list|,
name|id
argument_list|,
name|errors
argument_list|,
name|errors
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
argument_list|,
name|entityIds
operator|.
name|size
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// decrease numResults because it is used as resultScore for
comment|// entities
name|numResults
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|lastError
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
literal|"Unable to get anly Representations for "
operator|+
literal|"Entities selected by the parsed Query (Root-Cause is the "
operator|+
literal|"last Exception trown)"
argument_list|,
name|lastError
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get %d/%d Represetnations for selected Entities."
argument_list|,
name|errors
argument_list|,
name|entityIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Stack trace of the last Exception:"
argument_list|,
name|lastError
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|query
argument_list|,
name|entities
argument_list|,
name|Entity
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|SiteException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ReferencedSite %s does not support queries!"
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|entitySearcher
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
literal|"Unable execute Query on remote site "
operator|+
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|SiteException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
literal|"Unable to execute query on Cache "
operator|+
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while performing query on Cache %s! Try to use remote site %s as fallback!"
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entitySearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The referencedSite %s dose not support queries!"
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|entitySearcher
operator|.
name|findEntities
argument_list|(
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
literal|"Unable execute Query on remote site "
operator|+
name|siteConfiguration
operator|.
name|getQueryUri
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getContent
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|SiteException
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Content for Entity %s because No dereferencer configured for ReferencedSite %s"
argument_list|,
name|id
argument_list|,
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|dereferencer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Dereferencer %s for remote site %s is not available"
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|dereferencer
operator|.
name|dereference
argument_list|(
name|id
argument_list|,
name|contentType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load content for Entity %s and mediaType %s from remote site %s by using dereferencer %s"
argument_list|,
name|id
argument_list|,
name|contentType
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Entity
name|getEntity
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|SiteException
block|{
name|Representation
name|rep
init|=
literal|null
decl_stmt|;
name|Boolean
name|cachedVersion
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rep
operator|=
name|cache
operator|.
name|getRepresentation
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|// do no remote lookups on CacheStrategy.all!!
block|}
block|}
else|else
block|{
name|cachedVersion
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
if|if
condition|(
name|dereferencer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s form Cache %s"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to get Represetnation %s form Cache %s. Will dereference from remote site %s"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rep
operator|==
literal|null
operator|&&
name|dereferencer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rep
operator|=
name|dereferencer
operator|.
name|dereference
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SiteException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load Representation for entity %s form remote site %s with dereferencer %s"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getAccessUri
argument_list|()
argument_list|,
name|siteConfiguration
operator|.
name|getEntityDereferencerType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// representation loaded from remote site and cache is available
if|if
condition|(
name|rep
operator|!=
literal|null
operator|&&
name|cache
operator|!=
literal|null
condition|)
block|{
comment|// -> cache the representation
try|try
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// return the the cached version
name|rep
operator|=
name|cache
operator|.
name|store
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|cachedVersion
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"  - cached Representation {} in {} ms"
argument_list|,
name|id
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to cache Represetnation %s in Cache %s! Representation not cached!"
argument_list|,
name|id
argument_list|,
name|siteConfiguration
operator|.
name|getCacheId
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
name|Entity
name|entity
init|=
operator|new
name|EntityImpl
argument_list|(
name|getId
argument_list|()
argument_list|,
name|rep
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|initEntityMetadata
argument_list|(
name|entity
argument_list|,
name|siteMetadata
argument_list|,
name|singletonMap
argument_list|(
name|RdfResourceEnum
operator|.
name|isChached
operator|.
name|getUri
argument_list|()
argument_list|,
operator|(
name|Object
operator|)
name|cachedVersion
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SiteConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|siteConfiguration
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|!=
literal|null
condition|?
name|siteConfiguration
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|!=
literal|null
condition|?
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Site
condition|)
block|{
name|SiteConfiguration
name|osc
init|=
operator|(
operator|(
name|Site
operator|)
name|obj
operator|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// this will return false if one of the two sites is not activated
comment|// -> this should be OK
return|return
name|siteConfiguration
operator|!=
literal|null
operator|&&
name|osc
operator|!=
literal|null
operator|&&
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|osc
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FieldMapper
name|getFieldMapper
parameter_list|()
block|{
return|return
name|fieldMappings
return|;
block|}
comment|/**      * In case {@link CacheStrategy#all} this Method returns the query factory of the Cache. Otherwise it      * returns {@link DefaultQueryFactory#getInstance()}.      */
annotation|@
name|Override
specifier|public
name|FieldQueryFactory
name|getQueryFactory
parameter_list|()
block|{
name|FieldQueryFactory
name|factory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
condition|)
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|factory
operator|=
name|cache
operator|.
name|getQueryFactory
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
specifier|public
name|boolean
name|supportsLocalMode
parameter_list|()
block|{
return|return
name|siteConfiguration
operator|.
name|getCacheStrategy
argument_list|()
operator|==
name|CacheStrategy
operator|.
name|all
operator|&&
name|cache
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|supportsSearch
parameter_list|()
block|{
return|return
name|supportsLocalMode
argument_list|()
operator|||
name|entitySearcher
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

