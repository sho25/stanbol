begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|InMemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|MappingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Wrapper over an Entity to allow API based access to the information defined  * for EntityMappings.<p>  * In addition this class provides some static utilities that allow to retrieve  * some values without creating a wrapper instance over an entity.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|EntityMapping
extends|extends
name|EntityWrapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityMapping
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The default state for newly created instances if not otherwise configured      */
specifier|public
specifier|static
specifier|final
name|MappingState
name|DEFAULT_MAPPING_STATE
init|=
name|MappingState
operator|.
name|proposed
decl_stmt|;
comment|/**      * The property to be used for the id of the mapped entity      */
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE
init|=
name|RdfResourceEnum
operator|.
name|mappingSource
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The property to be used for the id of the mapped symbol      */
specifier|public
specifier|static
specifier|final
name|String
name|TARGET
init|=
name|RdfResourceEnum
operator|.
name|mappingTarget
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The property to be used for the state of the MappedEntity instance      */
specifier|public
specifier|static
specifier|final
name|String
name|STATE
init|=
name|RdfResourceEnum
operator|.
name|hasMappingState
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|/**      * The property used to hold the expires date of the representation (if any)      */
specifier|public
specifier|static
specifier|final
name|String
name|EXPIRES
init|=
name|RdfResourceEnum
operator|.
name|expires
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The "rdf:type" property      */
specifier|private
specifier|static
specifier|final
name|String
name|RDF_TYPE
init|=
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
decl_stmt|;
comment|/**      * Used to check if this type is present for wrapped entities      */
specifier|private
specifier|static
specifier|final
name|Reference
name|ENTITY_MAPPING_TYPE
init|=
name|InMemoryValueFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createReference
argument_list|(
name|RdfResourceEnum
operator|.
name|EntityMapping
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Creates a EntityMapping wrapper over an Entity instance      * @param siteId      * @param representation The representation that holds the state for the new EntityMapping instance      * @throws IllegalArgumentException If the EntityMapping Instance can not be created based on the parsed parameter.      * This includes<ul>      *<li> the Entityhub ID is<code>null</code> or empty      *<li> the parsed representation does not define a link to an entity      *      (provide a value for the {@link EntityMapping#SOURCE} field)      *<li> the parsed representation does not define a link to a symbol      *      (provide a value for the {@link EntityMapping#TARGET} field)      *<li> the representation is<code>null</code>      *</ul>      */
specifier|public
name|EntityMapping
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|this
argument_list|(
name|entity
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EntityMapping
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Entity MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|validate
operator|&&
operator|!
name|isValid
argument_list|(
name|entity
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Entity %s MUST BE of rdf:type %s!"
argument_list|,
name|entity
argument_list|,
name|RdfResourceEnum
operator|.
name|EntityMapping
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks if the parsed Entity can be wrapped by this EntityMapping wrapper.      * Currently it checks only if the rdf:type entityhub:EntityMapping is      * present      * @param entity the entity to check      * @return      */
specifier|public
specifier|static
name|boolean
name|isValid
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Reference
argument_list|>
name|types
init|=
name|ModelUtils
operator|.
name|asSet
argument_list|(
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getReferences
argument_list|(
name|RDF_TYPE
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|types
operator|.
name|contains
argument_list|(
name|ENTITY_MAPPING_TYPE
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * If necessary adds missing requirements to the parsed entity and than      * returns the wrapped Entity.      * @param entity the entity      */
specifier|public
specifier|static
name|EntityMapping
name|init
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|addReference
argument_list|(
name|RDF_TYPE
argument_list|,
name|RdfResourceEnum
operator|.
name|EntityMapping
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|EntityMapping
argument_list|(
name|entity
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Getter for the ID of the source entity      * @return the source entity      */
specifier|public
specifier|final
name|String
name|getSourceId
parameter_list|()
block|{
return|return
name|getSourceId
argument_list|(
name|wrappedEntity
argument_list|)
return|;
block|}
comment|/**      * Getter for the value of the {@link #SOURCE} property of the parsed      * Entity.      * @param entity the entity      * @return the value or<code>null</code> if not present.      */
specifier|public
specifier|static
name|String
name|getSourceId
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|Object
name|id
init|=
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getFirst
argument_list|(
name|SOURCE
argument_list|)
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Setter for the source of the mapping      * @param source the source      * @throws IllegalArgumentException if the parsed source is<code>null</code>      * or an empty string      */
specifier|public
specifier|final
name|void
name|setSourceId
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|source
operator|==
literal|null
operator|||
name|source
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The ID of the source MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|setReference
argument_list|(
name|SOURCE
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the date this representation expires. If this representation      * does not expire this method returns<code>null</code>.      * @return the expire date or<code>null</code> if not applicable.      */
specifier|public
specifier|final
name|Date
name|getExpires
parameter_list|()
block|{
return|return
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getFirst
argument_list|(
name|EXPIRES
argument_list|,
name|Date
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * The state of this mapping      * @return the state      */
specifier|public
specifier|final
name|MappingState
name|getState
parameter_list|()
block|{
name|Reference
name|stateUri
init|=
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getFirstReference
argument_list|(
name|STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateUri
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|MappingState
operator|.
name|isState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|MappingState
operator|.
name|getState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Value {} for field {} is not a valied MappingState! -> return null"
argument_list|,
name|stateUri
argument_list|,
name|STATE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Getter for the ID of the target entity      * @return the target entity of this mapping      */
specifier|public
specifier|final
name|String
name|getTargetId
parameter_list|()
block|{
return|return
name|getTargetId
argument_list|(
name|wrappedEntity
argument_list|)
return|;
block|}
comment|/**      * Getter for the {@link #TARGET} value of the parsed Entity.      * @param entity the entity      * @return the value of<code>null</code> if not present      */
specifier|public
specifier|static
specifier|final
name|String
name|getTargetId
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|Object
name|id
init|=
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getFirst
argument_list|(
name|TARGET
argument_list|)
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Setter for the target of this mapping      * @param target the id of the target      * @throws IllegalArgumentException if the parsed target is<code>null</code>      * or an empty string      */
specifier|public
specifier|final
name|void
name|setTargetId
parameter_list|(
name|String
name|target
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|target
operator|==
literal|null
operator|||
name|target
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed target id MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|setReference
argument_list|(
name|TARGET
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setter for the expire date for this representation.      * @param date the date or<code>null</code> if this representation does not      * expire      */
specifier|public
specifier|final
name|void
name|setExpires
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|set
argument_list|(
name|EXPIRES
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setter for the mapping state      * @param state the new state      * @throws IllegalArgumentException if the parsed state is<code>null</code>      */
specifier|public
specifier|final
name|void
name|setState
parameter_list|(
name|MappingState
name|state
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|setReference
argument_list|(
name|STATE
argument_list|,
name|state
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MappingState can not be set to NULL!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Setter for the ID of the Entity (and the Representation) this metadata      * are about      * @param id the id of the entity      */
specifier|public
specifier|final
name|void
name|setEntityId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|setReference
argument_list|(
name|RdfResourceEnum
operator|.
name|aboutRepresentation
operator|.
name|getUri
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the ID of the Entity (and the Representation) this metadata      * are about      * @return the id of the entity this metadata are about      */
specifier|public
specifier|final
name|String
name|getEntityId
parameter_list|()
block|{
name|Reference
name|ref
init|=
name|wrappedEntity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getFirstReference
argument_list|(
name|RdfResourceEnum
operator|.
name|aboutRepresentation
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ref
operator|==
literal|null
condition|?
literal|null
else|:
name|ref
operator|.
name|getReference
argument_list|()
return|;
block|}
block|}
end_class

end_unit

