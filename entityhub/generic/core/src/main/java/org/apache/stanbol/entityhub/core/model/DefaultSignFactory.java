begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
operator|.
name|SignTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_comment
comment|/**  * Factory for the default implementations of {@link Sign} and its subclasses  * {@link EntityMapping} and {@link Symbol}.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSignFactory
block|{
comment|/**      * Singleton instance      */
specifier|private
specifier|static
name|DefaultSignFactory
name|instance
decl_stmt|;
specifier|public
specifier|static
name|DefaultSignFactory
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|DefaultSignFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**      * Reads the {@link Sign#SIGN_TYPE} value in the parsed       * {@link Representation} and creates the Sign of the according type      * @param signSite the site for the sign (not stored in the Representation      * @param rep the representation of the sign      * @return the sign instance based on the data in the Representation      * @throws IllegalArgumentException if any of the parsed parameter is       *<code>null</code>      */
specifier|public
name|Sign
name|getSign
parameter_list|(
name|String
name|signSite
parameter_list|,
name|Representation
name|rep
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|signSite
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Site for the Sign MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Representation for the Sign MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|SignTypeEnum
name|signType
init|=
name|DefaultSignImpl
operator|.
name|parseSignType
argument_list|(
name|rep
argument_list|)
decl_stmt|;
return|return
name|createInstance
argument_list|(
name|signSite
argument_list|,
name|signType
argument_list|,
name|rep
argument_list|)
return|;
block|}
comment|/**      * Creates a Sign of the given type. The {@link Sign#SIGN_TYPE} is set to      * the parsed uri of the parsed {@link SignTypeEnum}.      * @param signSite the site of the sign      * @param signType the type of the sign      * @param rep the Representation for the sign      * @return the created sign instance ({@link Sign}, {@link EntityMapping} or      * {@link Symbol} depending on the parsed signType).      * @throws IllegalArgumentException If the parsed signSite or representation      * is<code>null</code>.      */
specifier|public
name|Sign
name|createSign
parameter_list|(
name|String
name|signSite
parameter_list|,
name|Sign
operator|.
name|SignTypeEnum
name|signType
parameter_list|,
name|Representation
name|rep
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|signSite
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Site for the Sign MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Representation for the Sign MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|signType
operator|==
literal|null
condition|)
block|{
comment|//if null is parsed as type
name|signType
operator|=
name|Sign
operator|.
name|SignTypeEnum
operator|.
name|Sign
expr_stmt|;
comment|//set to default
block|}
name|rep
operator|.
name|setReference
argument_list|(
name|Sign
operator|.
name|SIGN_TYPE
argument_list|,
name|signType
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createInstance
argument_list|(
name|signSite
argument_list|,
name|signType
argument_list|,
name|rep
argument_list|)
return|;
block|}
comment|/**      * Internally used to create the sign instance.      * @param signSite the site for the sign      * @param signType the type for the sign.<code>null</code> defaults to Sign      * @param rep the Representation to use      * @return the {@link Symbol}, {@link EntityMapping} or {@link Sign} depending      * on the parsed signType      * @throws IllegalArgumentException if the parsed signType has an other value      * as {@link SignTypeEnum#Sign}, {@link SignTypeEnum#EntityMapping} or      * {@link SignTypeEnum#Symbol}. Meaning that an additional type was added to      * the enumeration without adapting this implementation!)      */
specifier|private
name|Sign
name|createInstance
parameter_list|(
name|String
name|signSite
parameter_list|,
name|Sign
operator|.
name|SignTypeEnum
name|signType
parameter_list|,
name|Representation
name|rep
parameter_list|)
block|{
if|if
condition|(
name|signType
operator|==
literal|null
condition|)
block|{
name|signType
operator|=
name|Sign
operator|.
name|SignTypeEnum
operator|.
name|Sign
expr_stmt|;
block|}
switch|switch
condition|(
name|signType
condition|)
block|{
case|case
name|Sign
case|:
return|return
operator|new
name|DefaultSignImpl
argument_list|(
name|signSite
argument_list|,
name|rep
argument_list|)
return|;
case|case
name|EntityMapping
case|:
return|return
operator|new
name|DefaultEntityMappingImpl
argument_list|(
name|signSite
argument_list|,
name|rep
argument_list|)
return|;
case|case
name|Symbol
case|:
return|return
operator|new
name|DefaultSymbolImpl
argument_list|(
name|signSite
argument_list|,
name|rep
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown SignType "
operator|+
name|signType
operator|+
literal|". "
operator|+
literal|"This implementation is outdated and need to be adapted to the new Sign Type!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a sign by using the parsed type. The {@link Sign#SIGN_TYPE} according      * to the parsed signType is set to the parsed {@link Representation}.      * @param<T> the type of the sign.      * @param signSite the site for the sign      * @param signType one of {@link Sign}, {@link EntityMapping} or {@link Symbol}      * @param rep the representation of the sign      * @return The sign of the requested type      * @throws IllegalArgumentException if any of the parsed Parameter is       *<code>null</code> or the signType is not one of {@link Sign},       * {@link EntityMapping} or {@link Symbol}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|Sign
parameter_list|>
name|T
name|createSign
parameter_list|(
name|String
name|signSite
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|signType
parameter_list|,
name|Representation
name|rep
parameter_list|)
block|{
if|if
condition|(
name|signSite
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Site for the sign MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Representation for the sign MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|signType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Class representing the type of the sign MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Symbol
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|signType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|createSign
argument_list|(
name|signSite
argument_list|,
name|Sign
operator|.
name|SignTypeEnum
operator|.
name|Symbol
argument_list|,
name|rep
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|EntityMapping
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|signType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|createSign
argument_list|(
name|signSite
argument_list|,
name|Sign
operator|.
name|SignTypeEnum
operator|.
name|EntityMapping
argument_list|,
name|rep
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Sign
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|signType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|createSign
argument_list|(
name|signSite
argument_list|,
name|Sign
operator|.
name|SignTypeEnum
operator|.
name|Sign
argument_list|,
name|rep
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Class representing the sign type MUST BE one of Sign, EntityMapping or Symbol"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

