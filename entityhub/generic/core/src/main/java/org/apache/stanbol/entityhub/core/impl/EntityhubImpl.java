begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|DefaultEntityMappingImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|DefaultSymbolImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|EntityMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Sign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ReferenceConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|ReferencedSiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of the Entityhub.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|()
annotation|@
name|Service
specifier|public
specifier|final
class|class
name|EntityhubImpl
implements|implements
name|Entityhub
implements|,
name|ServiceListener
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityhubImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The OSGI component context of the Entityhub      */
specifier|private
name|ComponentContext
name|context
decl_stmt|;
comment|/**      * The field mapper holding global mappings that are used for mapping      * representations of entities for any referenced sites      */
specifier|private
name|FieldMapper
name|fieldMapper
decl_stmt|;
comment|/**      * The yard where this Entityhub instance stores its data      * TODO: this reference is currently initialised in the activate method.      * however there are some issues with that.      *<ul>      *<li> If this Component is activated, before this yard is active, the      *      activate method throws an Exception and is therefore in the      *      "unsatisfied" state.      *<li> If now the needed Yard is configured this component gets not notified      *<li> However defining a Reference is also not possible, because it would      *      be nice to be able to change the Entityhub-Yard (e.g. to change the data      *      set of the Entityhub at runtime)      *<li> I could register a {@link ServiceListener} in the activate method.      *      But I am not sure if it is allowed to have an active Service Listener      *      on an component that is in the "unsatisfied" state.      *</ul>      */
specifier|private
name|Yard
name|entityhubYard
decl_stmt|;
comment|//reference initialised in the activate method
comment|/*      * TODO: The YardManager is currently not used.      */
annotation|@
name|Reference
comment|// 1..1, static
specifier|private
name|YardManager
name|yardManager
decl_stmt|;
comment|/**      * The Configuration of the Entityhub      * TODO: Maybe refactor this implementation to implement this interface or      * to extend the {@link EntityhubConfigurationImpl}.      */
annotation|@
name|Reference
comment|// 1..1, static
specifier|private
name|EntityhubConfiguration
name|config
decl_stmt|;
comment|/**      * The site manager is used to search for entities within the Entityhub framework      */
annotation|@
name|Reference
comment|// 1..1, static
specifier|private
name|ReferencedSiteManager
name|siteManager
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SYMBOL_PREFIX
init|=
literal|"symbol"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MAPPING_PREFIX
init|=
literal|"mapping"
decl_stmt|;
comment|/**      * Activates the Entityhub (OSGI Lifecycle method)      * @param context the OSGI component context (stored in {@link #context})      * @throws ConfigurationException On any error during the activation of      * the Entityhub      */
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activating Entityhub ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to activate if parsed ComponentContext is NULL"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|//First check the entityhub ID and
name|log
operator|.
name|info
argument_list|(
literal|" ... init Basic Properties"
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getID
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getID
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|EntityhubConfiguration
operator|.
name|ID
argument_list|,
literal|"The Entityhub Configuration does not define a ID for the Entityhub"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   + id: "
operator|+
name|config
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|EntityhubConfiguration
operator|.
name|NAME
argument_list|,
literal|"The Entityhub Configuration does not define a name for the Entityhub"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   + id: "
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   + id: "
operator|+
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|EntityhubConfiguration
operator|.
name|PREFIX
argument_list|,
literal|"The Entityhub Configuration does not define a Prefix for the Entityhub"
argument_list|)
throw|;
block|}
try|try
block|{
operator|new
name|URI
argument_list|(
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"   + prefix: "
operator|+
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|EntityhubConfiguration
operator|.
name|PREFIX
argument_list|,
literal|"The Prefix configured for the Entityhub is not an valied URI (prefix="
operator|+
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|//next get the reference to the configured EntityhubYard
name|log
operator|.
name|info
argument_list|(
literal|" ... init EntityhubYard"
argument_list|)
expr_stmt|;
if|if
condition|(
name|yardManager
operator|.
name|isYard
argument_list|(
name|config
operator|.
name|getEntityhubYardId
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|entityhubYard
operator|=
name|yardManager
operator|.
name|getYard
argument_list|(
name|config
operator|.
name|getEntityhubYardId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|entityhubYardFilterString
init|=
literal|'('
operator|+
name|Yard
operator|.
name|ID
operator|+
literal|'='
operator|+
name|config
operator|.
name|getEntityhubYardId
argument_list|()
operator|+
literal|')'
decl_stmt|;
try|try
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addServiceListener
argument_list|(
name|this
argument_list|,
name|entityhubYardFilterString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to set Filter %s to ServiceListener for EntityhubYard! -> add ServiceListener without Filter"
argument_list|,
name|entityhubYardFilterString
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|EntityhubConfiguration
operator|.
name|ENTITYHUB_YARD_ID
argument_list|,
literal|"Unable to get Yard for parsed value "
operator|+
name|config
operator|.
name|getEntityhubYardId
argument_list|()
argument_list|)
throw|;
block|}
comment|//at last get the FieldMappingConfig and create the FieldMappings instance
comment|// -> we need to do that after the init of the Entityhub-yard, because than we
comment|//    can use the valueFactory of the configured Yard to create instances
comment|//    of converted values!
name|log
operator|.
name|info
argument_list|(
literal|" ... init FieldMappings"
argument_list|)
expr_stmt|;
name|fieldMapper
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getInstance
argument_list|(
name|entityhubYard
operator|.
name|getValueFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mappingString
range|:
name|config
operator|.
name|getFieldMappingConfig
argument_list|()
control|)
block|{
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|mappingString
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   + mapping: "
operator|+
name|mapping
argument_list|)
expr_stmt|;
name|fieldMapper
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * TODO: currently only for debugging. Intended to be used for tracking      * the state of dependencies      */
annotation|@
name|Override
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Print Service Event for "
operator|+
name|event
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|event
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getPropertyKeys
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"> "
operator|+
name|key
operator|+
literal|"="
operator|+
name|event
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"!!deactivate"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|entityhubYard
operator|!=
literal|null
condition|)
block|{
comment|//unregister the serviceListener
name|this
operator|.
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldMapper
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|entityhubYard
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|context
operator|=
literal|null
expr_stmt|;
block|}
comment|//    @Override
comment|//    public EntityhubConfiguration getEntityhubConfiguration() {
comment|//        return config;
comment|//    }
annotation|@
name|Override
specifier|public
name|Yard
name|getYard
parameter_list|()
block|{
return|return
name|entityhubYard
return|;
block|}
annotation|@
name|Override
specifier|public
name|Symbol
name|lookupSymbol
parameter_list|(
name|String
name|entity
parameter_list|)
throws|throws
name|YardException
block|{
return|return
name|lookupSymbol
argument_list|(
name|entity
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Symbol
name|lookupSymbol
parameter_list|(
name|String
name|entity
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|YardException
block|{
name|Symbol
name|symbol
init|=
name|getSymbol
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbol
operator|!=
literal|null
condition|)
block|{
return|return
name|symbol
return|;
block|}
else|else
block|{
comment|//parsed reference was not a symbol. search for an mapped Entity
name|EntityMapping
name|entityMapping
init|=
name|getMappingByEntity
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityMapping
operator|!=
literal|null
condition|)
block|{
name|symbol
operator|=
name|getSymbol
argument_list|(
name|entityMapping
operator|.
name|getSymbolId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|symbol
operator|!=
literal|null
condition|)
block|{
return|return
name|symbol
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to find Symbol for Entity Mapping "
operator|+
name|entityMapping
operator|+
literal|"!"
argument_list|)
expr_stmt|;
return|return
name|recoverSymbol
argument_list|(
name|entityMapping
operator|.
name|getSymbolId
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|create
condition|)
block|{
comment|//search if the parsed reference is known by any referenced site
comment|// and if YES, create a new Symbol
name|Sign
name|sign
init|=
name|siteManager
operator|.
name|getSign
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|sign
operator|==
literal|null
condition|)
block|{
comment|//id not found by any referred site
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|createSymbol
argument_list|(
name|sign
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Symbol
name|createSymbol
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|Symbol
name|symbol
init|=
name|getSymbol
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbol
operator|==
literal|null
condition|)
block|{
name|EntityMapping
name|entityMapping
init|=
name|getMappingByEntity
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityMapping
operator|==
literal|null
condition|)
block|{
name|Sign
name|sign
init|=
name|siteManager
operator|.
name|getSign
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|sign
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|createSymbol
argument_list|(
name|sign
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"There exists already an EntityMappting for the parsed reference (mapping="
operator|+
name|entityMapping
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed reference is an Symbol (symbol="
operator|+
name|symbol
operator|+
literal|")!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Recovers an symbol based on the available {@link EntityMapping}s      * @param symbolId the id of the Symbol      * @return the Symbol or<code>null</code> if the recovering is unsucessfull.      */
specifier|private
name|Symbol
name|recoverSymbol
parameter_list|(
name|String
name|symbolId
parameter_list|)
block|{
comment|/*          * TODO: recover the Symbol by recreating it based on the available          *       mapped Entities          * 1) search for all EntityMappings with this SymbolId          * 2) get all mapped Entities          * 3) apply the FieldMappings          * 4) store the Symbol          * 5) return the recovered Symbol          */
return|return
literal|null
return|;
block|}
comment|/*      * @throws IllegalArgumentException if a {@link Representation} for the parsed ID is present in the      *  {@link #entityhubYard}, but the representation can not be wrapped by an {@link Symbol}.      */
annotation|@
name|Override
specifier|public
name|Symbol
name|getSymbol
parameter_list|(
name|String
name|symbolId
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalStateException
throws|,
name|YardException
block|{
if|if
condition|(
name|symbolId
operator|==
literal|null
operator|||
name|symbolId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed symbolID MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|Representation
name|rep
init|=
name|entityhubYard
operator|.
name|getRepresentation
argument_list|(
name|symbolId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|DefaultSymbolImpl
argument_list|(
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
argument_list|,
name|rep
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to create Symbol based on the representation as stored in the Entityhub"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|ModelUtils
operator|.
name|getRepresentationInfo
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
comment|//re-throw for now
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|Symbol
name|createSymbol
parameter_list|(
name|Sign
name|sign
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|sign
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ReferencedSite
name|signSite
init|=
name|siteManager
operator|.
name|getReferencedSite
argument_list|(
name|sign
operator|.
name|getSignSite
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|signSite
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create Symbol because the ReferencedSite "
operator|+
name|sign
operator|.
name|getSignSite
argument_list|()
operator|+
literal|" for sign "
operator|+
name|sign
operator|.
name|getId
argument_list|()
operator|+
literal|" is currently not active -> return null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Representation
name|symbolRep
init|=
name|entityhubYard
operator|.
name|create
argument_list|(
name|constructResourceId
argument_list|(
name|DEFAULT_SYMBOL_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
comment|//and set the initial state
name|symbolRep
operator|.
name|addReference
argument_list|(
name|Symbol
operator|.
name|STATE
argument_list|,
name|config
operator|.
name|getDefaultSymbolState
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
comment|//create a FieldMapper containing the Entityhub Mappings and the Site specific mappings
comment|//TODO: one could cache such instances
name|FieldMapper
name|siteMapper
init|=
name|signSite
operator|.
name|getFieldMapper
argument_list|()
decl_stmt|;
name|FieldMapper
name|mapper
init|=
name|this
operator|.
name|fieldMapper
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldMapping
name|siteMapping
range|:
name|siteMapper
operator|.
name|getMappings
argument_list|()
control|)
block|{
name|mapper
operator|.
name|addMapping
argument_list|(
name|siteMapping
argument_list|)
expr_stmt|;
block|}
name|Representation
name|signRep
init|=
name|sign
operator|.
name|getRepresentation
argument_list|()
decl_stmt|;
comment|//TODO: As soon as MappingActivities are implemented we need to add such
comment|//      information to the EntityMapping instance!
name|mapper
operator|.
name|applyMappings
argument_list|(
name|signRep
argument_list|,
name|symbolRep
argument_list|)
expr_stmt|;
comment|//Second create the symbol and init the data
name|Symbol
name|symbol
decl_stmt|;
try|try
block|{
name|symbol
operator|=
operator|new
name|DefaultSymbolImpl
argument_list|(
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
argument_list|,
name|symbolRep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//unable to create Symbol based on available Information
comment|// -> clean up and return null;
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create Symbol for Representation "
operator|+
name|symbolRep
operator|.
name|getId
argument_list|()
operator|+
literal|", because of missing required fields! -> return null (see more Infos after Stack Trace)"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|ModelUtils
operator|.
name|getRepresentationInfo
argument_list|(
name|symbolRep
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|//try to remove the created representation in the store
name|entityhubYard
operator|.
name|remove
argument_list|(
name|symbolRep
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YardException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to remove Representation "
operator|+
name|symbolRep
operator|.
name|getId
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|//Third create and init the mapped Entity
name|EntityMapping
name|entityMapping
init|=
operator|new
name|DefaultEntityMappingImpl
argument_list|(
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
argument_list|,
name|symbolRep
operator|.
name|getId
argument_list|()
argument_list|,
name|signRep
operator|.
name|getId
argument_list|()
argument_list|,
name|config
operator|.
name|getDefaultMappingState
argument_list|()
argument_list|,
name|entityhubYard
operator|.
name|create
argument_list|(
name|constructResourceId
argument_list|(
name|DEFAULT_MAPPING_PREFIX
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//Store the symbol and the mappedEntity in the entityhubYard
name|entityhubYard
operator|.
name|store
argument_list|(
name|symbol
operator|.
name|getRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|entityhubYard
operator|.
name|store
argument_list|(
name|entityMapping
operator|.
name|getRepresentation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|symbol
return|;
comment|//we need to set the label and the description!
block|}
comment|/**      * Uses the Prefix as configured by the {@link #config} and the parsed      * prefix for the type to create an unique ID for a resource.      * @param typePrefix the prefix of the type      * @return An id in the form<code> {@link EntityhubConfiguration#getEntityhubPrefix()}      *  + typePrefix + '.' + {@link ModelUtils#randomUUID()}</code>. Note that between      *  the entity hub prefix and the type prefix a separation chars are added      *  if it is not already defined by the {@link EntityhubConfiguration#getEntityhubPrefix()}      *  value.      */
specifier|private
name|String
name|constructResourceId
parameter_list|(
name|String
name|typePrefix
parameter_list|)
block|{
name|StringBuilder
name|id
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefix
operator|=
name|Entityhub
operator|.
name|DEFAUTL_ENTITYHUB_PREFIX
expr_stmt|;
block|}
name|id
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|prefix
operator|.
name|charAt
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'#'
case|:
case|case
literal|':'
case|:
break|break;
default|default:
comment|//add a separator
if|if
condition|(
name|prefix
operator|.
name|startsWith
argument_list|(
literal|"urn:"
argument_list|)
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
comment|//use a point for now
block|}
else|else
block|{
name|id
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
comment|//use '/' instead of '#' because one needs not to escape it in GET requests
block|}
block|}
if|if
condition|(
name|typePrefix
operator|!=
literal|null
operator|&&
operator|!
name|typePrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
name|typePrefix
argument_list|)
expr_stmt|;
name|id
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|id
operator|.
name|append
argument_list|(
name|ModelUtils
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityMapping
name|getMappingByEntity
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as Reference -> call to getMappingByEntity ignored (return null)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FieldQuery
name|fieldQuery
init|=
name|getQueryFavtory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|RdfResourceEnum
operator|.
name|mappedEntity
operator|.
name|getUri
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|resultList
init|=
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|fieldQuery
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resultList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|resultIterator
init|=
name|resultList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|EntityMapping
name|entityMapping
init|=
name|getEntityMappingFromYard
argument_list|(
name|resultIterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Multiple Mappings found for Entity "
operator|+
name|reference
operator|+
literal|"!"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"> "
operator|+
name|entityMapping
operator|.
name|getId
argument_list|()
operator|+
literal|" -> returned instance"
argument_list|)
expr_stmt|;
while|while
condition|(
name|resultIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"> "
operator|+
name|resultIterator
operator|.
name|next
argument_list|()
operator|+
literal|" -> ignored"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entityMapping
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No Mapping found for Entity "
operator|+
name|reference
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|EntityMapping
argument_list|>
name|getMappingsBySymbol
parameter_list|(
name|String
name|symbol
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|symbol
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as Reference -> call to getMappingsBySymbol ignored (return null)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FieldQuery
name|fieldQuery
init|=
name|getQueryFavtory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|RdfResourceEnum
operator|.
name|mappedSymbol
operator|.
name|getUri
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|symbol
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|resultList
init|=
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|fieldQuery
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|EntityMapping
argument_list|>
name|mappings
init|=
operator|new
name|HashSet
argument_list|<
name|EntityMapping
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mappingId
range|:
name|resultList
control|)
block|{
name|EntityMapping
name|entityMapping
init|=
name|getEntityMappingFromYard
argument_list|(
name|mappingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityMapping
operator|!=
literal|null
condition|)
block|{
name|mappings
operator|.
name|add
argument_list|(
name|entityMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unable to getEntityMapping for "
operator|+
name|mappingId
operator|+
literal|" (id was returned as result for a query for EntityMappings -> so that should only happen if the Mapping was deleted in the meantime)"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mappings
return|;
block|}
comment|/**      * Getter for the EntityMapping by ID      * @param id the ID      * @return the EntityMapping or<code>null</code> if no Sign is present       * within the EntityhubYard for the parsed ID      * @throws IllegalArgumentException if the Sign referenced by the parsed ID       * is not an valid {@link EntityMapping}.      */
specifier|protected
name|EntityMapping
name|getEntityMappingFromYard
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|Representation
name|rep
init|=
name|entityhubYard
operator|.
name|getRepresentation
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|DefaultEntityMappingImpl
argument_list|(
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
argument_list|,
name|rep
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EntityMapping
name|getMappingById
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|EntityhubException
block|{
return|return
name|getEntityMappingFromYard
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldQueryFactory
name|getQueryFavtory
parameter_list|()
block|{
return|return
name|entityhubYard
operator|.
name|getQueryFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldMapper
name|getFieldMappings
parameter_list|()
block|{
return|return
name|fieldMapper
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
block|{
return|return
name|entityhubYard
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findSymbolReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
block|{
return|return
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResultList
argument_list|<
name|Symbol
argument_list|>
name|findSymbols
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
block|{
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|references
init|=
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Symbol
argument_list|>
name|symbols
init|=
operator|new
name|ArrayList
argument_list|<
name|Symbol
argument_list|>
argument_list|(
name|references
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|reference
range|:
name|references
control|)
block|{
name|Symbol
name|symbol
init|=
name|lookupSymbol
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbol
operator|!=
literal|null
condition|)
block|{
name|symbols
operator|.
name|add
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create Symbol for Reference "
operator|+
name|reference
operator|+
literal|" in the Yard usd by the entity hub [id="
operator|+
name|entityhubYard
operator|.
name|getId
argument_list|()
operator|+
literal|"] -> ignore reference"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Symbol
argument_list|>
argument_list|(
name|references
operator|.
name|getQuery
argument_list|()
argument_list|,
name|symbols
argument_list|,
name|Symbol
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

