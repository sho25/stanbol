begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|DefaultFieldMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|FieldMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|mapping
operator|.
name|ValueConverterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|model
operator|.
name|EntityImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|DefaultQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|query
operator|.
name|QueryResultListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|Entityhub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|EntityhubException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|FieldMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ManagedEntityState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|MappingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|FieldQueryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|query
operator|.
name|ReferenceConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|Site
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|util
operator|.
name|ModelUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|Yard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|yard
operator|.
name|YardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of the Entityhub.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EntityhubImpl
implements|implements
name|Entityhub
block|{
comment|//, ServiceListener {
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityhubImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The field mapper holding global mappings that are used for mapping      * representations of entities for any referenced sites      */
specifier|private
specifier|final
name|FieldMapper
name|fieldMapper
decl_stmt|;
comment|/**      * The Configuration of the Entityhub      */
specifier|private
specifier|final
name|EntityhubConfiguration
name|config
decl_stmt|;
comment|/**      * The site manager is used to search for entities within the Entityhub framework      */
specifier|private
specifier|final
name|SiteManager
name|siteManager
decl_stmt|;
specifier|private
specifier|final
name|Yard
name|entityhubYard
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MANAGED_ENTITY_PREFIX
init|=
literal|"entity"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MAPPING_PREFIX
init|=
literal|"mapping"
decl_stmt|;
specifier|public
name|EntityhubImpl
parameter_list|(
name|Yard
name|entityhubYard
parameter_list|,
name|SiteManager
name|siteManager
parameter_list|,
name|EntityhubConfiguration
name|config
parameter_list|,
name|NamespacePrefixService
name|nsPrefixService
parameter_list|)
block|{
if|if
condition|(
name|entityhubYard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Yard MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|entityhubYard
operator|=
name|entityhubYard
expr_stmt|;
if|if
condition|(
name|siteManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed SiteManager MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|siteManager
operator|=
name|siteManager
expr_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed EntityhubConfig MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... init FieldMappings"
argument_list|)
expr_stmt|;
name|fieldMapper
operator|=
operator|new
name|DefaultFieldMapperImpl
argument_list|(
name|ValueConverterFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mappingString
range|:
name|config
operator|.
name|getFieldMappingConfig
argument_list|()
control|)
block|{
name|FieldMapping
name|mapping
init|=
name|FieldMappingUtils
operator|.
name|parseFieldMapping
argument_list|(
name|mappingString
argument_list|,
name|nsPrefixService
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"   + mapping: "
operator|+
name|mapping
argument_list|)
expr_stmt|;
name|fieldMapper
operator|.
name|addMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|EntityhubConfiguration
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
annotation|@
name|Override
specifier|public
name|Yard
name|getYard
parameter_list|()
block|{
return|return
name|entityhubYard
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entity
name|lookupLocalEntity
parameter_list|(
name|String
name|entity
parameter_list|)
throws|throws
name|YardException
block|{
return|return
name|lookupLocalEntity
argument_list|(
name|entity
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entity
name|lookupLocalEntity
parameter_list|(
name|String
name|entityId
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|YardException
block|{
name|Entity
name|entity
init|=
name|getEntity
argument_list|(
name|entityId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
return|return
name|entity
return|;
block|}
else|else
block|{
comment|//parsed reference was not a locally managed entity ->
comment|//search for an mapped Entity
name|Entity
name|entityMapping
init|=
name|getMappingBySource
argument_list|(
name|entityId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityMapping
operator|!=
literal|null
condition|)
block|{
name|entity
operator|=
name|getEntity
argument_list|(
name|EntityMapping
operator|.
name|getTargetId
argument_list|(
name|entityMapping
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
return|return
name|entity
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to find Entity for Entity Mapping "
operator|+
name|entityMapping
operator|+
literal|"!"
argument_list|)
expr_stmt|;
return|return
name|recoverEntity
argument_list|(
name|EntityMapping
operator|.
name|getTargetId
argument_list|(
name|entityMapping
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|create
condition|)
block|{
comment|//search if the parsed reference is known by any referenced site
comment|// and if YES, create a new Symbol
name|Entity
name|remoteEntity
init|=
name|siteManager
operator|.
name|getEntity
argument_list|(
name|entityId
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteEntity
operator|==
literal|null
condition|)
block|{
comment|//id not found by any referred site
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|importEntity
argument_list|(
name|remoteEntity
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Entity
name|importEntity
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IllegalArgumentException
throws|,
name|YardException
block|{
name|Entity
name|entity
init|=
name|getEntity
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|Entity
name|entityMapping
init|=
name|getMappingBySource
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityMapping
operator|==
literal|null
condition|)
block|{
name|Entity
name|remoteEntity
init|=
name|siteManager
operator|.
name|getEntity
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteEntity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|importEntity
argument_list|(
name|remoteEntity
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The reference %s is already imported to the Entityhub "
operator|+
literal|"(local Entity %s)"
argument_list|,
name|reference
argument_list|,
name|EntityMapping
operator|.
name|getTargetId
argument_list|(
name|entityMapping
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed id "
operator|+
name|reference
operator|+
literal|" refers "
operator|+
literal|"to an Entity managed by the Entityhub (entity="
operator|+
name|entity
operator|+
literal|")!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Recovers a missing locally managed entity based on the available       * {@link EntityMapping}s and the data available through referenced sites.      * @param entityId the id of the missing locally managed entity      * @return the recovered Entity or<code>null</code> if the recovering is       * not possible      */
specifier|private
name|Entity
name|recoverEntity
parameter_list|(
name|String
name|entityId
parameter_list|)
block|{
comment|/*          * TODO: recover the Symbol by recreating it based on the available          *       mapped Entities          * 1) search for all EntityMappings with this SymbolId          * 2) get all mapped Entities          * 3) apply the FieldMappings          * 4) store the Symbol          * 5) return the recovered Symbol          */
return|return
literal|null
return|;
block|}
comment|/*      * @throws IllegalArgumentException if a {@link Representation} for the parsed ID is present in the      *  {@link #entityhubYard}, but the representation can not be wrapped by an {@link Symbol}.      */
annotation|@
name|Override
specifier|public
specifier|final
name|Entity
name|getEntity
parameter_list|(
name|String
name|entityId
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalStateException
throws|,
name|YardException
block|{
if|if
condition|(
name|entityId
operator|==
literal|null
operator|||
name|entityId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|Entity
name|entity
init|=
name|loadEntity
argument_list|(
name|entityId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|ManagedEntity
operator|.
name|canWrap
argument_list|(
name|entity
argument_list|)
condition|)
block|{
return|return
name|entity
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"The parsed id does not represent a locally managed Entity {}"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isRepresentation
parameter_list|(
name|String
name|entityId
parameter_list|)
throws|throws
name|EntityhubException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|entityId
operator|==
literal|null
operator|||
name|entityId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
return|return
name|entityhubYard
operator|.
name|isRepresentation
argument_list|(
name|entityId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Entity
name|store
parameter_list|(
name|Representation
name|representation
parameter_list|)
throws|throws
name|EntityhubException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|representation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed Representation MUST NOT be NULL!"
argument_list|)
throw|;
block|}
comment|//parse only the id of the representation, because we need the current
comment|//stored version of the entity!
name|Entity
name|entity
init|=
name|loadEntity
argument_list|(
name|representation
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|//now we need to check if the parsed representation is the data or the
comment|//metadata of the Entity
name|ManagedEntity
name|updated
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
operator|||
name|representation
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|//update the data or create a new entity
name|updated
operator|=
name|ManagedEntity
operator|.
name|init
argument_list|(
operator|new
name|EntityImpl
argument_list|(
name|config
operator|.
name|getID
argument_list|()
argument_list|,
name|representation
argument_list|,
name|entity
operator|!=
literal|null
condition|?
name|entity
operator|.
name|getMetadata
argument_list|()
else|:
literal|null
argument_list|)
argument_list|,
name|config
operator|.
name|getDefaultManagedEntityState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
comment|//add creation date
name|updated
operator|.
name|setCreated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//update the metadata
name|entity
operator|=
operator|new
name|EntityImpl
argument_list|(
name|config
operator|.
name|getID
argument_list|()
argument_list|,
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|,
name|representation
argument_list|)
expr_stmt|;
comment|//we need to validate the metadata
name|updated
operator|=
name|ManagedEntity
operator|.
name|init
argument_list|(
name|entity
argument_list|,
name|config
operator|.
name|getDefaultManagedEntityState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|storeEntity
argument_list|(
name|updated
operator|.
name|getWrappedEntity
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updated
operator|.
name|getWrappedEntity
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Entity
name|delete
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|EntityhubException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL nor emtpty!"
argument_list|)
throw|;
block|}
name|Entity
name|entity
init|=
name|loadEntity
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"delete Entity {} as requested by the parsed id {}"
argument_list|,
name|entity
operator|.
name|getId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|//we need to remove all mappings for this Entity
name|deleteMappingsbyTarget
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unable to delete Entity for id {}, because no Entity for this id is"
operator|+
literal|"managed by the Entityhub"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|entity
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|deleteAll
parameter_list|()
throws|throws
name|EntityhubException
block|{
name|entityhubYard
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Entity
name|setState
parameter_list|(
name|String
name|id
parameter_list|,
name|ManagedEntityState
name|state
parameter_list|)
throws|throws
name|EntityhubException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed id MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed state for the Entity MUST NOT ne NULL"
argument_list|)
throw|;
block|}
name|Entity
name|entity
init|=
name|loadEntity
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|ManagedEntity
name|managed
init|=
operator|new
name|ManagedEntity
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|managed
operator|.
name|getState
argument_list|()
operator|!=
name|state
condition|)
block|{
name|managed
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|storeEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entity
return|;
block|}
comment|/**      * Deleted both the representation and the metadata of an Entity      * @param yard the yard to delete the entity from      * @param entity the entity to delete      * @throws YardException an any Exception while deleting the Entity      */
specifier|private
name|void
name|deleteEntity
parameter_list|(
name|Entity
name|entity
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|entityhubYard
operator|.
name|remove
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entity
operator|.
name|getRepresentation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteEntities
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
throws|throws
name|YardException
block|{
name|FieldQuery
name|fieldQuery
init|=
name|getQueryFactory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|toDelete
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|ids
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|RdfResourceEnum
operator|.
name|aboutRepresentation
operator|.
name|getUri
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|fieldQuery
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toDelete
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|toDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|entityhubYard
operator|.
name|remove
argument_list|(
name|toDelete
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteMappingsbyTarget
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FieldQuery
name|fieldQuery
init|=
name|getQueryFactory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|RdfResourceEnum
operator|.
name|mappingTarget
operator|.
name|getUri
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|deleteEntities
argument_list|(
name|ModelUtils
operator|.
name|asCollection
argument_list|(
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|fieldQuery
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Imports the Entity      * @param remoteEntity the Entity to import      * @return the Entity created and stored within the Entityhub      * @throws YardException      */
specifier|protected
name|Entity
name|importEntity
parameter_list|(
name|Entity
name|remoteEntity
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|remoteEntity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Site
name|site
init|=
name|siteManager
operator|.
name|getSite
argument_list|(
name|remoteEntity
operator|.
name|getSite
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to import Entity {} because the ReferencedSite {} is currently not active -> return null"
argument_list|,
name|remoteEntity
operator|.
name|getId
argument_list|()
argument_list|,
name|remoteEntity
operator|.
name|getSite
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ValueFactory
name|valueFactory
init|=
name|entityhubYard
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
comment|//Create the locally managed Entity
name|Representation
name|localRep
init|=
name|entityhubYard
operator|.
name|create
argument_list|(
name|constructResourceId
argument_list|(
name|DEFAULT_MANAGED_ENTITY_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
name|Entity
name|localEntity
init|=
name|loadEntity
argument_list|(
name|localRep
argument_list|)
decl_stmt|;
name|importEntity
argument_list|(
name|remoteEntity
argument_list|,
name|site
argument_list|,
name|localEntity
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
comment|//Second create and init the Mapping
name|Representation
name|entityMappingRepresentation
init|=
name|entityhubYard
operator|.
name|create
argument_list|(
name|constructResourceId
argument_list|(
name|DEFAULT_MAPPING_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
name|Entity
name|entityMappingEntity
init|=
name|loadEntity
argument_list|(
name|entityMappingRepresentation
argument_list|)
decl_stmt|;
name|establishMapping
argument_list|(
name|localEntity
argument_list|,
name|remoteEntity
argument_list|,
name|site
argument_list|,
name|entityMappingEntity
argument_list|)
expr_stmt|;
comment|//Store the entity and the mappedEntity in the entityhubYard
name|storeEntity
argument_list|(
name|localEntity
argument_list|)
expr_stmt|;
name|storeEntity
argument_list|(
name|entityMappingEntity
argument_list|)
expr_stmt|;
return|return
name|localEntity
return|;
block|}
comment|/**      * Imports a {@link Entity} from a {@link Site}. This Method imports      * the {@link Representation} by applying all configured mappings. It also      * sets the {@link ManagedEntityState} to the configured default value by the       * referenced site of the imported entity or the default for the Entityhub       * if the site does not define this configuration.<p>      * @param remoteEntity The entity to import      * @param site the referenced site of the entity to import      * @param localEntity the target entity for the import      * @param valueFactory the valusFactory used to create instance while importing      */
specifier|private
name|void
name|importEntity
parameter_list|(
name|Entity
name|remoteEntity
parameter_list|,
name|Site
name|site
parameter_list|,
name|Entity
name|localEntity
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
name|SiteConfiguration
name|siteConfig
init|=
name|site
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ManagedEntityState
name|state
decl_stmt|;
name|state
operator|=
name|siteConfig
operator|.
name|getDefaultManagedEntityState
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|config
operator|.
name|getDefaultManagedEntityState
argument_list|()
expr_stmt|;
block|}
comment|//this wrapper allows to use an API to write metadata
name|ManagedEntity
name|managedEntity
init|=
name|ManagedEntity
operator|.
name|init
argument_list|(
name|localEntity
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|FieldMapper
name|siteMapper
init|=
name|site
operator|.
name|getFieldMapper
argument_list|()
decl_stmt|;
name|FieldMapper
name|mapper
init|=
name|this
operator|.
name|fieldMapper
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldMapping
name|siteMapping
range|:
name|siteMapper
operator|.
name|getMappings
argument_list|()
control|)
block|{
name|mapper
operator|.
name|addMapping
argument_list|(
name|siteMapping
argument_list|)
expr_stmt|;
block|}
comment|//TODO: As soon as MappingActivities are implemented we need to add such
comment|//      information to the EntityMapping instance!
name|mapper
operator|.
name|applyMappings
argument_list|(
name|remoteEntity
operator|.
name|getRepresentation
argument_list|()
argument_list|,
name|localEntity
operator|.
name|getRepresentation
argument_list|()
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
comment|//set general metadata
name|managedEntity
operator|.
name|setCreated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
comment|//set the metadata required by the referenced site
name|managedEntity
operator|.
name|addAttributionLink
argument_list|(
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAttributionUrl
argument_list|()
argument_list|)
expr_stmt|;
name|managedEntity
operator|.
name|addAttributionText
argument_list|(
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAttribution
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//TODO: maybe replace with the URL of the site
name|managedEntity
operator|.
name|addContributorName
argument_list|(
name|site
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@link EntityMapping} for the parsed source and target       * {@link Entity}. This also sets the State and the expire date based on the       * configurations of the ReferencesSite of the source entity and the defaults of the       * Entityhub       * @param localEntity the locally managed entity (target for the mapping)      * @param remoteEntity the remote Entity (source for the mapping)      * @param site the referenced site managing the source Entity      * @param entityMappingRepresentation the Entity for the mapping      * @return the EntityMapping      */
specifier|private
name|EntityMapping
name|establishMapping
parameter_list|(
name|Entity
name|localEntity
parameter_list|,
name|Entity
name|remoteEntity
parameter_list|,
name|Site
name|site
parameter_list|,
name|Entity
name|entityMappingEntity
parameter_list|)
block|{
name|EntityMapping
name|entityMapping
init|=
name|EntityMapping
operator|.
name|init
argument_list|(
name|entityMappingEntity
argument_list|)
decl_stmt|;
comment|//now init the mappingState and the expireDate based on the config of the
comment|//ReferencedSite of the source entity (considering also the defaults of the entityhub)
name|SiteConfiguration
name|siteConfig
init|=
name|site
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|MappingState
name|mappingState
init|=
name|siteConfig
operator|.
name|getDefaultMappedEntityState
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappingState
operator|==
literal|null
condition|)
block|{
name|mappingState
operator|=
name|config
operator|.
name|getDefaultMappingState
argument_list|()
expr_stmt|;
block|}
name|entityMapping
operator|.
name|setState
argument_list|(
name|mappingState
argument_list|)
expr_stmt|;
name|long
name|expireDuration
init|=
name|siteConfig
operator|.
name|getDefaultExpireDuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|expireDuration
operator|>
literal|0
condition|)
block|{
name|Date
name|expireDate
init|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|expireDuration
argument_list|)
decl_stmt|;
name|entityMapping
operator|.
name|setExpires
argument_list|(
name|expireDate
argument_list|)
expr_stmt|;
block|}
name|entityMapping
operator|.
name|setSourceId
argument_list|(
name|remoteEntity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|entityMapping
operator|.
name|setTargetId
argument_list|(
name|localEntity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//initialise additional metadata
name|entityMapping
operator|.
name|setCreated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entityMapping
return|;
block|}
comment|/**      * Uses the Prefix as configured by the {@link #config} and the parsed      * prefix for the type to create an unique ID for a resource.      * @param typePrefix the prefix of the type      * @return An id in the form<code> {@link EntityhubConfiguration#getEntityhubPrefix()}      *  + typePrefix + '.' + {@link ModelUtils#randomUUID()}</code>. Note that between      *  the entity hub prefix and the type prefix a separation chars are added      *  if it is not already defined by the {@link EntityhubConfiguration#getEntityhubPrefix()}      *  value.      */
specifier|private
name|String
name|constructResourceId
parameter_list|(
name|String
name|typePrefix
parameter_list|)
block|{
name|StringBuilder
name|id
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|config
operator|.
name|getEntityhubPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefix
operator|=
name|Entityhub
operator|.
name|DEFAUTL_ENTITYHUB_PREFIX
expr_stmt|;
block|}
name|id
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|prefix
operator|.
name|charAt
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'#'
case|:
case|case
literal|':'
case|:
break|break;
default|default:
comment|//add a separator
if|if
condition|(
name|prefix
operator|.
name|startsWith
argument_list|(
literal|"urn:"
argument_list|)
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
comment|//use a point for now
block|}
else|else
block|{
name|id
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
comment|//use '/' instead of '#' because one needs not to escape it in GET requests
block|}
block|}
if|if
condition|(
name|typePrefix
operator|!=
literal|null
operator|&&
operator|!
name|typePrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
name|typePrefix
argument_list|)
expr_stmt|;
name|id
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|id
operator|.
name|append
argument_list|(
name|ModelUtils
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entity
name|getMappingBySource
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as Reference -> call to getMappingByEntity ignored (return null)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FieldQuery
name|fieldQuery
init|=
name|getQueryFactory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|RdfResourceEnum
operator|.
name|mappingSource
operator|.
name|getUri
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|resultList
init|=
name|entityhubYard
operator|.
name|findRepresentation
argument_list|(
name|fieldQuery
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resultList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Representation
argument_list|>
name|resultIterator
init|=
name|resultList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Entity
name|mapping
init|=
name|loadEntity
argument_list|(
name|resultIterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
comment|//print warnings in case of multiple mappings
if|if
condition|(
name|resultIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Multiple Mappings found for Entity {}!"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"> {} -> returned instance"
argument_list|,
name|mapping
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|resultIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"> {} -> ignored"
argument_list|,
name|resultIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|EntityMapping
operator|.
name|isValid
argument_list|(
name|mapping
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Entity {} is not a valid EntityMapping. -> return null"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|mapping
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No Mapping found for Entity {}"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Entity
argument_list|>
name|getMappingsByTarget
parameter_list|(
name|String
name|targetId
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|targetId
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NULL parsed as Reference -> call to getMappingsBySymbol ignored (return null)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FieldQuery
name|fieldQuery
init|=
name|getQueryFactory
argument_list|()
operator|.
name|createFieldQuery
argument_list|()
decl_stmt|;
name|fieldQuery
operator|.
name|setConstraint
argument_list|(
name|RdfResourceEnum
operator|.
name|mappingTarget
operator|.
name|getUri
argument_list|()
argument_list|,
operator|new
name|ReferenceConstraint
argument_list|(
name|targetId
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|resultList
init|=
name|entityhubYard
operator|.
name|findRepresentation
argument_list|(
name|fieldQuery
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Entity
argument_list|>
name|mappings
init|=
operator|new
name|HashSet
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Representation
name|rep
range|:
name|resultList
control|)
block|{
name|mappings
operator|.
name|add
argument_list|(
name|loadEntity
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mappings
return|;
block|}
comment|/**      * Loads an Entity (Representation and Metadata) for the parsed id. In case      * the parsed id represents metadata, than the id of the returned Entity will      * be different from the parsed id.      * @param id the id of the data or the metadata of the Entity to load      * @return the Entity or<code>null</code> if not found      * @throws YardException On any error with the parsed Yard.      */
specifier|private
name|Entity
name|loadEntity
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|YardException
block|{
return|return
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|loadEntity
argument_list|(
name|entityhubYard
operator|.
name|getRepresentation
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Loads the Entity based on the parsed representation. The parsed      * {@link Representation} can be both the data and the metadata. In case the      * parsed representation are metadat the id of the returned Entity will be      * not the same as the id of the parsed {@link Representation}.      * @param rep the representation or metadata of an entity      * @return the created Entity including both data and metadata or       *<code>null</code> if the parsed Representation does not represent a       * Representation managed by the Entityhub (this may be the case if an other      * thread has deleted that Entity in the meantime)      * @throws YardException On any error with the parsed Yard.      */
specifier|private
name|Entity
name|loadEntity
parameter_list|(
name|Representation
name|rep
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
name|Representation
name|data
decl_stmt|;
name|Representation
name|metadata
init|=
literal|null
decl_stmt|;
name|String
name|entityId
init|=
name|ModelUtils
operator|.
name|getAboutRepresentation
argument_list|(
name|rep
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityId
operator|!=
literal|null
condition|)
block|{
name|data
operator|=
name|entityhubYard
operator|.
name|getRepresentation
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|rep
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|rep
expr_stmt|;
name|entityId
operator|=
name|rep
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|//needed for logs
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|=
name|lookupMetadata
argument_list|(
name|rep
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|EntityImpl
argument_list|(
name|config
operator|.
name|getID
argument_list|()
argument_list|,
name|data
argument_list|,
name|metadata
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable find representation for Entity {} (metadata: {}"
argument_list|,
name|entityId
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Lookups (or initialises) the metadata for the entity with the parsed id       * @param entityId The id of the entity      * @param init if the metadata should be initialised of not existing      * @return the metadata for that Entity or<code>null</code> if not existing      * and<code>init == false</code>      * @throws YardException      */
specifier|private
name|Representation
name|lookupMetadata
parameter_list|(
name|String
name|entityId
parameter_list|,
name|boolean
name|init
parameter_list|)
throws|throws
name|YardException
block|{
name|Representation
name|metadata
decl_stmt|;
comment|//TODO: check the asumption that the Metadata always use the
comment|//      extension ".meta"
name|String
name|metaID
init|=
name|entityId
operator|+
literal|".meta"
decl_stmt|;
name|metadata
operator|=
name|entityhubYard
operator|.
name|getRepresentation
argument_list|(
name|metaID
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
name|entityhubYard
operator|.
name|create
argument_list|(
name|metaID
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
comment|/**      * Stores both the Representation and the Metadata of the parsed Entity to the      * parsed yard.<p>      * This Method also updated the modification date of the Metadata.      * @param entity the stored entity      * @throws YardException      */
specifier|private
name|void
name|storeEntity
parameter_list|(
name|Entity
name|entity
parameter_list|)
throws|throws
name|YardException
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|entityhubYard
operator|.
name|store
argument_list|(
name|entity
operator|.
name|getRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|set
argument_list|(
name|NamespaceEnum
operator|.
name|dcTerms
operator|+
literal|"modified"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|entityhubYard
operator|.
name|store
argument_list|(
name|entity
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Entity
name|getMappingById
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|EntityhubException
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed id MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
name|Entity
name|mapping
init|=
name|loadEntity
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|mapping
operator|!=
literal|null
operator|&&
name|EntityMapping
operator|.
name|isValid
argument_list|(
name|mapping
argument_list|)
condition|)
block|{
return|return
name|mapping
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"The Entity {} for the parsed id does not represent an EntityMapping -> return null!"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|FieldQueryFactory
name|getQueryFactory
parameter_list|()
block|{
name|Yard
name|entityhubYard
init|=
name|getYard
argument_list|()
decl_stmt|;
return|return
name|entityhubYard
operator|==
literal|null
condition|?
comment|//if no yard available
name|DefaultQueryFactory
operator|.
name|getInstance
argument_list|()
else|:
comment|//use the default
name|entityhubYard
operator|.
name|getQueryFactory
argument_list|()
return|;
comment|//else return the query factory used by the yard
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|FieldMapper
name|getFieldMappings
parameter_list|()
block|{
return|return
name|fieldMapper
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|QueryResultList
argument_list|<
name|Representation
argument_list|>
name|find
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
block|{
return|return
name|entityhubYard
operator|.
name|find
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|findEntityReferences
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
block|{
return|return
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|QueryResultList
argument_list|<
name|Entity
argument_list|>
name|findEntities
parameter_list|(
name|FieldQuery
name|query
parameter_list|)
throws|throws
name|YardException
block|{
name|QueryResultList
argument_list|<
name|String
argument_list|>
name|references
init|=
name|entityhubYard
operator|.
name|findReferences
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Entity
argument_list|>
name|entities
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|references
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|reference
range|:
name|references
control|)
block|{
name|Entity
name|entity
init|=
name|lookupLocalEntity
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|entities
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create Entity for Reference {} in the Yard "
operator|+
literal|"usd by the entity hub [id={}] -> ignore reference"
argument_list|,
name|reference
argument_list|,
name|config
operator|.
name|getEntityhubYardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueryResultListImpl
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|references
operator|.
name|getQuery
argument_list|()
argument_list|,
name|entities
argument_list|,
name|Entity
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

