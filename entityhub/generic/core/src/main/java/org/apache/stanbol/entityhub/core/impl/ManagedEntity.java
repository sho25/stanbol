begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|core
operator|.
name|utils
operator|.
name|ToStringIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ManagedEntityState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|rdf
operator|.
name|RdfResourceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * wrapper over an Entity that allows API based read/write access  * to metadata typically needed by the Entityhub Implementation.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ManagedEntity
extends|extends
name|EntityWrapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ManagedEntity
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The default state for new symbols if not defined otherwise      */
specifier|public
specifier|static
specifier|final
name|ManagedEntityState
name|DEFAULT_SYMBOL_STATE
init|=
name|ManagedEntityState
operator|.
name|proposed
decl_stmt|;
comment|/**      * The property to be used for the symbol label      */
specifier|public
specifier|static
specifier|final
name|String
name|LABEL
init|=
name|RdfResourceEnum
operator|.
name|label
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The property to be used for the symbol description      */
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
name|RdfResourceEnum
operator|.
name|description
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The property to be used for the symbol state      */
specifier|public
specifier|static
specifier|final
name|String
name|STATE
init|=
name|RdfResourceEnum
operator|.
name|hasState
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The property used for linking to successors      */
specifier|public
specifier|static
specifier|final
name|String
name|SUCCESSOR
init|=
name|RdfResourceEnum
operator|.
name|successor
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|/**      * The property used for linking to predecessors      */
specifier|public
specifier|static
specifier|final
name|String
name|PREDECESSOR
init|=
name|RdfResourceEnum
operator|.
name|predecessor
operator|.
name|getUri
argument_list|()
decl_stmt|;
specifier|private
name|String
name|defaultLanguage
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ALT_LABEL_LANGUAGES
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"en"
block|}
decl_stmt|;
comment|/**      * Holds a reference to the {@link Entity#getMetadata()} of the      * wrapped entity      */
specifier|private
specifier|final
name|Representation
name|metadata
decl_stmt|;
comment|/**      * Creates a wrapper over an Entity that allows API based read/write access      * to metadata typically needed by the Entityhub Implementation.      * @param entity the wrapped entity      * @throws IllegalArgumentException if the parsed Entity is<code>null</code>      */
specifier|public
name|ManagedEntity
parameter_list|(
name|Entity
name|entity
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
argument_list|(
name|entity
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internally used to allow parsing<code>validate == false</code> in cases      * the validation is not necessary.       * @param entity      * @param validate      */
specifier|private
name|ManagedEntity
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|//        if(entity == null){
comment|//            throw new IllegalArgumentException("The parsed Entity MUST NOT be NULL");
comment|//        }
if|if
condition|(
name|validate
operator|&&
operator|!
name|canWrap
argument_list|(
name|entity
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to wrap Entity %s"
argument_list|,
name|entity
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|metadata
operator|=
name|wrappedEntity
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks if the parsed Entity can be wrapped as a locally managed entity.      * This checks currently of a {@link ManagedEntityState} is defined by the      * metadata.      * @param entity the entity to check      * @return the state      */
specifier|public
specifier|static
name|boolean
name|canWrap
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
comment|//check the metadata for
comment|//if the entity is managed locally
comment|//if the entity has an state
name|Reference
name|stateUri
init|=
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirstReference
argument_list|(
name|STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateUri
operator|==
literal|null
operator|||
operator|!
name|ManagedEntityState
operator|.
name|isState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//passed all tests
return|return
literal|true
return|;
block|}
comment|/**      * Sets the parsed default state to the metadata if no other one is already      * present and that wraps the entity as locally managed entity.      * @param entity the entity      * @param defaultState the default state used if no one is yet defined for      * this entity      * @return the wrapped entity      */
specifier|public
specifier|static
name|ManagedEntity
name|init
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|ManagedEntityState
name|defaultState
parameter_list|)
block|{
name|Reference
name|stateUri
init|=
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirstReference
argument_list|(
name|STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateUri
operator|==
literal|null
operator|||
operator|!
name|ManagedEntityState
operator|.
name|isState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getMetadata
argument_list|()
operator|.
name|setReference
argument_list|(
name|STATE
argument_list|,
name|defaultState
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ManagedEntity
argument_list|(
name|entity
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Adds a description in the default language to the Symbol      * @param description the description      */
specifier|public
specifier|final
name|void
name|addDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|metadata
operator|.
name|addNaturalText
argument_list|(
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|defaultLanguage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a description in the parsed language to the Symbol      * @param description the description      * @param lanugage the language.<code>null</code> indicates to use no language tag      */
specifier|public
specifier|final
name|void
name|addDescription
parameter_list|(
name|String
name|description
parameter_list|,
name|String
name|lanugage
parameter_list|)
block|{
name|metadata
operator|.
name|addNaturalText
argument_list|(
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|lanugage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the symbol with the parsed ID as a predecessor      * @param predecessor the id of the predecessors      */
specifier|public
specifier|final
name|void
name|addPredecessor
parameter_list|(
name|String
name|predecessor
parameter_list|)
block|{
name|metadata
operator|.
name|addReference
argument_list|(
name|PREDECESSOR
argument_list|,
name|predecessor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the symbol with the parsed ID as a successor      * @param successor the id of the successor      */
specifier|public
specifier|final
name|void
name|addSuccessor
parameter_list|(
name|String
name|successor
parameter_list|)
block|{
name|metadata
operator|.
name|addReference
argument_list|(
name|SUCCESSOR
argument_list|,
name|successor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the descriptions of this symbol in the default language.      * @return The descriptions or an empty collection.      */
specifier|public
specifier|final
name|Iterator
argument_list|<
name|Text
argument_list|>
name|getDescriptions
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|getText
argument_list|(
name|DESCRIPTION
argument_list|)
return|;
block|}
comment|/**      * Getter for the short description as defined for the parsed language.      * @param lang The language. Parse<code>null</code> for values without language tags      * @return The description or<code>null</code> if no description is defined      * for the parsed language.      */
specifier|public
specifier|final
name|Iterator
argument_list|<
name|Text
argument_list|>
name|getDescriptions
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|DESCRIPTION
argument_list|,
name|lang
argument_list|)
return|;
block|}
comment|/**      * The label of this Symbol in the default language      * @return the label      */
specifier|public
specifier|final
name|String
name|getLabel
parameter_list|()
block|{
name|String
name|label
init|=
name|getLabel
argument_list|(
name|defaultLanguage
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
comment|//no label for the default language
comment|//search labels in other languages
name|Text
name|altLabel
init|=
name|metadata
operator|.
name|getFirst
argument_list|(
name|LABEL
argument_list|,
name|ALT_LABEL_LANGUAGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|altLabel
operator|==
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Text
argument_list|>
name|labels
init|=
name|metadata
operator|.
name|getText
argument_list|(
name|LABEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|labels
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|altLabel
operator|=
name|labels
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|altLabel
operator|!=
literal|null
condition|?
name|altLabel
operator|.
name|getText
argument_list|()
else|:
literal|null
return|;
block|}
else|else
block|{
return|return
name|label
return|;
block|}
block|}
comment|/**      * The preferred label of this Symbol in the given language or      *<code>null</code> if no label for this language is defined      * TODO: how to handle internationalisation.      * @param lang the language      * @return The preferred label of this Symbol in the given language or      *<code>null</code> if no label for this language is defined      */
specifier|public
specifier|final
name|String
name|getLabel
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|Text
name|label
init|=
name|metadata
operator|.
name|getFirst
argument_list|(
name|LABEL
argument_list|,
name|lang
argument_list|)
decl_stmt|;
return|return
name|label
operator|!=
literal|null
condition|?
name|label
operator|.
name|getText
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Getter for the ID's of the symbols defined as predecessors of this one.      * @return The id's of the symbols defined as predecessors of this one or an      * empty list if there are no predecessors are defined.      */
specifier|public
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPredecessors
parameter_list|()
block|{
return|return
operator|new
name|ToStringIterator
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|PREDECESSOR
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Getter for the state of this symbol      * @return the state      */
specifier|public
specifier|final
name|ManagedEntityState
name|getState
parameter_list|()
block|{
name|Reference
name|stateUri
init|=
name|metadata
operator|.
name|getFirstReference
argument_list|(
name|STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateUri
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ManagedEntityState
operator|.
name|isState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ManagedEntityState
operator|.
name|getState
argument_list|(
name|stateUri
operator|.
name|getReference
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Value {} for field {} is not a valied SymbolState! -> return null"
argument_list|,
name|stateUri
argument_list|,
name|STATE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Getter for the ID's of the symbols defined as successors of this one.      * @return The id's of the symbols defined as successors of this one or an      * empty list if there are no successors are defined.      */
specifier|public
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessors
parameter_list|()
block|{
return|return
operator|new
name|ToStringIterator
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|SUCCESSOR
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns if this Symbols does have any predecessors      * @return Returns<code>true</code> if predecessors are defined for this      * symbol; otherwise<code>false</code>.      */
specifier|public
specifier|final
name|boolean
name|isPredecessors
parameter_list|()
block|{
return|return
name|getPredecessors
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
comment|/**      * Returns if this Symbols does have any successors      * @return Returns<code>true</code> if successors are defined for this      * symbol; otherwise<code>false</code>.      */
specifier|public
specifier|final
name|boolean
name|isSuccessor
parameter_list|()
block|{
return|return
name|getSuccessors
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
comment|/**      * Removes the description in the default language from the Symbol      * @param description the description to remove      */
specifier|public
specifier|final
name|void
name|removeDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|metadata
operator|.
name|removeNaturalText
argument_list|(
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|defaultLanguage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the description in the parsed language from the Symbol      * @param description the description to remove      * @param language the language.<code>null</code> indicates to use no language tag      */
specifier|public
specifier|final
name|void
name|removeDescription
parameter_list|(
name|String
name|description
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|metadata
operator|.
name|removeNaturalText
argument_list|(
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the symbol with the parsed ID as a predecessor      * @param predecessor the id of the predecessor to remove      */
specifier|public
specifier|final
name|void
name|removePredecessor
parameter_list|(
name|String
name|predecessor
parameter_list|)
block|{
name|metadata
operator|.
name|removeReference
argument_list|(
name|PREDECESSOR
argument_list|,
name|predecessor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the symbol with the parsed ID as a successor      * @param successor the id of the successor to remove      */
specifier|public
specifier|final
name|void
name|removeSuccessor
parameter_list|(
name|String
name|successor
parameter_list|)
block|{
name|metadata
operator|.
name|removeReference
argument_list|(
name|SUCCESSOR
argument_list|,
name|successor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setter for the Label in the default Language      * @param label      */
specifier|public
specifier|final
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|metadata
operator|.
name|setNaturalText
argument_list|(
name|LABEL
argument_list|,
name|label
argument_list|,
name|defaultLanguage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setter for a label of a specific language      * @param label the label      * @param language the language.<code>null</code> indicates to use no language tag      */
specifier|public
specifier|final
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|metadata
operator|.
name|setNaturalText
argument_list|(
name|LABEL
argument_list|,
name|label
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setter for the state of the Symbol      * @param state the new state      * @throws IllegalArgumentException if the parsed state is<code>null</code>      */
specifier|public
specifier|final
name|void
name|setState
parameter_list|(
name|ManagedEntityState
name|state
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|setReference
argument_list|(
name|STATE
argument_list|,
name|state
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"SymbolState can not be set to NULL!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Getter for the default language used for {@link #getLabel()}      * @return the preferred language used for {@link #getLabel()}      */
specifier|public
specifier|final
name|String
name|getDefaultLanguage
parameter_list|()
block|{
return|return
name|defaultLanguage
return|;
block|}
comment|/**      * Setter for the default language used for {@link #getLabel()} (      *<code>null</code> is supported)      * @param defaultLanguage the preferred language used for {@link #getLabel()}       */
specifier|public
specifier|final
name|void
name|setDefaultLanguage
parameter_list|(
name|String
name|defaultLanguage
parameter_list|)
block|{
name|this
operator|.
name|defaultLanguage
operator|=
name|defaultLanguage
expr_stmt|;
block|}
comment|//    /**
comment|//     * Setter for the ID of the Metadata for this managed entity.
comment|//     * @param id the id of the metadata of this entity
comment|//     */
comment|//    public final void setMetadataId(String id){
comment|//        wrappedEntity.getRepresentation().setReference(
comment|//            RdfResourceEnum.hasMetadata.getUri(), id);
comment|//    }
comment|//    /**
comment|//     * Getter for the ID of the Metadata for this managed entity.
comment|//     * @return the id of the metadata of entity
comment|//     */
comment|//    public final String getMetadataId(){
comment|//        Reference ref = wrappedEntity.getRepresentation().getFirstReference(
comment|//            RdfResourceEnum.hasMetadata.getUri());
comment|//        return ref == null ? null : ref.getReference();
comment|//    }
block|}
end_class

end_unit

