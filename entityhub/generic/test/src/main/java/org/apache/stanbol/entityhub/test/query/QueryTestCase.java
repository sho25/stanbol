begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|QueryTestCase
block|{
comment|/**      * Fields included for each result regardless of the configuration      */
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_RESULT_FIELDS
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://www.iks-project.eu/ontology/rick/query/score"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|?
extends|extends
name|String
argument_list|,
name|?
extends|extends
name|String
argument_list|>
name|DEFAULT_HEADER
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultHeader
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|defaultHeader
operator|.
name|put
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|DEFAULT_HEADER
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|defaultHeader
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResultIds
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|prohibitedResultIds
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|allowedFields
decl_stmt|;
specifier|private
specifier|final
name|int
name|expectedStatus
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|requiredFields
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
decl_stmt|;
comment|/**      * Creates a Query Test Case.      * @param expectedStatus the expected HTTP status code returned for this      * test case. If the value is not an 2xx it is not possible to define      * {@link #getExpectedResultIds()}, {@link #getAllowedFields()} and      * {@link #getRequiredFields()} for an test case.      * @param expectedResultIds Expected results for this test case.       *<code>null</code> indicates that there MUST BE no results. An empty      * collection indicates that there MUST BE results but does not test for      * specific results. Any item in the parsed collection MUST BE contained in      * the results of the test case, but this does not mean that there might not      * be other results within the result set of this query.      * @param prohibitedResultIds IDs that MUST NOT be part or the result. If      *<code>null</code> or empty this feature is deactivated      * @throws IllegalArgumentException if the {@link #getExpectedStatus()} is       * not an 2xx code and the expectedResultIds is not<code>null</code>.      */
specifier|protected
name|QueryTestCase
parameter_list|(
name|int
name|expectedStatus
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResultIds
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|prohibitedResultIds
parameter_list|)
block|{
name|this
operator|.
name|expectedStatus
operator|=
name|expectedStatus
expr_stmt|;
if|if
condition|(
operator|!
name|expectsSuccess
argument_list|()
operator|&&
name|expectedResultIds
operator|!=
literal|null
condition|)
block|{
comment|//note even an empty collection is not allowed, because this indicated
comment|//that results are expected but to test for specific ids must be made
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected Results can only be parsed"
operator|+
literal|"if the expected status of this test case has an 2xx code"
argument_list|)
throw|;
block|}
name|this
operator|.
name|expectedResultIds
operator|=
name|expectedResultIds
expr_stmt|;
if|if
condition|(
name|expectsSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|allowedFields
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|allowedFields
operator|.
name|addAll
argument_list|(
name|DEFAULT_RESULT_FIELDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|allowedFields
operator|=
literal|null
expr_stmt|;
block|}
name|headers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|headers
operator|.
name|putAll
argument_list|(
name|DEFAULT_HEADER
argument_list|)
expr_stmt|;
block|}
comment|/**      * Setter for the required fields      * @param requiredFields      * @throws IllegalArgumentException In case the       * {@link #getExpectedStatus()} is not an 2xx code      */
specifier|protected
specifier|final
name|void
name|setRequiredFields
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|requiredFields
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectsSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required fields can only be set"
operator|+
literal|"if the expected status of a test case has a 2xx code"
argument_list|)
throw|;
block|}
name|this
operator|.
name|requiredFields
operator|=
name|requiredFields
expr_stmt|;
block|}
comment|/**      * Adds additional allowed fields to the {@link #DEFAULT_RESULT_FIELDS}.      * @param allowedFields      * @throws IllegalArgumentException if the       * {@link #getExpectedStatus()} is not an 2xx code      */
specifier|protected
specifier|final
name|void
name|addAllowedField
parameter_list|(
name|String
name|allowedField
parameter_list|)
block|{
if|if
condition|(
name|expectsSuccess
argument_list|()
condition|)
block|{
if|if
condition|(
name|allowedField
operator|!=
literal|null
operator|&&
operator|!
name|allowedField
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|allowedFields
operator|.
name|add
argument_list|(
name|allowedField
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Allowed fields can only be set"
operator|+
literal|"if the expected status of a test case has a 2xx code"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
name|boolean
name|expectesResults
parameter_list|()
block|{
return|return
name|expectedResultIds
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|getExpectedResultIds
parameter_list|()
block|{
return|return
name|expectedResultIds
return|;
block|}
comment|/**      * @return the prohibitedResultIds      */
specifier|public
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|getProhibitedResultIds
parameter_list|()
block|{
return|return
name|prohibitedResultIds
return|;
block|}
specifier|public
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|requiredFields
return|;
block|}
specifier|public
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllowedFields
parameter_list|()
block|{
return|return
name|allowedFields
return|;
block|}
specifier|public
specifier|final
name|int
name|getExpectedStatus
parameter_list|()
block|{
return|return
name|expectedStatus
return|;
block|}
comment|/**      * If the {@link #getExpectedStatus()} is a 2xx      * @return if it is expected that this query test case returns a 2xx code      */
specifier|public
name|boolean
name|expectsSuccess
parameter_list|()
block|{
return|return
name|expectedStatus
operator|>=
literal|200
operator|&&
name|expectedStatus
operator|<
literal|300
return|;
block|}
comment|/**      * Getter for the content (query) to be sent to the server      * @return the content (query string) to be sent to the entityhub      */
specifier|public
specifier|abstract
name|String
name|getContent
parameter_list|()
function_decl|;
comment|/**      * The relative path from the service tested endpoint ("/entityhub", "/sites" or      * "/site/{siteId}") to the service ("/query" for field queries and "/find"      * for label based entity searches).      * @return the relative service path.      */
specifier|public
specifier|abstract
name|String
name|getServicePath
parameter_list|()
function_decl|;
comment|/**      * Getter for the HTTP header field needed to execute this request      * @return      */
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
comment|/**      * Setter for an HTTP header. This headers are used for the request to the      * Server when execution this test case. If<code>null</code> is parsed as      * value this header is removed. Existing headers are overriden.      * @param key the key      * @param value the value or<code>null</code> to remove this header      */
specifier|protected
specifier|final
name|void
name|setHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|headers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" query: "
argument_list|)
operator|.
name|append
argument_list|(
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" expected status: "
argument_list|)
operator|.
name|append
argument_list|(
name|expectedStatus
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" expected results: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedResultIds
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedResultIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"any"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|expectedResultIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowedFields
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" result fields: ["
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|allowedFields
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredFields
operator|!=
literal|null
operator|&&
name|requiredFields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (required)"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

