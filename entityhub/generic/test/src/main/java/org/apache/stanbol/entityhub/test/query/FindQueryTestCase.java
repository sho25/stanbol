begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
specifier|public
class|class
name|FindQueryTestCase
extends|extends
name|QueryTestCase
block|{
comment|/**      * If {@link #getField()} set this field is expected to be used as default      * search field (rdfs:label)      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SEARCH_FIELD
init|=
literal|"http://www.w3.org/2000/01/rdf-schema#label"
decl_stmt|;
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
specifier|private
name|String
name|language
decl_stmt|;
specifier|private
name|String
name|field
decl_stmt|;
specifier|private
name|Integer
name|offset
decl_stmt|;
specifier|private
name|Integer
name|limit
decl_stmt|;
comment|/**      * Constructs a /find test case with a text and a expected HTTP status code      * for the Request. This constructor is typically used to construct illegal      * requests that return status codes other that 2xx      * @param text the text      * @param expectedStatus the expected status      */
specifier|public
name|FindQueryTestCase
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
name|expectedStatus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a valid /find request (expects an 2xx status) that may or may      * not have results      * @param text the text      * @param expectsResults if results are expected or not      */
specifier|public
name|FindQueryTestCase
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|expectsResults
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
literal|200
argument_list|,
name|expectsResults
condition|?
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a /find request where the response MUST contain the parsed      * expected results. Additional other results are ok.       * @param text the text      * @param expectedResultIds the ids of the required results. An empty      * collection to accept any results or<code>null</code> to explicitly      * check that this query MUST NOT have results.       */
specifier|public
name|FindQueryTestCase
parameter_list|(
name|String
name|text
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResultIds
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
literal|200
argument_list|,
name|expectedResultIds
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a /find request where the response MUST contain the parsed      * expected results. Additional other results are ok.       * @param text the text      * @param expectedResultIds the ids of the required results. An empty      * collection to accept any results or<code>null</code> to explicitly      * check that this query MUST NOT have results.       * @param prohibitedResultIds results that MUST NOT be returned by the query      */
specifier|public
name|FindQueryTestCase
parameter_list|(
name|String
name|text
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResultIds
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|prohibitedResultIds
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
literal|200
argument_list|,
name|expectedResultIds
argument_list|,
name|prohibitedResultIds
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internally used to construct FindTestCases. Not all combinations make      * sense therefore this one is a private one      * @param text the text      * @param status the status      * @param expectedResultIds expected results      * @param prohibitedResultIds results that MUST NOT be returned by the query      */
specifier|private
name|FindQueryTestCase
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|status
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|expectedResultIds
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|prohibitedResultIds
parameter_list|)
block|{
name|super
argument_list|(
name|status
argument_list|,
name|expectedResultIds
argument_list|,
name|prohibitedResultIds
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
comment|//For queries that should succeed
if|if
condition|(
name|expectsSuccess
argument_list|()
condition|)
block|{
comment|//add the default search field (needed to correctly init that the
comment|//default search field is required to be included in results
name|setField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return the language      */
specifier|public
specifier|final
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
comment|/**      * @param language the language to set      */
specifier|public
specifier|final
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
block|}
comment|/**      * Getter for the field to search the {@link #getText() text}      * @return the field      */
specifier|public
specifier|final
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/**      * Setter for the field to search the {@link #getText() text}      * @param field the field to set      */
specifier|public
specifier|final
name|void
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
comment|//set also the new field as required for results!
name|setRequiredFields
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|field
operator|==
literal|null
condition|?
name|DEFAULT_SEARCH_FIELD
else|:
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for the offset of this query      * @return the offset      */
specifier|public
specifier|final
name|Integer
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**      * Setter for the offset      * @param offset the offset to set      */
specifier|public
specifier|final
name|void
name|setOffset
parameter_list|(
name|Integer
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
comment|/**      * Getter for the maximum number of results (starting from the offset)      * @return the limit      */
specifier|public
specifier|final
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
comment|/**      * Setter for the maximum number of results (starting from the offset)      * @param limit the limit to set      */
specifier|public
specifier|final
name|void
name|setLimit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
comment|/**      * Getter for the text to search      * @return the text      */
specifier|public
specifier|final
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getServicePath
parameter_list|()
block|{
return|return
literal|"/find"
return|;
block|}
comment|/**      * Getter for the encoded Content for the query      * @return      */
specifier|public
specifier|final
name|String
name|getContent
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|addParam
argument_list|(
name|sb
argument_list|,
literal|"name"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|addParam
argument_list|(
name|sb
argument_list|,
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|addParam
argument_list|(
name|sb
argument_list|,
literal|"lang"
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|addParam
argument_list|(
name|sb
argument_list|,
literal|"offset"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|addParam
argument_list|(
name|sb
argument_list|,
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Adds a param to the {@link #getContent() content} of the query       * @param sb      */
specifier|private
name|void
name|addParam
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|param
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
comment|//TODO: do we need to URLencode the value?
name|sb
operator|.
name|append
argument_list|(
name|param
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

