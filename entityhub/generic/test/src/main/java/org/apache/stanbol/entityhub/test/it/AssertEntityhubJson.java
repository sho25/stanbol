begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|RequestExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|query
operator|.
name|QueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utilities for asserting JSON responses encoded in the Entityhub JSON format.  * The intended usage is similar to Ass  * @author Rupert Westenthaler.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AssertEntityhubJson
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AssertEntityhubJson
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AssertEntityhubJson
parameter_list|()
block|{
comment|/*noinstances*/
block|}
comment|/**      * Validates Results of a Query (/find or /query requests) based on the      * data defined by the test case      * @param re the {@link RequestExecutor} used for the test case      * @param test the query test case      * @throws JSONException in case the {@link RequestExecutor#getContent()} are      * no valid JSON. NOTE that the contents are only parsed if the      * {@link QueryTestCase#getExpectedStatus()} is a 2xx status code.      * @return in case of success the List of result Entity IDs      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|assertQueryResults
parameter_list|(
name|RequestExecutor
name|re
parameter_list|,
name|QueryTestCase
name|test
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Assert Query Results for test {}"
argument_list|,
name|test
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|re
operator|.
name|assertStatus
argument_list|(
name|test
operator|.
name|getExpectedStatus
argument_list|()
argument_list|)
expr_stmt|;
name|re
operator|.
name|assertContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
comment|//currently only application/json is supported
if|if
condition|(
operator|!
name|test
operator|.
name|expectsSuccess
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|//no further checks for tests that expect failure
block|}
name|JSONObject
name|jso
init|=
operator|new
name|JSONObject
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Assert Results: {}"
argument_list|,
name|jso
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JSONArray
name|results
init|=
name|jso
operator|.
name|getJSONArray
argument_list|(
literal|"results"
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|expectesResults
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Missing Results for Query: \n "
operator|+
name|test
operator|+
literal|"\n Result:\n "
operator|+
name|results
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|,
name|results
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Unexpected Results for Query:\n "
operator|+
name|test
operator|+
literal|"\n Result:\n "
operator|+
name|results
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|,
name|results
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|expectedIds
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|getExpectedResultIds
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|test
operator|.
name|getExpectedResultIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expectedIds
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|test
operator|.
name|getExpectedResultIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedIds
operator|=
literal|null
expr_stmt|;
block|}
comment|//iterate over the results
comment|//General NOTE:
comment|//  use opt**(..) methods to avoid JSON Exception. We want to parse
comment|//  everything and than do asserts!
name|List
argument_list|<
name|String
argument_list|>
name|resultIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|results
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|result
init|=
name|results
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|result
operator|.
name|optString
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"({}) {}"
argument_list|,
name|i
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"ID missing for an Result"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|resultIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedIds
operator|!=
literal|null
condition|)
block|{
name|expectedIds
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//not all results must be in the list
block|}
if|if
condition|(
name|test
operator|.
name|getProhibitedResultIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Prohibited Result '"
operator|+
name|id
operator|+
literal|"' found!"
argument_list|,
name|test
operator|.
name|getProhibitedResultIds
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertRepresentation
argument_list|(
name|result
argument_list|,
name|test
operator|.
name|getRequiredFields
argument_list|()
argument_list|,
name|test
operator|.
name|getAllowedFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedIds
operator|!=
literal|null
condition|)
block|{
comment|// if there where expected results check that all where found
name|assertTrue
argument_list|(
literal|"The following expected results where missing in the Response: \n "
operator|+
name|expectedIds
argument_list|,
name|expectedIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resultIds
return|;
block|}
comment|/**      * Asserts that the Query is present in the response and if so returns the      * query      * @param content the returned content      * @return the query as contained in the response      * @throws JSONException on any Error while parsing the JSON query from the      * parsed content      */
specifier|public
specifier|static
name|JSONObject
name|assertResponseQuery
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertNotNull
argument_list|(
literal|"The content of the Response is NULL"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|JSONObject
name|jResult
init|=
operator|new
name|JSONObject
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|JSONObject
name|jQuery
init|=
name|jResult
operator|.
name|optJSONObject
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Result does not contain the processed Query"
argument_list|,
name|jQuery
argument_list|)
expr_stmt|;
return|return
name|jQuery
return|;
block|}
comment|/**      * Asserts that the selected JSONArray of the field query returned within      * the result list contains parsed selected fields      * @param jQuery the query e.g. as returned by       * {@link #assertQueryResults(RequestExecutor, QueryTestCase)}      * @return the selected fields for further processing      * @throws JSONException on any error while parsing the JSON      */
specifier|public
specifier|static
name|JSONArray
name|assertSelectedField
parameter_list|(
name|JSONObject
name|jQuery
parameter_list|,
name|String
modifier|...
name|selected
parameter_list|)
throws|throws
name|JSONException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|selectedSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|==
literal|null
operator|||
name|selected
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|selectedSet
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|selectedSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|selected
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JSONArray
name|jSelected
init|=
name|jQuery
operator|.
name|optJSONArray
argument_list|(
literal|"selected"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Result Query is missing the 'selected' property"
argument_list|,
name|jSelected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Result Query is expected to have at least a single selected field"
argument_list|,
name|jSelected
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jSelected
operator|.
name|length
argument_list|()
operator|&&
operator|!
name|found
condition|;
name|i
operator|++
control|)
block|{
name|String
name|selectedField
init|=
name|jSelected
operator|.
name|optString
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Selected array contains a NULL element \n"
operator|+
name|jSelected
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|,
name|selectedField
argument_list|)
expr_stmt|;
name|selectedSet
operator|.
name|remove
argument_list|(
name|selectedField
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Fields "
operator|+
name|selectedSet
operator|+
literal|" are not selected by\n"
operator|+
name|jSelected
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|,
name|selectedSet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jSelected
return|;
block|}
comment|/**      * Asserts that the parsed Stirng is an valid Entity. This Method only tests      * for the Entity properties use       * {@link #assertRepresentation(JSONObject, Collection, Collection)} to check for      * required/optional fields of the representation and metadata      * @param content the content e.g. as returned by an request to the       * Entityhub      * @param to test the id or<code>null</code> to skip this test      * @param to test the site or<code>null</code> to skip this test      * @return the parsed Entity typically used for further tests      */
specifier|public
specifier|static
name|JSONObject
name|assertEntity
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|site
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertNotNull
argument_list|(
literal|"The content to parse the Entity from is NULL"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|JSONObject
name|jEntity
init|=
operator|new
name|JSONObject
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Entity has the wrong ID"
argument_list|,
name|id
argument_list|,
name|jEntity
operator|.
name|optString
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|jEntity
operator|.
name|optString
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"ID of the Entity MUST NOT be NULL"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|site
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Entity has the wrong Site"
argument_list|,
name|site
argument_list|,
name|jEntity
operator|.
name|optString
argument_list|(
literal|"site"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Representation is missing"
argument_list|,
name|jEntity
operator|.
name|has
argument_list|(
literal|"representation"
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|jRepresentation
init|=
name|jEntity
operator|.
name|getJSONObject
argument_list|(
literal|"representation"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Representation is not an JSON Object"
argument_list|,
name|jRepresentation
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Representation MUST have the same ID as the the Entity"
argument_list|,
name|id
argument_list|,
name|jEntity
operator|.
name|optString
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata are missing"
argument_list|,
name|jEntity
operator|.
name|has
argument_list|(
literal|"metadata"
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|jMetadata
init|=
name|jEntity
operator|.
name|getJSONObject
argument_list|(
literal|"metadata"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Metadata is not an JSON Object"
argument_list|,
name|jMetadata
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|requiredMetadata
decl_stmt|;
if|if
condition|(
literal|"entityhub"
operator|.
name|equals
argument_list|(
name|site
argument_list|)
condition|)
block|{
name|requiredMetadata
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
comment|//NamespaceEnum.entityhub+"isChached", not used by the entityhub
name|NamespaceEnum
operator|.
name|entityhub
operator|+
literal|"about"
argument_list|,
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requiredMetadata
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|NamespaceEnum
operator|.
name|entityhub
operator|+
literal|"isChached"
argument_list|,
name|NamespaceEnum
operator|.
name|entityhub
operator|+
literal|"about"
argument_list|,
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"type"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|metadata
init|=
name|assertRepresentation
argument_list|(
name|jMetadata
argument_list|,
name|requiredMetadata
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The Metadata of an Entity MUST BE about the Entity"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|NamespaceEnum
operator|.
name|entityhub
operator|+
literal|"about"
argument_list|)
operator|.
name|contains
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|id
argument_list|,
literal|"xsd:anyURI"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jEntity
return|;
block|}
comment|/**      * Asserts a JSONObject that represents a Representation for allowed and      * required fields. Any field that is not required or optional will cause      * an assertion to fail. Any required field that is missing will also fail      * this test.      * @param jRepresentation      * @param required      * @param optional      * @return the values of the Representation with the fields as key and the      * values as value. The values contain the string value at index '0' and the       * xsd:datatype or xml:lang or<code>null</code> (if none) at index '1'      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|assertRepresentation
parameter_list|(
name|JSONObject
name|jRepresentation
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|required
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|optional
parameter_list|)
throws|throws
name|JSONException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|checkRequiredFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//copy over the required fields
if|if
condition|(
name|required
operator|!=
literal|null
operator|&&
operator|!
name|required
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkRequiredFields
operator|.
name|addAll
argument_list|(
name|required
argument_list|)
expr_stmt|;
block|}
name|checkRequiredFields
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
comment|//the "id" is required by all representations
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|valueMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|keys
init|=
name|jRepresentation
operator|.
name|keys
argument_list|()
init|;
name|keys
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Duplicate 'field' "
operator|+
name|key
argument_list|,
name|valueMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkRequiredFields
operator|==
literal|null
operator|||
operator|!
name|checkRequiredFields
operator|.
name|remove
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|//process key
if|if
condition|(
name|optional
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Field "
operator|+
name|key
operator|+
literal|" is not an expected one: \n"
operator|+
literal|" required: "
operator|+
name|required
operator|+
literal|"\n"
operator|+
literal|" optional: "
operator|+
name|optional
operator|+
literal|"\n"
operator|+
literal|" representation: "
operator|+
name|jRepresentation
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|,
name|optional
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
literal|"id"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|JSONArray
name|jValues
init|=
name|jRepresentation
operator|.
name|getJSONArray
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Fields MUST contain at least a single value!"
argument_list|,
name|jValues
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jValues
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|fieldValue
init|=
name|jValues
operator|.
name|optJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Values for field "
operator|+
name|key
operator|+
literal|" does contain an value "
operator|+
literal|"that is not an JSONObject "
operator|+
name|jValues
operator|.
name|optString
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
name|String
index|[]
name|value
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|fieldValue
operator|.
name|optString
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"All Field-values MUST have the 'value' property"
argument_list|,
name|value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"All Field-values MUST not be empty"
argument_list|,
name|value
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldValue
operator|.
name|has
argument_list|(
literal|"xsd:datatype"
argument_list|)
condition|)
block|{
name|value
index|[
literal|1
index|]
operator|=
name|fieldValue
operator|.
name|getString
argument_list|(
literal|"xsd:datatype"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The 'xsd:datatype' (if present) MUST NOT be empty"
argument_list|,
name|value
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldValue
operator|.
name|has
argument_list|(
literal|"xml:lang"
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
literal|"Field-values MUST NOT have both 'xsd:datatype' and 'xml:lang' defined!"
argument_list|,
name|value
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
name|fieldValue
operator|.
name|getString
argument_list|(
literal|"xml:lang"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The 'xml:lang' (if present) MUST NOT be empty"
argument_list|,
name|value
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Duplicate value "
operator|+
name|value
operator|+
literal|" for field "
operator|+
name|key
argument_list|,
name|values
operator|.
name|contains
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|//both xsd:datatype and xml:lang are optional depending on the
comment|//type of the value. Therefore it can not be tested
comment|//the 'type' property is deprecated
block|}
name|valueMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|checkRequiredFields
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Missing required Fields "
operator|+
name|checkRequiredFields
operator|+
literal|" present: "
operator|+
name|valueMap
argument_list|,
name|checkRequiredFields
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|valueMap
return|;
block|}
block|}
end_class

end_unit

