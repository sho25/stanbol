begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|model
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|Utils
operator|.
name|asCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|UnsupportedTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|RepresentationTest
block|{
comment|/**      * Subclasses must implement this method and provide a {@link ValueFactory} instance that is used to test      * the actual model implementation      *       * @return the {@link ValueFactory} for the Entityhub model implementation to be tested      */
specifier|protected
specifier|abstract
name|ValueFactory
name|getValueFactory
parameter_list|()
function_decl|;
comment|/**      * Getter for an instance of an unsupported type. For add/set operation such values are converted to the      * lexical form by using the {@link Object#toString()} method. For      * {@link Representation#get(String, Class)} and {@link Representation#getFirst(String, Class)} an      * {@link UnsupportedTypeException} need to be thrown when requesting values of the      * {@link Object#getClass()} of the returned instance.      *       * @return An instance of a class that is not supported by the tested {@link Representation}      *         implementation or<code>null</code> if the tested implementation does support any type (this      *         will deactivate such kind of tests).      */
specifier|protected
specifier|abstract
name|Object
name|getUnsupportedValueInstance
parameter_list|()
function_decl|;
comment|/*--------------------------------------------------------------------------      * Set of Tests that check if all Methods correctly throw an IllegalArgumentException      * when parsing null as field!      *  - important to prevent NULL fields within the Entityhub      *--------------------------------------------------------------------------      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldAdd
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldAddNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldAddReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
literal|null
argument_list|,
literal|"urn:test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGet
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetDataType
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetNaturalLanguateText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|get
argument_list|(
literal|null
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetFirst
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirst
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetFirstReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirstReference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetFirstDataType
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirst
argument_list|(
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetFirstNaturalLanguage
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirst
argument_list|(
literal|null
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetReferences
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getReferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldGetText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldRemove
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|remove
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldRemoveAll
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeAll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldRemoveAllNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
literal|null
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldRemoveNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeNaturalText
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldRemoveReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeReference
argument_list|(
literal|null
argument_list|,
literal|"urn:test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldSet
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|set
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldSetNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|setNaturalText
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFieldSetReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|setReference
argument_list|(
literal|null
argument_list|,
literal|"urn:test"
argument_list|)
expr_stmt|;
block|}
comment|/*--------------------------------------------------------------------------      * Set of Tests that check if all Methods correctly throw a IllegalArgumentExceptions      * when parsing an empty string as field      *  - important to prevent "" fields within the Entityhub      *--------------------------------------------------------------------------      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldAdd
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldAddNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldAddReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
literal|""
argument_list|,
literal|"urn:test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGet
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|get
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetDataType
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|get
argument_list|(
literal|""
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetNaturalLanguateText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|get
argument_list|(
literal|""
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetFirst
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirst
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetFirstReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirstReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetFirstDataType
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirst
argument_list|(
literal|""
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetFirstNaturalLanguage
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getFirst
argument_list|(
literal|""
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetReferences
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getReferences
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldGetText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|getText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldRemove
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|remove
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldRemoveAll
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldRemoveAllNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
literal|""
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldRemoveNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeNaturalText
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldRemoveReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeReference
argument_list|(
literal|""
argument_list|,
literal|"urn:test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldSet
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|set
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldSetNaturalText
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|setNaturalText
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyFieldSetReference
parameter_list|()
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|setReference
argument_list|(
literal|""
argument_list|,
literal|"urn:test"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if value iterators for non existing fields return an Iterator with no elements (Here it is      * important, that in such cases methods do not return<code>null</code>).      */
annotation|@
name|Test
specifier|public
name|void
name|testNonExistingFields
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:this.field:does.not:exist"
decl_stmt|;
comment|// Iterators MUST NOT be NULL but MUST NOT contain any element
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|fieldIt
init|=
name|rep
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldIt
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fieldIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|valueIt
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|valueIt
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|valueIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|refIt
init|=
name|rep
operator|.
name|getReferences
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|refIt
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|textIt
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|textIt
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|textIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*--------------------------------------------------------------------------      * Set of Tests that check if all add methods correctly throw an       * IllegalArgumentExceptions when parsing NULL as value      *  - important to prevent NULL values within Entityhub      *--------------------------------------------------------------------------      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddNullReference
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddNullText
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddNullObject
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/*--------------------------------------------------------------------------      * Set of Tests that check if Methods correctly process UnsupportedTypes      * This means that the toString Method is used to get the lexical      * representation of such types      *--------------------------------------------------------------------------      */
comment|/**      * Adding an unsupported type should use the {@link Object#toString()} to store the parsed instance      */
annotation|@
name|Test
specifier|public
name|void
name|testAddUnsupportedType
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getUnsupportedValueInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// any type is supported by the representation
return|return;
comment|// this test is not needed
block|}
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|valueIterator
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|valueIterator
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|valueIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|repValue
init|=
name|valueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|repValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetUnsupportedType
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getUnsupportedValueInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// any type is supported by the representation
return|return;
comment|// this test is not needed
block|}
name|rep
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// this does not test that set removes previous values
name|Iterator
argument_list|<
name|Object
argument_list|>
name|valueIterator
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|valueIterator
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|valueIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|repValue
init|=
name|valueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|repValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetValueWithUnsupportedType
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getUnsupportedValueInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// any type is supported by the representation
comment|// this test is not needed therefore return an dummy Exception
throw|throw
operator|new
name|UnsupportedTypeException
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"dummy exception to successfully complete this unnecessary test"
argument_list|)
throw|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|unsupported
init|=
name|value
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
name|unsupported
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetFirstValueWithUnsupportedType
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getUnsupportedValueInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// any type is supported by the representation
comment|// this test is not needed therefore return an dummy Exception
throw|throw
operator|new
name|UnsupportedTypeException
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"dummy exception to successfully complete this unnecessary test"
argument_list|)
throw|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|unsupported
init|=
name|value
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|rep
operator|.
name|getFirst
argument_list|(
name|field
argument_list|,
name|unsupported
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If<code>null</code> is parsed as value for any setter method, than all values need to be removed for      * the field. this means that<code>set**(field,null)</code> has the same effect as      *<code>{@link Representation#removeAll(String) removeAll(field)}</code>      */
annotation|@
name|Test
specifier|public
name|void
name|testSetToNullAsRemoveAll
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|String
name|testReference
init|=
literal|"http://www.test.org/test"
decl_stmt|;
name|String
name|testText
init|=
literal|"This is a Test"
decl_stmt|;
name|Integer
name|testValue
init|=
literal|42
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|testValue
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|testText
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|testReference
argument_list|)
expr_stmt|;
name|rep
operator|.
name|set
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// need to remove all values
name|Iterator
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|values
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test specific setter (also specific setters need to remove all values)
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|testValue
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|testText
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|testReference
argument_list|)
expr_stmt|;
name|rep
operator|.
name|setNaturalText
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|values
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|testValue
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|testText
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|testReference
argument_list|)
expr_stmt|;
name|rep
operator|.
name|setReference
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|values
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFieldRemoval
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|()
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Test removal for References
name|String
name|strRef
init|=
literal|"urn:testValue"
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|strRef
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|removeReference
argument_list|(
name|field
argument_list|,
name|strRef
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|Reference
name|ref
init|=
name|vf
operator|.
name|createReference
argument_list|(
literal|"urn:testValue2"
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
comment|// test removal for texts (with and without language)
name|String
name|strText
init|=
literal|"test text"
decl_stmt|;
name|String
name|strTextLang
init|=
literal|"en"
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|strText
argument_list|,
name|strTextLang
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|strText
argument_list|,
name|strTextLang
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|strTextNoLang
init|=
literal|"test text without lang"
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|strTextNoLang
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|strTextNoLang
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
comment|// there is also the possibility to explicitly parse null as language
comment|// could internally case differences however externally this is the same
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|strTextNoLang
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|strTextNoLang
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|Text
name|text
init|=
name|vf
operator|.
name|createText
argument_list|(
literal|"Das ist ein Text zum testen des Text Objektes"
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test a dataTypes values
name|Integer
name|intValue
init|=
literal|42
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|intValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|intValue
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some Values are converted by the add(String field,Object value) Method
comment|// to other data types. This MUST also be assured for removal
comment|// NOTE: testing the conversions is done in other test methods!
name|URI
name|testURI
init|=
operator|new
name|URI
argument_list|(
literal|"http://www.test.org/test"
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|testURI
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|testURI
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if {@link Reference} instances are correctly generated for {@link URI}. This test also depends on      * the correct implementation of the {@link Reference#equals(Object)} method      *       * @throws URISyntaxException      */
annotation|@
name|Test
specifier|public
name|void
name|testURIToReferenceConversion
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://www.test.org/uriTest"
argument_list|)
decl_stmt|;
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|()
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// test conversion
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|refs
init|=
name|rep
operator|.
name|getReferences
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refs
operator|.
name|next
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple adds do not generate duplicate References
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test adding a equivalent reference
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test removing
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if {@link Reference} instances are correctly generated for {@link URL}. This test also depends on      * the correct implementation of the {@link Reference#equals(Object)} method      *       * @throws MalformedURLException      */
annotation|@
name|Test
specifier|public
name|void
name|testURLToReferenceConversion
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://www.test.org/urlTest"
argument_list|)
decl_stmt|;
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|()
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// test empty reference
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|refs
init|=
name|rep
operator|.
name|getReferences
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test conversion
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|refs
operator|=
name|rep
operator|.
name|getReferences
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refs
operator|.
name|next
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple adds do not generate duplicate References
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test adding a equivalent reference
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|vf
operator|.
name|createReference
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test removing
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parsing a String Array with null as first element MUST NOT add a value (because null values are not      * supported by {@link Representation}).      */
annotation|@
name|Test
specifier|public
name|void
name|testStringArrayWithNullTextConversion
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"en"
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if {@link Text} instances are correctly generated for String[]. This test depends also on the      * correct implementation of the {@link Text#equals(Object)} method      */
annotation|@
name|Test
specifier|public
name|void
name|testStringArrayToTextConversion
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|()
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// test conversion of String[] with language as second element
name|String
index|[]
name|textWithLang
init|=
operator|new
name|String
index|[]
block|{
literal|"Test text with language"
block|,
literal|"en"
block|}
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|textWithLang
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|refs
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Text
name|test
init|=
name|refs
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|textWithLang
index|[
literal|1
index|]
argument_list|,
name|test
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|textWithLang
index|[
literal|0
index|]
argument_list|,
name|test
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple adds do not generate duplicate References
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|textWithLang
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test adding a equivalent reference
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
name|textWithLang
index|[
literal|0
index|]
argument_list|,
name|textWithLang
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test removing
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|textWithLang
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test conversion of String[] with only one element (default language)
name|String
index|[]
name|textWithoutLang
init|=
operator|new
name|String
index|[]
block|{
literal|"Test text without language"
block|}
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|textWithoutLang
argument_list|)
expr_stmt|;
name|refs
operator|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
name|refs
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|textWithoutLang
index|[
literal|0
index|]
argument_list|,
name|test
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple adds do not generate duplicate References
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|textWithoutLang
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test adding a equivalent reference
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
name|textWithoutLang
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test removing
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|textWithoutLang
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test conversion of String[] with null as second element (default language)
name|String
index|[]
name|textWithDefaultLang
init|=
operator|new
name|String
index|[]
block|{
literal|"Test text with default language"
block|,
literal|null
block|}
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|textWithDefaultLang
argument_list|)
expr_stmt|;
name|refs
operator|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
name|refs
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|textWithDefaultLang
index|[
literal|0
index|]
argument_list|,
name|test
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple adds do not generate duplicate References
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|textWithDefaultLang
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test adding a equivalent reference
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|vf
operator|.
name|createText
argument_list|(
name|textWithDefaultLang
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test removing
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|textWithDefaultLang
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// finally test if additional Elements are correctly ignored
name|String
index|[]
name|ignoreAdditionalElements
init|=
operator|new
name|String
index|[]
block|{
literal|"Test if additional elements are ignored"
block|,
literal|"en"
block|,
literal|"ignored1"
block|,
literal|"ignored2"
block|,
literal|null
block|,
literal|"ignored4"
block|}
decl_stmt|;
name|String
index|[]
name|sameText
init|=
operator|new
name|String
index|[]
block|{
literal|"Test if additional elements are ignored"
block|,
literal|"en"
block|}
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|ignoreAdditionalElements
argument_list|)
expr_stmt|;
name|refs
operator|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
name|refs
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ignoreAdditionalElements
index|[
literal|1
index|]
argument_list|,
name|test
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ignoreAdditionalElements
index|[
literal|0
index|]
argument_list|,
name|test
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|refs
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple adds do not generate duplicate References
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|ignoreAdditionalElements
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test if an Array with only the first two elements generate the same Text
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|sameText
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test removing
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|ignoreAdditionalElements
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleAddAndRemove
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|URISyntaxException
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|()
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Reference
name|ref
init|=
name|vf
operator|.
name|createReference
argument_list|(
literal|"http://www.test.org/test"
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
name|vf
operator|.
name|createText
argument_list|(
literal|"test"
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|Integer
name|i
init|=
literal|42
decl_stmt|;
name|Double
name|d
init|=
name|Math
operator|.
name|PI
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://www.test.org/uriTest"
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://www.test.org/urlTest"
argument_list|)
decl_stmt|;
name|String
index|[]
name|textAsArray
init|=
operator|new
name|String
index|[]
block|{
literal|"Test text as Array"
block|,
literal|"en"
block|}
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ref
argument_list|,
name|text
argument_list|,
name|i
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|convertedValues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|url
argument_list|,
name|uri
argument_list|,
name|textAsArray
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|allValues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ref
argument_list|,
name|text
argument_list|,
name|i
argument_list|,
name|d
argument_list|,
name|uri
argument_list|,
name|url
argument_list|,
name|textAsArray
argument_list|)
decl_stmt|;
comment|// test adding of collections
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test adding of Iterators
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test adding of Enumerations
name|Vector
argument_list|<
name|Object
argument_list|>
name|v
init|=
operator|new
name|Vector
argument_list|<
name|Object
argument_list|>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|v
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|v
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test adding and removing elements that need to be converted
comment|// only for collections this time -> want to test only converting is
comment|// applied for both add and remove
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|convertedValues
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|convertedValues
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// a final test to ensure, that remove does not only delete all values
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|allValues
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|rep
operator|.
name|remove
argument_list|(
name|field
argument_list|,
name|convertedValues
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReferences
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|refs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://www.test.org/test1"
argument_list|,
literal|"urn:test.org:test.1"
argument_list|)
argument_list|)
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ref
range|:
name|refs
control|)
block|{
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Reference
argument_list|>
name|refIterator
init|=
name|rep
operator|.
name|getReferences
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|refIterator
argument_list|)
expr_stmt|;
while|while
condition|(
name|refIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Reference
name|ref
init|=
name|refIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|refs
operator|.
name|remove
argument_list|(
name|ref
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|refs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|NL_TEST_string
init|=
literal|"String value that has to be treated similar as texts with no language"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NL_TEST_noLang
init|=
literal|"kani ofie sfgoeyd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NL_TEST_en
init|=
literal|"This is an English text"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NL_TEST_en2
init|=
literal|"A second English text"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NL_TEST_de
init|=
literal|"Das ist ein Deutscher Text"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NL_TEST_de_AT
init|=
literal|"Saig kent ma bei uns a nu ois Deutsch durch geh loss'n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|NL_TEST_all
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|NL_TEST_string
argument_list|,
name|NL_TEST_noLang
argument_list|,
name|NL_TEST_en
argument_list|,
name|NL_TEST_en2
argument_list|,
name|NL_TEST_de
argument_list|,
name|NL_TEST_de_AT
argument_list|)
decl_stmt|;
comment|/**      * Internally used to initialise the representation used for the various tests for natural language texts.      * Tests using this initialisation method expect the current configuration. If one changes the values one      * needs also do adapt the according tests.      *       * @param field      *            the field used to add the test values      * @param valueSet      *            if not<code>null</code> the added values are added to this set      * @return the initialised representation      */
specifier|private
name|Representation
name|initNaturalLanguageTest
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|NL_TEST_string
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_noLang
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_en
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_en2
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_de
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_de_AT
argument_list|,
literal|"de-AT"
argument_list|)
expr_stmt|;
return|return
name|rep
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNaturalTextWithNoLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// Note that also String values need to be converted to texts with no language
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
name|Text
name|text
decl_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|noLangTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|noLangTexts
argument_list|)
expr_stmt|;
while|while
condition|(
name|noLangTexts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|text
operator|=
name|noLangTexts
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|// check that both text where found
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNaturalTextWithLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// test de texts
name|Iterator
argument_list|<
name|Text
argument_list|>
name|deTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
literal|"de"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|deTexts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deTexts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// there is one German text in the test set
name|Text
name|text
init|=
name|deTexts
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
comment|// "de" lang
name|assertEquals
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|NL_TEST_de
argument_list|)
expr_stmt|;
comment|// the de lang text
name|assertFalse
argument_list|(
name|deTexts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one Result
comment|// test en labels (2 results)
name|Iterator
argument_list|<
name|Text
argument_list|>
name|enTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|enTexts
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NL_TEST_en
argument_list|,
name|NL_TEST_en2
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|enTexts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|text
operator|=
name|enTexts
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"en"
argument_list|,
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the found
block|}
name|assertTrue
argument_list|(
name|textSet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// all texts found
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNaturalTextWithMultipleLanguages
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// test multiple language query
name|Iterator
argument_list|<
name|Text
argument_list|>
name|allDeTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
literal|"de"
argument_list|,
literal|"de-AT"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|allDeTexts
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NL_TEST_de
argument_list|,
name|NL_TEST_de_AT
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|allDeTexts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Text
name|text
init|=
name|allDeTexts
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|getLanguage
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"de"
argument_list|)
operator|||
name|text
operator|.
name|getLanguage
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"de-AT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the found
block|}
name|assertTrue
argument_list|(
name|textSet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// all texts found
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNaturalTextWithLanguagesWithoutValues
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// test not present language
name|Iterator
argument_list|<
name|Text
argument_list|>
name|esTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
literal|"es"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|esTexts
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|esTexts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple not present languages
name|Iterator
argument_list|<
name|Text
argument_list|>
name|frItTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
literal|"fr"
argument_list|,
literal|"it"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|frItTexts
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|frItTexts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNaturalTextWithAnyLanguageByParsingAnEmptyArray
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// test Iterator for any language (by parsing an empty list)
name|Iterator
argument_list|<
name|Text
argument_list|>
name|allTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|allTexts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|allTexts
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|NL_TEST_all
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNaturalTextWithAnyLanguageByParsingNullAsArray
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// test Iterator for any language (by parsing null)
name|Iterator
argument_list|<
name|Text
argument_list|>
name|allTexts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|allTexts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|allTexts
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|NL_TEST_all
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNaturalTextWithWrongLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// Test removal of natural language
comment|// remove a specific test, but wrong language -> no effect
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_en2
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|NL_TEST_all
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNaturalTextWithWrongNullLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// remove a specific text, but with wrong null language -> also no effect
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_de
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asCollection
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|NL_TEST_all
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNaturalTextWithCorrectAndWrongLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// remove a specific text, parse one correct and one wrong lang
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_en2
argument_list|,
literal|"de"
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
comment|// remove all remaining values
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|getText
argument_list|(
name|field
argument_list|)
init|;
name|texts
operator|.
name|hasNext
argument_list|()
condition|;
name|textSet
operator|.
name|remove
argument_list|(
name|texts
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
control|)
empty_stmt|;
comment|// and check that the value we expect to be removed is still in the set
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|contains
argument_list|(
name|NL_TEST_en2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * String values are treated the same as natural language values with the default (<code>null</code>)      * language.<br>      * Removing a natural language value with parsing null as language MUST therefore also remove a string      * value with the parse same text.      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveStringValuesByRemovingNaturalLanguageTextsWithNullLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
comment|// remove a string value by parsing the text and null as language
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_string
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|getText
argument_list|(
name|field
argument_list|)
init|;
name|texts
operator|.
name|hasNext
argument_list|()
condition|;
name|textSet
operator|.
name|remove
argument_list|(
name|texts
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// only one element should be removed
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_string
argument_list|)
argument_list|)
expr_stmt|;
comment|// and this should be the stringTest
block|}
comment|/**      * String values are treated the same as natural language values with the default (<code>null</code>)      * language.<br>      * Removing a natural language value with no defined language MUST therefore also remove a string value      * with the parse same text.      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveStringValuesByRemovingNaturalLanguageTextsWithNoLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
comment|// remove a string value by parsing only the text
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_string
argument_list|)
expr_stmt|;
name|textSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NL_TEST_string
argument_list|,
name|NL_TEST_noLang
argument_list|,
name|NL_TEST_en
argument_list|,
name|NL_TEST_en2
argument_list|,
name|NL_TEST_de
argument_list|,
name|NL_TEST_de_AT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|getText
argument_list|(
name|field
argument_list|)
init|;
name|texts
operator|.
name|hasNext
argument_list|()
condition|;
name|textSet
operator|.
name|remove
argument_list|(
name|texts
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// only one element should be removed
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_string
argument_list|)
argument_list|)
expr_stmt|;
comment|// and this should be the stringTest
block|}
comment|/**      * String values are treated the same as natural language values with the default (<code>null</code>)      * language.<br>      * Removing a natural language value with an empty language array MUST be interpreted as default language      * and therefore remove the String value.      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveStringValuesByRemovingNaturalLanguageTextsWithEmptyLanguageArray
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
comment|// remove a string value by parsing an empty list of languages
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_string
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|textSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NL_TEST_string
argument_list|,
name|NL_TEST_noLang
argument_list|,
name|NL_TEST_en
argument_list|,
name|NL_TEST_en2
argument_list|,
name|NL_TEST_de
argument_list|,
name|NL_TEST_de_AT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|getText
argument_list|(
name|field
argument_list|)
init|;
name|texts
operator|.
name|hasNext
argument_list|()
condition|;
name|textSet
operator|.
name|remove
argument_list|(
name|texts
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// only one element should be removed
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_string
argument_list|)
argument_list|)
expr_stmt|;
comment|// and this should be the stringTest
name|rep
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|NL_TEST_string
argument_list|)
expr_stmt|;
comment|// re add the value for further tests
block|}
comment|/**      * Tests the feature to add one and the same natural language text for multiple languages      */
specifier|public
name|void
name|testAddNaturalLanguageTextForMultipleLanguages
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// add the same label for multiple language
name|String
index|[]
name|languageArray
init|=
operator|new
name|String
index|[]
block|{
literal|"en"
block|,
literal|"de"
block|,
literal|null
block|}
decl_stmt|;
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_noLang
argument_list|,
name|languageArray
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|languages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|languageArray
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|texts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Text
name|text
init|=
name|texts
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|languages
operator|.
name|remove
argument_list|(
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NL_TEST_noLang
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|languages
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the feature to remove one and the same natural language text for multiple languages      */
specifier|public
name|void
name|testRemoveNaturalLanguageValueInMultipleLanguages
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|createRepresentation
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// add the same label for multiple languages
name|rep
operator|.
name|addNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_noLang
argument_list|,
literal|"en"
argument_list|,
literal|"de"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rep
operator|.
name|removeNaturalText
argument_list|(
name|field
argument_list|,
name|NL_TEST_noLang
argument_list|,
literal|"en"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|texts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Text
name|text
init|=
name|texts
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|texts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"de"
argument_list|,
name|text
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NL_TEST_noLang
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAllTextsOfALanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
comment|// remove all texts of a specific language
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
name|field
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|getText
argument_list|(
name|field
argument_list|)
init|;
name|texts
operator|.
name|hasNext
argument_list|()
condition|;
name|textSet
operator|.
name|remove
argument_list|(
name|texts
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_en2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_en
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAllTextsOfMultipleLanguages
parameter_list|()
block|{
comment|// remove all texts of multiple languages
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
name|field
argument_list|,
literal|"de"
argument_list|,
literal|"de-AT"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|getText
argument_list|(
name|field
argument_list|)
init|;
name|texts
operator|.
name|hasNext
argument_list|()
condition|;
name|textSet
operator|.
name|remove
argument_list|(
name|texts
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_de
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_de_AT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAllTextsWithNullLanguage
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|textSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|NL_TEST_all
argument_list|)
decl_stmt|;
comment|// test removal of null language
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
name|field
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|getText
argument_list|(
name|field
argument_list|)
init|;
name|texts
operator|.
name|hasNext
argument_list|()
condition|;
name|textSet
operator|.
name|remove
argument_list|(
name|texts
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_noLang
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|textSet
operator|.
name|remove
argument_list|(
name|NL_TEST_string
argument_list|)
argument_list|)
expr_stmt|;
comment|// and this should be the stringTest
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAllNaturalLanguageValues
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// add a reference to ensure that only texts (and strings) are removed
name|String
name|testReference
init|=
literal|"http://www.test.org/test"
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|testReference
argument_list|)
expr_stmt|;
comment|// test removal of all natural language values by parsing no languages
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|texts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// not texts any more
name|assertTrue
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// but still a reference!
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAllNaturalLanguageValuesByParsingAnEmptyArray
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// add a reference to ensure that only texts (and strings) are removed
name|String
name|testReference
init|=
literal|"http://www.test.org/test"
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|testReference
argument_list|)
expr_stmt|;
comment|// test removal of all natural language values by parsing an empty language array
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
name|field
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|texts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// text of the added reference is still present
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAllNaturalLanguageValuesByParsingNullAsLanguageArray
parameter_list|()
block|{
name|String
name|field
init|=
literal|"urn:the.field:used.for.this.Test"
decl_stmt|;
name|Representation
name|rep
init|=
name|initNaturalLanguageTest
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// add a reference to ensure that only texts (and strings) are removed
name|String
name|testReference
init|=
literal|"http://www.test.org/test"
decl_stmt|;
name|rep
operator|.
name|addReference
argument_list|(
name|field
argument_list|,
name|testReference
argument_list|)
expr_stmt|;
comment|// test removal of all natural language values by parsing only a single argument
name|rep
operator|.
name|removeAllNaturalText
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Text
argument_list|>
name|texts
init|=
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|texts
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rep
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// text of the added reference is still present
block|}
comment|/**      * Default ID for {@link Representation} used for testing      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_REPRESENTATION_ID
init|=
literal|"urm:test:representation.defaultId"
decl_stmt|;
comment|/**      * Creates a {@link Representation} instance by using the parsed ID or      * {@link RepresentationTest#DEFAULT_REPRESENTATION_ID} if<code>null</code> is parsed as ID.      *       * @param id      *            The ID or<code>null</code> to use the default ID      * @return the Representation.      */
specifier|protected
name|Representation
name|createRepresentation
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|DEFAULT_REPRESENTATION_ID
expr_stmt|;
block|}
return|return
name|getValueFactory
argument_list|()
operator|.
name|createRepresentation
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
end_class

end_unit

