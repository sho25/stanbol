begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|ldpathtemplate
package|;
end_package

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|engine
operator|.
name|TemplateEngine
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|cache
operator|.
name|TemplateLoader
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|TemplateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|GraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|ldpath
operator|.
name|clerezza
operator|.
name|ClerezzaBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This service renders a GraphNode to a Writer given the   * path of an ldpath template  *  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|LdRenderer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|LdRenderer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEMPLATES_PATH_IN_BUNDLES
init|=
literal|"templates/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LdRenderer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|TemplateLoader
name|templateLoader
decl_stmt|;
comment|/** 	 * Renders a GraphNode with a template located in the templates 	 * folder of any active bundle 	 *  	 * @param node the GraphNode to be rendered 	 * @param templatePath the freemarker path to the template 	 * @param out where the result is written to 	 */
specifier|public
name|void
name|render
parameter_list|(
name|GraphNode
name|node
parameter_list|,
specifier|final
name|String
name|templatePath
parameter_list|,
name|Writer
name|out
parameter_list|)
block|{
comment|//A GraphNode backend could be graph unspecific, so the same engine could be
comment|//reused, possibly being signifantly more performant (caching, etc.)
name|RDFBackend
argument_list|<
name|Resource
argument_list|>
name|backend
init|=
operator|new
name|ClerezzaBackend
argument_list|(
name|node
operator|.
name|getGraph
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|context
init|=
name|node
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|TemplateEngine
argument_list|<
name|Resource
argument_list|>
name|engine
init|=
operator|new
name|TemplateEngine
argument_list|<
name|Resource
argument_list|>
argument_list|(
name|backend
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setTemplateLoader
argument_list|(
name|templateLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|processFileTemplate
argument_list|(
name|context
argument_list|,
name|templatePath
argument_list|,
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TemplateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

