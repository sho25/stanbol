begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2011 Salzburg Research.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|LDPath
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|exception
operator|.
name|LDPathParseException
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|model
operator|.
name|freemarker
operator|.
name|TemplateNodeModel
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|model
operator|.
name|freemarker
operator|.
name|TemplateStackModel
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|model
operator|.
name|freemarker
operator|.
name|TemplateWrapperModel
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|model
operator|.
name|transformers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|*
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|util
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|core
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A directive for inserting values retrieved with LDPath. It can be used in several forms:  *<p/>  *<strong>Value Insertion (without body):</strong><br/>  * Allows inserting the value of a path expression. The path expression should specify an XML schema type for the  * type conversion. If no type is given, string conversion is assumed. If the expression would return several values,  * only the first result is taken.  *<p/>  *<code>  *&lt;@ldpath path="... :: xsd:type">  *</code>  *<p/>  *<strong>Value Iteration (with body):</strong>  * Allows iterating over result nodes of a path expression. Further path expressions can be used to select the  * values of each result node.  *<p/>  *<code>  *&lt;@ldpath path="..."><br/>  *&nbsp;...<br/>  *&nbsp;&lt;@ldpath path="..."><br/>  *&nbsp;...<br/>  *&lt;/@ldpath>  *</code>  *<p/>  * If a loop variable is given, it will be bound to the context node. The context node is also implicitly available  * as the variable "context".  *<p/>  * Author: Sebastian Schaffert  */
end_comment

begin_class
specifier|public
class|class
name|LDPathDirective
parameter_list|<
name|Node
parameter_list|>
implements|implements
name|TemplateDirectiveModel
block|{
specifier|private
name|LDPath
argument_list|<
name|Node
argument_list|>
name|ldpath
decl_stmt|;
specifier|private
name|RDFBackend
argument_list|<
name|Node
argument_list|>
name|backend
decl_stmt|;
specifier|public
name|LDPathDirective
parameter_list|(
name|RDFBackend
argument_list|<
name|Node
argument_list|>
name|backend
parameter_list|)
block|{
name|this
operator|.
name|ldpath
operator|=
operator|new
name|LDPath
argument_list|<
name|Node
argument_list|>
argument_list|(
name|backend
argument_list|)
expr_stmt|;
name|this
operator|.
name|backend
operator|=
name|backend
expr_stmt|;
comment|// register custom freemarker transformers for the parser so we get the results immediately in the freemarker model
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"string"
argument_list|,
operator|new
name|TemplateScalarTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"decimal"
argument_list|,
operator|new
name|TemplateLongTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"integer"
argument_list|,
operator|new
name|TemplateIntegerTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"long"
argument_list|,
operator|new
name|TemplateLongTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"short"
argument_list|,
operator|new
name|TemplateIntegerTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"double"
argument_list|,
operator|new
name|TemplateDoubleTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"float"
argument_list|,
operator|new
name|TemplateFloatTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"dateTime"
argument_list|,
operator|new
name|TemplateDateTransformer
argument_list|<
name|Node
argument_list|>
argument_list|(
name|TemplateDateModel
operator|.
name|DATETIME
argument_list|)
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"date"
argument_list|,
operator|new
name|TemplateDateTransformer
argument_list|<
name|Node
argument_list|>
argument_list|(
name|TemplateDateModel
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"time"
argument_list|,
operator|new
name|TemplateDateTransformer
argument_list|<
name|Node
argument_list|>
argument_list|(
name|TemplateDateModel
operator|.
name|TIME
argument_list|)
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"boolean"
argument_list|,
operator|new
name|TemplateBooleanTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ldpath
operator|.
name|registerTransformer
argument_list|(
name|Constants
operator|.
name|NS_XSD
operator|+
literal|"anyURI"
argument_list|,
operator|new
name|TemplateScalarTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes this user-defined directive; called by FreeMarker when the user-defined      * directive is called in the template.      *      * @param env      the current processing environment. Note that you can access      *                 the output {@link java.io.Writer Writer} by {@link freemarker.core.Environment#getOut()}.      * @param params   the parameters (if any) passed to the directive as a      *                 map of key/value pairs where the keys are {@link String}-s and the      *                 values are {@link freemarker.template.TemplateModel} instances. This is never      *<code>null</code>. If you need to convert the template models to POJOs,      *                 you can use the utility methods in the {@link freemarker.template.utility.DeepUnwrap} class.      * @param loopVars an array that corresponds to the "loop variables", in      *                 the order as they appear in the directive call. ("Loop variables" are out-parameters      *                 that are available to the nested body of the directive; see in the Manual.)      *                 You set the loop variables by writing this array. The length of the array gives the      *                 number of loop-variables that the caller has specified.      *                 Never<code>null</code>, but can be a zero-length array.      * @param body     an object that can be used to render the nested content (body) of      *                 the directive call. If the directive call has no nested content (i.e., it is like      *                 [@myDirective /] or [@myDirective][/@myDirective]), then this will be      *<code>null</code>.      * @throws freemarker.template.TemplateException      *      * @throws java.io.IOException      */
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Environment
name|env
parameter_list|,
name|Map
name|params
parameter_list|,
name|TemplateModel
index|[]
name|loopVars
parameter_list|,
name|TemplateDirectiveBody
name|body
parameter_list|)
throws|throws
name|TemplateException
throws|,
name|IOException
block|{
name|TemplateStackModel
name|contextStack
init|=
operator|(
name|TemplateStackModel
operator|)
name|env
operator|.
name|getVariable
argument_list|(
literal|"context"
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextStack
operator|==
literal|null
operator|||
name|contextStack
operator|.
name|empty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TemplateModelException
argument_list|(
literal|"error; no context node available"
argument_list|)
throw|;
block|}
name|TemplateNodeModel
argument_list|<
name|Node
argument_list|>
name|context
init|=
operator|(
name|TemplateNodeModel
argument_list|<
name|Node
argument_list|>
operator|)
name|contextStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|SimpleScalar
name|pathScalar
init|=
operator|(
name|SimpleScalar
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathScalar
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TemplateException
argument_list|(
literal|"the directive has been called without a path parameter"
argument_list|,
name|env
argument_list|)
throw|;
block|}
name|String
name|path
init|=
name|pathScalar
operator|.
name|getAsString
argument_list|()
decl_stmt|;
name|TemplateWrapperModel
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|namespacesWrapped
init|=
operator|(
name|TemplateWrapperModel
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|env
operator|.
name|getGlobalVariable
argument_list|(
literal|"namespaces"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
decl_stmt|;
if|if
condition|(
name|namespacesWrapped
operator|==
literal|null
condition|)
block|{
name|namespaces
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|namespacesWrapped
operator|=
operator|new
name|TemplateWrapperModel
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|setGlobalVariable
argument_list|(
literal|"namespaces"
argument_list|,
name|namespacesWrapped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|namespaces
operator|=
name|namespacesWrapped
operator|.
name|getAdaptedObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
comment|// value insertion
if|if
condition|(
operator|!
name|path
operator|.
name|contains
argument_list|(
literal|"::"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
literal|":: xsd:string"
expr_stmt|;
block|}
try|try
block|{
name|Collection
name|results
init|=
name|ldpath
operator|.
name|pathTransform
argument_list|(
name|context
operator|.
name|getNode
argument_list|()
argument_list|,
name|path
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Object
name|result
init|=
name|results
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|TemplateNumberModel
condition|)
block|{
name|env
operator|.
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
name|FormatUtil
operator|.
name|formatNumber
argument_list|(
operator|(
operator|(
name|TemplateNumberModel
operator|)
name|result
operator|)
operator|.
name|getAsNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|TemplateDateModel
condition|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|TemplateDateModel
operator|)
name|result
operator|)
operator|.
name|getDateType
argument_list|()
condition|)
block|{
case|case
name|TemplateDateModel
operator|.
name|DATE
case|:
name|env
operator|.
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
name|FormatUtil
operator|.
name|formatDate
argument_list|(
operator|(
operator|(
name|TemplateDateModel
operator|)
name|result
operator|)
operator|.
name|getAsDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TemplateDateModel
operator|.
name|TIME
case|:
name|env
operator|.
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
name|FormatUtil
operator|.
name|formatTime
argument_list|(
operator|(
operator|(
name|TemplateDateModel
operator|)
name|result
operator|)
operator|.
name|getAsDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TemplateDateModel
operator|.
name|DATETIME
case|:
name|env
operator|.
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
name|FormatUtil
operator|.
name|formatDateTime
argument_list|(
operator|(
operator|(
name|TemplateDateModel
operator|)
name|result
operator|)
operator|.
name|getAsDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|env
operator|.
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
name|FormatUtil
operator|.
name|formatDateTime
argument_list|(
operator|(
operator|(
name|TemplateDateModel
operator|)
name|result
operator|)
operator|.
name|getAsDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|TemplateScalarModel
condition|)
block|{
name|env
operator|.
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
operator|(
operator|(
name|TemplateScalarModel
operator|)
name|result
operator|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|TemplateBooleanModel
condition|)
block|{
name|env
operator|.
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|TemplateBooleanModel
operator|)
name|result
operator|)
operator|.
name|getAsBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// else write nothing
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TemplateException
argument_list|(
literal|"invalid path for ldpath directive: "
operator|+
name|path
argument_list|,
name|e
argument_list|,
name|env
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
for|for
control|(
name|Node
name|node
range|:
name|ldpath
operator|.
name|pathQuery
argument_list|(
name|context
operator|.
name|getNode
argument_list|()
argument_list|,
name|path
argument_list|,
name|namespaces
argument_list|)
control|)
block|{
name|contextStack
operator|.
name|push
argument_list|(
operator|new
name|TemplateNodeModel
argument_list|<
name|Node
argument_list|>
argument_list|(
name|node
argument_list|,
name|backend
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|loopVars
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|loopVars
index|[
literal|0
index|]
operator|=
operator|new
name|TemplateNodeModel
argument_list|<
name|Node
argument_list|>
argument_list|(
name|node
argument_list|,
name|backend
argument_list|)
expr_stmt|;
block|}
name|body
operator|.
name|render
argument_list|(
name|env
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
name|contextStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LDPathParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TemplateException
argument_list|(
literal|"invalid path for ldpath directive: "
operator|+
name|path
argument_list|,
name|ex
argument_list|,
name|env
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

