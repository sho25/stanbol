begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2011 Salzburg Research.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|model
operator|.
name|transformers
package|;
end_package

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|backend
operator|.
name|RDFBackend
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|api
operator|.
name|transformers
operator|.
name|NodeTransformer
import|;
end_import

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|model
operator|.
name|transformers
operator|.
name|DateTimeTransformer
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|TemplateDateModel
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|TemplateModelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * Transform a node into the freemarker date type ({@link freemarker.template.TemplateDateModel}).  *<p/>  * Author: Sebastian Schaffert  */
end_comment

begin_class
specifier|public
class|class
name|TemplateDateTransformer
parameter_list|<
name|Node
parameter_list|>
implements|implements
name|NodeTransformer
argument_list|<
name|TemplateDateModel
argument_list|,
name|Node
argument_list|>
block|{
specifier|private
name|DateTimeTransformer
argument_list|<
name|Node
argument_list|>
name|delegate
decl_stmt|;
specifier|private
name|int
name|type
init|=
name|TemplateDateModel
operator|.
name|UNKNOWN
decl_stmt|;
specifier|public
name|TemplateDateTransformer
parameter_list|()
block|{
name|delegate
operator|=
operator|new
name|DateTimeTransformer
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TemplateDateTransformer
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Transform the KiWiNode node into the datatype T. In case the node cannot be transformed to      * the respective datatype, throws an IllegalArgumentException that needs to be caught by the class      * carrying out the transformation.      *      * @param node      * @return      */
annotation|@
name|Override
specifier|public
name|TemplateDateModel
name|transform
parameter_list|(
specifier|final
name|RDFBackend
argument_list|<
name|Node
argument_list|>
name|nodeRDFBackend
parameter_list|,
specifier|final
name|Node
name|node
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
operator|new
name|TemplateDateModel
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|getAsDate
parameter_list|()
throws|throws
name|TemplateModelException
block|{
return|return
name|delegate
operator|.
name|transform
argument_list|(
name|nodeRDFBackend
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDateType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

