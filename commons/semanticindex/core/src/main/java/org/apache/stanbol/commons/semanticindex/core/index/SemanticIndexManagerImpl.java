begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|semanticindex
operator|.
name|core
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|semanticindex
operator|.
name|index
operator|.
name|IndexManagementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|semanticindex
operator|.
name|index
operator|.
name|SemanticIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|semanticindex
operator|.
name|index
operator|.
name|SemanticIndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|ServiceReferenceRankingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_comment
comment|/**  * Default implementation for {@link SemanticIndexManager}  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|SemanticIndexManagerImpl
implements|implements
name|SemanticIndexManager
block|{
specifier|private
name|ComponentContext
name|componentContext
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|componentContext
parameter_list|)
block|{
name|this
operator|.
name|componentContext
operator|=
name|componentContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SemanticIndex
argument_list|<
name|?
argument_list|>
name|getIndex
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IndexManagementException
block|{
return|return
name|getIndex
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SemanticIndex
argument_list|<
name|?
argument_list|>
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IndexManagementException
block|{
return|return
name|getIndexes
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SemanticIndex
argument_list|<
name|?
argument_list|>
name|getIndexByEndpointType
parameter_list|(
name|String
name|endpointType
parameter_list|)
throws|throws
name|IndexManagementException
block|{
return|return
name|getIndex
argument_list|(
literal|null
argument_list|,
name|endpointType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SemanticIndex
argument_list|<
name|?
argument_list|>
argument_list|>
name|getIndexesByEndpointType
parameter_list|(
name|String
name|endpointType
parameter_list|)
throws|throws
name|IndexManagementException
block|{
return|return
name|getIndexes
argument_list|(
literal|null
argument_list|,
name|endpointType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SemanticIndex
argument_list|<
name|?
argument_list|>
name|getIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|endpointType
parameter_list|)
throws|throws
name|IndexManagementException
block|{
name|List
argument_list|<
name|SemanticIndex
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|getIndexList
argument_list|(
name|name
argument_list|,
name|endpointType
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SemanticIndex
argument_list|<
name|?
argument_list|>
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|endpointType
parameter_list|)
throws|throws
name|IndexManagementException
block|{
return|return
name|getIndexList
argument_list|(
name|name
argument_list|,
name|endpointType
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SemanticIndex
argument_list|<
name|?
argument_list|>
argument_list|>
name|getIndexList
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|endpointType
parameter_list|,
name|boolean
name|multiple
parameter_list|)
block|{
name|BundleContext
name|bundleContext
init|=
name|componentContext
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SemanticIndex
argument_list|<
name|?
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|SemanticIndex
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ServiceReference
index|[]
name|refs
init|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|SemanticIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|refs
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// TODO: rw move the ServiceReferenceRankingComperator to a utils module
name|Arrays
operator|.
name|sort
argument_list|(
name|refs
argument_list|,
name|ServiceReferenceRankingComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ServiceReference
name|ref
range|:
name|refs
control|)
block|{
name|SemanticIndex
argument_list|<
name|?
argument_list|>
name|si
init|=
operator|(
name|SemanticIndex
argument_list|<
name|?
argument_list|>
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|endpointType
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// search both the RESTful and the JAVA interfaces
name|Set
argument_list|<
name|String
argument_list|>
name|endpointTypes
init|=
name|si
operator|.
name|getRESTSearchEndpoints
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointTypes
operator|!=
literal|null
operator|&&
name|endpointTypes
operator|.
name|contains
argument_list|(
name|endpointType
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointTypes
operator|=
name|si
operator|.
name|getSearchEndPoints
argument_list|()
operator|.
name|keySet
argument_list|()
expr_stmt|;
if|if
condition|(
name|endpointTypes
operator|!=
literal|null
operator|&&
name|endpointTypes
operator|.
name|contains
argument_list|(
name|endpointType
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// service does not match requirements -> unget the service
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|multiple
operator|==
literal|false
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore as there is no filter
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

