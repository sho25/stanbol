begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|AbstractTripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_comment
comment|/**  * {@link TripleCollection} implementation that uses indexes for<ul>  *<li> subject, predicate, object [SPO]  *<li> predicate, object, subject [POS]  *<li> object, subject, predicate [OSP]  *</ul>  * Indexes are maintained in {@link TreeSet}s with according {@link Comparator}  * instances ({@link #SPO_COMPARATOR}, {@link #POS_COMPARATOR} ,  * {@link #OSP_COMPARATOR}). {@link Resource}s are compared first using the  * {@link Resource#hashCode()} and only if this matches by using  * {@link Resource}{@link #toString()}.<p>  * The {@link #filter(NonLiteral, UriRef, Resource)} implementation is based  * on {@link TreeSet#subSet(Object, Object)}. All Iterators returned directly  * operate on top of one of the internal indexes.  *<p>  * This class is not public, implementations should use {@link IndexedGraph} or  * {@link IndexedMGraph}.  *  * @author rwesten  */
end_comment

begin_class
class|class
name|IndexedTripleCollection
extends|extends
name|AbstractTripleCollection
implements|implements
name|TripleCollection
block|{
specifier|private
specifier|final
name|NavigableSet
argument_list|<
name|Triple
argument_list|>
name|spo
init|=
operator|new
name|TreeSet
argument_list|<
name|Triple
argument_list|>
argument_list|(
name|SPO_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NavigableSet
argument_list|<
name|Triple
argument_list|>
name|pos
init|=
operator|new
name|TreeSet
argument_list|<
name|Triple
argument_list|>
argument_list|(
name|POS_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NavigableSet
argument_list|<
name|Triple
argument_list|>
name|osp
init|=
operator|new
name|TreeSet
argument_list|<
name|Triple
argument_list|>
argument_list|(
name|OSP_COMPARATOR
argument_list|)
decl_stmt|;
comment|/**      * Creates an empty {@link IndexedTripleCollection}      */
specifier|public
name|IndexedTripleCollection
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a {@link IndexedTripleCollection} using the passed iterator, the iterator       * is consumed before the constructor returns      *       * @param iterator      */
specifier|public
name|IndexedTripleCollection
parameter_list|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iterator
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|performAdd
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a {@link IndexedTripleCollection} for the specified collection of triples,      * subsequent modification of baseSet do not affect the created instance.      *      * @param iterable over triples      */
specifier|public
name|IndexedTripleCollection
parameter_list|(
name|Collection
argument_list|<
name|Triple
argument_list|>
name|baseCollection
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|spo
operator|.
name|addAll
argument_list|(
name|baseCollection
argument_list|)
expr_stmt|;
name|pos
operator|.
name|addAll
argument_list|(
name|baseCollection
argument_list|)
expr_stmt|;
name|osp
operator|.
name|addAll
argument_list|(
name|baseCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|performFilter
parameter_list|(
specifier|final
name|NonLiteral
name|subject
parameter_list|,
specifier|final
name|UriRef
name|predicate
parameter_list|,
specifier|final
name|Resource
name|object
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|==
literal|null
operator|&&
name|predicate
operator|==
literal|null
operator|&&
name|object
operator|==
literal|null
condition|)
block|{
comment|//[n,n,n]
return|return
name|createIterator
argument_list|(
name|spo
argument_list|,
name|spo
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|Triple
name|low
init|=
operator|new
name|TripleImpl
argument_list|(
name|subject
operator|==
literal|null
condition|?
name|MIN
else|:
name|subject
argument_list|,
name|predicate
operator|==
literal|null
condition|?
name|MIN
else|:
name|predicate
argument_list|,
name|object
operator|==
literal|null
condition|?
name|MIN
else|:
name|object
argument_list|)
decl_stmt|;
specifier|final
name|Triple
name|high
init|=
operator|new
name|TripleImpl
argument_list|(
name|subject
operator|==
literal|null
condition|?
name|MAX
else|:
name|subject
argument_list|,
name|predicate
operator|==
literal|null
condition|?
name|MAX
else|:
name|predicate
argument_list|,
name|object
operator|==
literal|null
condition|?
name|MAX
else|:
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
name|predicate
operator|!=
literal|null
operator|&&
name|object
operator|!=
literal|null
condition|)
block|{
comment|// [S,P,O]
comment|//NOTE: low.equals(high) in that case!
return|return
name|createIterator
argument_list|(
name|spo
argument_list|,
name|spo
operator|.
name|subSet
argument_list|(
name|low
argument_list|,
literal|true
argument_list|,
name|low
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
name|object
operator|==
literal|null
condition|)
block|{
comment|//[S,n,n], [S,P,n]
return|return
name|createIterator
argument_list|(
name|spo
argument_list|,
name|spo
operator|.
name|subSet
argument_list|(
name|low
argument_list|,
name|high
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|predicate
operator|!=
literal|null
condition|)
block|{
comment|//[n,P,n], [n,P,O]
return|return
name|createIterator
argument_list|(
name|pos
argument_list|,
name|pos
operator|.
name|subSet
argument_list|(
name|low
argument_list|,
name|high
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|//[n,n,O] , [S,n,O]
return|return
name|createIterator
argument_list|(
name|osp
argument_list|,
name|osp
operator|.
name|subSet
argument_list|(
name|low
argument_list|,
name|high
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|performAdd
parameter_list|(
name|Triple
name|triple
parameter_list|)
block|{
if|if
condition|(
name|spo
operator|.
name|add
argument_list|(
name|triple
argument_list|)
condition|)
block|{
name|osp
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
return|return
name|pos
operator|.
name|add
argument_list|(
name|triple
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|performRemove
parameter_list|(
name|Triple
name|triple
parameter_list|)
block|{
if|if
condition|(
name|spo
operator|.
name|remove
argument_list|(
name|triple
argument_list|)
condition|)
block|{
name|osp
operator|.
name|remove
argument_list|(
name|triple
argument_list|)
expr_stmt|;
return|return
name|pos
operator|.
name|remove
argument_list|(
name|triple
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|spo
operator|.
name|size
argument_list|()
return|;
block|}
comment|//    @Override
comment|//    public Iterator<Triple> iterator() {
comment|//        return createIterator(spo, spo.iterator());
comment|//    }
comment|/**      * Returns an Iterator that ensures that calls to {@link Iterator#remove()}      * remove items from all three indexes      * @param index      * @param base      * @return      */
specifier|private
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|createIterator
parameter_list|(
specifier|final
name|SortedSet
argument_list|<
name|Triple
argument_list|>
name|index
parameter_list|,
specifier|final
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|base
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Triple
argument_list|>
argument_list|()
block|{
name|Triple
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|base
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Triple
name|next
parameter_list|()
block|{
name|current
operator|=
name|base
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|base
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|index
operator|==
name|spo
operator|)
condition|)
block|{
name|spo
operator|.
name|remove
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|index
operator|==
name|pos
operator|)
condition|)
block|{
name|pos
operator|.
name|remove
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|index
operator|==
name|osp
operator|)
condition|)
block|{
name|osp
operator|.
name|remove
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
comment|/**      * Compares Triples based on Subject, Predicate, Object      */
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Triple
argument_list|>
name|SPO_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Triple
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Triple
name|a
parameter_list|,
name|Triple
name|b
parameter_list|)
block|{
name|int
name|c
init|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getSubject
argument_list|()
argument_list|,
name|b
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|b
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getObject
argument_list|()
argument_list|,
name|b
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Compares Triples based on Predicate, Object, Subject      */
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Triple
argument_list|>
name|POS_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Triple
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Triple
name|a
parameter_list|,
name|Triple
name|b
parameter_list|)
block|{
name|int
name|c
init|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|b
operator|.
name|getPredicate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getObject
argument_list|()
argument_list|,
name|b
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getSubject
argument_list|()
argument_list|,
name|b
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
specifier|protected
specifier|static
name|UriRef
name|MIN
init|=
operator|new
name|UriRef
argument_list|(
literal|""
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
specifier|protected
specifier|static
name|UriRef
name|MAX
init|=
operator|new
name|UriRef
argument_list|(
literal|""
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
comment|/**      * Compares Triples based on Object, Subject, Predicate      */
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Triple
argument_list|>
name|OSP_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Triple
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Triple
name|a
parameter_list|,
name|Triple
name|b
parameter_list|)
block|{
name|int
name|c
init|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getObject
argument_list|()
argument_list|,
name|b
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getSubject
argument_list|()
argument_list|,
name|b
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|IndexedTripleCollection
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|b
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Compares two resources with special support for {@link #MIN} and      * {@link #MAX} to allow building {@link SortedSet#subSet(Object, Object)}      * for<code>null</code> values parsed to       * {@link #filter(NonLiteral, UriRef, Resource)}      * @param a      * @param b      * @return      */
specifier|protected
specifier|static
name|int
name|compare
parameter_list|(
name|Resource
name|a
parameter_list|,
name|Resource
name|b
parameter_list|)
block|{
name|int
name|hashA
init|=
name|a
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|int
name|hashB
init|=
name|b
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|hashA
operator|!=
name|hashB
condition|)
block|{
return|return
name|hashA
operator|>
name|hashB
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
return|return
name|a
operator|==
name|MIN
operator|||
name|b
operator|==
name|MAX
condition|?
operator|-
literal|1
else|:
name|a
operator|==
name|MAX
operator|||
name|b
operator|==
name|MIN
condition|?
literal|1
else|:
name|a
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

