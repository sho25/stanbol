begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|test
operator|.
name|MGraphTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|FOAF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|IndexedGraphTest
extends|extends
name|MGraphTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexedGraphTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|UriRef
name|uriRef1
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/foo"
argument_list|)
decl_stmt|;
specifier|private
name|UriRef
name|uriRef2
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/bar"
argument_list|)
decl_stmt|;
specifier|private
name|UriRef
name|uriRef3
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/test"
argument_list|)
decl_stmt|;
specifier|private
name|Triple
name|triple1
init|=
operator|new
name|TripleImpl
argument_list|(
name|uriRef1
argument_list|,
name|uriRef2
argument_list|,
name|uriRef3
argument_list|)
decl_stmt|;
specifier|private
name|Triple
name|triple2
init|=
operator|new
name|TripleImpl
argument_list|(
name|uriRef2
argument_list|,
name|uriRef2
argument_list|,
name|uriRef1
argument_list|)
decl_stmt|;
specifier|private
name|Triple
name|triple3
init|=
operator|new
name|TripleImpl
argument_list|(
name|uriRef3
argument_list|,
name|uriRef1
argument_list|,
name|uriRef3
argument_list|)
decl_stmt|;
specifier|private
name|Triple
name|triple4
init|=
operator|new
name|TripleImpl
argument_list|(
name|uriRef1
argument_list|,
name|uriRef3
argument_list|,
name|uriRef2
argument_list|)
decl_stmt|;
specifier|private
name|Triple
name|triple5
init|=
operator|new
name|TripleImpl
argument_list|(
name|uriRef2
argument_list|,
name|uriRef3
argument_list|,
name|uriRef2
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|MGraph
name|getEmptyMGraph
parameter_list|()
block|{
return|return
operator|new
name|IndexedMGraph
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bNodeConsitency
parameter_list|()
block|{
name|MGraph
name|mGraph
init|=
name|getEmptyMGraph
argument_list|()
decl_stmt|;
specifier|final
name|BNode
name|bNode
init|=
operator|new
name|BNode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|BNode
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|BNode
name|bNodeClone
init|=
operator|new
name|BNode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|BNode
return|;
block|}
block|}
decl_stmt|;
name|mGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|bNode
argument_list|,
name|uriRef1
argument_list|,
name|uriRef2
argument_list|)
argument_list|)
expr_stmt|;
name|mGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|bNodeClone
argument_list|,
name|uriRef2
argument_list|,
name|uriRef3
argument_list|)
argument_list|)
expr_stmt|;
name|NonLiteral
name|bNodeBack
init|=
name|mGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|uriRef1
argument_list|,
name|uriRef2
argument_list|)
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The bnode we get back is not equals to the one we added"
argument_list|,
name|bNode
argument_list|,
name|bNodeBack
argument_list|)
expr_stmt|;
name|NonLiteral
name|bNodeBack2
init|=
name|mGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|uriRef2
argument_list|,
name|uriRef3
argument_list|)
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The returnned bnodes are no longer equals"
argument_list|,
name|bNodeBack
argument_list|,
name|bNodeBack2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not finding a triple when searching with equal bNode"
argument_list|,
name|mGraph
operator|.
name|filter
argument_list|(
name|bNodeBack
argument_list|,
name|uriRef2
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iteratorRemove
parameter_list|()
block|{
name|TripleCollection
name|itc
init|=
operator|new
name|IndexedTripleCollection
argument_list|()
decl_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple1
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple2
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple3
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple4
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple5
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iter
init|=
name|itc
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|itc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeAll
parameter_list|()
block|{
name|TripleCollection
name|itc
init|=
operator|new
name|IndexedTripleCollection
argument_list|()
decl_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple1
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple2
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple3
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple4
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple5
argument_list|)
expr_stmt|;
name|TripleCollection
name|itc2
init|=
operator|new
name|IndexedTripleCollection
argument_list|()
decl_stmt|;
name|itc2
operator|.
name|add
argument_list|(
name|triple1
argument_list|)
expr_stmt|;
name|itc2
operator|.
name|add
argument_list|(
name|triple3
argument_list|)
expr_stmt|;
name|itc2
operator|.
name|add
argument_list|(
name|triple5
argument_list|)
expr_stmt|;
name|itc
operator|.
name|removeAll
argument_list|(
name|itc2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|itc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filterIteratorRemove
parameter_list|()
block|{
name|TripleCollection
name|itc
init|=
operator|new
name|IndexedTripleCollection
argument_list|()
decl_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple1
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple2
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple3
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple4
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple5
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iter
init|=
name|itc
operator|.
name|filter
argument_list|(
name|uriRef1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|itc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConcurrentModificationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|TripleCollection
name|itc
init|=
operator|new
name|IndexedTripleCollection
argument_list|()
decl_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple1
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple2
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple3
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple4
argument_list|)
expr_stmt|;
name|itc
operator|.
name|add
argument_list|(
name|triple5
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iter
init|=
name|itc
operator|.
name|filter
argument_list|(
name|uriRef1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|itc
operator|.
name|remove
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|itc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Holds the test data to perform       * {@link TripleCollection#filter(NonLiteral, UriRef, Resource)}      * tests on {@link TripleCollection} implementations      * @author rwesten      */
specifier|public
specifier|static
specifier|final
class|class
name|TestCase
block|{
specifier|public
specifier|final
name|List
argument_list|<
name|NonLiteral
argument_list|>
name|subjects
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|Resource
argument_list|>
name|objects
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|UriRef
argument_list|>
name|predicates
decl_stmt|;
comment|/**          * Create a new Test with a maximum number of subjects, predicates and          * objects based on data in the parsed triple collection          * @param tc the data          * @param sNum the maximum number of subjects          * @param pNum the maximum number of predicates          * @param oNum the maximum number of objects          */
specifier|public
name|TestCase
parameter_list|(
name|TripleCollection
name|tc
parameter_list|,
name|int
name|sNum
parameter_list|,
name|int
name|pNum
parameter_list|,
name|int
name|oNum
parameter_list|)
block|{
name|Set
argument_list|<
name|NonLiteral
argument_list|>
name|subjects
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Resource
argument_list|>
name|objects
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|predicates
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|tc
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjects
operator|.
name|size
argument_list|()
operator|<
literal|100
condition|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|predicates
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|t
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|<
literal|100
condition|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|t
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|subjects
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|NonLiteral
argument_list|>
argument_list|(
name|subjects
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|predicates
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|(
name|predicates
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|objects
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|(
name|objects
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerformance
parameter_list|()
block|{
comment|//Reduced values to fix STANBOL-
name|Set
argument_list|<
name|Triple
argument_list|>
name|graph
init|=
operator|new
name|HashSet
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|iterations
init|=
literal|100
decl_stmt|;
comment|//reduced from 1000
name|int
name|graphsize
init|=
literal|100000
decl_stmt|;
name|Long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test Seed: {}"
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|createGraph
argument_list|(
name|graph
argument_list|,
name|graphsize
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Load Time ({} triples)"
argument_list|,
name|graph
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MGraph
name|sg
init|=
operator|new
name|SimpleMGraph
argument_list|(
name|graph
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... {}: {}"
argument_list|,
name|sg
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|MGraph
name|ig
init|=
operator|new
name|IndexedMGraph
argument_list|(
name|graph
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... {}: {}"
argument_list|,
name|ig
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
comment|//Simple Graph reference test
name|TestCase
name|testCase
init|=
operator|new
name|TestCase
argument_list|(
name|sg
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
comment|//reduced form 100,5,100
name|log
operator|.
name|info
argument_list|(
literal|"Filter Performance Test (graph size {} triples, iterations {})"
argument_list|,
name|graphsize
argument_list|,
name|iterations
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" --- TEST {} with {} triples ---"
argument_list|,
name|sg
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|sg
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|sgr
init|=
name|executeTest
argument_list|(
name|sg
argument_list|,
name|testCase
argument_list|,
name|iterations
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" --- TEST completed in {}ms"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" --- TEST {} {} triples ---"
argument_list|,
name|ig
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|sg
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|igr
init|=
name|executeTest
argument_list|(
name|ig
argument_list|,
name|testCase
argument_list|,
name|iterations
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" --- TEST completed in {}ms"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sgr
argument_list|,
name|igr
argument_list|)
expr_stmt|;
comment|//validate filter implementation
block|}
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|executeTest
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|testResults
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|start
decl_stmt|;
name|long
name|resultCount
decl_stmt|;
comment|//[S,P,O]
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|testSPO
argument_list|(
name|graph
argument_list|,
name|test
argument_list|,
name|testCount
argument_list|)
expr_stmt|;
name|testResults
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... run [S,P,O] in {}ms with {} results"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
comment|//[S,P,n]
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|testSPn
argument_list|(
name|graph
argument_list|,
name|test
argument_list|,
name|testCount
argument_list|)
expr_stmt|;
name|testResults
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... run [S,P,n] in {}ms with {} results"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
comment|//[S,n,O]
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|testSnO
argument_list|(
name|graph
argument_list|,
name|test
argument_list|,
name|testCount
argument_list|)
expr_stmt|;
name|testResults
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... run [S,n,O] in {}ms with {} results"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
comment|//[n,P,O]
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|testnPO
argument_list|(
name|graph
argument_list|,
name|test
argument_list|,
name|testCount
argument_list|)
expr_stmt|;
name|testResults
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... run [n,P,O] in {}ms with {} results"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
comment|//[S,n,n]
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|testSnn
argument_list|(
name|graph
argument_list|,
name|test
argument_list|,
name|testCount
argument_list|)
expr_stmt|;
name|testResults
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... run [S,n,n] in {}ms with {} results"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
comment|//[n,P,n]
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|testnPn
argument_list|(
name|graph
argument_list|,
name|test
argument_list|,
name|testCount
argument_list|)
expr_stmt|;
name|testResults
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... run [n,P,n] in {}ms with {} results"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
comment|//[n,n,O]
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|testnnO
argument_list|(
name|graph
argument_list|,
name|test
argument_list|,
name|testCount
argument_list|)
expr_stmt|;
name|testResults
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"... run [n,n,O] in {}ms with {} results"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
return|return
name|testResults
return|;
block|}
specifier|private
name|long
name|testSPO
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|si
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|pi
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|oi
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|testCount
condition|;
name|num
operator|++
control|)
block|{
name|oi
operator|=
name|num
operator|%
name|test
operator|.
name|objects
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|oi
operator|==
literal|0
condition|)
block|{
name|pi
operator|++
expr_stmt|;
name|pi
operator|=
name|pi
operator|%
name|test
operator|.
name|predicates
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pi
operator|==
literal|0
condition|)
block|{
name|si
operator|++
expr_stmt|;
name|si
operator|=
name|si
operator|%
name|test
operator|.
name|subjects
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
name|test
operator|.
name|subjects
operator|.
name|get
argument_list|(
name|si
argument_list|)
argument_list|,
name|test
operator|.
name|predicates
operator|.
name|get
argument_list|(
name|pi
argument_list|)
argument_list|,
name|test
operator|.
name|objects
operator|.
name|get
argument_list|(
name|oi
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|long
name|testSPn
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|si
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|pi
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|testCount
condition|;
name|num
operator|++
control|)
block|{
name|pi
operator|=
name|num
operator|%
name|test
operator|.
name|predicates
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|pi
operator|==
literal|0
condition|)
block|{
name|si
operator|++
expr_stmt|;
name|si
operator|=
name|si
operator|%
name|test
operator|.
name|subjects
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
name|test
operator|.
name|subjects
operator|.
name|get
argument_list|(
name|si
argument_list|)
argument_list|,
name|test
operator|.
name|predicates
operator|.
name|get
argument_list|(
name|pi
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|long
name|testSnO
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|si
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|oi
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|testCount
condition|;
name|num
operator|++
control|)
block|{
name|oi
operator|=
name|num
operator|%
name|test
operator|.
name|objects
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|oi
operator|==
literal|0
condition|)
block|{
name|si
operator|++
expr_stmt|;
name|si
operator|=
name|si
operator|%
name|test
operator|.
name|subjects
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
name|test
operator|.
name|subjects
operator|.
name|get
argument_list|(
name|si
argument_list|)
argument_list|,
literal|null
argument_list|,
name|test
operator|.
name|objects
operator|.
name|get
argument_list|(
name|oi
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|long
name|testnPO
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|pi
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|oi
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|testCount
condition|;
name|num
operator|++
control|)
block|{
name|oi
operator|=
name|num
operator|%
name|test
operator|.
name|objects
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|oi
operator|==
literal|0
condition|)
block|{
name|pi
operator|++
expr_stmt|;
name|pi
operator|=
name|pi
operator|%
name|test
operator|.
name|predicates
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|test
operator|.
name|predicates
operator|.
name|get
argument_list|(
name|pi
argument_list|)
argument_list|,
name|test
operator|.
name|objects
operator|.
name|get
argument_list|(
name|oi
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|long
name|testSnn
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|si
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|testCount
condition|;
name|num
operator|++
control|)
block|{
name|si
operator|=
name|num
operator|%
name|test
operator|.
name|subjects
operator|.
name|size
argument_list|()
expr_stmt|;
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
name|test
operator|.
name|subjects
operator|.
name|get
argument_list|(
name|si
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|long
name|testnPn
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|pi
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|testCount
condition|;
name|num
operator|++
control|)
block|{
name|pi
operator|=
name|num
operator|%
name|test
operator|.
name|predicates
operator|.
name|size
argument_list|()
expr_stmt|;
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|test
operator|.
name|predicates
operator|.
name|get
argument_list|(
name|pi
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|long
name|testnnO
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|TestCase
name|test
parameter_list|,
name|int
name|testCount
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|oi
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|testCount
condition|;
name|num
operator|++
control|)
block|{
name|oi
operator|=
name|num
operator|%
name|test
operator|.
name|objects
operator|.
name|size
argument_list|()
expr_stmt|;
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|test
operator|.
name|objects
operator|.
name|get
argument_list|(
name|oi
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
specifier|static
name|void
name|createGraph
parameter_list|(
name|Collection
argument_list|<
name|Triple
argument_list|>
name|tc
parameter_list|,
name|int
name|triples
parameter_list|,
name|Long
name|seed
parameter_list|)
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
if|if
condition|(
name|seed
operator|!=
literal|null
condition|)
block|{
name|rnd
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
name|LiteralFactory
name|lf
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|//randoms are in the range [0..3]
name|double
name|l
init|=
literal|1.0
decl_stmt|;
comment|//literal
name|double
name|i
init|=
name|l
operator|/
literal|3
decl_stmt|;
comment|//int
name|double
name|d
init|=
name|l
operator|*
literal|2
operator|/
literal|3
decl_stmt|;
comment|//double
name|double
name|b
init|=
literal|2.0
decl_stmt|;
comment|//bNode
name|double
name|nb
init|=
name|b
operator|-
operator|(
name|l
operator|*
literal|2
operator|/
literal|3
operator|)
decl_stmt|;
comment|//create new bNode
name|double
name|random
decl_stmt|;
name|NonLiteral
name|subject
init|=
literal|null
decl_stmt|;
name|UriRef
name|predicate
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|UriRef
argument_list|>
name|predicateList
init|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|RDF
operator|.
name|first
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|RDF
operator|.
name|rest
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|RDF
operator|.
name|type
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|RDFS
operator|.
name|label
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|RDFS
operator|.
name|comment
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|RDFS
operator|.
name|range
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|RDFS
operator|.
name|domain
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|FOAF
operator|.
name|name
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|FOAF
operator|.
name|nick
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|FOAF
operator|.
name|homepage
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|FOAF
operator|.
name|age
argument_list|)
expr_stmt|;
name|predicateList
operator|.
name|add
argument_list|(
name|FOAF
operator|.
name|depiction
argument_list|)
expr_stmt|;
name|String
name|URI_PREFIX
init|=
literal|"http://www.test.org/bigGraph/ref"
decl_stmt|;
name|Language
name|DE
init|=
operator|new
name|Language
argument_list|(
literal|"de"
argument_list|)
decl_stmt|;
name|Language
name|EN
init|=
operator|new
name|Language
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|UriRef
argument_list|>
name|predicates
init|=
name|predicateList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BNode
argument_list|>
name|bNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|BNode
argument_list|>
argument_list|()
decl_stmt|;
name|bNodes
operator|.
name|add
argument_list|(
operator|new
name|BNode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|tc
operator|.
name|size
argument_list|()
operator|<
name|triples
condition|;
name|count
operator|++
control|)
block|{
name|random
operator|=
name|rnd
operator|.
name|nextDouble
argument_list|()
operator|*
literal|3
expr_stmt|;
if|if
condition|(
name|random
operator|>=
literal|2.5
operator|||
name|count
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|random
operator|<=
literal|2.75
condition|)
block|{
name|subject
operator|=
operator|new
name|UriRef
argument_list|(
name|URI_PREFIX
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|rndIndex
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|random
operator|-
literal|2.75
operator|)
operator|*
name|bNodes
operator|.
name|size
argument_list|()
operator|/
operator|(
literal|3.0
operator|-
literal|2.75
operator|)
argument_list|)
decl_stmt|;
name|subject
operator|=
name|bNodes
operator|.
name|get
argument_list|(
name|rndIndex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
operator|>
literal|2.0
operator|||
name|count
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|predicates
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|predicateList
argument_list|,
name|rnd
argument_list|)
expr_stmt|;
name|predicates
operator|=
name|predicateList
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|predicate
operator|=
name|predicates
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|<=
name|l
condition|)
block|{
comment|//literal
if|if
condition|(
name|random
operator|<=
name|i
condition|)
block|{
name|tc
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|<=
name|d
condition|)
block|{
name|tc
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|lf
operator|.
name|createTypedLiteral
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PlainLiteral
name|text
decl_stmt|;
if|if
condition|(
name|random
operator|<=
name|i
condition|)
block|{
name|text
operator|=
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"Literal for "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|<=
name|d
condition|)
block|{
name|text
operator|=
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"An English literal for "
operator|+
name|count
argument_list|,
name|EN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
operator|=
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"Ein Deutsches Literal für "
operator|+
name|count
argument_list|,
name|DE
argument_list|)
expr_stmt|;
block|}
name|tc
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|random
operator|<=
name|b
condition|)
block|{
comment|//bnode
name|BNode
name|bnode
decl_stmt|;
if|if
condition|(
name|random
operator|<=
name|nb
condition|)
block|{
name|bnode
operator|=
operator|new
name|BNode
argument_list|()
expr_stmt|;
name|bNodes
operator|.
name|add
argument_list|(
name|bnode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//>nb<b
name|int
name|rndIndex
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|random
operator|-
name|nb
operator|)
operator|*
name|bNodes
operator|.
name|size
argument_list|()
operator|/
operator|(
name|b
operator|-
name|nb
operator|)
argument_list|)
decl_stmt|;
name|bnode
operator|=
name|bNodes
operator|.
name|get
argument_list|(
name|rndIndex
argument_list|)
expr_stmt|;
block|}
name|tc
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|bnode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//UriRef
name|tc
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
operator|new
name|UriRef
argument_list|(
name|URI_PREFIX
operator|+
name|count
operator|*
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

