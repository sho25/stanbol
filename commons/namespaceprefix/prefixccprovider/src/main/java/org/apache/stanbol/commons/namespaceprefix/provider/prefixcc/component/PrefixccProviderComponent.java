begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|provider
operator|.
name|prefixcc
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|provider
operator|.
name|prefixcc
operator|.
name|PrefixccProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
operator|.
name|OfflineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OSGI component configuring and registering the {@link PrefixccProvider}.  * Non-OSGI users do not need to bother with this.<p>  * This class mainly exists to keep the {@link PrefixccProvider} independent of  * the Stanbol {@link OfflineMode} switch  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|OPTIONAL
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PrefixccProviderComponent
operator|.
name|UPDATE_INTERVAL
argument_list|,
name|intValue
operator|=
literal|60
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
operator|-
literal|100
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|PrefixccProviderComponent
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrefixccProviderComponent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The duration       */
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_INTERVAL
init|=
literal|"stanbol.commons.namespaceprovider.prefixcc.update-interval"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_UPDATE_INTERVAL
init|=
literal|60
decl_stmt|;
name|ServiceRegistration
name|providerRegistration
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|,
name|bind
operator|=
literal|"bindOfflineMode"
argument_list|,
name|unbind
operator|=
literal|"unbindOfflineMode"
argument_list|)
specifier|private
name|OfflineMode
name|offlineMode
decl_stmt|;
name|int
name|updateInterval
decl_stmt|;
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|providerProperties
init|=
literal|null
decl_stmt|;
specifier|private
name|BundleContext
name|bc
decl_stmt|;
specifier|private
name|PrefixccProvider
name|provider
decl_stmt|;
specifier|protected
name|void
name|bindOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
name|mode
expr_stmt|;
name|updateProviderState
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindOfflineMode
parameter_list|(
name|OfflineMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|offlineMode
operator|=
literal|null
expr_stmt|;
name|updateProviderState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|bc
operator|=
name|ctx
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|UPDATE_INTERVAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|updateInterval
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|updateInterval
operator|=
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|UPDATE_INTERVAL
argument_list|,
literal|"Unable to parse integer value from the configured value '"
operator|+
name|value
operator|+
literal|"' (type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|updateInterval
operator|=
name|DEFAULT_UPDATE_INTERVAL
expr_stmt|;
block|}
if|if
condition|(
name|updateInterval
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Negative update interval '{}' configured. Will use default '{}'!"
argument_list|,
name|updateInterval
argument_list|,
name|DEFAULT_UPDATE_INTERVAL
argument_list|)
expr_stmt|;
name|updateInterval
operator|=
name|DEFAULT_UPDATE_INTERVAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|updateInterval
operator|==
literal|0
condition|)
block|{
name|updateInterval
operator|=
name|DEFAULT_UPDATE_INTERVAL
expr_stmt|;
block|}
comment|//we need to copy over the service ranking
name|providerProperties
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|Object
name|ranking
init|=
name|ctx
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranking
operator|!=
literal|null
condition|)
block|{
name|providerProperties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|ranking
argument_list|)
expr_stmt|;
block|}
name|updateProviderState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
name|providerProperties
operator|=
literal|null
expr_stmt|;
name|updateProviderState
argument_list|()
expr_stmt|;
name|bc
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * uses the {@link #providerProperties} and {@link #offlineMode}      * state to decide if the {@link PrefixccProvider} should be registered as      * a service or not. If the current state is different the desired state it      * creates and register / unregister destroys the {@link #provider<p>      * Consumes: {@link #providerProperties} and {@link #offlineMode}<br>      * Manages: {@link #provider} and {@link #providerRegistration}      */
specifier|private
specifier|synchronized
name|void
name|updateProviderState
parameter_list|()
block|{
if|if
condition|(
name|providerProperties
operator|!=
literal|null
operator|&&
name|offlineMode
operator|==
literal|null
condition|)
block|{
comment|//register
if|if
condition|(
name|providerRegistration
operator|==
literal|null
condition|)
block|{
name|provider
operator|=
operator|new
name|PrefixccProvider
argument_list|(
name|updateInterval
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|providerRegistration
operator|=
name|bc
operator|.
name|registerService
argument_list|(
name|NamespacePrefixProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|provider
argument_list|,
name|providerProperties
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"registered prefix.cc NamespacePrefixProvider ..."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//unregister
if|if
condition|(
name|providerRegistration
operator|!=
literal|null
condition|)
block|{
name|providerRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"unregistered prefix.cc NamespacePrefixProvider ..."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
name|provider
operator|.
name|close
argument_list|()
expr_stmt|;
name|provider
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

