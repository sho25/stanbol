begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|provider
operator|.
name|stanbol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|mappings
operator|.
name|DefaultNamespaceMappingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|service
operator|.
name|StanbolNamespacePrefixService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultProviderTest
block|{
specifier|private
specifier|static
name|NamespacePrefixService
name|service
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|//this test for now does not use predefined mappings
name|URL
name|mappingURL
init|=
name|DefaultProviderTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"testnamespaceprefix.mappings"
argument_list|)
decl_stmt|;
comment|//Assert.assertNotNull(mappingURL);
name|File
name|mappingFile
decl_stmt|;
if|if
condition|(
name|mappingURL
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mappingFile
operator|=
operator|new
name|File
argument_list|(
name|mappingURL
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|mappingFile
operator|=
operator|new
name|File
argument_list|(
name|mappingURL
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Assert.assertTrue(mappingFile.isFile());
block|}
else|else
block|{
name|mappingFile
operator|=
operator|new
name|File
argument_list|(
literal|"testnamespaceprefix.mappings"
argument_list|)
expr_stmt|;
block|}
name|service
operator|=
operator|new
name|StanbolNamespacePrefixService
argument_list|(
name|mappingFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultMappings
parameter_list|()
block|{
comment|//this tests both the implementation of the getNamespace and getPrefix mappings
comment|//and that the defaultNamespaceMappingProvider is correctly loaded by the ServiceLoader
for|for
control|(
name|DefaultNamespaceMappingsEnum
name|defaultMapping
range|:
name|DefaultNamespaceMappingsEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultMapping
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|service
operator|.
name|getNamespace
argument_list|(
name|defaultMapping
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|service
operator|.
name|getPrefixes
argument_list|(
name|defaultMapping
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|defaultMapping
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

