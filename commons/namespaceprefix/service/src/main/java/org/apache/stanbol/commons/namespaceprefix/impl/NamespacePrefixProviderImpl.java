begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespaceMappingUtils
operator|.
name|checkNamespace
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespaceMappingUtils
operator|.
name|checkPrefix
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespaceMappingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
operator|.
name|NamespacePrefixProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@link NamespacePrefixProvider}.  * Mappings can not be modified.  */
end_comment

begin_class
specifier|public
class|class
name|NamespacePrefixProviderImpl
implements|implements
name|NamespacePrefixProvider
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NamespacePrefixProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|namespaceMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Reads "{prefix}\t{namespace}\n" mappings form the parsed InputStream      * @param is the stream to read the data from      * @throws IOException on any error while reading from the parsed stream      */
specifier|public
name|NamespacePrefixProviderImpl
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|readPrefixMappings
argument_list|(
name|is
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read the mappings form the parsed map      * @param mappings      */
specifier|public
name|NamespacePrefixProviderImpl
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addMapping
argument_list|(
name|mapping
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapping
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Expected to be called only during activation      * @param in      * @param validate if mappings should be validated before adding      * @throws IOException      */
specifier|private
name|void
name|readPrefixMappings
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|IOException
block|{
name|LineIterator
name|it
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|mapping
init|=
name|it
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'#'
condition|)
block|{
name|int
name|sep
init|=
name|mapping
operator|.
name|indexOf
argument_list|(
literal|'\t'
argument_list|)
decl_stmt|;
if|if
condition|(
name|sep
operator|<
literal|0
operator|||
name|mapping
operator|.
name|length
argument_list|()
operator|<=
name|sep
operator|+
literal|1
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Illegal prefix mapping '{}'"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|old
init|=
name|addMapping
argument_list|(
name|mapping
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sep
argument_list|)
argument_list|,
name|mapping
operator|.
name|substring
argument_list|(
name|sep
operator|+
literal|1
argument_list|)
argument_list|,
name|validate
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Duplicate mention of prefix {}. Override mapping from {} to {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|mapping
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sep
argument_list|)
block|,
name|old
block|,
name|mapping
operator|.
name|substring
argument_list|(
name|sep
operator|+
literal|1
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//comment
name|log
operator|.
name|debug
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Internally used to add an mapping      * @param prefix the prefix      * @param namespace the namespace      * @param validate if true the prefix and namespace values are validated      * using {@link NamespaceMappingUtils#checkPrefix(String)} and       * {@link NamespaceMappingUtils#checkNamespace(String)}.      * @return the previous mapping or<code>null</code> if none.      */
specifier|protected
name|String
name|addMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespace
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
if|if
condition|(
name|validate
condition|)
block|{
name|boolean
name|p
init|=
name|checkPrefix
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|boolean
name|n
init|=
name|checkNamespace
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|||
operator|!
name|n
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid Namespace Mapping: prefix '{}' {} , namespace '{}' {} -> mapping ignored!"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|prefix
block|,
name|p
condition|?
literal|"valid"
else|:
literal|"invalid"
block|,
name|namespace
block|,
name|n
condition|?
literal|"valid"
else|:
literal|"invalid"
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|String
name|old
init|=
name|prefixMap
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|old
argument_list|)
condition|)
block|{
comment|//if the mapping changed
comment|//(2) update the inverse mappings (ensure read only lists!)
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
name|namespaceMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixes
operator|==
literal|null
condition|)
block|{
name|namespaceMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|ps
init|=
operator|new
name|String
index|[
name|prefixes
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|prefixes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ps
index|[
name|i
index|]
operator|=
name|prefixes
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|ps
index|[
name|i
index|]
operator|=
name|prefix
expr_stmt|;
name|namespaceMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|old
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|prefixMap
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
name|namespaceMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|prefixes
operator|==
literal|null
operator|||
name|prefixes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|prefixes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
name|namespaceMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|prefixes
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|prefixes
return|;
block|}
block|}
end_class

end_unit

