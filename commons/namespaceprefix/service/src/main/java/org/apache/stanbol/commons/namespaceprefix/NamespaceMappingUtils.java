begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|namespaceprefix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_class
specifier|public
class|class
name|NamespaceMappingUtils
block|{
comment|/**      * This pattern checks for invalid chars within an prefix.      * The used pattern is<code>[^a-zA-Z0-9\-_]</code>. Meaning that prefixes      * are allows to include alpha numeric characters including '-' and '_'      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|PREFIX_VALIDATION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^a-zA-Z0-9\\-_]"
argument_list|)
decl_stmt|;
comment|/**      * Getter for the prefix for the parsed {prefix}:{localName} value.      * If the parsed value does not follow this pattern (but is an URI) than      * this method will return<code>null</code>      * @param shortNameOrUri the shortName or an URI      * @return the prefix or<code>null</code> if an URI was parsed      */
specifier|public
specifier|static
name|String
name|getPrefix
parameter_list|(
name|String
name|shortNameOrUri
parameter_list|)
block|{
comment|//ignore null and empty strings
if|if
condition|(
name|shortNameOrUri
operator|==
literal|null
operator|||
name|shortNameOrUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|//not a short uri
block|}
name|int
name|index
init|=
name|shortNameOrUri
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|&&
name|shortNameOrUri
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
return|return
literal|""
return|;
comment|//default namespace
block|}
elseif|else
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|shortNameOrUri
operator|.
name|length
argument_list|()
operator|==
operator|(
name|index
operator|+
literal|1
operator|)
operator|||
comment|//{prefix}: was parsed
name|shortNameOrUri
operator|.
name|charAt
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|==
literal|'/'
operator|||
operator|(
name|index
operator|==
literal|3
operator|&&
name|shortNameOrUri
operator|.
name|startsWith
argument_list|(
literal|"urn"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
comment|// URI was parsed ({protocol}:/...)
block|}
else|else
block|{
return|return
name|shortNameOrUri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
comment|//not a short name
block|}
block|}
comment|/**      * Extracts the namespace form the parsed URI or returns<code>null</code>      * of the URI does not contain an namesoace (e.g. http://www.test.org,       * urn:someValue)      * @param uri the uri      * @return the namespace including the separator ('#' or '/' or ':')      */
specifier|public
specifier|static
name|String
name|getNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
specifier|final
name|int
name|index
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"urn:"
argument_list|)
condition|)
block|{
name|index
operator|=
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|5
condition|)
block|{
comment|//urn:?: is the shortest possible namesoace
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|int
name|protocolIndex
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|":/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocolIndex
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
comment|//not an absolute URI
block|}
name|index
operator|=
name|Math
operator|.
name|max
argument_list|(
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
argument_list|,
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocolIndex
operator|+
literal|3
operator|>
name|index
condition|)
block|{
comment|//in '{port}://' the 2nd '/' is no namespace
return|return
literal|null
return|;
block|}
block|}
comment|//do not convert if the parsed uri does not contain a local name
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
comment|// and the namespace is not the protocol
return|return
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Uses the {@link NamespacePrefixService#PREFIX_VALIDATION_PATTERN} to check      * if the parsed prefix is valid      * @param prefix the prefix to check      * @return<code>true</code> if valid. Othervise<code>false</code>      */
specifier|public
specifier|static
name|boolean
name|checkPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|PREFIX_VALIDATION_PATTERN
operator|.
name|matcher
argument_list|(
name|prefix
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
comment|/**      * Checks of the parsed namespace is valid. Namespaces starting with      * '<code>urn:</code>' need to end with ':'. Otherwise namespaces need to      * end with '/' or '#' and contain a protocol (checked by searching ':/').      * No further validation on the parsed namespace are done       * @param namespace the namespace      * @return<code>true</code> if valid. Othervise<code>false</code>      */
specifier|public
specifier|static
name|boolean
name|checkNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
operator|||
name|namespace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|namespace
operator|.
name|startsWith
argument_list|(
literal|"urn:"
argument_list|)
condition|?
name|namespace
operator|.
name|charAt
argument_list|(
name|namespace
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|':'
else|:
operator|(
name|namespace
operator|.
name|charAt
argument_list|(
name|namespace
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'#'
operator|||
name|namespace
operator|.
name|charAt
argument_list|(
name|namespace
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
name|namespace
operator|.
name|indexOf
argument_list|(
literal|":/"
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Utility intended to be used during activate of OSGI components that support      * the use of '{prefix}:{localname}' in its configurations. The      * {@link NamespacePrefixService} is assumed as optional so that users can      * use<code>ReferenceCardinality.OPTIONAL_UNARY</code> to inject the service.      *<p>      * Here is an example      *<code><pre>      *     @Reference(cardinality=ReferenceCardinality.OPTIONAL_UNARY)      *     protected NamespacePrefixService nps;      *</pre></code>      * @param nps the {@link NamespacePrefixService} or<code>null</code> if not      * available      * @param property the configuration property (used for creating {@link ConfigurationException}s)      * @param value configured value. Might be both a '{prefix}:{localname}' or the full URI.      * @return the full URI      * @throws ConfigurationException if the conversion was not possible because      * the {@link #nsPrefixService} is<code>null</code> or the prefix is       * unknown to the service      */
specifier|public
specifier|static
name|String
name|getConfiguredUri
parameter_list|(
name|NamespacePrefixService
name|nps
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|nps
operator|!=
literal|null
condition|)
block|{
name|String
name|fieldUri
init|=
name|nps
operator|.
name|getFullName
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|property
argument_list|,
literal|"The prefix '"
operator|+
name|NamespaceMappingUtils
operator|.
name|getPrefix
argument_list|(
name|value
argument_list|)
operator|+
literal|"' is unknown (not mapped to an "
operator|+
literal|"namespace) by the Stanbol Namespace Prefix Mapping Service. Please "
operator|+
literal|"change the configuration to use the full URI instead of '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
return|return
name|fieldUri
return|;
block|}
elseif|else
if|if
condition|(
name|NamespaceMappingUtils
operator|.
name|getPrefix
argument_list|(
name|value
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|property
argument_list|,
literal|"'{prefix}:{localname}' configurations "
operator|+
literal|"such as '"
operator|+
name|value
operator|+
literal|"' are only supported if the NamespacePrefixService is "
operator|+
literal|"available for the Stanbol instance (what is currently not the case). Please "
operator|+
literal|"change the configuration to use the full URI"
argument_list|)
throw|;
block|}
else|else
block|{
comment|//no service but a full uri
return|return
name|value
return|;
block|}
block|}
comment|/**      * Utility intended to be used to by components that do allow the use of      * '{prefix}:{localname}' in its configurations. The {@link NamespacePrefixService}      * is considered optional.        * @param nps the {@link NamespacePrefixService} or<code>null</code> if not      * available      * @param value configured value. Might be both a '{prefix}:{localname}' or the full URI.      * @return the full URI      * @throws IllegalArgumentException if the conversion was not possible because      * the {@link #nsPrefixService} is<code>null</code> or the prefix is       * unknown to the service      */
specifier|public
specifier|static
name|String
name|getConfiguredUri
parameter_list|(
name|NamespacePrefixService
name|nps
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|nps
operator|!=
literal|null
condition|)
block|{
name|String
name|fieldUri
init|=
name|nps
operator|.
name|getFullName
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The prefix '"
operator|+
name|NamespaceMappingUtils
operator|.
name|getPrefix
argument_list|(
name|value
argument_list|)
operator|+
literal|"' is unknown (not mapped to an "
operator|+
literal|"namespace) by the Stanbol Namespace Prefix Mapping Service. Please "
operator|+
literal|"change the configuration to use the full URI instead of '"
operator|+
name|value
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
return|return
name|fieldUri
return|;
block|}
elseif|else
if|if
condition|(
name|NamespaceMappingUtils
operator|.
name|getPrefix
argument_list|(
name|value
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'{prefix}:{localname}' configurations "
operator|+
literal|"such as '"
operator|+
name|value
operator|+
literal|"' are only supported if the NamespacePrefixService is "
operator|+
literal|"available for the Stanbol instance (what is currently not the case). Please "
operator|+
literal|"change the configuration to use the full URI"
argument_list|)
throw|;
block|}
else|else
block|{
comment|//no service but a full uri
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

