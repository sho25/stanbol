begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|impl
operator|.
name|MainDataFileProvider
operator|.
name|requireProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
specifier|public
class|class
name|DirectoryDataFileProvider
implements|implements
name|DataFileProvider
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|DATA_FILES_FOLDER_PROP
init|=
name|MainDataFileProvider
operator|.
name|DATA_FILES_FOLDER_PROP
decl_stmt|;
specifier|private
name|File
name|dataFilesFolder
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|String
name|folderName
init|=
name|requireProperty
argument_list|(
name|ctx
operator|.
name|getProperties
argument_list|()
argument_list|,
name|DATA_FILES_FOLDER_PROP
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|dataFilesFolder
operator|=
operator|new
name|File
argument_list|(
name|folderName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dataFilesFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dataFilesFolder
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DATA_FILES_FOLDER_PROP
argument_list|,
literal|"Unable to create the configured Directory "
operator|+
name|dataFilesFolder
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|dataFilesFolder
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DATA_FILES_FOLDER_PROP
argument_list|,
literal|"The configured DataFile directory "
operator|+
name|dataFilesFolder
operator|+
literal|" does already exists but is not a directory!"
argument_list|)
throw|;
block|}
comment|//else exists and is a directory!
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
specifier|final
name|String
name|bundleSymbolicName
parameter_list|,
specifier|final
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|comments
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dataFile
init|=
name|getDataFile
argument_list|(
name|bundleSymbolicName
argument_list|,
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Datafile '"
argument_list|)
operator|.
name|append
argument_list|(
name|filename
argument_list|)
operator|.
name|append
argument_list|(
literal|"' not present in directory '"
operator|+
name|dataFilesFolder
operator|+
literal|"'"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|dataFile
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pae
parameter_list|)
block|{
name|Exception
name|e
init|=
name|pae
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|RuntimeException
operator|.
name|class
operator|.
name|cast
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|(
specifier|final
name|String
name|bundleSymbolicName
parameter_list|,
specifier|final
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|comments
parameter_list|)
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getDataFile
argument_list|(
name|bundleSymbolicName
argument_list|,
name|filename
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pae
parameter_list|)
block|{
name|Exception
name|e
init|=
name|pae
operator|.
name|getException
argument_list|()
decl_stmt|;
throw|throw
name|RuntimeException
operator|.
name|class
operator|.
name|cast
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param bundleSymbolicName      * @param filename      * @return      */
specifier|private
name|File
name|getDataFile
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
specifier|final
name|String
name|filename
parameter_list|)
block|{
comment|// First look for the file in our data folder,
comment|// with and without bundle symbolic name prefix
specifier|final
name|String
index|[]
name|candidateNames
init|=
name|bundleSymbolicName
operator|==
literal|null
condition|?
operator|new
name|String
index|[]
block|{
name|filename
block|}
else|:
operator|new
name|String
index|[]
block|{
name|bundleSymbolicName
operator|+
literal|"-"
operator|+
name|filename
block|,
name|filename
block|}
decl_stmt|;
name|File
name|dataFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|candidateNames
control|)
block|{
name|dataFile
operator|=
operator|new
name|File
argument_list|(
name|dataFilesFolder
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Looking for file {}"
argument_list|,
name|dataFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataFile
operator|.
name|exists
argument_list|()
operator|&&
name|dataFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"File found in data files folder: {}"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|dataFile
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|dataFile
return|;
block|}
block|}
end_class

end_unit

