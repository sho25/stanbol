begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|impl
operator|.
name|tracking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Reference to a DataFile (name and bundleSymbolicName) that implements  * {@link #hashCode()} and {@link #equals(Object)} so that it can be used  * with the java Collections API  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DataFileReference
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|bundleSymbolicName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|protected
name|DataFileReference
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DataFileReference
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|bundleSymbolicName
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DataFileReference
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|name
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DataFileReference
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The name of tracked Resources MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|bundleSymbolicName
operator|=
name|bundleSymbolicName
expr_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|properties
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|properties
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The name of the resource      * @return the name (ensured to be not<code>null</code> nor empty)      */
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return the bundleSymbolicName      */
specifier|public
specifier|final
name|String
name|getBundleSymbolicName
parameter_list|()
block|{
return|return
name|bundleSymbolicName
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
operator|+
operator|(
name|bundleSymbolicName
operator|!=
literal|null
condition|?
name|bundleSymbolicName
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|DataFileReference
operator|&&
operator|(
operator|(
name|DataFileReference
operator|)
name|o
operator|)
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|(
name|bundleSymbolicName
operator|==
literal|null
condition|?
comment|//if null check if others is also null
operator|(
operator|(
name|DataFileReference
operator|)
name|o
operator|)
operator|.
name|bundleSymbolicName
operator|==
literal|null
else|:
comment|//else check for equality
name|bundleSymbolicName
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DataFileReference
operator|)
name|o
operator|)
operator|.
name|bundleSymbolicName
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|'['
operator|+
name|name
operator|+
operator|(
name|bundleSymbolicName
operator|!=
literal|null
condition|?
literal|'@'
operator|+
name|bundleSymbolicName
else|:
literal|""
operator|)
operator|+
literal|']'
return|;
block|}
comment|/**      * @return the properties      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

