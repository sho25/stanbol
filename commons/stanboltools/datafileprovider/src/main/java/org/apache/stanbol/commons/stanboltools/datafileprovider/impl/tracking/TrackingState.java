begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|impl
operator|.
name|tracking
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileListener
import|;
end_import

begin_comment
comment|/**  * Internally used to manage {@link DataFileListener} and the state of  * tracked DataFiles.<p>  * Note that different {@link DataFileListener}s may have different {@link STATE}  * for the same RDFTerm (e.g. if a new {@link DataFileListener} is registered  * for a resource it will start with {@link STATE#UNKNOWN} while all the other  * Listeners will be in the state of the resource (either {@link STATE#AVAILABLE}  * or {@link STATE#UNAVAILABLE}). Only after the next tracking the newly added  * {@link DataFileListener} will get fired and be updated to the current state  * of the RDFTerm.<p>  * This model will also allow to introduce an ERROR state that could be used  * to manage that some {@link DataFileListener} where not able to consume a  * current version of a data file.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TrackingState
implements|implements
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|DataFileListener
argument_list|,
name|STATE
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|DataFileListener
argument_list|,
name|STATE
argument_list|>
name|listenerStates
init|=
operator|new
name|HashMap
argument_list|<
name|DataFileListener
argument_list|,
name|STATE
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|STATE
argument_list|>
name|states
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|STATE
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|isListener
parameter_list|(
name|DataFileListener
name|listener
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listenerStates
init|)
block|{
return|return
name|listenerStates
operator|.
name|containsKey
argument_list|(
name|listener
argument_list|)
return|;
block|}
block|}
comment|/**      * Adds an new listener and sets its state to {@link STATE#UNKNOWN}. If the      * listener is already present its current state will be changed to      * {@link STATE#UNKNOWN}.      * @param listener the listener to add      */
specifier|public
name|void
name|addListener
parameter_list|(
name|DataFileListener
name|listener
parameter_list|)
block|{
name|updateListener
argument_list|(
name|listener
argument_list|,
name|STATE
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds/Update the listener with the parsed state      * @param listener the listener to add/update      * @param state the new state of the listener      * @return the previous state of the listener or<code>null</code> if added      */
specifier|public
name|STATE
name|updateListener
parameter_list|(
name|DataFileListener
name|listener
parameter_list|,
name|STATE
name|state
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listenerStates
init|)
block|{
name|state
operator|=
name|listenerStates
operator|.
name|put
argument_list|(
name|listener
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|states
operator|.
name|addAll
argument_list|(
name|listenerStates
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|DataFileListener
argument_list|,
name|STATE
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|DataFileListener
argument_list|,
name|STATE
argument_list|>
argument_list|>
name|entryClone
decl_stmt|;
synchronized|synchronized
init|(
name|listenerStates
init|)
block|{
name|entryClone
operator|=
operator|new
name|HashSet
argument_list|<
name|Entry
argument_list|<
name|DataFileListener
argument_list|,
name|STATE
argument_list|>
argument_list|>
argument_list|(
name|listenerStates
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|entryClone
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Removes a listener      * @param listener the listener      * @return the state of the removed listener or<code>null</code> if the      * listener was not known.      */
specifier|public
name|STATE
name|removeListener
parameter_list|(
name|DataFileListener
name|listener
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listenerStates
init|)
block|{
name|STATE
name|state
init|=
name|listenerStates
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|states
operator|.
name|addAll
argument_list|(
name|listenerStates
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
block|}
comment|/**      * The number of listeners      * @return the number of listener      */
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|listenerStates
init|)
block|{
return|return
name|listenerStates
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the {@link STATE} if all listeners are in the same {@link STATE}      * or otherwise<code>null</code>. This is intended to allow a fast check      * if some processing is necessary on checking a specific resource. This      * method assumes that in an high percentage of cases no processing is      * necessary.      * @return The common state for all {@link DataFileListener} or<code>null</code>      * if no common state exists.      */
specifier|public
name|STATE
name|getTrackingState
parameter_list|()
block|{
synchronized|synchronized
init|(
name|listenerStates
init|)
block|{
return|return
name|states
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|states
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
block|}
comment|/**      * Checks if there are no more listeners left      * @return<code>true</code> if there are no listeners. Otherwise<code>false</code>      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|listenerStates
init|)
block|{
return|return
name|listenerStates
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

