begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|offline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Activator for the offline mode bundle  */
end_comment

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OFFLINE_MODE_PROPERTY
init|=
literal|"org.apache.stanbol.offline.mode"
decl_stmt|;
specifier|private
name|ServiceRegistration
name|serviceReg
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|s
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|OFFLINE_MODE_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|svc
init|=
literal|null
decl_stmt|;
name|String
name|svcName
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|svc
operator|=
operator|new
name|OfflineMode
argument_list|()
block|{}
expr_stmt|;
name|svcName
operator|=
name|OfflineMode
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"OfflineMode activated by {}={}"
argument_list|,
name|OFFLINE_MODE_PROPERTY
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|svc
operator|=
operator|new
name|OnlineMode
argument_list|()
block|{}
expr_stmt|;
name|svcName
operator|=
name|OnlineMode
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Offline mode is not set by {}, OnlineMode activated"
argument_list|,
name|OFFLINE_MODE_PROPERTY
argument_list|)
expr_stmt|;
block|}
name|serviceReg
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|svcName
argument_list|,
name|svc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|serviceReg
operator|!=
literal|null
condition|)
block|{
name|serviceReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|serviceReg
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

