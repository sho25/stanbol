begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|bundle
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link DataFileProvider} interface that uses the  * {@link Bundle#getResource(String)} method to load data files. This  * method uses the Bundle classpath to search for resource.<p>  * Note that this provider searches only the resources within this bundle. The  * bundle classpath is NOT used!<p>  * Users should use the {@link #close()} method to remove listeners and free up  * resources.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|BundleDataFileProvider
implements|implements
name|DataFileProvider
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Bundle
name|bundle
decl_stmt|;
comment|/**      * List with the paths to search. Guaranteed to contain at least a single      * Element. All contained paths end with {@link File#separator}       */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|searchPaths
decl_stmt|;
comment|/**      * Creates a {@link DataFileProvider} that uses the {@link Bundle} to lookup      * data files in the directories specified by the parsed relatives path.      * @param bundleContext the bundle context used to initialise this DataFileProvider      * @param searchPaths the relative paths to the directories used to search      * for requested data files. The parsed paths are searches in the provided      * order. Parsed paths are normalised by adding missing {@link File#separator}      * to its end. if<code>null</code> or an empty list is parsed data files are      * searched relative to the root folder of the bundle. Adding an empty      * String or the<code>null</code> element allows to search the root folder in      * addition to other paths.      */
specifier|public
name|BundleDataFileProvider
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|searchPaths
parameter_list|)
block|{
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed BundleContext MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
if|if
condition|(
name|searchPaths
operator|==
literal|null
operator|||
name|searchPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|searchPaths
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|searchPaths
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|searchPaths
control|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|//null element is interpreted as the "" path
name|path
operator|=
name|File
operator|.
name|separator
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
comment|//normalise
name|path
operator|=
name|path
operator|+
name|File
operator|.
name|separator
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|paths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|//do not add paths more than once
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|searchPaths
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|comments
parameter_list|)
throws|throws
name|IOException
block|{
comment|//If the symbolic name is not null check that is equals to the symbolic
comment|//name used to create this classpath data file provider
if|if
condition|(
name|bundleSymbolicName
operator|!=
literal|null
operator|&&
operator|!
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|bundleSymbolicName
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Requested bundleSymbolicName {} does not match mine ({}), request ignored"
argument_list|,
name|bundleSymbolicName
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|URL
name|resource
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|relativePathIterator
init|=
name|searchPaths
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resource
operator|==
literal|null
operator|&&
name|relativePathIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|relativePathIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resourceName
init|=
name|path
operator|!=
literal|null
condition|?
name|path
operator|+
name|filename
else|:
name|filename
decl_stmt|;
comment|//make the path platform independent (STANBOL-259)
name|resourceName
operator|=
name|FilenameUtils
operator|.
name|separatorsToSystem
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|resource
operator|=
name|bundle
operator|.
name|getEntry
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Resource {} found: {}"
argument_list|,
operator|(
name|resource
operator|==
literal|null
condition|?
literal|"NOT"
else|:
literal|""
operator|)
argument_list|,
name|filename
argument_list|)
expr_stmt|;
return|return
name|resource
operator|!=
literal|null
condition|?
name|resource
operator|.
name|openStream
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Getter for the search paths      * @return the search paths (read only)      */
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|getSearchPaths
parameter_list|()
block|{
return|return
name|searchPaths
return|;
block|}
block|}
end_class

end_unit

