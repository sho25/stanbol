begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|bundle
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|bundle
operator|.
name|BundleResourceProviderConstants
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|bundle
operator|.
name|BundleResourceProviderConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Creates {@link BundleDataFileProvider} instances for bundles that define  * the {@link BundleResourceProviderConstants#BUNDLE_DATAFILE_HEADER} property  * in there headers as described by the   *<a href="http://www.aqute.biz/Snippets/Extender"> OSGi extender  pattern</a>  *<p>  *  * @author Rupert Westenthaler  */
end_comment

begin_class
specifier|public
class|class
name|DataBundleInstaller
implements|implements
name|BundleListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataBundleInstaller
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The scheme we use to register our resources.      */
specifier|private
specifier|final
name|BundleContext
name|context
decl_stmt|;
comment|/**      * contains all active bundles as key and the ServiceRegistration for the      * {@link BundleDataFileProvider} as value. A<code>null</code> value       * indicates that this bundle needs not to be processed.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Bundle
argument_list|,
name|ServiceRegistration
argument_list|>
name|activated
init|=
operator|new
name|HashMap
argument_list|<
name|Bundle
argument_list|,
name|ServiceRegistration
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DataBundleInstaller
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The BundleContext MUST NOT be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|addBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//register the already active bundles
name|registerActive
argument_list|(
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Uses the parsed bundle context to register the already active (and currently      * starting) bundles.      */
specifier|private
name|void
name|registerActive
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|context
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|bundle
operator|.
name|getState
argument_list|()
operator|&
operator|(
name|Bundle
operator|.
name|STARTING
operator||
name|Bundle
operator|.
name|ACTIVE
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|register
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|bundleChanged
parameter_list|(
name|BundleEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|BundleEvent
operator|.
name|STARTED
case|:
name|register
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BundleEvent
operator|.
name|STOPPED
case|:
name|unregister
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BundleEvent
operator|.
name|UPDATED
case|:
name|unregister
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Registers the bundle to the {@link #activated} map.      *      * @param bundle the bundle to register      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|register
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
synchronized|synchronized
init|(
name|activated
init|)
block|{
if|if
condition|(
name|activated
operator|.
name|containsKey
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
return|return;
block|}
comment|//for now put the bundle with a null key to avoid duplicate adding
name|activated
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Register Bundle {} with DataBundleInstaller"
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|bundle
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|//        log.info("With Headers:");
comment|//        for(Enumeration<String> keys = headers.keys();keys.hasMoreElements();){
comment|//            String key = keys.nextElement();
comment|//            log.info("> "+key+"="+headers.get(key));
comment|//        }
name|String
name|pathsString
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|BUNDLE_DATAFILE_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathsString
operator|!=
literal|null
condition|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|dataFilesRankingString
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|BUNDLE_DATAFILES_PRIORITY_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataFilesRankingString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|properties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|dataFilesRankingString
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to parse integer value for '{}' from the configured value '{}'. "
operator|+
literal|"Will use default ranking"
argument_list|,
name|BUNDLE_DATAFILES_PRIORITY_HEADER
argument_list|,
name|dataFilesRankingString
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else no service ranking
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pathsString
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|BundleDataFileProvider
name|provider
init|=
operator|new
name|BundleDataFileProvider
argument_list|(
name|bundle
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_DESCRIPTION
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s for Bundle %s and Paths %s"
argument_list|,
name|BundleDataFileProvider
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|,
name|provider
operator|.
name|getSearchPaths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceRegistration
name|registration
init|=
name|context
operator|.
name|registerService
argument_list|(
name|DataFileProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|provider
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registerd BundleResourceProvider for {} and relative paths {}"
argument_list|,
name|context
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
argument_list|,
name|provider
operator|.
name|getSearchPaths
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|activated
init|)
block|{
comment|//update with the registration
if|if
condition|(
name|activated
operator|.
name|containsKey
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
name|activated
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|registration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//the bundle was deactivated in the meantime ... unregister :(
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//else key not preset ... ignore bundle!
block|}
specifier|private
name|void
name|unregister
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
synchronized|synchronized
init|(
name|activated
init|)
block|{
if|if
condition|(
operator|!
name|activated
operator|.
name|containsKey
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
return|return;
block|}
name|ServiceRegistration
name|registration
init|=
name|activated
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unregister BundleDataFileProvider for Bundel {}"
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * removes the bundle listener      */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|context
operator|.
name|removeBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|activated
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|ServiceRegistration
argument_list|>
name|entry
range|:
name|activated
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unregister BundleDataFileProvider for Bundel {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

