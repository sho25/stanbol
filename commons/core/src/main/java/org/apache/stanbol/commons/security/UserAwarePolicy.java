begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|platform
operator|.
name|config
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PERMISSION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PLATFORM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|SIOC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|utils
operator|.
name|security
operator|.
name|PermissionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  *   * @author mir  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|UserAwarePolicy
operator|.
name|class
argument_list|)
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"webIdPermissionProvider"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|referenceInterface
operator|=
name|WebIdBasedPermissionProvider
operator|.
name|class
argument_list|)
specifier|public
class|class
name|UserAwarePolicy
extends|extends
name|Policy
block|{
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserAwarePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|target
operator|=
name|SystemConfig
operator|.
name|SYSTEM_GRAPH_FILTER
argument_list|)
specifier|private
name|MGraph
name|systemGraph
decl_stmt|;
comment|/** 	 * Stores the mapping between a String describing the permission and the 	 * described<code>Permission</code> object. 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permissionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 * Cache for user permissions 	 */
specifier|private
name|UserPermissionsCache
name|cache
init|=
operator|new
name|UserPermissionsCache
argument_list|()
decl_stmt|;
specifier|private
name|Policy
name|originalPolicy
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|WebIdBasedPermissionProvider
argument_list|>
name|permissionProviders
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|WebIdBasedPermissionProvider
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|UserAwarePolicy
parameter_list|()
block|{
name|this
operator|.
name|originalPolicy
operator|=
name|Policy
operator|.
name|getPolicy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PermissionCollection
name|getPermissions
parameter_list|(
specifier|final
name|ProtectionDomain
name|domain
parameter_list|)
block|{
name|PermissionCollection
name|result
decl_stmt|;
name|Principal
index|[]
name|principals
init|=
name|domain
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
if|if
condition|(
name|principals
operator|.
name|length
operator|>
literal|0
condition|)
block|{
specifier|final
name|Principal
name|user
init|=
name|domain
operator|.
name|getPrincipals
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|getCachedUserPermissions
argument_list|(
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
name|result
operator|=
name|getUserPermissionsFromSystemGraph
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheUserPermissions
argument_list|(
name|user
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|originalPolicy
operator|.
name|getPermissions
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Returns the permissions of the specified user according to the entries in 	 * the sytemGraph. 	 *  	 * @param user 	 * @return 	 * @throws java.lang.IllegalArgumentException 	 * @throws java.lang.SecurityException 	 */
specifier|private
name|PermissionCollection
name|getUserPermissionsFromSystemGraph
parameter_list|(
specifier|final
name|Principal
name|user
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|SecurityException
throws|,
name|UserUnregisteredException
block|{
specifier|final
name|PermissionCollection
name|result
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Get permissions for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|permissions
init|=
name|getAllPermissionsOfAUserByName
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|permissionStr
range|:
name|permissions
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Add permission {}"
argument_list|,
name|permissionStr
argument_list|)
expr_stmt|;
name|Permission
name|perm
init|=
name|permissionMap
operator|.
name|get
argument_list|(
name|permissionStr
argument_list|)
decl_stmt|;
comment|// make new permission, if the required
comment|//<code>Permission</code> object is not in the map.
if|if
condition|(
name|perm
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|perm
operator|=
name|PermissionParser
operator|.
name|getPermission
argument_list|(
name|permissionStr
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"parsing "
operator|+
name|permissionStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"instantiating "
operator|+
name|permissionStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 * Returns the string representations of all permissions of a user. Those 	 * are his/her own permissions and the permissions of his roles 	 *  	 */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAllPermissionsOfAUserByName
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|UserUnregisteredException
block|{
name|NonLiteral
name|user
init|=
name|getUserByName
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getPermissionEntriesOfAUser
argument_list|(
name|user
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|roleTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|user
argument_list|,
name|SIOC
operator|.
name|has_function
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|roleTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|anotherRole
init|=
operator|(
name|NonLiteral
operator|)
name|roleTriples
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|getPermissionEntriesOfARole
argument_list|(
name|anotherRole
argument_list|,
name|userName
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|NonLiteral
argument_list|>
name|baseRoles
init|=
name|getResourcesOfType
argument_list|(
name|PERMISSION
operator|.
name|BaseRole
argument_list|)
decl_stmt|;
while|while
condition|(
name|baseRoles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|getPermissionEntriesOfARole
argument_list|(
name|baseRoles
operator|.
name|next
argument_list|()
argument_list|,
name|userName
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|NonLiteral
name|getUserByName
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|UserUnregisteredException
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|userName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|triples
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UserUnregisteredException
argument_list|(
name|userName
argument_list|)
throw|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPermissionEntriesOfAUser
parameter_list|(
name|NonLiteral
name|user
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getPermissionEntriesOfARole
argument_list|(
name|user
argument_list|,
name|userName
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|instanceof
name|UriRef
condition|)
block|{
synchronized|synchronized
init|(
name|permissionProviders
init|)
block|{
for|for
control|(
name|WebIdBasedPermissionProvider
name|p
range|:
name|permissionProviders
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|getPermissions
argument_list|(
operator|(
name|UriRef
operator|)
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|//note that users are roles too
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPermissionEntriesOfARole
parameter_list|(
name|NonLiteral
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|NonLiteral
name|user
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|permsForRole
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|role
argument_list|,
name|PERMISSION
operator|.
name|hasPermission
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|permsForRole
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|javaPermForRole
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
operator|(
name|BNode
operator|)
name|permsForRole
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
argument_list|,
name|PERMISSION
operator|.
name|javaPermissionEntry
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaPermForRole
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PlainLiteralImpl
name|permissionEntry
init|=
operator|(
name|PlainLiteralImpl
operator|)
name|javaPermForRole
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|permission
init|=
name|permissionEntry
operator|.
name|getLexicalForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|permission
operator|.
name|contains
argument_list|(
literal|"{username}"
argument_list|)
condition|)
block|{
name|permission
operator|=
name|permission
operator|.
name|replace
argument_list|(
literal|"{username}"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|NonLiteral
argument_list|>
name|getResourcesOfType
parameter_list|(
name|UriRef
name|type
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|triples
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NonLiteral
name|next
parameter_list|()
block|{
return|return
name|triples
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|bindWebIdPermissionProvider
parameter_list|(
name|WebIdBasedPermissionProvider
name|p
parameter_list|)
block|{
name|permissionProviders
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindWebIdPermissionProvider
parameter_list|(
name|WebIdBasedPermissionProvider
name|p
parameter_list|)
block|{
name|permissionProviders
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

