begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|auth
operator|.
name|PrincipalImpl
import|;
end_import

begin_comment
comment|/**  * Utility methods for retrieving user information.  *  *  * @author mir, tio  */
end_comment

begin_class
specifier|public
class|class
name|UserUtil
block|{
comment|/** 	 * 	 * @return the name of user which is associated to the  	 *<code>AccessControlContext</code> of the current thread. 	 */
specifier|public
specifier|static
name|String
name|getCurrentUserName
parameter_list|()
block|{
return|return
name|getUserName
argument_list|(
name|AccessController
operator|.
name|getContext
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * 	 * @return the subject which is associated to the 	 *<code>AccessControlContext</code> of the current thread. 	 */
specifier|public
specifier|static
name|Subject
name|getCurrentSubject
parameter_list|()
block|{
return|return
name|getSubject
argument_list|(
name|AccessController
operator|.
name|getContext
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Returns the name of the user associtated with the specified  	 *<code>AccessControlContext</code>. 	 *  	 * @param context 	 * @return the username of the current user or null if no 	 * user name is associated with the provided<code>AccessControlContext</code>. 	 */
specifier|public
specifier|static
name|String
name|getUserName
parameter_list|(
specifier|final
name|AccessControlContext
name|context
parameter_list|)
block|{
name|Subject
name|subject
init|=
name|getSubject
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
if|if
condition|(
name|principals
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|iter
init|=
name|principals
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|name
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/** 	 * Returns the name of the user associtated with the specified 	 *<code>AccessControlContext</code>. 	 * 	 * @param context 	 * @return the username of the current user or null if no 	 * user name is associated with the provided<code>AccessControlContext</code>. 	 */
specifier|public
specifier|static
name|Subject
name|getSubject
parameter_list|(
specifier|final
name|AccessControlContext
name|context
parameter_list|)
block|{
name|Subject
name|subject
decl_stmt|;
try|try
block|{
name|subject
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Subject
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Subject
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Subject
operator|.
name|getSubject
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|ex
parameter_list|)
block|{
name|Exception
name|cause
init|=
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
return|return
name|subject
return|;
block|}
specifier|public
specifier|static
specifier|final
name|Principal
name|ANONYMOUS
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"anonymous"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Subject
name|createSubject
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
operator|new
name|Subject
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|userName
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
return|;
block|}
block|}
end_class

end_unit

