begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  *  * @author Fabian Christ  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JsonLdCommon
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"@context"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COERCE
init|=
literal|"@coerce"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LITERAL
init|=
literal|"@literal"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATATYPE
init|=
literal|"@datatype"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IRI
init|=
literal|"@iri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
literal|"@subject"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"@type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROFILE
init|=
literal|"@profile"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPES
init|=
literal|"@types"
decl_stmt|;
comment|/**      * Maps URIs to namespace prefixes.      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Internal map to hold the namespaces and prefixes that were actually used.      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|usedNamespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Flag to control whether the namespace prefix map should be used to shorten URIs to CURIEs during      * serialization. Default value is<code>true</code>.      */
specifier|protected
name|boolean
name|applyNamespaces
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|useCuries
init|=
literal|false
decl_stmt|;
comment|/**      * Get the known namespace to prefix mapping.      *       * @return A {@link Map} from namespace String to prefix String.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespacePrefixMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespacePrefixMap
return|;
block|}
comment|/**      * Sets the known namespaces for the serializer.      *       * @param namespacePrefixMap      *            A {@link Map} from namespace String to prefix String.      */
specifier|public
name|void
name|setNamespacePrefixMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
parameter_list|)
block|{
name|this
operator|.
name|namespacePrefixMap
operator|=
name|namespacePrefixMap
expr_stmt|;
block|}
comment|/**      * Adds a new namespace and its prefix to the list of used namespaces for this JSON-LD instance.      *       * @param namespace      *            A namespace IRI.      * @param prefix      *            A prefix to use and identify this namespace in serialized JSON-LD.      */
specifier|public
name|void
name|addNamespacePrefix
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|namespacePrefixMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Flag to control whether the namespace prefix map should be used to shorten IRIs to prefix notation      * during serialization. Default value is<code>true</code>.      *<p>      * If you already put values into this JSON-LD instance with prefix notation, you should set this to      *<code>false</code> before starting the serialization.      *       * @return<code>True</code> if namespaces are applied during serialization,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isApplyNamespaces
parameter_list|()
block|{
return|return
name|applyNamespaces
return|;
block|}
comment|/**      * Control whether namespaces from the namespace prefix map are applied to URLs during serialization.      *<p>      * Set this to<code>false</code> if you already have shortened IRIs with prefixes.      *       * @param applyNamespaces      */
specifier|public
name|void
name|setApplyNamespaces
parameter_list|(
name|boolean
name|applyNamespaces
parameter_list|)
block|{
name|this
operator|.
name|applyNamespaces
operator|=
name|applyNamespaces
expr_stmt|;
block|}
comment|/**      * @return      */
specifier|public
name|boolean
name|isUseCuries
parameter_list|()
block|{
return|return
name|useCuries
return|;
block|}
comment|/**      * @param useCuries      */
specifier|public
name|void
name|setUseCuries
parameter_list|(
name|boolean
name|useCuries
parameter_list|)
block|{
name|this
operator|.
name|useCuries
operator|=
name|useCuries
expr_stmt|;
block|}
comment|/**      * Convert URI to CURIE if namespaces should be applied and CURIEs to URIs if namespaces should not be      * applied.      *       * @param uri      *            That may be in CURIE form.      * @return      * @throws ShorteningException       */
specifier|protected
name|String
name|shortenURI
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|ShorteningException
block|{
if|if
condition|(
name|this
operator|.
name|applyNamespaces
condition|)
block|{
name|uri
operator|=
name|doCURIE
argument_list|(
name|uri
argument_list|,
name|this
operator|.
name|useCuries
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|unCURIE
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
specifier|protected
name|String
name|shortenURIIgnoreDuplicates
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|ShorteningException
block|{
if|if
condition|(
name|this
operator|.
name|applyNamespaces
condition|)
block|{
name|uri
operator|=
name|doCURIE
argument_list|(
name|uri
argument_list|,
name|this
operator|.
name|useCuries
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|unCURIE
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
specifier|protected
name|String
name|shortenURIWithCuries
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|ShorteningException
block|{
if|if
condition|(
name|this
operator|.
name|applyNamespaces
condition|)
block|{
name|uri
operator|=
name|doCURIE
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|unCURIE
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
specifier|private
name|String
name|doCURIE
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|useCURIEs
parameter_list|,
name|boolean
name|ignoreDuplicates
parameter_list|)
throws|throws
name|ShorteningException
block|{
name|String
name|shortened
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|String
name|curie
init|=
name|uri
decl_stmt|;
name|String
name|curieNamespace
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|String
name|prefixEx
init|=
name|prefix
operator|+
literal|":"
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|curie
operator|=
name|curie
operator|.
name|replace
argument_list|(
name|namespace
argument_list|,
name|prefixEx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|equals
argument_list|(
name|curie
argument_list|)
condition|)
block|{
comment|// we mark this namespace as being used
name|curieNamespace
operator|=
name|namespace
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|// we mark this namespace as being used
name|curieNamespace
operator|=
name|namespace
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|curieNamespace
operator|!=
literal|null
condition|)
block|{
name|String
name|usedPrefix
init|=
name|this
operator|.
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|curieNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|useCURIEs
condition|)
block|{
name|shortened
operator|=
name|curie
expr_stmt|;
name|this
operator|.
name|usedNamespaces
operator|.
name|put
argument_list|(
name|curieNamespace
argument_list|,
name|usedPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|propName
init|=
name|curie
operator|.
name|replace
argument_list|(
name|usedPrefix
operator|+
literal|":"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|namespaceOfProp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|this
operator|.
name|usedNamespaces
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|usedNamespaces
operator|.
name|get
argument_list|(
name|ns
argument_list|)
argument_list|)
condition|)
block|{
comment|// this shortened version is already in use
name|namespaceOfProp
operator|=
name|ns
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|namespaceOfProp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|namespaceOfProp
operator|.
name|equals
argument_list|(
name|curieNamespace
operator|+
name|propName
argument_list|)
condition|)
block|{
name|shortened
operator|=
name|propName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ignoreDuplicates
condition|)
block|{
name|shortened
operator|=
name|propName
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Fallback to CURIEs because of property "
operator|+
name|propName
operator|+
literal|" with NS "
operator|+
name|namespaceOfProp
operator|+
literal|" and other is "
operator|+
name|curieNamespace
operator|+
name|propName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ShorteningException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|shortened
operator|=
name|propName
expr_stmt|;
name|this
operator|.
name|usedNamespaces
operator|.
name|put
argument_list|(
name|curieNamespace
operator|+
name|propName
argument_list|,
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|shortened
return|;
block|}
specifier|public
name|String
name|unCURIE
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|String
name|prefixEx
init|=
name|prefix
operator|+
literal|":"
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|prefixEx
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|replace
argument_list|(
name|prefixEx
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|uri
return|;
block|}
block|}
end_class

end_unit

