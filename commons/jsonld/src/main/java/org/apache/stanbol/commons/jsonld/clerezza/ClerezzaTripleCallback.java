begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2016 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|BlankNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|BlankNodeOrIRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|RDFTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|simple
operator|.
name|SimpleGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|jsonldjava
operator|.
name|core
operator|.
name|JsonLdTripleCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|jsonldjava
operator|.
name|core
operator|.
name|RDFDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|TypedLiteralImpl
import|;
end_import

begin_class
specifier|public
class|class
name|ClerezzaTripleCallback
implements|implements
name|JsonLdTripleCallback
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RDF_LANG_STRING
init|=
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"
decl_stmt|;
specifier|private
name|Graph
name|mGraph
init|=
operator|new
name|SimpleGraph
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BlankNode
argument_list|>
name|bNodeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BlankNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setGraph
parameter_list|(
name|Graph
name|mGraph
parameter_list|)
block|{
name|this
operator|.
name|mGraph
operator|=
name|mGraph
expr_stmt|;
name|bNodeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BlankNode
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Graph
name|getGraph
parameter_list|()
block|{
return|return
name|mGraph
return|;
block|}
specifier|private
name|void
name|triple
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|p
parameter_list|,
name|String
name|o
parameter_list|,
name|String
name|graph
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|p
operator|==
literal|null
operator|||
name|o
operator|==
literal|null
condition|)
block|{
comment|// TODO: i don't know what to do here!!!!
return|return;
block|}
specifier|final
name|BlankNodeOrIRI
name|subject
init|=
name|getBlankNodeOrIRI
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|IRI
name|predicate
init|=
operator|new
name|IRI
argument_list|(
name|p
argument_list|)
decl_stmt|;
specifier|final
name|BlankNodeOrIRI
name|object
init|=
name|getBlankNodeOrIRI
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|mGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|triple
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|p
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|datatype
parameter_list|,
name|String
name|language
parameter_list|,
name|String
name|graph
parameter_list|)
block|{
specifier|final
name|BlankNodeOrIRI
name|subject
init|=
name|getBlankNodeOrIRI
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|IRI
name|predicate
init|=
operator|new
name|IRI
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|RDFTerm
name|object
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|object
operator|=
operator|new
name|PlainLiteralImpl
argument_list|(
name|value
argument_list|,
operator|new
name|Language
argument_list|(
name|language
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|datatype
operator|==
literal|null
operator|||
name|RDF_LANG_STRING
operator|.
name|equals
argument_list|(
name|datatype
argument_list|)
condition|)
block|{
name|object
operator|=
operator|new
name|PlainLiteralImpl
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|object
operator|=
operator|new
name|TypedLiteralImpl
argument_list|(
name|value
argument_list|,
operator|new
name|IRI
argument_list|(
name|datatype
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BlankNodeOrIRI
name|getBlankNodeOrIRI
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"_:"
argument_list|)
condition|)
block|{
return|return
name|getBlankNode
argument_list|(
name|s
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|IRI
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
specifier|private
name|BlankNode
name|getBlankNode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|bNodeMap
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|bNodeMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|BlankNode
name|result
init|=
operator|new
name|BlankNode
argument_list|()
decl_stmt|;
name|bNodeMap
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|(
name|RDFDataset
name|dataset
parameter_list|)
block|{
for|for
control|(
name|String
name|graphName
range|:
name|dataset
operator|.
name|graphNames
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|RDFDataset
operator|.
name|Quad
argument_list|>
name|quads
init|=
name|dataset
operator|.
name|getQuads
argument_list|(
name|graphName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"@default"
operator|.
name|equals
argument_list|(
name|graphName
argument_list|)
condition|)
block|{
name|graphName
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|RDFDataset
operator|.
name|Quad
name|quad
range|:
name|quads
control|)
block|{
if|if
condition|(
name|quad
operator|.
name|getObject
argument_list|()
operator|.
name|isLiteral
argument_list|()
condition|)
block|{
name|triple
argument_list|(
name|quad
operator|.
name|getSubject
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|quad
operator|.
name|getPredicate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|quad
operator|.
name|getObject
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|quad
operator|.
name|getObject
argument_list|()
operator|.
name|getDatatype
argument_list|()
argument_list|,
name|quad
operator|.
name|getObject
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|triple
argument_list|(
name|quad
operator|.
name|getSubject
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|quad
operator|.
name|getPredicate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|quad
operator|.
name|getObject
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|graphName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|getGraph
argument_list|()
return|;
block|}
block|}
end_class

end_unit

