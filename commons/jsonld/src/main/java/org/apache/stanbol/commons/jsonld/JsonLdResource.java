begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Fabian Christ  *   */
end_comment

begin_class
specifier|public
class|class
name|JsonLdResource
block|{
specifier|private
name|String
name|subject
decl_stmt|;
specifier|private
name|String
name|profile
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// maps property names to JsonLD property objects
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JsonLdProperty
argument_list|>
name|propertyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonLdProperty
argument_list|>
argument_list|()
decl_stmt|;
comment|// map property names to types in case of singlevalued properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coercionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|subject
return|;
block|}
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
specifier|public
name|String
name|getProfile
parameter_list|()
block|{
return|return
name|profile
return|;
block|}
specifier|public
name|void
name|setProfile
parameter_list|(
name|String
name|profile
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
block|}
specifier|public
name|void
name|addType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAllTypes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
name|this
operator|.
name|types
operator|.
name|addAll
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
specifier|public
name|void
name|putPropertyType
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|JsonLdProperty
name|p
init|=
name|this
operator|.
name|propertyMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|coercionMap
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTypeOfProperty
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|this
operator|.
name|propertyMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCoerceMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|coercionMap
return|;
block|}
specifier|public
name|void
name|putProperty
parameter_list|(
name|String
name|property
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|JsonLdProperty
name|jldProperty
init|=
name|this
operator|.
name|propertyMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|jldProperty
operator|==
literal|null
condition|)
block|{
name|jldProperty
operator|=
operator|new
name|JsonLdProperty
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|coercedType
init|=
name|this
operator|.
name|coercionMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|jldProperty
operator|.
name|setType
argument_list|(
name|coercedType
argument_list|)
expr_stmt|;
name|propertyMap
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|jldProperty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jldProperty
operator|.
name|addSingleValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|putProperty
parameter_list|(
name|JsonLdProperty
name|property
parameter_list|)
block|{
name|String
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|coercionMap
operator|.
name|put
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|coercionMap
operator|.
name|remove
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|propertyMap
operator|.
name|put
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsonLdProperty
name|getPropertyValueIgnoreCase
parameter_list|(
name|String
name|property
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|this
operator|.
name|propertyMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|equalsIgnoreCase
argument_list|(
name|property
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|propertyMap
operator|.
name|get
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|JsonLdProperty
name|getProperty
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|this
operator|.
name|propertyMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|JsonLdProperty
argument_list|>
name|getPropertyMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|propertyMap
return|;
block|}
specifier|public
name|boolean
name|hasPropertyIgnorecase
parameter_list|(
name|String
name|property
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|this
operator|.
name|propertyMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|equalsIgnoreCase
argument_list|(
name|property
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

