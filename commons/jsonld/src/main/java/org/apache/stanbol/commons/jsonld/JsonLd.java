begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * The JsonLd class provides an API to create a JSON-LD object structure and to serialize this structure.  *   *<p>  * This implementation is based on the JSON-LD specification version 20110201. Available online at<a  * href="http://www.json-ld.org/spec/ED/20110201/">http://www.json-ld.org/spec/ED/20110201/</a>.  *   * @author Fabian Christ  */
end_comment

begin_class
specifier|public
class|class
name|JsonLd
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"@context"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPES
init|=
literal|"#types"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROFILE
init|=
literal|"@profile"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
literal|"@"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IRI
init|=
literal|"@iri"
decl_stmt|;
comment|// Map Namespace -> Prefix
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Map Subject -> Resource
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JsonLdResource
argument_list|>
name|resourceMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|JsonLdResource
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Flag to control whether the namespace prefix map should be used to shorten URIs to CURIEs during      * serialization. Default value is<code>true</code>.      */
specifier|private
name|boolean
name|applyNamespaces
init|=
literal|true
decl_stmt|;
comment|/**      * Flag to control whether the serialized JSON-LD output will use joint or disjoint graphs for subjects      * and namespaces. Default value is<code>true</code>.      */
specifier|private
name|boolean
name|useJointGraphs
init|=
literal|true
decl_stmt|;
comment|/**      * Flag to control whether type coercion should be applied on serialization. Default value is      *<code>false</code>.      */
specifier|private
name|boolean
name|useTypeCoercion
init|=
literal|false
decl_stmt|;
comment|/**      * Flag that indicates whether this JSON-LD object represents a JSON-LD profile.      */
specifier|private
specifier|final
name|boolean
name|representsProfile
decl_stmt|;
specifier|public
name|JsonLd
parameter_list|()
block|{
name|this
operator|.
name|representsProfile
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|JsonLd
parameter_list|(
name|boolean
name|representsProfile
parameter_list|)
block|{
name|this
operator|.
name|representsProfile
operator|=
name|representsProfile
expr_stmt|;
block|}
comment|/**      * Adds the given resource to this JsonLd object using the resource's subject as key. If the key is NULL      * and there does not exist a resource with an empty String as key the resource will be added using      * an empty String ("") as key. Otherwise an @IllegalArgumentException is thrown.      *       * @param resource      */
specifier|public
name|void
name|put
parameter_list|(
name|JsonLdResource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|resourceMap
operator|.
name|put
argument_list|(
name|resource
operator|.
name|getSubject
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|resourceMap
operator|.
name|containsKey
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|this
operator|.
name|resourceMap
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
comment|/**      * Add the given resource to this JsonLd object using the resourceId as key.      *       * @param resourceId      * @param resource      */
specifier|public
name|void
name|put
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|JsonLdResource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resourceMap
operator|.
name|put
argument_list|(
name|resourceId
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Serializes the JSON-LD object structures to a String.      *       *<p>      * If you want to have a formatted output with indentation, use the toString(int indent) variant.      *       * @return JSON-LD as unformatted String.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|useJointGraphs
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|createJointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|json
init|=
name|createDisjointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
comment|/**      * Serializes the JSON-LD object structure to a beautified String using indentation. The output is      * formatted using the specified indentation size.      *       * @param indent      *            Number of whitespace chars used for indentation.      * @return JSON-LD as formatted String.      */
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
if|if
condition|(
name|useJointGraphs
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|createJointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|,
name|indent
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|json
init|=
name|createDisjointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|,
name|indent
argument_list|)
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|createDisjointGraph
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|json
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resourceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|subject
range|:
name|resourceMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subjectObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
name|JsonLdResource
name|resource
init|=
name|resourceMap
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
comment|// put the namespaces
if|if
condition|(
operator|!
name|this
operator|.
name|namespacePrefixMap
operator|.
name|isEmpty
argument_list|()
operator|||
name|this
operator|.
name|useTypeCoercion
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nsObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|this
operator|.
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|nsObject
operator|.
name|put
argument_list|(
name|this
operator|.
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|useTypeCoercion
condition|)
block|{
name|putCoercionTypes
argument_list|(
name|nsObject
argument_list|,
name|resource
operator|.
name|getCoercionMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subjectObject
operator|.
name|put
argument_list|(
literal|"#"
argument_list|,
name|nsObject
argument_list|)
expr_stmt|;
block|}
comment|// put subject
if|if
condition|(
name|resource
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|resource
operator|.
name|getSubject
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
name|SUBJECT
argument_list|,
name|handleCURIEs
argument_list|(
name|resource
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// put profile
if|if
condition|(
name|resource
operator|.
name|getProfile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|resource
operator|.
name|getProfile
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
name|PROFILE
argument_list|,
name|handleCURIEs
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// put types
name|putTypes
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// put properties = objects
name|putProperties
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// add to list of subjects
name|json
operator|.
name|add
argument_list|(
name|subjectObject
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|json
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createJointGraph
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coercionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resourceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|subjects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|subject
range|:
name|resourceMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// put subject
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subjectObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
name|JsonLdResource
name|resource
init|=
name|resourceMap
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
comment|// put subject if this is not a profile
if|if
condition|(
operator|!
name|this
operator|.
name|representsProfile
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|resource
operator|.
name|getSubject
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
name|SUBJECT
argument_list|,
name|handleCURIEs
argument_list|(
name|resource
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// put profile
if|if
condition|(
name|resource
operator|.
name|getProfile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|resource
operator|.
name|getProfile
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
name|PROFILE
argument_list|,
name|handleCURIEs
argument_list|(
name|resource
operator|.
name|getProfile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// put types
name|putTypes
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useTypeCoercion
condition|)
block|{
name|coercionMap
operator|.
name|putAll
argument_list|(
name|resource
operator|.
name|getCoercionMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// put properties = objects
name|putProperties
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// add to list of subjects
name|subjects
operator|.
name|add
argument_list|(
name|subjectObject
argument_list|)
expr_stmt|;
block|}
comment|// put subjects
if|if
condition|(
operator|!
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|subjects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|json
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|subjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|put
argument_list|(
literal|"@"
argument_list|,
name|subjects
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// put the namespaces
if|if
condition|(
operator|!
name|this
operator|.
name|namespacePrefixMap
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|this
operator|.
name|useTypeCoercion
operator|&&
operator|!
name|coercionMap
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nsObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|nsObject
operator|.
name|put
argument_list|(
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|useTypeCoercion
operator|&&
operator|!
name|coercionMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|putCoercionTypes
argument_list|(
name|nsObject
argument_list|,
name|coercionMap
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|put
argument_list|(
literal|"#"
argument_list|,
name|nsObject
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
specifier|private
name|void
name|putTypes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subjectObject
parameter_list|,
name|JsonLdResource
name|resource
parameter_list|)
block|{
if|if
condition|(
operator|!
name|resource
operator|.
name|getTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|resource
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|handleCURIEs
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|types
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
block|{
return|return
name|arg0
operator|.
name|compareTo
argument_list|(
name|arg1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|subjectObject
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|putCoercionTypes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObject
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coercionMap
parameter_list|)
block|{
if|if
condition|(
operator|!
name|coercionMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsCoercionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|property
range|:
name|coercionMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|nsCoercionMap
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|handleCURIEs
argument_list|(
name|coercionMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jsonObject
operator|.
name|put
argument_list|(
literal|"#types"
argument_list|,
name|nsCoercionMap
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|putProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObject
parameter_list|,
name|JsonLdResource
name|resource
parameter_list|)
block|{
name|putProperties
argument_list|(
name|jsonObject
argument_list|,
name|resource
operator|.
name|getPropertyMap
argument_list|()
argument_list|,
name|resource
operator|.
name|getCoercionMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outputObject
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inputMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coercionMap
parameter_list|)
block|{
for|for
control|(
name|String
name|property
range|:
name|inputMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|inputMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|strValue
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|coercionMap
operator|!=
literal|null
condition|)
block|{
name|String
name|type
init|=
name|coercionMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|useTypeCoercion
condition|)
block|{
name|strValue
operator|=
operator|(
name|String
operator|)
name|doCoerce
argument_list|(
name|strValue
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strValue
operator|=
name|unCoerce
argument_list|(
name|strValue
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|value
operator|=
name|handleCURIEs
argument_list|(
name|strValue
argument_list|)
expr_stmt|;
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|Object
index|[]
name|arrayValue
init|=
operator|(
name|Object
index|[]
operator|)
name|value
decl_stmt|;
name|putProperties
argument_list|(
name|outputObject
argument_list|,
name|property
argument_list|,
name|arrayValue
argument_list|,
name|coercionMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|valueMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subOutputObject
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|subOutputObject
argument_list|)
expr_stmt|;
name|putProperties
argument_list|(
name|subOutputObject
argument_list|,
name|valueMap
argument_list|,
name|coercionMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|JsonLdIRI
condition|)
block|{
name|JsonLdIRI
name|iriValue
init|=
operator|(
name|JsonLdIRI
operator|)
name|value
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iriObject
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|iriObject
operator|.
name|put
argument_list|(
literal|"@iri"
argument_list|,
name|handleCURIEs
argument_list|(
name|iriValue
operator|.
name|getIRI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|iriObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|coercionMap
operator|!=
literal|null
condition|)
block|{
name|String
name|type
init|=
name|coercionMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|Object
name|objValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|useTypeCoercion
condition|)
block|{
name|objValue
operator|=
name|doCoerce
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objValue
operator|=
name|unCoerce
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|objValue
operator|instanceof
name|String
condition|)
block|{
name|String
name|strValue
init|=
operator|(
name|String
operator|)
name|objValue
decl_stmt|;
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|handleCURIEs
argument_list|(
name|strValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|objValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|putProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outputObject
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
index|[]
name|arrayValue
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coercionMap
parameter_list|)
block|{
if|if
condition|(
name|arrayValue
operator|instanceof
name|String
index|[]
condition|)
block|{
name|String
index|[]
name|stringArray
init|=
operator|(
name|String
index|[]
operator|)
name|arrayValue
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|stringArray
control|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|handleCURIEs
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|arrayValue
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
comment|// The value of an array element is a Map. Handle maps recursively.
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inputMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subOutputObject
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|valueList
operator|.
name|add
argument_list|(
name|subOutputObject
argument_list|)
expr_stmt|;
name|putProperties
argument_list|(
name|subOutputObject
argument_list|,
name|inputMap
argument_list|,
name|coercionMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|JsonLdIRI
condition|)
block|{
name|JsonLdIRI
name|iriValue
init|=
operator|(
name|JsonLdIRI
operator|)
name|object
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iriObject
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|iriObject
operator|.
name|put
argument_list|(
literal|"@iri"
argument_list|,
name|handleCURIEs
argument_list|(
name|iriValue
operator|.
name|getIRI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueList
operator|.
name|add
argument_list|(
name|iriObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Don't know what it is - just add it
name|valueList
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the converted values
name|outputObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Appends the type to the Value if not present.      *       * @param strValue      * @param type      * @return      */
specifier|private
name|String
name|unCoerce
parameter_list|(
name|String
name|strValue
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|String
name|typeSuffix
init|=
literal|"^^"
operator|+
name|unCURIE
argument_list|(
operator|(
name|type
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|strValue
operator|.
name|endsWith
argument_list|(
name|typeSuffix
argument_list|)
condition|)
block|{
name|strValue
operator|=
literal|"\""
operator|+
name|strValue
operator|+
literal|"\"^^<"
operator|+
name|type
operator|+
literal|">"
expr_stmt|;
block|}
return|return
name|strValue
return|;
block|}
comment|/**      * Removes the type from the value and handles conversion to Integer and Boolean.      *       * @param strValue      * @param type      * @return      */
specifier|private
name|Object
name|doCoerce
parameter_list|(
name|String
name|strValue
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|String
name|typeSuffix
init|=
literal|"^^"
operator|+
name|unCURIE
argument_list|(
operator|(
name|type
operator|)
argument_list|)
decl_stmt|;
name|strValue
operator|=
name|strValue
operator|.
name|replace
argument_list|(
name|typeSuffix
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|strValue
operator|=
name|strValue
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|convertValueType
argument_list|(
name|strValue
argument_list|)
return|;
block|}
comment|/**      * Converts a given object to Integer or Boolean if the object is instance of one of those types.      *       * @param strValue      * @return      */
specifier|private
name|Object
name|convertValueType
parameter_list|(
name|String
name|strValue
parameter_list|)
block|{
comment|// check if value can be interpreted as integer
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|strValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
empty_stmt|;
comment|// check if value can be interpreted as boolean
if|if
condition|(
name|strValue
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|||
name|strValue
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|strValue
argument_list|)
return|;
block|}
return|return
name|strValue
return|;
block|}
comment|/**      * Convert URI to CURIE if namespaces should be applied and CURIEs to URIs if namespaces should not be      * applied.      *       * @param uri      *            That may be in CURIE form.      * @return      */
specifier|private
name|String
name|handleCURIEs
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|applyNamespaces
condition|)
block|{
name|uri
operator|=
name|doCURIE
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|unCURIE
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
specifier|private
name|String
name|doCURIE
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|+
literal|":"
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|replace
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|uri
return|;
block|}
specifier|private
name|String
name|unCURIE
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|+
literal|":"
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|replace
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|uri
return|;
block|}
comment|/**      * Return the JSON-LD resource for the given subject.      */
specifier|public
name|JsonLdResource
name|getResource
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
return|return
name|resourceMap
operator|.
name|get
argument_list|(
name|subject
argument_list|)
return|;
block|}
comment|/**      * Get the known namespace to prefix mapping.      *       * @return A {@link Map} from namespace String to prefix String.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespacePrefixMap
parameter_list|()
block|{
return|return
name|namespacePrefixMap
return|;
block|}
comment|/**      * Sets the known namespaces for the serializer.      *       * @param namespacePrefixMap      *            A {@link Map} from namespace String to prefix String.      */
specifier|public
name|void
name|setNamespacePrefixMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
parameter_list|)
block|{
name|this
operator|.
name|namespacePrefixMap
operator|=
name|namespacePrefixMap
expr_stmt|;
block|}
comment|/**      * Adds a new namespace and its prefix to the list of used namespaces for this JSON-LD instance.      *       * @param namespace      *            A namespace IRI.      * @param prefix      *            A prefix to use and identify this namespace in serialized JSON-LD.      */
specifier|public
name|void
name|addNamespacePrefix
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|namespacePrefixMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determine whether currently joint or disjoint graphs are serialized with this JSON-LD instance.      *       * @return<code>True</code> if joint graphs are used,<code>False</code>otherwise.      */
specifier|public
name|boolean
name|isUseJointGraphs
parameter_list|()
block|{
return|return
name|useJointGraphs
return|;
block|}
comment|/**      * Set to<code>true</code> if you want to use joint graphs (default) or<code>false</code> otherwise.      *       * @param useJointGraphs      */
specifier|public
name|void
name|setUseJointGraphs
parameter_list|(
name|boolean
name|useJointGraphs
parameter_list|)
block|{
name|this
operator|.
name|useJointGraphs
operator|=
name|useJointGraphs
expr_stmt|;
block|}
comment|/**      * Flag to control whether the namespace prefix map should be used to shorten IRIs to prefix notation      * during serialization. Default value is<code>true</code>.      *<p>      * If you already put values into this JSON-LD instance with prefix notation, you should set this to      *<code>false</code> before starting the serialization.      *       * @return<code>True</code> if namespaces are applied during serialization,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isApplyNamespaces
parameter_list|()
block|{
return|return
name|applyNamespaces
return|;
block|}
comment|/**      * Control whether namespaces from the namespace prefix map are applied to URLs during serialization.      *<p>      * Set this to<code>false</code> if you already have shortened IRIs with prefixes.      *       * @param applyNamespaces      */
specifier|public
name|void
name|setApplyNamespaces
parameter_list|(
name|boolean
name|applyNamespaces
parameter_list|)
block|{
name|this
operator|.
name|applyNamespaces
operator|=
name|applyNamespaces
expr_stmt|;
block|}
comment|/**      * Flag to control whether type coercion is applied or not.      *       * @return<code>True</code> if type coercion is applied,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isUseTypeCoercion
parameter_list|()
block|{
return|return
name|useTypeCoercion
return|;
block|}
comment|/**      * Control whether type coercion should be applied. Set this to<code>false</code> if you don't want to      * use type coercion in the output.      *       * @param useTypeCoercion      */
specifier|public
name|void
name|setUseTypeCoercion
parameter_list|(
name|boolean
name|useTypeCoercion
parameter_list|)
block|{
name|this
operator|.
name|useTypeCoercion
operator|=
name|useTypeCoercion
expr_stmt|;
block|}
comment|/**      * Check whether this JSON-LD object represents a JSON-LD profile.      *       * @return<code>true</code> if this is a profile,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|representsProfile
parameter_list|()
block|{
return|return
name|this
operator|.
name|representsProfile
return|;
block|}
block|}
end_class

end_unit

