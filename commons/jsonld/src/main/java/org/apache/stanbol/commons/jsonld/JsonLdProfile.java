begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_class
specifier|public
class|class
name|JsonLdProfile
extends|extends
name|JsonLdCommon
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|typesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addType
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|typesMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|typesMap
operator|.
name|put
argument_list|(
name|property
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|this
operator|.
name|typesMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addTypes
parameter_list|(
name|String
name|property
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|typesMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|typesMap
operator|.
name|put
argument_list|(
name|property
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|typesMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|.
name|addAll
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTypes
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|this
operator|.
name|typesMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|typesMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|createJson
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|createJson
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|,
name|indent
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createJson
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// put the namespaces
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contextObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|contextObject
operator|.
name|put
argument_list|(
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
comment|// put types
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|typesObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|property
range|:
name|this
operator|.
name|typesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|this
operator|.
name|typesMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|typesObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|handleCURIEs
argument_list|(
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JSONArray
name|typesArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|typesArray
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|typesObject
operator|.
name|put
argument_list|(
name|handleCURIEs
argument_list|(
name|property
argument_list|)
argument_list|,
name|typesArray
argument_list|)
expr_stmt|;
block|}
block|}
name|contextObject
operator|.
name|put
argument_list|(
name|JsonLdCommon
operator|.
name|TYPES
argument_list|,
name|typesObject
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|JsonLdCommon
operator|.
name|CONTEXT
argument_list|,
name|contextObject
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
block|}
end_class

end_unit

