begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The JsonLdParser can be used to parse a given JSON-LD String representation  * into a JSON-LD data structure.  *   * @author Fabian Christ  */
end_comment

begin_class
specifier|public
class|class
name|JsonLdParser
extends|extends
name|JsonLdParserCommon
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonLdParser
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** 	 * Parse the given String into a JSON-LD data structure. 	 *  	 * @param jsonLdString 	 *            A JSON-LD String. 	 * @return JSON-LD data structure. 	 */
specifier|public
specifier|static
name|JsonLd
name|parse
parameter_list|(
name|String
name|jsonLdString
parameter_list|)
throws|throws
name|Exception
block|{
name|JsonLd
name|jld
init|=
literal|null
decl_stmt|;
name|JSONObject
name|jo
init|=
name|parseJson
argument_list|(
name|jsonLdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|jo
operator|!=
literal|null
condition|)
block|{
name|jld
operator|=
operator|new
name|JsonLd
argument_list|()
expr_stmt|;
name|parseSubject
argument_list|(
name|jo
argument_list|,
name|jld
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|jld
return|;
block|}
comment|/** 	 * Parses a single subject. 	 *  	 * @param jo 	 *            JSON object that holds the subject's data. 	 * @param jld 	 *            JsonLd object to add the created subject resource. 	 */
specifier|private
specifier|static
name|void
name|parseSubject
parameter_list|(
name|JSONObject
name|jo
parameter_list|,
name|JsonLd
name|jld
parameter_list|,
name|int
name|bnodeCount
parameter_list|,
name|String
name|profile
parameter_list|)
block|{
comment|// The root subject is used for cases where no explicit subject is
comment|// specified. We need
comment|// at least one dummy subject (bnode) to support type coercion because
comment|// types are assigned to
comment|// subjects.
name|JsonLdResource
name|subject
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|jo
operator|.
name|has
argument_list|(
name|JsonLdCommon
operator|.
name|CONTEXT
argument_list|)
condition|)
block|{
name|JSONObject
name|context
init|=
name|jo
operator|.
name|getJSONObject
argument_list|(
name|JsonLdCommon
operator|.
name|CONTEXT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|context
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|context
operator|.
name|names
argument_list|()
operator|.
name|getString
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|JsonLdCommon
operator|.
name|COERCE
argument_list|)
condition|)
block|{
name|JSONObject
name|typeObject
init|=
name|context
operator|.
name|getJSONObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|typeObject
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|property
init|=
name|typeObject
operator|.
name|names
argument_list|()
operator|.
name|getString
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|typeObject
operator|.
name|getString
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|subject
operator|.
name|putPropertyType
argument_list|(
name|property
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|jld
operator|.
name|addNamespacePrefix
argument_list|(
name|context
operator|.
name|getString
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|jo
operator|.
name|remove
argument_list|(
name|JsonLdCommon
operator|.
name|CONTEXT
argument_list|)
expr_stmt|;
block|}
comment|// If there is a local profile specified for this subject, we
comment|// use that one. Otherwise we assign the profile given by the
comment|// parameter.
if|if
condition|(
name|jo
operator|.
name|has
argument_list|(
name|JsonLdCommon
operator|.
name|PROFILE
argument_list|)
condition|)
block|{
name|String
name|localProfile
init|=
name|unCURIE
argument_list|(
name|jo
operator|.
name|getString
argument_list|(
name|JsonLdCommon
operator|.
name|PROFILE
argument_list|)
argument_list|,
name|jld
operator|.
name|getNamespacePrefixMap
argument_list|()
argument_list|)
decl_stmt|;
name|profile
operator|=
name|localProfile
expr_stmt|;
name|jo
operator|.
name|remove
argument_list|(
name|JsonLdCommon
operator|.
name|PROFILE
argument_list|)
expr_stmt|;
block|}
name|subject
operator|.
name|setProfile
argument_list|(
name|profile
argument_list|)
expr_stmt|;
if|if
condition|(
name|jo
operator|.
name|has
argument_list|(
name|JsonLdCommon
operator|.
name|ID
argument_list|)
condition|)
block|{
comment|// Check for N subjects
name|Object
name|subjectObject
init|=
name|jo
operator|.
name|get
argument_list|(
name|JsonLdCommon
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectObject
operator|instanceof
name|JSONArray
condition|)
block|{
comment|// There is an array of subjects. We create all subjects
comment|// in sequence.
name|JSONArray
name|subjects
init|=
operator|(
name|JSONArray
operator|)
name|subjectObject
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subjects
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|parseSubject
argument_list|(
name|subjects
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|,
name|jld
argument_list|,
name|bnodeCount
operator|++
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|subjectName
init|=
name|unCURIE
argument_list|(
name|jo
operator|.
name|getString
argument_list|(
name|JsonLdCommon
operator|.
name|ID
argument_list|)
argument_list|,
name|jld
operator|.
name|getNamespacePrefixMap
argument_list|()
argument_list|)
decl_stmt|;
name|subject
operator|.
name|setSubject
argument_list|(
name|subjectName
argument_list|)
expr_stmt|;
block|}
name|jo
operator|.
name|remove
argument_list|(
name|JsonLdCommon
operator|.
name|ID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No subject specified. We create a dummy bnode
comment|// and add this subject.
name|subject
operator|.
name|setSubject
argument_list|(
literal|"_:bnode"
operator|+
name|bnodeCount
argument_list|)
expr_stmt|;
name|jld
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubject
argument_list|()
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
comment|// Iterate through the rest of properties and unCURIE property
comment|// values
comment|// depending on their type
if|if
condition|(
name|jo
operator|.
name|names
argument_list|()
operator|!=
literal|null
operator|&&
name|jo
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jo
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|property
init|=
name|jo
operator|.
name|names
argument_list|()
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|valueObject
init|=
name|jo
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|handleProperty
argument_list|(
name|jld
argument_list|,
name|subject
argument_list|,
name|property
argument_list|,
name|valueObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"There were JSON problems when parsing the JSON-LD String"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|handleProperty
parameter_list|(
name|JsonLd
name|jld
parameter_list|,
name|JsonLdResource
name|subject
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|valueObject
parameter_list|)
block|{
if|if
condition|(
name|valueObject
operator|instanceof
name|JSONObject
condition|)
block|{
name|JSONObject
name|jsonValue
init|=
operator|(
name|JSONObject
operator|)
name|valueObject
decl_stmt|;
name|subject
operator|.
name|putProperty
argument_list|(
name|property
argument_list|,
name|convertToMapAndList
argument_list|(
name|jsonValue
argument_list|,
name|jld
operator|.
name|getNamespacePrefixMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|valueObject
operator|instanceof
name|JSONArray
condition|)
block|{
name|JSONArray
name|arrayValue
init|=
operator|(
name|JSONArray
operator|)
name|valueObject
decl_stmt|;
name|subject
operator|.
name|putProperty
argument_list|(
name|property
argument_list|,
name|convertToMapAndList
argument_list|(
name|arrayValue
argument_list|,
name|jld
operator|.
name|getNamespacePrefixMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|valueObject
operator|instanceof
name|String
condition|)
block|{
name|String
name|stringValue
init|=
operator|(
name|String
operator|)
name|valueObject
decl_stmt|;
name|subject
operator|.
name|putProperty
argument_list|(
name|property
argument_list|,
name|unCURIE
argument_list|(
name|stringValue
argument_list|,
name|jld
operator|.
name|getNamespacePrefixMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subject
operator|.
name|putProperty
argument_list|(
name|property
argument_list|,
name|valueObject
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Converts a JSON object into a Map or List data structure. 	 *  	 *<p> 	 * The JSON-LD implementation is based on Map and List data types. If the 	 * input is a JSONObject, it will be converted into a Map&lt;String, 	 * Object>. If the input is a JSONArray, it will be converted into a 	 * List&lt;Object>. Otherwise the input will be returned untouched. 	 *  	 * @param input 	 *            Object that will be converted. 	 * @return 	 */
specifier|private
specifier|static
name|Object
name|convertToMapAndList
parameter_list|(
name|Object
name|input
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|JSONObject
condition|)
block|{
name|JSONObject
name|jo
init|=
operator|(
name|JSONObject
operator|)
name|input
decl_stmt|;
comment|// Handle IRIs
if|if
condition|(
name|jo
operator|.
name|has
argument_list|(
name|JsonLdCommon
operator|.
name|ID
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|new
name|JsonLdIRI
argument_list|(
name|unCURIE
argument_list|(
name|jo
operator|.
name|getString
argument_list|(
name|JsonLdCommon
operator|.
name|ID
argument_list|)
argument_list|,
name|namespacePrefixMap
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// Handle arbitrary JSON
return|return
name|convertToMap
argument_list|(
name|jo
argument_list|,
name|namespacePrefixMap
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|input
operator|instanceof
name|JSONArray
condition|)
block|{
name|JSONArray
name|ao
init|=
operator|(
name|JSONArray
operator|)
name|input
decl_stmt|;
return|return
name|convertToList
argument_list|(
name|ao
argument_list|,
name|namespacePrefixMap
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|input
operator|instanceof
name|String
condition|)
block|{
return|return
name|unCURIE
argument_list|(
operator|(
name|String
operator|)
name|input
argument_list|,
name|namespacePrefixMap
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|input
return|;
block|}
block|}
comment|/** 	 * Converts a JSONOBject into a Map&lt;String, Object>. 	 *  	 * @param jo 	 *            JSONOBject to be converted. 	 * @return A Map that represents the same information as the JSONOBject. 	 */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|convertToMap
parameter_list|(
name|JSONObject
name|jo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonMap
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|jo
operator|.
name|names
argument_list|()
operator|!=
literal|null
operator|&&
name|jo
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jsonMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jo
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|jo
operator|.
name|names
argument_list|()
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|jsonMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|convertToMapAndList
argument_list|(
name|jo
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|namespacePrefixMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
comment|/* ignored */
block|}
return|return
name|jsonMap
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|convertToList
parameter_list|(
name|JSONArray
name|arrayValue
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrayValue
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|values
operator|.
name|add
argument_list|(
name|convertToMapAndList
argument_list|(
name|arrayValue
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|namespacePrefixMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error converting JSONArray to list"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
comment|/** 	 * Replaces the CURIE prefixes with the namespace to create full qualified 	 * IRIs. 	 *  	 * @param curie 	 *            The CURIE to create an IRI from. 	 * @param namespacePrefixMap 	 *            A Map with known namespaces. 	 * @return 	 */
specifier|private
specifier|static
name|String
name|unCURIE
parameter_list|(
name|String
name|curie
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|+
literal|":"
decl_stmt|;
name|curie
operator|=
name|curie
operator|.
name|replaceAll
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
return|return
name|curie
return|;
block|}
block|}
end_class

end_unit

