begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpEntityEnclosingRequestBase
import|;
end_import

begin_comment
comment|/**  * Generate RESTful API documentation based on actual requests  * executed during integration tests, enhanced with user-supplied  * bits of documentation.  */
end_comment

begin_class
specifier|public
class|class
name|RequestDocumentor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_BASE
init|=
literal|"./target/"
operator|+
name|RequestDocumentor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|RequestDocumentor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ("
operator|+
name|name
operator|+
literal|")"
return|;
block|}
name|void
name|generateDocumentation
parameter_list|(
name|RequestExecutor
name|executor
parameter_list|,
name|String
index|[]
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|File
name|f
init|=
name|getOutputFile
argument_list|()
decl_stmt|;
specifier|final
name|File
name|dir
init|=
name|f
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create output folder "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Appending documentation of "
operator|+
name|executor
operator|+
literal|" to "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|documentRequest
argument_list|(
name|pw
argument_list|,
name|executor
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|File
name|getOutputFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|OUTPUT_BASE
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".txt"
argument_list|)
return|;
block|}
specifier|protected
name|void
name|documentRequest
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|RequestExecutor
name|executor
parameter_list|,
name|String
index|[]
name|metadataArray
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Convert metadata to more convenient Map
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadataArray
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Metadata array must be of even size, got "
operator|+
name|metadataArray
operator|.
name|length
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadataArray
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|metadataArray
index|[
name|i
index|]
argument_list|,
name|metadataArray
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// TODO use velocity or other templates? Just a rough prototype for now
comment|// Also need to filter overly long input/output, binary etc.
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"===================================================================================="
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"=== "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" ==="
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\n=== "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"REQUEST"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" ==="
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Method: "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|executor
operator|.
name|getRequest
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"URI: "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|executor
operator|.
name|getRequest
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Header
index|[]
name|allHeaders
init|=
name|executor
operator|.
name|getRequest
argument_list|()
operator|.
name|getAllHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|allHeaders
operator|!=
literal|null
operator|&&
name|allHeaders
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"Headers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Header
name|h
range|:
name|allHeaders
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|h
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|h
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|executor
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|HttpEntityEnclosingRequestBase
condition|)
block|{
specifier|final
name|HttpEntityEnclosingRequestBase
name|heb
init|=
operator|(
name|HttpEntityEnclosingRequestBase
operator|)
name|executor
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|heb
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"Content-Type:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|heb
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Content:"
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|is
init|=
name|heb
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
comment|// TODO encoding??
name|pw
operator|.
name|write
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
name|pw
operator|.
name|print
argument_list|(
literal|"\n=== "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"RESPONSE"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" ==="
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Content-Type:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|executor
operator|.
name|getResponse
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Content:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|executor
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"===================================================================================="
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

