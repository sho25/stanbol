begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URLEncodedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicNameValuePair
import|;
end_import

begin_comment
comment|/** Convenience builder for Request objects */
end_comment

begin_class
specifier|public
class|class
name|RequestBuilder
block|{
specifier|private
specifier|final
name|String
name|baseUrl
decl_stmt|;
specifier|public
name|RequestBuilder
parameter_list|(
name|String
name|baseUrl
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
block|}
comment|/** Build a GET request to specified path with optional query      *  parameters. See {@link #buildUrl(String, String...)} for      *  queryParameters semantics.      */
specifier|public
name|Request
name|buildGetRequest
parameter_list|(
name|String
name|path
parameter_list|,
name|String
modifier|...
name|queryParameters
parameter_list|)
block|{
return|return
operator|new
name|Request
argument_list|(
operator|new
name|HttpGet
argument_list|(
name|buildUrl
argument_list|(
name|path
argument_list|,
name|queryParameters
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Build a POST request to specified path with optional query      *  parameters. See {@link #buildUrl(String, String...)} for      *  queryParameters semantics.      */
specifier|public
name|Request
name|buildPostRequest
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|Request
argument_list|(
operator|new
name|HttpPost
argument_list|(
name|buildUrl
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Wrap supplied HTTP request */
specifier|public
name|Request
name|buildOtherRequest
parameter_list|(
name|HttpRequestBase
name|r
parameter_list|)
block|{
return|return
operator|new
name|Request
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/** Build an URL from our base path, supplied path and optional      *  query parameters.      *  @param queryParameters an even number of Strings, each pair      *  of values represents the key and value of a query parameter.      *  Keys and values are encoded by this method.      */
specifier|public
name|String
name|buildUrl
parameter_list|(
name|String
name|path
parameter_list|,
name|String
modifier|...
name|queryParameters
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryParameters
operator|==
literal|null
operator|||
name|queryParameters
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queryParameters
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid number of queryParameters arguments ("
operator|+
name|queryParameters
operator|.
name|length
operator|+
literal|"), must be even"
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|p
init|=
operator|new
name|ArrayList
argument_list|<
name|NameValuePair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryParameters
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|BasicNameValuePair
argument_list|(
name|queryParameters
index|[
name|i
index|]
argument_list|,
name|queryParameters
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|URLEncodedUtils
operator|.
name|format
argument_list|(
name|p
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

