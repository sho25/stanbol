begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpEntityEnclosingRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_comment
comment|/**  * Request class with convenience withXxx methods to  * add headers, parameters, etc.  */
end_comment

begin_class
specifier|public
class|class
name|Request
block|{
specifier|private
specifier|final
name|HttpRequestBase
name|request
decl_stmt|;
comment|//configure on unit test level
comment|//    private String username;
comment|//    private String password;
specifier|private
name|boolean
name|redirects
init|=
literal|true
decl_stmt|;
name|Request
parameter_list|(
name|HttpRequestBase
name|r
parameter_list|)
block|{
name|request
operator|=
name|r
expr_stmt|;
block|}
specifier|public
name|HttpRequestBase
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
specifier|public
name|Request
name|withHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Request
name|withRedirects
parameter_list|(
name|boolean
name|followRedirectsAutomatically
parameter_list|)
block|{
name|redirects
operator|=
name|followRedirectsAutomatically
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|HttpEntityEnclosingRequestBase
name|getHttpEntityEnclosingRequestBase
parameter_list|()
block|{
if|if
condition|(
name|request
operator|instanceof
name|HttpEntityEnclosingRequestBase
condition|)
block|{
return|return
operator|(
name|HttpEntityEnclosingRequestBase
operator|)
name|request
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Request is not an HttpEntityEnclosingRequestBase: "
operator|+
name|request
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Request
name|withContent
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|withEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
name|content
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Encodes the parsed form content. Strings at even indexes are interpreted      * as names. Values are {@link URLEncoder#encode(String, String) url encoded}.      * @param values the [{key-1},{value-1},...,{key-n},{key-n}] values for the form      * @return the Request with the form content added as {@link StringEntity}.      * @throws UnsupportedEncodingException if UTF-8 is not supported      * @throws IllegalArgumentException if an uneven number of elements are in the      * parsed values or if any parsed key is<code>null</code> or empty.      */
specifier|public
name|Request
name|withFormContent
parameter_list|(
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|withContent
argument_list|(
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|values
operator|.
name|length
operator|%
literal|2
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The number of values MUST BE an even number"
argument_list|)
throw|;
block|}
name|StringBuilder
name|content
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|values
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The name of the '"
operator|+
operator|(
name|i
operator|/
literal|2
operator|)
operator|+
literal|"' parameter MUST NOT be NULL nor empty (value='"
operator|+
name|values
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|"')!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|content
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|content
operator|.
name|append
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
index|[
name|i
operator|+
literal|1
index|]
operator|!=
literal|null
operator|&&
operator|!
name|values
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|content
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|values
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|withContent
argument_list|(
name|content
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Request
name|withEntity
parameter_list|(
name|HttpEntity
name|e
parameter_list|)
block|{
name|getHttpEntityEnclosingRequestBase
argument_list|()
operator|.
name|setEntity
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|//    public String getUsername() {
comment|//        return username;
comment|//    }
comment|//    public String getPassword() {
comment|//        return password;
comment|//    }
specifier|public
name|boolean
name|getRedirects
parameter_list|()
block|{
return|return
name|redirects
return|;
block|}
block|}
end_class

end_unit

