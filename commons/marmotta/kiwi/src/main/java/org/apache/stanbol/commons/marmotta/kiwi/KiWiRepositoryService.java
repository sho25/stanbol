begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|marmotta
operator|.
name|kiwi
package|;
end_package

begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|text
operator|.
name|StrLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|text
operator|.
name|StrSubstitutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|config
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|config
operator|.
name|CachingBackends
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|config
operator|.
name|KiWiConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|persistence
operator|.
name|KiWiDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|persistence
operator|.
name|h2
operator|.
name|H2Dialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|persistence
operator|.
name|mysql
operator|.
name|MySQLDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|persistence
operator|.
name|pgsql
operator|.
name|PostgreSQLDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|sail
operator|.
name|KiWiStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|marmotta
operator|.
name|kiwi
operator|.
name|sparql
operator|.
name|sail
operator|.
name|KiWiSparqlSail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|repository
operator|.
name|sail
operator|.
name|SailRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openrdf
operator|.
name|sail
operator|.
name|Sail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OSGI Component that allows to setup a Sesame {@link Repository} for a  * KiWi TripleStore. The configured {@link Repository} is registered as  * OSGI service so that it can be used by other components.<p>  * All {@link ComponentContext#getProperties() configuration properties} parsed  * to this component are also added to the registered service. This menas that  * others can use them to listen for a specific {@link Repository} instance   * (by using an {@link Filter}). Especially usefull for filtering is the  * {@link #KIWI_REP_ID}<p>  *  * @author Sebastian Schaffert (sschaffert@apache.org)  * @author Rupert Westenthaler - refactored to directly register the {@link Repository}  * as OSGI service.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
comment|//allow multiple instances
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|//the ID is required!
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|KiWiRepositoryService
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KiWiRepositoryService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The '</code>org.openrdf.repository.Repository.id</code>' intended to be       * used to {@link Filter} for a specific {@link Repository} instance.      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"kiwi"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_ID
init|=
literal|"org.openrdf.repository.Repository.id"
decl_stmt|;
comment|/**      * The '</code>org.openrdf.sail.Sail.impl</code>' intended to be       * used to {@link Filter} for a specific {@link Sail} implementations backing      * the registered {@link Repository} service.<p>      * The KiWiRepositoryService sets this property to the {@link Class#getName()} of      * the {@link KiWiStore} for every registered {@link Repository}.      */
specifier|public
specifier|static
specifier|final
name|String
name|SAIL_IMPL
init|=
literal|"org.openrdf.sail.Sail.impl"
decl_stmt|;
comment|/**      * The Database dialect      */
annotation|@
name|Property
argument_list|(
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|DB_DIALECT
operator|+
literal|".option."
operator|+
name|KiWiRepositoryService
operator|.
name|DB_DIALECT_POSTGRES
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|DB_DIALECT_POSTGRES
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|DB_DIALECT
operator|+
literal|".option."
operator|+
name|KiWiRepositoryService
operator|.
name|DB_DIALECT_MYSQL
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|DB_DIALECT_MYSQL
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|DB_DIALECT
operator|+
literal|".option."
operator|+
name|KiWiRepositoryService
operator|.
name|DB_DIALECT_H2
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|DB_DIALECT_H2
argument_list|)
block|}
argument_list|,
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_DB_DIALECT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DB_DIALECT
init|=
literal|"marmotta.kiwi.dialect"
decl_stmt|;
comment|/**      * Dialect for Postgres      */
specifier|public
specifier|static
specifier|final
name|String
name|DB_DIALECT_POSTGRES
init|=
literal|"postgres"
decl_stmt|;
comment|/**      * Diablect for MySQL      */
specifier|public
specifier|static
specifier|final
name|String
name|DB_DIALECT_MYSQL
init|=
literal|"mysql"
decl_stmt|;
comment|/**      * Dialect for H2      */
specifier|public
specifier|static
specifier|final
name|String
name|DB_DIALECT_H2
init|=
literal|"h2"
decl_stmt|;
comment|/**      * The default database dialect is {@link #DB_DIALECT_POSTGRES}      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DB_DIALECT
init|=
name|DB_DIALECT_H2
decl_stmt|;
comment|/**      * The database URL. THis property can be used instead of configuring      * the DB options in separate properties. If this property is present the      * other DB configurations will get ignored.      */
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|DB_URL
init|=
literal|"marmotta.kiwi.dburl"
decl_stmt|;
comment|/**      * The database host      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_DB_HOST
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DB_HOST
init|=
literal|"marmotta.kiwi.host"
decl_stmt|;
comment|/**      * The default database host (a file path in case of H2)      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DB_HOST
init|=
literal|"${sling.home}/marmotta/kiwi"
decl_stmt|;
comment|/**      * The database port      */
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_DB_PORT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DB_PORT
init|=
literal|"marmotta.kiwi.port"
decl_stmt|;
comment|/**      * The default database part (<code>-1</code> to use the default)      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DB_PORT
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The database name      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_DB_NAME
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"marmotta.kiwi.database"
decl_stmt|;
comment|/**      * The default database name      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DB_NAME
init|=
literal|"kiwi"
decl_stmt|;
comment|/**      * The database user name      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_DB_USER
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DB_USER
init|=
literal|"marmotta.kiwi.user"
decl_stmt|;
comment|/**      * The default db user      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DB_USER
init|=
literal|"kiwi"
decl_stmt|;
comment|/**      * The database user password      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_DB_PASS
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DB_PASS
init|=
literal|"marmotta.kiwi.password"
decl_stmt|;
comment|/**      * The default password      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DB_PASS
init|=
literal|"kiwi"
decl_stmt|;
comment|/**      * Additional DB options      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|";MVCC=true;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=10"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DB_OPTS
init|=
literal|"marmotta.kiwi.options"
decl_stmt|;
comment|/**      * The cluster name       */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_CLUSTER
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER
init|=
literal|"marmotta.kiwi.cluster"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CLUSTER
init|=
literal|"kiwi default"
decl_stmt|;
comment|/**      * The cluster address       */
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ADDRESS
init|=
literal|"marmotta.kiwi.cluster.address"
decl_stmt|;
comment|/**      * The cluster port       */
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
operator|-
literal|1
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_PORT
init|=
literal|"marmotta.kiwi.cluster.port"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHE_MODE
operator|+
literal|".option.local"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHE_MODE_LOCAL
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHE_MODE
operator|+
literal|".option.replicated"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHE_MODE_REPLICATED
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHE_MODE
operator|+
literal|".option.distributed"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHE_MODE_DISTRIBUTED
argument_list|)
block|}
argument_list|,
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_CACHE_MODE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_MODE
init|=
literal|"marmotta.kiwi.cluster.cachemode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_MODE_LOCAL
init|=
literal|"LOCAL"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_MODE_REPLICATED
init|=
literal|"REPLICATED"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_MODE_DISTRIBUTED
init|=
literal|"DISTRIBUTED"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_MODE
init|=
name|CACHE_MODE_LOCAL
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND
operator|+
literal|".option.ehcache"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND_EHCACHE
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND
operator|+
literal|".option.guava"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND_GUAVA
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND
operator|+
literal|".option.hazelcast"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND_HAZELCAST
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND
operator|+
literal|".option.infinispan-clustered"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND_INFINISPAN_CLUSTERED
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|value
operator|=
literal|'%'
operator|+
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND
operator|+
literal|".option.infinispan-hotrod"
argument_list|,
name|name
operator|=
name|KiWiRepositoryService
operator|.
name|CACHING_BACKEND_INFINISPAN_HOTROD
argument_list|)
block|}
argument_list|,
name|value
operator|=
name|KiWiRepositoryService
operator|.
name|DEFAULT_CACHING_BACKEND
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CACHING_BACKEND
init|=
literal|"marmotta.kiwi.cluster.cachingbackend"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHING_BACKEND_EHCACHE
init|=
literal|"EHCACHE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHING_BACKEND_GUAVA
init|=
literal|"GUAVA"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHING_BACKEND_HAZELCAST
init|=
literal|"HAZELCAST"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHING_BACKEND_INFINISPAN_CLUSTERED
init|=
literal|"INFINISPAN_CLUSTERED"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHING_BACKEND_INFINISPAN_HOTROD
init|=
literal|"INFINISPAN_HOTROD"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CACHING_BACKEND
init|=
name|CACHING_BACKEND_GUAVA
decl_stmt|;
comment|//    @Property(intValue = KiWiRepositoryService.DEFAULT_DB_POOL)
comment|//    public static final String DB_POOL = "marmotta.kiwi.pool_size";
comment|//
comment|//    public static final int DEFAULT_DB_POOL = 20;
comment|/**      * The Kiwi {@link Repository} as configured in the       * {@link #activate(ComponentContext)} method      */
specifier|private
name|Repository
name|repository
decl_stmt|;
comment|/**      * The registration for the {@link #repository}      */
specifier|private
name|ServiceRegistration
name|repoRegistration
decl_stmt|;
comment|/**      * The database url.      */
specifier|private
name|String
name|dbUrl
decl_stmt|;
annotation|@
name|Activate
specifier|protected
specifier|final
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|RepositoryException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"activate KiWi repository ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
comment|//copy the read-only configuration as we might need to change it before
comment|//adding it to the registered service
specifier|final
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|copyConfig
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|BundleContext
name|bc
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
comment|//we want to substitute variables used in the dbURL with configuration,
comment|//framework and system properties
name|StrSubstitutor
name|strSubstitutor
init|=
operator|new
name|StrSubstitutor
argument_list|(
operator|new
name|StrLookup
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|lookup
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Object
name|val
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|bc
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|val
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|REPOSITORY_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|REPOSITORY_ID
argument_list|,
literal|"The parsed Repository ID MUST NOT be NULL nor blank!"
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" - name: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|KiWiDialect
name|dialect
decl_stmt|;
name|String
name|db_type
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"postgres"
argument_list|,
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_DIALECT
argument_list|)
argument_list|)
condition|)
block|{
name|dialect
operator|=
operator|new
name|PostgreSQLDialect
argument_list|()
expr_stmt|;
name|db_type
operator|=
literal|"postgresql"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mysql"
argument_list|,
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_DIALECT
argument_list|)
argument_list|)
condition|)
block|{
name|dialect
operator|=
operator|new
name|MySQLDialect
argument_list|()
expr_stmt|;
name|db_type
operator|=
literal|"mysql"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"h2"
argument_list|,
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_DIALECT
argument_list|)
argument_list|)
condition|)
block|{
name|dialect
operator|=
operator|new
name|H2Dialect
argument_list|()
expr_stmt|;
name|db_type
operator|=
literal|"h2"
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DB_DIALECT
argument_list|,
literal|"No valid database dialect was given"
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - dialect: {}"
argument_list|,
name|dialect
argument_list|)
expr_stmt|;
name|String
name|db_url
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|db_url
argument_list|)
condition|)
block|{
comment|//build the db url from parameters
name|String
name|db_host
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|db_host
argument_list|)
condition|)
block|{
name|db_host
operator|=
name|DEFAULT_DB_HOST
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - db host: {}"
argument_list|,
name|db_host
argument_list|)
expr_stmt|;
name|String
name|db_name
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|db_name
argument_list|)
condition|)
block|{
name|db_name
operator|=
name|DEFAULT_DB_NAME
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - db name:  {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|int
name|db_port
decl_stmt|;
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|DB_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|db_port
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|db_port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db_port
operator|=
name|DEFAULT_DB_PORT
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - db port: {}"
argument_list|,
name|db_port
argument_list|)
expr_stmt|;
name|String
name|db_opts
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_OPTS
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" - db options: {}"
argument_list|,
name|db_opts
argument_list|)
expr_stmt|;
name|StringBuilder
name|dbUrlBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"jdbc:"
argument_list|)
operator|.
name|append
argument_list|(
name|db_type
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialect
operator|instanceof
name|H2Dialect
condition|)
block|{
comment|//H2 uses a file path and not a host so we do not need the ://
name|dbUrlBuilder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|db_host
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbUrlBuilder
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
operator|.
name|append
argument_list|(
name|db_host
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|db_port
operator|>
literal|0
condition|)
block|{
name|dbUrlBuilder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|db_port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|db_name
argument_list|)
condition|)
block|{
name|dbUrlBuilder
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|db_opts
argument_list|)
condition|)
block|{
name|dbUrlBuilder
operator|.
name|append
argument_list|(
name|db_opts
argument_list|)
expr_stmt|;
block|}
name|dbUrl
operator|=
name|strSubstitutor
operator|.
name|replace
argument_list|(
name|dbUrlBuilder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|db_url
operator|.
name|startsWith
argument_list|(
literal|"jdbc:"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|DB_URL
argument_list|,
literal|"Database URLs are expected to start with "
operator|+
literal|"'jdbc:' (parsed: '"
operator|+
name|db_url
operator|+
literal|"')!"
argument_list|)
throw|;
block|}
else|else
block|{
name|dbUrl
operator|=
name|strSubstitutor
operator|.
name|replace
argument_list|(
name|db_url
argument_list|)
expr_stmt|;
block|}
name|String
name|db_user
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|db_user
argument_list|)
condition|)
block|{
name|db_user
operator|=
name|DEFAULT_DB_USER
expr_stmt|;
block|}
else|else
block|{
name|db_user
operator|=
name|strSubstitutor
operator|.
name|replace
argument_list|(
name|db_user
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - db user: {}"
argument_list|,
name|db_user
argument_list|)
expr_stmt|;
name|String
name|db_pass
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|DB_PASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|db_pass
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" - db pwd is set to default"
argument_list|)
expr_stmt|;
name|db_pass
operator|=
name|DEFAULT_DB_PASS
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" - db pwd is set to parsed value"
argument_list|)
expr_stmt|;
block|}
name|KiWiConfiguration
name|configuration
init|=
operator|new
name|KiWiConfiguration
argument_list|(
literal|"Marmotta KiWi"
argument_list|,
name|dbUrl
argument_list|,
name|db_user
argument_list|,
name|db_pass
argument_list|,
name|dialect
argument_list|)
decl_stmt|;
comment|//parse cluster options
name|String
name|cluster
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|CLUSTER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|cluster
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" - cluster: {}"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setClustered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setClusterName
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|String
name|clusterAddress
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|CLUSTER_ADDRESS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|clusterAddress
argument_list|)
condition|)
block|{
name|configuration
operator|.
name|setClusterAddress
argument_list|(
name|strSubstitutor
operator|.
name|replace
argument_list|(
name|clusterAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - cluster address: {}"
argument_list|,
name|configuration
operator|.
name|getClusterAddress
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|clusterPort
init|=
name|config
operator|.
name|get
argument_list|(
name|CLUSTER_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterPort
operator|instanceof
name|Number
condition|)
block|{
name|int
name|port
init|=
operator|(
operator|(
name|Number
operator|)
name|clusterPort
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|configuration
operator|.
name|setClusterPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
comment|//else use default
block|}
elseif|else
if|if
condition|(
name|clusterPort
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strSubstitutor
operator|.
name|replace
argument_list|(
name|clusterPort
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|configuration
operator|.
name|setClusterPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|CLUSTER_PORT
argument_list|,
literal|"Unable to parse "
operator|+
literal|"Cluster Port from configured value '"
operator|+
name|clusterPort
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - cluster port ({})"
argument_list|,
name|configuration
operator|.
name|getClusterPort
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cachingBackend
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|CACHING_BACKEND
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|cachingBackend
argument_list|)
condition|)
block|{
name|configuration
operator|.
name|setCachingBackend
argument_list|(
name|CachingBackends
operator|.
name|valueOf
argument_list|(
name|DEFAULT_CACHING_BACKEND
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|configuration
operator|.
name|setCachingBackend
argument_list|(
name|CachingBackends
operator|.
name|valueOf
argument_list|(
name|strSubstitutor
operator|.
name|replace
argument_list|(
name|cachingBackend
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|CACHING_BACKEND
argument_list|,
literal|"Unsupported CachingBackend '"
operator|+
name|cachingBackend
operator|+
literal|"' (supported: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|CachingBackends
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|")!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - caching Backend: {}"
argument_list|,
name|configuration
operator|.
name|getCachingBackend
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cacheMode
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|CACHE_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|cacheMode
argument_list|)
condition|)
block|{
name|cacheMode
operator|=
name|DEFAULT_CACHE_MODE
expr_stmt|;
block|}
try|try
block|{
name|configuration
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|valueOf
argument_list|(
name|strSubstitutor
operator|.
name|replace
argument_list|(
name|cacheMode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|CACHE_MODE
argument_list|,
literal|"Unsupported CacheMode '"
operator|+
name|cacheMode
operator|+
literal|"' (supported: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|CacheMode
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|")!"
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|" - cache mode: {}"
argument_list|,
name|configuration
operator|.
name|getCacheMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not clustered
name|log
operator|.
name|debug
argument_list|(
literal|" - no cluster configured"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setClustered
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|" ... initialise KiWi repository: {}"
argument_list|,
name|dbUrl
argument_list|)
expr_stmt|;
name|KiWiStore
name|store
init|=
operator|new
name|KiWiStore
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|repository
operator|=
operator|new
name|SailRepository
argument_list|(
operator|new
name|KiWiSparqlSail
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|//set the repository type property to KiWiStore
name|config
operator|.
name|put
argument_list|(
name|SAIL_IMPL
argument_list|,
name|KiWiStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|repoRegistration
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|Repository
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|repository
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  - successfully registered KiWi Repository {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
specifier|final
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"> deactivate KiWi repository: database URL is {}"
argument_list|,
name|dbUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|repoRegistration
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - unregister Service"
argument_list|)
expr_stmt|;
name|repoRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|repoRegistration
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... unregistered"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - shutdown Repository"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|shutDown
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... done"
argument_list|)
expr_stmt|;
name|repository
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|" - repository was not active (ignore call)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Copies the read-only configuration parsed by  	 * {@link ComponentContext#getProperties()} to an other {@link Dictionary} 	 * so that it can be modified. 	 * @param context the context 	 * @return the copied configuration 	 */
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copyConfig
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|config
operator|.
name|keys
argument_list|()
init|;
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

