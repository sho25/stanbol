begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobManager
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@JobManager} interface.  *   * @author enridaga  *  *  * @scr.component immediate="true"  * @scr.service  *  */
end_comment

begin_class
specifier|public
class|class
name|JobManagerImpl
implements|implements
name|JobManager
block|{
specifier|private
name|ExecutorService
name|pool
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|taskMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|locations
decl_stmt|;
specifier|public
name|JobManagerImpl
parameter_list|()
block|{
name|this
operator|.
name|pool
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|locations
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|execute
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|String
name|id
init|=
name|JobManagerImpl
operator|.
name|buildId
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|this
operator|.
name|pool
operator|.
name|submit
argument_list|(
name|job
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|taskMap
init|)
block|{
name|taskMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|locations
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|job
operator|.
name|buildResultLocation
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|ping
parameter_list|(
name|String
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|taskMap
init|)
block|{
return|return
name|taskMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getResultLocation
parameter_list|(
name|String
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|locations
init|)
block|{
return|return
name|locations
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasJob
parameter_list|(
name|String
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|taskMap
init|)
block|{
return|return
name|taskMap
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|taskMap
init|)
block|{
return|return
name|taskMap
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|taskMap
init|)
block|{
comment|// If the job does not exists
name|Future
argument_list|<
name|?
argument_list|>
name|f
init|=
name|taskMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Job does not exists"
argument_list|)
throw|;
block|}
name|f
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|taskMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|locations
init|)
block|{
name|locations
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * To build a unique string identifier for a background process      *       * @param obj      * @return      */
specifier|public
specifier|static
name|String
name|buildId
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|String
name|str
init|=
name|obj
operator|.
name|toString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|thedigest
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|bytesOfMessage
init|=
name|str
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|thedigest
operator|=
name|md
operator|.
name|digest
argument_list|(
name|bytesOfMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// This should never happen
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
comment|// This should never happen
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|Base64
operator|.
name|encodeBase64URLSafeString
argument_list|(
name|thedigest
argument_list|)
return|;
block|}
comment|/**      * Removes all jobs      */
annotation|@
name|Override
specifier|public
name|void
name|removeAll
parameter_list|()
block|{
name|String
index|[]
name|ids
decl_stmt|;
synchronized|synchronized
init|(
name|taskMap
init|)
block|{
name|ids
operator|=
name|taskMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|taskMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|j
range|:
name|ids
control|)
block|{
name|remove
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

