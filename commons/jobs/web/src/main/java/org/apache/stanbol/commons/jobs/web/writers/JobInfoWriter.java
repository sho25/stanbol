begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|web
operator|.
name|writers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|impl
operator|.
name|JobInfoImpl
import|;
end_import

begin_comment
comment|/**  * Writer for job info  *   * @author enridaga  *  */
end_comment

begin_class
annotation|@
name|Provider
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/json"
block|,
literal|"text/plain"
block|}
argument_list|)
specifier|public
class|class
name|JobInfoWriter
implements|implements
name|MessageBodyWriter
argument_list|<
name|JobInfo
argument_list|>
block|{
specifier|private
name|ByteArrayOutputStream
name|stream
init|=
literal|null
decl_stmt|;
specifier|public
name|ByteArrayOutputStream
name|toStream
parameter_list|(
name|JobInfo
name|t
parameter_list|,
name|String
name|mediaType
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
literal|"application/json"
argument_list|)
condition|)
block|{
comment|// Json
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"status\": "
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"outputLocation\": "
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|getOutputLocation
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"messages\": "
argument_list|)
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|t
operator|.
name|getMessages
argument_list|()
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"\n\t\t\""
argument_list|)
operator|.
name|append
argument_list|(
name|m
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"\n\t\t]\n}"
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|write
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
comment|// Plain text
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"Status: "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nOutput location: "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|getOutputLocation
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nMessages:"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|t
operator|.
name|getMessages
argument_list|()
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"\n - "
argument_list|)
operator|.
name|append
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|write
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|JobInfoImpl
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|JobInfo
name|t
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
try|try
block|{
name|stream
operator|=
name|toStream
argument_list|(
name|t
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|JobInfo
name|t
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|OutputStream
name|entityStream
parameter_list|)
throws|throws
name|WebApplicationException
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|toStream
argument_list|(
name|t
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|writeTo
argument_list|(
name|entityStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|stream
operator|.
name|writeTo
argument_list|(
name|entityStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|stream
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

