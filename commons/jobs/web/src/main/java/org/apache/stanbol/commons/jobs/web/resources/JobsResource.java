begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|api
operator|.
name|JobResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jobs
operator|.
name|impl
operator|.
name|JobInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Manages Background Jobs  *   * @author enridaga  *   */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Object
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/jobs"
argument_list|)
specifier|public
class|class
name|JobsResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Context
specifier|protected
name|HttpHeaders
name|headers
decl_stmt|;
comment|//private JobInfo info = null;
annotation|@
name|Reference
specifier|private
name|JobManager
name|jobManager
decl_stmt|;
comment|/*public JobInfo getJobInfo(){         return info;     }*/
annotation|@
name|GET
specifier|public
name|Response
name|get
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * GET info about a Background Job      *       * @param id      * @return Response      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{jid}"
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jid"
argument_list|)
name|String
name|id
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Called get() with id {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// No id
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|JobManager
name|m
init|=
name|jobManager
decl_stmt|;
comment|// If the job exists
if|if
condition|(
name|m
operator|.
name|hasJob
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found job with id {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f
init|=
name|m
operator|.
name|ping
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//this.info = new JobInfoImpl();
name|JobInfo
name|info
init|=
operator|new
name|JobInfoImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isDone
argument_list|()
condition|)
block|{
comment|// The job is finished
if|if
condition|(
name|f
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
comment|// NOTE: Canceled jobs should never exist.
comment|// The web service remove any deleted process from the manager
comment|// If a process have been canceled programmatically, it cannot be managed by the service anymore
comment|// (except for DELETE)
name|log
operator|.
name|warn
argument_list|(
literal|"Job with id {} have been canceled. Returning 404 Not found."
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// Job is complete
name|info
operator|.
name|setFinished
argument_list|()
expr_stmt|;
name|info
operator|.
name|addMessage
argument_list|(
literal|"You can remove this job using DELETE"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// the job exists but it is not complete
name|info
operator|.
name|setRunning
argument_list|()
expr_stmt|;
name|info
operator|.
name|addMessage
argument_list|(
literal|"You can interrupt this job using DELETE"
argument_list|)
expr_stmt|;
block|}
comment|// Returns 200, the job exists
name|info
operator|.
name|setOutputLocation
argument_list|(
name|getPublicBaseUri
argument_list|()
operator|+
name|m
operator|.
name|getResultLocation
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHTML
argument_list|()
condition|)
block|{
comment|// Result as HTML
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"info"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// Result as application/json, text/plain
return|return
name|Response
operator|.
name|ok
argument_list|(
name|info
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No job found with id {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
name|boolean
name|isHTML
parameter_list|()
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|mediaTypes
init|=
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|htmlformats
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|htmlformats
operator|.
name|add
argument_list|(
name|TEXT_HTML
argument_list|)
expr_stmt|;
for|for
control|(
name|MediaType
name|t
range|:
name|mediaTypes
control|)
block|{
name|String
name|strty
init|=
name|t
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Acceptable is {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|htmlformats
operator|.
name|contains
argument_list|(
name|strty
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Requested format is HTML {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * DELETE a background job. This method will find a job,       * interrupt it if it is running, and removing it      * from the {@see JobManager}.      *       * @param jid      * @return      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/{jid}"
argument_list|)
specifier|public
name|Response
name|delete
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"jid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Called DELETE ({})"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Looking for test job {}"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
name|JobManager
name|m
init|=
name|jobManager
decl_stmt|;
comment|// If the job exists
if|if
condition|(
name|m
operator|.
name|hasJob
argument_list|(
name|jid
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting Job id {}"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
name|m
operator|.
name|remove
argument_list|(
name|jid
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"Job deleted."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No job found with id {}"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
comment|/**      * DELETE all background jobs.      *       * @return      */
annotation|@
name|DELETE
specifier|public
name|Response
name|delete
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Called DELETE all jobs"
argument_list|)
expr_stmt|;
name|JobManager
name|manager
init|=
name|jobManager
decl_stmt|;
name|manager
operator|.
name|removeAll
argument_list|()
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|"All jobs have been deleted."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Creates a new background job to be used to test the service.      * This method is for testing the service and to provide a sample implementation      * of a long term operation started form a rest service.      *       * @return      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/test{jid: (/.*)?}"
argument_list|)
specifier|public
name|Response
name|test
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"jid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Called GET (create test job)"
argument_list|)
expr_stmt|;
comment|// If an Id have been provided, check whether the job has finished and return the result
if|if
condition|(
operator|!
name|jid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Looking for test job {}"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
name|JobManager
name|m
init|=
name|jobManager
decl_stmt|;
comment|// Remove first slash from param value
name|jid
operator|=
name|jid
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// If the job exists
if|if
condition|(
name|m
operator|.
name|hasJob
argument_list|(
name|jid
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found job with id {}"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f
init|=
name|m
operator|.
name|ping
argument_list|(
name|jid
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isDone
argument_list|()
operator|&&
operator|(
operator|!
name|f
operator|.
name|isCancelled
argument_list|()
operator|)
condition|)
block|{
comment|/**                      * We return OK with the result                      */
name|Object
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|JobResult
condition|)
block|{
name|JobResult
name|result
init|=
operator|(
name|JobResult
operator|)
name|o
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Job {} is not a test job"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|/**                      * We return 404 with additional info (Content-Location, the related job resource)                      *                       * TODO                      * Change into json representations                      */
name|String
name|location
init|=
name|getPublicBaseUri
argument_list|()
operator|+
literal|"jobs/"
operator|+
name|jid
decl_stmt|;
name|String
name|info
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"Result not ready.\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Job Location: "
argument_list|)
operator|.
name|append
argument_list|(
name|location
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
literal|404
argument_list|)
operator|.
name|header
argument_list|(
literal|"Content-Location"
argument_list|,
name|location
argument_list|)
operator|.
name|header
argument_list|(
literal|"Content-type"
argument_list|,
literal|"text/plain"
argument_list|)
operator|.
name|entity
argument_list|(
name|info
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No job found with id {}"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
comment|// No id have been provided, we create a new test job
name|JobManager
name|m
init|=
name|jobManager
decl_stmt|;
name|String
name|id
init|=
name|m
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JobResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Test Process is working"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
return|return
operator|new
name|JobResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
literal|"This is a test job"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|buildResultLocation
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
return|return
literal|"jobs/test/"
operator|+
name|jobId
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// This service returns 201 Created on success
name|String
name|location
init|=
name|getPublicBaseUri
argument_list|()
operator|+
literal|"jobs/"
operator|+
name|id
decl_stmt|;
name|String
name|info
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"Job started.\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Location: "
argument_list|)
operator|.
name|append
argument_list|(
name|location
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|location
argument_list|)
argument_list|)
operator|.
name|header
argument_list|(
literal|"Content-type"
argument_list|,
literal|"text/plain"
argument_list|)
operator|.
name|entity
argument_list|(
name|info
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

