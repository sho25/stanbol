begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|RunSingleSPARQL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|ResultSet
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  */
end_comment

begin_class
specifier|public
class|class
name|RunSingleSPARQLTest
block|{
specifier|public
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|public
name|OWLOntology
name|owl
decl_stmt|;
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sparqlprefix
decl_stmt|;
specifier|public
name|RunSingleSPARQLTest
parameter_list|()
throws|throws
name|OWLOntologyCreationException
block|{
name|this
operator|.
name|owlmanager
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|owl
operator|=
name|owlmanager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
operator|new
name|File
argument_list|(
literal|"./src/main/resources/TestFile/ProvaParent.owl"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{     }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{     }
comment|/**      * Test of getSPARQLprefix method, of class RunSingleSPARQL.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetSPARQLprefix
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdfs"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"owl"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdf"
argument_list|,
literal|"<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"ex"
argument_list|,
literal|"<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
argument_list|)
expr_stmt|;
name|RunSingleSPARQL
name|instance
init|=
operator|new
name|RunSingleSPARQL
argument_list|(
name|owl
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
name|map
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|instance
operator|.
name|getSPARQLprefix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO review the generated test code and remove the default call to fail.
name|fail
argument_list|(
literal|"Some errors occur in getSPARQLprefix of KReSRunSPARQL."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test of addSPARQLprefix method, of class RunSingleSPARQL.      */
annotation|@
name|Test
specifier|public
name|void
name|testAddSPARQLprefix
parameter_list|()
block|{
name|String
name|label
init|=
literal|"mylabel"
decl_stmt|;
name|String
name|prefix
init|=
literal|"<http://prova.mylabel.org#>"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdfs"
argument_list|,
literal|"http://www.w3.org/2000/01/rdf-schema#"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"owl"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdf"
argument_list|,
literal|"<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"ex"
argument_list|,
literal|"<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
argument_list|)
expr_stmt|;
name|RunSingleSPARQL
name|instance
init|=
operator|new
name|RunSingleSPARQL
argument_list|(
name|owl
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|instance
operator|.
name|addSPARQLprefix
argument_list|(
name|label
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mymap
init|=
name|instance
operator|.
name|getSPARQLprefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|prefix
argument_list|,
name|mymap
operator|.
name|get
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur in addSPARQLprefix of KReSRunSPARQL."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test of removeSPARQLprefix method, of class RunSingleSPARQL.      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSPARQLprefix
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdfs"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"owl"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdf"
argument_list|,
literal|"<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"ex"
argument_list|,
literal|"<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
argument_list|)
expr_stmt|;
name|RunSingleSPARQL
name|instance
init|=
operator|new
name|RunSingleSPARQL
argument_list|(
name|owl
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|instance
operator|.
name|removeSPARQLprefix
argument_list|(
literal|"ex"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mymap
init|=
name|instance
operator|.
name|getSPARQLprefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|mymap
operator|.
name|containsKey
argument_list|(
literal|"ex"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur in removeSPARQLprefix of KReSRunSPARQL."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test of runSPARQL method, of class RunSingleSPARQL.      */
annotation|@
name|Test
specifier|public
name|void
name|testRunSPARQL
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdfs"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"owl"
argument_list|,
literal|"<http://www.w3.org/2000/01/rdf-schema#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rdf"
argument_list|,
literal|"<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"ex"
argument_list|,
literal|"<http://www.semanticweb.org/ontologies/2010/6/ProvaParent.owl#>"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"SELECT * WHERE {?p rdf:type ex:Person .}"
decl_stmt|;
name|RunSingleSPARQL
name|instance
init|=
operator|new
name|RunSingleSPARQL
argument_list|(
name|owl
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|instance
operator|.
name|runSPARQL
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|int
name|m
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|next
argument_list|()
expr_stmt|;
name|m
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|// TODO review the generated test code and remove the default call to fail.
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Some errors occur in runSPARQL of KReSRunSPARQL"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

