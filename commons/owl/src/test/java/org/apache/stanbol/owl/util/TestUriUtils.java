begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_class
specifier|public
class|class
name|TestUriUtils
block|{
specifier|private
name|String
name|_BASE
init|=
literal|"http://www.ontologydesignpatterns.org/registry/explanation"
decl_stmt|;
specifier|private
name|IRI
name|iri_hash
init|=
name|IRI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|".owl#ExplanationSchemaCatalog"
argument_list|)
decl_stmt|;
specifier|private
name|IRI
name|iri_slash
init|=
name|IRI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"/ExplanationSchemaCatalog"
argument_list|)
decl_stmt|;
specifier|private
name|IRI
name|iri_slash_end
init|=
name|IRI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"/ExplanationSchemaCatalog/"
argument_list|)
decl_stmt|;
specifier|private
name|IRI
name|iri_query
init|=
name|IRI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"?arg1=value1&arg2=value2"
argument_list|)
decl_stmt|;
specifier|private
name|IRI
name|iri_slash_query
init|=
name|IRI
operator|.
name|create
argument_list|(
name|_BASE
operator|+
literal|"/?arg1=value1&arg2=value2"
argument_list|)
decl_stmt|;
comment|/**      * Test that every IRI configuration is stripped as expected.      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testUpOne
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|_BASE
operator|+
literal|".owl"
argument_list|,
name|URIUtils
operator|.
name|upOne
argument_list|(
name|iri_hash
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|_BASE
argument_list|,
name|URIUtils
operator|.
name|upOne
argument_list|(
name|iri_slash
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|_BASE
argument_list|,
name|URIUtils
operator|.
name|upOne
argument_list|(
name|iri_slash_end
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|_BASE
argument_list|,
name|URIUtils
operator|.
name|upOne
argument_list|(
name|iri_query
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|_BASE
operator|+
literal|"/"
argument_list|,
name|URIUtils
operator|.
name|upOne
argument_list|(
name|iri_slash_query
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

