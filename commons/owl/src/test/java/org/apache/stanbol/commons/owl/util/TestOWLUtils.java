begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|parser
operator|.
name|JenaParserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|simple
operator|.
name|storage
operator|.
name|SimpleTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test suite for the OWL language utility methods.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|TestOWLUtils
block|{
comment|/*      * I need a new Parser because if I use getInsance() I keep getting an annoying exception on a      * RdfJsonParsing Provider that I don't need.      */
specifier|private
specifier|static
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupTests
parameter_list|()
throws|throws
name|Exception
block|{
name|TcManager
operator|.
name|getInstance
argument_list|()
operator|.
name|addWeightedTcProvider
argument_list|(
operator|new
name|SimpleTcProvider
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|bindParsingProvider
argument_list|(
operator|new
name|JenaParserProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|IRI
name|ontologyIri
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://stanbol.apache.org/ontologies/test"
argument_list|)
decl_stmt|;
specifier|private
name|UriRef
name|uri
init|=
operator|new
name|UriRef
argument_list|(
literal|"ontonet:http://stanbol.apache.org/prova"
argument_list|)
decl_stmt|;
comment|/*      * Guessing the ID of a named ontology whose IRI is near the end of the graph.      */
annotation|@
name|Test
specifier|public
name|void
name|lookaheadNamed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/owl/named.owl"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing lookahead for location {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|// Try a low triple limit (the ontology IRI triple is much further).
name|InputStream
name|content
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try again with no limit
name|content
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|id
operator|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/*      * Guessing the ID of a named ontology whose IRI is at the beginning of the graph.      */
annotation|@
name|Test
specifier|public
name|void
name|lookaheadNamedImmediate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/owl/named_immediate.owl"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing lookahead for location {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|// Try a low triple limit (the ontology IRI triple is much further).
name|InputStream
name|content
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/*      * Guessing the ID of a versioned ontology whose IRIs are grouped at the end of the graph.      */
annotation|@
name|Test
specifier|public
name|void
name|lookaheadVersioned
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Identifiers are at position> 10 . Triples are grouped.
comment|// Minimum offset required is 2 because of an owl:versionInfo triple in-between.
name|String
name|location
init|=
literal|"/owl/versioned.owl"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing lookahead for location {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|IRI
name|incubatedVersion
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://svn.apache.org/repos/asf/incubator/stanbol/trunk/commons/owl/src/test/resources/owl/versioned.owl"
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|expectedOntId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|,
name|incubatedVersion
argument_list|)
decl_stmt|;
comment|// Low triple limit: guessing should fail.
name|InputStream
name|content
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reasonable triple limit with low offset: guessing should return the unversioned ID.
name|content
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|id
operator|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|,
literal|256
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Reasonable triple limit with auto offset: guessing should succeed.
name|content
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|id
operator|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOntId
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// No triple limit: guessing should succeed.
name|content
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|id
operator|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOntId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/*      * Guessing the ID of a versioned ontology whose ontology IRI is declared>100 triples before its version      * IRI.      */
annotation|@
name|Test
specifier|public
name|void
name|lookaheadVersionedDistance100
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Actual distance is 102
name|String
name|location
init|=
literal|"/owl/versioned_distance-100.owl"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing lookahead for location {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|IRI
name|incubatedVersion
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://svn.apache.org/repos/asf/incubator/stanbol/trunk/commons/owl/src/test/resources/owl/versioned_distance-100.owl"
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|expectedOntId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|,
name|incubatedVersion
argument_list|)
decl_stmt|;
comment|// No triple limit but offset< 102 : guessing should return the unversioned ID.
name|InputStream
name|content
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|TURTLE
argument_list|,
operator|-
literal|1
argument_list|,
literal|99
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// Try again, setting limit = 1024 (offset = 102) should work.
name|content
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|id
operator|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|TURTLE
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOntId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/*      * Guessing the ID of an ontology whose ontology IRI is declared>100 triples after its version IRI.      */
annotation|@
name|Test
specifier|public
name|void
name|lookaheadVersionedDistance100Reversed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Actual distance is 102
name|String
name|location
init|=
literal|"/owl/versioned_distance-100-reversed.owl"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing lookahead for location {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|IRI
name|incubatedVersion
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://svn.apache.org/repos/asf/incubator/stanbol/trunk/commons/owl/src/test/resources/owl/versioned_distance-100-reversed.owl"
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|expectedOntId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|,
name|incubatedVersion
argument_list|)
decl_stmt|;
comment|// No triple limit but offset< 102 : guessing should fail.
name|InputStream
name|content
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|TURTLE
argument_list|,
operator|-
literal|1
argument_list|,
literal|99
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try again, setting limit = 1024 (offset = 102) should work.
name|content
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|id
operator|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|TURTLE
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|id
operator|.
name|isAnonymous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOntId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/*      * Guessing the ID of a versioned ontology whose ID is at the beginning of the graph.      */
annotation|@
name|Test
specifier|public
name|void
name|lookaheadVersionedImmediate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|location
init|=
literal|"/owl/versioned_immediate.owl"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing lookahead for location {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|IRI
name|incubatedVersion
init|=
name|IRI
operator|.
name|create
argument_list|(
literal|"http://svn.apache.org/repos/asf/incubator/stanbol/trunk/commons/owl/src/test/resources/owl/versioned_immediate.owl"
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|expectedOntId
init|=
operator|new
name|OWLOntologyID
argument_list|(
name|ontologyIri
argument_list|,
name|incubatedVersion
argument_list|)
decl_stmt|;
comment|// Try a low triple limit (the ontology IRI triple is much further).
name|InputStream
name|content
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|OWLOntologyID
name|id
init|=
name|OWLUtils
operator|.
name|guessOntologyID
argument_list|(
name|content
argument_list|,
name|parser
argument_list|,
name|RDF_XML
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOntId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/*      * Extracting the OWL ontology identifier on a *whole* ontology.      */
annotation|@
name|Test
specifier|public
name|void
name|namedUriRef
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/owl/maincharacters.owl"
argument_list|)
decl_stmt|;
name|MGraph
name|mg
init|=
name|TcManager
operator|.
name|getInstance
argument_list|()
operator|.
name|createMGraph
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|mg
argument_list|,
name|inputStream
argument_list|,
literal|"application/rdf+xml"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|OWLUtils
operator|.
name|extractOntologyID
argument_list|(
name|mg
operator|.
name|getGraph
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Extracting the OWL ontology identifier on a *whole* nameless ontology must return a null value.      */
annotation|@
name|Test
specifier|public
name|void
name|namelessUriRef
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/owl/nameless.owl"
argument_list|)
decl_stmt|;
name|MGraph
name|mg
init|=
name|TcManager
operator|.
name|getInstance
argument_list|()
operator|.
name|createMGraph
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|mg
argument_list|,
name|inputStream
argument_list|,
literal|"application/rdf+xml"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|OWLUtils
operator|.
name|extractOntologyID
argument_list|(
name|mg
operator|.
name|getGraph
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|TcManager
operator|.
name|getInstance
argument_list|()
operator|.
name|listTripleCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
condition|)
name|TcManager
operator|.
name|getInstance
argument_list|()
operator|.
name|deleteTripleCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

