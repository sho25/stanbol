begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|ParsingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SerializingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|parser
operator|.
name|JenaParserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|serializer
operator|.
name|JenaSerializerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|PhonyIRIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_comment
comment|/**  * This class provides static methods to convert:  *   *<ul>  *<li>a Jena Model (see {@link Model}) to a list of Clerezza triples (see {@link Triple})  *<li>a Jena Model to a Clerezza MGraph (see {@link MGraph})  *<li>a Clerezza MGraph a Jena Model  *<li>a Clerezza MGraph a Jena Graph (see {@link Graph}  *</ul>  *   *   * @author andrea.nuzzolese  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OWLAPIToClerezzaConverter
block|{
comment|/**      * Restrict instantiation      */
specifier|private
name|OWLAPIToClerezzaConverter
parameter_list|()
block|{}
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OWLAPIToClerezzaConverter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *       * Converts an OWL API {@link OWLOntology} to an {@link ArrayList} of Clerezza triples (instances of class      * {@link Triple}).      *       * @param ontology      *            {@link OWLOntology}      * @return an {@link ArrayList} that contains the generated Clerezza triples (see {@link Triple})      */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|owlOntologyToClerezzaTriples
parameter_list|(
name|OWLOntology
name|ontology
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|clerezzaTriples
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|TripleCollection
name|mGraph
init|=
name|owlOntologyToClerezzaMGraph
argument_list|(
name|ontology
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|tripleIterator
init|=
name|mGraph
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tripleIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|tripleIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|clerezzaTriples
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
return|return
name|clerezzaTriples
return|;
block|}
comment|/**      *       * Converts a OWL API {@link OWLOntology} to Clerezza {@link MGraph}.      *       * @param ontology      *            {@link OWLOntology}      * @return the equivalent Clerezza {@link MGraph}.      */
specifier|public
specifier|static
name|TripleCollection
name|owlOntologyToClerezzaMGraph
parameter_list|(
name|OWLOntology
name|ontology
parameter_list|)
block|{
name|MGraph
name|mGraph
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|manager
init|=
name|ontology
operator|.
name|getOWLOntologyManager
argument_list|()
decl_stmt|;
try|try
block|{
name|manager
operator|.
name|saveOntology
argument_list|(
name|ontology
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|ParsingProvider
name|parser
init|=
operator|new
name|JenaParserProvider
argument_list|()
decl_stmt|;
name|mGraph
operator|=
operator|new
name|SimpleMGraph
argument_list|()
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|mGraph
argument_list|,
name|in
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to serialize OWL Ontology "
operator|+
name|ontology
operator|+
literal|"for conversion"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|mGraph
return|;
block|}
comment|/**      * Converts a Clerezza {@link MGraph} to an OWL API {@link OWLOntology}.      *       * @param mGraph      *            {@link MGraph}      * @return the equivalent OWL API {@link OWLOntology}.      */
specifier|public
specifier|static
name|OWLOntology
name|clerezzaGraphToOWLOntology
parameter_list|(
name|TripleCollection
name|graph
parameter_list|)
block|{
name|OWLOntologyManager
name|mgr
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
comment|// Never try to import
name|mgr
operator|.
name|addIRIMapper
argument_list|(
operator|new
name|PhonyIRIMapper
argument_list|(
name|Collections
operator|.
expr|<
name|IRI
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|clerezzaGraphToOWLOntology
argument_list|(
name|graph
argument_list|,
name|mgr
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OWLOntology
name|clerezzaGraphToOWLOntology
parameter_list|(
name|TripleCollection
name|graph
parameter_list|,
name|OWLOntologyManager
name|ontologyManager
parameter_list|)
block|{
comment|/*          * The root graph can be serialized and de-serialized, but before that we should decide what to do          * with imports. We can proceed as follows:          *           * for each import statement, - check if the ontology manager has (1) an ontology or (2) a mapping. -          * if (1), just get it and add it to the merge pool - if (2), do nothing. the ontology manager should          * handle it when loading the root, - if neither, fetch the graph and call the procideure on it          *           * Alternatively, construct the whole reverse imports stack, then traverse it again, get the          * OWLOntology version for each (with the phony mapper set) and add it to the merge pool          *           * If it works, just add all the triples to a TripleCollection, but no, we don't want to store that          * change.          */
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SerializingProvider
name|serializingProvider
init|=
operator|new
name|JenaSerializerProvider
argument_list|()
decl_stmt|;
name|serializingProvider
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|graph
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|OWLOntology
name|ontology
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ontology
operator|=
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyAlreadyExistsException
name|e
parameter_list|)
block|{
name|ontology
operator|=
name|ontologyManager
operator|.
name|getOntology
argument_list|(
name|e
operator|.
name|getOntologyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to serialize OWL Ontology "
operator|+
name|ontology
operator|+
literal|"for conversion"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ontology
return|;
block|}
block|}
end_class

end_unit

