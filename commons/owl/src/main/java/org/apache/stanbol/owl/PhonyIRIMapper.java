begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|owl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyIRIMapper
import|;
end_import

begin_comment
comment|/**  * An ontology IRI mapper that can be used to trick an OWLOntologyManager into believing all imports are  * loaded except for those indicated in the exclusions set. It can be used when imported ontologies have to be  * provided in other ways than by dereferencing URLs, for example when we want to load the same ontology from  * a triple store programmatically.  *   * @author alexdma  *   */
end_comment

begin_class
specifier|public
class|class
name|PhonyIRIMapper
implements|implements
name|OWLOntologyIRIMapper
block|{
specifier|private
name|Set
argument_list|<
name|IRI
argument_list|>
name|exclusions
decl_stmt|;
specifier|private
name|IRI
name|blankIri
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|blankResourcePath
init|=
literal|"/ontologies/blank.owl"
decl_stmt|;
comment|/**      *       * @param notMapped      *            the set of IRIs that will not be mapped by this object, so that the ontology manager will      *            only try to load from these IRIs, unless another attached IRI mapper specifies otherwise.      */
specifier|public
name|PhonyIRIMapper
parameter_list|(
name|Set
argument_list|<
name|IRI
argument_list|>
name|exclusions
parameter_list|)
block|{
name|this
operator|.
name|exclusions
operator|=
name|exclusions
expr_stmt|;
try|try
block|{
name|blankIri
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|blankResourcePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// How can it happen?
block|}
block|}
annotation|@
name|Override
specifier|public
name|IRI
name|getDocumentIRI
parameter_list|(
name|IRI
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|exclusions
operator|==
literal|null
condition|)
return|return
name|blankIri
return|;
if|if
condition|(
name|exclusions
operator|.
name|contains
argument_list|(
name|arg0
argument_list|)
condition|)
return|return
literal|null
return|;
else|else
return|return
name|blankIri
return|;
block|}
block|}
end_class

end_unit

